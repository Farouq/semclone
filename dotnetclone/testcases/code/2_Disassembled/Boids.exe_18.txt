
//  Microsoft (R) .NET Framework IL Disassembler.  Version 4.0.30319.1
//  Copyright (c) Microsoft Corporation.  All rights reserved.



// Metadata version: v4.0.30319
.assembly extern System
{
  .publickeytoken = (B7 7A 5C 56 19 34 E0 89 )                         // .z\V.4..
  .ver 4:0:0:0
}
.assembly extern PresentationCore
{
  .publickeytoken = (31 BF 38 56 AD 36 4E 35 )                         // 1.8V.6N5
  .ver 4:0:0:0
}
.assembly extern mscorlib
{
  .publickeytoken = (B7 7A 5C 56 19 34 E0 89 )                         // .z\V.4..
  .ver 4:0:0:0
}
.assembly extern PresentationFramework
{
  .publickeytoken = (31 BF 38 56 AD 36 4E 35 )                         // 1.8V.6N5
  .ver 4:0:0:0
}
.assembly extern System.Xaml
{
  .publickeytoken = (B7 7A 5C 56 19 34 E0 89 )                         // .z\V.4..
  .ver 4:0:0:0
}
.assembly extern WindowsBase
{
  .publickeytoken = (31 BF 38 56 AD 36 4E 35 )                         // 1.8V.6N5
  .ver 4:0:0:0
}
.assembly extern System.Core
{
  .publickeytoken = (B7 7A 5C 56 19 34 E0 89 )                         // .z\V.4..
  .ver 4:0:0:0
}
.assembly Boids
{

  // --- The following custom attribute is added automatically, do not uncomment -------
  //  .custom instance void [mscorlib]System.Diagnostics.DebuggableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggableAttribute/DebuggingModes) = ( 01 00 07 01 00 00 00 00 ) 

  .custom instance void [mscorlib]System.Runtime.Versioning.TargetFrameworkAttribute::.ctor(string) = ( 01 00 29 2E 4E 45 54 46 72 61 6D 65 77 6F 72 6B   // ..).NETFramework
                                                                                                        2C 56 65 72 73 69 6F 6E 3D 76 34 2E 30 2C 50 72   // ,Version=v4.0,Pr
                                                                                                        6F 66 69 6C 65 3D 43 6C 69 65 6E 74 01 00 54 0E   // ofile=Client..T.
                                                                                                        14 46 72 61 6D 65 77 6F 72 6B 44 69 73 70 6C 61   // .FrameworkDispla
                                                                                                        79 4E 61 6D 65 1F 2E 4E 45 54 20 46 72 61 6D 65   // yName..NET Frame
                                                                                                        77 6F 72 6B 20 34 20 43 6C 69 65 6E 74 20 50 72   // work 4 Client Pr
                                                                                                        6F 66 69 6C 65 )                                  // ofile
  .custom instance void [mscorlib]System.Reflection.AssemblyFileVersionAttribute::.ctor(string) = ( 01 00 07 31 2E 30 2E 30 2E 30 00 00 )             // ...1.0.0.0..
  .custom instance void [mscorlib]System.Runtime.CompilerServices.RuntimeCompatibilityAttribute::.ctor() = ( 01 00 01 00 54 02 16 57 72 61 70 4E 6F 6E 45 78   // ....T..WrapNonEx
                                                                                                             63 65 70 74 69 6F 6E 54 68 72 6F 77 73 01 )       // ceptionThrows.
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilationRelaxationsAttribute::.ctor(int32) = ( 01 00 08 00 00 00 00 00 ) 
  .custom instance void [mscorlib]System.Reflection.AssemblyTitleAttribute::.ctor(string) = ( 01 00 05 42 6F 69 64 73 00 00 )                   // ...Boids..
  .custom instance void [mscorlib]System.Reflection.AssemblyDescriptionAttribute::.ctor(string) = ( 01 00 00 00 00 ) 
  .custom instance void [mscorlib]System.Reflection.AssemblyConfigurationAttribute::.ctor(string) = ( 01 00 00 00 00 ) 
  .custom instance void [mscorlib]System.Reflection.AssemblyCompanyAttribute::.ctor(string) = ( 01 00 15 4D 69 63 72 6F 73 6F 66 74 20 43 6F 72   // ...Microsoft Cor
                                                                                                70 6F 72 61 74 69 6F 6E 00 00 )                   // poration..
  .custom instance void [mscorlib]System.Reflection.AssemblyProductAttribute::.ctor(string) = ( 01 00 05 42 6F 69 64 73 00 00 )                   // ...Boids..
  .custom instance void [mscorlib]System.Reflection.AssemblyCopyrightAttribute::.ctor(string) = ( 01 00 39 43 6F 70 79 72 69 67 68 74 20 C2 A9 20   // ..9Copyright .. 
                                                                                                  4D 69 63 72 6F 73 6F 66 74 20 43 6F 72 70 6F 72   // Microsoft Corpor
                                                                                                  61 74 69 6F 6E 2E 20 20 41 6C 6C 20 72 69 67 68   // ation.  All righ
                                                                                                  74 73 20 72 65 73 65 72 76 65 64 2E 00 00 )       // ts reserved...
  .custom instance void [mscorlib]System.Reflection.AssemblyTrademarkAttribute::.ctor(string) = ( 01 00 00 00 00 ) 
  .custom instance void [mscorlib]System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = ( 01 00 00 00 00 ) 
  .custom instance void [PresentationFramework]System.Windows.ThemeInfoAttribute::.ctor(valuetype [PresentationFramework]System.Windows.ResourceDictionaryLocation,
                                                                                        valuetype [PresentationFramework]System.Windows.ResourceDictionaryLocation) = ( 01 00 00 00 00 00 01 00 00 00 00 00 ) 
  .hash algorithm 0x00008004
  .ver 1:0:0:0
}
.mresource public Boids.g.resources
{
  // Offset: 0x00000000 Length: 0x000BF183
}
.mresource public Boids.Properties.Resources.resources
{
  // Offset: 0x000BF188 Length: 0x000000B4
}
.module Boids.exe
// MVID: {4154C48C-CE09-415E-A5BB-7EECCCAE6901}
.imagebase 0x00400000
.file alignment 0x00000200
.stackreserve 0x00100000
.subsystem 0x0002       // WINDOWS_GUI
.corflags 0x00000001    //  ILONLY
// Image base: 0x03AF0000


// =============== CLASS MEMBERS DECLARATION ===================

.class private auto ansi sealed beforefieldinit ParallelBoids.Properties.Settings
       extends [System]System.Configuration.ApplicationSettingsBase
{
  .custom instance void [System]System.CodeDom.Compiler.GeneratedCodeAttribute::.ctor(string,
                                                                                      string) = ( 01 00 4B 4D 69 63 72 6F 73 6F 66 74 2E 56 69 73   // ..KMicrosoft.Vis
                                                                                                  75 61 6C 53 74 75 64 69 6F 2E 45 64 69 74 6F 72   // ualStudio.Editor
                                                                                                  73 2E 53 65 74 74 69 6E 67 73 44 65 73 69 67 6E   // s.SettingsDesign
                                                                                                  65 72 2E 53 65 74 74 69 6E 67 73 53 69 6E 67 6C   // er.SettingsSingl
                                                                                                  65 46 69 6C 65 47 65 6E 65 72 61 74 6F 72 08 31   // eFileGenerator.1
                                                                                                  30 2E 30 2E 30 2E 30 00 00 )                      // 0.0.0.0..
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
  .field private static class ParallelBoids.Properties.Settings defaultInstance
  .method public hidebysig specialname static 
          class ParallelBoids.Properties.Settings 
          get_Default() cil managed
  {
    // Code size       11 (0xb)
    .maxstack  1
    .locals init ([0] class ParallelBoids.Properties.Settings CS$1$0000)
    .language '{3F5162F8-07C6-11D3-9053-00C04FA302A1}', '{994B45C4-E6E9-11D2-903F-00C04FA302A1}', '{5A869D0B-6611-11D3-BD2A-0000F80849BD}'
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Boids\Boids_CSharp\Properties\Settings.Designer.cs' 
//000025:             {
    IL_0000:  nop
//000026:                 return defaultInstance;
    IL_0001:  ldsfld     class ParallelBoids.Properties.Settings ParallelBoids.Properties.Settings::defaultInstance
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

//000027:             }
    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method Settings::get_Default

  .method public hidebysig specialname rtspecialname 
          instance void  .ctor() cil managed
  {
    // Code size       7 (0x7)
    .maxstack  8
    IL_0000:  ldarg.0
    IL_0001:  call       instance void [System]System.Configuration.ApplicationSettingsBase::.ctor()
    IL_0006:  ret
  } // end of method Settings::.ctor

  .method private hidebysig specialname rtspecialname static 
          void  .cctor() cil managed
  {
    // Code size       21 (0x15)
    .maxstack  8
//000020:         private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
    IL_0000:  newobj     instance void ParallelBoids.Properties.Settings::.ctor()
    IL_0005:  call       class [System]System.Configuration.SettingsBase [System]System.Configuration.SettingsBase::Synchronized(class [System]System.Configuration.SettingsBase)
    IL_000a:  castclass  ParallelBoids.Properties.Settings
    IL_000f:  stsfld     class ParallelBoids.Properties.Settings ParallelBoids.Properties.Settings::defaultInstance
//000021: 
//000022:         public static Settings Default
//000023:         {
//000024:             get
//000025:             {
//000026:                 return defaultInstance;
//000027:             }
//000028:         }
//000029:     }
//000030: }
    IL_0014:  ret
  } // end of method Settings::.cctor

  .property class ParallelBoids.Properties.Settings
          Default()
  {
    .get class ParallelBoids.Properties.Settings ParallelBoids.Properties.Settings::get_Default()
  } // end of property Settings::Default
} // end of class ParallelBoids.Properties.Settings

.class private auto ansi beforefieldinit ParallelBoids.Boid
       extends [PresentationCore]System.Windows.Media.Media3D.ModelVisual3D
{
  .field private static literal int32 MODEL_SCALE = int32(0x00000003)
  .field private static initonly valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D UNIT_Y
  .field private class [PresentationCore]System.Windows.Media.Media3D.AxisAngleRotation3D _rotation
  .field private class [PresentationCore]System.Windows.Media.Media3D.TranslateTransform3D _translation
  .field private class [mscorlib]System.Tuple`2<valuetype [PresentationCore]System.Windows.Media.Color,valuetype [PresentationCore]System.Windows.Media.Color> _colors
  .field private class [PresentationCore]System.Windows.Media.SolidColorBrush _materialBrush
  .field private class [PresentationCore]System.Windows.Media.SolidColorBrush _backmaterialBrush
  .field private valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D '<Velocity>k__BackingField'
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
  .field private valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D '<Position>k__BackingField'
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
  .field private valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D '<PreviousVelocity>k__BackingField'
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
  .field private valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D '<PreviousPosition>k__BackingField'
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
  .method public hidebysig specialname rtspecialname 
          instance void  .ctor(class [mscorlib]System.Tuple`2<valuetype [PresentationCore]System.Windows.Media.Color,valuetype [PresentationCore]System.Windows.Media.Color> colors) cil managed
  {
    // Code size       333 (0x14d)
    .maxstack  5
    .locals init ([0] class [PresentationCore]System.Windows.Media.Media3D.Transform3DGroup t,
             [1] class [PresentationCore]System.Windows.Media.Media3D.GeometryModel3D '<>g__initLocal0',
             [2] class [PresentationCore]System.Windows.Media.Media3D.MeshGeometry3D '<>g__initLocal1',
             [3] bool CS$4$0000,
             [4] valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D CS$0$0001)
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Boids\Boids_CSharp\Boid.cs' 
//000037:         public Boid(Tuple<Color,Color> colors)
    IL_0000:  ldarg.0
    IL_0001:  call       instance void [PresentationCore]System.Windows.Media.Media3D.ModelVisual3D::.ctor()
    IL_0006:  nop
//000038:         {
    IL_0007:  nop
//000039:             if (colors == null) throw new ArgumentNullException("colors");
    IL_0008:  ldarg.1
    IL_0009:  ldnull
    IL_000a:  ceq
    IL_000c:  ldc.i4.0
    IL_000d:  ceq
    IL_000f:  stloc.3
//000040: 
//000041:             // Store the colors
//000042:             _colors = colors;
//000043:             _materialBrush = new SolidColorBrush(colors.Item1);
//000044:             _backmaterialBrush = new SolidColorBrush(colors.Item2);
//000045: 
//000046:             // Set up the boid's model
//000047:             base.Content = new GeometryModel3D()
//000048:             {
//000049:                 Material = new DiffuseMaterial(_materialBrush),
//000050:                 BackMaterial = new DiffuseMaterial(_backmaterialBrush),
//000051:                 Geometry = new MeshGeometry3D()
//000052:                 {
//000053:                     // Two perpendicular triangles pointing up
//000054:                     Positions = Point3DCollection.Parse("0 1 0  1 -1 0  -1 -1 0  0 1 0  0 -1 1  0 -1 -1"), 
//000055:                     Normals = Vector3DCollection.Parse("0 0 -1  1 0 0"),
//000056:                     TriangleIndices = Int32Collection.Parse("0 1 2  3 4 5")
//000057:                 }
//000058:             };
//000059: 
//000060:             // Initialize its rotation and translation
//000061:             _rotation = new AxisAngleRotation3D(UNIT_Y, 0);
//000062:             _translation = new TranslateTransform3D(new Vector3D());
//000063: 
//000064:             // Add all of the necessary transforms
//000065:             var t = new Transform3DGroup();
//000066:             t.Children.Add(new ScaleTransform3D(MODEL_SCALE, MODEL_SCALE, MODEL_SCALE));
//000067:             t.Children.Add(new RotateTransform3D(_rotation));
//000068:             t.Children.Add(_translation);
//000069:             base.Transform = t;
//000070:         }
//000071: 
//000072:         /// <summary>Gets or sets the boid's velocity.</summary>
//000073:         public Vector3D Velocity { get; set; }
//000074:         /// <summary>Gets or sets the boid's position.</summary>
//000075:         public Vector3D Position { get; set; }
//000076: 
//000077:         /// <summary>Gets the boid's previous velocity.</summary>
//000078:         public Vector3D PreviousVelocity { get; private set; }
//000079:         /// <summary>Gets the boid's previous position.</summary>
//000080:         public Vector3D PreviousPosition { get; private set; }
//000081: 
//000082:         /// <summary>Stores the current position and velocity into the previous.</summary>
//000083:         public void StorePositionAndVelocityIntoPrevious()
//000084:         {
//000085:             PreviousVelocity = Velocity;
//000086:             PreviousPosition = Position;
//000087:         }
//000088: 
//000089:         /// <summary>Sets the boid's rotation and translation for the scene.</summary>
//000090:         public void TransformByPositionAndVelocity()
//000091:         {
//000092:             var direction = Velocity;
//000093:             direction.Normalize();
//000094: 
//000095:             _rotation.Axis = Vector3D.CrossProduct(UNIT_Y, direction);
//000096:             _rotation.Angle = Math.Acos(Vector3D.DotProduct(UNIT_Y, direction) / (UNIT_Y.Length * direction.Length)) * (180 / Math.PI);
//000097: 
//000098:             var pos = Position;
//000099:             _translation.OffsetX = pos.X;
//000100:             _translation.OffsetY = pos.Y;
//000101:             _translation.OffsetZ = pos.Z;
//000102:         }
//000103: 
//000104:         public void ToggleTranslucency()
//000105:         {
//000106:             _materialBrush.Color = Color.FromArgb(
//000107:                 _materialBrush.Color.A < 255 ? (byte)255 : (byte)25,
//000108:                 _materialBrush.Color.R,
//000109:                 _materialBrush.Color.G,
//000110:                 _materialBrush.Color.B);
//000111:             _backmaterialBrush.Color = Color.FromArgb(
//000112:                 _backmaterialBrush.Color.A < 255 ? (byte)255 : (byte)25,
//000113:                 _backmaterialBrush.Color.R,
//000114:                 _backmaterialBrush.Color.G,
//000115:                 _backmaterialBrush.Color.B);
//000116:         }
//000117: 
//000118:         /// <summary>Computes the angle between two boids based on the current boid's direction.</summary>
//000119:         /// <param name="other">The other boid.</param>
//000120:         /// <returns>The angle.</returns>
//000121:         public double ComputeAngle(Boid other)
//000122:         {
//000123:             if (other == null) throw new ArgumentNullException("comparisonBoid");
//000124:             return Math.Acos(
//000125:                 Vector3D.DotProduct(this.PreviousVelocity, other.PreviousPosition - this.PreviousPosition) /
//000126:                     (this.PreviousVelocity.Length * (other.PreviousPosition - this.PreviousPosition).Length))
//000127:                 * (180 / Math.PI);
//000128:         }
//000129: 
//000130:         MeshGeometry3D GenerateSphere(Point3D center, double radius, int slices, int stacks)
//000131:         {
//000132:             // Create the MeshGeometry3D.
//000133:             MeshGeometry3D mesh = new MeshGeometry3D();
//000134: 
//000135:             // Fill the Position, Normals, and TextureCoordinates collections.
//000136:             for (int stack = 0; stack <= stacks; stack++)
//000137:             {
//000138:                 double phi = Math.PI / 2 - stack * Math.PI / stacks;
//000139:                 double y = radius * Math.Sin(phi);
//000140:                 double scale = -radius * Math.Cos(phi);
//000141: 
//000142:                 for (int slice = 0; slice <= slices; slice++)
//000143:                 {
//000144:                     double theta = slice * 2 * Math.PI / slices;
//000145:                     double x = scale * Math.Sin(theta);
//000146:                     double z = scale * Math.Cos(theta);
//000147: 
//000148:                     Vector3D normal = new Vector3D(x, y, z);
//000149:                     mesh.Normals.Add(normal);
//000150:                     mesh.Positions.Add(normal + center);
//000151:                     mesh.TextureCoordinates.Add(new Point((double)slice / slices, (double)stack / stacks));
//000152:                 }
//000153:             }
//000154: 
//000155:             // Fill the TriangleIndices collection.
//000156:             for (int stack = 0; stack < stacks; stack++)
//000157:             {
//000158:                 for (int slice = 0; slice < slices; slice++)
//000159:                 {
//000160:                     int n = slices + 1; // Keep the line length down.
//000161: 
//000162:                     if (stack != 0)
//000163:                     {
//000164:                         mesh.TriangleIndices.Add((stack + 0) * n + slice);
//000165:                         mesh.TriangleIndices.Add((stack + 1) * n + slice);
//000166:                         mesh.TriangleIndices.Add((stack + 0) * n + slice + 1);
//000167:                     }
//000168:                     if (stack != stacks - 1)
//000169:                     {
//000170:                         mesh.TriangleIndices.Add((stack + 0) * n + slice + 1);
//000171:                         mesh.TriangleIndices.Add((stack + 1) * n + slice);
//000172:                         mesh.TriangleIndices.Add((stack + 1) * n + slice + 1);
//000173:                     }
//000174:                 }
//000175:             }
//000176:             return mesh;
//000177:         }
//000178:     }
//000179: }
    IL_0010:  ldloc.3
    IL_0011:  brtrue.s   IL_001e

//000039:             if (colors == null) throw new ArgumentNullException("colors");
    IL_0013:  ldstr      "colors"
    IL_0018:  newobj     instance void [mscorlib]System.ArgumentNullException::.ctor(string)
    IL_001d:  throw

//000040: 
//000041:             // Store the colors
//000042:             _colors = colors;
    IL_001e:  ldarg.0
    IL_001f:  ldarg.1
    IL_0020:  stfld      class [mscorlib]System.Tuple`2<valuetype [PresentationCore]System.Windows.Media.Color,valuetype [PresentationCore]System.Windows.Media.Color> ParallelBoids.Boid::_colors
//000043:             _materialBrush = new SolidColorBrush(colors.Item1);
    IL_0025:  ldarg.0
    IL_0026:  ldarg.1
    IL_0027:  callvirt   instance !0 class [mscorlib]System.Tuple`2<valuetype [PresentationCore]System.Windows.Media.Color,valuetype [PresentationCore]System.Windows.Media.Color>::get_Item1()
    IL_002c:  newobj     instance void [PresentationCore]System.Windows.Media.SolidColorBrush::.ctor(valuetype [PresentationCore]System.Windows.Media.Color)
    IL_0031:  stfld      class [PresentationCore]System.Windows.Media.SolidColorBrush ParallelBoids.Boid::_materialBrush
//000044:             _backmaterialBrush = new SolidColorBrush(colors.Item2);
    IL_0036:  ldarg.0
    IL_0037:  ldarg.1
    IL_0038:  callvirt   instance !1 class [mscorlib]System.Tuple`2<valuetype [PresentationCore]System.Windows.Media.Color,valuetype [PresentationCore]System.Windows.Media.Color>::get_Item2()
    IL_003d:  newobj     instance void [PresentationCore]System.Windows.Media.SolidColorBrush::.ctor(valuetype [PresentationCore]System.Windows.Media.Color)
    IL_0042:  stfld      class [PresentationCore]System.Windows.Media.SolidColorBrush ParallelBoids.Boid::_backmaterialBrush
//000045: 
//000046:             // Set up the boid's model
//000047:             base.Content = new GeometryModel3D()
    IL_0047:  ldarg.0
    IL_0048:  newobj     instance void [PresentationCore]System.Windows.Media.Media3D.GeometryModel3D::.ctor()
    IL_004d:  stloc.1
    IL_004e:  ldloc.1
    IL_004f:  ldarg.0
    IL_0050:  ldfld      class [PresentationCore]System.Windows.Media.SolidColorBrush ParallelBoids.Boid::_materialBrush
    IL_0055:  newobj     instance void [PresentationCore]System.Windows.Media.Media3D.DiffuseMaterial::.ctor(class [PresentationCore]System.Windows.Media.Brush)
    IL_005a:  callvirt   instance void [PresentationCore]System.Windows.Media.Media3D.GeometryModel3D::set_Material(class [PresentationCore]System.Windows.Media.Media3D.Material)
    IL_005f:  nop
    IL_0060:  ldloc.1
    IL_0061:  ldarg.0
    IL_0062:  ldfld      class [PresentationCore]System.Windows.Media.SolidColorBrush ParallelBoids.Boid::_backmaterialBrush
    IL_0067:  newobj     instance void [PresentationCore]System.Windows.Media.Media3D.DiffuseMaterial::.ctor(class [PresentationCore]System.Windows.Media.Brush)
    IL_006c:  callvirt   instance void [PresentationCore]System.Windows.Media.Media3D.GeometryModel3D::set_BackMaterial(class [PresentationCore]System.Windows.Media.Media3D.Material)
    IL_0071:  nop
    IL_0072:  ldloc.1
    IL_0073:  newobj     instance void [PresentationCore]System.Windows.Media.Media3D.MeshGeometry3D::.ctor()
    IL_0078:  stloc.2
    IL_0079:  ldloc.2
    IL_007a:  ldstr      "0 1 0  1 -1 0  -1 -1 0  0 1 0  0 -1 1  0 -1 -1"
    IL_007f:  call       class [PresentationCore]System.Windows.Media.Media3D.Point3DCollection [PresentationCore]System.Windows.Media.Media3D.Point3DCollection::Parse(string)
    IL_0084:  callvirt   instance void [PresentationCore]System.Windows.Media.Media3D.MeshGeometry3D::set_Positions(class [PresentationCore]System.Windows.Media.Media3D.Point3DCollection)
    IL_0089:  nop
    IL_008a:  ldloc.2
    IL_008b:  ldstr      "0 0 -1  1 0 0"
    IL_0090:  call       class [PresentationCore]System.Windows.Media.Media3D.Vector3DCollection [PresentationCore]System.Windows.Media.Media3D.Vector3DCollection::Parse(string)
    IL_0095:  callvirt   instance void [PresentationCore]System.Windows.Media.Media3D.MeshGeometry3D::set_Normals(class [PresentationCore]System.Windows.Media.Media3D.Vector3DCollection)
    IL_009a:  nop
    IL_009b:  ldloc.2
    IL_009c:  ldstr      "0 1 2  3 4 5"
    IL_00a1:  call       class [PresentationCore]System.Windows.Media.Int32Collection [PresentationCore]System.Windows.Media.Int32Collection::Parse(string)
    IL_00a6:  callvirt   instance void [PresentationCore]System.Windows.Media.Media3D.MeshGeometry3D::set_TriangleIndices(class [PresentationCore]System.Windows.Media.Int32Collection)
    IL_00ab:  nop
    IL_00ac:  ldloc.2
    IL_00ad:  callvirt   instance void [PresentationCore]System.Windows.Media.Media3D.GeometryModel3D::set_Geometry(class [PresentationCore]System.Windows.Media.Media3D.Geometry3D)
    IL_00b2:  nop
    IL_00b3:  ldloc.1
    IL_00b4:  call       instance void [PresentationCore]System.Windows.Media.Media3D.ModelVisual3D::set_Content(class [PresentationCore]System.Windows.Media.Media3D.Model3D)
    IL_00b9:  nop
//000048:             {
//000049:                 Material = new DiffuseMaterial(_materialBrush),
//000050:                 BackMaterial = new DiffuseMaterial(_backmaterialBrush),
//000051:                 Geometry = new MeshGeometry3D()
//000052:                 {
//000053:                     // Two perpendicular triangles pointing up
//000054:                     Positions = Point3DCollection.Parse("0 1 0  1 -1 0  -1 -1 0  0 1 0  0 -1 1  0 -1 -1"), 
//000055:                     Normals = Vector3DCollection.Parse("0 0 -1  1 0 0"),
//000056:                     TriangleIndices = Int32Collection.Parse("0 1 2  3 4 5")
//000057:                 }
//000058:             };
//000059: 
//000060:             // Initialize its rotation and translation
//000061:             _rotation = new AxisAngleRotation3D(UNIT_Y, 0);
    IL_00ba:  ldarg.0
    IL_00bb:  ldsfld     valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.Boid::UNIT_Y
    IL_00c0:  ldc.r8     0.0
    IL_00c9:  newobj     instance void [PresentationCore]System.Windows.Media.Media3D.AxisAngleRotation3D::.ctor(valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D,
                                                                                                                 float64)
    IL_00ce:  stfld      class [PresentationCore]System.Windows.Media.Media3D.AxisAngleRotation3D ParallelBoids.Boid::_rotation
//000062:             _translation = new TranslateTransform3D(new Vector3D());
    IL_00d3:  ldarg.0
    IL_00d4:  ldloca.s   CS$0$0001
    IL_00d6:  initobj    [PresentationCore]System.Windows.Media.Media3D.Vector3D
    IL_00dc:  ldloc.s    CS$0$0001
    IL_00de:  newobj     instance void [PresentationCore]System.Windows.Media.Media3D.TranslateTransform3D::.ctor(valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D)
    IL_00e3:  stfld      class [PresentationCore]System.Windows.Media.Media3D.TranslateTransform3D ParallelBoids.Boid::_translation
//000063: 
//000064:             // Add all of the necessary transforms
//000065:             var t = new Transform3DGroup();
    IL_00e8:  newobj     instance void [PresentationCore]System.Windows.Media.Media3D.Transform3DGroup::.ctor()
    IL_00ed:  stloc.0
//000066:             t.Children.Add(new ScaleTransform3D(MODEL_SCALE, MODEL_SCALE, MODEL_SCALE));
    IL_00ee:  ldloc.0
    IL_00ef:  callvirt   instance class [PresentationCore]System.Windows.Media.Media3D.Transform3DCollection [PresentationCore]System.Windows.Media.Media3D.Transform3DGroup::get_Children()
    IL_00f4:  ldc.r8     3.
    IL_00fd:  ldc.r8     3.
    IL_0106:  ldc.r8     3.
    IL_010f:  newobj     instance void [PresentationCore]System.Windows.Media.Media3D.ScaleTransform3D::.ctor(float64,
                                                                                                              float64,
                                                                                                              float64)
    IL_0114:  callvirt   instance void [PresentationCore]System.Windows.Media.Media3D.Transform3DCollection::Add(class [PresentationCore]System.Windows.Media.Media3D.Transform3D)
    IL_0119:  nop
//000067:             t.Children.Add(new RotateTransform3D(_rotation));
    IL_011a:  ldloc.0
    IL_011b:  callvirt   instance class [PresentationCore]System.Windows.Media.Media3D.Transform3DCollection [PresentationCore]System.Windows.Media.Media3D.Transform3DGroup::get_Children()
    IL_0120:  ldarg.0
    IL_0121:  ldfld      class [PresentationCore]System.Windows.Media.Media3D.AxisAngleRotation3D ParallelBoids.Boid::_rotation
    IL_0126:  newobj     instance void [PresentationCore]System.Windows.Media.Media3D.RotateTransform3D::.ctor(class [PresentationCore]System.Windows.Media.Media3D.Rotation3D)
    IL_012b:  callvirt   instance void [PresentationCore]System.Windows.Media.Media3D.Transform3DCollection::Add(class [PresentationCore]System.Windows.Media.Media3D.Transform3D)
    IL_0130:  nop
//000068:             t.Children.Add(_translation);
    IL_0131:  ldloc.0
    IL_0132:  callvirt   instance class [PresentationCore]System.Windows.Media.Media3D.Transform3DCollection [PresentationCore]System.Windows.Media.Media3D.Transform3DGroup::get_Children()
    IL_0137:  ldarg.0
    IL_0138:  ldfld      class [PresentationCore]System.Windows.Media.Media3D.TranslateTransform3D ParallelBoids.Boid::_translation
    IL_013d:  callvirt   instance void [PresentationCore]System.Windows.Media.Media3D.Transform3DCollection::Add(class [PresentationCore]System.Windows.Media.Media3D.Transform3D)
    IL_0142:  nop
//000069:             base.Transform = t;
    IL_0143:  ldarg.0
    IL_0144:  ldloc.0
    IL_0145:  call       instance void [PresentationCore]System.Windows.Media.Media3D.ModelVisual3D::set_Transform(class [PresentationCore]System.Windows.Media.Media3D.Transform3D)
    IL_014a:  nop
//000070:         }
    IL_014b:  nop
    IL_014c:  ret
  } // end of method Boid::.ctor

  .method public hidebysig specialname instance valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D 
          get_Velocity() cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       11 (0xb)
    .maxstack  1
    .locals init (valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D V_0)
    IL_0000:  ldarg.0
    IL_0001:  ldfld      valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.Boid::'<Velocity>k__BackingField'
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method Boid::get_Velocity

  .method public hidebysig specialname instance void 
          set_Velocity(valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D 'value') cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       8 (0x8)
    .maxstack  8
    IL_0000:  ldarg.0
    IL_0001:  ldarg.1
    IL_0002:  stfld      valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.Boid::'<Velocity>k__BackingField'
    IL_0007:  ret
  } // end of method Boid::set_Velocity

  .method public hidebysig specialname instance valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D 
          get_Position() cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       11 (0xb)
    .maxstack  1
    .locals init (valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D V_0)
    IL_0000:  ldarg.0
    IL_0001:  ldfld      valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.Boid::'<Position>k__BackingField'
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method Boid::get_Position

  .method public hidebysig specialname instance void 
          set_Position(valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D 'value') cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       8 (0x8)
    .maxstack  8
    IL_0000:  ldarg.0
    IL_0001:  ldarg.1
    IL_0002:  stfld      valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.Boid::'<Position>k__BackingField'
    IL_0007:  ret
  } // end of method Boid::set_Position

  .method public hidebysig specialname instance valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D 
          get_PreviousVelocity() cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       11 (0xb)
    .maxstack  1
    .locals init (valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D V_0)
    IL_0000:  ldarg.0
    IL_0001:  ldfld      valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.Boid::'<PreviousVelocity>k__BackingField'
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method Boid::get_PreviousVelocity

  .method private hidebysig specialname instance void 
          set_PreviousVelocity(valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D 'value') cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       8 (0x8)
    .maxstack  8
    IL_0000:  ldarg.0
    IL_0001:  ldarg.1
    IL_0002:  stfld      valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.Boid::'<PreviousVelocity>k__BackingField'
    IL_0007:  ret
  } // end of method Boid::set_PreviousVelocity

  .method public hidebysig specialname instance valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D 
          get_PreviousPosition() cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       11 (0xb)
    .maxstack  1
    .locals init (valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D V_0)
    IL_0000:  ldarg.0
    IL_0001:  ldfld      valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.Boid::'<PreviousPosition>k__BackingField'
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method Boid::get_PreviousPosition

  .method private hidebysig specialname instance void 
          set_PreviousPosition(valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D 'value') cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       8 (0x8)
    .maxstack  8
    IL_0000:  ldarg.0
    IL_0001:  ldarg.1
    IL_0002:  stfld      valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.Boid::'<PreviousPosition>k__BackingField'
    IL_0007:  ret
  } // end of method Boid::set_PreviousPosition

  .method public hidebysig instance void 
          StorePositionAndVelocityIntoPrevious() cil managed
  {
    // Code size       28 (0x1c)
    .maxstack  8
//000071: 
//000072:         /// <summary>Gets or sets the boid's velocity.</summary>
//000073:         public Vector3D Velocity { get; set; }
//000074:         /// <summary>Gets or sets the boid's position.</summary>
//000075:         public Vector3D Position { get; set; }
//000076: 
//000077:         /// <summary>Gets the boid's previous velocity.</summary>
//000078:         public Vector3D PreviousVelocity { get; private set; }
//000079:         /// <summary>Gets the boid's previous position.</summary>
//000080:         public Vector3D PreviousPosition { get; private set; }
//000081: 
//000082:         /// <summary>Stores the current position and velocity into the previous.</summary>
//000083:         public void StorePositionAndVelocityIntoPrevious()
//000084:         {
    IL_0000:  nop
//000085:             PreviousVelocity = Velocity;
    IL_0001:  ldarg.0
    IL_0002:  ldarg.0
    IL_0003:  call       instance valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.Boid::get_Velocity()
    IL_0008:  call       instance void ParallelBoids.Boid::set_PreviousVelocity(valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D)
    IL_000d:  nop
//000086:             PreviousPosition = Position;
    IL_000e:  ldarg.0
    IL_000f:  ldarg.0
    IL_0010:  call       instance valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.Boid::get_Position()
    IL_0015:  call       instance void ParallelBoids.Boid::set_PreviousPosition(valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D)
    IL_001a:  nop
//000087:         }
    IL_001b:  ret
  } // end of method Boid::StorePositionAndVelocityIntoPrevious

  .method public hidebysig instance void 
          TransformByPositionAndVelocity() cil managed
  {
    // Code size       164 (0xa4)
    .maxstack  4
    .locals init ([0] valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D direction,
             [1] valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D pos,
             [2] valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D CS$0$0000)
//000088: 
//000089:         /// <summary>Sets the boid's rotation and translation for the scene.</summary>
//000090:         public void TransformByPositionAndVelocity()
//000091:         {
    IL_0000:  nop
//000092:             var direction = Velocity;
    IL_0001:  ldarg.0
    IL_0002:  call       instance valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.Boid::get_Velocity()
    IL_0007:  stloc.0
//000093:             direction.Normalize();
    IL_0008:  ldloca.s   direction
    IL_000a:  call       instance void [PresentationCore]System.Windows.Media.Media3D.Vector3D::Normalize()
    IL_000f:  nop
//000094: 
//000095:             _rotation.Axis = Vector3D.CrossProduct(UNIT_Y, direction);
    IL_0010:  ldarg.0
    IL_0011:  ldfld      class [PresentationCore]System.Windows.Media.Media3D.AxisAngleRotation3D ParallelBoids.Boid::_rotation
    IL_0016:  ldsfld     valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.Boid::UNIT_Y
    IL_001b:  ldloc.0
    IL_001c:  call       valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D [PresentationCore]System.Windows.Media.Media3D.Vector3D::CrossProduct(valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D,
                                                                                                                                                                 valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D)
    IL_0021:  callvirt   instance void [PresentationCore]System.Windows.Media.Media3D.AxisAngleRotation3D::set_Axis(valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D)
    IL_0026:  nop
//000096:             _rotation.Angle = Math.Acos(Vector3D.DotProduct(UNIT_Y, direction) / (UNIT_Y.Length * direction.Length)) * (180 / Math.PI);
    IL_0027:  ldarg.0
    IL_0028:  ldfld      class [PresentationCore]System.Windows.Media.Media3D.AxisAngleRotation3D ParallelBoids.Boid::_rotation
    IL_002d:  ldsfld     valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.Boid::UNIT_Y
    IL_0032:  ldloc.0
    IL_0033:  call       float64 [PresentationCore]System.Windows.Media.Media3D.Vector3D::DotProduct(valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D,
                                                                                                     valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D)
    IL_0038:  ldsfld     valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.Boid::UNIT_Y
    IL_003d:  stloc.2
    IL_003e:  ldloca.s   CS$0$0000
    IL_0040:  call       instance float64 [PresentationCore]System.Windows.Media.Media3D.Vector3D::get_Length()
    IL_0045:  ldloca.s   direction
    IL_0047:  call       instance float64 [PresentationCore]System.Windows.Media.Media3D.Vector3D::get_Length()
    IL_004c:  mul
    IL_004d:  div
    IL_004e:  call       float64 [mscorlib]System.Math::Acos(float64)
    IL_0053:  ldc.r8     57.295779513082323
    IL_005c:  mul
    IL_005d:  callvirt   instance void [PresentationCore]System.Windows.Media.Media3D.AxisAngleRotation3D::set_Angle(float64)
    IL_0062:  nop
//000097: 
//000098:             var pos = Position;
    IL_0063:  ldarg.0
    IL_0064:  call       instance valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.Boid::get_Position()
    IL_0069:  stloc.1
//000099:             _translation.OffsetX = pos.X;
    IL_006a:  ldarg.0
    IL_006b:  ldfld      class [PresentationCore]System.Windows.Media.Media3D.TranslateTransform3D ParallelBoids.Boid::_translation
    IL_0070:  ldloca.s   pos
    IL_0072:  call       instance float64 [PresentationCore]System.Windows.Media.Media3D.Vector3D::get_X()
    IL_0077:  callvirt   instance void [PresentationCore]System.Windows.Media.Media3D.TranslateTransform3D::set_OffsetX(float64)
    IL_007c:  nop
//000100:             _translation.OffsetY = pos.Y;
    IL_007d:  ldarg.0
    IL_007e:  ldfld      class [PresentationCore]System.Windows.Media.Media3D.TranslateTransform3D ParallelBoids.Boid::_translation
    IL_0083:  ldloca.s   pos
    IL_0085:  call       instance float64 [PresentationCore]System.Windows.Media.Media3D.Vector3D::get_Y()
    IL_008a:  callvirt   instance void [PresentationCore]System.Windows.Media.Media3D.TranslateTransform3D::set_OffsetY(float64)
    IL_008f:  nop
//000101:             _translation.OffsetZ = pos.Z;
    IL_0090:  ldarg.0
    IL_0091:  ldfld      class [PresentationCore]System.Windows.Media.Media3D.TranslateTransform3D ParallelBoids.Boid::_translation
    IL_0096:  ldloca.s   pos
    IL_0098:  call       instance float64 [PresentationCore]System.Windows.Media.Media3D.Vector3D::get_Z()
    IL_009d:  callvirt   instance void [PresentationCore]System.Windows.Media.Media3D.TranslateTransform3D::set_OffsetZ(float64)
    IL_00a2:  nop
//000102:         }
    IL_00a3:  ret
  } // end of method Boid::TransformByPositionAndVelocity

  .method public hidebysig instance void 
          ToggleTranslucency() cil managed
  {
    // Code size       220 (0xdc)
    .maxstack  5
    .locals init ([0] valuetype [PresentationCore]System.Windows.Media.Color CS$0$0000)
//000103: 
//000104:         public void ToggleTranslucency()
//000105:         {
    IL_0000:  nop
//000106:             _materialBrush.Color = Color.FromArgb(
    IL_0001:  ldarg.0
    IL_0002:  ldfld      class [PresentationCore]System.Windows.Media.SolidColorBrush ParallelBoids.Boid::_materialBrush
    IL_0007:  ldarg.0
    IL_0008:  ldfld      class [PresentationCore]System.Windows.Media.SolidColorBrush ParallelBoids.Boid::_materialBrush
    IL_000d:  callvirt   instance valuetype [PresentationCore]System.Windows.Media.Color [PresentationCore]System.Windows.Media.SolidColorBrush::get_Color()
    IL_0012:  stloc.0
    IL_0013:  ldloca.s   CS$0$0000
    IL_0015:  call       instance uint8 [PresentationCore]System.Windows.Media.Color::get_A()
    IL_001a:  ldc.i4     0xff
    IL_001f:  blt.s      IL_0025

    IL_0021:  ldc.i4.s   25
    IL_0023:  br.s       IL_002a

    IL_0025:  ldc.i4     0xff
    IL_002a:  ldarg.0
    IL_002b:  ldfld      class [PresentationCore]System.Windows.Media.SolidColorBrush ParallelBoids.Boid::_materialBrush
    IL_0030:  callvirt   instance valuetype [PresentationCore]System.Windows.Media.Color [PresentationCore]System.Windows.Media.SolidColorBrush::get_Color()
    IL_0035:  stloc.0
    IL_0036:  ldloca.s   CS$0$0000
    IL_0038:  call       instance uint8 [PresentationCore]System.Windows.Media.Color::get_R()
    IL_003d:  ldarg.0
    IL_003e:  ldfld      class [PresentationCore]System.Windows.Media.SolidColorBrush ParallelBoids.Boid::_materialBrush
    IL_0043:  callvirt   instance valuetype [PresentationCore]System.Windows.Media.Color [PresentationCore]System.Windows.Media.SolidColorBrush::get_Color()
    IL_0048:  stloc.0
    IL_0049:  ldloca.s   CS$0$0000
    IL_004b:  call       instance uint8 [PresentationCore]System.Windows.Media.Color::get_G()
    IL_0050:  ldarg.0
    IL_0051:  ldfld      class [PresentationCore]System.Windows.Media.SolidColorBrush ParallelBoids.Boid::_materialBrush
    IL_0056:  callvirt   instance valuetype [PresentationCore]System.Windows.Media.Color [PresentationCore]System.Windows.Media.SolidColorBrush::get_Color()
    IL_005b:  stloc.0
    IL_005c:  ldloca.s   CS$0$0000
    IL_005e:  call       instance uint8 [PresentationCore]System.Windows.Media.Color::get_B()
    IL_0063:  call       valuetype [PresentationCore]System.Windows.Media.Color [PresentationCore]System.Windows.Media.Color::FromArgb(uint8,
                                                                                                                                       uint8,
                                                                                                                                       uint8,
                                                                                                                                       uint8)
    IL_0068:  callvirt   instance void [PresentationCore]System.Windows.Media.SolidColorBrush::set_Color(valuetype [PresentationCore]System.Windows.Media.Color)
    IL_006d:  nop
//000107:                 _materialBrush.Color.A < 255 ? (byte)255 : (byte)25,
//000108:                 _materialBrush.Color.R,
//000109:                 _materialBrush.Color.G,
//000110:                 _materialBrush.Color.B);
//000111:             _backmaterialBrush.Color = Color.FromArgb(
    IL_006e:  ldarg.0
    IL_006f:  ldfld      class [PresentationCore]System.Windows.Media.SolidColorBrush ParallelBoids.Boid::_backmaterialBrush
    IL_0074:  ldarg.0
    IL_0075:  ldfld      class [PresentationCore]System.Windows.Media.SolidColorBrush ParallelBoids.Boid::_backmaterialBrush
    IL_007a:  callvirt   instance valuetype [PresentationCore]System.Windows.Media.Color [PresentationCore]System.Windows.Media.SolidColorBrush::get_Color()
    IL_007f:  stloc.0
    IL_0080:  ldloca.s   CS$0$0000
    IL_0082:  call       instance uint8 [PresentationCore]System.Windows.Media.Color::get_A()
    IL_0087:  ldc.i4     0xff
    IL_008c:  blt.s      IL_0092

    IL_008e:  ldc.i4.s   25
    IL_0090:  br.s       IL_0097

    IL_0092:  ldc.i4     0xff
    IL_0097:  ldarg.0
    IL_0098:  ldfld      class [PresentationCore]System.Windows.Media.SolidColorBrush ParallelBoids.Boid::_backmaterialBrush
    IL_009d:  callvirt   instance valuetype [PresentationCore]System.Windows.Media.Color [PresentationCore]System.Windows.Media.SolidColorBrush::get_Color()
    IL_00a2:  stloc.0
    IL_00a3:  ldloca.s   CS$0$0000
    IL_00a5:  call       instance uint8 [PresentationCore]System.Windows.Media.Color::get_R()
    IL_00aa:  ldarg.0
    IL_00ab:  ldfld      class [PresentationCore]System.Windows.Media.SolidColorBrush ParallelBoids.Boid::_backmaterialBrush
    IL_00b0:  callvirt   instance valuetype [PresentationCore]System.Windows.Media.Color [PresentationCore]System.Windows.Media.SolidColorBrush::get_Color()
    IL_00b5:  stloc.0
    IL_00b6:  ldloca.s   CS$0$0000
    IL_00b8:  call       instance uint8 [PresentationCore]System.Windows.Media.Color::get_G()
    IL_00bd:  ldarg.0
    IL_00be:  ldfld      class [PresentationCore]System.Windows.Media.SolidColorBrush ParallelBoids.Boid::_backmaterialBrush
    IL_00c3:  callvirt   instance valuetype [PresentationCore]System.Windows.Media.Color [PresentationCore]System.Windows.Media.SolidColorBrush::get_Color()
    IL_00c8:  stloc.0
    IL_00c9:  ldloca.s   CS$0$0000
    IL_00cb:  call       instance uint8 [PresentationCore]System.Windows.Media.Color::get_B()
    IL_00d0:  call       valuetype [PresentationCore]System.Windows.Media.Color [PresentationCore]System.Windows.Media.Color::FromArgb(uint8,
                                                                                                                                       uint8,
                                                                                                                                       uint8,
                                                                                                                                       uint8)
    IL_00d5:  callvirt   instance void [PresentationCore]System.Windows.Media.SolidColorBrush::set_Color(valuetype [PresentationCore]System.Windows.Media.Color)
    IL_00da:  nop
//000112:                 _backmaterialBrush.Color.A < 255 ? (byte)255 : (byte)25,
//000113:                 _backmaterialBrush.Color.R,
//000114:                 _backmaterialBrush.Color.G,
//000115:                 _backmaterialBrush.Color.B);
//000116:         }
    IL_00db:  ret
  } // end of method Boid::ToggleTranslucency

  .method public hidebysig instance float64 
          ComputeAngle(class ParallelBoids.Boid other) cil managed
  {
    // Code size       112 (0x70)
    .maxstack  4
    .locals init ([0] float64 CS$1$0000,
             [1] bool CS$4$0001,
             [2] valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D CS$0$0002)
//000117: 
//000118:         /// <summary>Computes the angle between two boids based on the current boid's direction.</summary>
//000119:         /// <param name="other">The other boid.</param>
//000120:         /// <returns>The angle.</returns>
//000121:         public double ComputeAngle(Boid other)
//000122:         {
    IL_0000:  nop
//000123:             if (other == null) throw new ArgumentNullException("comparisonBoid");
    IL_0001:  ldarg.1
    IL_0002:  ldnull
    IL_0003:  ceq
    IL_0005:  ldc.i4.0
    IL_0006:  ceq
    IL_0008:  stloc.1
//000124:             return Math.Acos(
//000125:                 Vector3D.DotProduct(this.PreviousVelocity, other.PreviousPosition - this.PreviousPosition) /
//000126:                     (this.PreviousVelocity.Length * (other.PreviousPosition - this.PreviousPosition).Length))
//000127:                 * (180 / Math.PI);
//000128:         }
//000129: 
//000130:         MeshGeometry3D GenerateSphere(Point3D center, double radius, int slices, int stacks)
//000131:         {
//000132:             // Create the MeshGeometry3D.
//000133:             MeshGeometry3D mesh = new MeshGeometry3D();
//000134: 
//000135:             // Fill the Position, Normals, and TextureCoordinates collections.
//000136:             for (int stack = 0; stack <= stacks; stack++)
//000137:             {
//000138:                 double phi = Math.PI / 2 - stack * Math.PI / stacks;
//000139:                 double y = radius * Math.Sin(phi);
//000140:                 double scale = -radius * Math.Cos(phi);
//000141: 
//000142:                 for (int slice = 0; slice <= slices; slice++)
//000143:                 {
//000144:                     double theta = slice * 2 * Math.PI / slices;
//000145:                     double x = scale * Math.Sin(theta);
//000146:                     double z = scale * Math.Cos(theta);
//000147: 
//000148:                     Vector3D normal = new Vector3D(x, y, z);
//000149:                     mesh.Normals.Add(normal);
//000150:                     mesh.Positions.Add(normal + center);
//000151:                     mesh.TextureCoordinates.Add(new Point((double)slice / slices, (double)stack / stacks));
//000152:                 }
//000153:             }
//000154: 
//000155:             // Fill the TriangleIndices collection.
//000156:             for (int stack = 0; stack < stacks; stack++)
//000157:             {
//000158:                 for (int slice = 0; slice < slices; slice++)
//000159:                 {
//000160:                     int n = slices + 1; // Keep the line length down.
//000161: 
//000162:                     if (stack != 0)
//000163:                     {
//000164:                         mesh.TriangleIndices.Add((stack + 0) * n + slice);
//000165:                         mesh.TriangleIndices.Add((stack + 1) * n + slice);
//000166:                         mesh.TriangleIndices.Add((stack + 0) * n + slice + 1);
//000167:                     }
//000168:                     if (stack != stacks - 1)
//000169:                     {
//000170:                         mesh.TriangleIndices.Add((stack + 0) * n + slice + 1);
//000171:                         mesh.TriangleIndices.Add((stack + 1) * n + slice);
//000172:                         mesh.TriangleIndices.Add((stack + 1) * n + slice + 1);
//000173:                     }
//000174:                 }
//000175:             }
//000176:             return mesh;
//000177:         }
//000178:     }
//000179: }
    IL_0009:  ldloc.1
    IL_000a:  brtrue.s   IL_0017

//000123:             if (other == null) throw new ArgumentNullException("comparisonBoid");
    IL_000c:  ldstr      "comparisonBoid"
    IL_0011:  newobj     instance void [mscorlib]System.ArgumentNullException::.ctor(string)
    IL_0016:  throw

//000124:             return Math.Acos(
    IL_0017:  ldarg.0
    IL_0018:  call       instance valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.Boid::get_PreviousVelocity()
    IL_001d:  ldarg.1
    IL_001e:  callvirt   instance valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.Boid::get_PreviousPosition()
    IL_0023:  ldarg.0
    IL_0024:  call       instance valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.Boid::get_PreviousPosition()
    IL_0029:  call       valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D [PresentationCore]System.Windows.Media.Media3D.Vector3D::op_Subtraction(valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D,
                                                                                                                                                                   valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D)
    IL_002e:  call       float64 [PresentationCore]System.Windows.Media.Media3D.Vector3D::DotProduct(valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D,
                                                                                                     valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D)
    IL_0033:  ldarg.0
    IL_0034:  call       instance valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.Boid::get_PreviousVelocity()
    IL_0039:  stloc.2
    IL_003a:  ldloca.s   CS$0$0002
    IL_003c:  call       instance float64 [PresentationCore]System.Windows.Media.Media3D.Vector3D::get_Length()
    IL_0041:  ldarg.1
    IL_0042:  callvirt   instance valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.Boid::get_PreviousPosition()
    IL_0047:  ldarg.0
    IL_0048:  call       instance valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.Boid::get_PreviousPosition()
    IL_004d:  call       valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D [PresentationCore]System.Windows.Media.Media3D.Vector3D::op_Subtraction(valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D,
                                                                                                                                                                   valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D)
    IL_0052:  stloc.2
    IL_0053:  ldloca.s   CS$0$0002
    IL_0055:  call       instance float64 [PresentationCore]System.Windows.Media.Media3D.Vector3D::get_Length()
    IL_005a:  mul
    IL_005b:  div
    IL_005c:  call       float64 [mscorlib]System.Math::Acos(float64)
    IL_0061:  ldc.r8     57.295779513082323
    IL_006a:  mul
    IL_006b:  stloc.0
    IL_006c:  br.s       IL_006e

//000125:                 Vector3D.DotProduct(this.PreviousVelocity, other.PreviousPosition - this.PreviousPosition) /
//000126:                     (this.PreviousVelocity.Length * (other.PreviousPosition - this.PreviousPosition).Length))
//000127:                 * (180 / Math.PI);
//000128:         }
    IL_006e:  ldloc.0
    IL_006f:  ret
  } // end of method Boid::ComputeAngle

  .method private hidebysig instance class [PresentationCore]System.Windows.Media.Media3D.MeshGeometry3D 
          GenerateSphere(valuetype [PresentationCore]System.Windows.Media.Media3D.Point3D center,
                         float64 radius,
                         int32 slices,
                         int32 stacks) cil managed
  {
    // Code size       460 (0x1cc)
    .maxstack  4
    .locals init ([0] class [PresentationCore]System.Windows.Media.Media3D.MeshGeometry3D mesh,
             [1] int32 stack,
             [2] float64 phi,
             [3] float64 y,
             [4] float64 scale,
             [5] int32 slice,
             [6] float64 theta,
             [7] float64 x,
             [8] float64 z,
             [9] valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D normal,
             [10] int32 n,
             [11] class [PresentationCore]System.Windows.Media.Media3D.MeshGeometry3D CS$1$0000,
             [12] bool CS$4$0001)
//000129: 
//000130:         MeshGeometry3D GenerateSphere(Point3D center, double radius, int slices, int stacks)
//000131:         {
    IL_0000:  nop
//000132:             // Create the MeshGeometry3D.
//000133:             MeshGeometry3D mesh = new MeshGeometry3D();
    IL_0001:  newobj     instance void [PresentationCore]System.Windows.Media.Media3D.MeshGeometry3D::.ctor()
    IL_0006:  stloc.0
//000134: 
//000135:             // Fill the Position, Normals, and TextureCoordinates collections.
//000136:             for (int stack = 0; stack <= stacks; stack++)
    IL_0007:  ldc.i4.0
    IL_0008:  stloc.1
//000137:             {
//000138:                 double phi = Math.PI / 2 - stack * Math.PI / stacks;
//000139:                 double y = radius * Math.Sin(phi);
//000140:                 double scale = -radius * Math.Cos(phi);
//000141: 
//000142:                 for (int slice = 0; slice <= slices; slice++)
//000143:                 {
//000144:                     double theta = slice * 2 * Math.PI / slices;
//000145:                     double x = scale * Math.Sin(theta);
//000146:                     double z = scale * Math.Cos(theta);
//000147: 
//000148:                     Vector3D normal = new Vector3D(x, y, z);
//000149:                     mesh.Normals.Add(normal);
//000150:                     mesh.Positions.Add(normal + center);
//000151:                     mesh.TextureCoordinates.Add(new Point((double)slice / slices, (double)stack / stacks));
//000152:                 }
//000153:             }
//000154: 
//000155:             // Fill the TriangleIndices collection.
//000156:             for (int stack = 0; stack < stacks; stack++)
//000157:             {
//000158:                 for (int slice = 0; slice < slices; slice++)
//000159:                 {
//000160:                     int n = slices + 1; // Keep the line length down.
//000161: 
//000162:                     if (stack != 0)
//000163:                     {
//000164:                         mesh.TriangleIndices.Add((stack + 0) * n + slice);
//000165:                         mesh.TriangleIndices.Add((stack + 1) * n + slice);
//000166:                         mesh.TriangleIndices.Add((stack + 0) * n + slice + 1);
//000167:                     }
//000168:                     if (stack != stacks - 1)
//000169:                     {
//000170:                         mesh.TriangleIndices.Add((stack + 0) * n + slice + 1);
//000171:                         mesh.TriangleIndices.Add((stack + 1) * n + slice);
//000172:                         mesh.TriangleIndices.Add((stack + 1) * n + slice + 1);
//000173:                     }
//000174:                 }
//000175:             }
//000176:             return mesh;
//000177:         }
//000178:     }
//000179: }
    IL_0009:  br         IL_00dc

//000137:             {
    IL_000e:  nop
//000138:                 double phi = Math.PI / 2 - stack * Math.PI / stacks;
    IL_000f:  ldc.r8     1.5707963267948966
    IL_0018:  ldloc.1
    IL_0019:  conv.r8
    IL_001a:  ldc.r8     3.1415926535897931
    IL_0023:  mul
    IL_0024:  ldarg.s    stacks
    IL_0026:  conv.r8
    IL_0027:  div
    IL_0028:  sub
    IL_0029:  stloc.2
//000139:                 double y = radius * Math.Sin(phi);
    IL_002a:  ldarg.2
    IL_002b:  ldloc.2
    IL_002c:  call       float64 [mscorlib]System.Math::Sin(float64)
    IL_0031:  mul
    IL_0032:  stloc.3
//000140:                 double scale = -radius * Math.Cos(phi);
    IL_0033:  ldarg.2
    IL_0034:  neg
    IL_0035:  ldloc.2
    IL_0036:  call       float64 [mscorlib]System.Math::Cos(float64)
    IL_003b:  mul
    IL_003c:  stloc.s    scale
//000141: 
//000142:                 for (int slice = 0; slice <= slices; slice++)
    IL_003e:  ldc.i4.0
    IL_003f:  stloc.s    slice
//000143:                 {
//000144:                     double theta = slice * 2 * Math.PI / slices;
//000145:                     double x = scale * Math.Sin(theta);
//000146:                     double z = scale * Math.Cos(theta);
//000147: 
//000148:                     Vector3D normal = new Vector3D(x, y, z);
//000149:                     mesh.Normals.Add(normal);
//000150:                     mesh.Positions.Add(normal + center);
//000151:                     mesh.TextureCoordinates.Add(new Point((double)slice / slices, (double)stack / stacks));
//000152:                 }
//000153:             }
//000154: 
//000155:             // Fill the TriangleIndices collection.
//000156:             for (int stack = 0; stack < stacks; stack++)
//000157:             {
//000158:                 for (int slice = 0; slice < slices; slice++)
//000159:                 {
//000160:                     int n = slices + 1; // Keep the line length down.
//000161: 
//000162:                     if (stack != 0)
//000163:                     {
//000164:                         mesh.TriangleIndices.Add((stack + 0) * n + slice);
//000165:                         mesh.TriangleIndices.Add((stack + 1) * n + slice);
//000166:                         mesh.TriangleIndices.Add((stack + 0) * n + slice + 1);
//000167:                     }
//000168:                     if (stack != stacks - 1)
//000169:                     {
//000170:                         mesh.TriangleIndices.Add((stack + 0) * n + slice + 1);
//000171:                         mesh.TriangleIndices.Add((stack + 1) * n + slice);
//000172:                         mesh.TriangleIndices.Add((stack + 1) * n + slice + 1);
//000173:                     }
//000174:                 }
//000175:             }
//000176:             return mesh;
//000177:         }
//000178:     }
//000179: }
    IL_0041:  br         IL_00c6

//000143:                 {
    IL_0046:  nop
//000144:                     double theta = slice * 2 * Math.PI / slices;
    IL_0047:  ldloc.s    slice
    IL_0049:  ldc.i4.2
    IL_004a:  mul
    IL_004b:  conv.r8
    IL_004c:  ldc.r8     3.1415926535897931
    IL_0055:  mul
    IL_0056:  ldarg.3
    IL_0057:  conv.r8
    IL_0058:  div
    IL_0059:  stloc.s    theta
//000145:                     double x = scale * Math.Sin(theta);
    IL_005b:  ldloc.s    scale
    IL_005d:  ldloc.s    theta
    IL_005f:  call       float64 [mscorlib]System.Math::Sin(float64)
    IL_0064:  mul
    IL_0065:  stloc.s    x
//000146:                     double z = scale * Math.Cos(theta);
    IL_0067:  ldloc.s    scale
    IL_0069:  ldloc.s    theta
    IL_006b:  call       float64 [mscorlib]System.Math::Cos(float64)
    IL_0070:  mul
    IL_0071:  stloc.s    z
//000147: 
//000148:                     Vector3D normal = new Vector3D(x, y, z);
    IL_0073:  ldloca.s   normal
    IL_0075:  ldloc.s    x
    IL_0077:  ldloc.3
    IL_0078:  ldloc.s    z
    IL_007a:  call       instance void [PresentationCore]System.Windows.Media.Media3D.Vector3D::.ctor(float64,
                                                                                                      float64,
                                                                                                      float64)
    IL_007f:  nop
//000149:                     mesh.Normals.Add(normal);
    IL_0080:  ldloc.0
    IL_0081:  callvirt   instance class [PresentationCore]System.Windows.Media.Media3D.Vector3DCollection [PresentationCore]System.Windows.Media.Media3D.MeshGeometry3D::get_Normals()
    IL_0086:  ldloc.s    normal
    IL_0088:  callvirt   instance void [PresentationCore]System.Windows.Media.Media3D.Vector3DCollection::Add(valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D)
    IL_008d:  nop
//000150:                     mesh.Positions.Add(normal + center);
    IL_008e:  ldloc.0
    IL_008f:  callvirt   instance class [PresentationCore]System.Windows.Media.Media3D.Point3DCollection [PresentationCore]System.Windows.Media.Media3D.MeshGeometry3D::get_Positions()
    IL_0094:  ldloc.s    normal
    IL_0096:  ldarg.1
    IL_0097:  call       valuetype [PresentationCore]System.Windows.Media.Media3D.Point3D [PresentationCore]System.Windows.Media.Media3D.Vector3D::op_Addition(valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D,
                                                                                                                                                               valuetype [PresentationCore]System.Windows.Media.Media3D.Point3D)
    IL_009c:  callvirt   instance void [PresentationCore]System.Windows.Media.Media3D.Point3DCollection::Add(valuetype [PresentationCore]System.Windows.Media.Media3D.Point3D)
    IL_00a1:  nop
//000151:                     mesh.TextureCoordinates.Add(new Point((double)slice / slices, (double)stack / stacks));
    IL_00a2:  ldloc.0
    IL_00a3:  callvirt   instance class [PresentationCore]System.Windows.Media.PointCollection [PresentationCore]System.Windows.Media.Media3D.MeshGeometry3D::get_TextureCoordinates()
    IL_00a8:  ldloc.s    slice
    IL_00aa:  conv.r8
    IL_00ab:  ldarg.3
    IL_00ac:  conv.r8
    IL_00ad:  div
    IL_00ae:  ldloc.1
    IL_00af:  conv.r8
    IL_00b0:  ldarg.s    stacks
    IL_00b2:  conv.r8
    IL_00b3:  div
    IL_00b4:  newobj     instance void [WindowsBase]System.Windows.Point::.ctor(float64,
                                                                                float64)
    IL_00b9:  callvirt   instance void [PresentationCore]System.Windows.Media.PointCollection::Add(valuetype [WindowsBase]System.Windows.Point)
    IL_00be:  nop
//000152:                 }
    IL_00bf:  nop
//000142:                 for (int slice = 0; slice <= slices; slice++)
    IL_00c0:  ldloc.s    slice
    IL_00c2:  ldc.i4.1
    IL_00c3:  add
    IL_00c4:  stloc.s    slice
    IL_00c6:  ldloc.s    slice
    IL_00c8:  ldarg.3
    IL_00c9:  cgt
    IL_00cb:  ldc.i4.0
    IL_00cc:  ceq
    IL_00ce:  stloc.s    CS$4$0001
//000143:                 {
//000144:                     double theta = slice * 2 * Math.PI / slices;
//000145:                     double x = scale * Math.Sin(theta);
//000146:                     double z = scale * Math.Cos(theta);
//000147: 
//000148:                     Vector3D normal = new Vector3D(x, y, z);
//000149:                     mesh.Normals.Add(normal);
//000150:                     mesh.Positions.Add(normal + center);
//000151:                     mesh.TextureCoordinates.Add(new Point((double)slice / slices, (double)stack / stacks));
//000152:                 }
//000153:             }
//000154: 
//000155:             // Fill the TriangleIndices collection.
//000156:             for (int stack = 0; stack < stacks; stack++)
//000157:             {
//000158:                 for (int slice = 0; slice < slices; slice++)
//000159:                 {
//000160:                     int n = slices + 1; // Keep the line length down.
//000161: 
//000162:                     if (stack != 0)
//000163:                     {
//000164:                         mesh.TriangleIndices.Add((stack + 0) * n + slice);
//000165:                         mesh.TriangleIndices.Add((stack + 1) * n + slice);
//000166:                         mesh.TriangleIndices.Add((stack + 0) * n + slice + 1);
//000167:                     }
//000168:                     if (stack != stacks - 1)
//000169:                     {
//000170:                         mesh.TriangleIndices.Add((stack + 0) * n + slice + 1);
//000171:                         mesh.TriangleIndices.Add((stack + 1) * n + slice);
//000172:                         mesh.TriangleIndices.Add((stack + 1) * n + slice + 1);
//000173:                     }
//000174:                 }
//000175:             }
//000176:             return mesh;
//000177:         }
//000178:     }
//000179: }
    IL_00d0:  ldloc.s    CS$4$0001
    IL_00d2:  brtrue     IL_0046

//000153:             }
    IL_00d7:  nop
//000136:             for (int stack = 0; stack <= stacks; stack++)
    IL_00d8:  ldloc.1
    IL_00d9:  ldc.i4.1
    IL_00da:  add
    IL_00db:  stloc.1
    IL_00dc:  ldloc.1
    IL_00dd:  ldarg.s    stacks
    IL_00df:  cgt
    IL_00e1:  ldc.i4.0
    IL_00e2:  ceq
    IL_00e4:  stloc.s    CS$4$0001
//000137:             {
//000138:                 double phi = Math.PI / 2 - stack * Math.PI / stacks;
//000139:                 double y = radius * Math.Sin(phi);
//000140:                 double scale = -radius * Math.Cos(phi);
//000141: 
//000142:                 for (int slice = 0; slice <= slices; slice++)
//000143:                 {
//000144:                     double theta = slice * 2 * Math.PI / slices;
//000145:                     double x = scale * Math.Sin(theta);
//000146:                     double z = scale * Math.Cos(theta);
//000147: 
//000148:                     Vector3D normal = new Vector3D(x, y, z);
//000149:                     mesh.Normals.Add(normal);
//000150:                     mesh.Positions.Add(normal + center);
//000151:                     mesh.TextureCoordinates.Add(new Point((double)slice / slices, (double)stack / stacks));
//000152:                 }
//000153:             }
//000154: 
//000155:             // Fill the TriangleIndices collection.
//000156:             for (int stack = 0; stack < stacks; stack++)
//000157:             {
//000158:                 for (int slice = 0; slice < slices; slice++)
//000159:                 {
//000160:                     int n = slices + 1; // Keep the line length down.
//000161: 
//000162:                     if (stack != 0)
//000163:                     {
//000164:                         mesh.TriangleIndices.Add((stack + 0) * n + slice);
//000165:                         mesh.TriangleIndices.Add((stack + 1) * n + slice);
//000166:                         mesh.TriangleIndices.Add((stack + 0) * n + slice + 1);
//000167:                     }
//000168:                     if (stack != stacks - 1)
//000169:                     {
//000170:                         mesh.TriangleIndices.Add((stack + 0) * n + slice + 1);
//000171:                         mesh.TriangleIndices.Add((stack + 1) * n + slice);
//000172:                         mesh.TriangleIndices.Add((stack + 1) * n + slice + 1);
//000173:                     }
//000174:                 }
//000175:             }
//000176:             return mesh;
//000177:         }
//000178:     }
//000179: }
    IL_00e6:  ldloc.s    CS$4$0001
    IL_00e8:  brtrue     IL_000e

//000156:             for (int stack = 0; stack < stacks; stack++)
    IL_00ed:  ldc.i4.0
    IL_00ee:  stloc.1
//000157:             {
//000158:                 for (int slice = 0; slice < slices; slice++)
//000159:                 {
//000160:                     int n = slices + 1; // Keep the line length down.
//000161: 
//000162:                     if (stack != 0)
//000163:                     {
//000164:                         mesh.TriangleIndices.Add((stack + 0) * n + slice);
//000165:                         mesh.TriangleIndices.Add((stack + 1) * n + slice);
//000166:                         mesh.TriangleIndices.Add((stack + 0) * n + slice + 1);
//000167:                     }
//000168:                     if (stack != stacks - 1)
//000169:                     {
//000170:                         mesh.TriangleIndices.Add((stack + 0) * n + slice + 1);
//000171:                         mesh.TriangleIndices.Add((stack + 1) * n + slice);
//000172:                         mesh.TriangleIndices.Add((stack + 1) * n + slice + 1);
//000173:                     }
//000174:                 }
//000175:             }
//000176:             return mesh;
//000177:         }
//000178:     }
//000179: }
    IL_00ef:  br         IL_01b6

//000157:             {
    IL_00f4:  nop
//000158:                 for (int slice = 0; slice < slices; slice++)
    IL_00f5:  ldc.i4.0
    IL_00f6:  stloc.s    slice
//000159:                 {
//000160:                     int n = slices + 1; // Keep the line length down.
//000161: 
//000162:                     if (stack != 0)
//000163:                     {
//000164:                         mesh.TriangleIndices.Add((stack + 0) * n + slice);
//000165:                         mesh.TriangleIndices.Add((stack + 1) * n + slice);
//000166:                         mesh.TriangleIndices.Add((stack + 0) * n + slice + 1);
//000167:                     }
//000168:                     if (stack != stacks - 1)
//000169:                     {
//000170:                         mesh.TriangleIndices.Add((stack + 0) * n + slice + 1);
//000171:                         mesh.TriangleIndices.Add((stack + 1) * n + slice);
//000172:                         mesh.TriangleIndices.Add((stack + 1) * n + slice + 1);
//000173:                     }
//000174:                 }
//000175:             }
//000176:             return mesh;
//000177:         }
//000178:     }
//000179: }
    IL_00f8:  br         IL_01a3

//000159:                 {
    IL_00fd:  nop
//000160:                     int n = slices + 1; // Keep the line length down.
    IL_00fe:  ldarg.3
    IL_00ff:  ldc.i4.1
    IL_0100:  add
    IL_0101:  stloc.s    n
//000161: 
//000162:                     if (stack != 0)
    IL_0103:  ldloc.1
    IL_0104:  ldc.i4.0
    IL_0105:  ceq
    IL_0107:  stloc.s    CS$4$0001
//000163:                     {
//000164:                         mesh.TriangleIndices.Add((stack + 0) * n + slice);
//000165:                         mesh.TriangleIndices.Add((stack + 1) * n + slice);
//000166:                         mesh.TriangleIndices.Add((stack + 0) * n + slice + 1);
//000167:                     }
//000168:                     if (stack != stacks - 1)
//000169:                     {
//000170:                         mesh.TriangleIndices.Add((stack + 0) * n + slice + 1);
//000171:                         mesh.TriangleIndices.Add((stack + 1) * n + slice);
//000172:                         mesh.TriangleIndices.Add((stack + 1) * n + slice + 1);
//000173:                     }
//000174:                 }
//000175:             }
//000176:             return mesh;
//000177:         }
//000178:     }
//000179: }
    IL_0109:  ldloc.s    CS$4$0001
    IL_010b:  brtrue.s   IL_014c

//000163:                     {
    IL_010d:  nop
//000164:                         mesh.TriangleIndices.Add((stack + 0) * n + slice);
    IL_010e:  ldloc.0
    IL_010f:  callvirt   instance class [PresentationCore]System.Windows.Media.Int32Collection [PresentationCore]System.Windows.Media.Media3D.MeshGeometry3D::get_TriangleIndices()
    IL_0114:  ldloc.1
    IL_0115:  ldloc.s    n
    IL_0117:  mul
    IL_0118:  ldloc.s    slice
    IL_011a:  add
    IL_011b:  callvirt   instance void [PresentationCore]System.Windows.Media.Int32Collection::Add(int32)
    IL_0120:  nop
//000165:                         mesh.TriangleIndices.Add((stack + 1) * n + slice);
    IL_0121:  ldloc.0
    IL_0122:  callvirt   instance class [PresentationCore]System.Windows.Media.Int32Collection [PresentationCore]System.Windows.Media.Media3D.MeshGeometry3D::get_TriangleIndices()
    IL_0127:  ldloc.1
    IL_0128:  ldc.i4.1
    IL_0129:  add
    IL_012a:  ldloc.s    n
    IL_012c:  mul
    IL_012d:  ldloc.s    slice
    IL_012f:  add
    IL_0130:  callvirt   instance void [PresentationCore]System.Windows.Media.Int32Collection::Add(int32)
    IL_0135:  nop
//000166:                         mesh.TriangleIndices.Add((stack + 0) * n + slice + 1);
    IL_0136:  ldloc.0
    IL_0137:  callvirt   instance class [PresentationCore]System.Windows.Media.Int32Collection [PresentationCore]System.Windows.Media.Media3D.MeshGeometry3D::get_TriangleIndices()
    IL_013c:  ldloc.1
    IL_013d:  ldloc.s    n
    IL_013f:  mul
    IL_0140:  ldloc.s    slice
    IL_0142:  add
    IL_0143:  ldc.i4.1
    IL_0144:  add
    IL_0145:  callvirt   instance void [PresentationCore]System.Windows.Media.Int32Collection::Add(int32)
    IL_014a:  nop
//000167:                     }
    IL_014b:  nop
//000168:                     if (stack != stacks - 1)
    IL_014c:  ldloc.1
    IL_014d:  ldarg.s    stacks
    IL_014f:  ldc.i4.1
    IL_0150:  sub
    IL_0151:  ceq
    IL_0153:  stloc.s    CS$4$0001
//000169:                     {
//000170:                         mesh.TriangleIndices.Add((stack + 0) * n + slice + 1);
//000171:                         mesh.TriangleIndices.Add((stack + 1) * n + slice);
//000172:                         mesh.TriangleIndices.Add((stack + 1) * n + slice + 1);
//000173:                     }
//000174:                 }
//000175:             }
//000176:             return mesh;
//000177:         }
//000178:     }
//000179: }
    IL_0155:  ldloc.s    CS$4$0001
    IL_0157:  brtrue.s   IL_019c

//000169:                     {
    IL_0159:  nop
//000170:                         mesh.TriangleIndices.Add((stack + 0) * n + slice + 1);
    IL_015a:  ldloc.0
    IL_015b:  callvirt   instance class [PresentationCore]System.Windows.Media.Int32Collection [PresentationCore]System.Windows.Media.Media3D.MeshGeometry3D::get_TriangleIndices()
    IL_0160:  ldloc.1
    IL_0161:  ldloc.s    n
    IL_0163:  mul
    IL_0164:  ldloc.s    slice
    IL_0166:  add
    IL_0167:  ldc.i4.1
    IL_0168:  add
    IL_0169:  callvirt   instance void [PresentationCore]System.Windows.Media.Int32Collection::Add(int32)
    IL_016e:  nop
//000171:                         mesh.TriangleIndices.Add((stack + 1) * n + slice);
    IL_016f:  ldloc.0
    IL_0170:  callvirt   instance class [PresentationCore]System.Windows.Media.Int32Collection [PresentationCore]System.Windows.Media.Media3D.MeshGeometry3D::get_TriangleIndices()
    IL_0175:  ldloc.1
    IL_0176:  ldc.i4.1
    IL_0177:  add
    IL_0178:  ldloc.s    n
    IL_017a:  mul
    IL_017b:  ldloc.s    slice
    IL_017d:  add
    IL_017e:  callvirt   instance void [PresentationCore]System.Windows.Media.Int32Collection::Add(int32)
    IL_0183:  nop
//000172:                         mesh.TriangleIndices.Add((stack + 1) * n + slice + 1);
    IL_0184:  ldloc.0
    IL_0185:  callvirt   instance class [PresentationCore]System.Windows.Media.Int32Collection [PresentationCore]System.Windows.Media.Media3D.MeshGeometry3D::get_TriangleIndices()
    IL_018a:  ldloc.1
    IL_018b:  ldc.i4.1
    IL_018c:  add
    IL_018d:  ldloc.s    n
    IL_018f:  mul
    IL_0190:  ldloc.s    slice
    IL_0192:  add
    IL_0193:  ldc.i4.1
    IL_0194:  add
    IL_0195:  callvirt   instance void [PresentationCore]System.Windows.Media.Int32Collection::Add(int32)
    IL_019a:  nop
//000173:                     }
    IL_019b:  nop
//000174:                 }
    IL_019c:  nop
//000158:                 for (int slice = 0; slice < slices; slice++)
    IL_019d:  ldloc.s    slice
    IL_019f:  ldc.i4.1
    IL_01a0:  add
    IL_01a1:  stloc.s    slice
    IL_01a3:  ldloc.s    slice
    IL_01a5:  ldarg.3
    IL_01a6:  clt
    IL_01a8:  stloc.s    CS$4$0001
//000159:                 {
//000160:                     int n = slices + 1; // Keep the line length down.
//000161: 
//000162:                     if (stack != 0)
//000163:                     {
//000164:                         mesh.TriangleIndices.Add((stack + 0) * n + slice);
//000165:                         mesh.TriangleIndices.Add((stack + 1) * n + slice);
//000166:                         mesh.TriangleIndices.Add((stack + 0) * n + slice + 1);
//000167:                     }
//000168:                     if (stack != stacks - 1)
//000169:                     {
//000170:                         mesh.TriangleIndices.Add((stack + 0) * n + slice + 1);
//000171:                         mesh.TriangleIndices.Add((stack + 1) * n + slice);
//000172:                         mesh.TriangleIndices.Add((stack + 1) * n + slice + 1);
//000173:                     }
//000174:                 }
//000175:             }
//000176:             return mesh;
//000177:         }
//000178:     }
//000179: }
    IL_01aa:  ldloc.s    CS$4$0001
    IL_01ac:  brtrue     IL_00fd

//000175:             }
    IL_01b1:  nop
//000156:             for (int stack = 0; stack < stacks; stack++)
    IL_01b2:  ldloc.1
    IL_01b3:  ldc.i4.1
    IL_01b4:  add
    IL_01b5:  stloc.1
    IL_01b6:  ldloc.1
    IL_01b7:  ldarg.s    stacks
    IL_01b9:  clt
    IL_01bb:  stloc.s    CS$4$0001
//000157:             {
//000158:                 for (int slice = 0; slice < slices; slice++)
//000159:                 {
//000160:                     int n = slices + 1; // Keep the line length down.
//000161: 
//000162:                     if (stack != 0)
//000163:                     {
//000164:                         mesh.TriangleIndices.Add((stack + 0) * n + slice);
//000165:                         mesh.TriangleIndices.Add((stack + 1) * n + slice);
//000166:                         mesh.TriangleIndices.Add((stack + 0) * n + slice + 1);
//000167:                     }
//000168:                     if (stack != stacks - 1)
//000169:                     {
//000170:                         mesh.TriangleIndices.Add((stack + 0) * n + slice + 1);
//000171:                         mesh.TriangleIndices.Add((stack + 1) * n + slice);
//000172:                         mesh.TriangleIndices.Add((stack + 1) * n + slice + 1);
//000173:                     }
//000174:                 }
//000175:             }
//000176:             return mesh;
//000177:         }
//000178:     }
//000179: }
    IL_01bd:  ldloc.s    CS$4$0001
    IL_01bf:  brtrue     IL_00f4

//000176:             return mesh;
    IL_01c4:  ldloc.0
    IL_01c5:  stloc.s    CS$1$0000
    IL_01c7:  br.s       IL_01c9

//000177:         }
    IL_01c9:  ldloc.s    CS$1$0000
    IL_01cb:  ret
  } // end of method Boid::GenerateSphere

  .method private hidebysig specialname rtspecialname static 
          void  .cctor() cil managed
  {
    // Code size       38 (0x26)
    .maxstack  8
//000020:         private static readonly Vector3D UNIT_Y = new Vector3D(0, 1, 0);
    IL_0000:  ldc.r8     0.0
    IL_0009:  ldc.r8     1.
    IL_0012:  ldc.r8     0.0
    IL_001b:  newobj     instance void [PresentationCore]System.Windows.Media.Media3D.Vector3D::.ctor(float64,
                                                                                                      float64,
                                                                                                      float64)
    IL_0020:  stsfld     valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.Boid::UNIT_Y
//000021:         /// <summary>Multiplicative factor to control the size of a boid.</summary>
//000022:         private const int MODEL_SCALE = 3;
//000023: 
//000024:         /// <summary>Rotation of the boid.</summary>
//000025:         private AxisAngleRotation3D _rotation;
//000026:         /// <summary>Translation of the boid.</summary>
//000027:         private TranslateTransform3D _translation;
//000028:         /// <summary>The boid's colors.</summary>
//000029:         private Tuple<Color, Color> _colors;
//000030:         /// <summary>The brush for the material.</summary>
//000031:         private SolidColorBrush _materialBrush;
//000032:         /// <summary>The brush for the backmaterial.</summary>
//000033:         private SolidColorBrush _backmaterialBrush;
//000034: 
//000035:         /// <summary>Initializes the boid.</summary>
//000036:         /// <param name="colors">The boids color's, Item1 for Material and Item2 for BackMaterial.</param>
//000037:         public Boid(Tuple<Color,Color> colors)
//000038:         {
//000039:             if (colors == null) throw new ArgumentNullException("colors");
//000040: 
//000041:             // Store the colors
//000042:             _colors = colors;
//000043:             _materialBrush = new SolidColorBrush(colors.Item1);
//000044:             _backmaterialBrush = new SolidColorBrush(colors.Item2);
//000045: 
//000046:             // Set up the boid's model
//000047:             base.Content = new GeometryModel3D()
//000048:             {
//000049:                 Material = new DiffuseMaterial(_materialBrush),
//000050:                 BackMaterial = new DiffuseMaterial(_backmaterialBrush),
//000051:                 Geometry = new MeshGeometry3D()
//000052:                 {
//000053:                     // Two perpendicular triangles pointing up
//000054:                     Positions = Point3DCollection.Parse("0 1 0  1 -1 0  -1 -1 0  0 1 0  0 -1 1  0 -1 -1"), 
//000055:                     Normals = Vector3DCollection.Parse("0 0 -1  1 0 0"),
//000056:                     TriangleIndices = Int32Collection.Parse("0 1 2  3 4 5")
//000057:                 }
//000058:             };
//000059: 
//000060:             // Initialize its rotation and translation
//000061:             _rotation = new AxisAngleRotation3D(UNIT_Y, 0);
//000062:             _translation = new TranslateTransform3D(new Vector3D());
//000063: 
//000064:             // Add all of the necessary transforms
//000065:             var t = new Transform3DGroup();
//000066:             t.Children.Add(new ScaleTransform3D(MODEL_SCALE, MODEL_SCALE, MODEL_SCALE));
//000067:             t.Children.Add(new RotateTransform3D(_rotation));
//000068:             t.Children.Add(_translation);
//000069:             base.Transform = t;
//000070:         }
//000071: 
//000072:         /// <summary>Gets or sets the boid's velocity.</summary>
//000073:         public Vector3D Velocity { get; set; }
//000074:         /// <summary>Gets or sets the boid's position.</summary>
//000075:         public Vector3D Position { get; set; }
//000076: 
//000077:         /// <summary>Gets the boid's previous velocity.</summary>
//000078:         public Vector3D PreviousVelocity { get; private set; }
//000079:         /// <summary>Gets the boid's previous position.</summary>
//000080:         public Vector3D PreviousPosition { get; private set; }
//000081: 
//000082:         /// <summary>Stores the current position and velocity into the previous.</summary>
//000083:         public void StorePositionAndVelocityIntoPrevious()
//000084:         {
//000085:             PreviousVelocity = Velocity;
//000086:             PreviousPosition = Position;
//000087:         }
//000088: 
//000089:         /// <summary>Sets the boid's rotation and translation for the scene.</summary>
//000090:         public void TransformByPositionAndVelocity()
//000091:         {
//000092:             var direction = Velocity;
//000093:             direction.Normalize();
//000094: 
//000095:             _rotation.Axis = Vector3D.CrossProduct(UNIT_Y, direction);
//000096:             _rotation.Angle = Math.Acos(Vector3D.DotProduct(UNIT_Y, direction) / (UNIT_Y.Length * direction.Length)) * (180 / Math.PI);
//000097: 
//000098:             var pos = Position;
//000099:             _translation.OffsetX = pos.X;
//000100:             _translation.OffsetY = pos.Y;
//000101:             _translation.OffsetZ = pos.Z;
//000102:         }
//000103: 
//000104:         public void ToggleTranslucency()
//000105:         {
//000106:             _materialBrush.Color = Color.FromArgb(
//000107:                 _materialBrush.Color.A < 255 ? (byte)255 : (byte)25,
//000108:                 _materialBrush.Color.R,
//000109:                 _materialBrush.Color.G,
//000110:                 _materialBrush.Color.B);
//000111:             _backmaterialBrush.Color = Color.FromArgb(
//000112:                 _backmaterialBrush.Color.A < 255 ? (byte)255 : (byte)25,
//000113:                 _backmaterialBrush.Color.R,
//000114:                 _backmaterialBrush.Color.G,
//000115:                 _backmaterialBrush.Color.B);
//000116:         }
//000117: 
//000118:         /// <summary>Computes the angle between two boids based on the current boid's direction.</summary>
//000119:         /// <param name="other">The other boid.</param>
//000120:         /// <returns>The angle.</returns>
//000121:         public double ComputeAngle(Boid other)
//000122:         {
//000123:             if (other == null) throw new ArgumentNullException("comparisonBoid");
//000124:             return Math.Acos(
//000125:                 Vector3D.DotProduct(this.PreviousVelocity, other.PreviousPosition - this.PreviousPosition) /
//000126:                     (this.PreviousVelocity.Length * (other.PreviousPosition - this.PreviousPosition).Length))
//000127:                 * (180 / Math.PI);
//000128:         }
//000129: 
//000130:         MeshGeometry3D GenerateSphere(Point3D center, double radius, int slices, int stacks)
//000131:         {
//000132:             // Create the MeshGeometry3D.
//000133:             MeshGeometry3D mesh = new MeshGeometry3D();
//000134: 
//000135:             // Fill the Position, Normals, and TextureCoordinates collections.
//000136:             for (int stack = 0; stack <= stacks; stack++)
//000137:             {
//000138:                 double phi = Math.PI / 2 - stack * Math.PI / stacks;
//000139:                 double y = radius * Math.Sin(phi);
//000140:                 double scale = -radius * Math.Cos(phi);
//000141: 
//000142:                 for (int slice = 0; slice <= slices; slice++)
//000143:                 {
//000144:                     double theta = slice * 2 * Math.PI / slices;
//000145:                     double x = scale * Math.Sin(theta);
//000146:                     double z = scale * Math.Cos(theta);
//000147: 
//000148:                     Vector3D normal = new Vector3D(x, y, z);
//000149:                     mesh.Normals.Add(normal);
//000150:                     mesh.Positions.Add(normal + center);
//000151:                     mesh.TextureCoordinates.Add(new Point((double)slice / slices, (double)stack / stacks));
//000152:                 }
//000153:             }
//000154: 
//000155:             // Fill the TriangleIndices collection.
//000156:             for (int stack = 0; stack < stacks; stack++)
//000157:             {
//000158:                 for (int slice = 0; slice < slices; slice++)
//000159:                 {
//000160:                     int n = slices + 1; // Keep the line length down.
//000161: 
//000162:                     if (stack != 0)
//000163:                     {
//000164:                         mesh.TriangleIndices.Add((stack + 0) * n + slice);
//000165:                         mesh.TriangleIndices.Add((stack + 1) * n + slice);
//000166:                         mesh.TriangleIndices.Add((stack + 0) * n + slice + 1);
//000167:                     }
//000168:                     if (stack != stacks - 1)
//000169:                     {
//000170:                         mesh.TriangleIndices.Add((stack + 0) * n + slice + 1);
//000171:                         mesh.TriangleIndices.Add((stack + 1) * n + slice);
//000172:                         mesh.TriangleIndices.Add((stack + 1) * n + slice + 1);
//000173:                     }
//000174:                 }
//000175:             }
//000176:             return mesh;
//000177:         }
//000178:     }
//000179: }
    IL_0025:  ret
  } // end of method Boid::.cctor

  .property instance valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D
          Velocity()
  {
    .set instance void ParallelBoids.Boid::set_Velocity(valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D)
    .get instance valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.Boid::get_Velocity()
  } // end of property Boid::Velocity
  .property instance valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D
          Position()
  {
    .get instance valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.Boid::get_Position()
    .set instance void ParallelBoids.Boid::set_Position(valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D)
  } // end of property Boid::Position
  .property instance valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D
          PreviousVelocity()
  {
    .get instance valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.Boid::get_PreviousVelocity()
    .set instance void ParallelBoids.Boid::set_PreviousVelocity(valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D)
  } // end of property Boid::PreviousVelocity
  .property instance valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D
          PreviousPosition()
  {
    .set instance void ParallelBoids.Boid::set_PreviousPosition(valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D)
    .get instance valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.Boid::get_PreviousPosition()
  } // end of property Boid::PreviousPosition
} // end of class ParallelBoids.Boid

.class private auto ansi beforefieldinit ParallelBoids.Properties.Resources
       extends [mscorlib]System.Object
{
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
  .custom instance void [System]System.CodeDom.Compiler.GeneratedCodeAttribute::.ctor(string,
                                                                                      string) = ( 01 00 33 53 79 73 74 65 6D 2E 52 65 73 6F 75 72   // ..3System.Resour
                                                                                                  63 65 73 2E 54 6F 6F 6C 73 2E 53 74 72 6F 6E 67   // ces.Tools.Strong
                                                                                                  6C 79 54 79 70 65 64 52 65 73 6F 75 72 63 65 42   // lyTypedResourceB
                                                                                                  75 69 6C 64 65 72 07 34 2E 30 2E 30 2E 30 00 00 ) // uilder.4.0.0.0..
  .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
  .field private static class [mscorlib]System.Resources.ResourceManager resourceMan
  .field private static class [mscorlib]System.Globalization.CultureInfo resourceCulture
  .method assembly hidebysig specialname rtspecialname 
          instance void  .ctor() cil managed
  {
    // Code size       10 (0xa)
    .maxstack  8
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Boids\Boids_CSharp\Properties\Resources.Designer.cs' 
//000032:         [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
    IL_0000:  ldarg.0
    IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
    IL_0006:  nop
//000033:         internal Resources()
//000034:         {
    IL_0007:  nop
//000035:         }
    IL_0008:  nop
    IL_0009:  ret
  } // end of method Resources::.ctor

  .method assembly hidebysig specialname static 
          class [mscorlib]System.Resources.ResourceManager 
          get_ResourceManager() cil managed
  {
    // Code size       60 (0x3c)
    .maxstack  3
    .locals init ([0] class [mscorlib]System.Resources.ResourceManager temp,
             [1] class [mscorlib]System.Resources.ResourceManager CS$1$0000,
             [2] bool CS$4$0001)
//000036: 
//000037:         /// <summary>
//000038:         ///   Returns the cached ResourceManager instance used by this class.
//000039:         /// </summary>
//000040:         [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
//000041:         internal static global::System.Resources.ResourceManager ResourceManager
//000042:         {
//000043:             get
//000044:             {
    IL_0000:  nop
//000045:                 if ((resourceMan == null))
    IL_0001:  ldsfld     class [mscorlib]System.Resources.ResourceManager ParallelBoids.Properties.Resources::resourceMan
    IL_0006:  ldnull
    IL_0007:  ceq
    IL_0009:  ldc.i4.0
    IL_000a:  ceq
    IL_000c:  stloc.2
//000046:                 {
//000047:                     global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ParallelBoids.Properties.Resources", typeof(Resources).Assembly);
//000048:                     resourceMan = temp;
//000049:                 }
//000050:                 return resourceMan;
//000051:             }
//000052:         }
//000053: 
//000054:         /// <summary>
//000055:         ///   Overrides the current thread's CurrentUICulture property for all
//000056:         ///   resource lookups using this strongly typed resource class.
//000057:         /// </summary>
//000058:         [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
//000059:         internal static global::System.Globalization.CultureInfo Culture
//000060:         {
//000061:             get
//000062:             {
//000063:                 return resourceCulture;
//000064:             }
//000065:             set
//000066:             {
//000067:                 resourceCulture = value;
//000068:             }
//000069:         }
//000070:     }
//000071: }
    IL_000d:  ldloc.2
    IL_000e:  brtrue.s   IL_0032

//000046:                 {
    IL_0010:  nop
//000047:                     global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ParallelBoids.Properties.Resources", typeof(Resources).Assembly);
    IL_0011:  ldstr      "ParallelBoids.Properties.Resources"
    IL_0016:  ldtoken    ParallelBoids.Properties.Resources
    IL_001b:  call       class [mscorlib]System.Type [mscorlib]System.Type::GetTypeFromHandle(valuetype [mscorlib]System.RuntimeTypeHandle)
    IL_0020:  callvirt   instance class [mscorlib]System.Reflection.Assembly [mscorlib]System.Type::get_Assembly()
    IL_0025:  newobj     instance void [mscorlib]System.Resources.ResourceManager::.ctor(string,
                                                                                         class [mscorlib]System.Reflection.Assembly)
    IL_002a:  stloc.0
//000048:                     resourceMan = temp;
    IL_002b:  ldloc.0
    IL_002c:  stsfld     class [mscorlib]System.Resources.ResourceManager ParallelBoids.Properties.Resources::resourceMan
//000049:                 }
    IL_0031:  nop
//000050:                 return resourceMan;
    IL_0032:  ldsfld     class [mscorlib]System.Resources.ResourceManager ParallelBoids.Properties.Resources::resourceMan
    IL_0037:  stloc.1
    IL_0038:  br.s       IL_003a

//000051:             }
    IL_003a:  ldloc.1
    IL_003b:  ret
  } // end of method Resources::get_ResourceManager

  .method assembly hidebysig specialname static 
          class [mscorlib]System.Globalization.CultureInfo 
          get_Culture() cil managed
  {
    // Code size       11 (0xb)
    .maxstack  1
    .locals init ([0] class [mscorlib]System.Globalization.CultureInfo CS$1$0000)
//000052:         }
//000053: 
//000054:         /// <summary>
//000055:         ///   Overrides the current thread's CurrentUICulture property for all
//000056:         ///   resource lookups using this strongly typed resource class.
//000057:         /// </summary>
//000058:         [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
//000059:         internal static global::System.Globalization.CultureInfo Culture
//000060:         {
//000061:             get
//000062:             {
    IL_0000:  nop
//000063:                 return resourceCulture;
    IL_0001:  ldsfld     class [mscorlib]System.Globalization.CultureInfo ParallelBoids.Properties.Resources::resourceCulture
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

//000064:             }
    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method Resources::get_Culture

  .method assembly hidebysig specialname static 
          void  set_Culture(class [mscorlib]System.Globalization.CultureInfo 'value') cil managed
  {
    // Code size       8 (0x8)
    .maxstack  8
//000065:             set
//000066:             {
    IL_0000:  nop
//000067:                 resourceCulture = value;
    IL_0001:  ldarg.0
    IL_0002:  stsfld     class [mscorlib]System.Globalization.CultureInfo ParallelBoids.Properties.Resources::resourceCulture
//000068:             }
    IL_0007:  ret
  } // end of method Resources::set_Culture

  .property class [mscorlib]System.Resources.ResourceManager
          ResourceManager()
  {
    .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 02 00 00 00 00 00 ) 
    .get class [mscorlib]System.Resources.ResourceManager ParallelBoids.Properties.Resources::get_ResourceManager()
  } // end of property Resources::ResourceManager
  .property class [mscorlib]System.Globalization.CultureInfo
          Culture()
  {
    .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 02 00 00 00 00 00 ) 
    .get class [mscorlib]System.Globalization.CultureInfo ParallelBoids.Properties.Resources::get_Culture()
    .set void ParallelBoids.Properties.Resources::set_Culture(class [mscorlib]System.Globalization.CultureInfo)
  } // end of property Resources::Culture
} // end of class ParallelBoids.Properties.Resources

.class public auto ansi beforefieldinit ParallelBoids.App
       extends [PresentationFramework]System.Windows.Application
{
  .custom instance void [System]System.CodeDom.Compiler.GeneratedCodeAttribute::.ctor(string,
                                                                                      string) = ( 01 00 16 50 72 65 73 65 6E 74 61 74 69 6F 6E 42   // ...PresentationB
                                                                                                  75 69 6C 64 54 61 73 6B 73 07 34 2E 30 2E 30 2E   // uildTasks.4.0.0.
                                                                                                  30 00 00 )                                        // 0..
  .method public hidebysig instance void 
          InitializeComponent() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       20 (0x14)
    .maxstack  8
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Boids\Boids_CSharp\obj\Debug\App.g.cs' 
//000047:         public void InitializeComponent() {
    IL_0000:  nop
// Source File 'c:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Boids\Boids_CSharp\App.xaml' 
//000004:              StartupUri="MainWindow.xaml">
    IL_0001:  ldarg.0
    IL_0002:  ldstr      "MainWindow.xaml"
    IL_0007:  ldc.i4.2
    IL_0008:  newobj     instance void [System]System.Uri::.ctor(string,
                                                                 valuetype [System]System.UriKind)
    IL_000d:  call       instance void [PresentationFramework]System.Windows.Application::set_StartupUri(class [System]System.Uri)
    IL_0012:  nop
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Boids\Boids_CSharp\obj\Debug\App.g.cs' 
    IL_0013:  ret
  } // end of method App::InitializeComponent

  .method public hidebysig static void  Main() cil managed
  {
    .entrypoint
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [mscorlib]System.STAThreadAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       22 (0x16)
    .maxstack  1
    .locals init ([0] class ParallelBoids.App app)
    IL_0000:  nop
    IL_0001:  newobj     instance void ParallelBoids.App::.ctor()
    IL_0006:  stloc.0
    IL_0007:  ldloc.0
    IL_0008:  callvirt   instance void ParallelBoids.App::InitializeComponent()
    IL_000d:  nop
    IL_000e:  ldloc.0
    IL_000f:  callvirt   instance int32 [PresentationFramework]System.Windows.Application::Run()
    IL_0014:  pop
    IL_0015:  ret
  } // end of method App::Main

  .method public hidebysig specialname rtspecialname 
          instance void  .ctor() cil managed
  {
    // Code size       7 (0x7)
    .maxstack  8
    IL_0000:  ldarg.0
    IL_0001:  call       instance void [PresentationFramework]System.Windows.Application::.ctor()
    IL_0006:  ret
  } // end of method App::.ctor

} // end of class ParallelBoids.App

.class public auto ansi beforefieldinit ParallelBoids.MainWindow
       extends [PresentationFramework]System.Windows.Window
       implements [System.Xaml]System.Windows.Markup.IComponentConnector
{
  .custom instance void [System]System.CodeDom.Compiler.GeneratedCodeAttribute::.ctor(string,
                                                                                      string) = ( 01 00 16 50 72 65 73 65 6E 74 61 74 69 6F 6E 42   // ...PresentationB
                                                                                                  75 69 6C 64 54 61 73 6B 73 07 34 2E 30 2E 30 2E   // uildTasks.4.0.0.
                                                                                                  30 00 00 )                                        // 0..
  .class auto ansi sealed nested private beforefieldinit '<>c__DisplayClass3'
         extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .field public class [mscorlib]System.Tuple`2<valuetype [PresentationCore]System.Windows.Media.Color,valuetype [PresentationCore]System.Windows.Media.Color>[] colorCombinations
    .field public class [mscorlib]System.Random rand
    .field public class ParallelBoids.MainWindow '<>4__this'
    .method public hidebysig specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      // Code size       7 (0x7)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ret
    } // end of method '<>c__DisplayClass3'::.ctor

    .method public hidebysig instance class ParallelBoids.Boid 
            '<Window_Loaded>b__1'(int32 _) cil managed
    {
      // Code size       37 (0x25)
      .maxstack  4
      .locals init ([0] class ParallelBoids.Boid CS$1$0000)
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Boids\Boids_CSharp\MainWindow.xaml.cs' 
//000118:             m_boidModels = Enumerable.Range(0, NUM_BOIDS).Select(_ => new Boid(colorCombinations[rand.Next(0, colorCombinations.Length)])).ToArray();
      IL_0000:  ldarg.0
      IL_0001:  ldfld      class [mscorlib]System.Tuple`2<valuetype [PresentationCore]System.Windows.Media.Color,valuetype [PresentationCore]System.Windows.Media.Color>[] ParallelBoids.MainWindow/'<>c__DisplayClass3'::colorCombinations
      IL_0006:  ldarg.0
      IL_0007:  ldfld      class [mscorlib]System.Random ParallelBoids.MainWindow/'<>c__DisplayClass3'::rand
      IL_000c:  ldc.i4.0
      IL_000d:  ldarg.0
      IL_000e:  ldfld      class [mscorlib]System.Tuple`2<valuetype [PresentationCore]System.Windows.Media.Color,valuetype [PresentationCore]System.Windows.Media.Color>[] ParallelBoids.MainWindow/'<>c__DisplayClass3'::colorCombinations
      IL_0013:  ldlen
      IL_0014:  conv.i4
      IL_0015:  callvirt   instance int32 [mscorlib]System.Random::Next(int32,
                                                                        int32)
      IL_001a:  ldelem.ref
      IL_001b:  newobj     instance void ParallelBoids.Boid::.ctor(class [mscorlib]System.Tuple`2<valuetype [PresentationCore]System.Windows.Media.Color,valuetype [PresentationCore]System.Windows.Media.Color>)
      IL_0020:  stloc.0
      IL_0021:  br.s       IL_0023

//000119:             RandomizeBoidPositionsAndVelocities(rand);
//000120:             foreach (var boidModel in m_boidModels) viewport3D.Children.Add(boidModel);
//000121: 
//000122:             // Configure and start the rendering timer.  A System.Timers.Timer is used to make it easy to turn on and off.
//000123:             var renderTimerPeriod = (int)(1000.0 / FRAMES_PER_SECOND);
//000124:             m_renderTimer = new System.Timers.Timer(renderTimerPeriod);
//000125:             m_renderTimer.Elapsed += (_, __) => m_renderSignal.Set();
//000126:             m_renderTimer.Enabled = true;
//000127: 
//000128:             // Start the rendering loop on a background thread
//000129:             Task.Factory.StartNew(RenderUpdateLoop);
//000130:         }
//000131: 
//000132:         /// <summary>Move the boids to random positions and velocities.</summary>
//000133:         /// <param name="rand">The random number generator to use.</param>
//000134:         private void RandomizeBoidPositionsAndVelocities(Random rand = null)
//000135:         {
//000136:             if (rand == null) rand = new Random();
//000137:             foreach (var boid in m_boidModels)
//000138:             {
//000139:                 boid.Position = new Vector3D(
//000140:                            rand.Next((int)m_aviary.X, (int)(m_aviary.X + m_aviary.SizeX)),
//000141:                            rand.Next((int)m_aviary.Y, (int)(m_aviary.Y + m_aviary.SizeY)),
//000142:                            rand.Next((int)m_aviary.Z, (int)(m_aviary.Z + m_aviary.SizeZ)));
//000143:                 boid.Velocity = new Vector3D(
//000144:                            rand.NextDouble() * 2 - 1,
//000145:                            rand.NextDouble() * 2 - 1,
//000146:                            rand.NextDouble() * 2 - 1);
//000147:             }
//000148:         }
//000149:         #endregion
//000150: 
//000151:         #region Window Interaction Controls
//000152:         /// <summary>Handle keydown events.</summary>
//000153:         /// <param name="sender">The sender.</param>
//000154:         /// <param name="e">The eventargs.</param>
//000155:         private void Window_KeyDown(object sender, KeyEventArgs e)
//000156:         {
//000157:             // If escape is pressed, normalize the window size
//000158:             if (e.Key == Key.Escape)
//000159:             {
//000160:                 Topmost = false;
//000161:                 WindowStyle = WindowStyle.ThreeDBorderWindow;
//000162:                 WindowState = WindowState.Normal;
//000163:             }
//000164: 
//000165:                 // If 'P' is pressed, switch back and forth between serial and parallel
//000166:             else if (e.Key == Key.P)
//000167:             {
//000168:                 int procCount = Environment.ProcessorCount;
//000169:                 m_parallelOptions.MaxDegreeOfParallelism = m_parallelOptions.MaxDegreeOfParallelism == 1 ? procCount : 1;
//000170:             }
//000171: 
//000172:                 // If 'b' is pressed, break/pause the scene until 'b' is pressed again
//000173:             else if (e.Key == Key.B)
//000174:             {
//000175:                 m_renderTimer.Enabled = !m_renderTimer.Enabled;
//000176:             }
//000177: 
//000178:                 // If 't' is pressed, toggle translucency to enable following just one boid
//000179:             else if (e.Key == Key.T)
//000180:             {
//000181:                 for (int i = 1; i < m_boidModels.Length; i++) m_boidModels[i].ToggleTranslucency();
//000182:             }
//000183: 
//000184:                 // If 'a' is pressed, turn auto-panning/zoom of the camera on/off
//000185:             else if (e.Key == Key.A)
//000186:             {
//000187:                 m_autoPanCamera = !m_autoPanCamera;
//000188:             }
//000189: 
//000190:                 // If up or down is pressed and we're in auto-pan mode, 
//000191:             else if ((e.Key == Key.Up || e.Key == Key.Down) && !m_autoPanCamera)
//000192:             {
//000193:                 Zoom(e.Key == Key.Up ? 1 : -1);
//000194:             }
//000195: 
//000196:                 // If 'r' is pressed, reset all of the boids to random positions and velocities
//000197:             else if (e.Key == Key.R)
//000198:             {
//000199:                 RandomizeBoidPositionsAndVelocities();
//000200:             }
//000201: 
//000202:                 // If 'h', display usage instructions to the user
//000203:             else if (e.Key == Key.H)
//000204:             {
//000205:                 string instructions =
//000206:                     "** Window Controls **" + Environment.NewLine +
//000207:                     "Auto-Camera Positioning: 'a'" + Environment.NewLine +
//000208:                     "Pan: Click Left And Drag" + Environment.NewLine +
//000209:                     "Zoom In / Out: Mousewheel (or) Up/Down Keys (or) Ctrl+Middle Mouse Move" + Environment.NewLine +
//000210:                     "Full Screen: Right Double-Click" + Environment.NewLine +
//000211:                     "Restore to Normal Window Size: Right Double-Click (or) Escape Key" + Environment.NewLine +
//000212:                     "Pause: 'b'" + Environment.NewLine +
//000213:                     "Translucency: 't'" + Environment.NewLine +
//000214:                     Environment.NewLine +
//000215:                     "** Boid Controls **" + Environment.NewLine +
//000216:                     "Scatter: Left Double-Click" + Environment.NewLine +
//000217:                     "Change Max Speed: Ctrl + Mousewheel" + Environment.NewLine +
//000218:                     "Randomize: 'r'" + Environment.NewLine +
//000219:                     Environment.NewLine +
//000220:                     "** Parallelism Controls **" + Environment.NewLine +
//000221:                     "Go Parallel: 'p'" + Environment.NewLine;
//000222:                 MessageBox.Show(this, instructions, "Instructions", MessageBoxButton.OK, MessageBoxImage.Information);
//000223:             }
//000224:         }
//000225: 
//000226:         /// <summary>Handle mousedown events.</summary>
//000227:         /// <param name="sender">The sender.</param>
//000228:         /// <param name="e">The eventargs.</param>
//000229:         private void Window_MouseDown(object sender, MouseButtonEventArgs e)
//000230:         {
//000231:             // Log the last mouse position
//000232:             _lastMousePosition = e.GetPosition(this);
//000233:         }
//000234: 
//000235:         /// <summary>Handle mousewheel events.</summary>
//000236:         /// <param name="sender">The sender.</param>
//000237:         /// <param name="e">The eventargs.</param>
//000238:         private void Window_MouseWheel(object sender, MouseWheelEventArgs e)
//000239:         {
//000240:             // If ctrl is pressed, change the max bird speed based on the number of mousewheel turns
//000241:             if ((Keyboard.Modifiers & ModifierKeys.Control) != 0)
//000242:             {
//000243:                 const int MIN_SPEED = 2, MAX_SPEED = 10;
//000244:                 if (e.Delta > 0 && m_speedLimit < MAX_SPEED) m_speedLimit++;
//000245:                 else if (e.Delta < 0 && m_speedLimit > MIN_SPEED) m_speedLimit--;
//000246:             }
//000247:                 // Otherwise, as long as we're not in auto-panning/zooming mode,
//000248:                 // zoom in or out based on the number of mousewheel turns
//000249:             else if (!m_autoPanCamera) Zoom(e.Delta / Mouse.MouseWheelDeltaForOneLine); 
//000250:         }
//000251: 
//000252:         /// <summary>Handle mousedoubleclick events.</summary>
//000253:         /// <param name="sender">The sender.</param>
//000254:         /// <param name="e">The eventargs.</param>
//000255:         private void Window_MouseDoubleClick(object sender, MouseButtonEventArgs e)
//000256:         {
//000257:             // If the right mouse button is double clicked, alternate between maximized and normal view
//000258:             if (e.ChangedButton == MouseButton.Right)
//000259:             {
//000260:                 if (WindowState == WindowState.Maximized)
//000261:                 {
//000262:                     Topmost = false;
//000263:                     WindowStyle = WindowStyle.ThreeDBorderWindow;
//000264:                     WindowState = WindowState.Normal;
//000265:                 }
//000266:                 else
//000267:                 {
//000268:                     Topmost = true;
//000269:                     WindowStyle = WindowStyle.None;
//000270:                     WindowState = WindowState.Maximized;
//000271:                 }
//000272:             }
//000273:                 // If the left mouse button is double clicked, scatter the boids
//000274:             else if (e.ChangedButton == MouseButton.Left)
//000275:             {
//000276:                 Scatter();
//000277:             }
//000278:         }
//000279: 
//000280:         /// <summary>Scatter the boids.</summary>
//000281:         private void Scatter()
//000282:         {
//000283:             // Start scatterring if a scatter isn't already in process
//000284:             if (m_scatterTimer == null)
//000285:             {
//000286:                 // Ka'boom.  Something scares the boids.
//000287:                 SystemSounds.Hand.Play();
//000288: 
//000289:                 // Store original settings
//000290:                 var origHome = m_home;
//000291:                 var origRule1Weight = m_rule1Weight;
//000292:                 var origRule2Weight = m_rule2Weight;
//000293:                 var origRule4Weight = m_rule4Weight;
//000294:                 var origRule5Weight = m_rule5Weight;
//000295: 
//000296:                 // Create new scatter settings
//000297:                 m_home = new Vector3D(0, 0, 0);
//000298:                 m_rule1Weight = origRule1Weight * -5;
//000299:                 m_rule2Weight = origRule2Weight * 2;
//000300:                 m_rule4Weight = 0;
//000301:                 m_rule5Weight = origRule5Weight * -5;
//000302: 
//000303:                 // Start a timer to restore the original settings
//000304:                 m_scatterTimer = new Timer(_ =>
//000305:                 {
//000306:                     // Restore the original settings
//000307:                     m_home = origHome;
//000308:                     m_rule1Weight = origRule1Weight;
//000309:                     m_rule2Weight = origRule2Weight;
//000310:                     m_rule4Weight = origRule4Weight;
//000311:                     m_rule5Weight = origRule5Weight;
//000312: 
//000313:                     // Clean up the timer
//000314:                     m_scatterTimer.Dispose();
//000315:                     m_scatterTimer = null;
//000316:                 }, null, SCATTER_TIME, -1);
//000317:             }
//000318:         }
//000319: 
//000320:         /// <summary>Handle mousemove events.</summary>
//000321:         /// <param name="sender">The sender.</param>
//000322:         /// <param name="e">The eventargs.</param>
//000323:         private void Window_MouseMove(object sender, MouseEventArgs e)
//000324:         {
//000325:             // If we're not auto-panning
//000326:             if (!m_autoPanCamera)
//000327:             {
//000328:                 // Get the new mouse position and compute the difference from the previous
//000329:                 var newPosition = e.GetPosition(this);
//000330:                 var diff = _lastMousePosition - newPosition;
//000331: 
//000332:                 // If the left mouse position was pressed, pan based on the x/y differences
//000333:                 if (e.LeftButton == MouseButtonState.Pressed)
//000334:                 {
//000335:                     camMain.Position = new Point3D(camMain.Position.X + diff.X * .4, camMain.Position.Y - diff.Y * .4, camMain.Position.Z);
//000336:                 }
//000337:                     // If the middle button was pressed, zoom based on the y difference
//000338:                 else if (e.MiddleButton == MouseButtonState.Pressed)
//000339:                 {
//000340:                     Zoom((int)diff.Y);
//000341:                 }
//000342: 
//000343:                 // Store the new position
//000344:                 _lastMousePosition = newPosition;
//000345:             }
//000346:         }
//000347: 
//000348:         /// <summary>Zoom in or out based on the specified degree of zoom.</summary>
//000349:         /// <param name="amountOfChange">Amount to zoom in (positive) or out (negative).</param>
//000350:         private void Zoom(int amountOfChange)
//000351:         {
//000352:             const int ZOOM_FACTOR = 3;
//000353:             camMain.Position = Point3D.Add(camMain.Position, camMain.LookDirection * amountOfChange * ZOOM_FACTOR);
//000354:         }
//000355:         #endregion
//000356: 
//000357:         #region Step and Render
//000358:         /// <summary>Runs the rendering loop.</summary>
//000359:         private void RenderUpdateLoop()
//000360:         {
//000361:             // Loop forever...
//000362:             while (true)
//000363:             {
//000364:                 // Wait to receive a signal that we should render another frame
//000365:                 m_renderSignal.WaitOne();
//000366: 
//000367:                 // Start timing.
//000368:                 m_frameStopwatch.Restart();
//000369: 
//000370:                 // Update the positions and velocities of all of the boids.
//000371:                 StepBoids();
//000372: 
//000373:                 // Update our rendering stats for display to the user
//000374:                 m_totalRenderingMillisecondsSinceLastUserPresentation += m_frameStopwatch.ElapsedMilliseconds;
//000375:                 m_numRendersSinceLastUserPresentation++;
//000376: 
//000377:                 // Render the boids to the UI
//000378:                 Dispatcher.Invoke((Action)RenderBoids, DispatcherPriority.Send, null);
//000379:             }
//000380:         }
//000381: 
//000382:         /// <summary>Step the boids one step, updating their velocities and positions.</summary>
//000383:         private void StepBoids()
//000384:         {
//000385:             // Store the current velocities and positions so that we can operate on an immutable copy
//000386:             foreach (var boid in m_boidModels) boid.StorePositionAndVelocityIntoPrevious();
//000387: 
//000388:             // For each boid, analyze how the various boid rules influence its velocity and position,
//000389:             // then store this new information.  After this step, we'll be able to render the boids.
//000390:             Parallel.ForEach(m_boidModels, m_parallelOptions, boid =>
//000391:             {
//000392:                 var v1_2_3 = PrimaryRules_1_2_3(boid); // weights factored in already in PrimaryRules
//000393:                 var v4 = m_rule4Weight * Rule4_EncourageStayingWithinAviary(boid);
//000394:                 var v5 = m_rule5Weight * Rule5_TendendcyTowardsHome(boid);
//000395: 
//000396:                 boid.Velocity = BoundVelocity(boid.PreviousVelocity + v1_2_3 + v4 + v5, m_speedLimit);
//000397:                 boid.Velocity.Normalize();
//000398: 
//000399:                 var tmpPosition = boid.PreviousPosition + boid.Velocity;
//000400:                 if (tmpPosition.Y >= 0) boid.Position = tmpPosition;
//000401:             });
//000402:         }
//000403: 
//000404:         /// <summary>Render the boids.</summary>
//000405:         private void RenderBoids()
//000406:         {
//000407:             // Make sure the boids are all positioned and pointing correctly
//000408:             foreach (var boid in m_boidModels) boid.TransformByPositionAndVelocity();
//000409: 
//000410:             // Every once in a while, update the user-displayed stats on timings
//000411:             var now = DateTimeOffset.Now;
//000412:             if (now >= m_nextUserPresentation)
//000413:             {
//000414:                 Title = string.Format("Procs: {0}, Time: {1:F2}", m_parallelOptions.MaxDegreeOfParallelism, 
//000415:                     m_numRendersSinceLastUserPresentation > 0 ? 
//000416:                     m_totalRenderingMillisecondsSinceLastUserPresentation / (double)m_numRendersSinceLastUserPresentation : 
//000417:                     0);
//000418:                 m_nextUserPresentation = now.AddSeconds(1);
//000419:                 m_numRendersSinceLastUserPresentation = 0;
//000420:                 m_totalRenderingMillisecondsSinceLastUserPresentation = 0;
//000421:             }
//000422: 
//000423:             // If we're in auto-panning mode, move the camera appropriately
//000424:             if (m_autoPanCamera)
//000425:             {
//000426:                 // Compute the maximum Z value of all of the boids and the center of their mass
//000427:                 double maxZ = double.MinValue;
//000428:                 Vector3D totalPos = new Vector3D();
//000429:                 foreach (var boid in m_boidModels)
//000430:                 {
//000431:                     if (boid.Position.Z > maxZ) maxZ = boid.Position.Z;
//000432:                     totalPos += boid.Position;
//000433:                 }
//000434:                 var newCameraPos = totalPos / m_boidModels.Length;
//000435:                 
//000436:                 // Move the camera to point at the center of the boids, a ways back from the max boid's Z
//000437:                 const int CAMERA_DISTANCE_FROM_MAXZ = 100;
//000438:                 const double CAMERA_SPEED_LIMIT = .01;
//000439:                 var newPos = new Point3D(newCameraPos.X, newCameraPos.Y, maxZ + CAMERA_DISTANCE_FROM_MAXZ);
//000440:                 var cameraVelocity = newPos - camMain.Position;
//000441:                 camMain.Position = camMain.Position + (cameraVelocity * CAMERA_SPEED_LIMIT);
//000442:             }
//000443:         }
//000444:         #endregion
//000445: 
//000446:         #region Boid Rules
//000447:         /// <summary>Run the three primary rules of boidom.</summary>
//000448:         /// <param name="boid">The boid to process.</param>
//000449:         /// <returns>The velocity vector resulting from the three primary rules and their associated weights.</returns>
//000450:         private Vector3D PrimaryRules_1_2_3(Boid boid)
//000451:         {
//000452:             int numNearby = 0;
//000453:             Vector3D summedPosition = new Vector3D();
//000454:             Vector3D summedVelocity = new Vector3D();
//000455:             Vector3D summedSeparation = new Vector3D();
//000456: 
//000457:             // For rule #1, we want the boid to fly towards the center of all of those in its neighborhood.
//000458:             // We find all of those boids, average their positions, and create a velocity vector to move the
//000459:             // boid a bit of the way there.
//000460: 
//000461:             // For rule #2, we want the boid to move away from each other boid it's a bit too close to.
//000462:             // Find all of those boids in its immediate vicinity, and push it away.
//000463: 
//000464:             // For rule #3, we want the boid to match velocities with those boids in its neighborhood.
//000465:             // Sum their velocities, find the average, and move this boid's velocity a bit in that direction.
//000466: 
//000467:             foreach (var other in m_boidModels)
//000468:             {
//000469:                 if (other != boid && 
//000470:                     (other.PreviousPosition - boid.PreviousPosition).Length <= NEIGHBORHOOD_SIZE &&
//000471:                     boid.ComputeAngle(other) <= 135)
//000472:                 {
//000473:                     summedPosition += other.PreviousPosition;
//000474:                     summedVelocity += other.PreviousVelocity;
//000475:                     numNearby++;
//000476: 
//000477:                     if ((other.PreviousPosition - boid.PreviousPosition).Length < MIN_DISTANCE_FROM_NEIGHBOR)
//000478:                     {
//000479:                         summedSeparation -= (other.PreviousPosition - boid.PreviousPosition);
//000480:                     }
//000481:                 }
//000482:             }
//000483: 
//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
//000485:             var rule2_separateFromNearby = summedSeparation;
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
//000487: 
//000488:             return
//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
//000499:             var v = new Vector3D();
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
      IL_0023:  ldloc.0
      IL_0024:  ret
    } // end of method '<>c__DisplayClass3'::'<Window_Loaded>b__1'

  } // end of class '<>c__DisplayClass3'

  .class auto ansi sealed nested private beforefieldinit '<>c__DisplayClass6'
         extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .field public valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D origHome
    .field public float64 origRule1Weight
    .field public float64 origRule2Weight
    .field public float64 origRule4Weight
    .field public float64 origRule5Weight
    .field public class ParallelBoids.MainWindow '<>4__this'
    .method public hidebysig specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      // Code size       7 (0x7)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ret
    } // end of method '<>c__DisplayClass6'::.ctor

    .method public hidebysig instance void 
            '<Scatter>b__5'(object _) cil managed
    {
      // Code size       116 (0x74)
      .maxstack  2
//000305:                 {
      IL_0000:  nop
//000306:                     // Restore the original settings
//000307:                     m_home = origHome;
      IL_0001:  ldarg.0
      IL_0002:  ldfld      class ParallelBoids.MainWindow ParallelBoids.MainWindow/'<>c__DisplayClass6'::'<>4__this'
      IL_0007:  ldarg.0
      IL_0008:  ldfld      valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.MainWindow/'<>c__DisplayClass6'::origHome
      IL_000d:  stfld      valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.MainWindow::m_home
//000308:                     m_rule1Weight = origRule1Weight;
      IL_0012:  ldarg.0
      IL_0013:  ldfld      class ParallelBoids.MainWindow ParallelBoids.MainWindow/'<>c__DisplayClass6'::'<>4__this'
      IL_0018:  ldarg.0
      IL_0019:  ldfld      float64 ParallelBoids.MainWindow/'<>c__DisplayClass6'::origRule1Weight
      IL_001e:  stfld      float64 ParallelBoids.MainWindow::m_rule1Weight
//000309:                     m_rule2Weight = origRule2Weight;
      IL_0023:  ldarg.0
      IL_0024:  ldfld      class ParallelBoids.MainWindow ParallelBoids.MainWindow/'<>c__DisplayClass6'::'<>4__this'
      IL_0029:  ldarg.0
      IL_002a:  ldfld      float64 ParallelBoids.MainWindow/'<>c__DisplayClass6'::origRule2Weight
      IL_002f:  stfld      float64 ParallelBoids.MainWindow::m_rule2Weight
//000310:                     m_rule4Weight = origRule4Weight;
      IL_0034:  ldarg.0
      IL_0035:  ldfld      class ParallelBoids.MainWindow ParallelBoids.MainWindow/'<>c__DisplayClass6'::'<>4__this'
      IL_003a:  ldarg.0
      IL_003b:  ldfld      float64 ParallelBoids.MainWindow/'<>c__DisplayClass6'::origRule4Weight
      IL_0040:  stfld      float64 ParallelBoids.MainWindow::m_rule4Weight
//000311:                     m_rule5Weight = origRule5Weight;
      IL_0045:  ldarg.0
      IL_0046:  ldfld      class ParallelBoids.MainWindow ParallelBoids.MainWindow/'<>c__DisplayClass6'::'<>4__this'
      IL_004b:  ldarg.0
      IL_004c:  ldfld      float64 ParallelBoids.MainWindow/'<>c__DisplayClass6'::origRule5Weight
      IL_0051:  stfld      float64 ParallelBoids.MainWindow::m_rule5Weight
//000312: 
//000313:                     // Clean up the timer
//000314:                     m_scatterTimer.Dispose();
      IL_0056:  ldarg.0
      IL_0057:  ldfld      class ParallelBoids.MainWindow ParallelBoids.MainWindow/'<>c__DisplayClass6'::'<>4__this'
      IL_005c:  ldfld      class [mscorlib]System.Threading.Timer ParallelBoids.MainWindow::m_scatterTimer
      IL_0061:  callvirt   instance void [mscorlib]System.Threading.Timer::Dispose()
      IL_0066:  nop
//000315:                     m_scatterTimer = null;
      IL_0067:  ldarg.0
      IL_0068:  ldfld      class ParallelBoids.MainWindow ParallelBoids.MainWindow/'<>c__DisplayClass6'::'<>4__this'
      IL_006d:  ldnull
      IL_006e:  stfld      class [mscorlib]System.Threading.Timer ParallelBoids.MainWindow::m_scatterTimer
//000316:                 }, null, SCATTER_TIME, -1);
//000317:             }
//000318:         }
//000319: 
//000320:         /// <summary>Handle mousemove events.</summary>
//000321:         /// <param name="sender">The sender.</param>
//000322:         /// <param name="e">The eventargs.</param>
//000323:         private void Window_MouseMove(object sender, MouseEventArgs e)
//000324:         {
//000325:             // If we're not auto-panning
//000326:             if (!m_autoPanCamera)
//000327:             {
//000328:                 // Get the new mouse position and compute the difference from the previous
//000329:                 var newPosition = e.GetPosition(this);
//000330:                 var diff = _lastMousePosition - newPosition;
//000331: 
//000332:                 // If the left mouse position was pressed, pan based on the x/y differences
//000333:                 if (e.LeftButton == MouseButtonState.Pressed)
//000334:                 {
//000335:                     camMain.Position = new Point3D(camMain.Position.X + diff.X * .4, camMain.Position.Y - diff.Y * .4, camMain.Position.Z);
//000336:                 }
//000337:                     // If the middle button was pressed, zoom based on the y difference
//000338:                 else if (e.MiddleButton == MouseButtonState.Pressed)
//000339:                 {
//000340:                     Zoom((int)diff.Y);
//000341:                 }
//000342: 
//000343:                 // Store the new position
//000344:                 _lastMousePosition = newPosition;
//000345:             }
//000346:         }
//000347: 
//000348:         /// <summary>Zoom in or out based on the specified degree of zoom.</summary>
//000349:         /// <param name="amountOfChange">Amount to zoom in (positive) or out (negative).</param>
//000350:         private void Zoom(int amountOfChange)
//000351:         {
//000352:             const int ZOOM_FACTOR = 3;
//000353:             camMain.Position = Point3D.Add(camMain.Position, camMain.LookDirection * amountOfChange * ZOOM_FACTOR);
//000354:         }
//000355:         #endregion
//000356: 
//000357:         #region Step and Render
//000358:         /// <summary>Runs the rendering loop.</summary>
//000359:         private void RenderUpdateLoop()
//000360:         {
//000361:             // Loop forever...
//000362:             while (true)
//000363:             {
//000364:                 // Wait to receive a signal that we should render another frame
//000365:                 m_renderSignal.WaitOne();
//000366: 
//000367:                 // Start timing.
//000368:                 m_frameStopwatch.Restart();
//000369: 
//000370:                 // Update the positions and velocities of all of the boids.
//000371:                 StepBoids();
//000372: 
//000373:                 // Update our rendering stats for display to the user
//000374:                 m_totalRenderingMillisecondsSinceLastUserPresentation += m_frameStopwatch.ElapsedMilliseconds;
//000375:                 m_numRendersSinceLastUserPresentation++;
//000376: 
//000377:                 // Render the boids to the UI
//000378:                 Dispatcher.Invoke((Action)RenderBoids, DispatcherPriority.Send, null);
//000379:             }
//000380:         }
//000381: 
//000382:         /// <summary>Step the boids one step, updating their velocities and positions.</summary>
//000383:         private void StepBoids()
//000384:         {
//000385:             // Store the current velocities and positions so that we can operate on an immutable copy
//000386:             foreach (var boid in m_boidModels) boid.StorePositionAndVelocityIntoPrevious();
//000387: 
//000388:             // For each boid, analyze how the various boid rules influence its velocity and position,
//000389:             // then store this new information.  After this step, we'll be able to render the boids.
//000390:             Parallel.ForEach(m_boidModels, m_parallelOptions, boid =>
//000391:             {
//000392:                 var v1_2_3 = PrimaryRules_1_2_3(boid); // weights factored in already in PrimaryRules
//000393:                 var v4 = m_rule4Weight * Rule4_EncourageStayingWithinAviary(boid);
//000394:                 var v5 = m_rule5Weight * Rule5_TendendcyTowardsHome(boid);
//000395: 
//000396:                 boid.Velocity = BoundVelocity(boid.PreviousVelocity + v1_2_3 + v4 + v5, m_speedLimit);
//000397:                 boid.Velocity.Normalize();
//000398: 
//000399:                 var tmpPosition = boid.PreviousPosition + boid.Velocity;
//000400:                 if (tmpPosition.Y >= 0) boid.Position = tmpPosition;
//000401:             });
//000402:         }
//000403: 
//000404:         /// <summary>Render the boids.</summary>
//000405:         private void RenderBoids()
//000406:         {
//000407:             // Make sure the boids are all positioned and pointing correctly
//000408:             foreach (var boid in m_boidModels) boid.TransformByPositionAndVelocity();
//000409: 
//000410:             // Every once in a while, update the user-displayed stats on timings
//000411:             var now = DateTimeOffset.Now;
//000412:             if (now >= m_nextUserPresentation)
//000413:             {
//000414:                 Title = string.Format("Procs: {0}, Time: {1:F2}", m_parallelOptions.MaxDegreeOfParallelism, 
//000415:                     m_numRendersSinceLastUserPresentation > 0 ? 
//000416:                     m_totalRenderingMillisecondsSinceLastUserPresentation / (double)m_numRendersSinceLastUserPresentation : 
//000417:                     0);
//000418:                 m_nextUserPresentation = now.AddSeconds(1);
//000419:                 m_numRendersSinceLastUserPresentation = 0;
//000420:                 m_totalRenderingMillisecondsSinceLastUserPresentation = 0;
//000421:             }
//000422: 
//000423:             // If we're in auto-panning mode, move the camera appropriately
//000424:             if (m_autoPanCamera)
//000425:             {
//000426:                 // Compute the maximum Z value of all of the boids and the center of their mass
//000427:                 double maxZ = double.MinValue;
//000428:                 Vector3D totalPos = new Vector3D();
//000429:                 foreach (var boid in m_boidModels)
//000430:                 {
//000431:                     if (boid.Position.Z > maxZ) maxZ = boid.Position.Z;
//000432:                     totalPos += boid.Position;
//000433:                 }
//000434:                 var newCameraPos = totalPos / m_boidModels.Length;
//000435:                 
//000436:                 // Move the camera to point at the center of the boids, a ways back from the max boid's Z
//000437:                 const int CAMERA_DISTANCE_FROM_MAXZ = 100;
//000438:                 const double CAMERA_SPEED_LIMIT = .01;
//000439:                 var newPos = new Point3D(newCameraPos.X, newCameraPos.Y, maxZ + CAMERA_DISTANCE_FROM_MAXZ);
//000440:                 var cameraVelocity = newPos - camMain.Position;
//000441:                 camMain.Position = camMain.Position + (cameraVelocity * CAMERA_SPEED_LIMIT);
//000442:             }
//000443:         }
//000444:         #endregion
//000445: 
//000446:         #region Boid Rules
//000447:         /// <summary>Run the three primary rules of boidom.</summary>
//000448:         /// <param name="boid">The boid to process.</param>
//000449:         /// <returns>The velocity vector resulting from the three primary rules and their associated weights.</returns>
//000450:         private Vector3D PrimaryRules_1_2_3(Boid boid)
//000451:         {
//000452:             int numNearby = 0;
//000453:             Vector3D summedPosition = new Vector3D();
//000454:             Vector3D summedVelocity = new Vector3D();
//000455:             Vector3D summedSeparation = new Vector3D();
//000456: 
//000457:             // For rule #1, we want the boid to fly towards the center of all of those in its neighborhood.
//000458:             // We find all of those boids, average their positions, and create a velocity vector to move the
//000459:             // boid a bit of the way there.
//000460: 
//000461:             // For rule #2, we want the boid to move away from each other boid it's a bit too close to.
//000462:             // Find all of those boids in its immediate vicinity, and push it away.
//000463: 
//000464:             // For rule #3, we want the boid to match velocities with those boids in its neighborhood.
//000465:             // Sum their velocities, find the average, and move this boid's velocity a bit in that direction.
//000466: 
//000467:             foreach (var other in m_boidModels)
//000468:             {
//000469:                 if (other != boid && 
//000470:                     (other.PreviousPosition - boid.PreviousPosition).Length <= NEIGHBORHOOD_SIZE &&
//000471:                     boid.ComputeAngle(other) <= 135)
//000472:                 {
//000473:                     summedPosition += other.PreviousPosition;
//000474:                     summedVelocity += other.PreviousVelocity;
//000475:                     numNearby++;
//000476: 
//000477:                     if ((other.PreviousPosition - boid.PreviousPosition).Length < MIN_DISTANCE_FROM_NEIGHBOR)
//000478:                     {
//000479:                         summedSeparation -= (other.PreviousPosition - boid.PreviousPosition);
//000480:                     }
//000481:                 }
//000482:             }
//000483: 
//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
//000485:             var rule2_separateFromNearby = summedSeparation;
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
//000487: 
//000488:             return
//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
//000499:             var v = new Vector3D();
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
      IL_0073:  ret
    } // end of method '<>c__DisplayClass6'::'<Scatter>b__5'

  } // end of class '<>c__DisplayClass6'

  .field private static literal int32 FRAMES_PER_SECOND = int32(0x00000018)
  .field private static literal int32 NUM_BOIDS = int32(0x00000384)
  .field private static literal int32 NEIGHBORHOOD_SIZE = int32(0x00000064)
  .field private static literal int32 MIN_DISTANCE_FROM_NEIGHBOR = int32(0x00000014)
  .field private static literal float64 DEGREES_OF_SIGHT = float64(180.)
  .field private static literal int64 SCATTER_TIME = int64(0xFA0)
  .field private static literal float64 PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION = float64(1.e-002)
  .field private static literal float64 PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY = float64(1.e-002)
  .field private static literal float64 PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS = float64(0.20000000000000001)
  .field private static literal float64 PERCENTAGE_TO_MOVE_TOWARDS_HOME = float64(1.e-002)
  .field private static literal float64 GLOBAL_MODIFICATION_RATE = float64(1.)
  .field private float64 m_speedLimit
  .field private float64 m_rule1Weight
  .field private float64 m_rule2Weight
  .field private float64 m_rule3Weight
  .field private float64 m_rule4Weight
  .field private float64 m_rule5Weight
  .field private class ParallelBoids.Boid[] m_boidModels
  .field private valuetype [PresentationCore]System.Windows.Media.Media3D.Rect3D m_aviary
  .field private valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D m_home
  .field private class [mscorlib]System.Threading.Tasks.ParallelOptions m_parallelOptions
  .field private bool m_autoPanCamera
  .field private class [mscorlib]System.Threading.Timer m_scatterTimer
  .field private class [System]System.Timers.Timer m_renderTimer
  .field private class [mscorlib]System.Threading.AutoResetEvent m_renderSignal
  .field private class [System]System.Diagnostics.Stopwatch m_frameStopwatch
  .field private int32 m_numRendersSinceLastUserPresentation
  .field private int64 m_totalRenderingMillisecondsSinceLastUserPresentation
  .field private valuetype [mscorlib]System.DateTimeOffset m_nextUserPresentation
  .field private valuetype [WindowsBase]System.Windows.Point _lastMousePosition
  .field assembly class [PresentationFramework]System.Windows.Controls.Viewport3D viewport3D
  .field assembly class [PresentationCore]System.Windows.Media.Media3D.PerspectiveCamera camMain
  .field assembly class [PresentationCore]System.Windows.Media.Media3D.AxisAngleRotation3D myAngleRotation
  .field private bool _contentLoaded
  .method public hidebysig specialname rtspecialname 
          instance void  .ctor() cil managed
  {
    // Code size       184 (0xb8)
    .maxstack  3
    .locals init ([0] class [mscorlib]System.Threading.Tasks.ParallelOptions '<>g__initLocal0')
//000040:         private double m_speedLimit = 10.0;
    IL_0000:  ldarg.0
    IL_0001:  ldc.r8     10.
    IL_000a:  stfld      float64 ParallelBoids.MainWindow::m_speedLimit
//000041:         /// <summary>Multiplicative factor used when determining how much to move a boid towards the average position of boids in its neighborhood.</summary>
//000042:         private const double PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION = .01 * GLOBAL_MODIFICATION_RATE;
//000043:         /// <summary>Multiplicative factor used when determining how much to move a boid towards the average velocity of boids in its neighborhood.</summary>
//000044:         private const double PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY = .01 * GLOBAL_MODIFICATION_RATE;
//000045:         /// <summary>Multiplicative factor used when determining how much to move a boid towards staying in bounds if it's currently out of bounds.</summary>
//000046:         private const double PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS = .2 * GLOBAL_MODIFICATION_RATE;
//000047:         /// <summary>Multiplicative factor used when determining how much to move a boid towards its "home" position.</summary>
//000048:         private const double PERCENTAGE_TO_MOVE_TOWARDS_HOME = .01 * GLOBAL_MODIFICATION_RATE;
//000049:         /// <summary>Multiplicative factor included in all velocity-modifying rates.</summary>
//000050:         private const double GLOBAL_MODIFICATION_RATE = 1.0;
//000051:         /// <summary>Base weight to use for rule #1: flying towards the center of the neighborhood.</summary>
//000052:         private double m_rule1Weight = 1.0;
    IL_000f:  ldarg.0
    IL_0010:  ldc.r8     1.
    IL_0019:  stfld      float64 ParallelBoids.MainWindow::m_rule1Weight
//000053:         /// <summary>Base weight to use for rule #2: staying away from neighbors too close to it.</summary>
//000054:         private double m_rule2Weight = 1.1;
    IL_001e:  ldarg.0
    IL_001f:  ldc.r8     1.1000000000000001
    IL_0028:  stfld      float64 ParallelBoids.MainWindow::m_rule2Weight
//000055:         /// <summary>Base weight to use for rule #3: maintaining a similar velocity to its neighbors.</summary>
//000056:         private double m_rule3Weight = 1.0;
    IL_002d:  ldarg.0
    IL_002e:  ldc.r8     1.
    IL_0037:  stfld      float64 ParallelBoids.MainWindow::m_rule3Weight
//000057:         /// <summary>Base weight to use for rule #4: staying within the aviary.</summary>
//000058:         private double m_rule4Weight = 0.9;
    IL_003c:  ldarg.0
    IL_003d:  ldc.r8     0.90000000000000002
    IL_0046:  stfld      float64 ParallelBoids.MainWindow::m_rule4Weight
//000059:         /// <summary>Base weight to use for rule #5: staying close to home.</summary>
//000060:         private double m_rule5Weight = 0.8;
    IL_004b:  ldarg.0
    IL_004c:  ldc.r8     0.80000000000000004
    IL_0055:  stfld      float64 ParallelBoids.MainWindow::m_rule5Weight
//000061:         #endregion
//000062: 
//000063:         #region Member Variables
//000064:         /// <summary>The boids.</summary>
//000065:         private Boid[] m_boidModels;
//000066:         /// <summary>The bounds of the aviary in which the boids fly.</summary>
//000067:         private Rect3D m_aviary;
//000068:         /// <summary>The "home" position boids tend towards.</summary>
//000069:         private Vector3D m_home;
//000070:         /// <summary>Parallel options to use for parallelized loops.</summary>
//000071:         private ParallelOptions m_parallelOptions = new ParallelOptions() { MaxDegreeOfParallelism = 1 };
    IL_005a:  ldarg.0
    IL_005b:  newobj     instance void [mscorlib]System.Threading.Tasks.ParallelOptions::.ctor()
    IL_0060:  stloc.0
    IL_0061:  ldloc.0
    IL_0062:  ldc.i4.1
    IL_0063:  callvirt   instance void [mscorlib]System.Threading.Tasks.ParallelOptions::set_MaxDegreeOfParallelism(int32)
    IL_0068:  nop
    IL_0069:  ldloc.0
    IL_006a:  stfld      class [mscorlib]System.Threading.Tasks.ParallelOptions ParallelBoids.MainWindow::m_parallelOptions
//000072:         /// <summary>Whether to move the camera automatically to keep boids in view.</summary>
//000073:         private bool m_autoPanCamera = true;
    IL_006f:  ldarg.0
    IL_0070:  ldc.i4.1
    IL_0071:  stfld      bool ParallelBoids.MainWindow::m_autoPanCamera
//000074:         /// <summary>Timer used to control scattering behavior when boids get spooked.</summary>
//000075:         private Timer m_scatterTimer;
//000076:         /// <summary>Timer used to control the rendering signal.</summary>
//000077:         private System.Timers.Timer m_renderTimer;
//000078:         /// <summary>Event used to signal the background processing thread that it should compute a new frame.</summary>
//000079:         private AutoResetEvent m_renderSignal = new AutoResetEvent(false);
    IL_0076:  ldarg.0
    IL_0077:  ldc.i4.0
    IL_0078:  newobj     instance void [mscorlib]System.Threading.AutoResetEvent::.ctor(bool)
    IL_007d:  stfld      class [mscorlib]System.Threading.AutoResetEvent ParallelBoids.MainWindow::m_renderSignal
//000080:         /// <summary>Stopwatch used to time how long it takes to compute a frame.</summary>
//000081:         private Stopwatch m_frameStopwatch = new Stopwatch();
    IL_0082:  ldarg.0
    IL_0083:  newobj     instance void [System]System.Diagnostics.Stopwatch::.ctor()
    IL_0088:  stfld      class [System]System.Diagnostics.Stopwatch ParallelBoids.MainWindow::m_frameStopwatch
//000082:         /// <summary>The number of frames rendered since the last time the value was displayed to the user.</summary>
//000083:         private int m_numRendersSinceLastUserPresentation = 0;
    IL_008d:  ldarg.0
    IL_008e:  ldc.i4.0
    IL_008f:  stfld      int32 ParallelBoids.MainWindow::m_numRendersSinceLastUserPresentation
//000084:         /// <summary>The total time spent rendering since the last time the value was displayed to the user.</summary>
//000085:         private long m_totalRenderingMillisecondsSinceLastUserPresentation = 0;
    IL_0094:  ldarg.0
    IL_0095:  ldc.i4.0
    IL_0096:  conv.i8
    IL_0097:  stfld      int64 ParallelBoids.MainWindow::m_totalRenderingMillisecondsSinceLastUserPresentation
//000086:         /// <summary>The next time the sec/frame value should be displayed to the user.</summary>
//000087:         private DateTimeOffset m_nextUserPresentation = DateTimeOffset.Now;
    IL_009c:  ldarg.0
    IL_009d:  call       valuetype [mscorlib]System.DateTimeOffset [mscorlib]System.DateTimeOffset::get_Now()
    IL_00a2:  stfld      valuetype [mscorlib]System.DateTimeOffset ParallelBoids.MainWindow::m_nextUserPresentation
//000088:         /// <summary>The last mouse position while it was down.</summary>
//000089:         private Point _lastMousePosition;
//000090:         #endregion
//000091: 
//000092:         #region Initialization
//000093:         /// <summary>Initializes the window.</summary>
//000094:         public MainWindow() { InitializeComponent(); }
    IL_00a7:  ldarg.0
    IL_00a8:  call       instance void [PresentationFramework]System.Windows.Window::.ctor()
    IL_00ad:  nop
    IL_00ae:  nop
    IL_00af:  ldarg.0
    IL_00b0:  call       instance void ParallelBoids.MainWindow::InitializeComponent()
    IL_00b5:  nop
    IL_00b6:  nop
    IL_00b7:  ret
  } // end of method MainWindow::.ctor

  .method private hidebysig instance void 
          Window_Loaded(object sender,
                        class [PresentationCore]System.Windows.RoutedEventArgs e) cil managed
  {
    // Code size       396 (0x18c)
    .maxstack  8
    .locals init ([0] class ParallelBoids.Boid boidModel,
             [1] int32 renderTimerPeriod,
             [2] class ParallelBoids.MainWindow/'<>c__DisplayClass3' 'CS$<>8__locals4',
             [3] class [mscorlib]System.Tuple`2<valuetype [PresentationCore]System.Windows.Media.Color,valuetype [PresentationCore]System.Windows.Media.Color>[] CS$0$0000,
             [4] class ParallelBoids.Boid[] CS$6$0001,
             [5] int32 CS$7$0002,
             [6] bool CS$4$0003)
//000095: 
//000096:         /// <summary>Initialize the scene.</summary>
//000097:         /// <param name="sender">The sender.</param>
//000098:         /// <param name="e">The eventargs</param>
//000099:         private void Window_Loaded(object sender, RoutedEventArgs e)
//000100:         {
//000101:             this.Cursor = Cursors.Hand;
//000102: 
//000103:             // Set up the aviary.  This should match the size of the grass geometry configured in the XAML.
//000104:             m_aviary = new Rect3D(-300, 0, -400, 600, 180, 800);
//000105:             m_home = new Vector3D(0, 15, 0); // home is close to 0,0,0, just a bit off the ground
//000106: 
//000107:             // The color combinations to use for boids.  At least one combination is necessary,
//000108:             // but more can be added to get more variations.
//000109:             var colorCombinations = new Tuple<Color, Color>[]
//000110:             {
//000111:                 Tuple.Create(Colors.SeaGreen, Colors.Silver),
//000112:                 Tuple.Create(Colors.Pink, Colors.Purple),
//000113:                 Tuple.Create(Colors.Yellow, Colors.Gold)
//000114:             };
//000115: 
//000116:             // Generate all of the boids, with random color, position, and velocity assignments.  Then add them to the scene.
//000117:             var rand = new Random();
//000118:             m_boidModels = Enumerable.Range(0, NUM_BOIDS).Select(_ => new Boid(colorCombinations[rand.Next(0, colorCombinations.Length)])).ToArray();
//000119:             RandomizeBoidPositionsAndVelocities(rand);
//000120:             foreach (var boidModel in m_boidModels) viewport3D.Children.Add(boidModel);
//000121: 
//000122:             // Configure and start the rendering timer.  A System.Timers.Timer is used to make it easy to turn on and off.
//000123:             var renderTimerPeriod = (int)(1000.0 / FRAMES_PER_SECOND);
//000124:             m_renderTimer = new System.Timers.Timer(renderTimerPeriod);
//000125:             m_renderTimer.Elapsed += (_, __) => m_renderSignal.Set();
//000126:             m_renderTimer.Enabled = true;
//000127: 
//000128:             // Start the rendering loop on a background thread
//000129:             Task.Factory.StartNew(RenderUpdateLoop);
//000130:         }
//000131: 
//000132:         /// <summary>Move the boids to random positions and velocities.</summary>
//000133:         /// <param name="rand">The random number generator to use.</param>
//000134:         private void RandomizeBoidPositionsAndVelocities(Random rand = null)
//000135:         {
//000136:             if (rand == null) rand = new Random();
//000137:             foreach (var boid in m_boidModels)
//000138:             {
//000139:                 boid.Position = new Vector3D(
//000140:                            rand.Next((int)m_aviary.X, (int)(m_aviary.X + m_aviary.SizeX)),
//000141:                            rand.Next((int)m_aviary.Y, (int)(m_aviary.Y + m_aviary.SizeY)),
//000142:                            rand.Next((int)m_aviary.Z, (int)(m_aviary.Z + m_aviary.SizeZ)));
//000143:                 boid.Velocity = new Vector3D(
//000144:                            rand.NextDouble() * 2 - 1,
//000145:                            rand.NextDouble() * 2 - 1,
//000146:                            rand.NextDouble() * 2 - 1);
//000147:             }
//000148:         }
//000149:         #endregion
//000150: 
//000151:         #region Window Interaction Controls
//000152:         /// <summary>Handle keydown events.</summary>
//000153:         /// <param name="sender">The sender.</param>
//000154:         /// <param name="e">The eventargs.</param>
//000155:         private void Window_KeyDown(object sender, KeyEventArgs e)
//000156:         {
//000157:             // If escape is pressed, normalize the window size
//000158:             if (e.Key == Key.Escape)
//000159:             {
//000160:                 Topmost = false;
//000161:                 WindowStyle = WindowStyle.ThreeDBorderWindow;
//000162:                 WindowState = WindowState.Normal;
//000163:             }
//000164: 
//000165:                 // If 'P' is pressed, switch back and forth between serial and parallel
//000166:             else if (e.Key == Key.P)
//000167:             {
//000168:                 int procCount = Environment.ProcessorCount;
//000169:                 m_parallelOptions.MaxDegreeOfParallelism = m_parallelOptions.MaxDegreeOfParallelism == 1 ? procCount : 1;
//000170:             }
//000171: 
//000172:                 // If 'b' is pressed, break/pause the scene until 'b' is pressed again
//000173:             else if (e.Key == Key.B)
//000174:             {
//000175:                 m_renderTimer.Enabled = !m_renderTimer.Enabled;
//000176:             }
//000177: 
//000178:                 // If 't' is pressed, toggle translucency to enable following just one boid
//000179:             else if (e.Key == Key.T)
//000180:             {
//000181:                 for (int i = 1; i < m_boidModels.Length; i++) m_boidModels[i].ToggleTranslucency();
//000182:             }
//000183: 
//000184:                 // If 'a' is pressed, turn auto-panning/zoom of the camera on/off
//000185:             else if (e.Key == Key.A)
//000186:             {
//000187:                 m_autoPanCamera = !m_autoPanCamera;
//000188:             }
//000189: 
//000190:                 // If up or down is pressed and we're in auto-pan mode, 
//000191:             else if ((e.Key == Key.Up || e.Key == Key.Down) && !m_autoPanCamera)
//000192:             {
//000193:                 Zoom(e.Key == Key.Up ? 1 : -1);
//000194:             }
//000195: 
//000196:                 // If 'r' is pressed, reset all of the boids to random positions and velocities
//000197:             else if (e.Key == Key.R)
//000198:             {
//000199:                 RandomizeBoidPositionsAndVelocities();
//000200:             }
//000201: 
//000202:                 // If 'h', display usage instructions to the user
//000203:             else if (e.Key == Key.H)
//000204:             {
//000205:                 string instructions =
//000206:                     "** Window Controls **" + Environment.NewLine +
//000207:                     "Auto-Camera Positioning: 'a'" + Environment.NewLine +
//000208:                     "Pan: Click Left And Drag" + Environment.NewLine +
//000209:                     "Zoom In / Out: Mousewheel (or) Up/Down Keys (or) Ctrl+Middle Mouse Move" + Environment.NewLine +
//000210:                     "Full Screen: Right Double-Click" + Environment.NewLine +
//000211:                     "Restore to Normal Window Size: Right Double-Click (or) Escape Key" + Environment.NewLine +
//000212:                     "Pause: 'b'" + Environment.NewLine +
//000213:                     "Translucency: 't'" + Environment.NewLine +
//000214:                     Environment.NewLine +
//000215:                     "** Boid Controls **" + Environment.NewLine +
//000216:                     "Scatter: Left Double-Click" + Environment.NewLine +
//000217:                     "Change Max Speed: Ctrl + Mousewheel" + Environment.NewLine +
//000218:                     "Randomize: 'r'" + Environment.NewLine +
//000219:                     Environment.NewLine +
//000220:                     "** Parallelism Controls **" + Environment.NewLine +
//000221:                     "Go Parallel: 'p'" + Environment.NewLine;
//000222:                 MessageBox.Show(this, instructions, "Instructions", MessageBoxButton.OK, MessageBoxImage.Information);
//000223:             }
//000224:         }
//000225: 
//000226:         /// <summary>Handle mousedown events.</summary>
//000227:         /// <param name="sender">The sender.</param>
//000228:         /// <param name="e">The eventargs.</param>
//000229:         private void Window_MouseDown(object sender, MouseButtonEventArgs e)
//000230:         {
//000231:             // Log the last mouse position
//000232:             _lastMousePosition = e.GetPosition(this);
//000233:         }
//000234: 
//000235:         /// <summary>Handle mousewheel events.</summary>
//000236:         /// <param name="sender">The sender.</param>
//000237:         /// <param name="e">The eventargs.</param>
//000238:         private void Window_MouseWheel(object sender, MouseWheelEventArgs e)
//000239:         {
//000240:             // If ctrl is pressed, change the max bird speed based on the number of mousewheel turns
//000241:             if ((Keyboard.Modifiers & ModifierKeys.Control) != 0)
//000242:             {
//000243:                 const int MIN_SPEED = 2, MAX_SPEED = 10;
//000244:                 if (e.Delta > 0 && m_speedLimit < MAX_SPEED) m_speedLimit++;
//000245:                 else if (e.Delta < 0 && m_speedLimit > MIN_SPEED) m_speedLimit--;
//000246:             }
//000247:                 // Otherwise, as long as we're not in auto-panning/zooming mode,
//000248:                 // zoom in or out based on the number of mousewheel turns
//000249:             else if (!m_autoPanCamera) Zoom(e.Delta / Mouse.MouseWheelDeltaForOneLine); 
//000250:         }
//000251: 
//000252:         /// <summary>Handle mousedoubleclick events.</summary>
//000253:         /// <param name="sender">The sender.</param>
//000254:         /// <param name="e">The eventargs.</param>
//000255:         private void Window_MouseDoubleClick(object sender, MouseButtonEventArgs e)
//000256:         {
//000257:             // If the right mouse button is double clicked, alternate between maximized and normal view
//000258:             if (e.ChangedButton == MouseButton.Right)
//000259:             {
//000260:                 if (WindowState == WindowState.Maximized)
//000261:                 {
//000262:                     Topmost = false;
//000263:                     WindowStyle = WindowStyle.ThreeDBorderWindow;
//000264:                     WindowState = WindowState.Normal;
//000265:                 }
//000266:                 else
//000267:                 {
//000268:                     Topmost = true;
//000269:                     WindowStyle = WindowStyle.None;
//000270:                     WindowState = WindowState.Maximized;
//000271:                 }
//000272:             }
//000273:                 // If the left mouse button is double clicked, scatter the boids
//000274:             else if (e.ChangedButton == MouseButton.Left)
//000275:             {
//000276:                 Scatter();
//000277:             }
//000278:         }
//000279: 
//000280:         /// <summary>Scatter the boids.</summary>
//000281:         private void Scatter()
//000282:         {
//000283:             // Start scatterring if a scatter isn't already in process
//000284:             if (m_scatterTimer == null)
//000285:             {
//000286:                 // Ka'boom.  Something scares the boids.
//000287:                 SystemSounds.Hand.Play();
//000288: 
//000289:                 // Store original settings
//000290:                 var origHome = m_home;
//000291:                 var origRule1Weight = m_rule1Weight;
//000292:                 var origRule2Weight = m_rule2Weight;
//000293:                 var origRule4Weight = m_rule4Weight;
//000294:                 var origRule5Weight = m_rule5Weight;
//000295: 
//000296:                 // Create new scatter settings
//000297:                 m_home = new Vector3D(0, 0, 0);
//000298:                 m_rule1Weight = origRule1Weight * -5;
//000299:                 m_rule2Weight = origRule2Weight * 2;
//000300:                 m_rule4Weight = 0;
//000301:                 m_rule5Weight = origRule5Weight * -5;
//000302: 
//000303:                 // Start a timer to restore the original settings
//000304:                 m_scatterTimer = new Timer(_ =>
//000305:                 {
//000306:                     // Restore the original settings
//000307:                     m_home = origHome;
//000308:                     m_rule1Weight = origRule1Weight;
//000309:                     m_rule2Weight = origRule2Weight;
//000310:                     m_rule4Weight = origRule4Weight;
//000311:                     m_rule5Weight = origRule5Weight;
//000312: 
//000313:                     // Clean up the timer
//000314:                     m_scatterTimer.Dispose();
//000315:                     m_scatterTimer = null;
//000316:                 }, null, SCATTER_TIME, -1);
//000317:             }
//000318:         }
//000319: 
//000320:         /// <summary>Handle mousemove events.</summary>
//000321:         /// <param name="sender">The sender.</param>
//000322:         /// <param name="e">The eventargs.</param>
//000323:         private void Window_MouseMove(object sender, MouseEventArgs e)
//000324:         {
//000325:             // If we're not auto-panning
//000326:             if (!m_autoPanCamera)
//000327:             {
//000328:                 // Get the new mouse position and compute the difference from the previous
//000329:                 var newPosition = e.GetPosition(this);
//000330:                 var diff = _lastMousePosition - newPosition;
//000331: 
//000332:                 // If the left mouse position was pressed, pan based on the x/y differences
//000333:                 if (e.LeftButton == MouseButtonState.Pressed)
//000334:                 {
//000335:                     camMain.Position = new Point3D(camMain.Position.X + diff.X * .4, camMain.Position.Y - diff.Y * .4, camMain.Position.Z);
//000336:                 }
//000337:                     // If the middle button was pressed, zoom based on the y difference
//000338:                 else if (e.MiddleButton == MouseButtonState.Pressed)
//000339:                 {
//000340:                     Zoom((int)diff.Y);
//000341:                 }
//000342: 
//000343:                 // Store the new position
//000344:                 _lastMousePosition = newPosition;
//000345:             }
//000346:         }
//000347: 
//000348:         /// <summary>Zoom in or out based on the specified degree of zoom.</summary>
//000349:         /// <param name="amountOfChange">Amount to zoom in (positive) or out (negative).</param>
//000350:         private void Zoom(int amountOfChange)
//000351:         {
//000352:             const int ZOOM_FACTOR = 3;
//000353:             camMain.Position = Point3D.Add(camMain.Position, camMain.LookDirection * amountOfChange * ZOOM_FACTOR);
//000354:         }
//000355:         #endregion
//000356: 
//000357:         #region Step and Render
//000358:         /// <summary>Runs the rendering loop.</summary>
//000359:         private void RenderUpdateLoop()
//000360:         {
//000361:             // Loop forever...
//000362:             while (true)
//000363:             {
//000364:                 // Wait to receive a signal that we should render another frame
//000365:                 m_renderSignal.WaitOne();
//000366: 
//000367:                 // Start timing.
//000368:                 m_frameStopwatch.Restart();
//000369: 
//000370:                 // Update the positions and velocities of all of the boids.
//000371:                 StepBoids();
//000372: 
//000373:                 // Update our rendering stats for display to the user
//000374:                 m_totalRenderingMillisecondsSinceLastUserPresentation += m_frameStopwatch.ElapsedMilliseconds;
//000375:                 m_numRendersSinceLastUserPresentation++;
//000376: 
//000377:                 // Render the boids to the UI
//000378:                 Dispatcher.Invoke((Action)RenderBoids, DispatcherPriority.Send, null);
//000379:             }
//000380:         }
//000381: 
//000382:         /// <summary>Step the boids one step, updating their velocities and positions.</summary>
//000383:         private void StepBoids()
//000384:         {
//000385:             // Store the current velocities and positions so that we can operate on an immutable copy
//000386:             foreach (var boid in m_boidModels) boid.StorePositionAndVelocityIntoPrevious();
//000387: 
//000388:             // For each boid, analyze how the various boid rules influence its velocity and position,
//000389:             // then store this new information.  After this step, we'll be able to render the boids.
//000390:             Parallel.ForEach(m_boidModels, m_parallelOptions, boid =>
//000391:             {
//000392:                 var v1_2_3 = PrimaryRules_1_2_3(boid); // weights factored in already in PrimaryRules
//000393:                 var v4 = m_rule4Weight * Rule4_EncourageStayingWithinAviary(boid);
//000394:                 var v5 = m_rule5Weight * Rule5_TendendcyTowardsHome(boid);
//000395: 
//000396:                 boid.Velocity = BoundVelocity(boid.PreviousVelocity + v1_2_3 + v4 + v5, m_speedLimit);
//000397:                 boid.Velocity.Normalize();
//000398: 
//000399:                 var tmpPosition = boid.PreviousPosition + boid.Velocity;
//000400:                 if (tmpPosition.Y >= 0) boid.Position = tmpPosition;
//000401:             });
//000402:         }
//000403: 
//000404:         /// <summary>Render the boids.</summary>
//000405:         private void RenderBoids()
//000406:         {
//000407:             // Make sure the boids are all positioned and pointing correctly
//000408:             foreach (var boid in m_boidModels) boid.TransformByPositionAndVelocity();
//000409: 
//000410:             // Every once in a while, update the user-displayed stats on timings
//000411:             var now = DateTimeOffset.Now;
//000412:             if (now >= m_nextUserPresentation)
//000413:             {
//000414:                 Title = string.Format("Procs: {0}, Time: {1:F2}", m_parallelOptions.MaxDegreeOfParallelism, 
//000415:                     m_numRendersSinceLastUserPresentation > 0 ? 
//000416:                     m_totalRenderingMillisecondsSinceLastUserPresentation / (double)m_numRendersSinceLastUserPresentation : 
//000417:                     0);
//000418:                 m_nextUserPresentation = now.AddSeconds(1);
//000419:                 m_numRendersSinceLastUserPresentation = 0;
//000420:                 m_totalRenderingMillisecondsSinceLastUserPresentation = 0;
//000421:             }
//000422: 
//000423:             // If we're in auto-panning mode, move the camera appropriately
//000424:             if (m_autoPanCamera)
//000425:             {
//000426:                 // Compute the maximum Z value of all of the boids and the center of their mass
//000427:                 double maxZ = double.MinValue;
//000428:                 Vector3D totalPos = new Vector3D();
//000429:                 foreach (var boid in m_boidModels)
//000430:                 {
//000431:                     if (boid.Position.Z > maxZ) maxZ = boid.Position.Z;
//000432:                     totalPos += boid.Position;
//000433:                 }
//000434:                 var newCameraPos = totalPos / m_boidModels.Length;
//000435:                 
//000436:                 // Move the camera to point at the center of the boids, a ways back from the max boid's Z
//000437:                 const int CAMERA_DISTANCE_FROM_MAXZ = 100;
//000438:                 const double CAMERA_SPEED_LIMIT = .01;
//000439:                 var newPos = new Point3D(newCameraPos.X, newCameraPos.Y, maxZ + CAMERA_DISTANCE_FROM_MAXZ);
//000440:                 var cameraVelocity = newPos - camMain.Position;
//000441:                 camMain.Position = camMain.Position + (cameraVelocity * CAMERA_SPEED_LIMIT);
//000442:             }
//000443:         }
//000444:         #endregion
//000445: 
//000446:         #region Boid Rules
//000447:         /// <summary>Run the three primary rules of boidom.</summary>
//000448:         /// <param name="boid">The boid to process.</param>
//000449:         /// <returns>The velocity vector resulting from the three primary rules and their associated weights.</returns>
//000450:         private Vector3D PrimaryRules_1_2_3(Boid boid)
//000451:         {
//000452:             int numNearby = 0;
//000453:             Vector3D summedPosition = new Vector3D();
//000454:             Vector3D summedVelocity = new Vector3D();
//000455:             Vector3D summedSeparation = new Vector3D();
//000456: 
//000457:             // For rule #1, we want the boid to fly towards the center of all of those in its neighborhood.
//000458:             // We find all of those boids, average their positions, and create a velocity vector to move the
//000459:             // boid a bit of the way there.
//000460: 
//000461:             // For rule #2, we want the boid to move away from each other boid it's a bit too close to.
//000462:             // Find all of those boids in its immediate vicinity, and push it away.
//000463: 
//000464:             // For rule #3, we want the boid to match velocities with those boids in its neighborhood.
//000465:             // Sum their velocities, find the average, and move this boid's velocity a bit in that direction.
//000466: 
//000467:             foreach (var other in m_boidModels)
//000468:             {
//000469:                 if (other != boid && 
//000470:                     (other.PreviousPosition - boid.PreviousPosition).Length <= NEIGHBORHOOD_SIZE &&
//000471:                     boid.ComputeAngle(other) <= 135)
//000472:                 {
//000473:                     summedPosition += other.PreviousPosition;
//000474:                     summedVelocity += other.PreviousVelocity;
//000475:                     numNearby++;
//000476: 
//000477:                     if ((other.PreviousPosition - boid.PreviousPosition).Length < MIN_DISTANCE_FROM_NEIGHBOR)
//000478:                     {
//000479:                         summedSeparation -= (other.PreviousPosition - boid.PreviousPosition);
//000480:                     }
//000481:                 }
//000482:             }
//000483: 
//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
//000485:             var rule2_separateFromNearby = summedSeparation;
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
//000487: 
//000488:             return
//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
//000499:             var v = new Vector3D();
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_0000:  newobj     instance void ParallelBoids.MainWindow/'<>c__DisplayClass3'::.ctor()
    IL_0005:  stloc.2
    IL_0006:  ldloc.2
    IL_0007:  ldarg.0
    IL_0008:  stfld      class ParallelBoids.MainWindow ParallelBoids.MainWindow/'<>c__DisplayClass3'::'<>4__this'
//000100:         {
    IL_000d:  nop
//000101:             this.Cursor = Cursors.Hand;
    IL_000e:  ldarg.0
    IL_000f:  call       class [PresentationCore]System.Windows.Input.Cursor [PresentationCore]System.Windows.Input.Cursors::get_Hand()
    IL_0014:  call       instance void [PresentationFramework]System.Windows.FrameworkElement::set_Cursor(class [PresentationCore]System.Windows.Input.Cursor)
    IL_0019:  nop
//000102: 
//000103:             // Set up the aviary.  This should match the size of the grass geometry configured in the XAML.
//000104:             m_aviary = new Rect3D(-300, 0, -400, 600, 180, 800);
    IL_001a:  ldarg.0
    IL_001b:  ldc.r8     -300.
    IL_0024:  ldc.r8     0.0
    IL_002d:  ldc.r8     -400.
    IL_0036:  ldc.r8     600.
    IL_003f:  ldc.r8     180.
    IL_0048:  ldc.r8     800.
    IL_0051:  newobj     instance void [PresentationCore]System.Windows.Media.Media3D.Rect3D::.ctor(float64,
                                                                                                    float64,
                                                                                                    float64,
                                                                                                    float64,
                                                                                                    float64,
                                                                                                    float64)
    IL_0056:  stfld      valuetype [PresentationCore]System.Windows.Media.Media3D.Rect3D ParallelBoids.MainWindow::m_aviary
//000105:             m_home = new Vector3D(0, 15, 0); // home is close to 0,0,0, just a bit off the ground
    IL_005b:  ldarg.0
    IL_005c:  ldc.r8     0.0
    IL_0065:  ldc.r8     15.
    IL_006e:  ldc.r8     0.0
    IL_0077:  newobj     instance void [PresentationCore]System.Windows.Media.Media3D.Vector3D::.ctor(float64,
                                                                                                      float64,
                                                                                                      float64)
    IL_007c:  stfld      valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.MainWindow::m_home
//000106: 
//000107:             // The color combinations to use for boids.  At least one combination is necessary,
//000108:             // but more can be added to get more variations.
//000109:             var colorCombinations = new Tuple<Color, Color>[]
    IL_0081:  ldloc.2
    IL_0082:  ldc.i4.3
    IL_0083:  newarr     class [mscorlib]System.Tuple`2<valuetype [PresentationCore]System.Windows.Media.Color,valuetype [PresentationCore]System.Windows.Media.Color>
    IL_0088:  stloc.3
    IL_0089:  ldloc.3
    IL_008a:  ldc.i4.0
    IL_008b:  call       valuetype [PresentationCore]System.Windows.Media.Color [PresentationCore]System.Windows.Media.Colors::get_SeaGreen()
    IL_0090:  call       valuetype [PresentationCore]System.Windows.Media.Color [PresentationCore]System.Windows.Media.Colors::get_Silver()
    IL_0095:  call       class [mscorlib]System.Tuple`2<!!0,!!1> [mscorlib]System.Tuple::Create<valuetype [PresentationCore]System.Windows.Media.Color,valuetype [PresentationCore]System.Windows.Media.Color>(!!0,
                                                                                                                                                                                                               !!1)
    IL_009a:  stelem.ref
    IL_009b:  ldloc.3
    IL_009c:  ldc.i4.1
    IL_009d:  call       valuetype [PresentationCore]System.Windows.Media.Color [PresentationCore]System.Windows.Media.Colors::get_Pink()
    IL_00a2:  call       valuetype [PresentationCore]System.Windows.Media.Color [PresentationCore]System.Windows.Media.Colors::get_Purple()
    IL_00a7:  call       class [mscorlib]System.Tuple`2<!!0,!!1> [mscorlib]System.Tuple::Create<valuetype [PresentationCore]System.Windows.Media.Color,valuetype [PresentationCore]System.Windows.Media.Color>(!!0,
                                                                                                                                                                                                               !!1)
    IL_00ac:  stelem.ref
    IL_00ad:  ldloc.3
    IL_00ae:  ldc.i4.2
    IL_00af:  call       valuetype [PresentationCore]System.Windows.Media.Color [PresentationCore]System.Windows.Media.Colors::get_Yellow()
    IL_00b4:  call       valuetype [PresentationCore]System.Windows.Media.Color [PresentationCore]System.Windows.Media.Colors::get_Gold()
    IL_00b9:  call       class [mscorlib]System.Tuple`2<!!0,!!1> [mscorlib]System.Tuple::Create<valuetype [PresentationCore]System.Windows.Media.Color,valuetype [PresentationCore]System.Windows.Media.Color>(!!0,
                                                                                                                                                                                                               !!1)
    IL_00be:  stelem.ref
    IL_00bf:  ldloc.3
    IL_00c0:  stfld      class [mscorlib]System.Tuple`2<valuetype [PresentationCore]System.Windows.Media.Color,valuetype [PresentationCore]System.Windows.Media.Color>[] ParallelBoids.MainWindow/'<>c__DisplayClass3'::colorCombinations
//000110:             {
//000111:                 Tuple.Create(Colors.SeaGreen, Colors.Silver),
//000112:                 Tuple.Create(Colors.Pink, Colors.Purple),
//000113:                 Tuple.Create(Colors.Yellow, Colors.Gold)
//000114:             };
//000115: 
//000116:             // Generate all of the boids, with random color, position, and velocity assignments.  Then add them to the scene.
//000117:             var rand = new Random();
    IL_00c5:  ldloc.2
    IL_00c6:  newobj     instance void [mscorlib]System.Random::.ctor()
    IL_00cb:  stfld      class [mscorlib]System.Random ParallelBoids.MainWindow/'<>c__DisplayClass3'::rand
//000118:             m_boidModels = Enumerable.Range(0, NUM_BOIDS).Select(_ => new Boid(colorCombinations[rand.Next(0, colorCombinations.Length)])).ToArray();
    IL_00d0:  ldarg.0
    IL_00d1:  ldc.i4.0
    IL_00d2:  ldc.i4     0x384
    IL_00d7:  call       class [mscorlib]System.Collections.Generic.IEnumerable`1<int32> [System.Core]System.Linq.Enumerable::Range(int32,
                                                                                                                                    int32)
    IL_00dc:  ldloc.2
    IL_00dd:  ldftn      instance class ParallelBoids.Boid ParallelBoids.MainWindow/'<>c__DisplayClass3'::'<Window_Loaded>b__1'(int32)
    IL_00e3:  newobj     instance void class [mscorlib]System.Func`2<int32,class ParallelBoids.Boid>::.ctor(object,
                                                                                                            native int)
    IL_00e8:  call       class [mscorlib]System.Collections.Generic.IEnumerable`1<!!1> [System.Core]System.Linq.Enumerable::Select<int32,class ParallelBoids.Boid>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>,
                                                                                                                                                                   class [mscorlib]System.Func`2<!!0,!!1>)
    IL_00ed:  call       !!0[] [System.Core]System.Linq.Enumerable::ToArray<class ParallelBoids.Boid>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>)
    IL_00f2:  stfld      class ParallelBoids.Boid[] ParallelBoids.MainWindow::m_boidModels
//000119:             RandomizeBoidPositionsAndVelocities(rand);
    IL_00f7:  ldarg.0
    IL_00f8:  ldloc.2
    IL_00f9:  ldfld      class [mscorlib]System.Random ParallelBoids.MainWindow/'<>c__DisplayClass3'::rand
    IL_00fe:  call       instance void ParallelBoids.MainWindow::RandomizeBoidPositionsAndVelocities(class [mscorlib]System.Random)
    IL_0103:  nop
//000120:             foreach (var boidModel in m_boidModels) viewport3D.Children.Add(boidModel);
    IL_0104:  nop
    IL_0105:  ldarg.0
    IL_0106:  ldfld      class ParallelBoids.Boid[] ParallelBoids.MainWindow::m_boidModels
    IL_010b:  stloc.s    CS$6$0001
//000121: 
//000122:             // Configure and start the rendering timer.  A System.Timers.Timer is used to make it easy to turn on and off.
//000123:             var renderTimerPeriod = (int)(1000.0 / FRAMES_PER_SECOND);
//000124:             m_renderTimer = new System.Timers.Timer(renderTimerPeriod);
//000125:             m_renderTimer.Elapsed += (_, __) => m_renderSignal.Set();
//000126:             m_renderTimer.Enabled = true;
//000127: 
//000128:             // Start the rendering loop on a background thread
//000129:             Task.Factory.StartNew(RenderUpdateLoop);
//000130:         }
//000131: 
//000132:         /// <summary>Move the boids to random positions and velocities.</summary>
//000133:         /// <param name="rand">The random number generator to use.</param>
//000134:         private void RandomizeBoidPositionsAndVelocities(Random rand = null)
//000135:         {
//000136:             if (rand == null) rand = new Random();
//000137:             foreach (var boid in m_boidModels)
//000138:             {
//000139:                 boid.Position = new Vector3D(
//000140:                            rand.Next((int)m_aviary.X, (int)(m_aviary.X + m_aviary.SizeX)),
//000141:                            rand.Next((int)m_aviary.Y, (int)(m_aviary.Y + m_aviary.SizeY)),
//000142:                            rand.Next((int)m_aviary.Z, (int)(m_aviary.Z + m_aviary.SizeZ)));
//000143:                 boid.Velocity = new Vector3D(
//000144:                            rand.NextDouble() * 2 - 1,
//000145:                            rand.NextDouble() * 2 - 1,
//000146:                            rand.NextDouble() * 2 - 1);
//000147:             }
//000148:         }
//000149:         #endregion
//000150: 
//000151:         #region Window Interaction Controls
//000152:         /// <summary>Handle keydown events.</summary>
//000153:         /// <param name="sender">The sender.</param>
//000154:         /// <param name="e">The eventargs.</param>
//000155:         private void Window_KeyDown(object sender, KeyEventArgs e)
//000156:         {
//000157:             // If escape is pressed, normalize the window size
//000158:             if (e.Key == Key.Escape)
//000159:             {
//000160:                 Topmost = false;
//000161:                 WindowStyle = WindowStyle.ThreeDBorderWindow;
//000162:                 WindowState = WindowState.Normal;
//000163:             }
//000164: 
//000165:                 // If 'P' is pressed, switch back and forth between serial and parallel
//000166:             else if (e.Key == Key.P)
//000167:             {
//000168:                 int procCount = Environment.ProcessorCount;
//000169:                 m_parallelOptions.MaxDegreeOfParallelism = m_parallelOptions.MaxDegreeOfParallelism == 1 ? procCount : 1;
//000170:             }
//000171: 
//000172:                 // If 'b' is pressed, break/pause the scene until 'b' is pressed again
//000173:             else if (e.Key == Key.B)
//000174:             {
//000175:                 m_renderTimer.Enabled = !m_renderTimer.Enabled;
//000176:             }
//000177: 
//000178:                 // If 't' is pressed, toggle translucency to enable following just one boid
//000179:             else if (e.Key == Key.T)
//000180:             {
//000181:                 for (int i = 1; i < m_boidModels.Length; i++) m_boidModels[i].ToggleTranslucency();
//000182:             }
//000183: 
//000184:                 // If 'a' is pressed, turn auto-panning/zoom of the camera on/off
//000185:             else if (e.Key == Key.A)
//000186:             {
//000187:                 m_autoPanCamera = !m_autoPanCamera;
//000188:             }
//000189: 
//000190:                 // If up or down is pressed and we're in auto-pan mode, 
//000191:             else if ((e.Key == Key.Up || e.Key == Key.Down) && !m_autoPanCamera)
//000192:             {
//000193:                 Zoom(e.Key == Key.Up ? 1 : -1);
//000194:             }
//000195: 
//000196:                 // If 'r' is pressed, reset all of the boids to random positions and velocities
//000197:             else if (e.Key == Key.R)
//000198:             {
//000199:                 RandomizeBoidPositionsAndVelocities();
//000200:             }
//000201: 
//000202:                 // If 'h', display usage instructions to the user
//000203:             else if (e.Key == Key.H)
//000204:             {
//000205:                 string instructions =
//000206:                     "** Window Controls **" + Environment.NewLine +
//000207:                     "Auto-Camera Positioning: 'a'" + Environment.NewLine +
//000208:                     "Pan: Click Left And Drag" + Environment.NewLine +
//000209:                     "Zoom In / Out: Mousewheel (or) Up/Down Keys (or) Ctrl+Middle Mouse Move" + Environment.NewLine +
//000210:                     "Full Screen: Right Double-Click" + Environment.NewLine +
//000211:                     "Restore to Normal Window Size: Right Double-Click (or) Escape Key" + Environment.NewLine +
//000212:                     "Pause: 'b'" + Environment.NewLine +
//000213:                     "Translucency: 't'" + Environment.NewLine +
//000214:                     Environment.NewLine +
//000215:                     "** Boid Controls **" + Environment.NewLine +
//000216:                     "Scatter: Left Double-Click" + Environment.NewLine +
//000217:                     "Change Max Speed: Ctrl + Mousewheel" + Environment.NewLine +
//000218:                     "Randomize: 'r'" + Environment.NewLine +
//000219:                     Environment.NewLine +
//000220:                     "** Parallelism Controls **" + Environment.NewLine +
//000221:                     "Go Parallel: 'p'" + Environment.NewLine;
//000222:                 MessageBox.Show(this, instructions, "Instructions", MessageBoxButton.OK, MessageBoxImage.Information);
//000223:             }
//000224:         }
//000225: 
//000226:         /// <summary>Handle mousedown events.</summary>
//000227:         /// <param name="sender">The sender.</param>
//000228:         /// <param name="e">The eventargs.</param>
//000229:         private void Window_MouseDown(object sender, MouseButtonEventArgs e)
//000230:         {
//000231:             // Log the last mouse position
//000232:             _lastMousePosition = e.GetPosition(this);
//000233:         }
//000234: 
//000235:         /// <summary>Handle mousewheel events.</summary>
//000236:         /// <param name="sender">The sender.</param>
//000237:         /// <param name="e">The eventargs.</param>
//000238:         private void Window_MouseWheel(object sender, MouseWheelEventArgs e)
//000239:         {
//000240:             // If ctrl is pressed, change the max bird speed based on the number of mousewheel turns
//000241:             if ((Keyboard.Modifiers & ModifierKeys.Control) != 0)
//000242:             {
//000243:                 const int MIN_SPEED = 2, MAX_SPEED = 10;
//000244:                 if (e.Delta > 0 && m_speedLimit < MAX_SPEED) m_speedLimit++;
//000245:                 else if (e.Delta < 0 && m_speedLimit > MIN_SPEED) m_speedLimit--;
//000246:             }
//000247:                 // Otherwise, as long as we're not in auto-panning/zooming mode,
//000248:                 // zoom in or out based on the number of mousewheel turns
//000249:             else if (!m_autoPanCamera) Zoom(e.Delta / Mouse.MouseWheelDeltaForOneLine); 
//000250:         }
//000251: 
//000252:         /// <summary>Handle mousedoubleclick events.</summary>
//000253:         /// <param name="sender">The sender.</param>
//000254:         /// <param name="e">The eventargs.</param>
//000255:         private void Window_MouseDoubleClick(object sender, MouseButtonEventArgs e)
//000256:         {
//000257:             // If the right mouse button is double clicked, alternate between maximized and normal view
//000258:             if (e.ChangedButton == MouseButton.Right)
//000259:             {
//000260:                 if (WindowState == WindowState.Maximized)
//000261:                 {
//000262:                     Topmost = false;
//000263:                     WindowStyle = WindowStyle.ThreeDBorderWindow;
//000264:                     WindowState = WindowState.Normal;
//000265:                 }
//000266:                 else
//000267:                 {
//000268:                     Topmost = true;
//000269:                     WindowStyle = WindowStyle.None;
//000270:                     WindowState = WindowState.Maximized;
//000271:                 }
//000272:             }
//000273:                 // If the left mouse button is double clicked, scatter the boids
//000274:             else if (e.ChangedButton == MouseButton.Left)
//000275:             {
//000276:                 Scatter();
//000277:             }
//000278:         }
//000279: 
//000280:         /// <summary>Scatter the boids.</summary>
//000281:         private void Scatter()
//000282:         {
//000283:             // Start scatterring if a scatter isn't already in process
//000284:             if (m_scatterTimer == null)
//000285:             {
//000286:                 // Ka'boom.  Something scares the boids.
//000287:                 SystemSounds.Hand.Play();
//000288: 
//000289:                 // Store original settings
//000290:                 var origHome = m_home;
//000291:                 var origRule1Weight = m_rule1Weight;
//000292:                 var origRule2Weight = m_rule2Weight;
//000293:                 var origRule4Weight = m_rule4Weight;
//000294:                 var origRule5Weight = m_rule5Weight;
//000295: 
//000296:                 // Create new scatter settings
//000297:                 m_home = new Vector3D(0, 0, 0);
//000298:                 m_rule1Weight = origRule1Weight * -5;
//000299:                 m_rule2Weight = origRule2Weight * 2;
//000300:                 m_rule4Weight = 0;
//000301:                 m_rule5Weight = origRule5Weight * -5;
//000302: 
//000303:                 // Start a timer to restore the original settings
//000304:                 m_scatterTimer = new Timer(_ =>
//000305:                 {
//000306:                     // Restore the original settings
//000307:                     m_home = origHome;
//000308:                     m_rule1Weight = origRule1Weight;
//000309:                     m_rule2Weight = origRule2Weight;
//000310:                     m_rule4Weight = origRule4Weight;
//000311:                     m_rule5Weight = origRule5Weight;
//000312: 
//000313:                     // Clean up the timer
//000314:                     m_scatterTimer.Dispose();
//000315:                     m_scatterTimer = null;
//000316:                 }, null, SCATTER_TIME, -1);
//000317:             }
//000318:         }
//000319: 
//000320:         /// <summary>Handle mousemove events.</summary>
//000321:         /// <param name="sender">The sender.</param>
//000322:         /// <param name="e">The eventargs.</param>
//000323:         private void Window_MouseMove(object sender, MouseEventArgs e)
//000324:         {
//000325:             // If we're not auto-panning
//000326:             if (!m_autoPanCamera)
//000327:             {
//000328:                 // Get the new mouse position and compute the difference from the previous
//000329:                 var newPosition = e.GetPosition(this);
//000330:                 var diff = _lastMousePosition - newPosition;
//000331: 
//000332:                 // If the left mouse position was pressed, pan based on the x/y differences
//000333:                 if (e.LeftButton == MouseButtonState.Pressed)
//000334:                 {
//000335:                     camMain.Position = new Point3D(camMain.Position.X + diff.X * .4, camMain.Position.Y - diff.Y * .4, camMain.Position.Z);
//000336:                 }
//000337:                     // If the middle button was pressed, zoom based on the y difference
//000338:                 else if (e.MiddleButton == MouseButtonState.Pressed)
//000339:                 {
//000340:                     Zoom((int)diff.Y);
//000341:                 }
//000342: 
//000343:                 // Store the new position
//000344:                 _lastMousePosition = newPosition;
//000345:             }
//000346:         }
//000347: 
//000348:         /// <summary>Zoom in or out based on the specified degree of zoom.</summary>
//000349:         /// <param name="amountOfChange">Amount to zoom in (positive) or out (negative).</param>
//000350:         private void Zoom(int amountOfChange)
//000351:         {
//000352:             const int ZOOM_FACTOR = 3;
//000353:             camMain.Position = Point3D.Add(camMain.Position, camMain.LookDirection * amountOfChange * ZOOM_FACTOR);
//000354:         }
//000355:         #endregion
//000356: 
//000357:         #region Step and Render
//000358:         /// <summary>Runs the rendering loop.</summary>
//000359:         private void RenderUpdateLoop()
//000360:         {
//000361:             // Loop forever...
//000362:             while (true)
//000363:             {
//000364:                 // Wait to receive a signal that we should render another frame
//000365:                 m_renderSignal.WaitOne();
//000366: 
//000367:                 // Start timing.
//000368:                 m_frameStopwatch.Restart();
//000369: 
//000370:                 // Update the positions and velocities of all of the boids.
//000371:                 StepBoids();
//000372: 
//000373:                 // Update our rendering stats for display to the user
//000374:                 m_totalRenderingMillisecondsSinceLastUserPresentation += m_frameStopwatch.ElapsedMilliseconds;
//000375:                 m_numRendersSinceLastUserPresentation++;
//000376: 
//000377:                 // Render the boids to the UI
//000378:                 Dispatcher.Invoke((Action)RenderBoids, DispatcherPriority.Send, null);
//000379:             }
//000380:         }
//000381: 
//000382:         /// <summary>Step the boids one step, updating their velocities and positions.</summary>
//000383:         private void StepBoids()
//000384:         {
//000385:             // Store the current velocities and positions so that we can operate on an immutable copy
//000386:             foreach (var boid in m_boidModels) boid.StorePositionAndVelocityIntoPrevious();
//000387: 
//000388:             // For each boid, analyze how the various boid rules influence its velocity and position,
//000389:             // then store this new information.  After this step, we'll be able to render the boids.
//000390:             Parallel.ForEach(m_boidModels, m_parallelOptions, boid =>
//000391:             {
//000392:                 var v1_2_3 = PrimaryRules_1_2_3(boid); // weights factored in already in PrimaryRules
//000393:                 var v4 = m_rule4Weight * Rule4_EncourageStayingWithinAviary(boid);
//000394:                 var v5 = m_rule5Weight * Rule5_TendendcyTowardsHome(boid);
//000395: 
//000396:                 boid.Velocity = BoundVelocity(boid.PreviousVelocity + v1_2_3 + v4 + v5, m_speedLimit);
//000397:                 boid.Velocity.Normalize();
//000398: 
//000399:                 var tmpPosition = boid.PreviousPosition + boid.Velocity;
//000400:                 if (tmpPosition.Y >= 0) boid.Position = tmpPosition;
//000401:             });
//000402:         }
//000403: 
//000404:         /// <summary>Render the boids.</summary>
//000405:         private void RenderBoids()
//000406:         {
//000407:             // Make sure the boids are all positioned and pointing correctly
//000408:             foreach (var boid in m_boidModels) boid.TransformByPositionAndVelocity();
//000409: 
//000410:             // Every once in a while, update the user-displayed stats on timings
//000411:             var now = DateTimeOffset.Now;
//000412:             if (now >= m_nextUserPresentation)
//000413:             {
//000414:                 Title = string.Format("Procs: {0}, Time: {1:F2}", m_parallelOptions.MaxDegreeOfParallelism, 
//000415:                     m_numRendersSinceLastUserPresentation > 0 ? 
//000416:                     m_totalRenderingMillisecondsSinceLastUserPresentation / (double)m_numRendersSinceLastUserPresentation : 
//000417:                     0);
//000418:                 m_nextUserPresentation = now.AddSeconds(1);
//000419:                 m_numRendersSinceLastUserPresentation = 0;
//000420:                 m_totalRenderingMillisecondsSinceLastUserPresentation = 0;
//000421:             }
//000422: 
//000423:             // If we're in auto-panning mode, move the camera appropriately
//000424:             if (m_autoPanCamera)
//000425:             {
//000426:                 // Compute the maximum Z value of all of the boids and the center of their mass
//000427:                 double maxZ = double.MinValue;
//000428:                 Vector3D totalPos = new Vector3D();
//000429:                 foreach (var boid in m_boidModels)
//000430:                 {
//000431:                     if (boid.Position.Z > maxZ) maxZ = boid.Position.Z;
//000432:                     totalPos += boid.Position;
//000433:                 }
//000434:                 var newCameraPos = totalPos / m_boidModels.Length;
//000435:                 
//000436:                 // Move the camera to point at the center of the boids, a ways back from the max boid's Z
//000437:                 const int CAMERA_DISTANCE_FROM_MAXZ = 100;
//000438:                 const double CAMERA_SPEED_LIMIT = .01;
//000439:                 var newPos = new Point3D(newCameraPos.X, newCameraPos.Y, maxZ + CAMERA_DISTANCE_FROM_MAXZ);
//000440:                 var cameraVelocity = newPos - camMain.Position;
//000441:                 camMain.Position = camMain.Position + (cameraVelocity * CAMERA_SPEED_LIMIT);
//000442:             }
//000443:         }
//000444:         #endregion
//000445: 
//000446:         #region Boid Rules
//000447:         /// <summary>Run the three primary rules of boidom.</summary>
//000448:         /// <param name="boid">The boid to process.</param>
//000449:         /// <returns>The velocity vector resulting from the three primary rules and their associated weights.</returns>
//000450:         private Vector3D PrimaryRules_1_2_3(Boid boid)
//000451:         {
//000452:             int numNearby = 0;
//000453:             Vector3D summedPosition = new Vector3D();
//000454:             Vector3D summedVelocity = new Vector3D();
//000455:             Vector3D summedSeparation = new Vector3D();
//000456: 
//000457:             // For rule #1, we want the boid to fly towards the center of all of those in its neighborhood.
//000458:             // We find all of those boids, average their positions, and create a velocity vector to move the
//000459:             // boid a bit of the way there.
//000460: 
//000461:             // For rule #2, we want the boid to move away from each other boid it's a bit too close to.
//000462:             // Find all of those boids in its immediate vicinity, and push it away.
//000463: 
//000464:             // For rule #3, we want the boid to match velocities with those boids in its neighborhood.
//000465:             // Sum their velocities, find the average, and move this boid's velocity a bit in that direction.
//000466: 
//000467:             foreach (var other in m_boidModels)
//000468:             {
//000469:                 if (other != boid && 
//000470:                     (other.PreviousPosition - boid.PreviousPosition).Length <= NEIGHBORHOOD_SIZE &&
//000471:                     boid.ComputeAngle(other) <= 135)
//000472:                 {
//000473:                     summedPosition += other.PreviousPosition;
//000474:                     summedVelocity += other.PreviousVelocity;
//000475:                     numNearby++;
//000476: 
//000477:                     if ((other.PreviousPosition - boid.PreviousPosition).Length < MIN_DISTANCE_FROM_NEIGHBOR)
//000478:                     {
//000479:                         summedSeparation -= (other.PreviousPosition - boid.PreviousPosition);
//000480:                     }
//000481:                 }
//000482:             }
//000483: 
//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
//000485:             var rule2_separateFromNearby = summedSeparation;
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
//000487: 
//000488:             return
//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
//000499:             var v = new Vector3D();
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_010d:  ldc.i4.0
    IL_010e:  stloc.s    CS$7$0002
    IL_0110:  br.s       IL_0130

//000120:             foreach (var boidModel in m_boidModels) viewport3D.Children.Add(boidModel);
    IL_0112:  ldloc.s    CS$6$0001
    IL_0114:  ldloc.s    CS$7$0002
    IL_0116:  ldelem.ref
    IL_0117:  stloc.0
    IL_0118:  ldarg.0
    IL_0119:  ldfld      class [PresentationFramework]System.Windows.Controls.Viewport3D ParallelBoids.MainWindow::viewport3D
    IL_011e:  callvirt   instance class [PresentationCore]System.Windows.Media.Media3D.Visual3DCollection [PresentationFramework]System.Windows.Controls.Viewport3D::get_Children()
    IL_0123:  ldloc.0
    IL_0124:  callvirt   instance void [PresentationCore]System.Windows.Media.Media3D.Visual3DCollection::Add(class [PresentationCore]System.Windows.Media.Media3D.Visual3D)
    IL_0129:  nop
//000121: 
//000122:             // Configure and start the rendering timer.  A System.Timers.Timer is used to make it easy to turn on and off.
//000123:             var renderTimerPeriod = (int)(1000.0 / FRAMES_PER_SECOND);
//000124:             m_renderTimer = new System.Timers.Timer(renderTimerPeriod);
//000125:             m_renderTimer.Elapsed += (_, __) => m_renderSignal.Set();
//000126:             m_renderTimer.Enabled = true;
//000127: 
//000128:             // Start the rendering loop on a background thread
//000129:             Task.Factory.StartNew(RenderUpdateLoop);
//000130:         }
//000131: 
//000132:         /// <summary>Move the boids to random positions and velocities.</summary>
//000133:         /// <param name="rand">The random number generator to use.</param>
//000134:         private void RandomizeBoidPositionsAndVelocities(Random rand = null)
//000135:         {
//000136:             if (rand == null) rand = new Random();
//000137:             foreach (var boid in m_boidModels)
//000138:             {
//000139:                 boid.Position = new Vector3D(
//000140:                            rand.Next((int)m_aviary.X, (int)(m_aviary.X + m_aviary.SizeX)),
//000141:                            rand.Next((int)m_aviary.Y, (int)(m_aviary.Y + m_aviary.SizeY)),
//000142:                            rand.Next((int)m_aviary.Z, (int)(m_aviary.Z + m_aviary.SizeZ)));
//000143:                 boid.Velocity = new Vector3D(
//000144:                            rand.NextDouble() * 2 - 1,
//000145:                            rand.NextDouble() * 2 - 1,
//000146:                            rand.NextDouble() * 2 - 1);
//000147:             }
//000148:         }
//000149:         #endregion
//000150: 
//000151:         #region Window Interaction Controls
//000152:         /// <summary>Handle keydown events.</summary>
//000153:         /// <param name="sender">The sender.</param>
//000154:         /// <param name="e">The eventargs.</param>
//000155:         private void Window_KeyDown(object sender, KeyEventArgs e)
//000156:         {
//000157:             // If escape is pressed, normalize the window size
//000158:             if (e.Key == Key.Escape)
//000159:             {
//000160:                 Topmost = false;
//000161:                 WindowStyle = WindowStyle.ThreeDBorderWindow;
//000162:                 WindowState = WindowState.Normal;
//000163:             }
//000164: 
//000165:                 // If 'P' is pressed, switch back and forth between serial and parallel
//000166:             else if (e.Key == Key.P)
//000167:             {
//000168:                 int procCount = Environment.ProcessorCount;
//000169:                 m_parallelOptions.MaxDegreeOfParallelism = m_parallelOptions.MaxDegreeOfParallelism == 1 ? procCount : 1;
//000170:             }
//000171: 
//000172:                 // If 'b' is pressed, break/pause the scene until 'b' is pressed again
//000173:             else if (e.Key == Key.B)
//000174:             {
//000175:                 m_renderTimer.Enabled = !m_renderTimer.Enabled;
//000176:             }
//000177: 
//000178:                 // If 't' is pressed, toggle translucency to enable following just one boid
//000179:             else if (e.Key == Key.T)
//000180:             {
//000181:                 for (int i = 1; i < m_boidModels.Length; i++) m_boidModels[i].ToggleTranslucency();
//000182:             }
//000183: 
//000184:                 // If 'a' is pressed, turn auto-panning/zoom of the camera on/off
//000185:             else if (e.Key == Key.A)
//000186:             {
//000187:                 m_autoPanCamera = !m_autoPanCamera;
//000188:             }
//000189: 
//000190:                 // If up or down is pressed and we're in auto-pan mode, 
//000191:             else if ((e.Key == Key.Up || e.Key == Key.Down) && !m_autoPanCamera)
//000192:             {
//000193:                 Zoom(e.Key == Key.Up ? 1 : -1);
//000194:             }
//000195: 
//000196:                 // If 'r' is pressed, reset all of the boids to random positions and velocities
//000197:             else if (e.Key == Key.R)
//000198:             {
//000199:                 RandomizeBoidPositionsAndVelocities();
//000200:             }
//000201: 
//000202:                 // If 'h', display usage instructions to the user
//000203:             else if (e.Key == Key.H)
//000204:             {
//000205:                 string instructions =
//000206:                     "** Window Controls **" + Environment.NewLine +
//000207:                     "Auto-Camera Positioning: 'a'" + Environment.NewLine +
//000208:                     "Pan: Click Left And Drag" + Environment.NewLine +
//000209:                     "Zoom In / Out: Mousewheel (or) Up/Down Keys (or) Ctrl+Middle Mouse Move" + Environment.NewLine +
//000210:                     "Full Screen: Right Double-Click" + Environment.NewLine +
//000211:                     "Restore to Normal Window Size: Right Double-Click (or) Escape Key" + Environment.NewLine +
//000212:                     "Pause: 'b'" + Environment.NewLine +
//000213:                     "Translucency: 't'" + Environment.NewLine +
//000214:                     Environment.NewLine +
//000215:                     "** Boid Controls **" + Environment.NewLine +
//000216:                     "Scatter: Left Double-Click" + Environment.NewLine +
//000217:                     "Change Max Speed: Ctrl + Mousewheel" + Environment.NewLine +
//000218:                     "Randomize: 'r'" + Environment.NewLine +
//000219:                     Environment.NewLine +
//000220:                     "** Parallelism Controls **" + Environment.NewLine +
//000221:                     "Go Parallel: 'p'" + Environment.NewLine;
//000222:                 MessageBox.Show(this, instructions, "Instructions", MessageBoxButton.OK, MessageBoxImage.Information);
//000223:             }
//000224:         }
//000225: 
//000226:         /// <summary>Handle mousedown events.</summary>
//000227:         /// <param name="sender">The sender.</param>
//000228:         /// <param name="e">The eventargs.</param>
//000229:         private void Window_MouseDown(object sender, MouseButtonEventArgs e)
//000230:         {
//000231:             // Log the last mouse position
//000232:             _lastMousePosition = e.GetPosition(this);
//000233:         }
//000234: 
//000235:         /// <summary>Handle mousewheel events.</summary>
//000236:         /// <param name="sender">The sender.</param>
//000237:         /// <param name="e">The eventargs.</param>
//000238:         private void Window_MouseWheel(object sender, MouseWheelEventArgs e)
//000239:         {
//000240:             // If ctrl is pressed, change the max bird speed based on the number of mousewheel turns
//000241:             if ((Keyboard.Modifiers & ModifierKeys.Control) != 0)
//000242:             {
//000243:                 const int MIN_SPEED = 2, MAX_SPEED = 10;
//000244:                 if (e.Delta > 0 && m_speedLimit < MAX_SPEED) m_speedLimit++;
//000245:                 else if (e.Delta < 0 && m_speedLimit > MIN_SPEED) m_speedLimit--;
//000246:             }
//000247:                 // Otherwise, as long as we're not in auto-panning/zooming mode,
//000248:                 // zoom in or out based on the number of mousewheel turns
//000249:             else if (!m_autoPanCamera) Zoom(e.Delta / Mouse.MouseWheelDeltaForOneLine); 
//000250:         }
//000251: 
//000252:         /// <summary>Handle mousedoubleclick events.</summary>
//000253:         /// <param name="sender">The sender.</param>
//000254:         /// <param name="e">The eventargs.</param>
//000255:         private void Window_MouseDoubleClick(object sender, MouseButtonEventArgs e)
//000256:         {
//000257:             // If the right mouse button is double clicked, alternate between maximized and normal view
//000258:             if (e.ChangedButton == MouseButton.Right)
//000259:             {
//000260:                 if (WindowState == WindowState.Maximized)
//000261:                 {
//000262:                     Topmost = false;
//000263:                     WindowStyle = WindowStyle.ThreeDBorderWindow;
//000264:                     WindowState = WindowState.Normal;
//000265:                 }
//000266:                 else
//000267:                 {
//000268:                     Topmost = true;
//000269:                     WindowStyle = WindowStyle.None;
//000270:                     WindowState = WindowState.Maximized;
//000271:                 }
//000272:             }
//000273:                 // If the left mouse button is double clicked, scatter the boids
//000274:             else if (e.ChangedButton == MouseButton.Left)
//000275:             {
//000276:                 Scatter();
//000277:             }
//000278:         }
//000279: 
//000280:         /// <summary>Scatter the boids.</summary>
//000281:         private void Scatter()
//000282:         {
//000283:             // Start scatterring if a scatter isn't already in process
//000284:             if (m_scatterTimer == null)
//000285:             {
//000286:                 // Ka'boom.  Something scares the boids.
//000287:                 SystemSounds.Hand.Play();
//000288: 
//000289:                 // Store original settings
//000290:                 var origHome = m_home;
//000291:                 var origRule1Weight = m_rule1Weight;
//000292:                 var origRule2Weight = m_rule2Weight;
//000293:                 var origRule4Weight = m_rule4Weight;
//000294:                 var origRule5Weight = m_rule5Weight;
//000295: 
//000296:                 // Create new scatter settings
//000297:                 m_home = new Vector3D(0, 0, 0);
//000298:                 m_rule1Weight = origRule1Weight * -5;
//000299:                 m_rule2Weight = origRule2Weight * 2;
//000300:                 m_rule4Weight = 0;
//000301:                 m_rule5Weight = origRule5Weight * -5;
//000302: 
//000303:                 // Start a timer to restore the original settings
//000304:                 m_scatterTimer = new Timer(_ =>
//000305:                 {
//000306:                     // Restore the original settings
//000307:                     m_home = origHome;
//000308:                     m_rule1Weight = origRule1Weight;
//000309:                     m_rule2Weight = origRule2Weight;
//000310:                     m_rule4Weight = origRule4Weight;
//000311:                     m_rule5Weight = origRule5Weight;
//000312: 
//000313:                     // Clean up the timer
//000314:                     m_scatterTimer.Dispose();
//000315:                     m_scatterTimer = null;
//000316:                 }, null, SCATTER_TIME, -1);
//000317:             }
//000318:         }
//000319: 
//000320:         /// <summary>Handle mousemove events.</summary>
//000321:         /// <param name="sender">The sender.</param>
//000322:         /// <param name="e">The eventargs.</param>
//000323:         private void Window_MouseMove(object sender, MouseEventArgs e)
//000324:         {
//000325:             // If we're not auto-panning
//000326:             if (!m_autoPanCamera)
//000327:             {
//000328:                 // Get the new mouse position and compute the difference from the previous
//000329:                 var newPosition = e.GetPosition(this);
//000330:                 var diff = _lastMousePosition - newPosition;
//000331: 
//000332:                 // If the left mouse position was pressed, pan based on the x/y differences
//000333:                 if (e.LeftButton == MouseButtonState.Pressed)
//000334:                 {
//000335:                     camMain.Position = new Point3D(camMain.Position.X + diff.X * .4, camMain.Position.Y - diff.Y * .4, camMain.Position.Z);
//000336:                 }
//000337:                     // If the middle button was pressed, zoom based on the y difference
//000338:                 else if (e.MiddleButton == MouseButtonState.Pressed)
//000339:                 {
//000340:                     Zoom((int)diff.Y);
//000341:                 }
//000342: 
//000343:                 // Store the new position
//000344:                 _lastMousePosition = newPosition;
//000345:             }
//000346:         }
//000347: 
//000348:         /// <summary>Zoom in or out based on the specified degree of zoom.</summary>
//000349:         /// <param name="amountOfChange">Amount to zoom in (positive) or out (negative).</param>
//000350:         private void Zoom(int amountOfChange)
//000351:         {
//000352:             const int ZOOM_FACTOR = 3;
//000353:             camMain.Position = Point3D.Add(camMain.Position, camMain.LookDirection * amountOfChange * ZOOM_FACTOR);
//000354:         }
//000355:         #endregion
//000356: 
//000357:         #region Step and Render
//000358:         /// <summary>Runs the rendering loop.</summary>
//000359:         private void RenderUpdateLoop()
//000360:         {
//000361:             // Loop forever...
//000362:             while (true)
//000363:             {
//000364:                 // Wait to receive a signal that we should render another frame
//000365:                 m_renderSignal.WaitOne();
//000366: 
//000367:                 // Start timing.
//000368:                 m_frameStopwatch.Restart();
//000369: 
//000370:                 // Update the positions and velocities of all of the boids.
//000371:                 StepBoids();
//000372: 
//000373:                 // Update our rendering stats for display to the user
//000374:                 m_totalRenderingMillisecondsSinceLastUserPresentation += m_frameStopwatch.ElapsedMilliseconds;
//000375:                 m_numRendersSinceLastUserPresentation++;
//000376: 
//000377:                 // Render the boids to the UI
//000378:                 Dispatcher.Invoke((Action)RenderBoids, DispatcherPriority.Send, null);
//000379:             }
//000380:         }
//000381: 
//000382:         /// <summary>Step the boids one step, updating their velocities and positions.</summary>
//000383:         private void StepBoids()
//000384:         {
//000385:             // Store the current velocities and positions so that we can operate on an immutable copy
//000386:             foreach (var boid in m_boidModels) boid.StorePositionAndVelocityIntoPrevious();
//000387: 
//000388:             // For each boid, analyze how the various boid rules influence its velocity and position,
//000389:             // then store this new information.  After this step, we'll be able to render the boids.
//000390:             Parallel.ForEach(m_boidModels, m_parallelOptions, boid =>
//000391:             {
//000392:                 var v1_2_3 = PrimaryRules_1_2_3(boid); // weights factored in already in PrimaryRules
//000393:                 var v4 = m_rule4Weight * Rule4_EncourageStayingWithinAviary(boid);
//000394:                 var v5 = m_rule5Weight * Rule5_TendendcyTowardsHome(boid);
//000395: 
//000396:                 boid.Velocity = BoundVelocity(boid.PreviousVelocity + v1_2_3 + v4 + v5, m_speedLimit);
//000397:                 boid.Velocity.Normalize();
//000398: 
//000399:                 var tmpPosition = boid.PreviousPosition + boid.Velocity;
//000400:                 if (tmpPosition.Y >= 0) boid.Position = tmpPosition;
//000401:             });
//000402:         }
//000403: 
//000404:         /// <summary>Render the boids.</summary>
//000405:         private void RenderBoids()
//000406:         {
//000407:             // Make sure the boids are all positioned and pointing correctly
//000408:             foreach (var boid in m_boidModels) boid.TransformByPositionAndVelocity();
//000409: 
//000410:             // Every once in a while, update the user-displayed stats on timings
//000411:             var now = DateTimeOffset.Now;
//000412:             if (now >= m_nextUserPresentation)
//000413:             {
//000414:                 Title = string.Format("Procs: {0}, Time: {1:F2}", m_parallelOptions.MaxDegreeOfParallelism, 
//000415:                     m_numRendersSinceLastUserPresentation > 0 ? 
//000416:                     m_totalRenderingMillisecondsSinceLastUserPresentation / (double)m_numRendersSinceLastUserPresentation : 
//000417:                     0);
//000418:                 m_nextUserPresentation = now.AddSeconds(1);
//000419:                 m_numRendersSinceLastUserPresentation = 0;
//000420:                 m_totalRenderingMillisecondsSinceLastUserPresentation = 0;
//000421:             }
//000422: 
//000423:             // If we're in auto-panning mode, move the camera appropriately
//000424:             if (m_autoPanCamera)
//000425:             {
//000426:                 // Compute the maximum Z value of all of the boids and the center of their mass
//000427:                 double maxZ = double.MinValue;
//000428:                 Vector3D totalPos = new Vector3D();
//000429:                 foreach (var boid in m_boidModels)
//000430:                 {
//000431:                     if (boid.Position.Z > maxZ) maxZ = boid.Position.Z;
//000432:                     totalPos += boid.Position;
//000433:                 }
//000434:                 var newCameraPos = totalPos / m_boidModels.Length;
//000435:                 
//000436:                 // Move the camera to point at the center of the boids, a ways back from the max boid's Z
//000437:                 const int CAMERA_DISTANCE_FROM_MAXZ = 100;
//000438:                 const double CAMERA_SPEED_LIMIT = .01;
//000439:                 var newPos = new Point3D(newCameraPos.X, newCameraPos.Y, maxZ + CAMERA_DISTANCE_FROM_MAXZ);
//000440:                 var cameraVelocity = newPos - camMain.Position;
//000441:                 camMain.Position = camMain.Position + (cameraVelocity * CAMERA_SPEED_LIMIT);
//000442:             }
//000443:         }
//000444:         #endregion
//000445: 
//000446:         #region Boid Rules
//000447:         /// <summary>Run the three primary rules of boidom.</summary>
//000448:         /// <param name="boid">The boid to process.</param>
//000449:         /// <returns>The velocity vector resulting from the three primary rules and their associated weights.</returns>
//000450:         private Vector3D PrimaryRules_1_2_3(Boid boid)
//000451:         {
//000452:             int numNearby = 0;
//000453:             Vector3D summedPosition = new Vector3D();
//000454:             Vector3D summedVelocity = new Vector3D();
//000455:             Vector3D summedSeparation = new Vector3D();
//000456: 
//000457:             // For rule #1, we want the boid to fly towards the center of all of those in its neighborhood.
//000458:             // We find all of those boids, average their positions, and create a velocity vector to move the
//000459:             // boid a bit of the way there.
//000460: 
//000461:             // For rule #2, we want the boid to move away from each other boid it's a bit too close to.
//000462:             // Find all of those boids in its immediate vicinity, and push it away.
//000463: 
//000464:             // For rule #3, we want the boid to match velocities with those boids in its neighborhood.
//000465:             // Sum their velocities, find the average, and move this boid's velocity a bit in that direction.
//000466: 
//000467:             foreach (var other in m_boidModels)
//000468:             {
//000469:                 if (other != boid && 
//000470:                     (other.PreviousPosition - boid.PreviousPosition).Length <= NEIGHBORHOOD_SIZE &&
//000471:                     boid.ComputeAngle(other) <= 135)
//000472:                 {
//000473:                     summedPosition += other.PreviousPosition;
//000474:                     summedVelocity += other.PreviousVelocity;
//000475:                     numNearby++;
//000476: 
//000477:                     if ((other.PreviousPosition - boid.PreviousPosition).Length < MIN_DISTANCE_FROM_NEIGHBOR)
//000478:                     {
//000479:                         summedSeparation -= (other.PreviousPosition - boid.PreviousPosition);
//000480:                     }
//000481:                 }
//000482:             }
//000483: 
//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
//000485:             var rule2_separateFromNearby = summedSeparation;
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
//000487: 
//000488:             return
//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
//000499:             var v = new Vector3D();
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_012a:  ldloc.s    CS$7$0002
    IL_012c:  ldc.i4.1
    IL_012d:  add
    IL_012e:  stloc.s    CS$7$0002
//000120:             foreach (var boidModel in m_boidModels) viewport3D.Children.Add(boidModel);
    IL_0130:  ldloc.s    CS$7$0002
    IL_0132:  ldloc.s    CS$6$0001
    IL_0134:  ldlen
    IL_0135:  conv.i4
    IL_0136:  clt
    IL_0138:  stloc.s    CS$4$0003
//000121: 
//000122:             // Configure and start the rendering timer.  A System.Timers.Timer is used to make it easy to turn on and off.
//000123:             var renderTimerPeriod = (int)(1000.0 / FRAMES_PER_SECOND);
//000124:             m_renderTimer = new System.Timers.Timer(renderTimerPeriod);
//000125:             m_renderTimer.Elapsed += (_, __) => m_renderSignal.Set();
//000126:             m_renderTimer.Enabled = true;
//000127: 
//000128:             // Start the rendering loop on a background thread
//000129:             Task.Factory.StartNew(RenderUpdateLoop);
//000130:         }
//000131: 
//000132:         /// <summary>Move the boids to random positions and velocities.</summary>
//000133:         /// <param name="rand">The random number generator to use.</param>
//000134:         private void RandomizeBoidPositionsAndVelocities(Random rand = null)
//000135:         {
//000136:             if (rand == null) rand = new Random();
//000137:             foreach (var boid in m_boidModels)
//000138:             {
//000139:                 boid.Position = new Vector3D(
//000140:                            rand.Next((int)m_aviary.X, (int)(m_aviary.X + m_aviary.SizeX)),
//000141:                            rand.Next((int)m_aviary.Y, (int)(m_aviary.Y + m_aviary.SizeY)),
//000142:                            rand.Next((int)m_aviary.Z, (int)(m_aviary.Z + m_aviary.SizeZ)));
//000143:                 boid.Velocity = new Vector3D(
//000144:                            rand.NextDouble() * 2 - 1,
//000145:                            rand.NextDouble() * 2 - 1,
//000146:                            rand.NextDouble() * 2 - 1);
//000147:             }
//000148:         }
//000149:         #endregion
//000150: 
//000151:         #region Window Interaction Controls
//000152:         /// <summary>Handle keydown events.</summary>
//000153:         /// <param name="sender">The sender.</param>
//000154:         /// <param name="e">The eventargs.</param>
//000155:         private void Window_KeyDown(object sender, KeyEventArgs e)
//000156:         {
//000157:             // If escape is pressed, normalize the window size
//000158:             if (e.Key == Key.Escape)
//000159:             {
//000160:                 Topmost = false;
//000161:                 WindowStyle = WindowStyle.ThreeDBorderWindow;
//000162:                 WindowState = WindowState.Normal;
//000163:             }
//000164: 
//000165:                 // If 'P' is pressed, switch back and forth between serial and parallel
//000166:             else if (e.Key == Key.P)
//000167:             {
//000168:                 int procCount = Environment.ProcessorCount;
//000169:                 m_parallelOptions.MaxDegreeOfParallelism = m_parallelOptions.MaxDegreeOfParallelism == 1 ? procCount : 1;
//000170:             }
//000171: 
//000172:                 // If 'b' is pressed, break/pause the scene until 'b' is pressed again
//000173:             else if (e.Key == Key.B)
//000174:             {
//000175:                 m_renderTimer.Enabled = !m_renderTimer.Enabled;
//000176:             }
//000177: 
//000178:                 // If 't' is pressed, toggle translucency to enable following just one boid
//000179:             else if (e.Key == Key.T)
//000180:             {
//000181:                 for (int i = 1; i < m_boidModels.Length; i++) m_boidModels[i].ToggleTranslucency();
//000182:             }
//000183: 
//000184:                 // If 'a' is pressed, turn auto-panning/zoom of the camera on/off
//000185:             else if (e.Key == Key.A)
//000186:             {
//000187:                 m_autoPanCamera = !m_autoPanCamera;
//000188:             }
//000189: 
//000190:                 // If up or down is pressed and we're in auto-pan mode, 
//000191:             else if ((e.Key == Key.Up || e.Key == Key.Down) && !m_autoPanCamera)
//000192:             {
//000193:                 Zoom(e.Key == Key.Up ? 1 : -1);
//000194:             }
//000195: 
//000196:                 // If 'r' is pressed, reset all of the boids to random positions and velocities
//000197:             else if (e.Key == Key.R)
//000198:             {
//000199:                 RandomizeBoidPositionsAndVelocities();
//000200:             }
//000201: 
//000202:                 // If 'h', display usage instructions to the user
//000203:             else if (e.Key == Key.H)
//000204:             {
//000205:                 string instructions =
//000206:                     "** Window Controls **" + Environment.NewLine +
//000207:                     "Auto-Camera Positioning: 'a'" + Environment.NewLine +
//000208:                     "Pan: Click Left And Drag" + Environment.NewLine +
//000209:                     "Zoom In / Out: Mousewheel (or) Up/Down Keys (or) Ctrl+Middle Mouse Move" + Environment.NewLine +
//000210:                     "Full Screen: Right Double-Click" + Environment.NewLine +
//000211:                     "Restore to Normal Window Size: Right Double-Click (or) Escape Key" + Environment.NewLine +
//000212:                     "Pause: 'b'" + Environment.NewLine +
//000213:                     "Translucency: 't'" + Environment.NewLine +
//000214:                     Environment.NewLine +
//000215:                     "** Boid Controls **" + Environment.NewLine +
//000216:                     "Scatter: Left Double-Click" + Environment.NewLine +
//000217:                     "Change Max Speed: Ctrl + Mousewheel" + Environment.NewLine +
//000218:                     "Randomize: 'r'" + Environment.NewLine +
//000219:                     Environment.NewLine +
//000220:                     "** Parallelism Controls **" + Environment.NewLine +
//000221:                     "Go Parallel: 'p'" + Environment.NewLine;
//000222:                 MessageBox.Show(this, instructions, "Instructions", MessageBoxButton.OK, MessageBoxImage.Information);
//000223:             }
//000224:         }
//000225: 
//000226:         /// <summary>Handle mousedown events.</summary>
//000227:         /// <param name="sender">The sender.</param>
//000228:         /// <param name="e">The eventargs.</param>
//000229:         private void Window_MouseDown(object sender, MouseButtonEventArgs e)
//000230:         {
//000231:             // Log the last mouse position
//000232:             _lastMousePosition = e.GetPosition(this);
//000233:         }
//000234: 
//000235:         /// <summary>Handle mousewheel events.</summary>
//000236:         /// <param name="sender">The sender.</param>
//000237:         /// <param name="e">The eventargs.</param>
//000238:         private void Window_MouseWheel(object sender, MouseWheelEventArgs e)
//000239:         {
//000240:             // If ctrl is pressed, change the max bird speed based on the number of mousewheel turns
//000241:             if ((Keyboard.Modifiers & ModifierKeys.Control) != 0)
//000242:             {
//000243:                 const int MIN_SPEED = 2, MAX_SPEED = 10;
//000244:                 if (e.Delta > 0 && m_speedLimit < MAX_SPEED) m_speedLimit++;
//000245:                 else if (e.Delta < 0 && m_speedLimit > MIN_SPEED) m_speedLimit--;
//000246:             }
//000247:                 // Otherwise, as long as we're not in auto-panning/zooming mode,
//000248:                 // zoom in or out based on the number of mousewheel turns
//000249:             else if (!m_autoPanCamera) Zoom(e.Delta / Mouse.MouseWheelDeltaForOneLine); 
//000250:         }
//000251: 
//000252:         /// <summary>Handle mousedoubleclick events.</summary>
//000253:         /// <param name="sender">The sender.</param>
//000254:         /// <param name="e">The eventargs.</param>
//000255:         private void Window_MouseDoubleClick(object sender, MouseButtonEventArgs e)
//000256:         {
//000257:             // If the right mouse button is double clicked, alternate between maximized and normal view
//000258:             if (e.ChangedButton == MouseButton.Right)
//000259:             {
//000260:                 if (WindowState == WindowState.Maximized)
//000261:                 {
//000262:                     Topmost = false;
//000263:                     WindowStyle = WindowStyle.ThreeDBorderWindow;
//000264:                     WindowState = WindowState.Normal;
//000265:                 }
//000266:                 else
//000267:                 {
//000268:                     Topmost = true;
//000269:                     WindowStyle = WindowStyle.None;
//000270:                     WindowState = WindowState.Maximized;
//000271:                 }
//000272:             }
//000273:                 // If the left mouse button is double clicked, scatter the boids
//000274:             else if (e.ChangedButton == MouseButton.Left)
//000275:             {
//000276:                 Scatter();
//000277:             }
//000278:         }
//000279: 
//000280:         /// <summary>Scatter the boids.</summary>
//000281:         private void Scatter()
//000282:         {
//000283:             // Start scatterring if a scatter isn't already in process
//000284:             if (m_scatterTimer == null)
//000285:             {
//000286:                 // Ka'boom.  Something scares the boids.
//000287:                 SystemSounds.Hand.Play();
//000288: 
//000289:                 // Store original settings
//000290:                 var origHome = m_home;
//000291:                 var origRule1Weight = m_rule1Weight;
//000292:                 var origRule2Weight = m_rule2Weight;
//000293:                 var origRule4Weight = m_rule4Weight;
//000294:                 var origRule5Weight = m_rule5Weight;
//000295: 
//000296:                 // Create new scatter settings
//000297:                 m_home = new Vector3D(0, 0, 0);
//000298:                 m_rule1Weight = origRule1Weight * -5;
//000299:                 m_rule2Weight = origRule2Weight * 2;
//000300:                 m_rule4Weight = 0;
//000301:                 m_rule5Weight = origRule5Weight * -5;
//000302: 
//000303:                 // Start a timer to restore the original settings
//000304:                 m_scatterTimer = new Timer(_ =>
//000305:                 {
//000306:                     // Restore the original settings
//000307:                     m_home = origHome;
//000308:                     m_rule1Weight = origRule1Weight;
//000309:                     m_rule2Weight = origRule2Weight;
//000310:                     m_rule4Weight = origRule4Weight;
//000311:                     m_rule5Weight = origRule5Weight;
//000312: 
//000313:                     // Clean up the timer
//000314:                     m_scatterTimer.Dispose();
//000315:                     m_scatterTimer = null;
//000316:                 }, null, SCATTER_TIME, -1);
//000317:             }
//000318:         }
//000319: 
//000320:         /// <summary>Handle mousemove events.</summary>
//000321:         /// <param name="sender">The sender.</param>
//000322:         /// <param name="e">The eventargs.</param>
//000323:         private void Window_MouseMove(object sender, MouseEventArgs e)
//000324:         {
//000325:             // If we're not auto-panning
//000326:             if (!m_autoPanCamera)
//000327:             {
//000328:                 // Get the new mouse position and compute the difference from the previous
//000329:                 var newPosition = e.GetPosition(this);
//000330:                 var diff = _lastMousePosition - newPosition;
//000331: 
//000332:                 // If the left mouse position was pressed, pan based on the x/y differences
//000333:                 if (e.LeftButton == MouseButtonState.Pressed)
//000334:                 {
//000335:                     camMain.Position = new Point3D(camMain.Position.X + diff.X * .4, camMain.Position.Y - diff.Y * .4, camMain.Position.Z);
//000336:                 }
//000337:                     // If the middle button was pressed, zoom based on the y difference
//000338:                 else if (e.MiddleButton == MouseButtonState.Pressed)
//000339:                 {
//000340:                     Zoom((int)diff.Y);
//000341:                 }
//000342: 
//000343:                 // Store the new position
//000344:                 _lastMousePosition = newPosition;
//000345:             }
//000346:         }
//000347: 
//000348:         /// <summary>Zoom in or out based on the specified degree of zoom.</summary>
//000349:         /// <param name="amountOfChange">Amount to zoom in (positive) or out (negative).</param>
//000350:         private void Zoom(int amountOfChange)
//000351:         {
//000352:             const int ZOOM_FACTOR = 3;
//000353:             camMain.Position = Point3D.Add(camMain.Position, camMain.LookDirection * amountOfChange * ZOOM_FACTOR);
//000354:         }
//000355:         #endregion
//000356: 
//000357:         #region Step and Render
//000358:         /// <summary>Runs the rendering loop.</summary>
//000359:         private void RenderUpdateLoop()
//000360:         {
//000361:             // Loop forever...
//000362:             while (true)
//000363:             {
//000364:                 // Wait to receive a signal that we should render another frame
//000365:                 m_renderSignal.WaitOne();
//000366: 
//000367:                 // Start timing.
//000368:                 m_frameStopwatch.Restart();
//000369: 
//000370:                 // Update the positions and velocities of all of the boids.
//000371:                 StepBoids();
//000372: 
//000373:                 // Update our rendering stats for display to the user
//000374:                 m_totalRenderingMillisecondsSinceLastUserPresentation += m_frameStopwatch.ElapsedMilliseconds;
//000375:                 m_numRendersSinceLastUserPresentation++;
//000376: 
//000377:                 // Render the boids to the UI
//000378:                 Dispatcher.Invoke((Action)RenderBoids, DispatcherPriority.Send, null);
//000379:             }
//000380:         }
//000381: 
//000382:         /// <summary>Step the boids one step, updating their velocities and positions.</summary>
//000383:         private void StepBoids()
//000384:         {
//000385:             // Store the current velocities and positions so that we can operate on an immutable copy
//000386:             foreach (var boid in m_boidModels) boid.StorePositionAndVelocityIntoPrevious();
//000387: 
//000388:             // For each boid, analyze how the various boid rules influence its velocity and position,
//000389:             // then store this new information.  After this step, we'll be able to render the boids.
//000390:             Parallel.ForEach(m_boidModels, m_parallelOptions, boid =>
//000391:             {
//000392:                 var v1_2_3 = PrimaryRules_1_2_3(boid); // weights factored in already in PrimaryRules
//000393:                 var v4 = m_rule4Weight * Rule4_EncourageStayingWithinAviary(boid);
//000394:                 var v5 = m_rule5Weight * Rule5_TendendcyTowardsHome(boid);
//000395: 
//000396:                 boid.Velocity = BoundVelocity(boid.PreviousVelocity + v1_2_3 + v4 + v5, m_speedLimit);
//000397:                 boid.Velocity.Normalize();
//000398: 
//000399:                 var tmpPosition = boid.PreviousPosition + boid.Velocity;
//000400:                 if (tmpPosition.Y >= 0) boid.Position = tmpPosition;
//000401:             });
//000402:         }
//000403: 
//000404:         /// <summary>Render the boids.</summary>
//000405:         private void RenderBoids()
//000406:         {
//000407:             // Make sure the boids are all positioned and pointing correctly
//000408:             foreach (var boid in m_boidModels) boid.TransformByPositionAndVelocity();
//000409: 
//000410:             // Every once in a while, update the user-displayed stats on timings
//000411:             var now = DateTimeOffset.Now;
//000412:             if (now >= m_nextUserPresentation)
//000413:             {
//000414:                 Title = string.Format("Procs: {0}, Time: {1:F2}", m_parallelOptions.MaxDegreeOfParallelism, 
//000415:                     m_numRendersSinceLastUserPresentation > 0 ? 
//000416:                     m_totalRenderingMillisecondsSinceLastUserPresentation / (double)m_numRendersSinceLastUserPresentation : 
//000417:                     0);
//000418:                 m_nextUserPresentation = now.AddSeconds(1);
//000419:                 m_numRendersSinceLastUserPresentation = 0;
//000420:                 m_totalRenderingMillisecondsSinceLastUserPresentation = 0;
//000421:             }
//000422: 
//000423:             // If we're in auto-panning mode, move the camera appropriately
//000424:             if (m_autoPanCamera)
//000425:             {
//000426:                 // Compute the maximum Z value of all of the boids and the center of their mass
//000427:                 double maxZ = double.MinValue;
//000428:                 Vector3D totalPos = new Vector3D();
//000429:                 foreach (var boid in m_boidModels)
//000430:                 {
//000431:                     if (boid.Position.Z > maxZ) maxZ = boid.Position.Z;
//000432:                     totalPos += boid.Position;
//000433:                 }
//000434:                 var newCameraPos = totalPos / m_boidModels.Length;
//000435:                 
//000436:                 // Move the camera to point at the center of the boids, a ways back from the max boid's Z
//000437:                 const int CAMERA_DISTANCE_FROM_MAXZ = 100;
//000438:                 const double CAMERA_SPEED_LIMIT = .01;
//000439:                 var newPos = new Point3D(newCameraPos.X, newCameraPos.Y, maxZ + CAMERA_DISTANCE_FROM_MAXZ);
//000440:                 var cameraVelocity = newPos - camMain.Position;
//000441:                 camMain.Position = camMain.Position + (cameraVelocity * CAMERA_SPEED_LIMIT);
//000442:             }
//000443:         }
//000444:         #endregion
//000445: 
//000446:         #region Boid Rules
//000447:         /// <summary>Run the three primary rules of boidom.</summary>
//000448:         /// <param name="boid">The boid to process.</param>
//000449:         /// <returns>The velocity vector resulting from the three primary rules and their associated weights.</returns>
//000450:         private Vector3D PrimaryRules_1_2_3(Boid boid)
//000451:         {
//000452:             int numNearby = 0;
//000453:             Vector3D summedPosition = new Vector3D();
//000454:             Vector3D summedVelocity = new Vector3D();
//000455:             Vector3D summedSeparation = new Vector3D();
//000456: 
//000457:             // For rule #1, we want the boid to fly towards the center of all of those in its neighborhood.
//000458:             // We find all of those boids, average their positions, and create a velocity vector to move the
//000459:             // boid a bit of the way there.
//000460: 
//000461:             // For rule #2, we want the boid to move away from each other boid it's a bit too close to.
//000462:             // Find all of those boids in its immediate vicinity, and push it away.
//000463: 
//000464:             // For rule #3, we want the boid to match velocities with those boids in its neighborhood.
//000465:             // Sum their velocities, find the average, and move this boid's velocity a bit in that direction.
//000466: 
//000467:             foreach (var other in m_boidModels)
//000468:             {
//000469:                 if (other != boid && 
//000470:                     (other.PreviousPosition - boid.PreviousPosition).Length <= NEIGHBORHOOD_SIZE &&
//000471:                     boid.ComputeAngle(other) <= 135)
//000472:                 {
//000473:                     summedPosition += other.PreviousPosition;
//000474:                     summedVelocity += other.PreviousVelocity;
//000475:                     numNearby++;
//000476: 
//000477:                     if ((other.PreviousPosition - boid.PreviousPosition).Length < MIN_DISTANCE_FROM_NEIGHBOR)
//000478:                     {
//000479:                         summedSeparation -= (other.PreviousPosition - boid.PreviousPosition);
//000480:                     }
//000481:                 }
//000482:             }
//000483: 
//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
//000485:             var rule2_separateFromNearby = summedSeparation;
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
//000487: 
//000488:             return
//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
//000499:             var v = new Vector3D();
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_013a:  ldloc.s    CS$4$0003
    IL_013c:  brtrue.s   IL_0112

//000123:             var renderTimerPeriod = (int)(1000.0 / FRAMES_PER_SECOND);
    IL_013e:  ldc.i4.s   41
    IL_0140:  stloc.1
//000124:             m_renderTimer = new System.Timers.Timer(renderTimerPeriod);
    IL_0141:  ldarg.0
    IL_0142:  ldloc.1
    IL_0143:  conv.r8
    IL_0144:  newobj     instance void [System]System.Timers.Timer::.ctor(float64)
    IL_0149:  stfld      class [System]System.Timers.Timer ParallelBoids.MainWindow::m_renderTimer
//000125:             m_renderTimer.Elapsed += (_, __) => m_renderSignal.Set();
    IL_014e:  ldarg.0
    IL_014f:  ldfld      class [System]System.Timers.Timer ParallelBoids.MainWindow::m_renderTimer
    IL_0154:  ldarg.0
    IL_0155:  ldftn      instance void ParallelBoids.MainWindow::'<Window_Loaded>b__2'(object,
                                                                                       class [System]System.Timers.ElapsedEventArgs)
    IL_015b:  newobj     instance void [System]System.Timers.ElapsedEventHandler::.ctor(object,
                                                                                        native int)
    IL_0160:  callvirt   instance void [System]System.Timers.Timer::add_Elapsed(class [System]System.Timers.ElapsedEventHandler)
    IL_0165:  nop
//000126:             m_renderTimer.Enabled = true;
    IL_0166:  ldarg.0
    IL_0167:  ldfld      class [System]System.Timers.Timer ParallelBoids.MainWindow::m_renderTimer
    IL_016c:  ldc.i4.1
    IL_016d:  callvirt   instance void [System]System.Timers.Timer::set_Enabled(bool)
    IL_0172:  nop
//000127: 
//000128:             // Start the rendering loop on a background thread
//000129:             Task.Factory.StartNew(RenderUpdateLoop);
    IL_0173:  call       class [mscorlib]System.Threading.Tasks.TaskFactory [mscorlib]System.Threading.Tasks.Task::get_Factory()
    IL_0178:  ldarg.0
    IL_0179:  ldftn      instance void ParallelBoids.MainWindow::RenderUpdateLoop()
    IL_017f:  newobj     instance void [mscorlib]System.Action::.ctor(object,
                                                                      native int)
    IL_0184:  callvirt   instance class [mscorlib]System.Threading.Tasks.Task [mscorlib]System.Threading.Tasks.TaskFactory::StartNew(class [mscorlib]System.Action)
    IL_0189:  pop
//000130:         }
    IL_018a:  nop
    IL_018b:  ret
  } // end of method MainWindow::Window_Loaded

  .method private hidebysig instance void 
          RandomizeBoidPositionsAndVelocities([opt] class [mscorlib]System.Random rand) cil managed
  {
    .param [1] = nullref
    // Code size       289 (0x121)
    .maxstack  7
    .locals init ([0] class ParallelBoids.Boid boid,
             [1] bool CS$4$0000,
             [2] class ParallelBoids.Boid[] CS$6$0001,
             [3] int32 CS$7$0002)
//000131: 
//000132:         /// <summary>Move the boids to random positions and velocities.</summary>
//000133:         /// <param name="rand">The random number generator to use.</param>
//000134:         private void RandomizeBoidPositionsAndVelocities(Random rand = null)
//000135:         {
    IL_0000:  nop
//000136:             if (rand == null) rand = new Random();
    IL_0001:  ldarg.1
    IL_0002:  ldnull
    IL_0003:  ceq
    IL_0005:  ldc.i4.0
    IL_0006:  ceq
    IL_0008:  stloc.1
//000137:             foreach (var boid in m_boidModels)
//000138:             {
//000139:                 boid.Position = new Vector3D(
//000140:                            rand.Next((int)m_aviary.X, (int)(m_aviary.X + m_aviary.SizeX)),
//000141:                            rand.Next((int)m_aviary.Y, (int)(m_aviary.Y + m_aviary.SizeY)),
//000142:                            rand.Next((int)m_aviary.Z, (int)(m_aviary.Z + m_aviary.SizeZ)));
//000143:                 boid.Velocity = new Vector3D(
//000144:                            rand.NextDouble() * 2 - 1,
//000145:                            rand.NextDouble() * 2 - 1,
//000146:                            rand.NextDouble() * 2 - 1);
//000147:             }
//000148:         }
//000149:         #endregion
//000150: 
//000151:         #region Window Interaction Controls
//000152:         /// <summary>Handle keydown events.</summary>
//000153:         /// <param name="sender">The sender.</param>
//000154:         /// <param name="e">The eventargs.</param>
//000155:         private void Window_KeyDown(object sender, KeyEventArgs e)
//000156:         {
//000157:             // If escape is pressed, normalize the window size
//000158:             if (e.Key == Key.Escape)
//000159:             {
//000160:                 Topmost = false;
//000161:                 WindowStyle = WindowStyle.ThreeDBorderWindow;
//000162:                 WindowState = WindowState.Normal;
//000163:             }
//000164: 
//000165:                 // If 'P' is pressed, switch back and forth between serial and parallel
//000166:             else if (e.Key == Key.P)
//000167:             {
//000168:                 int procCount = Environment.ProcessorCount;
//000169:                 m_parallelOptions.MaxDegreeOfParallelism = m_parallelOptions.MaxDegreeOfParallelism == 1 ? procCount : 1;
//000170:             }
//000171: 
//000172:                 // If 'b' is pressed, break/pause the scene until 'b' is pressed again
//000173:             else if (e.Key == Key.B)
//000174:             {
//000175:                 m_renderTimer.Enabled = !m_renderTimer.Enabled;
//000176:             }
//000177: 
//000178:                 // If 't' is pressed, toggle translucency to enable following just one boid
//000179:             else if (e.Key == Key.T)
//000180:             {
//000181:                 for (int i = 1; i < m_boidModels.Length; i++) m_boidModels[i].ToggleTranslucency();
//000182:             }
//000183: 
//000184:                 // If 'a' is pressed, turn auto-panning/zoom of the camera on/off
//000185:             else if (e.Key == Key.A)
//000186:             {
//000187:                 m_autoPanCamera = !m_autoPanCamera;
//000188:             }
//000189: 
//000190:                 // If up or down is pressed and we're in auto-pan mode, 
//000191:             else if ((e.Key == Key.Up || e.Key == Key.Down) && !m_autoPanCamera)
//000192:             {
//000193:                 Zoom(e.Key == Key.Up ? 1 : -1);
//000194:             }
//000195: 
//000196:                 // If 'r' is pressed, reset all of the boids to random positions and velocities
//000197:             else if (e.Key == Key.R)
//000198:             {
//000199:                 RandomizeBoidPositionsAndVelocities();
//000200:             }
//000201: 
//000202:                 // If 'h', display usage instructions to the user
//000203:             else if (e.Key == Key.H)
//000204:             {
//000205:                 string instructions =
//000206:                     "** Window Controls **" + Environment.NewLine +
//000207:                     "Auto-Camera Positioning: 'a'" + Environment.NewLine +
//000208:                     "Pan: Click Left And Drag" + Environment.NewLine +
//000209:                     "Zoom In / Out: Mousewheel (or) Up/Down Keys (or) Ctrl+Middle Mouse Move" + Environment.NewLine +
//000210:                     "Full Screen: Right Double-Click" + Environment.NewLine +
//000211:                     "Restore to Normal Window Size: Right Double-Click (or) Escape Key" + Environment.NewLine +
//000212:                     "Pause: 'b'" + Environment.NewLine +
//000213:                     "Translucency: 't'" + Environment.NewLine +
//000214:                     Environment.NewLine +
//000215:                     "** Boid Controls **" + Environment.NewLine +
//000216:                     "Scatter: Left Double-Click" + Environment.NewLine +
//000217:                     "Change Max Speed: Ctrl + Mousewheel" + Environment.NewLine +
//000218:                     "Randomize: 'r'" + Environment.NewLine +
//000219:                     Environment.NewLine +
//000220:                     "** Parallelism Controls **" + Environment.NewLine +
//000221:                     "Go Parallel: 'p'" + Environment.NewLine;
//000222:                 MessageBox.Show(this, instructions, "Instructions", MessageBoxButton.OK, MessageBoxImage.Information);
//000223:             }
//000224:         }
//000225: 
//000226:         /// <summary>Handle mousedown events.</summary>
//000227:         /// <param name="sender">The sender.</param>
//000228:         /// <param name="e">The eventargs.</param>
//000229:         private void Window_MouseDown(object sender, MouseButtonEventArgs e)
//000230:         {
//000231:             // Log the last mouse position
//000232:             _lastMousePosition = e.GetPosition(this);
//000233:         }
//000234: 
//000235:         /// <summary>Handle mousewheel events.</summary>
//000236:         /// <param name="sender">The sender.</param>
//000237:         /// <param name="e">The eventargs.</param>
//000238:         private void Window_MouseWheel(object sender, MouseWheelEventArgs e)
//000239:         {
//000240:             // If ctrl is pressed, change the max bird speed based on the number of mousewheel turns
//000241:             if ((Keyboard.Modifiers & ModifierKeys.Control) != 0)
//000242:             {
//000243:                 const int MIN_SPEED = 2, MAX_SPEED = 10;
//000244:                 if (e.Delta > 0 && m_speedLimit < MAX_SPEED) m_speedLimit++;
//000245:                 else if (e.Delta < 0 && m_speedLimit > MIN_SPEED) m_speedLimit--;
//000246:             }
//000247:                 // Otherwise, as long as we're not in auto-panning/zooming mode,
//000248:                 // zoom in or out based on the number of mousewheel turns
//000249:             else if (!m_autoPanCamera) Zoom(e.Delta / Mouse.MouseWheelDeltaForOneLine); 
//000250:         }
//000251: 
//000252:         /// <summary>Handle mousedoubleclick events.</summary>
//000253:         /// <param name="sender">The sender.</param>
//000254:         /// <param name="e">The eventargs.</param>
//000255:         private void Window_MouseDoubleClick(object sender, MouseButtonEventArgs e)
//000256:         {
//000257:             // If the right mouse button is double clicked, alternate between maximized and normal view
//000258:             if (e.ChangedButton == MouseButton.Right)
//000259:             {
//000260:                 if (WindowState == WindowState.Maximized)
//000261:                 {
//000262:                     Topmost = false;
//000263:                     WindowStyle = WindowStyle.ThreeDBorderWindow;
//000264:                     WindowState = WindowState.Normal;
//000265:                 }
//000266:                 else
//000267:                 {
//000268:                     Topmost = true;
//000269:                     WindowStyle = WindowStyle.None;
//000270:                     WindowState = WindowState.Maximized;
//000271:                 }
//000272:             }
//000273:                 // If the left mouse button is double clicked, scatter the boids
//000274:             else if (e.ChangedButton == MouseButton.Left)
//000275:             {
//000276:                 Scatter();
//000277:             }
//000278:         }
//000279: 
//000280:         /// <summary>Scatter the boids.</summary>
//000281:         private void Scatter()
//000282:         {
//000283:             // Start scatterring if a scatter isn't already in process
//000284:             if (m_scatterTimer == null)
//000285:             {
//000286:                 // Ka'boom.  Something scares the boids.
//000287:                 SystemSounds.Hand.Play();
//000288: 
//000289:                 // Store original settings
//000290:                 var origHome = m_home;
//000291:                 var origRule1Weight = m_rule1Weight;
//000292:                 var origRule2Weight = m_rule2Weight;
//000293:                 var origRule4Weight = m_rule4Weight;
//000294:                 var origRule5Weight = m_rule5Weight;
//000295: 
//000296:                 // Create new scatter settings
//000297:                 m_home = new Vector3D(0, 0, 0);
//000298:                 m_rule1Weight = origRule1Weight * -5;
//000299:                 m_rule2Weight = origRule2Weight * 2;
//000300:                 m_rule4Weight = 0;
//000301:                 m_rule5Weight = origRule5Weight * -5;
//000302: 
//000303:                 // Start a timer to restore the original settings
//000304:                 m_scatterTimer = new Timer(_ =>
//000305:                 {
//000306:                     // Restore the original settings
//000307:                     m_home = origHome;
//000308:                     m_rule1Weight = origRule1Weight;
//000309:                     m_rule2Weight = origRule2Weight;
//000310:                     m_rule4Weight = origRule4Weight;
//000311:                     m_rule5Weight = origRule5Weight;
//000312: 
//000313:                     // Clean up the timer
//000314:                     m_scatterTimer.Dispose();
//000315:                     m_scatterTimer = null;
//000316:                 }, null, SCATTER_TIME, -1);
//000317:             }
//000318:         }
//000319: 
//000320:         /// <summary>Handle mousemove events.</summary>
//000321:         /// <param name="sender">The sender.</param>
//000322:         /// <param name="e">The eventargs.</param>
//000323:         private void Window_MouseMove(object sender, MouseEventArgs e)
//000324:         {
//000325:             // If we're not auto-panning
//000326:             if (!m_autoPanCamera)
//000327:             {
//000328:                 // Get the new mouse position and compute the difference from the previous
//000329:                 var newPosition = e.GetPosition(this);
//000330:                 var diff = _lastMousePosition - newPosition;
//000331: 
//000332:                 // If the left mouse position was pressed, pan based on the x/y differences
//000333:                 if (e.LeftButton == MouseButtonState.Pressed)
//000334:                 {
//000335:                     camMain.Position = new Point3D(camMain.Position.X + diff.X * .4, camMain.Position.Y - diff.Y * .4, camMain.Position.Z);
//000336:                 }
//000337:                     // If the middle button was pressed, zoom based on the y difference
//000338:                 else if (e.MiddleButton == MouseButtonState.Pressed)
//000339:                 {
//000340:                     Zoom((int)diff.Y);
//000341:                 }
//000342: 
//000343:                 // Store the new position
//000344:                 _lastMousePosition = newPosition;
//000345:             }
//000346:         }
//000347: 
//000348:         /// <summary>Zoom in or out based on the specified degree of zoom.</summary>
//000349:         /// <param name="amountOfChange">Amount to zoom in (positive) or out (negative).</param>
//000350:         private void Zoom(int amountOfChange)
//000351:         {
//000352:             const int ZOOM_FACTOR = 3;
//000353:             camMain.Position = Point3D.Add(camMain.Position, camMain.LookDirection * amountOfChange * ZOOM_FACTOR);
//000354:         }
//000355:         #endregion
//000356: 
//000357:         #region Step and Render
//000358:         /// <summary>Runs the rendering loop.</summary>
//000359:         private void RenderUpdateLoop()
//000360:         {
//000361:             // Loop forever...
//000362:             while (true)
//000363:             {
//000364:                 // Wait to receive a signal that we should render another frame
//000365:                 m_renderSignal.WaitOne();
//000366: 
//000367:                 // Start timing.
//000368:                 m_frameStopwatch.Restart();
//000369: 
//000370:                 // Update the positions and velocities of all of the boids.
//000371:                 StepBoids();
//000372: 
//000373:                 // Update our rendering stats for display to the user
//000374:                 m_totalRenderingMillisecondsSinceLastUserPresentation += m_frameStopwatch.ElapsedMilliseconds;
//000375:                 m_numRendersSinceLastUserPresentation++;
//000376: 
//000377:                 // Render the boids to the UI
//000378:                 Dispatcher.Invoke((Action)RenderBoids, DispatcherPriority.Send, null);
//000379:             }
//000380:         }
//000381: 
//000382:         /// <summary>Step the boids one step, updating their velocities and positions.</summary>
//000383:         private void StepBoids()
//000384:         {
//000385:             // Store the current velocities and positions so that we can operate on an immutable copy
//000386:             foreach (var boid in m_boidModels) boid.StorePositionAndVelocityIntoPrevious();
//000387: 
//000388:             // For each boid, analyze how the various boid rules influence its velocity and position,
//000389:             // then store this new information.  After this step, we'll be able to render the boids.
//000390:             Parallel.ForEach(m_boidModels, m_parallelOptions, boid =>
//000391:             {
//000392:                 var v1_2_3 = PrimaryRules_1_2_3(boid); // weights factored in already in PrimaryRules
//000393:                 var v4 = m_rule4Weight * Rule4_EncourageStayingWithinAviary(boid);
//000394:                 var v5 = m_rule5Weight * Rule5_TendendcyTowardsHome(boid);
//000395: 
//000396:                 boid.Velocity = BoundVelocity(boid.PreviousVelocity + v1_2_3 + v4 + v5, m_speedLimit);
//000397:                 boid.Velocity.Normalize();
//000398: 
//000399:                 var tmpPosition = boid.PreviousPosition + boid.Velocity;
//000400:                 if (tmpPosition.Y >= 0) boid.Position = tmpPosition;
//000401:             });
//000402:         }
//000403: 
//000404:         /// <summary>Render the boids.</summary>
//000405:         private void RenderBoids()
//000406:         {
//000407:             // Make sure the boids are all positioned and pointing correctly
//000408:             foreach (var boid in m_boidModels) boid.TransformByPositionAndVelocity();
//000409: 
//000410:             // Every once in a while, update the user-displayed stats on timings
//000411:             var now = DateTimeOffset.Now;
//000412:             if (now >= m_nextUserPresentation)
//000413:             {
//000414:                 Title = string.Format("Procs: {0}, Time: {1:F2}", m_parallelOptions.MaxDegreeOfParallelism, 
//000415:                     m_numRendersSinceLastUserPresentation > 0 ? 
//000416:                     m_totalRenderingMillisecondsSinceLastUserPresentation / (double)m_numRendersSinceLastUserPresentation : 
//000417:                     0);
//000418:                 m_nextUserPresentation = now.AddSeconds(1);
//000419:                 m_numRendersSinceLastUserPresentation = 0;
//000420:                 m_totalRenderingMillisecondsSinceLastUserPresentation = 0;
//000421:             }
//000422: 
//000423:             // If we're in auto-panning mode, move the camera appropriately
//000424:             if (m_autoPanCamera)
//000425:             {
//000426:                 // Compute the maximum Z value of all of the boids and the center of their mass
//000427:                 double maxZ = double.MinValue;
//000428:                 Vector3D totalPos = new Vector3D();
//000429:                 foreach (var boid in m_boidModels)
//000430:                 {
//000431:                     if (boid.Position.Z > maxZ) maxZ = boid.Position.Z;
//000432:                     totalPos += boid.Position;
//000433:                 }
//000434:                 var newCameraPos = totalPos / m_boidModels.Length;
//000435:                 
//000436:                 // Move the camera to point at the center of the boids, a ways back from the max boid's Z
//000437:                 const int CAMERA_DISTANCE_FROM_MAXZ = 100;
//000438:                 const double CAMERA_SPEED_LIMIT = .01;
//000439:                 var newPos = new Point3D(newCameraPos.X, newCameraPos.Y, maxZ + CAMERA_DISTANCE_FROM_MAXZ);
//000440:                 var cameraVelocity = newPos - camMain.Position;
//000441:                 camMain.Position = camMain.Position + (cameraVelocity * CAMERA_SPEED_LIMIT);
//000442:             }
//000443:         }
//000444:         #endregion
//000445: 
//000446:         #region Boid Rules
//000447:         /// <summary>Run the three primary rules of boidom.</summary>
//000448:         /// <param name="boid">The boid to process.</param>
//000449:         /// <returns>The velocity vector resulting from the three primary rules and their associated weights.</returns>
//000450:         private Vector3D PrimaryRules_1_2_3(Boid boid)
//000451:         {
//000452:             int numNearby = 0;
//000453:             Vector3D summedPosition = new Vector3D();
//000454:             Vector3D summedVelocity = new Vector3D();
//000455:             Vector3D summedSeparation = new Vector3D();
//000456: 
//000457:             // For rule #1, we want the boid to fly towards the center of all of those in its neighborhood.
//000458:             // We find all of those boids, average their positions, and create a velocity vector to move the
//000459:             // boid a bit of the way there.
//000460: 
//000461:             // For rule #2, we want the boid to move away from each other boid it's a bit too close to.
//000462:             // Find all of those boids in its immediate vicinity, and push it away.
//000463: 
//000464:             // For rule #3, we want the boid to match velocities with those boids in its neighborhood.
//000465:             // Sum their velocities, find the average, and move this boid's velocity a bit in that direction.
//000466: 
//000467:             foreach (var other in m_boidModels)
//000468:             {
//000469:                 if (other != boid && 
//000470:                     (other.PreviousPosition - boid.PreviousPosition).Length <= NEIGHBORHOOD_SIZE &&
//000471:                     boid.ComputeAngle(other) <= 135)
//000472:                 {
//000473:                     summedPosition += other.PreviousPosition;
//000474:                     summedVelocity += other.PreviousVelocity;
//000475:                     numNearby++;
//000476: 
//000477:                     if ((other.PreviousPosition - boid.PreviousPosition).Length < MIN_DISTANCE_FROM_NEIGHBOR)
//000478:                     {
//000479:                         summedSeparation -= (other.PreviousPosition - boid.PreviousPosition);
//000480:                     }
//000481:                 }
//000482:             }
//000483: 
//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
//000485:             var rule2_separateFromNearby = summedSeparation;
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
//000487: 
//000488:             return
//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
//000499:             var v = new Vector3D();
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_0009:  ldloc.1
    IL_000a:  brtrue.s   IL_0013

//000136:             if (rand == null) rand = new Random();
    IL_000c:  newobj     instance void [mscorlib]System.Random::.ctor()
    IL_0011:  starg.s    rand
//000137:             foreach (var boid in m_boidModels)
    IL_0013:  nop
    IL_0014:  ldarg.0
    IL_0015:  ldfld      class ParallelBoids.Boid[] ParallelBoids.MainWindow::m_boidModels
    IL_001a:  stloc.2
//000138:             {
//000139:                 boid.Position = new Vector3D(
//000140:                            rand.Next((int)m_aviary.X, (int)(m_aviary.X + m_aviary.SizeX)),
//000141:                            rand.Next((int)m_aviary.Y, (int)(m_aviary.Y + m_aviary.SizeY)),
//000142:                            rand.Next((int)m_aviary.Z, (int)(m_aviary.Z + m_aviary.SizeZ)));
//000143:                 boid.Velocity = new Vector3D(
//000144:                            rand.NextDouble() * 2 - 1,
//000145:                            rand.NextDouble() * 2 - 1,
//000146:                            rand.NextDouble() * 2 - 1);
//000147:             }
//000148:         }
//000149:         #endregion
//000150: 
//000151:         #region Window Interaction Controls
//000152:         /// <summary>Handle keydown events.</summary>
//000153:         /// <param name="sender">The sender.</param>
//000154:         /// <param name="e">The eventargs.</param>
//000155:         private void Window_KeyDown(object sender, KeyEventArgs e)
//000156:         {
//000157:             // If escape is pressed, normalize the window size
//000158:             if (e.Key == Key.Escape)
//000159:             {
//000160:                 Topmost = false;
//000161:                 WindowStyle = WindowStyle.ThreeDBorderWindow;
//000162:                 WindowState = WindowState.Normal;
//000163:             }
//000164: 
//000165:                 // If 'P' is pressed, switch back and forth between serial and parallel
//000166:             else if (e.Key == Key.P)
//000167:             {
//000168:                 int procCount = Environment.ProcessorCount;
//000169:                 m_parallelOptions.MaxDegreeOfParallelism = m_parallelOptions.MaxDegreeOfParallelism == 1 ? procCount : 1;
//000170:             }
//000171: 
//000172:                 // If 'b' is pressed, break/pause the scene until 'b' is pressed again
//000173:             else if (e.Key == Key.B)
//000174:             {
//000175:                 m_renderTimer.Enabled = !m_renderTimer.Enabled;
//000176:             }
//000177: 
//000178:                 // If 't' is pressed, toggle translucency to enable following just one boid
//000179:             else if (e.Key == Key.T)
//000180:             {
//000181:                 for (int i = 1; i < m_boidModels.Length; i++) m_boidModels[i].ToggleTranslucency();
//000182:             }
//000183: 
//000184:                 // If 'a' is pressed, turn auto-panning/zoom of the camera on/off
//000185:             else if (e.Key == Key.A)
//000186:             {
//000187:                 m_autoPanCamera = !m_autoPanCamera;
//000188:             }
//000189: 
//000190:                 // If up or down is pressed and we're in auto-pan mode, 
//000191:             else if ((e.Key == Key.Up || e.Key == Key.Down) && !m_autoPanCamera)
//000192:             {
//000193:                 Zoom(e.Key == Key.Up ? 1 : -1);
//000194:             }
//000195: 
//000196:                 // If 'r' is pressed, reset all of the boids to random positions and velocities
//000197:             else if (e.Key == Key.R)
//000198:             {
//000199:                 RandomizeBoidPositionsAndVelocities();
//000200:             }
//000201: 
//000202:                 // If 'h', display usage instructions to the user
//000203:             else if (e.Key == Key.H)
//000204:             {
//000205:                 string instructions =
//000206:                     "** Window Controls **" + Environment.NewLine +
//000207:                     "Auto-Camera Positioning: 'a'" + Environment.NewLine +
//000208:                     "Pan: Click Left And Drag" + Environment.NewLine +
//000209:                     "Zoom In / Out: Mousewheel (or) Up/Down Keys (or) Ctrl+Middle Mouse Move" + Environment.NewLine +
//000210:                     "Full Screen: Right Double-Click" + Environment.NewLine +
//000211:                     "Restore to Normal Window Size: Right Double-Click (or) Escape Key" + Environment.NewLine +
//000212:                     "Pause: 'b'" + Environment.NewLine +
//000213:                     "Translucency: 't'" + Environment.NewLine +
//000214:                     Environment.NewLine +
//000215:                     "** Boid Controls **" + Environment.NewLine +
//000216:                     "Scatter: Left Double-Click" + Environment.NewLine +
//000217:                     "Change Max Speed: Ctrl + Mousewheel" + Environment.NewLine +
//000218:                     "Randomize: 'r'" + Environment.NewLine +
//000219:                     Environment.NewLine +
//000220:                     "** Parallelism Controls **" + Environment.NewLine +
//000221:                     "Go Parallel: 'p'" + Environment.NewLine;
//000222:                 MessageBox.Show(this, instructions, "Instructions", MessageBoxButton.OK, MessageBoxImage.Information);
//000223:             }
//000224:         }
//000225: 
//000226:         /// <summary>Handle mousedown events.</summary>
//000227:         /// <param name="sender">The sender.</param>
//000228:         /// <param name="e">The eventargs.</param>
//000229:         private void Window_MouseDown(object sender, MouseButtonEventArgs e)
//000230:         {
//000231:             // Log the last mouse position
//000232:             _lastMousePosition = e.GetPosition(this);
//000233:         }
//000234: 
//000235:         /// <summary>Handle mousewheel events.</summary>
//000236:         /// <param name="sender">The sender.</param>
//000237:         /// <param name="e">The eventargs.</param>
//000238:         private void Window_MouseWheel(object sender, MouseWheelEventArgs e)
//000239:         {
//000240:             // If ctrl is pressed, change the max bird speed based on the number of mousewheel turns
//000241:             if ((Keyboard.Modifiers & ModifierKeys.Control) != 0)
//000242:             {
//000243:                 const int MIN_SPEED = 2, MAX_SPEED = 10;
//000244:                 if (e.Delta > 0 && m_speedLimit < MAX_SPEED) m_speedLimit++;
//000245:                 else if (e.Delta < 0 && m_speedLimit > MIN_SPEED) m_speedLimit--;
//000246:             }
//000247:                 // Otherwise, as long as we're not in auto-panning/zooming mode,
//000248:                 // zoom in or out based on the number of mousewheel turns
//000249:             else if (!m_autoPanCamera) Zoom(e.Delta / Mouse.MouseWheelDeltaForOneLine); 
//000250:         }
//000251: 
//000252:         /// <summary>Handle mousedoubleclick events.</summary>
//000253:         /// <param name="sender">The sender.</param>
//000254:         /// <param name="e">The eventargs.</param>
//000255:         private void Window_MouseDoubleClick(object sender, MouseButtonEventArgs e)
//000256:         {
//000257:             // If the right mouse button is double clicked, alternate between maximized and normal view
//000258:             if (e.ChangedButton == MouseButton.Right)
//000259:             {
//000260:                 if (WindowState == WindowState.Maximized)
//000261:                 {
//000262:                     Topmost = false;
//000263:                     WindowStyle = WindowStyle.ThreeDBorderWindow;
//000264:                     WindowState = WindowState.Normal;
//000265:                 }
//000266:                 else
//000267:                 {
//000268:                     Topmost = true;
//000269:                     WindowStyle = WindowStyle.None;
//000270:                     WindowState = WindowState.Maximized;
//000271:                 }
//000272:             }
//000273:                 // If the left mouse button is double clicked, scatter the boids
//000274:             else if (e.ChangedButton == MouseButton.Left)
//000275:             {
//000276:                 Scatter();
//000277:             }
//000278:         }
//000279: 
//000280:         /// <summary>Scatter the boids.</summary>
//000281:         private void Scatter()
//000282:         {
//000283:             // Start scatterring if a scatter isn't already in process
//000284:             if (m_scatterTimer == null)
//000285:             {
//000286:                 // Ka'boom.  Something scares the boids.
//000287:                 SystemSounds.Hand.Play();
//000288: 
//000289:                 // Store original settings
//000290:                 var origHome = m_home;
//000291:                 var origRule1Weight = m_rule1Weight;
//000292:                 var origRule2Weight = m_rule2Weight;
//000293:                 var origRule4Weight = m_rule4Weight;
//000294:                 var origRule5Weight = m_rule5Weight;
//000295: 
//000296:                 // Create new scatter settings
//000297:                 m_home = new Vector3D(0, 0, 0);
//000298:                 m_rule1Weight = origRule1Weight * -5;
//000299:                 m_rule2Weight = origRule2Weight * 2;
//000300:                 m_rule4Weight = 0;
//000301:                 m_rule5Weight = origRule5Weight * -5;
//000302: 
//000303:                 // Start a timer to restore the original settings
//000304:                 m_scatterTimer = new Timer(_ =>
//000305:                 {
//000306:                     // Restore the original settings
//000307:                     m_home = origHome;
//000308:                     m_rule1Weight = origRule1Weight;
//000309:                     m_rule2Weight = origRule2Weight;
//000310:                     m_rule4Weight = origRule4Weight;
//000311:                     m_rule5Weight = origRule5Weight;
//000312: 
//000313:                     // Clean up the timer
//000314:                     m_scatterTimer.Dispose();
//000315:                     m_scatterTimer = null;
//000316:                 }, null, SCATTER_TIME, -1);
//000317:             }
//000318:         }
//000319: 
//000320:         /// <summary>Handle mousemove events.</summary>
//000321:         /// <param name="sender">The sender.</param>
//000322:         /// <param name="e">The eventargs.</param>
//000323:         private void Window_MouseMove(object sender, MouseEventArgs e)
//000324:         {
//000325:             // If we're not auto-panning
//000326:             if (!m_autoPanCamera)
//000327:             {
//000328:                 // Get the new mouse position and compute the difference from the previous
//000329:                 var newPosition = e.GetPosition(this);
//000330:                 var diff = _lastMousePosition - newPosition;
//000331: 
//000332:                 // If the left mouse position was pressed, pan based on the x/y differences
//000333:                 if (e.LeftButton == MouseButtonState.Pressed)
//000334:                 {
//000335:                     camMain.Position = new Point3D(camMain.Position.X + diff.X * .4, camMain.Position.Y - diff.Y * .4, camMain.Position.Z);
//000336:                 }
//000337:                     // If the middle button was pressed, zoom based on the y difference
//000338:                 else if (e.MiddleButton == MouseButtonState.Pressed)
//000339:                 {
//000340:                     Zoom((int)diff.Y);
//000341:                 }
//000342: 
//000343:                 // Store the new position
//000344:                 _lastMousePosition = newPosition;
//000345:             }
//000346:         }
//000347: 
//000348:         /// <summary>Zoom in or out based on the specified degree of zoom.</summary>
//000349:         /// <param name="amountOfChange">Amount to zoom in (positive) or out (negative).</param>
//000350:         private void Zoom(int amountOfChange)
//000351:         {
//000352:             const int ZOOM_FACTOR = 3;
//000353:             camMain.Position = Point3D.Add(camMain.Position, camMain.LookDirection * amountOfChange * ZOOM_FACTOR);
//000354:         }
//000355:         #endregion
//000356: 
//000357:         #region Step and Render
//000358:         /// <summary>Runs the rendering loop.</summary>
//000359:         private void RenderUpdateLoop()
//000360:         {
//000361:             // Loop forever...
//000362:             while (true)
//000363:             {
//000364:                 // Wait to receive a signal that we should render another frame
//000365:                 m_renderSignal.WaitOne();
//000366: 
//000367:                 // Start timing.
//000368:                 m_frameStopwatch.Restart();
//000369: 
//000370:                 // Update the positions and velocities of all of the boids.
//000371:                 StepBoids();
//000372: 
//000373:                 // Update our rendering stats for display to the user
//000374:                 m_totalRenderingMillisecondsSinceLastUserPresentation += m_frameStopwatch.ElapsedMilliseconds;
//000375:                 m_numRendersSinceLastUserPresentation++;
//000376: 
//000377:                 // Render the boids to the UI
//000378:                 Dispatcher.Invoke((Action)RenderBoids, DispatcherPriority.Send, null);
//000379:             }
//000380:         }
//000381: 
//000382:         /// <summary>Step the boids one step, updating their velocities and positions.</summary>
//000383:         private void StepBoids()
//000384:         {
//000385:             // Store the current velocities and positions so that we can operate on an immutable copy
//000386:             foreach (var boid in m_boidModels) boid.StorePositionAndVelocityIntoPrevious();
//000387: 
//000388:             // For each boid, analyze how the various boid rules influence its velocity and position,
//000389:             // then store this new information.  After this step, we'll be able to render the boids.
//000390:             Parallel.ForEach(m_boidModels, m_parallelOptions, boid =>
//000391:             {
//000392:                 var v1_2_3 = PrimaryRules_1_2_3(boid); // weights factored in already in PrimaryRules
//000393:                 var v4 = m_rule4Weight * Rule4_EncourageStayingWithinAviary(boid);
//000394:                 var v5 = m_rule5Weight * Rule5_TendendcyTowardsHome(boid);
//000395: 
//000396:                 boid.Velocity = BoundVelocity(boid.PreviousVelocity + v1_2_3 + v4 + v5, m_speedLimit);
//000397:                 boid.Velocity.Normalize();
//000398: 
//000399:                 var tmpPosition = boid.PreviousPosition + boid.Velocity;
//000400:                 if (tmpPosition.Y >= 0) boid.Position = tmpPosition;
//000401:             });
//000402:         }
//000403: 
//000404:         /// <summary>Render the boids.</summary>
//000405:         private void RenderBoids()
//000406:         {
//000407:             // Make sure the boids are all positioned and pointing correctly
//000408:             foreach (var boid in m_boidModels) boid.TransformByPositionAndVelocity();
//000409: 
//000410:             // Every once in a while, update the user-displayed stats on timings
//000411:             var now = DateTimeOffset.Now;
//000412:             if (now >= m_nextUserPresentation)
//000413:             {
//000414:                 Title = string.Format("Procs: {0}, Time: {1:F2}", m_parallelOptions.MaxDegreeOfParallelism, 
//000415:                     m_numRendersSinceLastUserPresentation > 0 ? 
//000416:                     m_totalRenderingMillisecondsSinceLastUserPresentation / (double)m_numRendersSinceLastUserPresentation : 
//000417:                     0);
//000418:                 m_nextUserPresentation = now.AddSeconds(1);
//000419:                 m_numRendersSinceLastUserPresentation = 0;
//000420:                 m_totalRenderingMillisecondsSinceLastUserPresentation = 0;
//000421:             }
//000422: 
//000423:             // If we're in auto-panning mode, move the camera appropriately
//000424:             if (m_autoPanCamera)
//000425:             {
//000426:                 // Compute the maximum Z value of all of the boids and the center of their mass
//000427:                 double maxZ = double.MinValue;
//000428:                 Vector3D totalPos = new Vector3D();
//000429:                 foreach (var boid in m_boidModels)
//000430:                 {
//000431:                     if (boid.Position.Z > maxZ) maxZ = boid.Position.Z;
//000432:                     totalPos += boid.Position;
//000433:                 }
//000434:                 var newCameraPos = totalPos / m_boidModels.Length;
//000435:                 
//000436:                 // Move the camera to point at the center of the boids, a ways back from the max boid's Z
//000437:                 const int CAMERA_DISTANCE_FROM_MAXZ = 100;
//000438:                 const double CAMERA_SPEED_LIMIT = .01;
//000439:                 var newPos = new Point3D(newCameraPos.X, newCameraPos.Y, maxZ + CAMERA_DISTANCE_FROM_MAXZ);
//000440:                 var cameraVelocity = newPos - camMain.Position;
//000441:                 camMain.Position = camMain.Position + (cameraVelocity * CAMERA_SPEED_LIMIT);
//000442:             }
//000443:         }
//000444:         #endregion
//000445: 
//000446:         #region Boid Rules
//000447:         /// <summary>Run the three primary rules of boidom.</summary>
//000448:         /// <param name="boid">The boid to process.</param>
//000449:         /// <returns>The velocity vector resulting from the three primary rules and their associated weights.</returns>
//000450:         private Vector3D PrimaryRules_1_2_3(Boid boid)
//000451:         {
//000452:             int numNearby = 0;
//000453:             Vector3D summedPosition = new Vector3D();
//000454:             Vector3D summedVelocity = new Vector3D();
//000455:             Vector3D summedSeparation = new Vector3D();
//000456: 
//000457:             // For rule #1, we want the boid to fly towards the center of all of those in its neighborhood.
//000458:             // We find all of those boids, average their positions, and create a velocity vector to move the
//000459:             // boid a bit of the way there.
//000460: 
//000461:             // For rule #2, we want the boid to move away from each other boid it's a bit too close to.
//000462:             // Find all of those boids in its immediate vicinity, and push it away.
//000463: 
//000464:             // For rule #3, we want the boid to match velocities with those boids in its neighborhood.
//000465:             // Sum their velocities, find the average, and move this boid's velocity a bit in that direction.
//000466: 
//000467:             foreach (var other in m_boidModels)
//000468:             {
//000469:                 if (other != boid && 
//000470:                     (other.PreviousPosition - boid.PreviousPosition).Length <= NEIGHBORHOOD_SIZE &&
//000471:                     boid.ComputeAngle(other) <= 135)
//000472:                 {
//000473:                     summedPosition += other.PreviousPosition;
//000474:                     summedVelocity += other.PreviousVelocity;
//000475:                     numNearby++;
//000476: 
//000477:                     if ((other.PreviousPosition - boid.PreviousPosition).Length < MIN_DISTANCE_FROM_NEIGHBOR)
//000478:                     {
//000479:                         summedSeparation -= (other.PreviousPosition - boid.PreviousPosition);
//000480:                     }
//000481:                 }
//000482:             }
//000483: 
//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
//000485:             var rule2_separateFromNearby = summedSeparation;
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
//000487: 
//000488:             return
//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
//000499:             var v = new Vector3D();
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_001b:  ldc.i4.0
    IL_001c:  stloc.3
    IL_001d:  br         IL_0113

//000137:             foreach (var boid in m_boidModels)
    IL_0022:  ldloc.2
    IL_0023:  ldloc.3
    IL_0024:  ldelem.ref
    IL_0025:  stloc.0
//000138:             {
    IL_0026:  nop
//000139:                 boid.Position = new Vector3D(
    IL_0027:  ldloc.0
    IL_0028:  ldarg.1
    IL_0029:  ldarg.0
    IL_002a:  ldflda     valuetype [PresentationCore]System.Windows.Media.Media3D.Rect3D ParallelBoids.MainWindow::m_aviary
    IL_002f:  call       instance float64 [PresentationCore]System.Windows.Media.Media3D.Rect3D::get_X()
    IL_0034:  conv.i4
    IL_0035:  ldarg.0
    IL_0036:  ldflda     valuetype [PresentationCore]System.Windows.Media.Media3D.Rect3D ParallelBoids.MainWindow::m_aviary
    IL_003b:  call       instance float64 [PresentationCore]System.Windows.Media.Media3D.Rect3D::get_X()
    IL_0040:  ldarg.0
    IL_0041:  ldflda     valuetype [PresentationCore]System.Windows.Media.Media3D.Rect3D ParallelBoids.MainWindow::m_aviary
    IL_0046:  call       instance float64 [PresentationCore]System.Windows.Media.Media3D.Rect3D::get_SizeX()
    IL_004b:  add
    IL_004c:  conv.i4
    IL_004d:  callvirt   instance int32 [mscorlib]System.Random::Next(int32,
                                                                      int32)
    IL_0052:  conv.r8
    IL_0053:  ldarg.1
    IL_0054:  ldarg.0
    IL_0055:  ldflda     valuetype [PresentationCore]System.Windows.Media.Media3D.Rect3D ParallelBoids.MainWindow::m_aviary
    IL_005a:  call       instance float64 [PresentationCore]System.Windows.Media.Media3D.Rect3D::get_Y()
    IL_005f:  conv.i4
    IL_0060:  ldarg.0
    IL_0061:  ldflda     valuetype [PresentationCore]System.Windows.Media.Media3D.Rect3D ParallelBoids.MainWindow::m_aviary
    IL_0066:  call       instance float64 [PresentationCore]System.Windows.Media.Media3D.Rect3D::get_Y()
    IL_006b:  ldarg.0
    IL_006c:  ldflda     valuetype [PresentationCore]System.Windows.Media.Media3D.Rect3D ParallelBoids.MainWindow::m_aviary
    IL_0071:  call       instance float64 [PresentationCore]System.Windows.Media.Media3D.Rect3D::get_SizeY()
    IL_0076:  add
    IL_0077:  conv.i4
    IL_0078:  callvirt   instance int32 [mscorlib]System.Random::Next(int32,
                                                                      int32)
    IL_007d:  conv.r8
    IL_007e:  ldarg.1
    IL_007f:  ldarg.0
    IL_0080:  ldflda     valuetype [PresentationCore]System.Windows.Media.Media3D.Rect3D ParallelBoids.MainWindow::m_aviary
    IL_0085:  call       instance float64 [PresentationCore]System.Windows.Media.Media3D.Rect3D::get_Z()
    IL_008a:  conv.i4
    IL_008b:  ldarg.0
    IL_008c:  ldflda     valuetype [PresentationCore]System.Windows.Media.Media3D.Rect3D ParallelBoids.MainWindow::m_aviary
    IL_0091:  call       instance float64 [PresentationCore]System.Windows.Media.Media3D.Rect3D::get_Z()
    IL_0096:  ldarg.0
    IL_0097:  ldflda     valuetype [PresentationCore]System.Windows.Media.Media3D.Rect3D ParallelBoids.MainWindow::m_aviary
    IL_009c:  call       instance float64 [PresentationCore]System.Windows.Media.Media3D.Rect3D::get_SizeZ()
    IL_00a1:  add
    IL_00a2:  conv.i4
    IL_00a3:  callvirt   instance int32 [mscorlib]System.Random::Next(int32,
                                                                      int32)
    IL_00a8:  conv.r8
    IL_00a9:  newobj     instance void [PresentationCore]System.Windows.Media.Media3D.Vector3D::.ctor(float64,
                                                                                                      float64,
                                                                                                      float64)
    IL_00ae:  callvirt   instance void ParallelBoids.Boid::set_Position(valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D)
    IL_00b3:  nop
//000140:                            rand.Next((int)m_aviary.X, (int)(m_aviary.X + m_aviary.SizeX)),
//000141:                            rand.Next((int)m_aviary.Y, (int)(m_aviary.Y + m_aviary.SizeY)),
//000142:                            rand.Next((int)m_aviary.Z, (int)(m_aviary.Z + m_aviary.SizeZ)));
//000143:                 boid.Velocity = new Vector3D(
    IL_00b4:  ldloc.0
    IL_00b5:  ldarg.1
    IL_00b6:  callvirt   instance float64 [mscorlib]System.Random::NextDouble()
    IL_00bb:  ldc.r8     2.
    IL_00c4:  mul
    IL_00c5:  ldc.r8     1.
    IL_00ce:  sub
    IL_00cf:  ldarg.1
    IL_00d0:  callvirt   instance float64 [mscorlib]System.Random::NextDouble()
    IL_00d5:  ldc.r8     2.
    IL_00de:  mul
    IL_00df:  ldc.r8     1.
    IL_00e8:  sub
    IL_00e9:  ldarg.1
    IL_00ea:  callvirt   instance float64 [mscorlib]System.Random::NextDouble()
    IL_00ef:  ldc.r8     2.
    IL_00f8:  mul
    IL_00f9:  ldc.r8     1.
    IL_0102:  sub
    IL_0103:  newobj     instance void [PresentationCore]System.Windows.Media.Media3D.Vector3D::.ctor(float64,
                                                                                                      float64,
                                                                                                      float64)
    IL_0108:  callvirt   instance void ParallelBoids.Boid::set_Velocity(valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D)
    IL_010d:  nop
//000144:                            rand.NextDouble() * 2 - 1,
//000145:                            rand.NextDouble() * 2 - 1,
//000146:                            rand.NextDouble() * 2 - 1);
//000147:             }
    IL_010e:  nop
//000148:         }
//000149:         #endregion
//000150: 
//000151:         #region Window Interaction Controls
//000152:         /// <summary>Handle keydown events.</summary>
//000153:         /// <param name="sender">The sender.</param>
//000154:         /// <param name="e">The eventargs.</param>
//000155:         private void Window_KeyDown(object sender, KeyEventArgs e)
//000156:         {
//000157:             // If escape is pressed, normalize the window size
//000158:             if (e.Key == Key.Escape)
//000159:             {
//000160:                 Topmost = false;
//000161:                 WindowStyle = WindowStyle.ThreeDBorderWindow;
//000162:                 WindowState = WindowState.Normal;
//000163:             }
//000164: 
//000165:                 // If 'P' is pressed, switch back and forth between serial and parallel
//000166:             else if (e.Key == Key.P)
//000167:             {
//000168:                 int procCount = Environment.ProcessorCount;
//000169:                 m_parallelOptions.MaxDegreeOfParallelism = m_parallelOptions.MaxDegreeOfParallelism == 1 ? procCount : 1;
//000170:             }
//000171: 
//000172:                 // If 'b' is pressed, break/pause the scene until 'b' is pressed again
//000173:             else if (e.Key == Key.B)
//000174:             {
//000175:                 m_renderTimer.Enabled = !m_renderTimer.Enabled;
//000176:             }
//000177: 
//000178:                 // If 't' is pressed, toggle translucency to enable following just one boid
//000179:             else if (e.Key == Key.T)
//000180:             {
//000181:                 for (int i = 1; i < m_boidModels.Length; i++) m_boidModels[i].ToggleTranslucency();
//000182:             }
//000183: 
//000184:                 // If 'a' is pressed, turn auto-panning/zoom of the camera on/off
//000185:             else if (e.Key == Key.A)
//000186:             {
//000187:                 m_autoPanCamera = !m_autoPanCamera;
//000188:             }
//000189: 
//000190:                 // If up or down is pressed and we're in auto-pan mode, 
//000191:             else if ((e.Key == Key.Up || e.Key == Key.Down) && !m_autoPanCamera)
//000192:             {
//000193:                 Zoom(e.Key == Key.Up ? 1 : -1);
//000194:             }
//000195: 
//000196:                 // If 'r' is pressed, reset all of the boids to random positions and velocities
//000197:             else if (e.Key == Key.R)
//000198:             {
//000199:                 RandomizeBoidPositionsAndVelocities();
//000200:             }
//000201: 
//000202:                 // If 'h', display usage instructions to the user
//000203:             else if (e.Key == Key.H)
//000204:             {
//000205:                 string instructions =
//000206:                     "** Window Controls **" + Environment.NewLine +
//000207:                     "Auto-Camera Positioning: 'a'" + Environment.NewLine +
//000208:                     "Pan: Click Left And Drag" + Environment.NewLine +
//000209:                     "Zoom In / Out: Mousewheel (or) Up/Down Keys (or) Ctrl+Middle Mouse Move" + Environment.NewLine +
//000210:                     "Full Screen: Right Double-Click" + Environment.NewLine +
//000211:                     "Restore to Normal Window Size: Right Double-Click (or) Escape Key" + Environment.NewLine +
//000212:                     "Pause: 'b'" + Environment.NewLine +
//000213:                     "Translucency: 't'" + Environment.NewLine +
//000214:                     Environment.NewLine +
//000215:                     "** Boid Controls **" + Environment.NewLine +
//000216:                     "Scatter: Left Double-Click" + Environment.NewLine +
//000217:                     "Change Max Speed: Ctrl + Mousewheel" + Environment.NewLine +
//000218:                     "Randomize: 'r'" + Environment.NewLine +
//000219:                     Environment.NewLine +
//000220:                     "** Parallelism Controls **" + Environment.NewLine +
//000221:                     "Go Parallel: 'p'" + Environment.NewLine;
//000222:                 MessageBox.Show(this, instructions, "Instructions", MessageBoxButton.OK, MessageBoxImage.Information);
//000223:             }
//000224:         }
//000225: 
//000226:         /// <summary>Handle mousedown events.</summary>
//000227:         /// <param name="sender">The sender.</param>
//000228:         /// <param name="e">The eventargs.</param>
//000229:         private void Window_MouseDown(object sender, MouseButtonEventArgs e)
//000230:         {
//000231:             // Log the last mouse position
//000232:             _lastMousePosition = e.GetPosition(this);
//000233:         }
//000234: 
//000235:         /// <summary>Handle mousewheel events.</summary>
//000236:         /// <param name="sender">The sender.</param>
//000237:         /// <param name="e">The eventargs.</param>
//000238:         private void Window_MouseWheel(object sender, MouseWheelEventArgs e)
//000239:         {
//000240:             // If ctrl is pressed, change the max bird speed based on the number of mousewheel turns
//000241:             if ((Keyboard.Modifiers & ModifierKeys.Control) != 0)
//000242:             {
//000243:                 const int MIN_SPEED = 2, MAX_SPEED = 10;
//000244:                 if (e.Delta > 0 && m_speedLimit < MAX_SPEED) m_speedLimit++;
//000245:                 else if (e.Delta < 0 && m_speedLimit > MIN_SPEED) m_speedLimit--;
//000246:             }
//000247:                 // Otherwise, as long as we're not in auto-panning/zooming mode,
//000248:                 // zoom in or out based on the number of mousewheel turns
//000249:             else if (!m_autoPanCamera) Zoom(e.Delta / Mouse.MouseWheelDeltaForOneLine); 
//000250:         }
//000251: 
//000252:         /// <summary>Handle mousedoubleclick events.</summary>
//000253:         /// <param name="sender">The sender.</param>
//000254:         /// <param name="e">The eventargs.</param>
//000255:         private void Window_MouseDoubleClick(object sender, MouseButtonEventArgs e)
//000256:         {
//000257:             // If the right mouse button is double clicked, alternate between maximized and normal view
//000258:             if (e.ChangedButton == MouseButton.Right)
//000259:             {
//000260:                 if (WindowState == WindowState.Maximized)
//000261:                 {
//000262:                     Topmost = false;
//000263:                     WindowStyle = WindowStyle.ThreeDBorderWindow;
//000264:                     WindowState = WindowState.Normal;
//000265:                 }
//000266:                 else
//000267:                 {
//000268:                     Topmost = true;
//000269:                     WindowStyle = WindowStyle.None;
//000270:                     WindowState = WindowState.Maximized;
//000271:                 }
//000272:             }
//000273:                 // If the left mouse button is double clicked, scatter the boids
//000274:             else if (e.ChangedButton == MouseButton.Left)
//000275:             {
//000276:                 Scatter();
//000277:             }
//000278:         }
//000279: 
//000280:         /// <summary>Scatter the boids.</summary>
//000281:         private void Scatter()
//000282:         {
//000283:             // Start scatterring if a scatter isn't already in process
//000284:             if (m_scatterTimer == null)
//000285:             {
//000286:                 // Ka'boom.  Something scares the boids.
//000287:                 SystemSounds.Hand.Play();
//000288: 
//000289:                 // Store original settings
//000290:                 var origHome = m_home;
//000291:                 var origRule1Weight = m_rule1Weight;
//000292:                 var origRule2Weight = m_rule2Weight;
//000293:                 var origRule4Weight = m_rule4Weight;
//000294:                 var origRule5Weight = m_rule5Weight;
//000295: 
//000296:                 // Create new scatter settings
//000297:                 m_home = new Vector3D(0, 0, 0);
//000298:                 m_rule1Weight = origRule1Weight * -5;
//000299:                 m_rule2Weight = origRule2Weight * 2;
//000300:                 m_rule4Weight = 0;
//000301:                 m_rule5Weight = origRule5Weight * -5;
//000302: 
//000303:                 // Start a timer to restore the original settings
//000304:                 m_scatterTimer = new Timer(_ =>
//000305:                 {
//000306:                     // Restore the original settings
//000307:                     m_home = origHome;
//000308:                     m_rule1Weight = origRule1Weight;
//000309:                     m_rule2Weight = origRule2Weight;
//000310:                     m_rule4Weight = origRule4Weight;
//000311:                     m_rule5Weight = origRule5Weight;
//000312: 
//000313:                     // Clean up the timer
//000314:                     m_scatterTimer.Dispose();
//000315:                     m_scatterTimer = null;
//000316:                 }, null, SCATTER_TIME, -1);
//000317:             }
//000318:         }
//000319: 
//000320:         /// <summary>Handle mousemove events.</summary>
//000321:         /// <param name="sender">The sender.</param>
//000322:         /// <param name="e">The eventargs.</param>
//000323:         private void Window_MouseMove(object sender, MouseEventArgs e)
//000324:         {
//000325:             // If we're not auto-panning
//000326:             if (!m_autoPanCamera)
//000327:             {
//000328:                 // Get the new mouse position and compute the difference from the previous
//000329:                 var newPosition = e.GetPosition(this);
//000330:                 var diff = _lastMousePosition - newPosition;
//000331: 
//000332:                 // If the left mouse position was pressed, pan based on the x/y differences
//000333:                 if (e.LeftButton == MouseButtonState.Pressed)
//000334:                 {
//000335:                     camMain.Position = new Point3D(camMain.Position.X + diff.X * .4, camMain.Position.Y - diff.Y * .4, camMain.Position.Z);
//000336:                 }
//000337:                     // If the middle button was pressed, zoom based on the y difference
//000338:                 else if (e.MiddleButton == MouseButtonState.Pressed)
//000339:                 {
//000340:                     Zoom((int)diff.Y);
//000341:                 }
//000342: 
//000343:                 // Store the new position
//000344:                 _lastMousePosition = newPosition;
//000345:             }
//000346:         }
//000347: 
//000348:         /// <summary>Zoom in or out based on the specified degree of zoom.</summary>
//000349:         /// <param name="amountOfChange">Amount to zoom in (positive) or out (negative).</param>
//000350:         private void Zoom(int amountOfChange)
//000351:         {
//000352:             const int ZOOM_FACTOR = 3;
//000353:             camMain.Position = Point3D.Add(camMain.Position, camMain.LookDirection * amountOfChange * ZOOM_FACTOR);
//000354:         }
//000355:         #endregion
//000356: 
//000357:         #region Step and Render
//000358:         /// <summary>Runs the rendering loop.</summary>
//000359:         private void RenderUpdateLoop()
//000360:         {
//000361:             // Loop forever...
//000362:             while (true)
//000363:             {
//000364:                 // Wait to receive a signal that we should render another frame
//000365:                 m_renderSignal.WaitOne();
//000366: 
//000367:                 // Start timing.
//000368:                 m_frameStopwatch.Restart();
//000369: 
//000370:                 // Update the positions and velocities of all of the boids.
//000371:                 StepBoids();
//000372: 
//000373:                 // Update our rendering stats for display to the user
//000374:                 m_totalRenderingMillisecondsSinceLastUserPresentation += m_frameStopwatch.ElapsedMilliseconds;
//000375:                 m_numRendersSinceLastUserPresentation++;
//000376: 
//000377:                 // Render the boids to the UI
//000378:                 Dispatcher.Invoke((Action)RenderBoids, DispatcherPriority.Send, null);
//000379:             }
//000380:         }
//000381: 
//000382:         /// <summary>Step the boids one step, updating their velocities and positions.</summary>
//000383:         private void StepBoids()
//000384:         {
//000385:             // Store the current velocities and positions so that we can operate on an immutable copy
//000386:             foreach (var boid in m_boidModels) boid.StorePositionAndVelocityIntoPrevious();
//000387: 
//000388:             // For each boid, analyze how the various boid rules influence its velocity and position,
//000389:             // then store this new information.  After this step, we'll be able to render the boids.
//000390:             Parallel.ForEach(m_boidModels, m_parallelOptions, boid =>
//000391:             {
//000392:                 var v1_2_3 = PrimaryRules_1_2_3(boid); // weights factored in already in PrimaryRules
//000393:                 var v4 = m_rule4Weight * Rule4_EncourageStayingWithinAviary(boid);
//000394:                 var v5 = m_rule5Weight * Rule5_TendendcyTowardsHome(boid);
//000395: 
//000396:                 boid.Velocity = BoundVelocity(boid.PreviousVelocity + v1_2_3 + v4 + v5, m_speedLimit);
//000397:                 boid.Velocity.Normalize();
//000398: 
//000399:                 var tmpPosition = boid.PreviousPosition + boid.Velocity;
//000400:                 if (tmpPosition.Y >= 0) boid.Position = tmpPosition;
//000401:             });
//000402:         }
//000403: 
//000404:         /// <summary>Render the boids.</summary>
//000405:         private void RenderBoids()
//000406:         {
//000407:             // Make sure the boids are all positioned and pointing correctly
//000408:             foreach (var boid in m_boidModels) boid.TransformByPositionAndVelocity();
//000409: 
//000410:             // Every once in a while, update the user-displayed stats on timings
//000411:             var now = DateTimeOffset.Now;
//000412:             if (now >= m_nextUserPresentation)
//000413:             {
//000414:                 Title = string.Format("Procs: {0}, Time: {1:F2}", m_parallelOptions.MaxDegreeOfParallelism, 
//000415:                     m_numRendersSinceLastUserPresentation > 0 ? 
//000416:                     m_totalRenderingMillisecondsSinceLastUserPresentation / (double)m_numRendersSinceLastUserPresentation : 
//000417:                     0);
//000418:                 m_nextUserPresentation = now.AddSeconds(1);
//000419:                 m_numRendersSinceLastUserPresentation = 0;
//000420:                 m_totalRenderingMillisecondsSinceLastUserPresentation = 0;
//000421:             }
//000422: 
//000423:             // If we're in auto-panning mode, move the camera appropriately
//000424:             if (m_autoPanCamera)
//000425:             {
//000426:                 // Compute the maximum Z value of all of the boids and the center of their mass
//000427:                 double maxZ = double.MinValue;
//000428:                 Vector3D totalPos = new Vector3D();
//000429:                 foreach (var boid in m_boidModels)
//000430:                 {
//000431:                     if (boid.Position.Z > maxZ) maxZ = boid.Position.Z;
//000432:                     totalPos += boid.Position;
//000433:                 }
//000434:                 var newCameraPos = totalPos / m_boidModels.Length;
//000435:                 
//000436:                 // Move the camera to point at the center of the boids, a ways back from the max boid's Z
//000437:                 const int CAMERA_DISTANCE_FROM_MAXZ = 100;
//000438:                 const double CAMERA_SPEED_LIMIT = .01;
//000439:                 var newPos = new Point3D(newCameraPos.X, newCameraPos.Y, maxZ + CAMERA_DISTANCE_FROM_MAXZ);
//000440:                 var cameraVelocity = newPos - camMain.Position;
//000441:                 camMain.Position = camMain.Position + (cameraVelocity * CAMERA_SPEED_LIMIT);
//000442:             }
//000443:         }
//000444:         #endregion
//000445: 
//000446:         #region Boid Rules
//000447:         /// <summary>Run the three primary rules of boidom.</summary>
//000448:         /// <param name="boid">The boid to process.</param>
//000449:         /// <returns>The velocity vector resulting from the three primary rules and their associated weights.</returns>
//000450:         private Vector3D PrimaryRules_1_2_3(Boid boid)
//000451:         {
//000452:             int numNearby = 0;
//000453:             Vector3D summedPosition = new Vector3D();
//000454:             Vector3D summedVelocity = new Vector3D();
//000455:             Vector3D summedSeparation = new Vector3D();
//000456: 
//000457:             // For rule #1, we want the boid to fly towards the center of all of those in its neighborhood.
//000458:             // We find all of those boids, average their positions, and create a velocity vector to move the
//000459:             // boid a bit of the way there.
//000460: 
//000461:             // For rule #2, we want the boid to move away from each other boid it's a bit too close to.
//000462:             // Find all of those boids in its immediate vicinity, and push it away.
//000463: 
//000464:             // For rule #3, we want the boid to match velocities with those boids in its neighborhood.
//000465:             // Sum their velocities, find the average, and move this boid's velocity a bit in that direction.
//000466: 
//000467:             foreach (var other in m_boidModels)
//000468:             {
//000469:                 if (other != boid && 
//000470:                     (other.PreviousPosition - boid.PreviousPosition).Length <= NEIGHBORHOOD_SIZE &&
//000471:                     boid.ComputeAngle(other) <= 135)
//000472:                 {
//000473:                     summedPosition += other.PreviousPosition;
//000474:                     summedVelocity += other.PreviousVelocity;
//000475:                     numNearby++;
//000476: 
//000477:                     if ((other.PreviousPosition - boid.PreviousPosition).Length < MIN_DISTANCE_FROM_NEIGHBOR)
//000478:                     {
//000479:                         summedSeparation -= (other.PreviousPosition - boid.PreviousPosition);
//000480:                     }
//000481:                 }
//000482:             }
//000483: 
//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
//000485:             var rule2_separateFromNearby = summedSeparation;
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
//000487: 
//000488:             return
//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
//000499:             var v = new Vector3D();
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_010f:  ldloc.3
    IL_0110:  ldc.i4.1
    IL_0111:  add
    IL_0112:  stloc.3
//000137:             foreach (var boid in m_boidModels)
    IL_0113:  ldloc.3
    IL_0114:  ldloc.2
    IL_0115:  ldlen
    IL_0116:  conv.i4
    IL_0117:  clt
    IL_0119:  stloc.1
//000138:             {
//000139:                 boid.Position = new Vector3D(
//000140:                            rand.Next((int)m_aviary.X, (int)(m_aviary.X + m_aviary.SizeX)),
//000141:                            rand.Next((int)m_aviary.Y, (int)(m_aviary.Y + m_aviary.SizeY)),
//000142:                            rand.Next((int)m_aviary.Z, (int)(m_aviary.Z + m_aviary.SizeZ)));
//000143:                 boid.Velocity = new Vector3D(
//000144:                            rand.NextDouble() * 2 - 1,
//000145:                            rand.NextDouble() * 2 - 1,
//000146:                            rand.NextDouble() * 2 - 1);
//000147:             }
//000148:         }
//000149:         #endregion
//000150: 
//000151:         #region Window Interaction Controls
//000152:         /// <summary>Handle keydown events.</summary>
//000153:         /// <param name="sender">The sender.</param>
//000154:         /// <param name="e">The eventargs.</param>
//000155:         private void Window_KeyDown(object sender, KeyEventArgs e)
//000156:         {
//000157:             // If escape is pressed, normalize the window size
//000158:             if (e.Key == Key.Escape)
//000159:             {
//000160:                 Topmost = false;
//000161:                 WindowStyle = WindowStyle.ThreeDBorderWindow;
//000162:                 WindowState = WindowState.Normal;
//000163:             }
//000164: 
//000165:                 // If 'P' is pressed, switch back and forth between serial and parallel
//000166:             else if (e.Key == Key.P)
//000167:             {
//000168:                 int procCount = Environment.ProcessorCount;
//000169:                 m_parallelOptions.MaxDegreeOfParallelism = m_parallelOptions.MaxDegreeOfParallelism == 1 ? procCount : 1;
//000170:             }
//000171: 
//000172:                 // If 'b' is pressed, break/pause the scene until 'b' is pressed again
//000173:             else if (e.Key == Key.B)
//000174:             {
//000175:                 m_renderTimer.Enabled = !m_renderTimer.Enabled;
//000176:             }
//000177: 
//000178:                 // If 't' is pressed, toggle translucency to enable following just one boid
//000179:             else if (e.Key == Key.T)
//000180:             {
//000181:                 for (int i = 1; i < m_boidModels.Length; i++) m_boidModels[i].ToggleTranslucency();
//000182:             }
//000183: 
//000184:                 // If 'a' is pressed, turn auto-panning/zoom of the camera on/off
//000185:             else if (e.Key == Key.A)
//000186:             {
//000187:                 m_autoPanCamera = !m_autoPanCamera;
//000188:             }
//000189: 
//000190:                 // If up or down is pressed and we're in auto-pan mode, 
//000191:             else if ((e.Key == Key.Up || e.Key == Key.Down) && !m_autoPanCamera)
//000192:             {
//000193:                 Zoom(e.Key == Key.Up ? 1 : -1);
//000194:             }
//000195: 
//000196:                 // If 'r' is pressed, reset all of the boids to random positions and velocities
//000197:             else if (e.Key == Key.R)
//000198:             {
//000199:                 RandomizeBoidPositionsAndVelocities();
//000200:             }
//000201: 
//000202:                 // If 'h', display usage instructions to the user
//000203:             else if (e.Key == Key.H)
//000204:             {
//000205:                 string instructions =
//000206:                     "** Window Controls **" + Environment.NewLine +
//000207:                     "Auto-Camera Positioning: 'a'" + Environment.NewLine +
//000208:                     "Pan: Click Left And Drag" + Environment.NewLine +
//000209:                     "Zoom In / Out: Mousewheel (or) Up/Down Keys (or) Ctrl+Middle Mouse Move" + Environment.NewLine +
//000210:                     "Full Screen: Right Double-Click" + Environment.NewLine +
//000211:                     "Restore to Normal Window Size: Right Double-Click (or) Escape Key" + Environment.NewLine +
//000212:                     "Pause: 'b'" + Environment.NewLine +
//000213:                     "Translucency: 't'" + Environment.NewLine +
//000214:                     Environment.NewLine +
//000215:                     "** Boid Controls **" + Environment.NewLine +
//000216:                     "Scatter: Left Double-Click" + Environment.NewLine +
//000217:                     "Change Max Speed: Ctrl + Mousewheel" + Environment.NewLine +
//000218:                     "Randomize: 'r'" + Environment.NewLine +
//000219:                     Environment.NewLine +
//000220:                     "** Parallelism Controls **" + Environment.NewLine +
//000221:                     "Go Parallel: 'p'" + Environment.NewLine;
//000222:                 MessageBox.Show(this, instructions, "Instructions", MessageBoxButton.OK, MessageBoxImage.Information);
//000223:             }
//000224:         }
//000225: 
//000226:         /// <summary>Handle mousedown events.</summary>
//000227:         /// <param name="sender">The sender.</param>
//000228:         /// <param name="e">The eventargs.</param>
//000229:         private void Window_MouseDown(object sender, MouseButtonEventArgs e)
//000230:         {
//000231:             // Log the last mouse position
//000232:             _lastMousePosition = e.GetPosition(this);
//000233:         }
//000234: 
//000235:         /// <summary>Handle mousewheel events.</summary>
//000236:         /// <param name="sender">The sender.</param>
//000237:         /// <param name="e">The eventargs.</param>
//000238:         private void Window_MouseWheel(object sender, MouseWheelEventArgs e)
//000239:         {
//000240:             // If ctrl is pressed, change the max bird speed based on the number of mousewheel turns
//000241:             if ((Keyboard.Modifiers & ModifierKeys.Control) != 0)
//000242:             {
//000243:                 const int MIN_SPEED = 2, MAX_SPEED = 10;
//000244:                 if (e.Delta > 0 && m_speedLimit < MAX_SPEED) m_speedLimit++;
//000245:                 else if (e.Delta < 0 && m_speedLimit > MIN_SPEED) m_speedLimit--;
//000246:             }
//000247:                 // Otherwise, as long as we're not in auto-panning/zooming mode,
//000248:                 // zoom in or out based on the number of mousewheel turns
//000249:             else if (!m_autoPanCamera) Zoom(e.Delta / Mouse.MouseWheelDeltaForOneLine); 
//000250:         }
//000251: 
//000252:         /// <summary>Handle mousedoubleclick events.</summary>
//000253:         /// <param name="sender">The sender.</param>
//000254:         /// <param name="e">The eventargs.</param>
//000255:         private void Window_MouseDoubleClick(object sender, MouseButtonEventArgs e)
//000256:         {
//000257:             // If the right mouse button is double clicked, alternate between maximized and normal view
//000258:             if (e.ChangedButton == MouseButton.Right)
//000259:             {
//000260:                 if (WindowState == WindowState.Maximized)
//000261:                 {
//000262:                     Topmost = false;
//000263:                     WindowStyle = WindowStyle.ThreeDBorderWindow;
//000264:                     WindowState = WindowState.Normal;
//000265:                 }
//000266:                 else
//000267:                 {
//000268:                     Topmost = true;
//000269:                     WindowStyle = WindowStyle.None;
//000270:                     WindowState = WindowState.Maximized;
//000271:                 }
//000272:             }
//000273:                 // If the left mouse button is double clicked, scatter the boids
//000274:             else if (e.ChangedButton == MouseButton.Left)
//000275:             {
//000276:                 Scatter();
//000277:             }
//000278:         }
//000279: 
//000280:         /// <summary>Scatter the boids.</summary>
//000281:         private void Scatter()
//000282:         {
//000283:             // Start scatterring if a scatter isn't already in process
//000284:             if (m_scatterTimer == null)
//000285:             {
//000286:                 // Ka'boom.  Something scares the boids.
//000287:                 SystemSounds.Hand.Play();
//000288: 
//000289:                 // Store original settings
//000290:                 var origHome = m_home;
//000291:                 var origRule1Weight = m_rule1Weight;
//000292:                 var origRule2Weight = m_rule2Weight;
//000293:                 var origRule4Weight = m_rule4Weight;
//000294:                 var origRule5Weight = m_rule5Weight;
//000295: 
//000296:                 // Create new scatter settings
//000297:                 m_home = new Vector3D(0, 0, 0);
//000298:                 m_rule1Weight = origRule1Weight * -5;
//000299:                 m_rule2Weight = origRule2Weight * 2;
//000300:                 m_rule4Weight = 0;
//000301:                 m_rule5Weight = origRule5Weight * -5;
//000302: 
//000303:                 // Start a timer to restore the original settings
//000304:                 m_scatterTimer = new Timer(_ =>
//000305:                 {
//000306:                     // Restore the original settings
//000307:                     m_home = origHome;
//000308:                     m_rule1Weight = origRule1Weight;
//000309:                     m_rule2Weight = origRule2Weight;
//000310:                     m_rule4Weight = origRule4Weight;
//000311:                     m_rule5Weight = origRule5Weight;
//000312: 
//000313:                     // Clean up the timer
//000314:                     m_scatterTimer.Dispose();
//000315:                     m_scatterTimer = null;
//000316:                 }, null, SCATTER_TIME, -1);
//000317:             }
//000318:         }
//000319: 
//000320:         /// <summary>Handle mousemove events.</summary>
//000321:         /// <param name="sender">The sender.</param>
//000322:         /// <param name="e">The eventargs.</param>
//000323:         private void Window_MouseMove(object sender, MouseEventArgs e)
//000324:         {
//000325:             // If we're not auto-panning
//000326:             if (!m_autoPanCamera)
//000327:             {
//000328:                 // Get the new mouse position and compute the difference from the previous
//000329:                 var newPosition = e.GetPosition(this);
//000330:                 var diff = _lastMousePosition - newPosition;
//000331: 
//000332:                 // If the left mouse position was pressed, pan based on the x/y differences
//000333:                 if (e.LeftButton == MouseButtonState.Pressed)
//000334:                 {
//000335:                     camMain.Position = new Point3D(camMain.Position.X + diff.X * .4, camMain.Position.Y - diff.Y * .4, camMain.Position.Z);
//000336:                 }
//000337:                     // If the middle button was pressed, zoom based on the y difference
//000338:                 else if (e.MiddleButton == MouseButtonState.Pressed)
//000339:                 {
//000340:                     Zoom((int)diff.Y);
//000341:                 }
//000342: 
//000343:                 // Store the new position
//000344:                 _lastMousePosition = newPosition;
//000345:             }
//000346:         }
//000347: 
//000348:         /// <summary>Zoom in or out based on the specified degree of zoom.</summary>
//000349:         /// <param name="amountOfChange">Amount to zoom in (positive) or out (negative).</param>
//000350:         private void Zoom(int amountOfChange)
//000351:         {
//000352:             const int ZOOM_FACTOR = 3;
//000353:             camMain.Position = Point3D.Add(camMain.Position, camMain.LookDirection * amountOfChange * ZOOM_FACTOR);
//000354:         }
//000355:         #endregion
//000356: 
//000357:         #region Step and Render
//000358:         /// <summary>Runs the rendering loop.</summary>
//000359:         private void RenderUpdateLoop()
//000360:         {
//000361:             // Loop forever...
//000362:             while (true)
//000363:             {
//000364:                 // Wait to receive a signal that we should render another frame
//000365:                 m_renderSignal.WaitOne();
//000366: 
//000367:                 // Start timing.
//000368:                 m_frameStopwatch.Restart();
//000369: 
//000370:                 // Update the positions and velocities of all of the boids.
//000371:                 StepBoids();
//000372: 
//000373:                 // Update our rendering stats for display to the user
//000374:                 m_totalRenderingMillisecondsSinceLastUserPresentation += m_frameStopwatch.ElapsedMilliseconds;
//000375:                 m_numRendersSinceLastUserPresentation++;
//000376: 
//000377:                 // Render the boids to the UI
//000378:                 Dispatcher.Invoke((Action)RenderBoids, DispatcherPriority.Send, null);
//000379:             }
//000380:         }
//000381: 
//000382:         /// <summary>Step the boids one step, updating their velocities and positions.</summary>
//000383:         private void StepBoids()
//000384:         {
//000385:             // Store the current velocities and positions so that we can operate on an immutable copy
//000386:             foreach (var boid in m_boidModels) boid.StorePositionAndVelocityIntoPrevious();
//000387: 
//000388:             // For each boid, analyze how the various boid rules influence its velocity and position,
//000389:             // then store this new information.  After this step, we'll be able to render the boids.
//000390:             Parallel.ForEach(m_boidModels, m_parallelOptions, boid =>
//000391:             {
//000392:                 var v1_2_3 = PrimaryRules_1_2_3(boid); // weights factored in already in PrimaryRules
//000393:                 var v4 = m_rule4Weight * Rule4_EncourageStayingWithinAviary(boid);
//000394:                 var v5 = m_rule5Weight * Rule5_TendendcyTowardsHome(boid);
//000395: 
//000396:                 boid.Velocity = BoundVelocity(boid.PreviousVelocity + v1_2_3 + v4 + v5, m_speedLimit);
//000397:                 boid.Velocity.Normalize();
//000398: 
//000399:                 var tmpPosition = boid.PreviousPosition + boid.Velocity;
//000400:                 if (tmpPosition.Y >= 0) boid.Position = tmpPosition;
//000401:             });
//000402:         }
//000403: 
//000404:         /// <summary>Render the boids.</summary>
//000405:         private void RenderBoids()
//000406:         {
//000407:             // Make sure the boids are all positioned and pointing correctly
//000408:             foreach (var boid in m_boidModels) boid.TransformByPositionAndVelocity();
//000409: 
//000410:             // Every once in a while, update the user-displayed stats on timings
//000411:             var now = DateTimeOffset.Now;
//000412:             if (now >= m_nextUserPresentation)
//000413:             {
//000414:                 Title = string.Format("Procs: {0}, Time: {1:F2}", m_parallelOptions.MaxDegreeOfParallelism, 
//000415:                     m_numRendersSinceLastUserPresentation > 0 ? 
//000416:                     m_totalRenderingMillisecondsSinceLastUserPresentation / (double)m_numRendersSinceLastUserPresentation : 
//000417:                     0);
//000418:                 m_nextUserPresentation = now.AddSeconds(1);
//000419:                 m_numRendersSinceLastUserPresentation = 0;
//000420:                 m_totalRenderingMillisecondsSinceLastUserPresentation = 0;
//000421:             }
//000422: 
//000423:             // If we're in auto-panning mode, move the camera appropriately
//000424:             if (m_autoPanCamera)
//000425:             {
//000426:                 // Compute the maximum Z value of all of the boids and the center of their mass
//000427:                 double maxZ = double.MinValue;
//000428:                 Vector3D totalPos = new Vector3D();
//000429:                 foreach (var boid in m_boidModels)
//000430:                 {
//000431:                     if (boid.Position.Z > maxZ) maxZ = boid.Position.Z;
//000432:                     totalPos += boid.Position;
//000433:                 }
//000434:                 var newCameraPos = totalPos / m_boidModels.Length;
//000435:                 
//000436:                 // Move the camera to point at the center of the boids, a ways back from the max boid's Z
//000437:                 const int CAMERA_DISTANCE_FROM_MAXZ = 100;
//000438:                 const double CAMERA_SPEED_LIMIT = .01;
//000439:                 var newPos = new Point3D(newCameraPos.X, newCameraPos.Y, maxZ + CAMERA_DISTANCE_FROM_MAXZ);
//000440:                 var cameraVelocity = newPos - camMain.Position;
//000441:                 camMain.Position = camMain.Position + (cameraVelocity * CAMERA_SPEED_LIMIT);
//000442:             }
//000443:         }
//000444:         #endregion
//000445: 
//000446:         #region Boid Rules
//000447:         /// <summary>Run the three primary rules of boidom.</summary>
//000448:         /// <param name="boid">The boid to process.</param>
//000449:         /// <returns>The velocity vector resulting from the three primary rules and their associated weights.</returns>
//000450:         private Vector3D PrimaryRules_1_2_3(Boid boid)
//000451:         {
//000452:             int numNearby = 0;
//000453:             Vector3D summedPosition = new Vector3D();
//000454:             Vector3D summedVelocity = new Vector3D();
//000455:             Vector3D summedSeparation = new Vector3D();
//000456: 
//000457:             // For rule #1, we want the boid to fly towards the center of all of those in its neighborhood.
//000458:             // We find all of those boids, average their positions, and create a velocity vector to move the
//000459:             // boid a bit of the way there.
//000460: 
//000461:             // For rule #2, we want the boid to move away from each other boid it's a bit too close to.
//000462:             // Find all of those boids in its immediate vicinity, and push it away.
//000463: 
//000464:             // For rule #3, we want the boid to match velocities with those boids in its neighborhood.
//000465:             // Sum their velocities, find the average, and move this boid's velocity a bit in that direction.
//000466: 
//000467:             foreach (var other in m_boidModels)
//000468:             {
//000469:                 if (other != boid && 
//000470:                     (other.PreviousPosition - boid.PreviousPosition).Length <= NEIGHBORHOOD_SIZE &&
//000471:                     boid.ComputeAngle(other) <= 135)
//000472:                 {
//000473:                     summedPosition += other.PreviousPosition;
//000474:                     summedVelocity += other.PreviousVelocity;
//000475:                     numNearby++;
//000476: 
//000477:                     if ((other.PreviousPosition - boid.PreviousPosition).Length < MIN_DISTANCE_FROM_NEIGHBOR)
//000478:                     {
//000479:                         summedSeparation -= (other.PreviousPosition - boid.PreviousPosition);
//000480:                     }
//000481:                 }
//000482:             }
//000483: 
//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
//000485:             var rule2_separateFromNearby = summedSeparation;
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
//000487: 
//000488:             return
//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
//000499:             var v = new Vector3D();
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_011a:  ldloc.1
    IL_011b:  brtrue     IL_0022

//000148:         }
    IL_0120:  ret
  } // end of method MainWindow::RandomizeBoidPositionsAndVelocities

  .method private hidebysig instance void 
          Window_KeyDown(object sender,
                         class [PresentationCore]System.Windows.Input.KeyEventArgs e) cil managed
  {
    // Code size       699 (0x2bb)
    .maxstack  5
    .locals init ([0] int32 procCount,
             [1] int32 i,
             [2] string instructions,
             [3] bool CS$4$0000,
             [4] string[] CS$0$0001)
//000149:         #endregion
//000150: 
//000151:         #region Window Interaction Controls
//000152:         /// <summary>Handle keydown events.</summary>
//000153:         /// <param name="sender">The sender.</param>
//000154:         /// <param name="e">The eventargs.</param>
//000155:         private void Window_KeyDown(object sender, KeyEventArgs e)
//000156:         {
    IL_0000:  nop
//000157:             // If escape is pressed, normalize the window size
//000158:             if (e.Key == Key.Escape)
    IL_0001:  ldarg.2
    IL_0002:  callvirt   instance valuetype [WindowsBase]System.Windows.Input.Key [PresentationCore]System.Windows.Input.KeyEventArgs::get_Key()
    IL_0007:  ldc.i4.s   13
    IL_0009:  ceq
    IL_000b:  ldc.i4.0
    IL_000c:  ceq
    IL_000e:  stloc.3
//000159:             {
//000160:                 Topmost = false;
//000161:                 WindowStyle = WindowStyle.ThreeDBorderWindow;
//000162:                 WindowState = WindowState.Normal;
//000163:             }
//000164: 
//000165:                 // If 'P' is pressed, switch back and forth between serial and parallel
//000166:             else if (e.Key == Key.P)
//000167:             {
//000168:                 int procCount = Environment.ProcessorCount;
//000169:                 m_parallelOptions.MaxDegreeOfParallelism = m_parallelOptions.MaxDegreeOfParallelism == 1 ? procCount : 1;
//000170:             }
//000171: 
//000172:                 // If 'b' is pressed, break/pause the scene until 'b' is pressed again
//000173:             else if (e.Key == Key.B)
//000174:             {
//000175:                 m_renderTimer.Enabled = !m_renderTimer.Enabled;
//000176:             }
//000177: 
//000178:                 // If 't' is pressed, toggle translucency to enable following just one boid
//000179:             else if (e.Key == Key.T)
//000180:             {
//000181:                 for (int i = 1; i < m_boidModels.Length; i++) m_boidModels[i].ToggleTranslucency();
//000182:             }
//000183: 
//000184:                 // If 'a' is pressed, turn auto-panning/zoom of the camera on/off
//000185:             else if (e.Key == Key.A)
//000186:             {
//000187:                 m_autoPanCamera = !m_autoPanCamera;
//000188:             }
//000189: 
//000190:                 // If up or down is pressed and we're in auto-pan mode, 
//000191:             else if ((e.Key == Key.Up || e.Key == Key.Down) && !m_autoPanCamera)
//000192:             {
//000193:                 Zoom(e.Key == Key.Up ? 1 : -1);
//000194:             }
//000195: 
//000196:                 // If 'r' is pressed, reset all of the boids to random positions and velocities
//000197:             else if (e.Key == Key.R)
//000198:             {
//000199:                 RandomizeBoidPositionsAndVelocities();
//000200:             }
//000201: 
//000202:                 // If 'h', display usage instructions to the user
//000203:             else if (e.Key == Key.H)
//000204:             {
//000205:                 string instructions =
//000206:                     "** Window Controls **" + Environment.NewLine +
//000207:                     "Auto-Camera Positioning: 'a'" + Environment.NewLine +
//000208:                     "Pan: Click Left And Drag" + Environment.NewLine +
//000209:                     "Zoom In / Out: Mousewheel (or) Up/Down Keys (or) Ctrl+Middle Mouse Move" + Environment.NewLine +
//000210:                     "Full Screen: Right Double-Click" + Environment.NewLine +
//000211:                     "Restore to Normal Window Size: Right Double-Click (or) Escape Key" + Environment.NewLine +
//000212:                     "Pause: 'b'" + Environment.NewLine +
//000213:                     "Translucency: 't'" + Environment.NewLine +
//000214:                     Environment.NewLine +
//000215:                     "** Boid Controls **" + Environment.NewLine +
//000216:                     "Scatter: Left Double-Click" + Environment.NewLine +
//000217:                     "Change Max Speed: Ctrl + Mousewheel" + Environment.NewLine +
//000218:                     "Randomize: 'r'" + Environment.NewLine +
//000219:                     Environment.NewLine +
//000220:                     "** Parallelism Controls **" + Environment.NewLine +
//000221:                     "Go Parallel: 'p'" + Environment.NewLine;
//000222:                 MessageBox.Show(this, instructions, "Instructions", MessageBoxButton.OK, MessageBoxImage.Information);
//000223:             }
//000224:         }
//000225: 
//000226:         /// <summary>Handle mousedown events.</summary>
//000227:         /// <param name="sender">The sender.</param>
//000228:         /// <param name="e">The eventargs.</param>
//000229:         private void Window_MouseDown(object sender, MouseButtonEventArgs e)
//000230:         {
//000231:             // Log the last mouse position
//000232:             _lastMousePosition = e.GetPosition(this);
//000233:         }
//000234: 
//000235:         /// <summary>Handle mousewheel events.</summary>
//000236:         /// <param name="sender">The sender.</param>
//000237:         /// <param name="e">The eventargs.</param>
//000238:         private void Window_MouseWheel(object sender, MouseWheelEventArgs e)
//000239:         {
//000240:             // If ctrl is pressed, change the max bird speed based on the number of mousewheel turns
//000241:             if ((Keyboard.Modifiers & ModifierKeys.Control) != 0)
//000242:             {
//000243:                 const int MIN_SPEED = 2, MAX_SPEED = 10;
//000244:                 if (e.Delta > 0 && m_speedLimit < MAX_SPEED) m_speedLimit++;
//000245:                 else if (e.Delta < 0 && m_speedLimit > MIN_SPEED) m_speedLimit--;
//000246:             }
//000247:                 // Otherwise, as long as we're not in auto-panning/zooming mode,
//000248:                 // zoom in or out based on the number of mousewheel turns
//000249:             else if (!m_autoPanCamera) Zoom(e.Delta / Mouse.MouseWheelDeltaForOneLine); 
//000250:         }
//000251: 
//000252:         /// <summary>Handle mousedoubleclick events.</summary>
//000253:         /// <param name="sender">The sender.</param>
//000254:         /// <param name="e">The eventargs.</param>
//000255:         private void Window_MouseDoubleClick(object sender, MouseButtonEventArgs e)
//000256:         {
//000257:             // If the right mouse button is double clicked, alternate between maximized and normal view
//000258:             if (e.ChangedButton == MouseButton.Right)
//000259:             {
//000260:                 if (WindowState == WindowState.Maximized)
//000261:                 {
//000262:                     Topmost = false;
//000263:                     WindowStyle = WindowStyle.ThreeDBorderWindow;
//000264:                     WindowState = WindowState.Normal;
//000265:                 }
//000266:                 else
//000267:                 {
//000268:                     Topmost = true;
//000269:                     WindowStyle = WindowStyle.None;
//000270:                     WindowState = WindowState.Maximized;
//000271:                 }
//000272:             }
//000273:                 // If the left mouse button is double clicked, scatter the boids
//000274:             else if (e.ChangedButton == MouseButton.Left)
//000275:             {
//000276:                 Scatter();
//000277:             }
//000278:         }
//000279: 
//000280:         /// <summary>Scatter the boids.</summary>
//000281:         private void Scatter()
//000282:         {
//000283:             // Start scatterring if a scatter isn't already in process
//000284:             if (m_scatterTimer == null)
//000285:             {
//000286:                 // Ka'boom.  Something scares the boids.
//000287:                 SystemSounds.Hand.Play();
//000288: 
//000289:                 // Store original settings
//000290:                 var origHome = m_home;
//000291:                 var origRule1Weight = m_rule1Weight;
//000292:                 var origRule2Weight = m_rule2Weight;
//000293:                 var origRule4Weight = m_rule4Weight;
//000294:                 var origRule5Weight = m_rule5Weight;
//000295: 
//000296:                 // Create new scatter settings
//000297:                 m_home = new Vector3D(0, 0, 0);
//000298:                 m_rule1Weight = origRule1Weight * -5;
//000299:                 m_rule2Weight = origRule2Weight * 2;
//000300:                 m_rule4Weight = 0;
//000301:                 m_rule5Weight = origRule5Weight * -5;
//000302: 
//000303:                 // Start a timer to restore the original settings
//000304:                 m_scatterTimer = new Timer(_ =>
//000305:                 {
//000306:                     // Restore the original settings
//000307:                     m_home = origHome;
//000308:                     m_rule1Weight = origRule1Weight;
//000309:                     m_rule2Weight = origRule2Weight;
//000310:                     m_rule4Weight = origRule4Weight;
//000311:                     m_rule5Weight = origRule5Weight;
//000312: 
//000313:                     // Clean up the timer
//000314:                     m_scatterTimer.Dispose();
//000315:                     m_scatterTimer = null;
//000316:                 }, null, SCATTER_TIME, -1);
//000317:             }
//000318:         }
//000319: 
//000320:         /// <summary>Handle mousemove events.</summary>
//000321:         /// <param name="sender">The sender.</param>
//000322:         /// <param name="e">The eventargs.</param>
//000323:         private void Window_MouseMove(object sender, MouseEventArgs e)
//000324:         {
//000325:             // If we're not auto-panning
//000326:             if (!m_autoPanCamera)
//000327:             {
//000328:                 // Get the new mouse position and compute the difference from the previous
//000329:                 var newPosition = e.GetPosition(this);
//000330:                 var diff = _lastMousePosition - newPosition;
//000331: 
//000332:                 // If the left mouse position was pressed, pan based on the x/y differences
//000333:                 if (e.LeftButton == MouseButtonState.Pressed)
//000334:                 {
//000335:                     camMain.Position = new Point3D(camMain.Position.X + diff.X * .4, camMain.Position.Y - diff.Y * .4, camMain.Position.Z);
//000336:                 }
//000337:                     // If the middle button was pressed, zoom based on the y difference
//000338:                 else if (e.MiddleButton == MouseButtonState.Pressed)
//000339:                 {
//000340:                     Zoom((int)diff.Y);
//000341:                 }
//000342: 
//000343:                 // Store the new position
//000344:                 _lastMousePosition = newPosition;
//000345:             }
//000346:         }
//000347: 
//000348:         /// <summary>Zoom in or out based on the specified degree of zoom.</summary>
//000349:         /// <param name="amountOfChange">Amount to zoom in (positive) or out (negative).</param>
//000350:         private void Zoom(int amountOfChange)
//000351:         {
//000352:             const int ZOOM_FACTOR = 3;
//000353:             camMain.Position = Point3D.Add(camMain.Position, camMain.LookDirection * amountOfChange * ZOOM_FACTOR);
//000354:         }
//000355:         #endregion
//000356: 
//000357:         #region Step and Render
//000358:         /// <summary>Runs the rendering loop.</summary>
//000359:         private void RenderUpdateLoop()
//000360:         {
//000361:             // Loop forever...
//000362:             while (true)
//000363:             {
//000364:                 // Wait to receive a signal that we should render another frame
//000365:                 m_renderSignal.WaitOne();
//000366: 
//000367:                 // Start timing.
//000368:                 m_frameStopwatch.Restart();
//000369: 
//000370:                 // Update the positions and velocities of all of the boids.
//000371:                 StepBoids();
//000372: 
//000373:                 // Update our rendering stats for display to the user
//000374:                 m_totalRenderingMillisecondsSinceLastUserPresentation += m_frameStopwatch.ElapsedMilliseconds;
//000375:                 m_numRendersSinceLastUserPresentation++;
//000376: 
//000377:                 // Render the boids to the UI
//000378:                 Dispatcher.Invoke((Action)RenderBoids, DispatcherPriority.Send, null);
//000379:             }
//000380:         }
//000381: 
//000382:         /// <summary>Step the boids one step, updating their velocities and positions.</summary>
//000383:         private void StepBoids()
//000384:         {
//000385:             // Store the current velocities and positions so that we can operate on an immutable copy
//000386:             foreach (var boid in m_boidModels) boid.StorePositionAndVelocityIntoPrevious();
//000387: 
//000388:             // For each boid, analyze how the various boid rules influence its velocity and position,
//000389:             // then store this new information.  After this step, we'll be able to render the boids.
//000390:             Parallel.ForEach(m_boidModels, m_parallelOptions, boid =>
//000391:             {
//000392:                 var v1_2_3 = PrimaryRules_1_2_3(boid); // weights factored in already in PrimaryRules
//000393:                 var v4 = m_rule4Weight * Rule4_EncourageStayingWithinAviary(boid);
//000394:                 var v5 = m_rule5Weight * Rule5_TendendcyTowardsHome(boid);
//000395: 
//000396:                 boid.Velocity = BoundVelocity(boid.PreviousVelocity + v1_2_3 + v4 + v5, m_speedLimit);
//000397:                 boid.Velocity.Normalize();
//000398: 
//000399:                 var tmpPosition = boid.PreviousPosition + boid.Velocity;
//000400:                 if (tmpPosition.Y >= 0) boid.Position = tmpPosition;
//000401:             });
//000402:         }
//000403: 
//000404:         /// <summary>Render the boids.</summary>
//000405:         private void RenderBoids()
//000406:         {
//000407:             // Make sure the boids are all positioned and pointing correctly
//000408:             foreach (var boid in m_boidModels) boid.TransformByPositionAndVelocity();
//000409: 
//000410:             // Every once in a while, update the user-displayed stats on timings
//000411:             var now = DateTimeOffset.Now;
//000412:             if (now >= m_nextUserPresentation)
//000413:             {
//000414:                 Title = string.Format("Procs: {0}, Time: {1:F2}", m_parallelOptions.MaxDegreeOfParallelism, 
//000415:                     m_numRendersSinceLastUserPresentation > 0 ? 
//000416:                     m_totalRenderingMillisecondsSinceLastUserPresentation / (double)m_numRendersSinceLastUserPresentation : 
//000417:                     0);
//000418:                 m_nextUserPresentation = now.AddSeconds(1);
//000419:                 m_numRendersSinceLastUserPresentation = 0;
//000420:                 m_totalRenderingMillisecondsSinceLastUserPresentation = 0;
//000421:             }
//000422: 
//000423:             // If we're in auto-panning mode, move the camera appropriately
//000424:             if (m_autoPanCamera)
//000425:             {
//000426:                 // Compute the maximum Z value of all of the boids and the center of their mass
//000427:                 double maxZ = double.MinValue;
//000428:                 Vector3D totalPos = new Vector3D();
//000429:                 foreach (var boid in m_boidModels)
//000430:                 {
//000431:                     if (boid.Position.Z > maxZ) maxZ = boid.Position.Z;
//000432:                     totalPos += boid.Position;
//000433:                 }
//000434:                 var newCameraPos = totalPos / m_boidModels.Length;
//000435:                 
//000436:                 // Move the camera to point at the center of the boids, a ways back from the max boid's Z
//000437:                 const int CAMERA_DISTANCE_FROM_MAXZ = 100;
//000438:                 const double CAMERA_SPEED_LIMIT = .01;
//000439:                 var newPos = new Point3D(newCameraPos.X, newCameraPos.Y, maxZ + CAMERA_DISTANCE_FROM_MAXZ);
//000440:                 var cameraVelocity = newPos - camMain.Position;
//000441:                 camMain.Position = camMain.Position + (cameraVelocity * CAMERA_SPEED_LIMIT);
//000442:             }
//000443:         }
//000444:         #endregion
//000445: 
//000446:         #region Boid Rules
//000447:         /// <summary>Run the three primary rules of boidom.</summary>
//000448:         /// <param name="boid">The boid to process.</param>
//000449:         /// <returns>The velocity vector resulting from the three primary rules and their associated weights.</returns>
//000450:         private Vector3D PrimaryRules_1_2_3(Boid boid)
//000451:         {
//000452:             int numNearby = 0;
//000453:             Vector3D summedPosition = new Vector3D();
//000454:             Vector3D summedVelocity = new Vector3D();
//000455:             Vector3D summedSeparation = new Vector3D();
//000456: 
//000457:             // For rule #1, we want the boid to fly towards the center of all of those in its neighborhood.
//000458:             // We find all of those boids, average their positions, and create a velocity vector to move the
//000459:             // boid a bit of the way there.
//000460: 
//000461:             // For rule #2, we want the boid to move away from each other boid it's a bit too close to.
//000462:             // Find all of those boids in its immediate vicinity, and push it away.
//000463: 
//000464:             // For rule #3, we want the boid to match velocities with those boids in its neighborhood.
//000465:             // Sum their velocities, find the average, and move this boid's velocity a bit in that direction.
//000466: 
//000467:             foreach (var other in m_boidModels)
//000468:             {
//000469:                 if (other != boid && 
//000470:                     (other.PreviousPosition - boid.PreviousPosition).Length <= NEIGHBORHOOD_SIZE &&
//000471:                     boid.ComputeAngle(other) <= 135)
//000472:                 {
//000473:                     summedPosition += other.PreviousPosition;
//000474:                     summedVelocity += other.PreviousVelocity;
//000475:                     numNearby++;
//000476: 
//000477:                     if ((other.PreviousPosition - boid.PreviousPosition).Length < MIN_DISTANCE_FROM_NEIGHBOR)
//000478:                     {
//000479:                         summedSeparation -= (other.PreviousPosition - boid.PreviousPosition);
//000480:                     }
//000481:                 }
//000482:             }
//000483: 
//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
//000485:             var rule2_separateFromNearby = summedSeparation;
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
//000487: 
//000488:             return
//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
//000499:             var v = new Vector3D();
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_000f:  ldloc.3
    IL_0010:  brtrue.s   IL_0031

//000159:             {
    IL_0012:  nop
//000160:                 Topmost = false;
    IL_0013:  ldarg.0
    IL_0014:  ldc.i4.0
    IL_0015:  call       instance void [PresentationFramework]System.Windows.Window::set_Topmost(bool)
    IL_001a:  nop
//000161:                 WindowStyle = WindowStyle.ThreeDBorderWindow;
    IL_001b:  ldarg.0
    IL_001c:  ldc.i4.2
    IL_001d:  call       instance void [PresentationFramework]System.Windows.Window::set_WindowStyle(valuetype [PresentationFramework]System.Windows.WindowStyle)
    IL_0022:  nop
//000162:                 WindowState = WindowState.Normal;
    IL_0023:  ldarg.0
    IL_0024:  ldc.i4.0
    IL_0025:  call       instance void [PresentationFramework]System.Windows.Window::set_WindowState(valuetype [PresentationFramework]System.Windows.WindowState)
    IL_002a:  nop
//000163:             }
    IL_002b:  nop
//000164: 
//000165:                 // If 'P' is pressed, switch back and forth between serial and parallel
//000166:             else if (e.Key == Key.P)
//000167:             {
//000168:                 int procCount = Environment.ProcessorCount;
//000169:                 m_parallelOptions.MaxDegreeOfParallelism = m_parallelOptions.MaxDegreeOfParallelism == 1 ? procCount : 1;
//000170:             }
//000171: 
//000172:                 // If 'b' is pressed, break/pause the scene until 'b' is pressed again
//000173:             else if (e.Key == Key.B)
//000174:             {
//000175:                 m_renderTimer.Enabled = !m_renderTimer.Enabled;
//000176:             }
//000177: 
//000178:                 // If 't' is pressed, toggle translucency to enable following just one boid
//000179:             else if (e.Key == Key.T)
//000180:             {
//000181:                 for (int i = 1; i < m_boidModels.Length; i++) m_boidModels[i].ToggleTranslucency();
//000182:             }
//000183: 
//000184:                 // If 'a' is pressed, turn auto-panning/zoom of the camera on/off
//000185:             else if (e.Key == Key.A)
//000186:             {
//000187:                 m_autoPanCamera = !m_autoPanCamera;
//000188:             }
//000189: 
//000190:                 // If up or down is pressed and we're in auto-pan mode, 
//000191:             else if ((e.Key == Key.Up || e.Key == Key.Down) && !m_autoPanCamera)
//000192:             {
//000193:                 Zoom(e.Key == Key.Up ? 1 : -1);
//000194:             }
//000195: 
//000196:                 // If 'r' is pressed, reset all of the boids to random positions and velocities
//000197:             else if (e.Key == Key.R)
//000198:             {
//000199:                 RandomizeBoidPositionsAndVelocities();
//000200:             }
//000201: 
//000202:                 // If 'h', display usage instructions to the user
//000203:             else if (e.Key == Key.H)
//000204:             {
//000205:                 string instructions =
//000206:                     "** Window Controls **" + Environment.NewLine +
//000207:                     "Auto-Camera Positioning: 'a'" + Environment.NewLine +
//000208:                     "Pan: Click Left And Drag" + Environment.NewLine +
//000209:                     "Zoom In / Out: Mousewheel (or) Up/Down Keys (or) Ctrl+Middle Mouse Move" + Environment.NewLine +
//000210:                     "Full Screen: Right Double-Click" + Environment.NewLine +
//000211:                     "Restore to Normal Window Size: Right Double-Click (or) Escape Key" + Environment.NewLine +
//000212:                     "Pause: 'b'" + Environment.NewLine +
//000213:                     "Translucency: 't'" + Environment.NewLine +
//000214:                     Environment.NewLine +
//000215:                     "** Boid Controls **" + Environment.NewLine +
//000216:                     "Scatter: Left Double-Click" + Environment.NewLine +
//000217:                     "Change Max Speed: Ctrl + Mousewheel" + Environment.NewLine +
//000218:                     "Randomize: 'r'" + Environment.NewLine +
//000219:                     Environment.NewLine +
//000220:                     "** Parallelism Controls **" + Environment.NewLine +
//000221:                     "Go Parallel: 'p'" + Environment.NewLine;
//000222:                 MessageBox.Show(this, instructions, "Instructions", MessageBoxButton.OK, MessageBoxImage.Information);
//000223:             }
//000224:         }
//000225: 
//000226:         /// <summary>Handle mousedown events.</summary>
//000227:         /// <param name="sender">The sender.</param>
//000228:         /// <param name="e">The eventargs.</param>
//000229:         private void Window_MouseDown(object sender, MouseButtonEventArgs e)
//000230:         {
//000231:             // Log the last mouse position
//000232:             _lastMousePosition = e.GetPosition(this);
//000233:         }
//000234: 
//000235:         /// <summary>Handle mousewheel events.</summary>
//000236:         /// <param name="sender">The sender.</param>
//000237:         /// <param name="e">The eventargs.</param>
//000238:         private void Window_MouseWheel(object sender, MouseWheelEventArgs e)
//000239:         {
//000240:             // If ctrl is pressed, change the max bird speed based on the number of mousewheel turns
//000241:             if ((Keyboard.Modifiers & ModifierKeys.Control) != 0)
//000242:             {
//000243:                 const int MIN_SPEED = 2, MAX_SPEED = 10;
//000244:                 if (e.Delta > 0 && m_speedLimit < MAX_SPEED) m_speedLimit++;
//000245:                 else if (e.Delta < 0 && m_speedLimit > MIN_SPEED) m_speedLimit--;
//000246:             }
//000247:                 // Otherwise, as long as we're not in auto-panning/zooming mode,
//000248:                 // zoom in or out based on the number of mousewheel turns
//000249:             else if (!m_autoPanCamera) Zoom(e.Delta / Mouse.MouseWheelDeltaForOneLine); 
//000250:         }
//000251: 
//000252:         /// <summary>Handle mousedoubleclick events.</summary>
//000253:         /// <param name="sender">The sender.</param>
//000254:         /// <param name="e">The eventargs.</param>
//000255:         private void Window_MouseDoubleClick(object sender, MouseButtonEventArgs e)
//000256:         {
//000257:             // If the right mouse button is double clicked, alternate between maximized and normal view
//000258:             if (e.ChangedButton == MouseButton.Right)
//000259:             {
//000260:                 if (WindowState == WindowState.Maximized)
//000261:                 {
//000262:                     Topmost = false;
//000263:                     WindowStyle = WindowStyle.ThreeDBorderWindow;
//000264:                     WindowState = WindowState.Normal;
//000265:                 }
//000266:                 else
//000267:                 {
//000268:                     Topmost = true;
//000269:                     WindowStyle = WindowStyle.None;
//000270:                     WindowState = WindowState.Maximized;
//000271:                 }
//000272:             }
//000273:                 // If the left mouse button is double clicked, scatter the boids
//000274:             else if (e.ChangedButton == MouseButton.Left)
//000275:             {
//000276:                 Scatter();
//000277:             }
//000278:         }
//000279: 
//000280:         /// <summary>Scatter the boids.</summary>
//000281:         private void Scatter()
//000282:         {
//000283:             // Start scatterring if a scatter isn't already in process
//000284:             if (m_scatterTimer == null)
//000285:             {
//000286:                 // Ka'boom.  Something scares the boids.
//000287:                 SystemSounds.Hand.Play();
//000288: 
//000289:                 // Store original settings
//000290:                 var origHome = m_home;
//000291:                 var origRule1Weight = m_rule1Weight;
//000292:                 var origRule2Weight = m_rule2Weight;
//000293:                 var origRule4Weight = m_rule4Weight;
//000294:                 var origRule5Weight = m_rule5Weight;
//000295: 
//000296:                 // Create new scatter settings
//000297:                 m_home = new Vector3D(0, 0, 0);
//000298:                 m_rule1Weight = origRule1Weight * -5;
//000299:                 m_rule2Weight = origRule2Weight * 2;
//000300:                 m_rule4Weight = 0;
//000301:                 m_rule5Weight = origRule5Weight * -5;
//000302: 
//000303:                 // Start a timer to restore the original settings
//000304:                 m_scatterTimer = new Timer(_ =>
//000305:                 {
//000306:                     // Restore the original settings
//000307:                     m_home = origHome;
//000308:                     m_rule1Weight = origRule1Weight;
//000309:                     m_rule2Weight = origRule2Weight;
//000310:                     m_rule4Weight = origRule4Weight;
//000311:                     m_rule5Weight = origRule5Weight;
//000312: 
//000313:                     // Clean up the timer
//000314:                     m_scatterTimer.Dispose();
//000315:                     m_scatterTimer = null;
//000316:                 }, null, SCATTER_TIME, -1);
//000317:             }
//000318:         }
//000319: 
//000320:         /// <summary>Handle mousemove events.</summary>
//000321:         /// <param name="sender">The sender.</param>
//000322:         /// <param name="e">The eventargs.</param>
//000323:         private void Window_MouseMove(object sender, MouseEventArgs e)
//000324:         {
//000325:             // If we're not auto-panning
//000326:             if (!m_autoPanCamera)
//000327:             {
//000328:                 // Get the new mouse position and compute the difference from the previous
//000329:                 var newPosition = e.GetPosition(this);
//000330:                 var diff = _lastMousePosition - newPosition;
//000331: 
//000332:                 // If the left mouse position was pressed, pan based on the x/y differences
//000333:                 if (e.LeftButton == MouseButtonState.Pressed)
//000334:                 {
//000335:                     camMain.Position = new Point3D(camMain.Position.X + diff.X * .4, camMain.Position.Y - diff.Y * .4, camMain.Position.Z);
//000336:                 }
//000337:                     // If the middle button was pressed, zoom based on the y difference
//000338:                 else if (e.MiddleButton == MouseButtonState.Pressed)
//000339:                 {
//000340:                     Zoom((int)diff.Y);
//000341:                 }
//000342: 
//000343:                 // Store the new position
//000344:                 _lastMousePosition = newPosition;
//000345:             }
//000346:         }
//000347: 
//000348:         /// <summary>Zoom in or out based on the specified degree of zoom.</summary>
//000349:         /// <param name="amountOfChange">Amount to zoom in (positive) or out (negative).</param>
//000350:         private void Zoom(int amountOfChange)
//000351:         {
//000352:             const int ZOOM_FACTOR = 3;
//000353:             camMain.Position = Point3D.Add(camMain.Position, camMain.LookDirection * amountOfChange * ZOOM_FACTOR);
//000354:         }
//000355:         #endregion
//000356: 
//000357:         #region Step and Render
//000358:         /// <summary>Runs the rendering loop.</summary>
//000359:         private void RenderUpdateLoop()
//000360:         {
//000361:             // Loop forever...
//000362:             while (true)
//000363:             {
//000364:                 // Wait to receive a signal that we should render another frame
//000365:                 m_renderSignal.WaitOne();
//000366: 
//000367:                 // Start timing.
//000368:                 m_frameStopwatch.Restart();
//000369: 
//000370:                 // Update the positions and velocities of all of the boids.
//000371:                 StepBoids();
//000372: 
//000373:                 // Update our rendering stats for display to the user
//000374:                 m_totalRenderingMillisecondsSinceLastUserPresentation += m_frameStopwatch.ElapsedMilliseconds;
//000375:                 m_numRendersSinceLastUserPresentation++;
//000376: 
//000377:                 // Render the boids to the UI
//000378:                 Dispatcher.Invoke((Action)RenderBoids, DispatcherPriority.Send, null);
//000379:             }
//000380:         }
//000381: 
//000382:         /// <summary>Step the boids one step, updating their velocities and positions.</summary>
//000383:         private void StepBoids()
//000384:         {
//000385:             // Store the current velocities and positions so that we can operate on an immutable copy
//000386:             foreach (var boid in m_boidModels) boid.StorePositionAndVelocityIntoPrevious();
//000387: 
//000388:             // For each boid, analyze how the various boid rules influence its velocity and position,
//000389:             // then store this new information.  After this step, we'll be able to render the boids.
//000390:             Parallel.ForEach(m_boidModels, m_parallelOptions, boid =>
//000391:             {
//000392:                 var v1_2_3 = PrimaryRules_1_2_3(boid); // weights factored in already in PrimaryRules
//000393:                 var v4 = m_rule4Weight * Rule4_EncourageStayingWithinAviary(boid);
//000394:                 var v5 = m_rule5Weight * Rule5_TendendcyTowardsHome(boid);
//000395: 
//000396:                 boid.Velocity = BoundVelocity(boid.PreviousVelocity + v1_2_3 + v4 + v5, m_speedLimit);
//000397:                 boid.Velocity.Normalize();
//000398: 
//000399:                 var tmpPosition = boid.PreviousPosition + boid.Velocity;
//000400:                 if (tmpPosition.Y >= 0) boid.Position = tmpPosition;
//000401:             });
//000402:         }
//000403: 
//000404:         /// <summary>Render the boids.</summary>
//000405:         private void RenderBoids()
//000406:         {
//000407:             // Make sure the boids are all positioned and pointing correctly
//000408:             foreach (var boid in m_boidModels) boid.TransformByPositionAndVelocity();
//000409: 
//000410:             // Every once in a while, update the user-displayed stats on timings
//000411:             var now = DateTimeOffset.Now;
//000412:             if (now >= m_nextUserPresentation)
//000413:             {
//000414:                 Title = string.Format("Procs: {0}, Time: {1:F2}", m_parallelOptions.MaxDegreeOfParallelism, 
//000415:                     m_numRendersSinceLastUserPresentation > 0 ? 
//000416:                     m_totalRenderingMillisecondsSinceLastUserPresentation / (double)m_numRendersSinceLastUserPresentation : 
//000417:                     0);
//000418:                 m_nextUserPresentation = now.AddSeconds(1);
//000419:                 m_numRendersSinceLastUserPresentation = 0;
//000420:                 m_totalRenderingMillisecondsSinceLastUserPresentation = 0;
//000421:             }
//000422: 
//000423:             // If we're in auto-panning mode, move the camera appropriately
//000424:             if (m_autoPanCamera)
//000425:             {
//000426:                 // Compute the maximum Z value of all of the boids and the center of their mass
//000427:                 double maxZ = double.MinValue;
//000428:                 Vector3D totalPos = new Vector3D();
//000429:                 foreach (var boid in m_boidModels)
//000430:                 {
//000431:                     if (boid.Position.Z > maxZ) maxZ = boid.Position.Z;
//000432:                     totalPos += boid.Position;
//000433:                 }
//000434:                 var newCameraPos = totalPos / m_boidModels.Length;
//000435:                 
//000436:                 // Move the camera to point at the center of the boids, a ways back from the max boid's Z
//000437:                 const int CAMERA_DISTANCE_FROM_MAXZ = 100;
//000438:                 const double CAMERA_SPEED_LIMIT = .01;
//000439:                 var newPos = new Point3D(newCameraPos.X, newCameraPos.Y, maxZ + CAMERA_DISTANCE_FROM_MAXZ);
//000440:                 var cameraVelocity = newPos - camMain.Position;
//000441:                 camMain.Position = camMain.Position + (cameraVelocity * CAMERA_SPEED_LIMIT);
//000442:             }
//000443:         }
//000444:         #endregion
//000445: 
//000446:         #region Boid Rules
//000447:         /// <summary>Run the three primary rules of boidom.</summary>
//000448:         /// <param name="boid">The boid to process.</param>
//000449:         /// <returns>The velocity vector resulting from the three primary rules and their associated weights.</returns>
//000450:         private Vector3D PrimaryRules_1_2_3(Boid boid)
//000451:         {
//000452:             int numNearby = 0;
//000453:             Vector3D summedPosition = new Vector3D();
//000454:             Vector3D summedVelocity = new Vector3D();
//000455:             Vector3D summedSeparation = new Vector3D();
//000456: 
//000457:             // For rule #1, we want the boid to fly towards the center of all of those in its neighborhood.
//000458:             // We find all of those boids, average their positions, and create a velocity vector to move the
//000459:             // boid a bit of the way there.
//000460: 
//000461:             // For rule #2, we want the boid to move away from each other boid it's a bit too close to.
//000462:             // Find all of those boids in its immediate vicinity, and push it away.
//000463: 
//000464:             // For rule #3, we want the boid to match velocities with those boids in its neighborhood.
//000465:             // Sum their velocities, find the average, and move this boid's velocity a bit in that direction.
//000466: 
//000467:             foreach (var other in m_boidModels)
//000468:             {
//000469:                 if (other != boid && 
//000470:                     (other.PreviousPosition - boid.PreviousPosition).Length <= NEIGHBORHOOD_SIZE &&
//000471:                     boid.ComputeAngle(other) <= 135)
//000472:                 {
//000473:                     summedPosition += other.PreviousPosition;
//000474:                     summedVelocity += other.PreviousVelocity;
//000475:                     numNearby++;
//000476: 
//000477:                     if ((other.PreviousPosition - boid.PreviousPosition).Length < MIN_DISTANCE_FROM_NEIGHBOR)
//000478:                     {
//000479:                         summedSeparation -= (other.PreviousPosition - boid.PreviousPosition);
//000480:                     }
//000481:                 }
//000482:             }
//000483: 
//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
//000485:             var rule2_separateFromNearby = summedSeparation;
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
//000487: 
//000488:             return
//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
//000499:             var v = new Vector3D();
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_002c:  br         IL_02ba

//000166:             else if (e.Key == Key.P)
    IL_0031:  ldarg.2
    IL_0032:  callvirt   instance valuetype [WindowsBase]System.Windows.Input.Key [PresentationCore]System.Windows.Input.KeyEventArgs::get_Key()
    IL_0037:  ldc.i4.s   59
    IL_0039:  ceq
    IL_003b:  ldc.i4.0
    IL_003c:  ceq
    IL_003e:  stloc.3
//000167:             {
//000168:                 int procCount = Environment.ProcessorCount;
//000169:                 m_parallelOptions.MaxDegreeOfParallelism = m_parallelOptions.MaxDegreeOfParallelism == 1 ? procCount : 1;
//000170:             }
//000171: 
//000172:                 // If 'b' is pressed, break/pause the scene until 'b' is pressed again
//000173:             else if (e.Key == Key.B)
//000174:             {
//000175:                 m_renderTimer.Enabled = !m_renderTimer.Enabled;
//000176:             }
//000177: 
//000178:                 // If 't' is pressed, toggle translucency to enable following just one boid
//000179:             else if (e.Key == Key.T)
//000180:             {
//000181:                 for (int i = 1; i < m_boidModels.Length; i++) m_boidModels[i].ToggleTranslucency();
//000182:             }
//000183: 
//000184:                 // If 'a' is pressed, turn auto-panning/zoom of the camera on/off
//000185:             else if (e.Key == Key.A)
//000186:             {
//000187:                 m_autoPanCamera = !m_autoPanCamera;
//000188:             }
//000189: 
//000190:                 // If up or down is pressed and we're in auto-pan mode, 
//000191:             else if ((e.Key == Key.Up || e.Key == Key.Down) && !m_autoPanCamera)
//000192:             {
//000193:                 Zoom(e.Key == Key.Up ? 1 : -1);
//000194:             }
//000195: 
//000196:                 // If 'r' is pressed, reset all of the boids to random positions and velocities
//000197:             else if (e.Key == Key.R)
//000198:             {
//000199:                 RandomizeBoidPositionsAndVelocities();
//000200:             }
//000201: 
//000202:                 // If 'h', display usage instructions to the user
//000203:             else if (e.Key == Key.H)
//000204:             {
//000205:                 string instructions =
//000206:                     "** Window Controls **" + Environment.NewLine +
//000207:                     "Auto-Camera Positioning: 'a'" + Environment.NewLine +
//000208:                     "Pan: Click Left And Drag" + Environment.NewLine +
//000209:                     "Zoom In / Out: Mousewheel (or) Up/Down Keys (or) Ctrl+Middle Mouse Move" + Environment.NewLine +
//000210:                     "Full Screen: Right Double-Click" + Environment.NewLine +
//000211:                     "Restore to Normal Window Size: Right Double-Click (or) Escape Key" + Environment.NewLine +
//000212:                     "Pause: 'b'" + Environment.NewLine +
//000213:                     "Translucency: 't'" + Environment.NewLine +
//000214:                     Environment.NewLine +
//000215:                     "** Boid Controls **" + Environment.NewLine +
//000216:                     "Scatter: Left Double-Click" + Environment.NewLine +
//000217:                     "Change Max Speed: Ctrl + Mousewheel" + Environment.NewLine +
//000218:                     "Randomize: 'r'" + Environment.NewLine +
//000219:                     Environment.NewLine +
//000220:                     "** Parallelism Controls **" + Environment.NewLine +
//000221:                     "Go Parallel: 'p'" + Environment.NewLine;
//000222:                 MessageBox.Show(this, instructions, "Instructions", MessageBoxButton.OK, MessageBoxImage.Information);
//000223:             }
//000224:         }
//000225: 
//000226:         /// <summary>Handle mousedown events.</summary>
//000227:         /// <param name="sender">The sender.</param>
//000228:         /// <param name="e">The eventargs.</param>
//000229:         private void Window_MouseDown(object sender, MouseButtonEventArgs e)
//000230:         {
//000231:             // Log the last mouse position
//000232:             _lastMousePosition = e.GetPosition(this);
//000233:         }
//000234: 
//000235:         /// <summary>Handle mousewheel events.</summary>
//000236:         /// <param name="sender">The sender.</param>
//000237:         /// <param name="e">The eventargs.</param>
//000238:         private void Window_MouseWheel(object sender, MouseWheelEventArgs e)
//000239:         {
//000240:             // If ctrl is pressed, change the max bird speed based on the number of mousewheel turns
//000241:             if ((Keyboard.Modifiers & ModifierKeys.Control) != 0)
//000242:             {
//000243:                 const int MIN_SPEED = 2, MAX_SPEED = 10;
//000244:                 if (e.Delta > 0 && m_speedLimit < MAX_SPEED) m_speedLimit++;
//000245:                 else if (e.Delta < 0 && m_speedLimit > MIN_SPEED) m_speedLimit--;
//000246:             }
//000247:                 // Otherwise, as long as we're not in auto-panning/zooming mode,
//000248:                 // zoom in or out based on the number of mousewheel turns
//000249:             else if (!m_autoPanCamera) Zoom(e.Delta / Mouse.MouseWheelDeltaForOneLine); 
//000250:         }
//000251: 
//000252:         /// <summary>Handle mousedoubleclick events.</summary>
//000253:         /// <param name="sender">The sender.</param>
//000254:         /// <param name="e">The eventargs.</param>
//000255:         private void Window_MouseDoubleClick(object sender, MouseButtonEventArgs e)
//000256:         {
//000257:             // If the right mouse button is double clicked, alternate between maximized and normal view
//000258:             if (e.ChangedButton == MouseButton.Right)
//000259:             {
//000260:                 if (WindowState == WindowState.Maximized)
//000261:                 {
//000262:                     Topmost = false;
//000263:                     WindowStyle = WindowStyle.ThreeDBorderWindow;
//000264:                     WindowState = WindowState.Normal;
//000265:                 }
//000266:                 else
//000267:                 {
//000268:                     Topmost = true;
//000269:                     WindowStyle = WindowStyle.None;
//000270:                     WindowState = WindowState.Maximized;
//000271:                 }
//000272:             }
//000273:                 // If the left mouse button is double clicked, scatter the boids
//000274:             else if (e.ChangedButton == MouseButton.Left)
//000275:             {
//000276:                 Scatter();
//000277:             }
//000278:         }
//000279: 
//000280:         /// <summary>Scatter the boids.</summary>
//000281:         private void Scatter()
//000282:         {
//000283:             // Start scatterring if a scatter isn't already in process
//000284:             if (m_scatterTimer == null)
//000285:             {
//000286:                 // Ka'boom.  Something scares the boids.
//000287:                 SystemSounds.Hand.Play();
//000288: 
//000289:                 // Store original settings
//000290:                 var origHome = m_home;
//000291:                 var origRule1Weight = m_rule1Weight;
//000292:                 var origRule2Weight = m_rule2Weight;
//000293:                 var origRule4Weight = m_rule4Weight;
//000294:                 var origRule5Weight = m_rule5Weight;
//000295: 
//000296:                 // Create new scatter settings
//000297:                 m_home = new Vector3D(0, 0, 0);
//000298:                 m_rule1Weight = origRule1Weight * -5;
//000299:                 m_rule2Weight = origRule2Weight * 2;
//000300:                 m_rule4Weight = 0;
//000301:                 m_rule5Weight = origRule5Weight * -5;
//000302: 
//000303:                 // Start a timer to restore the original settings
//000304:                 m_scatterTimer = new Timer(_ =>
//000305:                 {
//000306:                     // Restore the original settings
//000307:                     m_home = origHome;
//000308:                     m_rule1Weight = origRule1Weight;
//000309:                     m_rule2Weight = origRule2Weight;
//000310:                     m_rule4Weight = origRule4Weight;
//000311:                     m_rule5Weight = origRule5Weight;
//000312: 
//000313:                     // Clean up the timer
//000314:                     m_scatterTimer.Dispose();
//000315:                     m_scatterTimer = null;
//000316:                 }, null, SCATTER_TIME, -1);
//000317:             }
//000318:         }
//000319: 
//000320:         /// <summary>Handle mousemove events.</summary>
//000321:         /// <param name="sender">The sender.</param>
//000322:         /// <param name="e">The eventargs.</param>
//000323:         private void Window_MouseMove(object sender, MouseEventArgs e)
//000324:         {
//000325:             // If we're not auto-panning
//000326:             if (!m_autoPanCamera)
//000327:             {
//000328:                 // Get the new mouse position and compute the difference from the previous
//000329:                 var newPosition = e.GetPosition(this);
//000330:                 var diff = _lastMousePosition - newPosition;
//000331: 
//000332:                 // If the left mouse position was pressed, pan based on the x/y differences
//000333:                 if (e.LeftButton == MouseButtonState.Pressed)
//000334:                 {
//000335:                     camMain.Position = new Point3D(camMain.Position.X + diff.X * .4, camMain.Position.Y - diff.Y * .4, camMain.Position.Z);
//000336:                 }
//000337:                     // If the middle button was pressed, zoom based on the y difference
//000338:                 else if (e.MiddleButton == MouseButtonState.Pressed)
//000339:                 {
//000340:                     Zoom((int)diff.Y);
//000341:                 }
//000342: 
//000343:                 // Store the new position
//000344:                 _lastMousePosition = newPosition;
//000345:             }
//000346:         }
//000347: 
//000348:         /// <summary>Zoom in or out based on the specified degree of zoom.</summary>
//000349:         /// <param name="amountOfChange">Amount to zoom in (positive) or out (negative).</param>
//000350:         private void Zoom(int amountOfChange)
//000351:         {
//000352:             const int ZOOM_FACTOR = 3;
//000353:             camMain.Position = Point3D.Add(camMain.Position, camMain.LookDirection * amountOfChange * ZOOM_FACTOR);
//000354:         }
//000355:         #endregion
//000356: 
//000357:         #region Step and Render
//000358:         /// <summary>Runs the rendering loop.</summary>
//000359:         private void RenderUpdateLoop()
//000360:         {
//000361:             // Loop forever...
//000362:             while (true)
//000363:             {
//000364:                 // Wait to receive a signal that we should render another frame
//000365:                 m_renderSignal.WaitOne();
//000366: 
//000367:                 // Start timing.
//000368:                 m_frameStopwatch.Restart();
//000369: 
//000370:                 // Update the positions and velocities of all of the boids.
//000371:                 StepBoids();
//000372: 
//000373:                 // Update our rendering stats for display to the user
//000374:                 m_totalRenderingMillisecondsSinceLastUserPresentation += m_frameStopwatch.ElapsedMilliseconds;
//000375:                 m_numRendersSinceLastUserPresentation++;
//000376: 
//000377:                 // Render the boids to the UI
//000378:                 Dispatcher.Invoke((Action)RenderBoids, DispatcherPriority.Send, null);
//000379:             }
//000380:         }
//000381: 
//000382:         /// <summary>Step the boids one step, updating their velocities and positions.</summary>
//000383:         private void StepBoids()
//000384:         {
//000385:             // Store the current velocities and positions so that we can operate on an immutable copy
//000386:             foreach (var boid in m_boidModels) boid.StorePositionAndVelocityIntoPrevious();
//000387: 
//000388:             // For each boid, analyze how the various boid rules influence its velocity and position,
//000389:             // then store this new information.  After this step, we'll be able to render the boids.
//000390:             Parallel.ForEach(m_boidModels, m_parallelOptions, boid =>
//000391:             {
//000392:                 var v1_2_3 = PrimaryRules_1_2_3(boid); // weights factored in already in PrimaryRules
//000393:                 var v4 = m_rule4Weight * Rule4_EncourageStayingWithinAviary(boid);
//000394:                 var v5 = m_rule5Weight * Rule5_TendendcyTowardsHome(boid);
//000395: 
//000396:                 boid.Velocity = BoundVelocity(boid.PreviousVelocity + v1_2_3 + v4 + v5, m_speedLimit);
//000397:                 boid.Velocity.Normalize();
//000398: 
//000399:                 var tmpPosition = boid.PreviousPosition + boid.Velocity;
//000400:                 if (tmpPosition.Y >= 0) boid.Position = tmpPosition;
//000401:             });
//000402:         }
//000403: 
//000404:         /// <summary>Render the boids.</summary>
//000405:         private void RenderBoids()
//000406:         {
//000407:             // Make sure the boids are all positioned and pointing correctly
//000408:             foreach (var boid in m_boidModels) boid.TransformByPositionAndVelocity();
//000409: 
//000410:             // Every once in a while, update the user-displayed stats on timings
//000411:             var now = DateTimeOffset.Now;
//000412:             if (now >= m_nextUserPresentation)
//000413:             {
//000414:                 Title = string.Format("Procs: {0}, Time: {1:F2}", m_parallelOptions.MaxDegreeOfParallelism, 
//000415:                     m_numRendersSinceLastUserPresentation > 0 ? 
//000416:                     m_totalRenderingMillisecondsSinceLastUserPresentation / (double)m_numRendersSinceLastUserPresentation : 
//000417:                     0);
//000418:                 m_nextUserPresentation = now.AddSeconds(1);
//000419:                 m_numRendersSinceLastUserPresentation = 0;
//000420:                 m_totalRenderingMillisecondsSinceLastUserPresentation = 0;
//000421:             }
//000422: 
//000423:             // If we're in auto-panning mode, move the camera appropriately
//000424:             if (m_autoPanCamera)
//000425:             {
//000426:                 // Compute the maximum Z value of all of the boids and the center of their mass
//000427:                 double maxZ = double.MinValue;
//000428:                 Vector3D totalPos = new Vector3D();
//000429:                 foreach (var boid in m_boidModels)
//000430:                 {
//000431:                     if (boid.Position.Z > maxZ) maxZ = boid.Position.Z;
//000432:                     totalPos += boid.Position;
//000433:                 }
//000434:                 var newCameraPos = totalPos / m_boidModels.Length;
//000435:                 
//000436:                 // Move the camera to point at the center of the boids, a ways back from the max boid's Z
//000437:                 const int CAMERA_DISTANCE_FROM_MAXZ = 100;
//000438:                 const double CAMERA_SPEED_LIMIT = .01;
//000439:                 var newPos = new Point3D(newCameraPos.X, newCameraPos.Y, maxZ + CAMERA_DISTANCE_FROM_MAXZ);
//000440:                 var cameraVelocity = newPos - camMain.Position;
//000441:                 camMain.Position = camMain.Position + (cameraVelocity * CAMERA_SPEED_LIMIT);
//000442:             }
//000443:         }
//000444:         #endregion
//000445: 
//000446:         #region Boid Rules
//000447:         /// <summary>Run the three primary rules of boidom.</summary>
//000448:         /// <param name="boid">The boid to process.</param>
//000449:         /// <returns>The velocity vector resulting from the three primary rules and their associated weights.</returns>
//000450:         private Vector3D PrimaryRules_1_2_3(Boid boid)
//000451:         {
//000452:             int numNearby = 0;
//000453:             Vector3D summedPosition = new Vector3D();
//000454:             Vector3D summedVelocity = new Vector3D();
//000455:             Vector3D summedSeparation = new Vector3D();
//000456: 
//000457:             // For rule #1, we want the boid to fly towards the center of all of those in its neighborhood.
//000458:             // We find all of those boids, average their positions, and create a velocity vector to move the
//000459:             // boid a bit of the way there.
//000460: 
//000461:             // For rule #2, we want the boid to move away from each other boid it's a bit too close to.
//000462:             // Find all of those boids in its immediate vicinity, and push it away.
//000463: 
//000464:             // For rule #3, we want the boid to match velocities with those boids in its neighborhood.
//000465:             // Sum their velocities, find the average, and move this boid's velocity a bit in that direction.
//000466: 
//000467:             foreach (var other in m_boidModels)
//000468:             {
//000469:                 if (other != boid && 
//000470:                     (other.PreviousPosition - boid.PreviousPosition).Length <= NEIGHBORHOOD_SIZE &&
//000471:                     boid.ComputeAngle(other) <= 135)
//000472:                 {
//000473:                     summedPosition += other.PreviousPosition;
//000474:                     summedVelocity += other.PreviousVelocity;
//000475:                     numNearby++;
//000476: 
//000477:                     if ((other.PreviousPosition - boid.PreviousPosition).Length < MIN_DISTANCE_FROM_NEIGHBOR)
//000478:                     {
//000479:                         summedSeparation -= (other.PreviousPosition - boid.PreviousPosition);
//000480:                     }
//000481:                 }
//000482:             }
//000483: 
//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
//000485:             var rule2_separateFromNearby = summedSeparation;
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
//000487: 
//000488:             return
//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
//000499:             var v = new Vector3D();
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_003f:  ldloc.3
    IL_0040:  brtrue.s   IL_006d

//000167:             {
    IL_0042:  nop
//000168:                 int procCount = Environment.ProcessorCount;
    IL_0043:  call       int32 [mscorlib]System.Environment::get_ProcessorCount()
    IL_0048:  stloc.0
//000169:                 m_parallelOptions.MaxDegreeOfParallelism = m_parallelOptions.MaxDegreeOfParallelism == 1 ? procCount : 1;
    IL_0049:  ldarg.0
    IL_004a:  ldfld      class [mscorlib]System.Threading.Tasks.ParallelOptions ParallelBoids.MainWindow::m_parallelOptions
    IL_004f:  ldarg.0
    IL_0050:  ldfld      class [mscorlib]System.Threading.Tasks.ParallelOptions ParallelBoids.MainWindow::m_parallelOptions
    IL_0055:  callvirt   instance int32 [mscorlib]System.Threading.Tasks.ParallelOptions::get_MaxDegreeOfParallelism()
    IL_005a:  ldc.i4.1
    IL_005b:  beq.s      IL_0060

    IL_005d:  ldc.i4.1
    IL_005e:  br.s       IL_0061

    IL_0060:  ldloc.0
    IL_0061:  callvirt   instance void [mscorlib]System.Threading.Tasks.ParallelOptions::set_MaxDegreeOfParallelism(int32)
    IL_0066:  nop
//000170:             }
    IL_0067:  nop
//000171: 
//000172:                 // If 'b' is pressed, break/pause the scene until 'b' is pressed again
//000173:             else if (e.Key == Key.B)
//000174:             {
//000175:                 m_renderTimer.Enabled = !m_renderTimer.Enabled;
//000176:             }
//000177: 
//000178:                 // If 't' is pressed, toggle translucency to enable following just one boid
//000179:             else if (e.Key == Key.T)
//000180:             {
//000181:                 for (int i = 1; i < m_boidModels.Length; i++) m_boidModels[i].ToggleTranslucency();
//000182:             }
//000183: 
//000184:                 // If 'a' is pressed, turn auto-panning/zoom of the camera on/off
//000185:             else if (e.Key == Key.A)
//000186:             {
//000187:                 m_autoPanCamera = !m_autoPanCamera;
//000188:             }
//000189: 
//000190:                 // If up or down is pressed and we're in auto-pan mode, 
//000191:             else if ((e.Key == Key.Up || e.Key == Key.Down) && !m_autoPanCamera)
//000192:             {
//000193:                 Zoom(e.Key == Key.Up ? 1 : -1);
//000194:             }
//000195: 
//000196:                 // If 'r' is pressed, reset all of the boids to random positions and velocities
//000197:             else if (e.Key == Key.R)
//000198:             {
//000199:                 RandomizeBoidPositionsAndVelocities();
//000200:             }
//000201: 
//000202:                 // If 'h', display usage instructions to the user
//000203:             else if (e.Key == Key.H)
//000204:             {
//000205:                 string instructions =
//000206:                     "** Window Controls **" + Environment.NewLine +
//000207:                     "Auto-Camera Positioning: 'a'" + Environment.NewLine +
//000208:                     "Pan: Click Left And Drag" + Environment.NewLine +
//000209:                     "Zoom In / Out: Mousewheel (or) Up/Down Keys (or) Ctrl+Middle Mouse Move" + Environment.NewLine +
//000210:                     "Full Screen: Right Double-Click" + Environment.NewLine +
//000211:                     "Restore to Normal Window Size: Right Double-Click (or) Escape Key" + Environment.NewLine +
//000212:                     "Pause: 'b'" + Environment.NewLine +
//000213:                     "Translucency: 't'" + Environment.NewLine +
//000214:                     Environment.NewLine +
//000215:                     "** Boid Controls **" + Environment.NewLine +
//000216:                     "Scatter: Left Double-Click" + Environment.NewLine +
//000217:                     "Change Max Speed: Ctrl + Mousewheel" + Environment.NewLine +
//000218:                     "Randomize: 'r'" + Environment.NewLine +
//000219:                     Environment.NewLine +
//000220:                     "** Parallelism Controls **" + Environment.NewLine +
//000221:                     "Go Parallel: 'p'" + Environment.NewLine;
//000222:                 MessageBox.Show(this, instructions, "Instructions", MessageBoxButton.OK, MessageBoxImage.Information);
//000223:             }
//000224:         }
//000225: 
//000226:         /// <summary>Handle mousedown events.</summary>
//000227:         /// <param name="sender">The sender.</param>
//000228:         /// <param name="e">The eventargs.</param>
//000229:         private void Window_MouseDown(object sender, MouseButtonEventArgs e)
//000230:         {
//000231:             // Log the last mouse position
//000232:             _lastMousePosition = e.GetPosition(this);
//000233:         }
//000234: 
//000235:         /// <summary>Handle mousewheel events.</summary>
//000236:         /// <param name="sender">The sender.</param>
//000237:         /// <param name="e">The eventargs.</param>
//000238:         private void Window_MouseWheel(object sender, MouseWheelEventArgs e)
//000239:         {
//000240:             // If ctrl is pressed, change the max bird speed based on the number of mousewheel turns
//000241:             if ((Keyboard.Modifiers & ModifierKeys.Control) != 0)
//000242:             {
//000243:                 const int MIN_SPEED = 2, MAX_SPEED = 10;
//000244:                 if (e.Delta > 0 && m_speedLimit < MAX_SPEED) m_speedLimit++;
//000245:                 else if (e.Delta < 0 && m_speedLimit > MIN_SPEED) m_speedLimit--;
//000246:             }
//000247:                 // Otherwise, as long as we're not in auto-panning/zooming mode,
//000248:                 // zoom in or out based on the number of mousewheel turns
//000249:             else if (!m_autoPanCamera) Zoom(e.Delta / Mouse.MouseWheelDeltaForOneLine); 
//000250:         }
//000251: 
//000252:         /// <summary>Handle mousedoubleclick events.</summary>
//000253:         /// <param name="sender">The sender.</param>
//000254:         /// <param name="e">The eventargs.</param>
//000255:         private void Window_MouseDoubleClick(object sender, MouseButtonEventArgs e)
//000256:         {
//000257:             // If the right mouse button is double clicked, alternate between maximized and normal view
//000258:             if (e.ChangedButton == MouseButton.Right)
//000259:             {
//000260:                 if (WindowState == WindowState.Maximized)
//000261:                 {
//000262:                     Topmost = false;
//000263:                     WindowStyle = WindowStyle.ThreeDBorderWindow;
//000264:                     WindowState = WindowState.Normal;
//000265:                 }
//000266:                 else
//000267:                 {
//000268:                     Topmost = true;
//000269:                     WindowStyle = WindowStyle.None;
//000270:                     WindowState = WindowState.Maximized;
//000271:                 }
//000272:             }
//000273:                 // If the left mouse button is double clicked, scatter the boids
//000274:             else if (e.ChangedButton == MouseButton.Left)
//000275:             {
//000276:                 Scatter();
//000277:             }
//000278:         }
//000279: 
//000280:         /// <summary>Scatter the boids.</summary>
//000281:         private void Scatter()
//000282:         {
//000283:             // Start scatterring if a scatter isn't already in process
//000284:             if (m_scatterTimer == null)
//000285:             {
//000286:                 // Ka'boom.  Something scares the boids.
//000287:                 SystemSounds.Hand.Play();
//000288: 
//000289:                 // Store original settings
//000290:                 var origHome = m_home;
//000291:                 var origRule1Weight = m_rule1Weight;
//000292:                 var origRule2Weight = m_rule2Weight;
//000293:                 var origRule4Weight = m_rule4Weight;
//000294:                 var origRule5Weight = m_rule5Weight;
//000295: 
//000296:                 // Create new scatter settings
//000297:                 m_home = new Vector3D(0, 0, 0);
//000298:                 m_rule1Weight = origRule1Weight * -5;
//000299:                 m_rule2Weight = origRule2Weight * 2;
//000300:                 m_rule4Weight = 0;
//000301:                 m_rule5Weight = origRule5Weight * -5;
//000302: 
//000303:                 // Start a timer to restore the original settings
//000304:                 m_scatterTimer = new Timer(_ =>
//000305:                 {
//000306:                     // Restore the original settings
//000307:                     m_home = origHome;
//000308:                     m_rule1Weight = origRule1Weight;
//000309:                     m_rule2Weight = origRule2Weight;
//000310:                     m_rule4Weight = origRule4Weight;
//000311:                     m_rule5Weight = origRule5Weight;
//000312: 
//000313:                     // Clean up the timer
//000314:                     m_scatterTimer.Dispose();
//000315:                     m_scatterTimer = null;
//000316:                 }, null, SCATTER_TIME, -1);
//000317:             }
//000318:         }
//000319: 
//000320:         /// <summary>Handle mousemove events.</summary>
//000321:         /// <param name="sender">The sender.</param>
//000322:         /// <param name="e">The eventargs.</param>
//000323:         private void Window_MouseMove(object sender, MouseEventArgs e)
//000324:         {
//000325:             // If we're not auto-panning
//000326:             if (!m_autoPanCamera)
//000327:             {
//000328:                 // Get the new mouse position and compute the difference from the previous
//000329:                 var newPosition = e.GetPosition(this);
//000330:                 var diff = _lastMousePosition - newPosition;
//000331: 
//000332:                 // If the left mouse position was pressed, pan based on the x/y differences
//000333:                 if (e.LeftButton == MouseButtonState.Pressed)
//000334:                 {
//000335:                     camMain.Position = new Point3D(camMain.Position.X + diff.X * .4, camMain.Position.Y - diff.Y * .4, camMain.Position.Z);
//000336:                 }
//000337:                     // If the middle button was pressed, zoom based on the y difference
//000338:                 else if (e.MiddleButton == MouseButtonState.Pressed)
//000339:                 {
//000340:                     Zoom((int)diff.Y);
//000341:                 }
//000342: 
//000343:                 // Store the new position
//000344:                 _lastMousePosition = newPosition;
//000345:             }
//000346:         }
//000347: 
//000348:         /// <summary>Zoom in or out based on the specified degree of zoom.</summary>
//000349:         /// <param name="amountOfChange">Amount to zoom in (positive) or out (negative).</param>
//000350:         private void Zoom(int amountOfChange)
//000351:         {
//000352:             const int ZOOM_FACTOR = 3;
//000353:             camMain.Position = Point3D.Add(camMain.Position, camMain.LookDirection * amountOfChange * ZOOM_FACTOR);
//000354:         }
//000355:         #endregion
//000356: 
//000357:         #region Step and Render
//000358:         /// <summary>Runs the rendering loop.</summary>
//000359:         private void RenderUpdateLoop()
//000360:         {
//000361:             // Loop forever...
//000362:             while (true)
//000363:             {
//000364:                 // Wait to receive a signal that we should render another frame
//000365:                 m_renderSignal.WaitOne();
//000366: 
//000367:                 // Start timing.
//000368:                 m_frameStopwatch.Restart();
//000369: 
//000370:                 // Update the positions and velocities of all of the boids.
//000371:                 StepBoids();
//000372: 
//000373:                 // Update our rendering stats for display to the user
//000374:                 m_totalRenderingMillisecondsSinceLastUserPresentation += m_frameStopwatch.ElapsedMilliseconds;
//000375:                 m_numRendersSinceLastUserPresentation++;
//000376: 
//000377:                 // Render the boids to the UI
//000378:                 Dispatcher.Invoke((Action)RenderBoids, DispatcherPriority.Send, null);
//000379:             }
//000380:         }
//000381: 
//000382:         /// <summary>Step the boids one step, updating their velocities and positions.</summary>
//000383:         private void StepBoids()
//000384:         {
//000385:             // Store the current velocities and positions so that we can operate on an immutable copy
//000386:             foreach (var boid in m_boidModels) boid.StorePositionAndVelocityIntoPrevious();
//000387: 
//000388:             // For each boid, analyze how the various boid rules influence its velocity and position,
//000389:             // then store this new information.  After this step, we'll be able to render the boids.
//000390:             Parallel.ForEach(m_boidModels, m_parallelOptions, boid =>
//000391:             {
//000392:                 var v1_2_3 = PrimaryRules_1_2_3(boid); // weights factored in already in PrimaryRules
//000393:                 var v4 = m_rule4Weight * Rule4_EncourageStayingWithinAviary(boid);
//000394:                 var v5 = m_rule5Weight * Rule5_TendendcyTowardsHome(boid);
//000395: 
//000396:                 boid.Velocity = BoundVelocity(boid.PreviousVelocity + v1_2_3 + v4 + v5, m_speedLimit);
//000397:                 boid.Velocity.Normalize();
//000398: 
//000399:                 var tmpPosition = boid.PreviousPosition + boid.Velocity;
//000400:                 if (tmpPosition.Y >= 0) boid.Position = tmpPosition;
//000401:             });
//000402:         }
//000403: 
//000404:         /// <summary>Render the boids.</summary>
//000405:         private void RenderBoids()
//000406:         {
//000407:             // Make sure the boids are all positioned and pointing correctly
//000408:             foreach (var boid in m_boidModels) boid.TransformByPositionAndVelocity();
//000409: 
//000410:             // Every once in a while, update the user-displayed stats on timings
//000411:             var now = DateTimeOffset.Now;
//000412:             if (now >= m_nextUserPresentation)
//000413:             {
//000414:                 Title = string.Format("Procs: {0}, Time: {1:F2}", m_parallelOptions.MaxDegreeOfParallelism, 
//000415:                     m_numRendersSinceLastUserPresentation > 0 ? 
//000416:                     m_totalRenderingMillisecondsSinceLastUserPresentation / (double)m_numRendersSinceLastUserPresentation : 
//000417:                     0);
//000418:                 m_nextUserPresentation = now.AddSeconds(1);
//000419:                 m_numRendersSinceLastUserPresentation = 0;
//000420:                 m_totalRenderingMillisecondsSinceLastUserPresentation = 0;
//000421:             }
//000422: 
//000423:             // If we're in auto-panning mode, move the camera appropriately
//000424:             if (m_autoPanCamera)
//000425:             {
//000426:                 // Compute the maximum Z value of all of the boids and the center of their mass
//000427:                 double maxZ = double.MinValue;
//000428:                 Vector3D totalPos = new Vector3D();
//000429:                 foreach (var boid in m_boidModels)
//000430:                 {
//000431:                     if (boid.Position.Z > maxZ) maxZ = boid.Position.Z;
//000432:                     totalPos += boid.Position;
//000433:                 }
//000434:                 var newCameraPos = totalPos / m_boidModels.Length;
//000435:                 
//000436:                 // Move the camera to point at the center of the boids, a ways back from the max boid's Z
//000437:                 const int CAMERA_DISTANCE_FROM_MAXZ = 100;
//000438:                 const double CAMERA_SPEED_LIMIT = .01;
//000439:                 var newPos = new Point3D(newCameraPos.X, newCameraPos.Y, maxZ + CAMERA_DISTANCE_FROM_MAXZ);
//000440:                 var cameraVelocity = newPos - camMain.Position;
//000441:                 camMain.Position = camMain.Position + (cameraVelocity * CAMERA_SPEED_LIMIT);
//000442:             }
//000443:         }
//000444:         #endregion
//000445: 
//000446:         #region Boid Rules
//000447:         /// <summary>Run the three primary rules of boidom.</summary>
//000448:         /// <param name="boid">The boid to process.</param>
//000449:         /// <returns>The velocity vector resulting from the three primary rules and their associated weights.</returns>
//000450:         private Vector3D PrimaryRules_1_2_3(Boid boid)
//000451:         {
//000452:             int numNearby = 0;
//000453:             Vector3D summedPosition = new Vector3D();
//000454:             Vector3D summedVelocity = new Vector3D();
//000455:             Vector3D summedSeparation = new Vector3D();
//000456: 
//000457:             // For rule #1, we want the boid to fly towards the center of all of those in its neighborhood.
//000458:             // We find all of those boids, average their positions, and create a velocity vector to move the
//000459:             // boid a bit of the way there.
//000460: 
//000461:             // For rule #2, we want the boid to move away from each other boid it's a bit too close to.
//000462:             // Find all of those boids in its immediate vicinity, and push it away.
//000463: 
//000464:             // For rule #3, we want the boid to match velocities with those boids in its neighborhood.
//000465:             // Sum their velocities, find the average, and move this boid's velocity a bit in that direction.
//000466: 
//000467:             foreach (var other in m_boidModels)
//000468:             {
//000469:                 if (other != boid && 
//000470:                     (other.PreviousPosition - boid.PreviousPosition).Length <= NEIGHBORHOOD_SIZE &&
//000471:                     boid.ComputeAngle(other) <= 135)
//000472:                 {
//000473:                     summedPosition += other.PreviousPosition;
//000474:                     summedVelocity += other.PreviousVelocity;
//000475:                     numNearby++;
//000476: 
//000477:                     if ((other.PreviousPosition - boid.PreviousPosition).Length < MIN_DISTANCE_FROM_NEIGHBOR)
//000478:                     {
//000479:                         summedSeparation -= (other.PreviousPosition - boid.PreviousPosition);
//000480:                     }
//000481:                 }
//000482:             }
//000483: 
//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
//000485:             var rule2_separateFromNearby = summedSeparation;
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
//000487: 
//000488:             return
//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
//000499:             var v = new Vector3D();
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_0068:  br         IL_02ba

//000173:             else if (e.Key == Key.B)
    IL_006d:  ldarg.2
    IL_006e:  callvirt   instance valuetype [WindowsBase]System.Windows.Input.Key [PresentationCore]System.Windows.Input.KeyEventArgs::get_Key()
    IL_0073:  ldc.i4.s   45
    IL_0075:  ceq
    IL_0077:  ldc.i4.0
    IL_0078:  ceq
    IL_007a:  stloc.3
//000174:             {
//000175:                 m_renderTimer.Enabled = !m_renderTimer.Enabled;
//000176:             }
//000177: 
//000178:                 // If 't' is pressed, toggle translucency to enable following just one boid
//000179:             else if (e.Key == Key.T)
//000180:             {
//000181:                 for (int i = 1; i < m_boidModels.Length; i++) m_boidModels[i].ToggleTranslucency();
//000182:             }
//000183: 
//000184:                 // If 'a' is pressed, turn auto-panning/zoom of the camera on/off
//000185:             else if (e.Key == Key.A)
//000186:             {
//000187:                 m_autoPanCamera = !m_autoPanCamera;
//000188:             }
//000189: 
//000190:                 // If up or down is pressed and we're in auto-pan mode, 
//000191:             else if ((e.Key == Key.Up || e.Key == Key.Down) && !m_autoPanCamera)
//000192:             {
//000193:                 Zoom(e.Key == Key.Up ? 1 : -1);
//000194:             }
//000195: 
//000196:                 // If 'r' is pressed, reset all of the boids to random positions and velocities
//000197:             else if (e.Key == Key.R)
//000198:             {
//000199:                 RandomizeBoidPositionsAndVelocities();
//000200:             }
//000201: 
//000202:                 // If 'h', display usage instructions to the user
//000203:             else if (e.Key == Key.H)
//000204:             {
//000205:                 string instructions =
//000206:                     "** Window Controls **" + Environment.NewLine +
//000207:                     "Auto-Camera Positioning: 'a'" + Environment.NewLine +
//000208:                     "Pan: Click Left And Drag" + Environment.NewLine +
//000209:                     "Zoom In / Out: Mousewheel (or) Up/Down Keys (or) Ctrl+Middle Mouse Move" + Environment.NewLine +
//000210:                     "Full Screen: Right Double-Click" + Environment.NewLine +
//000211:                     "Restore to Normal Window Size: Right Double-Click (or) Escape Key" + Environment.NewLine +
//000212:                     "Pause: 'b'" + Environment.NewLine +
//000213:                     "Translucency: 't'" + Environment.NewLine +
//000214:                     Environment.NewLine +
//000215:                     "** Boid Controls **" + Environment.NewLine +
//000216:                     "Scatter: Left Double-Click" + Environment.NewLine +
//000217:                     "Change Max Speed: Ctrl + Mousewheel" + Environment.NewLine +
//000218:                     "Randomize: 'r'" + Environment.NewLine +
//000219:                     Environment.NewLine +
//000220:                     "** Parallelism Controls **" + Environment.NewLine +
//000221:                     "Go Parallel: 'p'" + Environment.NewLine;
//000222:                 MessageBox.Show(this, instructions, "Instructions", MessageBoxButton.OK, MessageBoxImage.Information);
//000223:             }
//000224:         }
//000225: 
//000226:         /// <summary>Handle mousedown events.</summary>
//000227:         /// <param name="sender">The sender.</param>
//000228:         /// <param name="e">The eventargs.</param>
//000229:         private void Window_MouseDown(object sender, MouseButtonEventArgs e)
//000230:         {
//000231:             // Log the last mouse position
//000232:             _lastMousePosition = e.GetPosition(this);
//000233:         }
//000234: 
//000235:         /// <summary>Handle mousewheel events.</summary>
//000236:         /// <param name="sender">The sender.</param>
//000237:         /// <param name="e">The eventargs.</param>
//000238:         private void Window_MouseWheel(object sender, MouseWheelEventArgs e)
//000239:         {
//000240:             // If ctrl is pressed, change the max bird speed based on the number of mousewheel turns
//000241:             if ((Keyboard.Modifiers & ModifierKeys.Control) != 0)
//000242:             {
//000243:                 const int MIN_SPEED = 2, MAX_SPEED = 10;
//000244:                 if (e.Delta > 0 && m_speedLimit < MAX_SPEED) m_speedLimit++;
//000245:                 else if (e.Delta < 0 && m_speedLimit > MIN_SPEED) m_speedLimit--;
//000246:             }
//000247:                 // Otherwise, as long as we're not in auto-panning/zooming mode,
//000248:                 // zoom in or out based on the number of mousewheel turns
//000249:             else if (!m_autoPanCamera) Zoom(e.Delta / Mouse.MouseWheelDeltaForOneLine); 
//000250:         }
//000251: 
//000252:         /// <summary>Handle mousedoubleclick events.</summary>
//000253:         /// <param name="sender">The sender.</param>
//000254:         /// <param name="e">The eventargs.</param>
//000255:         private void Window_MouseDoubleClick(object sender, MouseButtonEventArgs e)
//000256:         {
//000257:             // If the right mouse button is double clicked, alternate between maximized and normal view
//000258:             if (e.ChangedButton == MouseButton.Right)
//000259:             {
//000260:                 if (WindowState == WindowState.Maximized)
//000261:                 {
//000262:                     Topmost = false;
//000263:                     WindowStyle = WindowStyle.ThreeDBorderWindow;
//000264:                     WindowState = WindowState.Normal;
//000265:                 }
//000266:                 else
//000267:                 {
//000268:                     Topmost = true;
//000269:                     WindowStyle = WindowStyle.None;
//000270:                     WindowState = WindowState.Maximized;
//000271:                 }
//000272:             }
//000273:                 // If the left mouse button is double clicked, scatter the boids
//000274:             else if (e.ChangedButton == MouseButton.Left)
//000275:             {
//000276:                 Scatter();
//000277:             }
//000278:         }
//000279: 
//000280:         /// <summary>Scatter the boids.</summary>
//000281:         private void Scatter()
//000282:         {
//000283:             // Start scatterring if a scatter isn't already in process
//000284:             if (m_scatterTimer == null)
//000285:             {
//000286:                 // Ka'boom.  Something scares the boids.
//000287:                 SystemSounds.Hand.Play();
//000288: 
//000289:                 // Store original settings
//000290:                 var origHome = m_home;
//000291:                 var origRule1Weight = m_rule1Weight;
//000292:                 var origRule2Weight = m_rule2Weight;
//000293:                 var origRule4Weight = m_rule4Weight;
//000294:                 var origRule5Weight = m_rule5Weight;
//000295: 
//000296:                 // Create new scatter settings
//000297:                 m_home = new Vector3D(0, 0, 0);
//000298:                 m_rule1Weight = origRule1Weight * -5;
//000299:                 m_rule2Weight = origRule2Weight * 2;
//000300:                 m_rule4Weight = 0;
//000301:                 m_rule5Weight = origRule5Weight * -5;
//000302: 
//000303:                 // Start a timer to restore the original settings
//000304:                 m_scatterTimer = new Timer(_ =>
//000305:                 {
//000306:                     // Restore the original settings
//000307:                     m_home = origHome;
//000308:                     m_rule1Weight = origRule1Weight;
//000309:                     m_rule2Weight = origRule2Weight;
//000310:                     m_rule4Weight = origRule4Weight;
//000311:                     m_rule5Weight = origRule5Weight;
//000312: 
//000313:                     // Clean up the timer
//000314:                     m_scatterTimer.Dispose();
//000315:                     m_scatterTimer = null;
//000316:                 }, null, SCATTER_TIME, -1);
//000317:             }
//000318:         }
//000319: 
//000320:         /// <summary>Handle mousemove events.</summary>
//000321:         /// <param name="sender">The sender.</param>
//000322:         /// <param name="e">The eventargs.</param>
//000323:         private void Window_MouseMove(object sender, MouseEventArgs e)
//000324:         {
//000325:             // If we're not auto-panning
//000326:             if (!m_autoPanCamera)
//000327:             {
//000328:                 // Get the new mouse position and compute the difference from the previous
//000329:                 var newPosition = e.GetPosition(this);
//000330:                 var diff = _lastMousePosition - newPosition;
//000331: 
//000332:                 // If the left mouse position was pressed, pan based on the x/y differences
//000333:                 if (e.LeftButton == MouseButtonState.Pressed)
//000334:                 {
//000335:                     camMain.Position = new Point3D(camMain.Position.X + diff.X * .4, camMain.Position.Y - diff.Y * .4, camMain.Position.Z);
//000336:                 }
//000337:                     // If the middle button was pressed, zoom based on the y difference
//000338:                 else if (e.MiddleButton == MouseButtonState.Pressed)
//000339:                 {
//000340:                     Zoom((int)diff.Y);
//000341:                 }
//000342: 
//000343:                 // Store the new position
//000344:                 _lastMousePosition = newPosition;
//000345:             }
//000346:         }
//000347: 
//000348:         /// <summary>Zoom in or out based on the specified degree of zoom.</summary>
//000349:         /// <param name="amountOfChange">Amount to zoom in (positive) or out (negative).</param>
//000350:         private void Zoom(int amountOfChange)
//000351:         {
//000352:             const int ZOOM_FACTOR = 3;
//000353:             camMain.Position = Point3D.Add(camMain.Position, camMain.LookDirection * amountOfChange * ZOOM_FACTOR);
//000354:         }
//000355:         #endregion
//000356: 
//000357:         #region Step and Render
//000358:         /// <summary>Runs the rendering loop.</summary>
//000359:         private void RenderUpdateLoop()
//000360:         {
//000361:             // Loop forever...
//000362:             while (true)
//000363:             {
//000364:                 // Wait to receive a signal that we should render another frame
//000365:                 m_renderSignal.WaitOne();
//000366: 
//000367:                 // Start timing.
//000368:                 m_frameStopwatch.Restart();
//000369: 
//000370:                 // Update the positions and velocities of all of the boids.
//000371:                 StepBoids();
//000372: 
//000373:                 // Update our rendering stats for display to the user
//000374:                 m_totalRenderingMillisecondsSinceLastUserPresentation += m_frameStopwatch.ElapsedMilliseconds;
//000375:                 m_numRendersSinceLastUserPresentation++;
//000376: 
//000377:                 // Render the boids to the UI
//000378:                 Dispatcher.Invoke((Action)RenderBoids, DispatcherPriority.Send, null);
//000379:             }
//000380:         }
//000381: 
//000382:         /// <summary>Step the boids one step, updating their velocities and positions.</summary>
//000383:         private void StepBoids()
//000384:         {
//000385:             // Store the current velocities and positions so that we can operate on an immutable copy
//000386:             foreach (var boid in m_boidModels) boid.StorePositionAndVelocityIntoPrevious();
//000387: 
//000388:             // For each boid, analyze how the various boid rules influence its velocity and position,
//000389:             // then store this new information.  After this step, we'll be able to render the boids.
//000390:             Parallel.ForEach(m_boidModels, m_parallelOptions, boid =>
//000391:             {
//000392:                 var v1_2_3 = PrimaryRules_1_2_3(boid); // weights factored in already in PrimaryRules
//000393:                 var v4 = m_rule4Weight * Rule4_EncourageStayingWithinAviary(boid);
//000394:                 var v5 = m_rule5Weight * Rule5_TendendcyTowardsHome(boid);
//000395: 
//000396:                 boid.Velocity = BoundVelocity(boid.PreviousVelocity + v1_2_3 + v4 + v5, m_speedLimit);
//000397:                 boid.Velocity.Normalize();
//000398: 
//000399:                 var tmpPosition = boid.PreviousPosition + boid.Velocity;
//000400:                 if (tmpPosition.Y >= 0) boid.Position = tmpPosition;
//000401:             });
//000402:         }
//000403: 
//000404:         /// <summary>Render the boids.</summary>
//000405:         private void RenderBoids()
//000406:         {
//000407:             // Make sure the boids are all positioned and pointing correctly
//000408:             foreach (var boid in m_boidModels) boid.TransformByPositionAndVelocity();
//000409: 
//000410:             // Every once in a while, update the user-displayed stats on timings
//000411:             var now = DateTimeOffset.Now;
//000412:             if (now >= m_nextUserPresentation)
//000413:             {
//000414:                 Title = string.Format("Procs: {0}, Time: {1:F2}", m_parallelOptions.MaxDegreeOfParallelism, 
//000415:                     m_numRendersSinceLastUserPresentation > 0 ? 
//000416:                     m_totalRenderingMillisecondsSinceLastUserPresentation / (double)m_numRendersSinceLastUserPresentation : 
//000417:                     0);
//000418:                 m_nextUserPresentation = now.AddSeconds(1);
//000419:                 m_numRendersSinceLastUserPresentation = 0;
//000420:                 m_totalRenderingMillisecondsSinceLastUserPresentation = 0;
//000421:             }
//000422: 
//000423:             // If we're in auto-panning mode, move the camera appropriately
//000424:             if (m_autoPanCamera)
//000425:             {
//000426:                 // Compute the maximum Z value of all of the boids and the center of their mass
//000427:                 double maxZ = double.MinValue;
//000428:                 Vector3D totalPos = new Vector3D();
//000429:                 foreach (var boid in m_boidModels)
//000430:                 {
//000431:                     if (boid.Position.Z > maxZ) maxZ = boid.Position.Z;
//000432:                     totalPos += boid.Position;
//000433:                 }
//000434:                 var newCameraPos = totalPos / m_boidModels.Length;
//000435:                 
//000436:                 // Move the camera to point at the center of the boids, a ways back from the max boid's Z
//000437:                 const int CAMERA_DISTANCE_FROM_MAXZ = 100;
//000438:                 const double CAMERA_SPEED_LIMIT = .01;
//000439:                 var newPos = new Point3D(newCameraPos.X, newCameraPos.Y, maxZ + CAMERA_DISTANCE_FROM_MAXZ);
//000440:                 var cameraVelocity = newPos - camMain.Position;
//000441:                 camMain.Position = camMain.Position + (cameraVelocity * CAMERA_SPEED_LIMIT);
//000442:             }
//000443:         }
//000444:         #endregion
//000445: 
//000446:         #region Boid Rules
//000447:         /// <summary>Run the three primary rules of boidom.</summary>
//000448:         /// <param name="boid">The boid to process.</param>
//000449:         /// <returns>The velocity vector resulting from the three primary rules and their associated weights.</returns>
//000450:         private Vector3D PrimaryRules_1_2_3(Boid boid)
//000451:         {
//000452:             int numNearby = 0;
//000453:             Vector3D summedPosition = new Vector3D();
//000454:             Vector3D summedVelocity = new Vector3D();
//000455:             Vector3D summedSeparation = new Vector3D();
//000456: 
//000457:             // For rule #1, we want the boid to fly towards the center of all of those in its neighborhood.
//000458:             // We find all of those boids, average their positions, and create a velocity vector to move the
//000459:             // boid a bit of the way there.
//000460: 
//000461:             // For rule #2, we want the boid to move away from each other boid it's a bit too close to.
//000462:             // Find all of those boids in its immediate vicinity, and push it away.
//000463: 
//000464:             // For rule #3, we want the boid to match velocities with those boids in its neighborhood.
//000465:             // Sum their velocities, find the average, and move this boid's velocity a bit in that direction.
//000466: 
//000467:             foreach (var other in m_boidModels)
//000468:             {
//000469:                 if (other != boid && 
//000470:                     (other.PreviousPosition - boid.PreviousPosition).Length <= NEIGHBORHOOD_SIZE &&
//000471:                     boid.ComputeAngle(other) <= 135)
//000472:                 {
//000473:                     summedPosition += other.PreviousPosition;
//000474:                     summedVelocity += other.PreviousVelocity;
//000475:                     numNearby++;
//000476: 
//000477:                     if ((other.PreviousPosition - boid.PreviousPosition).Length < MIN_DISTANCE_FROM_NEIGHBOR)
//000478:                     {
//000479:                         summedSeparation -= (other.PreviousPosition - boid.PreviousPosition);
//000480:                     }
//000481:                 }
//000482:             }
//000483: 
//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
//000485:             var rule2_separateFromNearby = summedSeparation;
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
//000487: 
//000488:             return
//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
//000499:             var v = new Vector3D();
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_007b:  ldloc.3
    IL_007c:  brtrue.s   IL_009f

//000174:             {
    IL_007e:  nop
//000175:                 m_renderTimer.Enabled = !m_renderTimer.Enabled;
    IL_007f:  ldarg.0
    IL_0080:  ldfld      class [System]System.Timers.Timer ParallelBoids.MainWindow::m_renderTimer
    IL_0085:  ldarg.0
    IL_0086:  ldfld      class [System]System.Timers.Timer ParallelBoids.MainWindow::m_renderTimer
    IL_008b:  callvirt   instance bool [System]System.Timers.Timer::get_Enabled()
    IL_0090:  ldc.i4.0
    IL_0091:  ceq
    IL_0093:  callvirt   instance void [System]System.Timers.Timer::set_Enabled(bool)
    IL_0098:  nop
//000176:             }
    IL_0099:  nop
//000177: 
//000178:                 // If 't' is pressed, toggle translucency to enable following just one boid
//000179:             else if (e.Key == Key.T)
//000180:             {
//000181:                 for (int i = 1; i < m_boidModels.Length; i++) m_boidModels[i].ToggleTranslucency();
//000182:             }
//000183: 
//000184:                 // If 'a' is pressed, turn auto-panning/zoom of the camera on/off
//000185:             else if (e.Key == Key.A)
//000186:             {
//000187:                 m_autoPanCamera = !m_autoPanCamera;
//000188:             }
//000189: 
//000190:                 // If up or down is pressed and we're in auto-pan mode, 
//000191:             else if ((e.Key == Key.Up || e.Key == Key.Down) && !m_autoPanCamera)
//000192:             {
//000193:                 Zoom(e.Key == Key.Up ? 1 : -1);
//000194:             }
//000195: 
//000196:                 // If 'r' is pressed, reset all of the boids to random positions and velocities
//000197:             else if (e.Key == Key.R)
//000198:             {
//000199:                 RandomizeBoidPositionsAndVelocities();
//000200:             }
//000201: 
//000202:                 // If 'h', display usage instructions to the user
//000203:             else if (e.Key == Key.H)
//000204:             {
//000205:                 string instructions =
//000206:                     "** Window Controls **" + Environment.NewLine +
//000207:                     "Auto-Camera Positioning: 'a'" + Environment.NewLine +
//000208:                     "Pan: Click Left And Drag" + Environment.NewLine +
//000209:                     "Zoom In / Out: Mousewheel (or) Up/Down Keys (or) Ctrl+Middle Mouse Move" + Environment.NewLine +
//000210:                     "Full Screen: Right Double-Click" + Environment.NewLine +
//000211:                     "Restore to Normal Window Size: Right Double-Click (or) Escape Key" + Environment.NewLine +
//000212:                     "Pause: 'b'" + Environment.NewLine +
//000213:                     "Translucency: 't'" + Environment.NewLine +
//000214:                     Environment.NewLine +
//000215:                     "** Boid Controls **" + Environment.NewLine +
//000216:                     "Scatter: Left Double-Click" + Environment.NewLine +
//000217:                     "Change Max Speed: Ctrl + Mousewheel" + Environment.NewLine +
//000218:                     "Randomize: 'r'" + Environment.NewLine +
//000219:                     Environment.NewLine +
//000220:                     "** Parallelism Controls **" + Environment.NewLine +
//000221:                     "Go Parallel: 'p'" + Environment.NewLine;
//000222:                 MessageBox.Show(this, instructions, "Instructions", MessageBoxButton.OK, MessageBoxImage.Information);
//000223:             }
//000224:         }
//000225: 
//000226:         /// <summary>Handle mousedown events.</summary>
//000227:         /// <param name="sender">The sender.</param>
//000228:         /// <param name="e">The eventargs.</param>
//000229:         private void Window_MouseDown(object sender, MouseButtonEventArgs e)
//000230:         {
//000231:             // Log the last mouse position
//000232:             _lastMousePosition = e.GetPosition(this);
//000233:         }
//000234: 
//000235:         /// <summary>Handle mousewheel events.</summary>
//000236:         /// <param name="sender">The sender.</param>
//000237:         /// <param name="e">The eventargs.</param>
//000238:         private void Window_MouseWheel(object sender, MouseWheelEventArgs e)
//000239:         {
//000240:             // If ctrl is pressed, change the max bird speed based on the number of mousewheel turns
//000241:             if ((Keyboard.Modifiers & ModifierKeys.Control) != 0)
//000242:             {
//000243:                 const int MIN_SPEED = 2, MAX_SPEED = 10;
//000244:                 if (e.Delta > 0 && m_speedLimit < MAX_SPEED) m_speedLimit++;
//000245:                 else if (e.Delta < 0 && m_speedLimit > MIN_SPEED) m_speedLimit--;
//000246:             }
//000247:                 // Otherwise, as long as we're not in auto-panning/zooming mode,
//000248:                 // zoom in or out based on the number of mousewheel turns
//000249:             else if (!m_autoPanCamera) Zoom(e.Delta / Mouse.MouseWheelDeltaForOneLine); 
//000250:         }
//000251: 
//000252:         /// <summary>Handle mousedoubleclick events.</summary>
//000253:         /// <param name="sender">The sender.</param>
//000254:         /// <param name="e">The eventargs.</param>
//000255:         private void Window_MouseDoubleClick(object sender, MouseButtonEventArgs e)
//000256:         {
//000257:             // If the right mouse button is double clicked, alternate between maximized and normal view
//000258:             if (e.ChangedButton == MouseButton.Right)
//000259:             {
//000260:                 if (WindowState == WindowState.Maximized)
//000261:                 {
//000262:                     Topmost = false;
//000263:                     WindowStyle = WindowStyle.ThreeDBorderWindow;
//000264:                     WindowState = WindowState.Normal;
//000265:                 }
//000266:                 else
//000267:                 {
//000268:                     Topmost = true;
//000269:                     WindowStyle = WindowStyle.None;
//000270:                     WindowState = WindowState.Maximized;
//000271:                 }
//000272:             }
//000273:                 // If the left mouse button is double clicked, scatter the boids
//000274:             else if (e.ChangedButton == MouseButton.Left)
//000275:             {
//000276:                 Scatter();
//000277:             }
//000278:         }
//000279: 
//000280:         /// <summary>Scatter the boids.</summary>
//000281:         private void Scatter()
//000282:         {
//000283:             // Start scatterring if a scatter isn't already in process
//000284:             if (m_scatterTimer == null)
//000285:             {
//000286:                 // Ka'boom.  Something scares the boids.
//000287:                 SystemSounds.Hand.Play();
//000288: 
//000289:                 // Store original settings
//000290:                 var origHome = m_home;
//000291:                 var origRule1Weight = m_rule1Weight;
//000292:                 var origRule2Weight = m_rule2Weight;
//000293:                 var origRule4Weight = m_rule4Weight;
//000294:                 var origRule5Weight = m_rule5Weight;
//000295: 
//000296:                 // Create new scatter settings
//000297:                 m_home = new Vector3D(0, 0, 0);
//000298:                 m_rule1Weight = origRule1Weight * -5;
//000299:                 m_rule2Weight = origRule2Weight * 2;
//000300:                 m_rule4Weight = 0;
//000301:                 m_rule5Weight = origRule5Weight * -5;
//000302: 
//000303:                 // Start a timer to restore the original settings
//000304:                 m_scatterTimer = new Timer(_ =>
//000305:                 {
//000306:                     // Restore the original settings
//000307:                     m_home = origHome;
//000308:                     m_rule1Weight = origRule1Weight;
//000309:                     m_rule2Weight = origRule2Weight;
//000310:                     m_rule4Weight = origRule4Weight;
//000311:                     m_rule5Weight = origRule5Weight;
//000312: 
//000313:                     // Clean up the timer
//000314:                     m_scatterTimer.Dispose();
//000315:                     m_scatterTimer = null;
//000316:                 }, null, SCATTER_TIME, -1);
//000317:             }
//000318:         }
//000319: 
//000320:         /// <summary>Handle mousemove events.</summary>
//000321:         /// <param name="sender">The sender.</param>
//000322:         /// <param name="e">The eventargs.</param>
//000323:         private void Window_MouseMove(object sender, MouseEventArgs e)
//000324:         {
//000325:             // If we're not auto-panning
//000326:             if (!m_autoPanCamera)
//000327:             {
//000328:                 // Get the new mouse position and compute the difference from the previous
//000329:                 var newPosition = e.GetPosition(this);
//000330:                 var diff = _lastMousePosition - newPosition;
//000331: 
//000332:                 // If the left mouse position was pressed, pan based on the x/y differences
//000333:                 if (e.LeftButton == MouseButtonState.Pressed)
//000334:                 {
//000335:                     camMain.Position = new Point3D(camMain.Position.X + diff.X * .4, camMain.Position.Y - diff.Y * .4, camMain.Position.Z);
//000336:                 }
//000337:                     // If the middle button was pressed, zoom based on the y difference
//000338:                 else if (e.MiddleButton == MouseButtonState.Pressed)
//000339:                 {
//000340:                     Zoom((int)diff.Y);
//000341:                 }
//000342: 
//000343:                 // Store the new position
//000344:                 _lastMousePosition = newPosition;
//000345:             }
//000346:         }
//000347: 
//000348:         /// <summary>Zoom in or out based on the specified degree of zoom.</summary>
//000349:         /// <param name="amountOfChange">Amount to zoom in (positive) or out (negative).</param>
//000350:         private void Zoom(int amountOfChange)
//000351:         {
//000352:             const int ZOOM_FACTOR = 3;
//000353:             camMain.Position = Point3D.Add(camMain.Position, camMain.LookDirection * amountOfChange * ZOOM_FACTOR);
//000354:         }
//000355:         #endregion
//000356: 
//000357:         #region Step and Render
//000358:         /// <summary>Runs the rendering loop.</summary>
//000359:         private void RenderUpdateLoop()
//000360:         {
//000361:             // Loop forever...
//000362:             while (true)
//000363:             {
//000364:                 // Wait to receive a signal that we should render another frame
//000365:                 m_renderSignal.WaitOne();
//000366: 
//000367:                 // Start timing.
//000368:                 m_frameStopwatch.Restart();
//000369: 
//000370:                 // Update the positions and velocities of all of the boids.
//000371:                 StepBoids();
//000372: 
//000373:                 // Update our rendering stats for display to the user
//000374:                 m_totalRenderingMillisecondsSinceLastUserPresentation += m_frameStopwatch.ElapsedMilliseconds;
//000375:                 m_numRendersSinceLastUserPresentation++;
//000376: 
//000377:                 // Render the boids to the UI
//000378:                 Dispatcher.Invoke((Action)RenderBoids, DispatcherPriority.Send, null);
//000379:             }
//000380:         }
//000381: 
//000382:         /// <summary>Step the boids one step, updating their velocities and positions.</summary>
//000383:         private void StepBoids()
//000384:         {
//000385:             // Store the current velocities and positions so that we can operate on an immutable copy
//000386:             foreach (var boid in m_boidModels) boid.StorePositionAndVelocityIntoPrevious();
//000387: 
//000388:             // For each boid, analyze how the various boid rules influence its velocity and position,
//000389:             // then store this new information.  After this step, we'll be able to render the boids.
//000390:             Parallel.ForEach(m_boidModels, m_parallelOptions, boid =>
//000391:             {
//000392:                 var v1_2_3 = PrimaryRules_1_2_3(boid); // weights factored in already in PrimaryRules
//000393:                 var v4 = m_rule4Weight * Rule4_EncourageStayingWithinAviary(boid);
//000394:                 var v5 = m_rule5Weight * Rule5_TendendcyTowardsHome(boid);
//000395: 
//000396:                 boid.Velocity = BoundVelocity(boid.PreviousVelocity + v1_2_3 + v4 + v5, m_speedLimit);
//000397:                 boid.Velocity.Normalize();
//000398: 
//000399:                 var tmpPosition = boid.PreviousPosition + boid.Velocity;
//000400:                 if (tmpPosition.Y >= 0) boid.Position = tmpPosition;
//000401:             });
//000402:         }
//000403: 
//000404:         /// <summary>Render the boids.</summary>
//000405:         private void RenderBoids()
//000406:         {
//000407:             // Make sure the boids are all positioned and pointing correctly
//000408:             foreach (var boid in m_boidModels) boid.TransformByPositionAndVelocity();
//000409: 
//000410:             // Every once in a while, update the user-displayed stats on timings
//000411:             var now = DateTimeOffset.Now;
//000412:             if (now >= m_nextUserPresentation)
//000413:             {
//000414:                 Title = string.Format("Procs: {0}, Time: {1:F2}", m_parallelOptions.MaxDegreeOfParallelism, 
//000415:                     m_numRendersSinceLastUserPresentation > 0 ? 
//000416:                     m_totalRenderingMillisecondsSinceLastUserPresentation / (double)m_numRendersSinceLastUserPresentation : 
//000417:                     0);
//000418:                 m_nextUserPresentation = now.AddSeconds(1);
//000419:                 m_numRendersSinceLastUserPresentation = 0;
//000420:                 m_totalRenderingMillisecondsSinceLastUserPresentation = 0;
//000421:             }
//000422: 
//000423:             // If we're in auto-panning mode, move the camera appropriately
//000424:             if (m_autoPanCamera)
//000425:             {
//000426:                 // Compute the maximum Z value of all of the boids and the center of their mass
//000427:                 double maxZ = double.MinValue;
//000428:                 Vector3D totalPos = new Vector3D();
//000429:                 foreach (var boid in m_boidModels)
//000430:                 {
//000431:                     if (boid.Position.Z > maxZ) maxZ = boid.Position.Z;
//000432:                     totalPos += boid.Position;
//000433:                 }
//000434:                 var newCameraPos = totalPos / m_boidModels.Length;
//000435:                 
//000436:                 // Move the camera to point at the center of the boids, a ways back from the max boid's Z
//000437:                 const int CAMERA_DISTANCE_FROM_MAXZ = 100;
//000438:                 const double CAMERA_SPEED_LIMIT = .01;
//000439:                 var newPos = new Point3D(newCameraPos.X, newCameraPos.Y, maxZ + CAMERA_DISTANCE_FROM_MAXZ);
//000440:                 var cameraVelocity = newPos - camMain.Position;
//000441:                 camMain.Position = camMain.Position + (cameraVelocity * CAMERA_SPEED_LIMIT);
//000442:             }
//000443:         }
//000444:         #endregion
//000445: 
//000446:         #region Boid Rules
//000447:         /// <summary>Run the three primary rules of boidom.</summary>
//000448:         /// <param name="boid">The boid to process.</param>
//000449:         /// <returns>The velocity vector resulting from the three primary rules and their associated weights.</returns>
//000450:         private Vector3D PrimaryRules_1_2_3(Boid boid)
//000451:         {
//000452:             int numNearby = 0;
//000453:             Vector3D summedPosition = new Vector3D();
//000454:             Vector3D summedVelocity = new Vector3D();
//000455:             Vector3D summedSeparation = new Vector3D();
//000456: 
//000457:             // For rule #1, we want the boid to fly towards the center of all of those in its neighborhood.
//000458:             // We find all of those boids, average their positions, and create a velocity vector to move the
//000459:             // boid a bit of the way there.
//000460: 
//000461:             // For rule #2, we want the boid to move away from each other boid it's a bit too close to.
//000462:             // Find all of those boids in its immediate vicinity, and push it away.
//000463: 
//000464:             // For rule #3, we want the boid to match velocities with those boids in its neighborhood.
//000465:             // Sum their velocities, find the average, and move this boid's velocity a bit in that direction.
//000466: 
//000467:             foreach (var other in m_boidModels)
//000468:             {
//000469:                 if (other != boid && 
//000470:                     (other.PreviousPosition - boid.PreviousPosition).Length <= NEIGHBORHOOD_SIZE &&
//000471:                     boid.ComputeAngle(other) <= 135)
//000472:                 {
//000473:                     summedPosition += other.PreviousPosition;
//000474:                     summedVelocity += other.PreviousVelocity;
//000475:                     numNearby++;
//000476: 
//000477:                     if ((other.PreviousPosition - boid.PreviousPosition).Length < MIN_DISTANCE_FROM_NEIGHBOR)
//000478:                     {
//000479:                         summedSeparation -= (other.PreviousPosition - boid.PreviousPosition);
//000480:                     }
//000481:                 }
//000482:             }
//000483: 
//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
//000485:             var rule2_separateFromNearby = summedSeparation;
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
//000487: 
//000488:             return
//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
//000499:             var v = new Vector3D();
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_009a:  br         IL_02ba

//000179:             else if (e.Key == Key.T)
    IL_009f:  ldarg.2
    IL_00a0:  callvirt   instance valuetype [WindowsBase]System.Windows.Input.Key [PresentationCore]System.Windows.Input.KeyEventArgs::get_Key()
    IL_00a5:  ldc.i4.s   63
    IL_00a7:  ceq
    IL_00a9:  ldc.i4.0
    IL_00aa:  ceq
    IL_00ac:  stloc.3
//000180:             {
//000181:                 for (int i = 1; i < m_boidModels.Length; i++) m_boidModels[i].ToggleTranslucency();
//000182:             }
//000183: 
//000184:                 // If 'a' is pressed, turn auto-panning/zoom of the camera on/off
//000185:             else if (e.Key == Key.A)
//000186:             {
//000187:                 m_autoPanCamera = !m_autoPanCamera;
//000188:             }
//000189: 
//000190:                 // If up or down is pressed and we're in auto-pan mode, 
//000191:             else if ((e.Key == Key.Up || e.Key == Key.Down) && !m_autoPanCamera)
//000192:             {
//000193:                 Zoom(e.Key == Key.Up ? 1 : -1);
//000194:             }
//000195: 
//000196:                 // If 'r' is pressed, reset all of the boids to random positions and velocities
//000197:             else if (e.Key == Key.R)
//000198:             {
//000199:                 RandomizeBoidPositionsAndVelocities();
//000200:             }
//000201: 
//000202:                 // If 'h', display usage instructions to the user
//000203:             else if (e.Key == Key.H)
//000204:             {
//000205:                 string instructions =
//000206:                     "** Window Controls **" + Environment.NewLine +
//000207:                     "Auto-Camera Positioning: 'a'" + Environment.NewLine +
//000208:                     "Pan: Click Left And Drag" + Environment.NewLine +
//000209:                     "Zoom In / Out: Mousewheel (or) Up/Down Keys (or) Ctrl+Middle Mouse Move" + Environment.NewLine +
//000210:                     "Full Screen: Right Double-Click" + Environment.NewLine +
//000211:                     "Restore to Normal Window Size: Right Double-Click (or) Escape Key" + Environment.NewLine +
//000212:                     "Pause: 'b'" + Environment.NewLine +
//000213:                     "Translucency: 't'" + Environment.NewLine +
//000214:                     Environment.NewLine +
//000215:                     "** Boid Controls **" + Environment.NewLine +
//000216:                     "Scatter: Left Double-Click" + Environment.NewLine +
//000217:                     "Change Max Speed: Ctrl + Mousewheel" + Environment.NewLine +
//000218:                     "Randomize: 'r'" + Environment.NewLine +
//000219:                     Environment.NewLine +
//000220:                     "** Parallelism Controls **" + Environment.NewLine +
//000221:                     "Go Parallel: 'p'" + Environment.NewLine;
//000222:                 MessageBox.Show(this, instructions, "Instructions", MessageBoxButton.OK, MessageBoxImage.Information);
//000223:             }
//000224:         }
//000225: 
//000226:         /// <summary>Handle mousedown events.</summary>
//000227:         /// <param name="sender">The sender.</param>
//000228:         /// <param name="e">The eventargs.</param>
//000229:         private void Window_MouseDown(object sender, MouseButtonEventArgs e)
//000230:         {
//000231:             // Log the last mouse position
//000232:             _lastMousePosition = e.GetPosition(this);
//000233:         }
//000234: 
//000235:         /// <summary>Handle mousewheel events.</summary>
//000236:         /// <param name="sender">The sender.</param>
//000237:         /// <param name="e">The eventargs.</param>
//000238:         private void Window_MouseWheel(object sender, MouseWheelEventArgs e)
//000239:         {
//000240:             // If ctrl is pressed, change the max bird speed based on the number of mousewheel turns
//000241:             if ((Keyboard.Modifiers & ModifierKeys.Control) != 0)
//000242:             {
//000243:                 const int MIN_SPEED = 2, MAX_SPEED = 10;
//000244:                 if (e.Delta > 0 && m_speedLimit < MAX_SPEED) m_speedLimit++;
//000245:                 else if (e.Delta < 0 && m_speedLimit > MIN_SPEED) m_speedLimit--;
//000246:             }
//000247:                 // Otherwise, as long as we're not in auto-panning/zooming mode,
//000248:                 // zoom in or out based on the number of mousewheel turns
//000249:             else if (!m_autoPanCamera) Zoom(e.Delta / Mouse.MouseWheelDeltaForOneLine); 
//000250:         }
//000251: 
//000252:         /// <summary>Handle mousedoubleclick events.</summary>
//000253:         /// <param name="sender">The sender.</param>
//000254:         /// <param name="e">The eventargs.</param>
//000255:         private void Window_MouseDoubleClick(object sender, MouseButtonEventArgs e)
//000256:         {
//000257:             // If the right mouse button is double clicked, alternate between maximized and normal view
//000258:             if (e.ChangedButton == MouseButton.Right)
//000259:             {
//000260:                 if (WindowState == WindowState.Maximized)
//000261:                 {
//000262:                     Topmost = false;
//000263:                     WindowStyle = WindowStyle.ThreeDBorderWindow;
//000264:                     WindowState = WindowState.Normal;
//000265:                 }
//000266:                 else
//000267:                 {
//000268:                     Topmost = true;
//000269:                     WindowStyle = WindowStyle.None;
//000270:                     WindowState = WindowState.Maximized;
//000271:                 }
//000272:             }
//000273:                 // If the left mouse button is double clicked, scatter the boids
//000274:             else if (e.ChangedButton == MouseButton.Left)
//000275:             {
//000276:                 Scatter();
//000277:             }
//000278:         }
//000279: 
//000280:         /// <summary>Scatter the boids.</summary>
//000281:         private void Scatter()
//000282:         {
//000283:             // Start scatterring if a scatter isn't already in process
//000284:             if (m_scatterTimer == null)
//000285:             {
//000286:                 // Ka'boom.  Something scares the boids.
//000287:                 SystemSounds.Hand.Play();
//000288: 
//000289:                 // Store original settings
//000290:                 var origHome = m_home;
//000291:                 var origRule1Weight = m_rule1Weight;
//000292:                 var origRule2Weight = m_rule2Weight;
//000293:                 var origRule4Weight = m_rule4Weight;
//000294:                 var origRule5Weight = m_rule5Weight;
//000295: 
//000296:                 // Create new scatter settings
//000297:                 m_home = new Vector3D(0, 0, 0);
//000298:                 m_rule1Weight = origRule1Weight * -5;
//000299:                 m_rule2Weight = origRule2Weight * 2;
//000300:                 m_rule4Weight = 0;
//000301:                 m_rule5Weight = origRule5Weight * -5;
//000302: 
//000303:                 // Start a timer to restore the original settings
//000304:                 m_scatterTimer = new Timer(_ =>
//000305:                 {
//000306:                     // Restore the original settings
//000307:                     m_home = origHome;
//000308:                     m_rule1Weight = origRule1Weight;
//000309:                     m_rule2Weight = origRule2Weight;
//000310:                     m_rule4Weight = origRule4Weight;
//000311:                     m_rule5Weight = origRule5Weight;
//000312: 
//000313:                     // Clean up the timer
//000314:                     m_scatterTimer.Dispose();
//000315:                     m_scatterTimer = null;
//000316:                 }, null, SCATTER_TIME, -1);
//000317:             }
//000318:         }
//000319: 
//000320:         /// <summary>Handle mousemove events.</summary>
//000321:         /// <param name="sender">The sender.</param>
//000322:         /// <param name="e">The eventargs.</param>
//000323:         private void Window_MouseMove(object sender, MouseEventArgs e)
//000324:         {
//000325:             // If we're not auto-panning
//000326:             if (!m_autoPanCamera)
//000327:             {
//000328:                 // Get the new mouse position and compute the difference from the previous
//000329:                 var newPosition = e.GetPosition(this);
//000330:                 var diff = _lastMousePosition - newPosition;
//000331: 
//000332:                 // If the left mouse position was pressed, pan based on the x/y differences
//000333:                 if (e.LeftButton == MouseButtonState.Pressed)
//000334:                 {
//000335:                     camMain.Position = new Point3D(camMain.Position.X + diff.X * .4, camMain.Position.Y - diff.Y * .4, camMain.Position.Z);
//000336:                 }
//000337:                     // If the middle button was pressed, zoom based on the y difference
//000338:                 else if (e.MiddleButton == MouseButtonState.Pressed)
//000339:                 {
//000340:                     Zoom((int)diff.Y);
//000341:                 }
//000342: 
//000343:                 // Store the new position
//000344:                 _lastMousePosition = newPosition;
//000345:             }
//000346:         }
//000347: 
//000348:         /// <summary>Zoom in or out based on the specified degree of zoom.</summary>
//000349:         /// <param name="amountOfChange">Amount to zoom in (positive) or out (negative).</param>
//000350:         private void Zoom(int amountOfChange)
//000351:         {
//000352:             const int ZOOM_FACTOR = 3;
//000353:             camMain.Position = Point3D.Add(camMain.Position, camMain.LookDirection * amountOfChange * ZOOM_FACTOR);
//000354:         }
//000355:         #endregion
//000356: 
//000357:         #region Step and Render
//000358:         /// <summary>Runs the rendering loop.</summary>
//000359:         private void RenderUpdateLoop()
//000360:         {
//000361:             // Loop forever...
//000362:             while (true)
//000363:             {
//000364:                 // Wait to receive a signal that we should render another frame
//000365:                 m_renderSignal.WaitOne();
//000366: 
//000367:                 // Start timing.
//000368:                 m_frameStopwatch.Restart();
//000369: 
//000370:                 // Update the positions and velocities of all of the boids.
//000371:                 StepBoids();
//000372: 
//000373:                 // Update our rendering stats for display to the user
//000374:                 m_totalRenderingMillisecondsSinceLastUserPresentation += m_frameStopwatch.ElapsedMilliseconds;
//000375:                 m_numRendersSinceLastUserPresentation++;
//000376: 
//000377:                 // Render the boids to the UI
//000378:                 Dispatcher.Invoke((Action)RenderBoids, DispatcherPriority.Send, null);
//000379:             }
//000380:         }
//000381: 
//000382:         /// <summary>Step the boids one step, updating their velocities and positions.</summary>
//000383:         private void StepBoids()
//000384:         {
//000385:             // Store the current velocities and positions so that we can operate on an immutable copy
//000386:             foreach (var boid in m_boidModels) boid.StorePositionAndVelocityIntoPrevious();
//000387: 
//000388:             // For each boid, analyze how the various boid rules influence its velocity and position,
//000389:             // then store this new information.  After this step, we'll be able to render the boids.
//000390:             Parallel.ForEach(m_boidModels, m_parallelOptions, boid =>
//000391:             {
//000392:                 var v1_2_3 = PrimaryRules_1_2_3(boid); // weights factored in already in PrimaryRules
//000393:                 var v4 = m_rule4Weight * Rule4_EncourageStayingWithinAviary(boid);
//000394:                 var v5 = m_rule5Weight * Rule5_TendendcyTowardsHome(boid);
//000395: 
//000396:                 boid.Velocity = BoundVelocity(boid.PreviousVelocity + v1_2_3 + v4 + v5, m_speedLimit);
//000397:                 boid.Velocity.Normalize();
//000398: 
//000399:                 var tmpPosition = boid.PreviousPosition + boid.Velocity;
//000400:                 if (tmpPosition.Y >= 0) boid.Position = tmpPosition;
//000401:             });
//000402:         }
//000403: 
//000404:         /// <summary>Render the boids.</summary>
//000405:         private void RenderBoids()
//000406:         {
//000407:             // Make sure the boids are all positioned and pointing correctly
//000408:             foreach (var boid in m_boidModels) boid.TransformByPositionAndVelocity();
//000409: 
//000410:             // Every once in a while, update the user-displayed stats on timings
//000411:             var now = DateTimeOffset.Now;
//000412:             if (now >= m_nextUserPresentation)
//000413:             {
//000414:                 Title = string.Format("Procs: {0}, Time: {1:F2}", m_parallelOptions.MaxDegreeOfParallelism, 
//000415:                     m_numRendersSinceLastUserPresentation > 0 ? 
//000416:                     m_totalRenderingMillisecondsSinceLastUserPresentation / (double)m_numRendersSinceLastUserPresentation : 
//000417:                     0);
//000418:                 m_nextUserPresentation = now.AddSeconds(1);
//000419:                 m_numRendersSinceLastUserPresentation = 0;
//000420:                 m_totalRenderingMillisecondsSinceLastUserPresentation = 0;
//000421:             }
//000422: 
//000423:             // If we're in auto-panning mode, move the camera appropriately
//000424:             if (m_autoPanCamera)
//000425:             {
//000426:                 // Compute the maximum Z value of all of the boids and the center of their mass
//000427:                 double maxZ = double.MinValue;
//000428:                 Vector3D totalPos = new Vector3D();
//000429:                 foreach (var boid in m_boidModels)
//000430:                 {
//000431:                     if (boid.Position.Z > maxZ) maxZ = boid.Position.Z;
//000432:                     totalPos += boid.Position;
//000433:                 }
//000434:                 var newCameraPos = totalPos / m_boidModels.Length;
//000435:                 
//000436:                 // Move the camera to point at the center of the boids, a ways back from the max boid's Z
//000437:                 const int CAMERA_DISTANCE_FROM_MAXZ = 100;
//000438:                 const double CAMERA_SPEED_LIMIT = .01;
//000439:                 var newPos = new Point3D(newCameraPos.X, newCameraPos.Y, maxZ + CAMERA_DISTANCE_FROM_MAXZ);
//000440:                 var cameraVelocity = newPos - camMain.Position;
//000441:                 camMain.Position = camMain.Position + (cameraVelocity * CAMERA_SPEED_LIMIT);
//000442:             }
//000443:         }
//000444:         #endregion
//000445: 
//000446:         #region Boid Rules
//000447:         /// <summary>Run the three primary rules of boidom.</summary>
//000448:         /// <param name="boid">The boid to process.</param>
//000449:         /// <returns>The velocity vector resulting from the three primary rules and their associated weights.</returns>
//000450:         private Vector3D PrimaryRules_1_2_3(Boid boid)
//000451:         {
//000452:             int numNearby = 0;
//000453:             Vector3D summedPosition = new Vector3D();
//000454:             Vector3D summedVelocity = new Vector3D();
//000455:             Vector3D summedSeparation = new Vector3D();
//000456: 
//000457:             // For rule #1, we want the boid to fly towards the center of all of those in its neighborhood.
//000458:             // We find all of those boids, average their positions, and create a velocity vector to move the
//000459:             // boid a bit of the way there.
//000460: 
//000461:             // For rule #2, we want the boid to move away from each other boid it's a bit too close to.
//000462:             // Find all of those boids in its immediate vicinity, and push it away.
//000463: 
//000464:             // For rule #3, we want the boid to match velocities with those boids in its neighborhood.
//000465:             // Sum their velocities, find the average, and move this boid's velocity a bit in that direction.
//000466: 
//000467:             foreach (var other in m_boidModels)
//000468:             {
//000469:                 if (other != boid && 
//000470:                     (other.PreviousPosition - boid.PreviousPosition).Length <= NEIGHBORHOOD_SIZE &&
//000471:                     boid.ComputeAngle(other) <= 135)
//000472:                 {
//000473:                     summedPosition += other.PreviousPosition;
//000474:                     summedVelocity += other.PreviousVelocity;
//000475:                     numNearby++;
//000476: 
//000477:                     if ((other.PreviousPosition - boid.PreviousPosition).Length < MIN_DISTANCE_FROM_NEIGHBOR)
//000478:                     {
//000479:                         summedSeparation -= (other.PreviousPosition - boid.PreviousPosition);
//000480:                     }
//000481:                 }
//000482:             }
//000483: 
//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
//000485:             var rule2_separateFromNearby = summedSeparation;
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
//000487: 
//000488:             return
//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
//000499:             var v = new Vector3D();
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_00ad:  ldloc.3
    IL_00ae:  brtrue.s   IL_00dc

//000180:             {
    IL_00b0:  nop
//000181:                 for (int i = 1; i < m_boidModels.Length; i++) m_boidModels[i].ToggleTranslucency();
    IL_00b1:  ldc.i4.1
    IL_00b2:  stloc.1
//000182:             }
//000183: 
//000184:                 // If 'a' is pressed, turn auto-panning/zoom of the camera on/off
//000185:             else if (e.Key == Key.A)
//000186:             {
//000187:                 m_autoPanCamera = !m_autoPanCamera;
//000188:             }
//000189: 
//000190:                 // If up or down is pressed and we're in auto-pan mode, 
//000191:             else if ((e.Key == Key.Up || e.Key == Key.Down) && !m_autoPanCamera)
//000192:             {
//000193:                 Zoom(e.Key == Key.Up ? 1 : -1);
//000194:             }
//000195: 
//000196:                 // If 'r' is pressed, reset all of the boids to random positions and velocities
//000197:             else if (e.Key == Key.R)
//000198:             {
//000199:                 RandomizeBoidPositionsAndVelocities();
//000200:             }
//000201: 
//000202:                 // If 'h', display usage instructions to the user
//000203:             else if (e.Key == Key.H)
//000204:             {
//000205:                 string instructions =
//000206:                     "** Window Controls **" + Environment.NewLine +
//000207:                     "Auto-Camera Positioning: 'a'" + Environment.NewLine +
//000208:                     "Pan: Click Left And Drag" + Environment.NewLine +
//000209:                     "Zoom In / Out: Mousewheel (or) Up/Down Keys (or) Ctrl+Middle Mouse Move" + Environment.NewLine +
//000210:                     "Full Screen: Right Double-Click" + Environment.NewLine +
//000211:                     "Restore to Normal Window Size: Right Double-Click (or) Escape Key" + Environment.NewLine +
//000212:                     "Pause: 'b'" + Environment.NewLine +
//000213:                     "Translucency: 't'" + Environment.NewLine +
//000214:                     Environment.NewLine +
//000215:                     "** Boid Controls **" + Environment.NewLine +
//000216:                     "Scatter: Left Double-Click" + Environment.NewLine +
//000217:                     "Change Max Speed: Ctrl + Mousewheel" + Environment.NewLine +
//000218:                     "Randomize: 'r'" + Environment.NewLine +
//000219:                     Environment.NewLine +
//000220:                     "** Parallelism Controls **" + Environment.NewLine +
//000221:                     "Go Parallel: 'p'" + Environment.NewLine;
//000222:                 MessageBox.Show(this, instructions, "Instructions", MessageBoxButton.OK, MessageBoxImage.Information);
//000223:             }
//000224:         }
//000225: 
//000226:         /// <summary>Handle mousedown events.</summary>
//000227:         /// <param name="sender">The sender.</param>
//000228:         /// <param name="e">The eventargs.</param>
//000229:         private void Window_MouseDown(object sender, MouseButtonEventArgs e)
//000230:         {
//000231:             // Log the last mouse position
//000232:             _lastMousePosition = e.GetPosition(this);
//000233:         }
//000234: 
//000235:         /// <summary>Handle mousewheel events.</summary>
//000236:         /// <param name="sender">The sender.</param>
//000237:         /// <param name="e">The eventargs.</param>
//000238:         private void Window_MouseWheel(object sender, MouseWheelEventArgs e)
//000239:         {
//000240:             // If ctrl is pressed, change the max bird speed based on the number of mousewheel turns
//000241:             if ((Keyboard.Modifiers & ModifierKeys.Control) != 0)
//000242:             {
//000243:                 const int MIN_SPEED = 2, MAX_SPEED = 10;
//000244:                 if (e.Delta > 0 && m_speedLimit < MAX_SPEED) m_speedLimit++;
//000245:                 else if (e.Delta < 0 && m_speedLimit > MIN_SPEED) m_speedLimit--;
//000246:             }
//000247:                 // Otherwise, as long as we're not in auto-panning/zooming mode,
//000248:                 // zoom in or out based on the number of mousewheel turns
//000249:             else if (!m_autoPanCamera) Zoom(e.Delta / Mouse.MouseWheelDeltaForOneLine); 
//000250:         }
//000251: 
//000252:         /// <summary>Handle mousedoubleclick events.</summary>
//000253:         /// <param name="sender">The sender.</param>
//000254:         /// <param name="e">The eventargs.</param>
//000255:         private void Window_MouseDoubleClick(object sender, MouseButtonEventArgs e)
//000256:         {
//000257:             // If the right mouse button is double clicked, alternate between maximized and normal view
//000258:             if (e.ChangedButton == MouseButton.Right)
//000259:             {
//000260:                 if (WindowState == WindowState.Maximized)
//000261:                 {
//000262:                     Topmost = false;
//000263:                     WindowStyle = WindowStyle.ThreeDBorderWindow;
//000264:                     WindowState = WindowState.Normal;
//000265:                 }
//000266:                 else
//000267:                 {
//000268:                     Topmost = true;
//000269:                     WindowStyle = WindowStyle.None;
//000270:                     WindowState = WindowState.Maximized;
//000271:                 }
//000272:             }
//000273:                 // If the left mouse button is double clicked, scatter the boids
//000274:             else if (e.ChangedButton == MouseButton.Left)
//000275:             {
//000276:                 Scatter();
//000277:             }
//000278:         }
//000279: 
//000280:         /// <summary>Scatter the boids.</summary>
//000281:         private void Scatter()
//000282:         {
//000283:             // Start scatterring if a scatter isn't already in process
//000284:             if (m_scatterTimer == null)
//000285:             {
//000286:                 // Ka'boom.  Something scares the boids.
//000287:                 SystemSounds.Hand.Play();
//000288: 
//000289:                 // Store original settings
//000290:                 var origHome = m_home;
//000291:                 var origRule1Weight = m_rule1Weight;
//000292:                 var origRule2Weight = m_rule2Weight;
//000293:                 var origRule4Weight = m_rule4Weight;
//000294:                 var origRule5Weight = m_rule5Weight;
//000295: 
//000296:                 // Create new scatter settings
//000297:                 m_home = new Vector3D(0, 0, 0);
//000298:                 m_rule1Weight = origRule1Weight * -5;
//000299:                 m_rule2Weight = origRule2Weight * 2;
//000300:                 m_rule4Weight = 0;
//000301:                 m_rule5Weight = origRule5Weight * -5;
//000302: 
//000303:                 // Start a timer to restore the original settings
//000304:                 m_scatterTimer = new Timer(_ =>
//000305:                 {
//000306:                     // Restore the original settings
//000307:                     m_home = origHome;
//000308:                     m_rule1Weight = origRule1Weight;
//000309:                     m_rule2Weight = origRule2Weight;
//000310:                     m_rule4Weight = origRule4Weight;
//000311:                     m_rule5Weight = origRule5Weight;
//000312: 
//000313:                     // Clean up the timer
//000314:                     m_scatterTimer.Dispose();
//000315:                     m_scatterTimer = null;
//000316:                 }, null, SCATTER_TIME, -1);
//000317:             }
//000318:         }
//000319: 
//000320:         /// <summary>Handle mousemove events.</summary>
//000321:         /// <param name="sender">The sender.</param>
//000322:         /// <param name="e">The eventargs.</param>
//000323:         private void Window_MouseMove(object sender, MouseEventArgs e)
//000324:         {
//000325:             // If we're not auto-panning
//000326:             if (!m_autoPanCamera)
//000327:             {
//000328:                 // Get the new mouse position and compute the difference from the previous
//000329:                 var newPosition = e.GetPosition(this);
//000330:                 var diff = _lastMousePosition - newPosition;
//000331: 
//000332:                 // If the left mouse position was pressed, pan based on the x/y differences
//000333:                 if (e.LeftButton == MouseButtonState.Pressed)
//000334:                 {
//000335:                     camMain.Position = new Point3D(camMain.Position.X + diff.X * .4, camMain.Position.Y - diff.Y * .4, camMain.Position.Z);
//000336:                 }
//000337:                     // If the middle button was pressed, zoom based on the y difference
//000338:                 else if (e.MiddleButton == MouseButtonState.Pressed)
//000339:                 {
//000340:                     Zoom((int)diff.Y);
//000341:                 }
//000342: 
//000343:                 // Store the new position
//000344:                 _lastMousePosition = newPosition;
//000345:             }
//000346:         }
//000347: 
//000348:         /// <summary>Zoom in or out based on the specified degree of zoom.</summary>
//000349:         /// <param name="amountOfChange">Amount to zoom in (positive) or out (negative).</param>
//000350:         private void Zoom(int amountOfChange)
//000351:         {
//000352:             const int ZOOM_FACTOR = 3;
//000353:             camMain.Position = Point3D.Add(camMain.Position, camMain.LookDirection * amountOfChange * ZOOM_FACTOR);
//000354:         }
//000355:         #endregion
//000356: 
//000357:         #region Step and Render
//000358:         /// <summary>Runs the rendering loop.</summary>
//000359:         private void RenderUpdateLoop()
//000360:         {
//000361:             // Loop forever...
//000362:             while (true)
//000363:             {
//000364:                 // Wait to receive a signal that we should render another frame
//000365:                 m_renderSignal.WaitOne();
//000366: 
//000367:                 // Start timing.
//000368:                 m_frameStopwatch.Restart();
//000369: 
//000370:                 // Update the positions and velocities of all of the boids.
//000371:                 StepBoids();
//000372: 
//000373:                 // Update our rendering stats for display to the user
//000374:                 m_totalRenderingMillisecondsSinceLastUserPresentation += m_frameStopwatch.ElapsedMilliseconds;
//000375:                 m_numRendersSinceLastUserPresentation++;
//000376: 
//000377:                 // Render the boids to the UI
//000378:                 Dispatcher.Invoke((Action)RenderBoids, DispatcherPriority.Send, null);
//000379:             }
//000380:         }
//000381: 
//000382:         /// <summary>Step the boids one step, updating their velocities and positions.</summary>
//000383:         private void StepBoids()
//000384:         {
//000385:             // Store the current velocities and positions so that we can operate on an immutable copy
//000386:             foreach (var boid in m_boidModels) boid.StorePositionAndVelocityIntoPrevious();
//000387: 
//000388:             // For each boid, analyze how the various boid rules influence its velocity and position,
//000389:             // then store this new information.  After this step, we'll be able to render the boids.
//000390:             Parallel.ForEach(m_boidModels, m_parallelOptions, boid =>
//000391:             {
//000392:                 var v1_2_3 = PrimaryRules_1_2_3(boid); // weights factored in already in PrimaryRules
//000393:                 var v4 = m_rule4Weight * Rule4_EncourageStayingWithinAviary(boid);
//000394:                 var v5 = m_rule5Weight * Rule5_TendendcyTowardsHome(boid);
//000395: 
//000396:                 boid.Velocity = BoundVelocity(boid.PreviousVelocity + v1_2_3 + v4 + v5, m_speedLimit);
//000397:                 boid.Velocity.Normalize();
//000398: 
//000399:                 var tmpPosition = boid.PreviousPosition + boid.Velocity;
//000400:                 if (tmpPosition.Y >= 0) boid.Position = tmpPosition;
//000401:             });
//000402:         }
//000403: 
//000404:         /// <summary>Render the boids.</summary>
//000405:         private void RenderBoids()
//000406:         {
//000407:             // Make sure the boids are all positioned and pointing correctly
//000408:             foreach (var boid in m_boidModels) boid.TransformByPositionAndVelocity();
//000409: 
//000410:             // Every once in a while, update the user-displayed stats on timings
//000411:             var now = DateTimeOffset.Now;
//000412:             if (now >= m_nextUserPresentation)
//000413:             {
//000414:                 Title = string.Format("Procs: {0}, Time: {1:F2}", m_parallelOptions.MaxDegreeOfParallelism, 
//000415:                     m_numRendersSinceLastUserPresentation > 0 ? 
//000416:                     m_totalRenderingMillisecondsSinceLastUserPresentation / (double)m_numRendersSinceLastUserPresentation : 
//000417:                     0);
//000418:                 m_nextUserPresentation = now.AddSeconds(1);
//000419:                 m_numRendersSinceLastUserPresentation = 0;
//000420:                 m_totalRenderingMillisecondsSinceLastUserPresentation = 0;
//000421:             }
//000422: 
//000423:             // If we're in auto-panning mode, move the camera appropriately
//000424:             if (m_autoPanCamera)
//000425:             {
//000426:                 // Compute the maximum Z value of all of the boids and the center of their mass
//000427:                 double maxZ = double.MinValue;
//000428:                 Vector3D totalPos = new Vector3D();
//000429:                 foreach (var boid in m_boidModels)
//000430:                 {
//000431:                     if (boid.Position.Z > maxZ) maxZ = boid.Position.Z;
//000432:                     totalPos += boid.Position;
//000433:                 }
//000434:                 var newCameraPos = totalPos / m_boidModels.Length;
//000435:                 
//000436:                 // Move the camera to point at the center of the boids, a ways back from the max boid's Z
//000437:                 const int CAMERA_DISTANCE_FROM_MAXZ = 100;
//000438:                 const double CAMERA_SPEED_LIMIT = .01;
//000439:                 var newPos = new Point3D(newCameraPos.X, newCameraPos.Y, maxZ + CAMERA_DISTANCE_FROM_MAXZ);
//000440:                 var cameraVelocity = newPos - camMain.Position;
//000441:                 camMain.Position = camMain.Position + (cameraVelocity * CAMERA_SPEED_LIMIT);
//000442:             }
//000443:         }
//000444:         #endregion
//000445: 
//000446:         #region Boid Rules
//000447:         /// <summary>Run the three primary rules of boidom.</summary>
//000448:         /// <param name="boid">The boid to process.</param>
//000449:         /// <returns>The velocity vector resulting from the three primary rules and their associated weights.</returns>
//000450:         private Vector3D PrimaryRules_1_2_3(Boid boid)
//000451:         {
//000452:             int numNearby = 0;
//000453:             Vector3D summedPosition = new Vector3D();
//000454:             Vector3D summedVelocity = new Vector3D();
//000455:             Vector3D summedSeparation = new Vector3D();
//000456: 
//000457:             // For rule #1, we want the boid to fly towards the center of all of those in its neighborhood.
//000458:             // We find all of those boids, average their positions, and create a velocity vector to move the
//000459:             // boid a bit of the way there.
//000460: 
//000461:             // For rule #2, we want the boid to move away from each other boid it's a bit too close to.
//000462:             // Find all of those boids in its immediate vicinity, and push it away.
//000463: 
//000464:             // For rule #3, we want the boid to match velocities with those boids in its neighborhood.
//000465:             // Sum their velocities, find the average, and move this boid's velocity a bit in that direction.
//000466: 
//000467:             foreach (var other in m_boidModels)
//000468:             {
//000469:                 if (other != boid && 
//000470:                     (other.PreviousPosition - boid.PreviousPosition).Length <= NEIGHBORHOOD_SIZE &&
//000471:                     boid.ComputeAngle(other) <= 135)
//000472:                 {
//000473:                     summedPosition += other.PreviousPosition;
//000474:                     summedVelocity += other.PreviousVelocity;
//000475:                     numNearby++;
//000476: 
//000477:                     if ((other.PreviousPosition - boid.PreviousPosition).Length < MIN_DISTANCE_FROM_NEIGHBOR)
//000478:                     {
//000479:                         summedSeparation -= (other.PreviousPosition - boid.PreviousPosition);
//000480:                     }
//000481:                 }
//000482:             }
//000483: 
//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
//000485:             var rule2_separateFromNearby = summedSeparation;
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
//000487: 
//000488:             return
//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
//000499:             var v = new Vector3D();
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_00b3:  br.s       IL_00c7

//000181:                 for (int i = 1; i < m_boidModels.Length; i++) m_boidModels[i].ToggleTranslucency();
    IL_00b5:  ldarg.0
    IL_00b6:  ldfld      class ParallelBoids.Boid[] ParallelBoids.MainWindow::m_boidModels
    IL_00bb:  ldloc.1
    IL_00bc:  ldelem.ref
    IL_00bd:  callvirt   instance void ParallelBoids.Boid::ToggleTranslucency()
    IL_00c2:  nop
    IL_00c3:  ldloc.1
    IL_00c4:  ldc.i4.1
    IL_00c5:  add
    IL_00c6:  stloc.1
    IL_00c7:  ldloc.1
    IL_00c8:  ldarg.0
    IL_00c9:  ldfld      class ParallelBoids.Boid[] ParallelBoids.MainWindow::m_boidModels
    IL_00ce:  ldlen
    IL_00cf:  conv.i4
    IL_00d0:  clt
    IL_00d2:  stloc.3
//000182:             }
//000183: 
//000184:                 // If 'a' is pressed, turn auto-panning/zoom of the camera on/off
//000185:             else if (e.Key == Key.A)
//000186:             {
//000187:                 m_autoPanCamera = !m_autoPanCamera;
//000188:             }
//000189: 
//000190:                 // If up or down is pressed and we're in auto-pan mode, 
//000191:             else if ((e.Key == Key.Up || e.Key == Key.Down) && !m_autoPanCamera)
//000192:             {
//000193:                 Zoom(e.Key == Key.Up ? 1 : -1);
//000194:             }
//000195: 
//000196:                 // If 'r' is pressed, reset all of the boids to random positions and velocities
//000197:             else if (e.Key == Key.R)
//000198:             {
//000199:                 RandomizeBoidPositionsAndVelocities();
//000200:             }
//000201: 
//000202:                 // If 'h', display usage instructions to the user
//000203:             else if (e.Key == Key.H)
//000204:             {
//000205:                 string instructions =
//000206:                     "** Window Controls **" + Environment.NewLine +
//000207:                     "Auto-Camera Positioning: 'a'" + Environment.NewLine +
//000208:                     "Pan: Click Left And Drag" + Environment.NewLine +
//000209:                     "Zoom In / Out: Mousewheel (or) Up/Down Keys (or) Ctrl+Middle Mouse Move" + Environment.NewLine +
//000210:                     "Full Screen: Right Double-Click" + Environment.NewLine +
//000211:                     "Restore to Normal Window Size: Right Double-Click (or) Escape Key" + Environment.NewLine +
//000212:                     "Pause: 'b'" + Environment.NewLine +
//000213:                     "Translucency: 't'" + Environment.NewLine +
//000214:                     Environment.NewLine +
//000215:                     "** Boid Controls **" + Environment.NewLine +
//000216:                     "Scatter: Left Double-Click" + Environment.NewLine +
//000217:                     "Change Max Speed: Ctrl + Mousewheel" + Environment.NewLine +
//000218:                     "Randomize: 'r'" + Environment.NewLine +
//000219:                     Environment.NewLine +
//000220:                     "** Parallelism Controls **" + Environment.NewLine +
//000221:                     "Go Parallel: 'p'" + Environment.NewLine;
//000222:                 MessageBox.Show(this, instructions, "Instructions", MessageBoxButton.OK, MessageBoxImage.Information);
//000223:             }
//000224:         }
//000225: 
//000226:         /// <summary>Handle mousedown events.</summary>
//000227:         /// <param name="sender">The sender.</param>
//000228:         /// <param name="e">The eventargs.</param>
//000229:         private void Window_MouseDown(object sender, MouseButtonEventArgs e)
//000230:         {
//000231:             // Log the last mouse position
//000232:             _lastMousePosition = e.GetPosition(this);
//000233:         }
//000234: 
//000235:         /// <summary>Handle mousewheel events.</summary>
//000236:         /// <param name="sender">The sender.</param>
//000237:         /// <param name="e">The eventargs.</param>
//000238:         private void Window_MouseWheel(object sender, MouseWheelEventArgs e)
//000239:         {
//000240:             // If ctrl is pressed, change the max bird speed based on the number of mousewheel turns
//000241:             if ((Keyboard.Modifiers & ModifierKeys.Control) != 0)
//000242:             {
//000243:                 const int MIN_SPEED = 2, MAX_SPEED = 10;
//000244:                 if (e.Delta > 0 && m_speedLimit < MAX_SPEED) m_speedLimit++;
//000245:                 else if (e.Delta < 0 && m_speedLimit > MIN_SPEED) m_speedLimit--;
//000246:             }
//000247:                 // Otherwise, as long as we're not in auto-panning/zooming mode,
//000248:                 // zoom in or out based on the number of mousewheel turns
//000249:             else if (!m_autoPanCamera) Zoom(e.Delta / Mouse.MouseWheelDeltaForOneLine); 
//000250:         }
//000251: 
//000252:         /// <summary>Handle mousedoubleclick events.</summary>
//000253:         /// <param name="sender">The sender.</param>
//000254:         /// <param name="e">The eventargs.</param>
//000255:         private void Window_MouseDoubleClick(object sender, MouseButtonEventArgs e)
//000256:         {
//000257:             // If the right mouse button is double clicked, alternate between maximized and normal view
//000258:             if (e.ChangedButton == MouseButton.Right)
//000259:             {
//000260:                 if (WindowState == WindowState.Maximized)
//000261:                 {
//000262:                     Topmost = false;
//000263:                     WindowStyle = WindowStyle.ThreeDBorderWindow;
//000264:                     WindowState = WindowState.Normal;
//000265:                 }
//000266:                 else
//000267:                 {
//000268:                     Topmost = true;
//000269:                     WindowStyle = WindowStyle.None;
//000270:                     WindowState = WindowState.Maximized;
//000271:                 }
//000272:             }
//000273:                 // If the left mouse button is double clicked, scatter the boids
//000274:             else if (e.ChangedButton == MouseButton.Left)
//000275:             {
//000276:                 Scatter();
//000277:             }
//000278:         }
//000279: 
//000280:         /// <summary>Scatter the boids.</summary>
//000281:         private void Scatter()
//000282:         {
//000283:             // Start scatterring if a scatter isn't already in process
//000284:             if (m_scatterTimer == null)
//000285:             {
//000286:                 // Ka'boom.  Something scares the boids.
//000287:                 SystemSounds.Hand.Play();
//000288: 
//000289:                 // Store original settings
//000290:                 var origHome = m_home;
//000291:                 var origRule1Weight = m_rule1Weight;
//000292:                 var origRule2Weight = m_rule2Weight;
//000293:                 var origRule4Weight = m_rule4Weight;
//000294:                 var origRule5Weight = m_rule5Weight;
//000295: 
//000296:                 // Create new scatter settings
//000297:                 m_home = new Vector3D(0, 0, 0);
//000298:                 m_rule1Weight = origRule1Weight * -5;
//000299:                 m_rule2Weight = origRule2Weight * 2;
//000300:                 m_rule4Weight = 0;
//000301:                 m_rule5Weight = origRule5Weight * -5;
//000302: 
//000303:                 // Start a timer to restore the original settings
//000304:                 m_scatterTimer = new Timer(_ =>
//000305:                 {
//000306:                     // Restore the original settings
//000307:                     m_home = origHome;
//000308:                     m_rule1Weight = origRule1Weight;
//000309:                     m_rule2Weight = origRule2Weight;
//000310:                     m_rule4Weight = origRule4Weight;
//000311:                     m_rule5Weight = origRule5Weight;
//000312: 
//000313:                     // Clean up the timer
//000314:                     m_scatterTimer.Dispose();
//000315:                     m_scatterTimer = null;
//000316:                 }, null, SCATTER_TIME, -1);
//000317:             }
//000318:         }
//000319: 
//000320:         /// <summary>Handle mousemove events.</summary>
//000321:         /// <param name="sender">The sender.</param>
//000322:         /// <param name="e">The eventargs.</param>
//000323:         private void Window_MouseMove(object sender, MouseEventArgs e)
//000324:         {
//000325:             // If we're not auto-panning
//000326:             if (!m_autoPanCamera)
//000327:             {
//000328:                 // Get the new mouse position and compute the difference from the previous
//000329:                 var newPosition = e.GetPosition(this);
//000330:                 var diff = _lastMousePosition - newPosition;
//000331: 
//000332:                 // If the left mouse position was pressed, pan based on the x/y differences
//000333:                 if (e.LeftButton == MouseButtonState.Pressed)
//000334:                 {
//000335:                     camMain.Position = new Point3D(camMain.Position.X + diff.X * .4, camMain.Position.Y - diff.Y * .4, camMain.Position.Z);
//000336:                 }
//000337:                     // If the middle button was pressed, zoom based on the y difference
//000338:                 else if (e.MiddleButton == MouseButtonState.Pressed)
//000339:                 {
//000340:                     Zoom((int)diff.Y);
//000341:                 }
//000342: 
//000343:                 // Store the new position
//000344:                 _lastMousePosition = newPosition;
//000345:             }
//000346:         }
//000347: 
//000348:         /// <summary>Zoom in or out based on the specified degree of zoom.</summary>
//000349:         /// <param name="amountOfChange">Amount to zoom in (positive) or out (negative).</param>
//000350:         private void Zoom(int amountOfChange)
//000351:         {
//000352:             const int ZOOM_FACTOR = 3;
//000353:             camMain.Position = Point3D.Add(camMain.Position, camMain.LookDirection * amountOfChange * ZOOM_FACTOR);
//000354:         }
//000355:         #endregion
//000356: 
//000357:         #region Step and Render
//000358:         /// <summary>Runs the rendering loop.</summary>
//000359:         private void RenderUpdateLoop()
//000360:         {
//000361:             // Loop forever...
//000362:             while (true)
//000363:             {
//000364:                 // Wait to receive a signal that we should render another frame
//000365:                 m_renderSignal.WaitOne();
//000366: 
//000367:                 // Start timing.
//000368:                 m_frameStopwatch.Restart();
//000369: 
//000370:                 // Update the positions and velocities of all of the boids.
//000371:                 StepBoids();
//000372: 
//000373:                 // Update our rendering stats for display to the user
//000374:                 m_totalRenderingMillisecondsSinceLastUserPresentation += m_frameStopwatch.ElapsedMilliseconds;
//000375:                 m_numRendersSinceLastUserPresentation++;
//000376: 
//000377:                 // Render the boids to the UI
//000378:                 Dispatcher.Invoke((Action)RenderBoids, DispatcherPriority.Send, null);
//000379:             }
//000380:         }
//000381: 
//000382:         /// <summary>Step the boids one step, updating their velocities and positions.</summary>
//000383:         private void StepBoids()
//000384:         {
//000385:             // Store the current velocities and positions so that we can operate on an immutable copy
//000386:             foreach (var boid in m_boidModels) boid.StorePositionAndVelocityIntoPrevious();
//000387: 
//000388:             // For each boid, analyze how the various boid rules influence its velocity and position,
//000389:             // then store this new information.  After this step, we'll be able to render the boids.
//000390:             Parallel.ForEach(m_boidModels, m_parallelOptions, boid =>
//000391:             {
//000392:                 var v1_2_3 = PrimaryRules_1_2_3(boid); // weights factored in already in PrimaryRules
//000393:                 var v4 = m_rule4Weight * Rule4_EncourageStayingWithinAviary(boid);
//000394:                 var v5 = m_rule5Weight * Rule5_TendendcyTowardsHome(boid);
//000395: 
//000396:                 boid.Velocity = BoundVelocity(boid.PreviousVelocity + v1_2_3 + v4 + v5, m_speedLimit);
//000397:                 boid.Velocity.Normalize();
//000398: 
//000399:                 var tmpPosition = boid.PreviousPosition + boid.Velocity;
//000400:                 if (tmpPosition.Y >= 0) boid.Position = tmpPosition;
//000401:             });
//000402:         }
//000403: 
//000404:         /// <summary>Render the boids.</summary>
//000405:         private void RenderBoids()
//000406:         {
//000407:             // Make sure the boids are all positioned and pointing correctly
//000408:             foreach (var boid in m_boidModels) boid.TransformByPositionAndVelocity();
//000409: 
//000410:             // Every once in a while, update the user-displayed stats on timings
//000411:             var now = DateTimeOffset.Now;
//000412:             if (now >= m_nextUserPresentation)
//000413:             {
//000414:                 Title = string.Format("Procs: {0}, Time: {1:F2}", m_parallelOptions.MaxDegreeOfParallelism, 
//000415:                     m_numRendersSinceLastUserPresentation > 0 ? 
//000416:                     m_totalRenderingMillisecondsSinceLastUserPresentation / (double)m_numRendersSinceLastUserPresentation : 
//000417:                     0);
//000418:                 m_nextUserPresentation = now.AddSeconds(1);
//000419:                 m_numRendersSinceLastUserPresentation = 0;
//000420:                 m_totalRenderingMillisecondsSinceLastUserPresentation = 0;
//000421:             }
//000422: 
//000423:             // If we're in auto-panning mode, move the camera appropriately
//000424:             if (m_autoPanCamera)
//000425:             {
//000426:                 // Compute the maximum Z value of all of the boids and the center of their mass
//000427:                 double maxZ = double.MinValue;
//000428:                 Vector3D totalPos = new Vector3D();
//000429:                 foreach (var boid in m_boidModels)
//000430:                 {
//000431:                     if (boid.Position.Z > maxZ) maxZ = boid.Position.Z;
//000432:                     totalPos += boid.Position;
//000433:                 }
//000434:                 var newCameraPos = totalPos / m_boidModels.Length;
//000435:                 
//000436:                 // Move the camera to point at the center of the boids, a ways back from the max boid's Z
//000437:                 const int CAMERA_DISTANCE_FROM_MAXZ = 100;
//000438:                 const double CAMERA_SPEED_LIMIT = .01;
//000439:                 var newPos = new Point3D(newCameraPos.X, newCameraPos.Y, maxZ + CAMERA_DISTANCE_FROM_MAXZ);
//000440:                 var cameraVelocity = newPos - camMain.Position;
//000441:                 camMain.Position = camMain.Position + (cameraVelocity * CAMERA_SPEED_LIMIT);
//000442:             }
//000443:         }
//000444:         #endregion
//000445: 
//000446:         #region Boid Rules
//000447:         /// <summary>Run the three primary rules of boidom.</summary>
//000448:         /// <param name="boid">The boid to process.</param>
//000449:         /// <returns>The velocity vector resulting from the three primary rules and their associated weights.</returns>
//000450:         private Vector3D PrimaryRules_1_2_3(Boid boid)
//000451:         {
//000452:             int numNearby = 0;
//000453:             Vector3D summedPosition = new Vector3D();
//000454:             Vector3D summedVelocity = new Vector3D();
//000455:             Vector3D summedSeparation = new Vector3D();
//000456: 
//000457:             // For rule #1, we want the boid to fly towards the center of all of those in its neighborhood.
//000458:             // We find all of those boids, average their positions, and create a velocity vector to move the
//000459:             // boid a bit of the way there.
//000460: 
//000461:             // For rule #2, we want the boid to move away from each other boid it's a bit too close to.
//000462:             // Find all of those boids in its immediate vicinity, and push it away.
//000463: 
//000464:             // For rule #3, we want the boid to match velocities with those boids in its neighborhood.
//000465:             // Sum their velocities, find the average, and move this boid's velocity a bit in that direction.
//000466: 
//000467:             foreach (var other in m_boidModels)
//000468:             {
//000469:                 if (other != boid && 
//000470:                     (other.PreviousPosition - boid.PreviousPosition).Length <= NEIGHBORHOOD_SIZE &&
//000471:                     boid.ComputeAngle(other) <= 135)
//000472:                 {
//000473:                     summedPosition += other.PreviousPosition;
//000474:                     summedVelocity += other.PreviousVelocity;
//000475:                     numNearby++;
//000476: 
//000477:                     if ((other.PreviousPosition - boid.PreviousPosition).Length < MIN_DISTANCE_FROM_NEIGHBOR)
//000478:                     {
//000479:                         summedSeparation -= (other.PreviousPosition - boid.PreviousPosition);
//000480:                     }
//000481:                 }
//000482:             }
//000483: 
//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
//000485:             var rule2_separateFromNearby = summedSeparation;
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
//000487: 
//000488:             return
//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
//000499:             var v = new Vector3D();
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_00d3:  ldloc.3
    IL_00d4:  brtrue.s   IL_00b5

//000182:             }
    IL_00d6:  nop
//000183: 
//000184:                 // If 'a' is pressed, turn auto-panning/zoom of the camera on/off
//000185:             else if (e.Key == Key.A)
//000186:             {
//000187:                 m_autoPanCamera = !m_autoPanCamera;
//000188:             }
//000189: 
//000190:                 // If up or down is pressed and we're in auto-pan mode, 
//000191:             else if ((e.Key == Key.Up || e.Key == Key.Down) && !m_autoPanCamera)
//000192:             {
//000193:                 Zoom(e.Key == Key.Up ? 1 : -1);
//000194:             }
//000195: 
//000196:                 // If 'r' is pressed, reset all of the boids to random positions and velocities
//000197:             else if (e.Key == Key.R)
//000198:             {
//000199:                 RandomizeBoidPositionsAndVelocities();
//000200:             }
//000201: 
//000202:                 // If 'h', display usage instructions to the user
//000203:             else if (e.Key == Key.H)
//000204:             {
//000205:                 string instructions =
//000206:                     "** Window Controls **" + Environment.NewLine +
//000207:                     "Auto-Camera Positioning: 'a'" + Environment.NewLine +
//000208:                     "Pan: Click Left And Drag" + Environment.NewLine +
//000209:                     "Zoom In / Out: Mousewheel (or) Up/Down Keys (or) Ctrl+Middle Mouse Move" + Environment.NewLine +
//000210:                     "Full Screen: Right Double-Click" + Environment.NewLine +
//000211:                     "Restore to Normal Window Size: Right Double-Click (or) Escape Key" + Environment.NewLine +
//000212:                     "Pause: 'b'" + Environment.NewLine +
//000213:                     "Translucency: 't'" + Environment.NewLine +
//000214:                     Environment.NewLine +
//000215:                     "** Boid Controls **" + Environment.NewLine +
//000216:                     "Scatter: Left Double-Click" + Environment.NewLine +
//000217:                     "Change Max Speed: Ctrl + Mousewheel" + Environment.NewLine +
//000218:                     "Randomize: 'r'" + Environment.NewLine +
//000219:                     Environment.NewLine +
//000220:                     "** Parallelism Controls **" + Environment.NewLine +
//000221:                     "Go Parallel: 'p'" + Environment.NewLine;
//000222:                 MessageBox.Show(this, instructions, "Instructions", MessageBoxButton.OK, MessageBoxImage.Information);
//000223:             }
//000224:         }
//000225: 
//000226:         /// <summary>Handle mousedown events.</summary>
//000227:         /// <param name="sender">The sender.</param>
//000228:         /// <param name="e">The eventargs.</param>
//000229:         private void Window_MouseDown(object sender, MouseButtonEventArgs e)
//000230:         {
//000231:             // Log the last mouse position
//000232:             _lastMousePosition = e.GetPosition(this);
//000233:         }
//000234: 
//000235:         /// <summary>Handle mousewheel events.</summary>
//000236:         /// <param name="sender">The sender.</param>
//000237:         /// <param name="e">The eventargs.</param>
//000238:         private void Window_MouseWheel(object sender, MouseWheelEventArgs e)
//000239:         {
//000240:             // If ctrl is pressed, change the max bird speed based on the number of mousewheel turns
//000241:             if ((Keyboard.Modifiers & ModifierKeys.Control) != 0)
//000242:             {
//000243:                 const int MIN_SPEED = 2, MAX_SPEED = 10;
//000244:                 if (e.Delta > 0 && m_speedLimit < MAX_SPEED) m_speedLimit++;
//000245:                 else if (e.Delta < 0 && m_speedLimit > MIN_SPEED) m_speedLimit--;
//000246:             }
//000247:                 // Otherwise, as long as we're not in auto-panning/zooming mode,
//000248:                 // zoom in or out based on the number of mousewheel turns
//000249:             else if (!m_autoPanCamera) Zoom(e.Delta / Mouse.MouseWheelDeltaForOneLine); 
//000250:         }
//000251: 
//000252:         /// <summary>Handle mousedoubleclick events.</summary>
//000253:         /// <param name="sender">The sender.</param>
//000254:         /// <param name="e">The eventargs.</param>
//000255:         private void Window_MouseDoubleClick(object sender, MouseButtonEventArgs e)
//000256:         {
//000257:             // If the right mouse button is double clicked, alternate between maximized and normal view
//000258:             if (e.ChangedButton == MouseButton.Right)
//000259:             {
//000260:                 if (WindowState == WindowState.Maximized)
//000261:                 {
//000262:                     Topmost = false;
//000263:                     WindowStyle = WindowStyle.ThreeDBorderWindow;
//000264:                     WindowState = WindowState.Normal;
//000265:                 }
//000266:                 else
//000267:                 {
//000268:                     Topmost = true;
//000269:                     WindowStyle = WindowStyle.None;
//000270:                     WindowState = WindowState.Maximized;
//000271:                 }
//000272:             }
//000273:                 // If the left mouse button is double clicked, scatter the boids
//000274:             else if (e.ChangedButton == MouseButton.Left)
//000275:             {
//000276:                 Scatter();
//000277:             }
//000278:         }
//000279: 
//000280:         /// <summary>Scatter the boids.</summary>
//000281:         private void Scatter()
//000282:         {
//000283:             // Start scatterring if a scatter isn't already in process
//000284:             if (m_scatterTimer == null)
//000285:             {
//000286:                 // Ka'boom.  Something scares the boids.
//000287:                 SystemSounds.Hand.Play();
//000288: 
//000289:                 // Store original settings
//000290:                 var origHome = m_home;
//000291:                 var origRule1Weight = m_rule1Weight;
//000292:                 var origRule2Weight = m_rule2Weight;
//000293:                 var origRule4Weight = m_rule4Weight;
//000294:                 var origRule5Weight = m_rule5Weight;
//000295: 
//000296:                 // Create new scatter settings
//000297:                 m_home = new Vector3D(0, 0, 0);
//000298:                 m_rule1Weight = origRule1Weight * -5;
//000299:                 m_rule2Weight = origRule2Weight * 2;
//000300:                 m_rule4Weight = 0;
//000301:                 m_rule5Weight = origRule5Weight * -5;
//000302: 
//000303:                 // Start a timer to restore the original settings
//000304:                 m_scatterTimer = new Timer(_ =>
//000305:                 {
//000306:                     // Restore the original settings
//000307:                     m_home = origHome;
//000308:                     m_rule1Weight = origRule1Weight;
//000309:                     m_rule2Weight = origRule2Weight;
//000310:                     m_rule4Weight = origRule4Weight;
//000311:                     m_rule5Weight = origRule5Weight;
//000312: 
//000313:                     // Clean up the timer
//000314:                     m_scatterTimer.Dispose();
//000315:                     m_scatterTimer = null;
//000316:                 }, null, SCATTER_TIME, -1);
//000317:             }
//000318:         }
//000319: 
//000320:         /// <summary>Handle mousemove events.</summary>
//000321:         /// <param name="sender">The sender.</param>
//000322:         /// <param name="e">The eventargs.</param>
//000323:         private void Window_MouseMove(object sender, MouseEventArgs e)
//000324:         {
//000325:             // If we're not auto-panning
//000326:             if (!m_autoPanCamera)
//000327:             {
//000328:                 // Get the new mouse position and compute the difference from the previous
//000329:                 var newPosition = e.GetPosition(this);
//000330:                 var diff = _lastMousePosition - newPosition;
//000331: 
//000332:                 // If the left mouse position was pressed, pan based on the x/y differences
//000333:                 if (e.LeftButton == MouseButtonState.Pressed)
//000334:                 {
//000335:                     camMain.Position = new Point3D(camMain.Position.X + diff.X * .4, camMain.Position.Y - diff.Y * .4, camMain.Position.Z);
//000336:                 }
//000337:                     // If the middle button was pressed, zoom based on the y difference
//000338:                 else if (e.MiddleButton == MouseButtonState.Pressed)
//000339:                 {
//000340:                     Zoom((int)diff.Y);
//000341:                 }
//000342: 
//000343:                 // Store the new position
//000344:                 _lastMousePosition = newPosition;
//000345:             }
//000346:         }
//000347: 
//000348:         /// <summary>Zoom in or out based on the specified degree of zoom.</summary>
//000349:         /// <param name="amountOfChange">Amount to zoom in (positive) or out (negative).</param>
//000350:         private void Zoom(int amountOfChange)
//000351:         {
//000352:             const int ZOOM_FACTOR = 3;
//000353:             camMain.Position = Point3D.Add(camMain.Position, camMain.LookDirection * amountOfChange * ZOOM_FACTOR);
//000354:         }
//000355:         #endregion
//000356: 
//000357:         #region Step and Render
//000358:         /// <summary>Runs the rendering loop.</summary>
//000359:         private void RenderUpdateLoop()
//000360:         {
//000361:             // Loop forever...
//000362:             while (true)
//000363:             {
//000364:                 // Wait to receive a signal that we should render another frame
//000365:                 m_renderSignal.WaitOne();
//000366: 
//000367:                 // Start timing.
//000368:                 m_frameStopwatch.Restart();
//000369: 
//000370:                 // Update the positions and velocities of all of the boids.
//000371:                 StepBoids();
//000372: 
//000373:                 // Update our rendering stats for display to the user
//000374:                 m_totalRenderingMillisecondsSinceLastUserPresentation += m_frameStopwatch.ElapsedMilliseconds;
//000375:                 m_numRendersSinceLastUserPresentation++;
//000376: 
//000377:                 // Render the boids to the UI
//000378:                 Dispatcher.Invoke((Action)RenderBoids, DispatcherPriority.Send, null);
//000379:             }
//000380:         }
//000381: 
//000382:         /// <summary>Step the boids one step, updating their velocities and positions.</summary>
//000383:         private void StepBoids()
//000384:         {
//000385:             // Store the current velocities and positions so that we can operate on an immutable copy
//000386:             foreach (var boid in m_boidModels) boid.StorePositionAndVelocityIntoPrevious();
//000387: 
//000388:             // For each boid, analyze how the various boid rules influence its velocity and position,
//000389:             // then store this new information.  After this step, we'll be able to render the boids.
//000390:             Parallel.ForEach(m_boidModels, m_parallelOptions, boid =>
//000391:             {
//000392:                 var v1_2_3 = PrimaryRules_1_2_3(boid); // weights factored in already in PrimaryRules
//000393:                 var v4 = m_rule4Weight * Rule4_EncourageStayingWithinAviary(boid);
//000394:                 var v5 = m_rule5Weight * Rule5_TendendcyTowardsHome(boid);
//000395: 
//000396:                 boid.Velocity = BoundVelocity(boid.PreviousVelocity + v1_2_3 + v4 + v5, m_speedLimit);
//000397:                 boid.Velocity.Normalize();
//000398: 
//000399:                 var tmpPosition = boid.PreviousPosition + boid.Velocity;
//000400:                 if (tmpPosition.Y >= 0) boid.Position = tmpPosition;
//000401:             });
//000402:         }
//000403: 
//000404:         /// <summary>Render the boids.</summary>
//000405:         private void RenderBoids()
//000406:         {
//000407:             // Make sure the boids are all positioned and pointing correctly
//000408:             foreach (var boid in m_boidModels) boid.TransformByPositionAndVelocity();
//000409: 
//000410:             // Every once in a while, update the user-displayed stats on timings
//000411:             var now = DateTimeOffset.Now;
//000412:             if (now >= m_nextUserPresentation)
//000413:             {
//000414:                 Title = string.Format("Procs: {0}, Time: {1:F2}", m_parallelOptions.MaxDegreeOfParallelism, 
//000415:                     m_numRendersSinceLastUserPresentation > 0 ? 
//000416:                     m_totalRenderingMillisecondsSinceLastUserPresentation / (double)m_numRendersSinceLastUserPresentation : 
//000417:                     0);
//000418:                 m_nextUserPresentation = now.AddSeconds(1);
//000419:                 m_numRendersSinceLastUserPresentation = 0;
//000420:                 m_totalRenderingMillisecondsSinceLastUserPresentation = 0;
//000421:             }
//000422: 
//000423:             // If we're in auto-panning mode, move the camera appropriately
//000424:             if (m_autoPanCamera)
//000425:             {
//000426:                 // Compute the maximum Z value of all of the boids and the center of their mass
//000427:                 double maxZ = double.MinValue;
//000428:                 Vector3D totalPos = new Vector3D();
//000429:                 foreach (var boid in m_boidModels)
//000430:                 {
//000431:                     if (boid.Position.Z > maxZ) maxZ = boid.Position.Z;
//000432:                     totalPos += boid.Position;
//000433:                 }
//000434:                 var newCameraPos = totalPos / m_boidModels.Length;
//000435:                 
//000436:                 // Move the camera to point at the center of the boids, a ways back from the max boid's Z
//000437:                 const int CAMERA_DISTANCE_FROM_MAXZ = 100;
//000438:                 const double CAMERA_SPEED_LIMIT = .01;
//000439:                 var newPos = new Point3D(newCameraPos.X, newCameraPos.Y, maxZ + CAMERA_DISTANCE_FROM_MAXZ);
//000440:                 var cameraVelocity = newPos - camMain.Position;
//000441:                 camMain.Position = camMain.Position + (cameraVelocity * CAMERA_SPEED_LIMIT);
//000442:             }
//000443:         }
//000444:         #endregion
//000445: 
//000446:         #region Boid Rules
//000447:         /// <summary>Run the three primary rules of boidom.</summary>
//000448:         /// <param name="boid">The boid to process.</param>
//000449:         /// <returns>The velocity vector resulting from the three primary rules and their associated weights.</returns>
//000450:         private Vector3D PrimaryRules_1_2_3(Boid boid)
//000451:         {
//000452:             int numNearby = 0;
//000453:             Vector3D summedPosition = new Vector3D();
//000454:             Vector3D summedVelocity = new Vector3D();
//000455:             Vector3D summedSeparation = new Vector3D();
//000456: 
//000457:             // For rule #1, we want the boid to fly towards the center of all of those in its neighborhood.
//000458:             // We find all of those boids, average their positions, and create a velocity vector to move the
//000459:             // boid a bit of the way there.
//000460: 
//000461:             // For rule #2, we want the boid to move away from each other boid it's a bit too close to.
//000462:             // Find all of those boids in its immediate vicinity, and push it away.
//000463: 
//000464:             // For rule #3, we want the boid to match velocities with those boids in its neighborhood.
//000465:             // Sum their velocities, find the average, and move this boid's velocity a bit in that direction.
//000466: 
//000467:             foreach (var other in m_boidModels)
//000468:             {
//000469:                 if (other != boid && 
//000470:                     (other.PreviousPosition - boid.PreviousPosition).Length <= NEIGHBORHOOD_SIZE &&
//000471:                     boid.ComputeAngle(other) <= 135)
//000472:                 {
//000473:                     summedPosition += other.PreviousPosition;
//000474:                     summedVelocity += other.PreviousVelocity;
//000475:                     numNearby++;
//000476: 
//000477:                     if ((other.PreviousPosition - boid.PreviousPosition).Length < MIN_DISTANCE_FROM_NEIGHBOR)
//000478:                     {
//000479:                         summedSeparation -= (other.PreviousPosition - boid.PreviousPosition);
//000480:                     }
//000481:                 }
//000482:             }
//000483: 
//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
//000485:             var rule2_separateFromNearby = summedSeparation;
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
//000487: 
//000488:             return
//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
//000499:             var v = new Vector3D();
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_00d7:  br         IL_02ba

//000185:             else if (e.Key == Key.A)
    IL_00dc:  ldarg.2
    IL_00dd:  callvirt   instance valuetype [WindowsBase]System.Windows.Input.Key [PresentationCore]System.Windows.Input.KeyEventArgs::get_Key()
    IL_00e2:  ldc.i4.s   44
    IL_00e4:  ceq
    IL_00e6:  ldc.i4.0
    IL_00e7:  ceq
    IL_00e9:  stloc.3
//000186:             {
//000187:                 m_autoPanCamera = !m_autoPanCamera;
//000188:             }
//000189: 
//000190:                 // If up or down is pressed and we're in auto-pan mode, 
//000191:             else if ((e.Key == Key.Up || e.Key == Key.Down) && !m_autoPanCamera)
//000192:             {
//000193:                 Zoom(e.Key == Key.Up ? 1 : -1);
//000194:             }
//000195: 
//000196:                 // If 'r' is pressed, reset all of the boids to random positions and velocities
//000197:             else if (e.Key == Key.R)
//000198:             {
//000199:                 RandomizeBoidPositionsAndVelocities();
//000200:             }
//000201: 
//000202:                 // If 'h', display usage instructions to the user
//000203:             else if (e.Key == Key.H)
//000204:             {
//000205:                 string instructions =
//000206:                     "** Window Controls **" + Environment.NewLine +
//000207:                     "Auto-Camera Positioning: 'a'" + Environment.NewLine +
//000208:                     "Pan: Click Left And Drag" + Environment.NewLine +
//000209:                     "Zoom In / Out: Mousewheel (or) Up/Down Keys (or) Ctrl+Middle Mouse Move" + Environment.NewLine +
//000210:                     "Full Screen: Right Double-Click" + Environment.NewLine +
//000211:                     "Restore to Normal Window Size: Right Double-Click (or) Escape Key" + Environment.NewLine +
//000212:                     "Pause: 'b'" + Environment.NewLine +
//000213:                     "Translucency: 't'" + Environment.NewLine +
//000214:                     Environment.NewLine +
//000215:                     "** Boid Controls **" + Environment.NewLine +
//000216:                     "Scatter: Left Double-Click" + Environment.NewLine +
//000217:                     "Change Max Speed: Ctrl + Mousewheel" + Environment.NewLine +
//000218:                     "Randomize: 'r'" + Environment.NewLine +
//000219:                     Environment.NewLine +
//000220:                     "** Parallelism Controls **" + Environment.NewLine +
//000221:                     "Go Parallel: 'p'" + Environment.NewLine;
//000222:                 MessageBox.Show(this, instructions, "Instructions", MessageBoxButton.OK, MessageBoxImage.Information);
//000223:             }
//000224:         }
//000225: 
//000226:         /// <summary>Handle mousedown events.</summary>
//000227:         /// <param name="sender">The sender.</param>
//000228:         /// <param name="e">The eventargs.</param>
//000229:         private void Window_MouseDown(object sender, MouseButtonEventArgs e)
//000230:         {
//000231:             // Log the last mouse position
//000232:             _lastMousePosition = e.GetPosition(this);
//000233:         }
//000234: 
//000235:         /// <summary>Handle mousewheel events.</summary>
//000236:         /// <param name="sender">The sender.</param>
//000237:         /// <param name="e">The eventargs.</param>
//000238:         private void Window_MouseWheel(object sender, MouseWheelEventArgs e)
//000239:         {
//000240:             // If ctrl is pressed, change the max bird speed based on the number of mousewheel turns
//000241:             if ((Keyboard.Modifiers & ModifierKeys.Control) != 0)
//000242:             {
//000243:                 const int MIN_SPEED = 2, MAX_SPEED = 10;
//000244:                 if (e.Delta > 0 && m_speedLimit < MAX_SPEED) m_speedLimit++;
//000245:                 else if (e.Delta < 0 && m_speedLimit > MIN_SPEED) m_speedLimit--;
//000246:             }
//000247:                 // Otherwise, as long as we're not in auto-panning/zooming mode,
//000248:                 // zoom in or out based on the number of mousewheel turns
//000249:             else if (!m_autoPanCamera) Zoom(e.Delta / Mouse.MouseWheelDeltaForOneLine); 
//000250:         }
//000251: 
//000252:         /// <summary>Handle mousedoubleclick events.</summary>
//000253:         /// <param name="sender">The sender.</param>
//000254:         /// <param name="e">The eventargs.</param>
//000255:         private void Window_MouseDoubleClick(object sender, MouseButtonEventArgs e)
//000256:         {
//000257:             // If the right mouse button is double clicked, alternate between maximized and normal view
//000258:             if (e.ChangedButton == MouseButton.Right)
//000259:             {
//000260:                 if (WindowState == WindowState.Maximized)
//000261:                 {
//000262:                     Topmost = false;
//000263:                     WindowStyle = WindowStyle.ThreeDBorderWindow;
//000264:                     WindowState = WindowState.Normal;
//000265:                 }
//000266:                 else
//000267:                 {
//000268:                     Topmost = true;
//000269:                     WindowStyle = WindowStyle.None;
//000270:                     WindowState = WindowState.Maximized;
//000271:                 }
//000272:             }
//000273:                 // If the left mouse button is double clicked, scatter the boids
//000274:             else if (e.ChangedButton == MouseButton.Left)
//000275:             {
//000276:                 Scatter();
//000277:             }
//000278:         }
//000279: 
//000280:         /// <summary>Scatter the boids.</summary>
//000281:         private void Scatter()
//000282:         {
//000283:             // Start scatterring if a scatter isn't already in process
//000284:             if (m_scatterTimer == null)
//000285:             {
//000286:                 // Ka'boom.  Something scares the boids.
//000287:                 SystemSounds.Hand.Play();
//000288: 
//000289:                 // Store original settings
//000290:                 var origHome = m_home;
//000291:                 var origRule1Weight = m_rule1Weight;
//000292:                 var origRule2Weight = m_rule2Weight;
//000293:                 var origRule4Weight = m_rule4Weight;
//000294:                 var origRule5Weight = m_rule5Weight;
//000295: 
//000296:                 // Create new scatter settings
//000297:                 m_home = new Vector3D(0, 0, 0);
//000298:                 m_rule1Weight = origRule1Weight * -5;
//000299:                 m_rule2Weight = origRule2Weight * 2;
//000300:                 m_rule4Weight = 0;
//000301:                 m_rule5Weight = origRule5Weight * -5;
//000302: 
//000303:                 // Start a timer to restore the original settings
//000304:                 m_scatterTimer = new Timer(_ =>
//000305:                 {
//000306:                     // Restore the original settings
//000307:                     m_home = origHome;
//000308:                     m_rule1Weight = origRule1Weight;
//000309:                     m_rule2Weight = origRule2Weight;
//000310:                     m_rule4Weight = origRule4Weight;
//000311:                     m_rule5Weight = origRule5Weight;
//000312: 
//000313:                     // Clean up the timer
//000314:                     m_scatterTimer.Dispose();
//000315:                     m_scatterTimer = null;
//000316:                 }, null, SCATTER_TIME, -1);
//000317:             }
//000318:         }
//000319: 
//000320:         /// <summary>Handle mousemove events.</summary>
//000321:         /// <param name="sender">The sender.</param>
//000322:         /// <param name="e">The eventargs.</param>
//000323:         private void Window_MouseMove(object sender, MouseEventArgs e)
//000324:         {
//000325:             // If we're not auto-panning
//000326:             if (!m_autoPanCamera)
//000327:             {
//000328:                 // Get the new mouse position and compute the difference from the previous
//000329:                 var newPosition = e.GetPosition(this);
//000330:                 var diff = _lastMousePosition - newPosition;
//000331: 
//000332:                 // If the left mouse position was pressed, pan based on the x/y differences
//000333:                 if (e.LeftButton == MouseButtonState.Pressed)
//000334:                 {
//000335:                     camMain.Position = new Point3D(camMain.Position.X + diff.X * .4, camMain.Position.Y - diff.Y * .4, camMain.Position.Z);
//000336:                 }
//000337:                     // If the middle button was pressed, zoom based on the y difference
//000338:                 else if (e.MiddleButton == MouseButtonState.Pressed)
//000339:                 {
//000340:                     Zoom((int)diff.Y);
//000341:                 }
//000342: 
//000343:                 // Store the new position
//000344:                 _lastMousePosition = newPosition;
//000345:             }
//000346:         }
//000347: 
//000348:         /// <summary>Zoom in or out based on the specified degree of zoom.</summary>
//000349:         /// <param name="amountOfChange">Amount to zoom in (positive) or out (negative).</param>
//000350:         private void Zoom(int amountOfChange)
//000351:         {
//000352:             const int ZOOM_FACTOR = 3;
//000353:             camMain.Position = Point3D.Add(camMain.Position, camMain.LookDirection * amountOfChange * ZOOM_FACTOR);
//000354:         }
//000355:         #endregion
//000356: 
//000357:         #region Step and Render
//000358:         /// <summary>Runs the rendering loop.</summary>
//000359:         private void RenderUpdateLoop()
//000360:         {
//000361:             // Loop forever...
//000362:             while (true)
//000363:             {
//000364:                 // Wait to receive a signal that we should render another frame
//000365:                 m_renderSignal.WaitOne();
//000366: 
//000367:                 // Start timing.
//000368:                 m_frameStopwatch.Restart();
//000369: 
//000370:                 // Update the positions and velocities of all of the boids.
//000371:                 StepBoids();
//000372: 
//000373:                 // Update our rendering stats for display to the user
//000374:                 m_totalRenderingMillisecondsSinceLastUserPresentation += m_frameStopwatch.ElapsedMilliseconds;
//000375:                 m_numRendersSinceLastUserPresentation++;
//000376: 
//000377:                 // Render the boids to the UI
//000378:                 Dispatcher.Invoke((Action)RenderBoids, DispatcherPriority.Send, null);
//000379:             }
//000380:         }
//000381: 
//000382:         /// <summary>Step the boids one step, updating their velocities and positions.</summary>
//000383:         private void StepBoids()
//000384:         {
//000385:             // Store the current velocities and positions so that we can operate on an immutable copy
//000386:             foreach (var boid in m_boidModels) boid.StorePositionAndVelocityIntoPrevious();
//000387: 
//000388:             // For each boid, analyze how the various boid rules influence its velocity and position,
//000389:             // then store this new information.  After this step, we'll be able to render the boids.
//000390:             Parallel.ForEach(m_boidModels, m_parallelOptions, boid =>
//000391:             {
//000392:                 var v1_2_3 = PrimaryRules_1_2_3(boid); // weights factored in already in PrimaryRules
//000393:                 var v4 = m_rule4Weight * Rule4_EncourageStayingWithinAviary(boid);
//000394:                 var v5 = m_rule5Weight * Rule5_TendendcyTowardsHome(boid);
//000395: 
//000396:                 boid.Velocity = BoundVelocity(boid.PreviousVelocity + v1_2_3 + v4 + v5, m_speedLimit);
//000397:                 boid.Velocity.Normalize();
//000398: 
//000399:                 var tmpPosition = boid.PreviousPosition + boid.Velocity;
//000400:                 if (tmpPosition.Y >= 0) boid.Position = tmpPosition;
//000401:             });
//000402:         }
//000403: 
//000404:         /// <summary>Render the boids.</summary>
//000405:         private void RenderBoids()
//000406:         {
//000407:             // Make sure the boids are all positioned and pointing correctly
//000408:             foreach (var boid in m_boidModels) boid.TransformByPositionAndVelocity();
//000409: 
//000410:             // Every once in a while, update the user-displayed stats on timings
//000411:             var now = DateTimeOffset.Now;
//000412:             if (now >= m_nextUserPresentation)
//000413:             {
//000414:                 Title = string.Format("Procs: {0}, Time: {1:F2}", m_parallelOptions.MaxDegreeOfParallelism, 
//000415:                     m_numRendersSinceLastUserPresentation > 0 ? 
//000416:                     m_totalRenderingMillisecondsSinceLastUserPresentation / (double)m_numRendersSinceLastUserPresentation : 
//000417:                     0);
//000418:                 m_nextUserPresentation = now.AddSeconds(1);
//000419:                 m_numRendersSinceLastUserPresentation = 0;
//000420:                 m_totalRenderingMillisecondsSinceLastUserPresentation = 0;
//000421:             }
//000422: 
//000423:             // If we're in auto-panning mode, move the camera appropriately
//000424:             if (m_autoPanCamera)
//000425:             {
//000426:                 // Compute the maximum Z value of all of the boids and the center of their mass
//000427:                 double maxZ = double.MinValue;
//000428:                 Vector3D totalPos = new Vector3D();
//000429:                 foreach (var boid in m_boidModels)
//000430:                 {
//000431:                     if (boid.Position.Z > maxZ) maxZ = boid.Position.Z;
//000432:                     totalPos += boid.Position;
//000433:                 }
//000434:                 var newCameraPos = totalPos / m_boidModels.Length;
//000435:                 
//000436:                 // Move the camera to point at the center of the boids, a ways back from the max boid's Z
//000437:                 const int CAMERA_DISTANCE_FROM_MAXZ = 100;
//000438:                 const double CAMERA_SPEED_LIMIT = .01;
//000439:                 var newPos = new Point3D(newCameraPos.X, newCameraPos.Y, maxZ + CAMERA_DISTANCE_FROM_MAXZ);
//000440:                 var cameraVelocity = newPos - camMain.Position;
//000441:                 camMain.Position = camMain.Position + (cameraVelocity * CAMERA_SPEED_LIMIT);
//000442:             }
//000443:         }
//000444:         #endregion
//000445: 
//000446:         #region Boid Rules
//000447:         /// <summary>Run the three primary rules of boidom.</summary>
//000448:         /// <param name="boid">The boid to process.</param>
//000449:         /// <returns>The velocity vector resulting from the three primary rules and their associated weights.</returns>
//000450:         private Vector3D PrimaryRules_1_2_3(Boid boid)
//000451:         {
//000452:             int numNearby = 0;
//000453:             Vector3D summedPosition = new Vector3D();
//000454:             Vector3D summedVelocity = new Vector3D();
//000455:             Vector3D summedSeparation = new Vector3D();
//000456: 
//000457:             // For rule #1, we want the boid to fly towards the center of all of those in its neighborhood.
//000458:             // We find all of those boids, average their positions, and create a velocity vector to move the
//000459:             // boid a bit of the way there.
//000460: 
//000461:             // For rule #2, we want the boid to move away from each other boid it's a bit too close to.
//000462:             // Find all of those boids in its immediate vicinity, and push it away.
//000463: 
//000464:             // For rule #3, we want the boid to match velocities with those boids in its neighborhood.
//000465:             // Sum their velocities, find the average, and move this boid's velocity a bit in that direction.
//000466: 
//000467:             foreach (var other in m_boidModels)
//000468:             {
//000469:                 if (other != boid && 
//000470:                     (other.PreviousPosition - boid.PreviousPosition).Length <= NEIGHBORHOOD_SIZE &&
//000471:                     boid.ComputeAngle(other) <= 135)
//000472:                 {
//000473:                     summedPosition += other.PreviousPosition;
//000474:                     summedVelocity += other.PreviousVelocity;
//000475:                     numNearby++;
//000476: 
//000477:                     if ((other.PreviousPosition - boid.PreviousPosition).Length < MIN_DISTANCE_FROM_NEIGHBOR)
//000478:                     {
//000479:                         summedSeparation -= (other.PreviousPosition - boid.PreviousPosition);
//000480:                     }
//000481:                 }
//000482:             }
//000483: 
//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
//000485:             var rule2_separateFromNearby = summedSeparation;
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
//000487: 
//000488:             return
//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
//000499:             var v = new Vector3D();
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_00ea:  ldloc.3
    IL_00eb:  brtrue.s   IL_0103

//000186:             {
    IL_00ed:  nop
//000187:                 m_autoPanCamera = !m_autoPanCamera;
    IL_00ee:  ldarg.0
    IL_00ef:  ldarg.0
    IL_00f0:  ldfld      bool ParallelBoids.MainWindow::m_autoPanCamera
    IL_00f5:  ldc.i4.0
    IL_00f6:  ceq
    IL_00f8:  stfld      bool ParallelBoids.MainWindow::m_autoPanCamera
//000188:             }
    IL_00fd:  nop
//000189: 
//000190:                 // If up or down is pressed and we're in auto-pan mode, 
//000191:             else if ((e.Key == Key.Up || e.Key == Key.Down) && !m_autoPanCamera)
//000192:             {
//000193:                 Zoom(e.Key == Key.Up ? 1 : -1);
//000194:             }
//000195: 
//000196:                 // If 'r' is pressed, reset all of the boids to random positions and velocities
//000197:             else if (e.Key == Key.R)
//000198:             {
//000199:                 RandomizeBoidPositionsAndVelocities();
//000200:             }
//000201: 
//000202:                 // If 'h', display usage instructions to the user
//000203:             else if (e.Key == Key.H)
//000204:             {
//000205:                 string instructions =
//000206:                     "** Window Controls **" + Environment.NewLine +
//000207:                     "Auto-Camera Positioning: 'a'" + Environment.NewLine +
//000208:                     "Pan: Click Left And Drag" + Environment.NewLine +
//000209:                     "Zoom In / Out: Mousewheel (or) Up/Down Keys (or) Ctrl+Middle Mouse Move" + Environment.NewLine +
//000210:                     "Full Screen: Right Double-Click" + Environment.NewLine +
//000211:                     "Restore to Normal Window Size: Right Double-Click (or) Escape Key" + Environment.NewLine +
//000212:                     "Pause: 'b'" + Environment.NewLine +
//000213:                     "Translucency: 't'" + Environment.NewLine +
//000214:                     Environment.NewLine +
//000215:                     "** Boid Controls **" + Environment.NewLine +
//000216:                     "Scatter: Left Double-Click" + Environment.NewLine +
//000217:                     "Change Max Speed: Ctrl + Mousewheel" + Environment.NewLine +
//000218:                     "Randomize: 'r'" + Environment.NewLine +
//000219:                     Environment.NewLine +
//000220:                     "** Parallelism Controls **" + Environment.NewLine +
//000221:                     "Go Parallel: 'p'" + Environment.NewLine;
//000222:                 MessageBox.Show(this, instructions, "Instructions", MessageBoxButton.OK, MessageBoxImage.Information);
//000223:             }
//000224:         }
//000225: 
//000226:         /// <summary>Handle mousedown events.</summary>
//000227:         /// <param name="sender">The sender.</param>
//000228:         /// <param name="e">The eventargs.</param>
//000229:         private void Window_MouseDown(object sender, MouseButtonEventArgs e)
//000230:         {
//000231:             // Log the last mouse position
//000232:             _lastMousePosition = e.GetPosition(this);
//000233:         }
//000234: 
//000235:         /// <summary>Handle mousewheel events.</summary>
//000236:         /// <param name="sender">The sender.</param>
//000237:         /// <param name="e">The eventargs.</param>
//000238:         private void Window_MouseWheel(object sender, MouseWheelEventArgs e)
//000239:         {
//000240:             // If ctrl is pressed, change the max bird speed based on the number of mousewheel turns
//000241:             if ((Keyboard.Modifiers & ModifierKeys.Control) != 0)
//000242:             {
//000243:                 const int MIN_SPEED = 2, MAX_SPEED = 10;
//000244:                 if (e.Delta > 0 && m_speedLimit < MAX_SPEED) m_speedLimit++;
//000245:                 else if (e.Delta < 0 && m_speedLimit > MIN_SPEED) m_speedLimit--;
//000246:             }
//000247:                 // Otherwise, as long as we're not in auto-panning/zooming mode,
//000248:                 // zoom in or out based on the number of mousewheel turns
//000249:             else if (!m_autoPanCamera) Zoom(e.Delta / Mouse.MouseWheelDeltaForOneLine); 
//000250:         }
//000251: 
//000252:         /// <summary>Handle mousedoubleclick events.</summary>
//000253:         /// <param name="sender">The sender.</param>
//000254:         /// <param name="e">The eventargs.</param>
//000255:         private void Window_MouseDoubleClick(object sender, MouseButtonEventArgs e)
//000256:         {
//000257:             // If the right mouse button is double clicked, alternate between maximized and normal view
//000258:             if (e.ChangedButton == MouseButton.Right)
//000259:             {
//000260:                 if (WindowState == WindowState.Maximized)
//000261:                 {
//000262:                     Topmost = false;
//000263:                     WindowStyle = WindowStyle.ThreeDBorderWindow;
//000264:                     WindowState = WindowState.Normal;
//000265:                 }
//000266:                 else
//000267:                 {
//000268:                     Topmost = true;
//000269:                     WindowStyle = WindowStyle.None;
//000270:                     WindowState = WindowState.Maximized;
//000271:                 }
//000272:             }
//000273:                 // If the left mouse button is double clicked, scatter the boids
//000274:             else if (e.ChangedButton == MouseButton.Left)
//000275:             {
//000276:                 Scatter();
//000277:             }
//000278:         }
//000279: 
//000280:         /// <summary>Scatter the boids.</summary>
//000281:         private void Scatter()
//000282:         {
//000283:             // Start scatterring if a scatter isn't already in process
//000284:             if (m_scatterTimer == null)
//000285:             {
//000286:                 // Ka'boom.  Something scares the boids.
//000287:                 SystemSounds.Hand.Play();
//000288: 
//000289:                 // Store original settings
//000290:                 var origHome = m_home;
//000291:                 var origRule1Weight = m_rule1Weight;
//000292:                 var origRule2Weight = m_rule2Weight;
//000293:                 var origRule4Weight = m_rule4Weight;
//000294:                 var origRule5Weight = m_rule5Weight;
//000295: 
//000296:                 // Create new scatter settings
//000297:                 m_home = new Vector3D(0, 0, 0);
//000298:                 m_rule1Weight = origRule1Weight * -5;
//000299:                 m_rule2Weight = origRule2Weight * 2;
//000300:                 m_rule4Weight = 0;
//000301:                 m_rule5Weight = origRule5Weight * -5;
//000302: 
//000303:                 // Start a timer to restore the original settings
//000304:                 m_scatterTimer = new Timer(_ =>
//000305:                 {
//000306:                     // Restore the original settings
//000307:                     m_home = origHome;
//000308:                     m_rule1Weight = origRule1Weight;
//000309:                     m_rule2Weight = origRule2Weight;
//000310:                     m_rule4Weight = origRule4Weight;
//000311:                     m_rule5Weight = origRule5Weight;
//000312: 
//000313:                     // Clean up the timer
//000314:                     m_scatterTimer.Dispose();
//000315:                     m_scatterTimer = null;
//000316:                 }, null, SCATTER_TIME, -1);
//000317:             }
//000318:         }
//000319: 
//000320:         /// <summary>Handle mousemove events.</summary>
//000321:         /// <param name="sender">The sender.</param>
//000322:         /// <param name="e">The eventargs.</param>
//000323:         private void Window_MouseMove(object sender, MouseEventArgs e)
//000324:         {
//000325:             // If we're not auto-panning
//000326:             if (!m_autoPanCamera)
//000327:             {
//000328:                 // Get the new mouse position and compute the difference from the previous
//000329:                 var newPosition = e.GetPosition(this);
//000330:                 var diff = _lastMousePosition - newPosition;
//000331: 
//000332:                 // If the left mouse position was pressed, pan based on the x/y differences
//000333:                 if (e.LeftButton == MouseButtonState.Pressed)
//000334:                 {
//000335:                     camMain.Position = new Point3D(camMain.Position.X + diff.X * .4, camMain.Position.Y - diff.Y * .4, camMain.Position.Z);
//000336:                 }
//000337:                     // If the middle button was pressed, zoom based on the y difference
//000338:                 else if (e.MiddleButton == MouseButtonState.Pressed)
//000339:                 {
//000340:                     Zoom((int)diff.Y);
//000341:                 }
//000342: 
//000343:                 // Store the new position
//000344:                 _lastMousePosition = newPosition;
//000345:             }
//000346:         }
//000347: 
//000348:         /// <summary>Zoom in or out based on the specified degree of zoom.</summary>
//000349:         /// <param name="amountOfChange">Amount to zoom in (positive) or out (negative).</param>
//000350:         private void Zoom(int amountOfChange)
//000351:         {
//000352:             const int ZOOM_FACTOR = 3;
//000353:             camMain.Position = Point3D.Add(camMain.Position, camMain.LookDirection * amountOfChange * ZOOM_FACTOR);
//000354:         }
//000355:         #endregion
//000356: 
//000357:         #region Step and Render
//000358:         /// <summary>Runs the rendering loop.</summary>
//000359:         private void RenderUpdateLoop()
//000360:         {
//000361:             // Loop forever...
//000362:             while (true)
//000363:             {
//000364:                 // Wait to receive a signal that we should render another frame
//000365:                 m_renderSignal.WaitOne();
//000366: 
//000367:                 // Start timing.
//000368:                 m_frameStopwatch.Restart();
//000369: 
//000370:                 // Update the positions and velocities of all of the boids.
//000371:                 StepBoids();
//000372: 
//000373:                 // Update our rendering stats for display to the user
//000374:                 m_totalRenderingMillisecondsSinceLastUserPresentation += m_frameStopwatch.ElapsedMilliseconds;
//000375:                 m_numRendersSinceLastUserPresentation++;
//000376: 
//000377:                 // Render the boids to the UI
//000378:                 Dispatcher.Invoke((Action)RenderBoids, DispatcherPriority.Send, null);
//000379:             }
//000380:         }
//000381: 
//000382:         /// <summary>Step the boids one step, updating their velocities and positions.</summary>
//000383:         private void StepBoids()
//000384:         {
//000385:             // Store the current velocities and positions so that we can operate on an immutable copy
//000386:             foreach (var boid in m_boidModels) boid.StorePositionAndVelocityIntoPrevious();
//000387: 
//000388:             // For each boid, analyze how the various boid rules influence its velocity and position,
//000389:             // then store this new information.  After this step, we'll be able to render the boids.
//000390:             Parallel.ForEach(m_boidModels, m_parallelOptions, boid =>
//000391:             {
//000392:                 var v1_2_3 = PrimaryRules_1_2_3(boid); // weights factored in already in PrimaryRules
//000393:                 var v4 = m_rule4Weight * Rule4_EncourageStayingWithinAviary(boid);
//000394:                 var v5 = m_rule5Weight * Rule5_TendendcyTowardsHome(boid);
//000395: 
//000396:                 boid.Velocity = BoundVelocity(boid.PreviousVelocity + v1_2_3 + v4 + v5, m_speedLimit);
//000397:                 boid.Velocity.Normalize();
//000398: 
//000399:                 var tmpPosition = boid.PreviousPosition + boid.Velocity;
//000400:                 if (tmpPosition.Y >= 0) boid.Position = tmpPosition;
//000401:             });
//000402:         }
//000403: 
//000404:         /// <summary>Render the boids.</summary>
//000405:         private void RenderBoids()
//000406:         {
//000407:             // Make sure the boids are all positioned and pointing correctly
//000408:             foreach (var boid in m_boidModels) boid.TransformByPositionAndVelocity();
//000409: 
//000410:             // Every once in a while, update the user-displayed stats on timings
//000411:             var now = DateTimeOffset.Now;
//000412:             if (now >= m_nextUserPresentation)
//000413:             {
//000414:                 Title = string.Format("Procs: {0}, Time: {1:F2}", m_parallelOptions.MaxDegreeOfParallelism, 
//000415:                     m_numRendersSinceLastUserPresentation > 0 ? 
//000416:                     m_totalRenderingMillisecondsSinceLastUserPresentation / (double)m_numRendersSinceLastUserPresentation : 
//000417:                     0);
//000418:                 m_nextUserPresentation = now.AddSeconds(1);
//000419:                 m_numRendersSinceLastUserPresentation = 0;
//000420:                 m_totalRenderingMillisecondsSinceLastUserPresentation = 0;
//000421:             }
//000422: 
//000423:             // If we're in auto-panning mode, move the camera appropriately
//000424:             if (m_autoPanCamera)
//000425:             {
//000426:                 // Compute the maximum Z value of all of the boids and the center of their mass
//000427:                 double maxZ = double.MinValue;
//000428:                 Vector3D totalPos = new Vector3D();
//000429:                 foreach (var boid in m_boidModels)
//000430:                 {
//000431:                     if (boid.Position.Z > maxZ) maxZ = boid.Position.Z;
//000432:                     totalPos += boid.Position;
//000433:                 }
//000434:                 var newCameraPos = totalPos / m_boidModels.Length;
//000435:                 
//000436:                 // Move the camera to point at the center of the boids, a ways back from the max boid's Z
//000437:                 const int CAMERA_DISTANCE_FROM_MAXZ = 100;
//000438:                 const double CAMERA_SPEED_LIMIT = .01;
//000439:                 var newPos = new Point3D(newCameraPos.X, newCameraPos.Y, maxZ + CAMERA_DISTANCE_FROM_MAXZ);
//000440:                 var cameraVelocity = newPos - camMain.Position;
//000441:                 camMain.Position = camMain.Position + (cameraVelocity * CAMERA_SPEED_LIMIT);
//000442:             }
//000443:         }
//000444:         #endregion
//000445: 
//000446:         #region Boid Rules
//000447:         /// <summary>Run the three primary rules of boidom.</summary>
//000448:         /// <param name="boid">The boid to process.</param>
//000449:         /// <returns>The velocity vector resulting from the three primary rules and their associated weights.</returns>
//000450:         private Vector3D PrimaryRules_1_2_3(Boid boid)
//000451:         {
//000452:             int numNearby = 0;
//000453:             Vector3D summedPosition = new Vector3D();
//000454:             Vector3D summedVelocity = new Vector3D();
//000455:             Vector3D summedSeparation = new Vector3D();
//000456: 
//000457:             // For rule #1, we want the boid to fly towards the center of all of those in its neighborhood.
//000458:             // We find all of those boids, average their positions, and create a velocity vector to move the
//000459:             // boid a bit of the way there.
//000460: 
//000461:             // For rule #2, we want the boid to move away from each other boid it's a bit too close to.
//000462:             // Find all of those boids in its immediate vicinity, and push it away.
//000463: 
//000464:             // For rule #3, we want the boid to match velocities with those boids in its neighborhood.
//000465:             // Sum their velocities, find the average, and move this boid's velocity a bit in that direction.
//000466: 
//000467:             foreach (var other in m_boidModels)
//000468:             {
//000469:                 if (other != boid && 
//000470:                     (other.PreviousPosition - boid.PreviousPosition).Length <= NEIGHBORHOOD_SIZE &&
//000471:                     boid.ComputeAngle(other) <= 135)
//000472:                 {
//000473:                     summedPosition += other.PreviousPosition;
//000474:                     summedVelocity += other.PreviousVelocity;
//000475:                     numNearby++;
//000476: 
//000477:                     if ((other.PreviousPosition - boid.PreviousPosition).Length < MIN_DISTANCE_FROM_NEIGHBOR)
//000478:                     {
//000479:                         summedSeparation -= (other.PreviousPosition - boid.PreviousPosition);
//000480:                     }
//000481:                 }
//000482:             }
//000483: 
//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
//000485:             var rule2_separateFromNearby = summedSeparation;
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
//000487: 
//000488:             return
//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
//000499:             var v = new Vector3D();
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_00fe:  br         IL_02ba

//000191:             else if ((e.Key == Key.Up || e.Key == Key.Down) && !m_autoPanCamera)
    IL_0103:  ldarg.2
    IL_0104:  callvirt   instance valuetype [WindowsBase]System.Windows.Input.Key [PresentationCore]System.Windows.Input.KeyEventArgs::get_Key()
    IL_0109:  ldc.i4.s   24
    IL_010b:  beq.s      IL_0117

    IL_010d:  ldarg.2
    IL_010e:  callvirt   instance valuetype [WindowsBase]System.Windows.Input.Key [PresentationCore]System.Windows.Input.KeyEventArgs::get_Key()
    IL_0113:  ldc.i4.s   26
    IL_0115:  bne.un.s   IL_011f

    IL_0117:  ldarg.0
    IL_0118:  ldfld      bool ParallelBoids.MainWindow::m_autoPanCamera
    IL_011d:  br.s       IL_0120

    IL_011f:  ldc.i4.1
    IL_0120:  stloc.3
//000192:             {
//000193:                 Zoom(e.Key == Key.Up ? 1 : -1);
//000194:             }
//000195: 
//000196:                 // If 'r' is pressed, reset all of the boids to random positions and velocities
//000197:             else if (e.Key == Key.R)
//000198:             {
//000199:                 RandomizeBoidPositionsAndVelocities();
//000200:             }
//000201: 
//000202:                 // If 'h', display usage instructions to the user
//000203:             else if (e.Key == Key.H)
//000204:             {
//000205:                 string instructions =
//000206:                     "** Window Controls **" + Environment.NewLine +
//000207:                     "Auto-Camera Positioning: 'a'" + Environment.NewLine +
//000208:                     "Pan: Click Left And Drag" + Environment.NewLine +
//000209:                     "Zoom In / Out: Mousewheel (or) Up/Down Keys (or) Ctrl+Middle Mouse Move" + Environment.NewLine +
//000210:                     "Full Screen: Right Double-Click" + Environment.NewLine +
//000211:                     "Restore to Normal Window Size: Right Double-Click (or) Escape Key" + Environment.NewLine +
//000212:                     "Pause: 'b'" + Environment.NewLine +
//000213:                     "Translucency: 't'" + Environment.NewLine +
//000214:                     Environment.NewLine +
//000215:                     "** Boid Controls **" + Environment.NewLine +
//000216:                     "Scatter: Left Double-Click" + Environment.NewLine +
//000217:                     "Change Max Speed: Ctrl + Mousewheel" + Environment.NewLine +
//000218:                     "Randomize: 'r'" + Environment.NewLine +
//000219:                     Environment.NewLine +
//000220:                     "** Parallelism Controls **" + Environment.NewLine +
//000221:                     "Go Parallel: 'p'" + Environment.NewLine;
//000222:                 MessageBox.Show(this, instructions, "Instructions", MessageBoxButton.OK, MessageBoxImage.Information);
//000223:             }
//000224:         }
//000225: 
//000226:         /// <summary>Handle mousedown events.</summary>
//000227:         /// <param name="sender">The sender.</param>
//000228:         /// <param name="e">The eventargs.</param>
//000229:         private void Window_MouseDown(object sender, MouseButtonEventArgs e)
//000230:         {
//000231:             // Log the last mouse position
//000232:             _lastMousePosition = e.GetPosition(this);
//000233:         }
//000234: 
//000235:         /// <summary>Handle mousewheel events.</summary>
//000236:         /// <param name="sender">The sender.</param>
//000237:         /// <param name="e">The eventargs.</param>
//000238:         private void Window_MouseWheel(object sender, MouseWheelEventArgs e)
//000239:         {
//000240:             // If ctrl is pressed, change the max bird speed based on the number of mousewheel turns
//000241:             if ((Keyboard.Modifiers & ModifierKeys.Control) != 0)
//000242:             {
//000243:                 const int MIN_SPEED = 2, MAX_SPEED = 10;
//000244:                 if (e.Delta > 0 && m_speedLimit < MAX_SPEED) m_speedLimit++;
//000245:                 else if (e.Delta < 0 && m_speedLimit > MIN_SPEED) m_speedLimit--;
//000246:             }
//000247:                 // Otherwise, as long as we're not in auto-panning/zooming mode,
//000248:                 // zoom in or out based on the number of mousewheel turns
//000249:             else if (!m_autoPanCamera) Zoom(e.Delta / Mouse.MouseWheelDeltaForOneLine); 
//000250:         }
//000251: 
//000252:         /// <summary>Handle mousedoubleclick events.</summary>
//000253:         /// <param name="sender">The sender.</param>
//000254:         /// <param name="e">The eventargs.</param>
//000255:         private void Window_MouseDoubleClick(object sender, MouseButtonEventArgs e)
//000256:         {
//000257:             // If the right mouse button is double clicked, alternate between maximized and normal view
//000258:             if (e.ChangedButton == MouseButton.Right)
//000259:             {
//000260:                 if (WindowState == WindowState.Maximized)
//000261:                 {
//000262:                     Topmost = false;
//000263:                     WindowStyle = WindowStyle.ThreeDBorderWindow;
//000264:                     WindowState = WindowState.Normal;
//000265:                 }
//000266:                 else
//000267:                 {
//000268:                     Topmost = true;
//000269:                     WindowStyle = WindowStyle.None;
//000270:                     WindowState = WindowState.Maximized;
//000271:                 }
//000272:             }
//000273:                 // If the left mouse button is double clicked, scatter the boids
//000274:             else if (e.ChangedButton == MouseButton.Left)
//000275:             {
//000276:                 Scatter();
//000277:             }
//000278:         }
//000279: 
//000280:         /// <summary>Scatter the boids.</summary>
//000281:         private void Scatter()
//000282:         {
//000283:             // Start scatterring if a scatter isn't already in process
//000284:             if (m_scatterTimer == null)
//000285:             {
//000286:                 // Ka'boom.  Something scares the boids.
//000287:                 SystemSounds.Hand.Play();
//000288: 
//000289:                 // Store original settings
//000290:                 var origHome = m_home;
//000291:                 var origRule1Weight = m_rule1Weight;
//000292:                 var origRule2Weight = m_rule2Weight;
//000293:                 var origRule4Weight = m_rule4Weight;
//000294:                 var origRule5Weight = m_rule5Weight;
//000295: 
//000296:                 // Create new scatter settings
//000297:                 m_home = new Vector3D(0, 0, 0);
//000298:                 m_rule1Weight = origRule1Weight * -5;
//000299:                 m_rule2Weight = origRule2Weight * 2;
//000300:                 m_rule4Weight = 0;
//000301:                 m_rule5Weight = origRule5Weight * -5;
//000302: 
//000303:                 // Start a timer to restore the original settings
//000304:                 m_scatterTimer = new Timer(_ =>
//000305:                 {
//000306:                     // Restore the original settings
//000307:                     m_home = origHome;
//000308:                     m_rule1Weight = origRule1Weight;
//000309:                     m_rule2Weight = origRule2Weight;
//000310:                     m_rule4Weight = origRule4Weight;
//000311:                     m_rule5Weight = origRule5Weight;
//000312: 
//000313:                     // Clean up the timer
//000314:                     m_scatterTimer.Dispose();
//000315:                     m_scatterTimer = null;
//000316:                 }, null, SCATTER_TIME, -1);
//000317:             }
//000318:         }
//000319: 
//000320:         /// <summary>Handle mousemove events.</summary>
//000321:         /// <param name="sender">The sender.</param>
//000322:         /// <param name="e">The eventargs.</param>
//000323:         private void Window_MouseMove(object sender, MouseEventArgs e)
//000324:         {
//000325:             // If we're not auto-panning
//000326:             if (!m_autoPanCamera)
//000327:             {
//000328:                 // Get the new mouse position and compute the difference from the previous
//000329:                 var newPosition = e.GetPosition(this);
//000330:                 var diff = _lastMousePosition - newPosition;
//000331: 
//000332:                 // If the left mouse position was pressed, pan based on the x/y differences
//000333:                 if (e.LeftButton == MouseButtonState.Pressed)
//000334:                 {
//000335:                     camMain.Position = new Point3D(camMain.Position.X + diff.X * .4, camMain.Position.Y - diff.Y * .4, camMain.Position.Z);
//000336:                 }
//000337:                     // If the middle button was pressed, zoom based on the y difference
//000338:                 else if (e.MiddleButton == MouseButtonState.Pressed)
//000339:                 {
//000340:                     Zoom((int)diff.Y);
//000341:                 }
//000342: 
//000343:                 // Store the new position
//000344:                 _lastMousePosition = newPosition;
//000345:             }
//000346:         }
//000347: 
//000348:         /// <summary>Zoom in or out based on the specified degree of zoom.</summary>
//000349:         /// <param name="amountOfChange">Amount to zoom in (positive) or out (negative).</param>
//000350:         private void Zoom(int amountOfChange)
//000351:         {
//000352:             const int ZOOM_FACTOR = 3;
//000353:             camMain.Position = Point3D.Add(camMain.Position, camMain.LookDirection * amountOfChange * ZOOM_FACTOR);
//000354:         }
//000355:         #endregion
//000356: 
//000357:         #region Step and Render
//000358:         /// <summary>Runs the rendering loop.</summary>
//000359:         private void RenderUpdateLoop()
//000360:         {
//000361:             // Loop forever...
//000362:             while (true)
//000363:             {
//000364:                 // Wait to receive a signal that we should render another frame
//000365:                 m_renderSignal.WaitOne();
//000366: 
//000367:                 // Start timing.
//000368:                 m_frameStopwatch.Restart();
//000369: 
//000370:                 // Update the positions and velocities of all of the boids.
//000371:                 StepBoids();
//000372: 
//000373:                 // Update our rendering stats for display to the user
//000374:                 m_totalRenderingMillisecondsSinceLastUserPresentation += m_frameStopwatch.ElapsedMilliseconds;
//000375:                 m_numRendersSinceLastUserPresentation++;
//000376: 
//000377:                 // Render the boids to the UI
//000378:                 Dispatcher.Invoke((Action)RenderBoids, DispatcherPriority.Send, null);
//000379:             }
//000380:         }
//000381: 
//000382:         /// <summary>Step the boids one step, updating their velocities and positions.</summary>
//000383:         private void StepBoids()
//000384:         {
//000385:             // Store the current velocities and positions so that we can operate on an immutable copy
//000386:             foreach (var boid in m_boidModels) boid.StorePositionAndVelocityIntoPrevious();
//000387: 
//000388:             // For each boid, analyze how the various boid rules influence its velocity and position,
//000389:             // then store this new information.  After this step, we'll be able to render the boids.
//000390:             Parallel.ForEach(m_boidModels, m_parallelOptions, boid =>
//000391:             {
//000392:                 var v1_2_3 = PrimaryRules_1_2_3(boid); // weights factored in already in PrimaryRules
//000393:                 var v4 = m_rule4Weight * Rule4_EncourageStayingWithinAviary(boid);
//000394:                 var v5 = m_rule5Weight * Rule5_TendendcyTowardsHome(boid);
//000395: 
//000396:                 boid.Velocity = BoundVelocity(boid.PreviousVelocity + v1_2_3 + v4 + v5, m_speedLimit);
//000397:                 boid.Velocity.Normalize();
//000398: 
//000399:                 var tmpPosition = boid.PreviousPosition + boid.Velocity;
//000400:                 if (tmpPosition.Y >= 0) boid.Position = tmpPosition;
//000401:             });
//000402:         }
//000403: 
//000404:         /// <summary>Render the boids.</summary>
//000405:         private void RenderBoids()
//000406:         {
//000407:             // Make sure the boids are all positioned and pointing correctly
//000408:             foreach (var boid in m_boidModels) boid.TransformByPositionAndVelocity();
//000409: 
//000410:             // Every once in a while, update the user-displayed stats on timings
//000411:             var now = DateTimeOffset.Now;
//000412:             if (now >= m_nextUserPresentation)
//000413:             {
//000414:                 Title = string.Format("Procs: {0}, Time: {1:F2}", m_parallelOptions.MaxDegreeOfParallelism, 
//000415:                     m_numRendersSinceLastUserPresentation > 0 ? 
//000416:                     m_totalRenderingMillisecondsSinceLastUserPresentation / (double)m_numRendersSinceLastUserPresentation : 
//000417:                     0);
//000418:                 m_nextUserPresentation = now.AddSeconds(1);
//000419:                 m_numRendersSinceLastUserPresentation = 0;
//000420:                 m_totalRenderingMillisecondsSinceLastUserPresentation = 0;
//000421:             }
//000422: 
//000423:             // If we're in auto-panning mode, move the camera appropriately
//000424:             if (m_autoPanCamera)
//000425:             {
//000426:                 // Compute the maximum Z value of all of the boids and the center of their mass
//000427:                 double maxZ = double.MinValue;
//000428:                 Vector3D totalPos = new Vector3D();
//000429:                 foreach (var boid in m_boidModels)
//000430:                 {
//000431:                     if (boid.Position.Z > maxZ) maxZ = boid.Position.Z;
//000432:                     totalPos += boid.Position;
//000433:                 }
//000434:                 var newCameraPos = totalPos / m_boidModels.Length;
//000435:                 
//000436:                 // Move the camera to point at the center of the boids, a ways back from the max boid's Z
//000437:                 const int CAMERA_DISTANCE_FROM_MAXZ = 100;
//000438:                 const double CAMERA_SPEED_LIMIT = .01;
//000439:                 var newPos = new Point3D(newCameraPos.X, newCameraPos.Y, maxZ + CAMERA_DISTANCE_FROM_MAXZ);
//000440:                 var cameraVelocity = newPos - camMain.Position;
//000441:                 camMain.Position = camMain.Position + (cameraVelocity * CAMERA_SPEED_LIMIT);
//000442:             }
//000443:         }
//000444:         #endregion
//000445: 
//000446:         #region Boid Rules
//000447:         /// <summary>Run the three primary rules of boidom.</summary>
//000448:         /// <param name="boid">The boid to process.</param>
//000449:         /// <returns>The velocity vector resulting from the three primary rules and their associated weights.</returns>
//000450:         private Vector3D PrimaryRules_1_2_3(Boid boid)
//000451:         {
//000452:             int numNearby = 0;
//000453:             Vector3D summedPosition = new Vector3D();
//000454:             Vector3D summedVelocity = new Vector3D();
//000455:             Vector3D summedSeparation = new Vector3D();
//000456: 
//000457:             // For rule #1, we want the boid to fly towards the center of all of those in its neighborhood.
//000458:             // We find all of those boids, average their positions, and create a velocity vector to move the
//000459:             // boid a bit of the way there.
//000460: 
//000461:             // For rule #2, we want the boid to move away from each other boid it's a bit too close to.
//000462:             // Find all of those boids in its immediate vicinity, and push it away.
//000463: 
//000464:             // For rule #3, we want the boid to match velocities with those boids in its neighborhood.
//000465:             // Sum their velocities, find the average, and move this boid's velocity a bit in that direction.
//000466: 
//000467:             foreach (var other in m_boidModels)
//000468:             {
//000469:                 if (other != boid && 
//000470:                     (other.PreviousPosition - boid.PreviousPosition).Length <= NEIGHBORHOOD_SIZE &&
//000471:                     boid.ComputeAngle(other) <= 135)
//000472:                 {
//000473:                     summedPosition += other.PreviousPosition;
//000474:                     summedVelocity += other.PreviousVelocity;
//000475:                     numNearby++;
//000476: 
//000477:                     if ((other.PreviousPosition - boid.PreviousPosition).Length < MIN_DISTANCE_FROM_NEIGHBOR)
//000478:                     {
//000479:                         summedSeparation -= (other.PreviousPosition - boid.PreviousPosition);
//000480:                     }
//000481:                 }
//000482:             }
//000483: 
//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
//000485:             var rule2_separateFromNearby = summedSeparation;
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
//000487: 
//000488:             return
//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
//000499:             var v = new Vector3D();
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_0121:  ldloc.3
    IL_0122:  brtrue.s   IL_0140

//000192:             {
    IL_0124:  nop
//000193:                 Zoom(e.Key == Key.Up ? 1 : -1);
    IL_0125:  ldarg.0
    IL_0126:  ldarg.2
    IL_0127:  callvirt   instance valuetype [WindowsBase]System.Windows.Input.Key [PresentationCore]System.Windows.Input.KeyEventArgs::get_Key()
    IL_012c:  ldc.i4.s   24
    IL_012e:  beq.s      IL_0133

    IL_0130:  ldc.i4.m1
    IL_0131:  br.s       IL_0134

    IL_0133:  ldc.i4.1
    IL_0134:  call       instance void ParallelBoids.MainWindow::Zoom(int32)
    IL_0139:  nop
//000194:             }
    IL_013a:  nop
//000195: 
//000196:                 // If 'r' is pressed, reset all of the boids to random positions and velocities
//000197:             else if (e.Key == Key.R)
//000198:             {
//000199:                 RandomizeBoidPositionsAndVelocities();
//000200:             }
//000201: 
//000202:                 // If 'h', display usage instructions to the user
//000203:             else if (e.Key == Key.H)
//000204:             {
//000205:                 string instructions =
//000206:                     "** Window Controls **" + Environment.NewLine +
//000207:                     "Auto-Camera Positioning: 'a'" + Environment.NewLine +
//000208:                     "Pan: Click Left And Drag" + Environment.NewLine +
//000209:                     "Zoom In / Out: Mousewheel (or) Up/Down Keys (or) Ctrl+Middle Mouse Move" + Environment.NewLine +
//000210:                     "Full Screen: Right Double-Click" + Environment.NewLine +
//000211:                     "Restore to Normal Window Size: Right Double-Click (or) Escape Key" + Environment.NewLine +
//000212:                     "Pause: 'b'" + Environment.NewLine +
//000213:                     "Translucency: 't'" + Environment.NewLine +
//000214:                     Environment.NewLine +
//000215:                     "** Boid Controls **" + Environment.NewLine +
//000216:                     "Scatter: Left Double-Click" + Environment.NewLine +
//000217:                     "Change Max Speed: Ctrl + Mousewheel" + Environment.NewLine +
//000218:                     "Randomize: 'r'" + Environment.NewLine +
//000219:                     Environment.NewLine +
//000220:                     "** Parallelism Controls **" + Environment.NewLine +
//000221:                     "Go Parallel: 'p'" + Environment.NewLine;
//000222:                 MessageBox.Show(this, instructions, "Instructions", MessageBoxButton.OK, MessageBoxImage.Information);
//000223:             }
//000224:         }
//000225: 
//000226:         /// <summary>Handle mousedown events.</summary>
//000227:         /// <param name="sender">The sender.</param>
//000228:         /// <param name="e">The eventargs.</param>
//000229:         private void Window_MouseDown(object sender, MouseButtonEventArgs e)
//000230:         {
//000231:             // Log the last mouse position
//000232:             _lastMousePosition = e.GetPosition(this);
//000233:         }
//000234: 
//000235:         /// <summary>Handle mousewheel events.</summary>
//000236:         /// <param name="sender">The sender.</param>
//000237:         /// <param name="e">The eventargs.</param>
//000238:         private void Window_MouseWheel(object sender, MouseWheelEventArgs e)
//000239:         {
//000240:             // If ctrl is pressed, change the max bird speed based on the number of mousewheel turns
//000241:             if ((Keyboard.Modifiers & ModifierKeys.Control) != 0)
//000242:             {
//000243:                 const int MIN_SPEED = 2, MAX_SPEED = 10;
//000244:                 if (e.Delta > 0 && m_speedLimit < MAX_SPEED) m_speedLimit++;
//000245:                 else if (e.Delta < 0 && m_speedLimit > MIN_SPEED) m_speedLimit--;
//000246:             }
//000247:                 // Otherwise, as long as we're not in auto-panning/zooming mode,
//000248:                 // zoom in or out based on the number of mousewheel turns
//000249:             else if (!m_autoPanCamera) Zoom(e.Delta / Mouse.MouseWheelDeltaForOneLine); 
//000250:         }
//000251: 
//000252:         /// <summary>Handle mousedoubleclick events.</summary>
//000253:         /// <param name="sender">The sender.</param>
//000254:         /// <param name="e">The eventargs.</param>
//000255:         private void Window_MouseDoubleClick(object sender, MouseButtonEventArgs e)
//000256:         {
//000257:             // If the right mouse button is double clicked, alternate between maximized and normal view
//000258:             if (e.ChangedButton == MouseButton.Right)
//000259:             {
//000260:                 if (WindowState == WindowState.Maximized)
//000261:                 {
//000262:                     Topmost = false;
//000263:                     WindowStyle = WindowStyle.ThreeDBorderWindow;
//000264:                     WindowState = WindowState.Normal;
//000265:                 }
//000266:                 else
//000267:                 {
//000268:                     Topmost = true;
//000269:                     WindowStyle = WindowStyle.None;
//000270:                     WindowState = WindowState.Maximized;
//000271:                 }
//000272:             }
//000273:                 // If the left mouse button is double clicked, scatter the boids
//000274:             else if (e.ChangedButton == MouseButton.Left)
//000275:             {
//000276:                 Scatter();
//000277:             }
//000278:         }
//000279: 
//000280:         /// <summary>Scatter the boids.</summary>
//000281:         private void Scatter()
//000282:         {
//000283:             // Start scatterring if a scatter isn't already in process
//000284:             if (m_scatterTimer == null)
//000285:             {
//000286:                 // Ka'boom.  Something scares the boids.
//000287:                 SystemSounds.Hand.Play();
//000288: 
//000289:                 // Store original settings
//000290:                 var origHome = m_home;
//000291:                 var origRule1Weight = m_rule1Weight;
//000292:                 var origRule2Weight = m_rule2Weight;
//000293:                 var origRule4Weight = m_rule4Weight;
//000294:                 var origRule5Weight = m_rule5Weight;
//000295: 
//000296:                 // Create new scatter settings
//000297:                 m_home = new Vector3D(0, 0, 0);
//000298:                 m_rule1Weight = origRule1Weight * -5;
//000299:                 m_rule2Weight = origRule2Weight * 2;
//000300:                 m_rule4Weight = 0;
//000301:                 m_rule5Weight = origRule5Weight * -5;
//000302: 
//000303:                 // Start a timer to restore the original settings
//000304:                 m_scatterTimer = new Timer(_ =>
//000305:                 {
//000306:                     // Restore the original settings
//000307:                     m_home = origHome;
//000308:                     m_rule1Weight = origRule1Weight;
//000309:                     m_rule2Weight = origRule2Weight;
//000310:                     m_rule4Weight = origRule4Weight;
//000311:                     m_rule5Weight = origRule5Weight;
//000312: 
//000313:                     // Clean up the timer
//000314:                     m_scatterTimer.Dispose();
//000315:                     m_scatterTimer = null;
//000316:                 }, null, SCATTER_TIME, -1);
//000317:             }
//000318:         }
//000319: 
//000320:         /// <summary>Handle mousemove events.</summary>
//000321:         /// <param name="sender">The sender.</param>
//000322:         /// <param name="e">The eventargs.</param>
//000323:         private void Window_MouseMove(object sender, MouseEventArgs e)
//000324:         {
//000325:             // If we're not auto-panning
//000326:             if (!m_autoPanCamera)
//000327:             {
//000328:                 // Get the new mouse position and compute the difference from the previous
//000329:                 var newPosition = e.GetPosition(this);
//000330:                 var diff = _lastMousePosition - newPosition;
//000331: 
//000332:                 // If the left mouse position was pressed, pan based on the x/y differences
//000333:                 if (e.LeftButton == MouseButtonState.Pressed)
//000334:                 {
//000335:                     camMain.Position = new Point3D(camMain.Position.X + diff.X * .4, camMain.Position.Y - diff.Y * .4, camMain.Position.Z);
//000336:                 }
//000337:                     // If the middle button was pressed, zoom based on the y difference
//000338:                 else if (e.MiddleButton == MouseButtonState.Pressed)
//000339:                 {
//000340:                     Zoom((int)diff.Y);
//000341:                 }
//000342: 
//000343:                 // Store the new position
//000344:                 _lastMousePosition = newPosition;
//000345:             }
//000346:         }
//000347: 
//000348:         /// <summary>Zoom in or out based on the specified degree of zoom.</summary>
//000349:         /// <param name="amountOfChange">Amount to zoom in (positive) or out (negative).</param>
//000350:         private void Zoom(int amountOfChange)
//000351:         {
//000352:             const int ZOOM_FACTOR = 3;
//000353:             camMain.Position = Point3D.Add(camMain.Position, camMain.LookDirection * amountOfChange * ZOOM_FACTOR);
//000354:         }
//000355:         #endregion
//000356: 
//000357:         #region Step and Render
//000358:         /// <summary>Runs the rendering loop.</summary>
//000359:         private void RenderUpdateLoop()
//000360:         {
//000361:             // Loop forever...
//000362:             while (true)
//000363:             {
//000364:                 // Wait to receive a signal that we should render another frame
//000365:                 m_renderSignal.WaitOne();
//000366: 
//000367:                 // Start timing.
//000368:                 m_frameStopwatch.Restart();
//000369: 
//000370:                 // Update the positions and velocities of all of the boids.
//000371:                 StepBoids();
//000372: 
//000373:                 // Update our rendering stats for display to the user
//000374:                 m_totalRenderingMillisecondsSinceLastUserPresentation += m_frameStopwatch.ElapsedMilliseconds;
//000375:                 m_numRendersSinceLastUserPresentation++;
//000376: 
//000377:                 // Render the boids to the UI
//000378:                 Dispatcher.Invoke((Action)RenderBoids, DispatcherPriority.Send, null);
//000379:             }
//000380:         }
//000381: 
//000382:         /// <summary>Step the boids one step, updating their velocities and positions.</summary>
//000383:         private void StepBoids()
//000384:         {
//000385:             // Store the current velocities and positions so that we can operate on an immutable copy
//000386:             foreach (var boid in m_boidModels) boid.StorePositionAndVelocityIntoPrevious();
//000387: 
//000388:             // For each boid, analyze how the various boid rules influence its velocity and position,
//000389:             // then store this new information.  After this step, we'll be able to render the boids.
//000390:             Parallel.ForEach(m_boidModels, m_parallelOptions, boid =>
//000391:             {
//000392:                 var v1_2_3 = PrimaryRules_1_2_3(boid); // weights factored in already in PrimaryRules
//000393:                 var v4 = m_rule4Weight * Rule4_EncourageStayingWithinAviary(boid);
//000394:                 var v5 = m_rule5Weight * Rule5_TendendcyTowardsHome(boid);
//000395: 
//000396:                 boid.Velocity = BoundVelocity(boid.PreviousVelocity + v1_2_3 + v4 + v5, m_speedLimit);
//000397:                 boid.Velocity.Normalize();
//000398: 
//000399:                 var tmpPosition = boid.PreviousPosition + boid.Velocity;
//000400:                 if (tmpPosition.Y >= 0) boid.Position = tmpPosition;
//000401:             });
//000402:         }
//000403: 
//000404:         /// <summary>Render the boids.</summary>
//000405:         private void RenderBoids()
//000406:         {
//000407:             // Make sure the boids are all positioned and pointing correctly
//000408:             foreach (var boid in m_boidModels) boid.TransformByPositionAndVelocity();
//000409: 
//000410:             // Every once in a while, update the user-displayed stats on timings
//000411:             var now = DateTimeOffset.Now;
//000412:             if (now >= m_nextUserPresentation)
//000413:             {
//000414:                 Title = string.Format("Procs: {0}, Time: {1:F2}", m_parallelOptions.MaxDegreeOfParallelism, 
//000415:                     m_numRendersSinceLastUserPresentation > 0 ? 
//000416:                     m_totalRenderingMillisecondsSinceLastUserPresentation / (double)m_numRendersSinceLastUserPresentation : 
//000417:                     0);
//000418:                 m_nextUserPresentation = now.AddSeconds(1);
//000419:                 m_numRendersSinceLastUserPresentation = 0;
//000420:                 m_totalRenderingMillisecondsSinceLastUserPresentation = 0;
//000421:             }
//000422: 
//000423:             // If we're in auto-panning mode, move the camera appropriately
//000424:             if (m_autoPanCamera)
//000425:             {
//000426:                 // Compute the maximum Z value of all of the boids and the center of their mass
//000427:                 double maxZ = double.MinValue;
//000428:                 Vector3D totalPos = new Vector3D();
//000429:                 foreach (var boid in m_boidModels)
//000430:                 {
//000431:                     if (boid.Position.Z > maxZ) maxZ = boid.Position.Z;
//000432:                     totalPos += boid.Position;
//000433:                 }
//000434:                 var newCameraPos = totalPos / m_boidModels.Length;
//000435:                 
//000436:                 // Move the camera to point at the center of the boids, a ways back from the max boid's Z
//000437:                 const int CAMERA_DISTANCE_FROM_MAXZ = 100;
//000438:                 const double CAMERA_SPEED_LIMIT = .01;
//000439:                 var newPos = new Point3D(newCameraPos.X, newCameraPos.Y, maxZ + CAMERA_DISTANCE_FROM_MAXZ);
//000440:                 var cameraVelocity = newPos - camMain.Position;
//000441:                 camMain.Position = camMain.Position + (cameraVelocity * CAMERA_SPEED_LIMIT);
//000442:             }
//000443:         }
//000444:         #endregion
//000445: 
//000446:         #region Boid Rules
//000447:         /// <summary>Run the three primary rules of boidom.</summary>
//000448:         /// <param name="boid">The boid to process.</param>
//000449:         /// <returns>The velocity vector resulting from the three primary rules and their associated weights.</returns>
//000450:         private Vector3D PrimaryRules_1_2_3(Boid boid)
//000451:         {
//000452:             int numNearby = 0;
//000453:             Vector3D summedPosition = new Vector3D();
//000454:             Vector3D summedVelocity = new Vector3D();
//000455:             Vector3D summedSeparation = new Vector3D();
//000456: 
//000457:             // For rule #1, we want the boid to fly towards the center of all of those in its neighborhood.
//000458:             // We find all of those boids, average their positions, and create a velocity vector to move the
//000459:             // boid a bit of the way there.
//000460: 
//000461:             // For rule #2, we want the boid to move away from each other boid it's a bit too close to.
//000462:             // Find all of those boids in its immediate vicinity, and push it away.
//000463: 
//000464:             // For rule #3, we want the boid to match velocities with those boids in its neighborhood.
//000465:             // Sum their velocities, find the average, and move this boid's velocity a bit in that direction.
//000466: 
//000467:             foreach (var other in m_boidModels)
//000468:             {
//000469:                 if (other != boid && 
//000470:                     (other.PreviousPosition - boid.PreviousPosition).Length <= NEIGHBORHOOD_SIZE &&
//000471:                     boid.ComputeAngle(other) <= 135)
//000472:                 {
//000473:                     summedPosition += other.PreviousPosition;
//000474:                     summedVelocity += other.PreviousVelocity;
//000475:                     numNearby++;
//000476: 
//000477:                     if ((other.PreviousPosition - boid.PreviousPosition).Length < MIN_DISTANCE_FROM_NEIGHBOR)
//000478:                     {
//000479:                         summedSeparation -= (other.PreviousPosition - boid.PreviousPosition);
//000480:                     }
//000481:                 }
//000482:             }
//000483: 
//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
//000485:             var rule2_separateFromNearby = summedSeparation;
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
//000487: 
//000488:             return
//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
//000499:             var v = new Vector3D();
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_013b:  br         IL_02ba

//000197:             else if (e.Key == Key.R)
    IL_0140:  ldarg.2
    IL_0141:  callvirt   instance valuetype [WindowsBase]System.Windows.Input.Key [PresentationCore]System.Windows.Input.KeyEventArgs::get_Key()
    IL_0146:  ldc.i4.s   61
    IL_0148:  ceq
    IL_014a:  ldc.i4.0
    IL_014b:  ceq
    IL_014d:  stloc.3
//000198:             {
//000199:                 RandomizeBoidPositionsAndVelocities();
//000200:             }
//000201: 
//000202:                 // If 'h', display usage instructions to the user
//000203:             else if (e.Key == Key.H)
//000204:             {
//000205:                 string instructions =
//000206:                     "** Window Controls **" + Environment.NewLine +
//000207:                     "Auto-Camera Positioning: 'a'" + Environment.NewLine +
//000208:                     "Pan: Click Left And Drag" + Environment.NewLine +
//000209:                     "Zoom In / Out: Mousewheel (or) Up/Down Keys (or) Ctrl+Middle Mouse Move" + Environment.NewLine +
//000210:                     "Full Screen: Right Double-Click" + Environment.NewLine +
//000211:                     "Restore to Normal Window Size: Right Double-Click (or) Escape Key" + Environment.NewLine +
//000212:                     "Pause: 'b'" + Environment.NewLine +
//000213:                     "Translucency: 't'" + Environment.NewLine +
//000214:                     Environment.NewLine +
//000215:                     "** Boid Controls **" + Environment.NewLine +
//000216:                     "Scatter: Left Double-Click" + Environment.NewLine +
//000217:                     "Change Max Speed: Ctrl + Mousewheel" + Environment.NewLine +
//000218:                     "Randomize: 'r'" + Environment.NewLine +
//000219:                     Environment.NewLine +
//000220:                     "** Parallelism Controls **" + Environment.NewLine +
//000221:                     "Go Parallel: 'p'" + Environment.NewLine;
//000222:                 MessageBox.Show(this, instructions, "Instructions", MessageBoxButton.OK, MessageBoxImage.Information);
//000223:             }
//000224:         }
//000225: 
//000226:         /// <summary>Handle mousedown events.</summary>
//000227:         /// <param name="sender">The sender.</param>
//000228:         /// <param name="e">The eventargs.</param>
//000229:         private void Window_MouseDown(object sender, MouseButtonEventArgs e)
//000230:         {
//000231:             // Log the last mouse position
//000232:             _lastMousePosition = e.GetPosition(this);
//000233:         }
//000234: 
//000235:         /// <summary>Handle mousewheel events.</summary>
//000236:         /// <param name="sender">The sender.</param>
//000237:         /// <param name="e">The eventargs.</param>
//000238:         private void Window_MouseWheel(object sender, MouseWheelEventArgs e)
//000239:         {
//000240:             // If ctrl is pressed, change the max bird speed based on the number of mousewheel turns
//000241:             if ((Keyboard.Modifiers & ModifierKeys.Control) != 0)
//000242:             {
//000243:                 const int MIN_SPEED = 2, MAX_SPEED = 10;
//000244:                 if (e.Delta > 0 && m_speedLimit < MAX_SPEED) m_speedLimit++;
//000245:                 else if (e.Delta < 0 && m_speedLimit > MIN_SPEED) m_speedLimit--;
//000246:             }
//000247:                 // Otherwise, as long as we're not in auto-panning/zooming mode,
//000248:                 // zoom in or out based on the number of mousewheel turns
//000249:             else if (!m_autoPanCamera) Zoom(e.Delta / Mouse.MouseWheelDeltaForOneLine); 
//000250:         }
//000251: 
//000252:         /// <summary>Handle mousedoubleclick events.</summary>
//000253:         /// <param name="sender">The sender.</param>
//000254:         /// <param name="e">The eventargs.</param>
//000255:         private void Window_MouseDoubleClick(object sender, MouseButtonEventArgs e)
//000256:         {
//000257:             // If the right mouse button is double clicked, alternate between maximized and normal view
//000258:             if (e.ChangedButton == MouseButton.Right)
//000259:             {
//000260:                 if (WindowState == WindowState.Maximized)
//000261:                 {
//000262:                     Topmost = false;
//000263:                     WindowStyle = WindowStyle.ThreeDBorderWindow;
//000264:                     WindowState = WindowState.Normal;
//000265:                 }
//000266:                 else
//000267:                 {
//000268:                     Topmost = true;
//000269:                     WindowStyle = WindowStyle.None;
//000270:                     WindowState = WindowState.Maximized;
//000271:                 }
//000272:             }
//000273:                 // If the left mouse button is double clicked, scatter the boids
//000274:             else if (e.ChangedButton == MouseButton.Left)
//000275:             {
//000276:                 Scatter();
//000277:             }
//000278:         }
//000279: 
//000280:         /// <summary>Scatter the boids.</summary>
//000281:         private void Scatter()
//000282:         {
//000283:             // Start scatterring if a scatter isn't already in process
//000284:             if (m_scatterTimer == null)
//000285:             {
//000286:                 // Ka'boom.  Something scares the boids.
//000287:                 SystemSounds.Hand.Play();
//000288: 
//000289:                 // Store original settings
//000290:                 var origHome = m_home;
//000291:                 var origRule1Weight = m_rule1Weight;
//000292:                 var origRule2Weight = m_rule2Weight;
//000293:                 var origRule4Weight = m_rule4Weight;
//000294:                 var origRule5Weight = m_rule5Weight;
//000295: 
//000296:                 // Create new scatter settings
//000297:                 m_home = new Vector3D(0, 0, 0);
//000298:                 m_rule1Weight = origRule1Weight * -5;
//000299:                 m_rule2Weight = origRule2Weight * 2;
//000300:                 m_rule4Weight = 0;
//000301:                 m_rule5Weight = origRule5Weight * -5;
//000302: 
//000303:                 // Start a timer to restore the original settings
//000304:                 m_scatterTimer = new Timer(_ =>
//000305:                 {
//000306:                     // Restore the original settings
//000307:                     m_home = origHome;
//000308:                     m_rule1Weight = origRule1Weight;
//000309:                     m_rule2Weight = origRule2Weight;
//000310:                     m_rule4Weight = origRule4Weight;
//000311:                     m_rule5Weight = origRule5Weight;
//000312: 
//000313:                     // Clean up the timer
//000314:                     m_scatterTimer.Dispose();
//000315:                     m_scatterTimer = null;
//000316:                 }, null, SCATTER_TIME, -1);
//000317:             }
//000318:         }
//000319: 
//000320:         /// <summary>Handle mousemove events.</summary>
//000321:         /// <param name="sender">The sender.</param>
//000322:         /// <param name="e">The eventargs.</param>
//000323:         private void Window_MouseMove(object sender, MouseEventArgs e)
//000324:         {
//000325:             // If we're not auto-panning
//000326:             if (!m_autoPanCamera)
//000327:             {
//000328:                 // Get the new mouse position and compute the difference from the previous
//000329:                 var newPosition = e.GetPosition(this);
//000330:                 var diff = _lastMousePosition - newPosition;
//000331: 
//000332:                 // If the left mouse position was pressed, pan based on the x/y differences
//000333:                 if (e.LeftButton == MouseButtonState.Pressed)
//000334:                 {
//000335:                     camMain.Position = new Point3D(camMain.Position.X + diff.X * .4, camMain.Position.Y - diff.Y * .4, camMain.Position.Z);
//000336:                 }
//000337:                     // If the middle button was pressed, zoom based on the y difference
//000338:                 else if (e.MiddleButton == MouseButtonState.Pressed)
//000339:                 {
//000340:                     Zoom((int)diff.Y);
//000341:                 }
//000342: 
//000343:                 // Store the new position
//000344:                 _lastMousePosition = newPosition;
//000345:             }
//000346:         }
//000347: 
//000348:         /// <summary>Zoom in or out based on the specified degree of zoom.</summary>
//000349:         /// <param name="amountOfChange">Amount to zoom in (positive) or out (negative).</param>
//000350:         private void Zoom(int amountOfChange)
//000351:         {
//000352:             const int ZOOM_FACTOR = 3;
//000353:             camMain.Position = Point3D.Add(camMain.Position, camMain.LookDirection * amountOfChange * ZOOM_FACTOR);
//000354:         }
//000355:         #endregion
//000356: 
//000357:         #region Step and Render
//000358:         /// <summary>Runs the rendering loop.</summary>
//000359:         private void RenderUpdateLoop()
//000360:         {
//000361:             // Loop forever...
//000362:             while (true)
//000363:             {
//000364:                 // Wait to receive a signal that we should render another frame
//000365:                 m_renderSignal.WaitOne();
//000366: 
//000367:                 // Start timing.
//000368:                 m_frameStopwatch.Restart();
//000369: 
//000370:                 // Update the positions and velocities of all of the boids.
//000371:                 StepBoids();
//000372: 
//000373:                 // Update our rendering stats for display to the user
//000374:                 m_totalRenderingMillisecondsSinceLastUserPresentation += m_frameStopwatch.ElapsedMilliseconds;
//000375:                 m_numRendersSinceLastUserPresentation++;
//000376: 
//000377:                 // Render the boids to the UI
//000378:                 Dispatcher.Invoke((Action)RenderBoids, DispatcherPriority.Send, null);
//000379:             }
//000380:         }
//000381: 
//000382:         /// <summary>Step the boids one step, updating their velocities and positions.</summary>
//000383:         private void StepBoids()
//000384:         {
//000385:             // Store the current velocities and positions so that we can operate on an immutable copy
//000386:             foreach (var boid in m_boidModels) boid.StorePositionAndVelocityIntoPrevious();
//000387: 
//000388:             // For each boid, analyze how the various boid rules influence its velocity and position,
//000389:             // then store this new information.  After this step, we'll be able to render the boids.
//000390:             Parallel.ForEach(m_boidModels, m_parallelOptions, boid =>
//000391:             {
//000392:                 var v1_2_3 = PrimaryRules_1_2_3(boid); // weights factored in already in PrimaryRules
//000393:                 var v4 = m_rule4Weight * Rule4_EncourageStayingWithinAviary(boid);
//000394:                 var v5 = m_rule5Weight * Rule5_TendendcyTowardsHome(boid);
//000395: 
//000396:                 boid.Velocity = BoundVelocity(boid.PreviousVelocity + v1_2_3 + v4 + v5, m_speedLimit);
//000397:                 boid.Velocity.Normalize();
//000398: 
//000399:                 var tmpPosition = boid.PreviousPosition + boid.Velocity;
//000400:                 if (tmpPosition.Y >= 0) boid.Position = tmpPosition;
//000401:             });
//000402:         }
//000403: 
//000404:         /// <summary>Render the boids.</summary>
//000405:         private void RenderBoids()
//000406:         {
//000407:             // Make sure the boids are all positioned and pointing correctly
//000408:             foreach (var boid in m_boidModels) boid.TransformByPositionAndVelocity();
//000409: 
//000410:             // Every once in a while, update the user-displayed stats on timings
//000411:             var now = DateTimeOffset.Now;
//000412:             if (now >= m_nextUserPresentation)
//000413:             {
//000414:                 Title = string.Format("Procs: {0}, Time: {1:F2}", m_parallelOptions.MaxDegreeOfParallelism, 
//000415:                     m_numRendersSinceLastUserPresentation > 0 ? 
//000416:                     m_totalRenderingMillisecondsSinceLastUserPresentation / (double)m_numRendersSinceLastUserPresentation : 
//000417:                     0);
//000418:                 m_nextUserPresentation = now.AddSeconds(1);
//000419:                 m_numRendersSinceLastUserPresentation = 0;
//000420:                 m_totalRenderingMillisecondsSinceLastUserPresentation = 0;
//000421:             }
//000422: 
//000423:             // If we're in auto-panning mode, move the camera appropriately
//000424:             if (m_autoPanCamera)
//000425:             {
//000426:                 // Compute the maximum Z value of all of the boids and the center of their mass
//000427:                 double maxZ = double.MinValue;
//000428:                 Vector3D totalPos = new Vector3D();
//000429:                 foreach (var boid in m_boidModels)
//000430:                 {
//000431:                     if (boid.Position.Z > maxZ) maxZ = boid.Position.Z;
//000432:                     totalPos += boid.Position;
//000433:                 }
//000434:                 var newCameraPos = totalPos / m_boidModels.Length;
//000435:                 
//000436:                 // Move the camera to point at the center of the boids, a ways back from the max boid's Z
//000437:                 const int CAMERA_DISTANCE_FROM_MAXZ = 100;
//000438:                 const double CAMERA_SPEED_LIMIT = .01;
//000439:                 var newPos = new Point3D(newCameraPos.X, newCameraPos.Y, maxZ + CAMERA_DISTANCE_FROM_MAXZ);
//000440:                 var cameraVelocity = newPos - camMain.Position;
//000441:                 camMain.Position = camMain.Position + (cameraVelocity * CAMERA_SPEED_LIMIT);
//000442:             }
//000443:         }
//000444:         #endregion
//000445: 
//000446:         #region Boid Rules
//000447:         /// <summary>Run the three primary rules of boidom.</summary>
//000448:         /// <param name="boid">The boid to process.</param>
//000449:         /// <returns>The velocity vector resulting from the three primary rules and their associated weights.</returns>
//000450:         private Vector3D PrimaryRules_1_2_3(Boid boid)
//000451:         {
//000452:             int numNearby = 0;
//000453:             Vector3D summedPosition = new Vector3D();
//000454:             Vector3D summedVelocity = new Vector3D();
//000455:             Vector3D summedSeparation = new Vector3D();
//000456: 
//000457:             // For rule #1, we want the boid to fly towards the center of all of those in its neighborhood.
//000458:             // We find all of those boids, average their positions, and create a velocity vector to move the
//000459:             // boid a bit of the way there.
//000460: 
//000461:             // For rule #2, we want the boid to move away from each other boid it's a bit too close to.
//000462:             // Find all of those boids in its immediate vicinity, and push it away.
//000463: 
//000464:             // For rule #3, we want the boid to match velocities with those boids in its neighborhood.
//000465:             // Sum their velocities, find the average, and move this boid's velocity a bit in that direction.
//000466: 
//000467:             foreach (var other in m_boidModels)
//000468:             {
//000469:                 if (other != boid && 
//000470:                     (other.PreviousPosition - boid.PreviousPosition).Length <= NEIGHBORHOOD_SIZE &&
//000471:                     boid.ComputeAngle(other) <= 135)
//000472:                 {
//000473:                     summedPosition += other.PreviousPosition;
//000474:                     summedVelocity += other.PreviousVelocity;
//000475:                     numNearby++;
//000476: 
//000477:                     if ((other.PreviousPosition - boid.PreviousPosition).Length < MIN_DISTANCE_FROM_NEIGHBOR)
//000478:                     {
//000479:                         summedSeparation -= (other.PreviousPosition - boid.PreviousPosition);
//000480:                     }
//000481:                 }
//000482:             }
//000483: 
//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
//000485:             var rule2_separateFromNearby = summedSeparation;
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
//000487: 
//000488:             return
//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
//000499:             var v = new Vector3D();
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_014e:  ldloc.3
    IL_014f:  brtrue.s   IL_0160

//000198:             {
    IL_0151:  nop
//000199:                 RandomizeBoidPositionsAndVelocities();
    IL_0152:  ldarg.0
    IL_0153:  ldnull
    IL_0154:  call       instance void ParallelBoids.MainWindow::RandomizeBoidPositionsAndVelocities(class [mscorlib]System.Random)
    IL_0159:  nop
//000200:             }
    IL_015a:  nop
//000201: 
//000202:                 // If 'h', display usage instructions to the user
//000203:             else if (e.Key == Key.H)
//000204:             {
//000205:                 string instructions =
//000206:                     "** Window Controls **" + Environment.NewLine +
//000207:                     "Auto-Camera Positioning: 'a'" + Environment.NewLine +
//000208:                     "Pan: Click Left And Drag" + Environment.NewLine +
//000209:                     "Zoom In / Out: Mousewheel (or) Up/Down Keys (or) Ctrl+Middle Mouse Move" + Environment.NewLine +
//000210:                     "Full Screen: Right Double-Click" + Environment.NewLine +
//000211:                     "Restore to Normal Window Size: Right Double-Click (or) Escape Key" + Environment.NewLine +
//000212:                     "Pause: 'b'" + Environment.NewLine +
//000213:                     "Translucency: 't'" + Environment.NewLine +
//000214:                     Environment.NewLine +
//000215:                     "** Boid Controls **" + Environment.NewLine +
//000216:                     "Scatter: Left Double-Click" + Environment.NewLine +
//000217:                     "Change Max Speed: Ctrl + Mousewheel" + Environment.NewLine +
//000218:                     "Randomize: 'r'" + Environment.NewLine +
//000219:                     Environment.NewLine +
//000220:                     "** Parallelism Controls **" + Environment.NewLine +
//000221:                     "Go Parallel: 'p'" + Environment.NewLine;
//000222:                 MessageBox.Show(this, instructions, "Instructions", MessageBoxButton.OK, MessageBoxImage.Information);
//000223:             }
//000224:         }
//000225: 
//000226:         /// <summary>Handle mousedown events.</summary>
//000227:         /// <param name="sender">The sender.</param>
//000228:         /// <param name="e">The eventargs.</param>
//000229:         private void Window_MouseDown(object sender, MouseButtonEventArgs e)
//000230:         {
//000231:             // Log the last mouse position
//000232:             _lastMousePosition = e.GetPosition(this);
//000233:         }
//000234: 
//000235:         /// <summary>Handle mousewheel events.</summary>
//000236:         /// <param name="sender">The sender.</param>
//000237:         /// <param name="e">The eventargs.</param>
//000238:         private void Window_MouseWheel(object sender, MouseWheelEventArgs e)
//000239:         {
//000240:             // If ctrl is pressed, change the max bird speed based on the number of mousewheel turns
//000241:             if ((Keyboard.Modifiers & ModifierKeys.Control) != 0)
//000242:             {
//000243:                 const int MIN_SPEED = 2, MAX_SPEED = 10;
//000244:                 if (e.Delta > 0 && m_speedLimit < MAX_SPEED) m_speedLimit++;
//000245:                 else if (e.Delta < 0 && m_speedLimit > MIN_SPEED) m_speedLimit--;
//000246:             }
//000247:                 // Otherwise, as long as we're not in auto-panning/zooming mode,
//000248:                 // zoom in or out based on the number of mousewheel turns
//000249:             else if (!m_autoPanCamera) Zoom(e.Delta / Mouse.MouseWheelDeltaForOneLine); 
//000250:         }
//000251: 
//000252:         /// <summary>Handle mousedoubleclick events.</summary>
//000253:         /// <param name="sender">The sender.</param>
//000254:         /// <param name="e">The eventargs.</param>
//000255:         private void Window_MouseDoubleClick(object sender, MouseButtonEventArgs e)
//000256:         {
//000257:             // If the right mouse button is double clicked, alternate between maximized and normal view
//000258:             if (e.ChangedButton == MouseButton.Right)
//000259:             {
//000260:                 if (WindowState == WindowState.Maximized)
//000261:                 {
//000262:                     Topmost = false;
//000263:                     WindowStyle = WindowStyle.ThreeDBorderWindow;
//000264:                     WindowState = WindowState.Normal;
//000265:                 }
//000266:                 else
//000267:                 {
//000268:                     Topmost = true;
//000269:                     WindowStyle = WindowStyle.None;
//000270:                     WindowState = WindowState.Maximized;
//000271:                 }
//000272:             }
//000273:                 // If the left mouse button is double clicked, scatter the boids
//000274:             else if (e.ChangedButton == MouseButton.Left)
//000275:             {
//000276:                 Scatter();
//000277:             }
//000278:         }
//000279: 
//000280:         /// <summary>Scatter the boids.</summary>
//000281:         private void Scatter()
//000282:         {
//000283:             // Start scatterring if a scatter isn't already in process
//000284:             if (m_scatterTimer == null)
//000285:             {
//000286:                 // Ka'boom.  Something scares the boids.
//000287:                 SystemSounds.Hand.Play();
//000288: 
//000289:                 // Store original settings
//000290:                 var origHome = m_home;
//000291:                 var origRule1Weight = m_rule1Weight;
//000292:                 var origRule2Weight = m_rule2Weight;
//000293:                 var origRule4Weight = m_rule4Weight;
//000294:                 var origRule5Weight = m_rule5Weight;
//000295: 
//000296:                 // Create new scatter settings
//000297:                 m_home = new Vector3D(0, 0, 0);
//000298:                 m_rule1Weight = origRule1Weight * -5;
//000299:                 m_rule2Weight = origRule2Weight * 2;
//000300:                 m_rule4Weight = 0;
//000301:                 m_rule5Weight = origRule5Weight * -5;
//000302: 
//000303:                 // Start a timer to restore the original settings
//000304:                 m_scatterTimer = new Timer(_ =>
//000305:                 {
//000306:                     // Restore the original settings
//000307:                     m_home = origHome;
//000308:                     m_rule1Weight = origRule1Weight;
//000309:                     m_rule2Weight = origRule2Weight;
//000310:                     m_rule4Weight = origRule4Weight;
//000311:                     m_rule5Weight = origRule5Weight;
//000312: 
//000313:                     // Clean up the timer
//000314:                     m_scatterTimer.Dispose();
//000315:                     m_scatterTimer = null;
//000316:                 }, null, SCATTER_TIME, -1);
//000317:             }
//000318:         }
//000319: 
//000320:         /// <summary>Handle mousemove events.</summary>
//000321:         /// <param name="sender">The sender.</param>
//000322:         /// <param name="e">The eventargs.</param>
//000323:         private void Window_MouseMove(object sender, MouseEventArgs e)
//000324:         {
//000325:             // If we're not auto-panning
//000326:             if (!m_autoPanCamera)
//000327:             {
//000328:                 // Get the new mouse position and compute the difference from the previous
//000329:                 var newPosition = e.GetPosition(this);
//000330:                 var diff = _lastMousePosition - newPosition;
//000331: 
//000332:                 // If the left mouse position was pressed, pan based on the x/y differences
//000333:                 if (e.LeftButton == MouseButtonState.Pressed)
//000334:                 {
//000335:                     camMain.Position = new Point3D(camMain.Position.X + diff.X * .4, camMain.Position.Y - diff.Y * .4, camMain.Position.Z);
//000336:                 }
//000337:                     // If the middle button was pressed, zoom based on the y difference
//000338:                 else if (e.MiddleButton == MouseButtonState.Pressed)
//000339:                 {
//000340:                     Zoom((int)diff.Y);
//000341:                 }
//000342: 
//000343:                 // Store the new position
//000344:                 _lastMousePosition = newPosition;
//000345:             }
//000346:         }
//000347: 
//000348:         /// <summary>Zoom in or out based on the specified degree of zoom.</summary>
//000349:         /// <param name="amountOfChange">Amount to zoom in (positive) or out (negative).</param>
//000350:         private void Zoom(int amountOfChange)
//000351:         {
//000352:             const int ZOOM_FACTOR = 3;
//000353:             camMain.Position = Point3D.Add(camMain.Position, camMain.LookDirection * amountOfChange * ZOOM_FACTOR);
//000354:         }
//000355:         #endregion
//000356: 
//000357:         #region Step and Render
//000358:         /// <summary>Runs the rendering loop.</summary>
//000359:         private void RenderUpdateLoop()
//000360:         {
//000361:             // Loop forever...
//000362:             while (true)
//000363:             {
//000364:                 // Wait to receive a signal that we should render another frame
//000365:                 m_renderSignal.WaitOne();
//000366: 
//000367:                 // Start timing.
//000368:                 m_frameStopwatch.Restart();
//000369: 
//000370:                 // Update the positions and velocities of all of the boids.
//000371:                 StepBoids();
//000372: 
//000373:                 // Update our rendering stats for display to the user
//000374:                 m_totalRenderingMillisecondsSinceLastUserPresentation += m_frameStopwatch.ElapsedMilliseconds;
//000375:                 m_numRendersSinceLastUserPresentation++;
//000376: 
//000377:                 // Render the boids to the UI
//000378:                 Dispatcher.Invoke((Action)RenderBoids, DispatcherPriority.Send, null);
//000379:             }
//000380:         }
//000381: 
//000382:         /// <summary>Step the boids one step, updating their velocities and positions.</summary>
//000383:         private void StepBoids()
//000384:         {
//000385:             // Store the current velocities and positions so that we can operate on an immutable copy
//000386:             foreach (var boid in m_boidModels) boid.StorePositionAndVelocityIntoPrevious();
//000387: 
//000388:             // For each boid, analyze how the various boid rules influence its velocity and position,
//000389:             // then store this new information.  After this step, we'll be able to render the boids.
//000390:             Parallel.ForEach(m_boidModels, m_parallelOptions, boid =>
//000391:             {
//000392:                 var v1_2_3 = PrimaryRules_1_2_3(boid); // weights factored in already in PrimaryRules
//000393:                 var v4 = m_rule4Weight * Rule4_EncourageStayingWithinAviary(boid);
//000394:                 var v5 = m_rule5Weight * Rule5_TendendcyTowardsHome(boid);
//000395: 
//000396:                 boid.Velocity = BoundVelocity(boid.PreviousVelocity + v1_2_3 + v4 + v5, m_speedLimit);
//000397:                 boid.Velocity.Normalize();
//000398: 
//000399:                 var tmpPosition = boid.PreviousPosition + boid.Velocity;
//000400:                 if (tmpPosition.Y >= 0) boid.Position = tmpPosition;
//000401:             });
//000402:         }
//000403: 
//000404:         /// <summary>Render the boids.</summary>
//000405:         private void RenderBoids()
//000406:         {
//000407:             // Make sure the boids are all positioned and pointing correctly
//000408:             foreach (var boid in m_boidModels) boid.TransformByPositionAndVelocity();
//000409: 
//000410:             // Every once in a while, update the user-displayed stats on timings
//000411:             var now = DateTimeOffset.Now;
//000412:             if (now >= m_nextUserPresentation)
//000413:             {
//000414:                 Title = string.Format("Procs: {0}, Time: {1:F2}", m_parallelOptions.MaxDegreeOfParallelism, 
//000415:                     m_numRendersSinceLastUserPresentation > 0 ? 
//000416:                     m_totalRenderingMillisecondsSinceLastUserPresentation / (double)m_numRendersSinceLastUserPresentation : 
//000417:                     0);
//000418:                 m_nextUserPresentation = now.AddSeconds(1);
//000419:                 m_numRendersSinceLastUserPresentation = 0;
//000420:                 m_totalRenderingMillisecondsSinceLastUserPresentation = 0;
//000421:             }
//000422: 
//000423:             // If we're in auto-panning mode, move the camera appropriately
//000424:             if (m_autoPanCamera)
//000425:             {
//000426:                 // Compute the maximum Z value of all of the boids and the center of their mass
//000427:                 double maxZ = double.MinValue;
//000428:                 Vector3D totalPos = new Vector3D();
//000429:                 foreach (var boid in m_boidModels)
//000430:                 {
//000431:                     if (boid.Position.Z > maxZ) maxZ = boid.Position.Z;
//000432:                     totalPos += boid.Position;
//000433:                 }
//000434:                 var newCameraPos = totalPos / m_boidModels.Length;
//000435:                 
//000436:                 // Move the camera to point at the center of the boids, a ways back from the max boid's Z
//000437:                 const int CAMERA_DISTANCE_FROM_MAXZ = 100;
//000438:                 const double CAMERA_SPEED_LIMIT = .01;
//000439:                 var newPos = new Point3D(newCameraPos.X, newCameraPos.Y, maxZ + CAMERA_DISTANCE_FROM_MAXZ);
//000440:                 var cameraVelocity = newPos - camMain.Position;
//000441:                 camMain.Position = camMain.Position + (cameraVelocity * CAMERA_SPEED_LIMIT);
//000442:             }
//000443:         }
//000444:         #endregion
//000445: 
//000446:         #region Boid Rules
//000447:         /// <summary>Run the three primary rules of boidom.</summary>
//000448:         /// <param name="boid">The boid to process.</param>
//000449:         /// <returns>The velocity vector resulting from the three primary rules and their associated weights.</returns>
//000450:         private Vector3D PrimaryRules_1_2_3(Boid boid)
//000451:         {
//000452:             int numNearby = 0;
//000453:             Vector3D summedPosition = new Vector3D();
//000454:             Vector3D summedVelocity = new Vector3D();
//000455:             Vector3D summedSeparation = new Vector3D();
//000456: 
//000457:             // For rule #1, we want the boid to fly towards the center of all of those in its neighborhood.
//000458:             // We find all of those boids, average their positions, and create a velocity vector to move the
//000459:             // boid a bit of the way there.
//000460: 
//000461:             // For rule #2, we want the boid to move away from each other boid it's a bit too close to.
//000462:             // Find all of those boids in its immediate vicinity, and push it away.
//000463: 
//000464:             // For rule #3, we want the boid to match velocities with those boids in its neighborhood.
//000465:             // Sum their velocities, find the average, and move this boid's velocity a bit in that direction.
//000466: 
//000467:             foreach (var other in m_boidModels)
//000468:             {
//000469:                 if (other != boid && 
//000470:                     (other.PreviousPosition - boid.PreviousPosition).Length <= NEIGHBORHOOD_SIZE &&
//000471:                     boid.ComputeAngle(other) <= 135)
//000472:                 {
//000473:                     summedPosition += other.PreviousPosition;
//000474:                     summedVelocity += other.PreviousVelocity;
//000475:                     numNearby++;
//000476: 
//000477:                     if ((other.PreviousPosition - boid.PreviousPosition).Length < MIN_DISTANCE_FROM_NEIGHBOR)
//000478:                     {
//000479:                         summedSeparation -= (other.PreviousPosition - boid.PreviousPosition);
//000480:                     }
//000481:                 }
//000482:             }
//000483: 
//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
//000485:             var rule2_separateFromNearby = summedSeparation;
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
//000487: 
//000488:             return
//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
//000499:             var v = new Vector3D();
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_015b:  br         IL_02ba

//000203:             else if (e.Key == Key.H)
    IL_0160:  ldarg.2
    IL_0161:  callvirt   instance valuetype [WindowsBase]System.Windows.Input.Key [PresentationCore]System.Windows.Input.KeyEventArgs::get_Key()
    IL_0166:  ldc.i4.s   51
    IL_0168:  ceq
    IL_016a:  ldc.i4.0
    IL_016b:  ceq
    IL_016d:  stloc.3
//000204:             {
//000205:                 string instructions =
//000206:                     "** Window Controls **" + Environment.NewLine +
//000207:                     "Auto-Camera Positioning: 'a'" + Environment.NewLine +
//000208:                     "Pan: Click Left And Drag" + Environment.NewLine +
//000209:                     "Zoom In / Out: Mousewheel (or) Up/Down Keys (or) Ctrl+Middle Mouse Move" + Environment.NewLine +
//000210:                     "Full Screen: Right Double-Click" + Environment.NewLine +
//000211:                     "Restore to Normal Window Size: Right Double-Click (or) Escape Key" + Environment.NewLine +
//000212:                     "Pause: 'b'" + Environment.NewLine +
//000213:                     "Translucency: 't'" + Environment.NewLine +
//000214:                     Environment.NewLine +
//000215:                     "** Boid Controls **" + Environment.NewLine +
//000216:                     "Scatter: Left Double-Click" + Environment.NewLine +
//000217:                     "Change Max Speed: Ctrl + Mousewheel" + Environment.NewLine +
//000218:                     "Randomize: 'r'" + Environment.NewLine +
//000219:                     Environment.NewLine +
//000220:                     "** Parallelism Controls **" + Environment.NewLine +
//000221:                     "Go Parallel: 'p'" + Environment.NewLine;
//000222:                 MessageBox.Show(this, instructions, "Instructions", MessageBoxButton.OK, MessageBoxImage.Information);
//000223:             }
//000224:         }
//000225: 
//000226:         /// <summary>Handle mousedown events.</summary>
//000227:         /// <param name="sender">The sender.</param>
//000228:         /// <param name="e">The eventargs.</param>
//000229:         private void Window_MouseDown(object sender, MouseButtonEventArgs e)
//000230:         {
//000231:             // Log the last mouse position
//000232:             _lastMousePosition = e.GetPosition(this);
//000233:         }
//000234: 
//000235:         /// <summary>Handle mousewheel events.</summary>
//000236:         /// <param name="sender">The sender.</param>
//000237:         /// <param name="e">The eventargs.</param>
//000238:         private void Window_MouseWheel(object sender, MouseWheelEventArgs e)
//000239:         {
//000240:             // If ctrl is pressed, change the max bird speed based on the number of mousewheel turns
//000241:             if ((Keyboard.Modifiers & ModifierKeys.Control) != 0)
//000242:             {
//000243:                 const int MIN_SPEED = 2, MAX_SPEED = 10;
//000244:                 if (e.Delta > 0 && m_speedLimit < MAX_SPEED) m_speedLimit++;
//000245:                 else if (e.Delta < 0 && m_speedLimit > MIN_SPEED) m_speedLimit--;
//000246:             }
//000247:                 // Otherwise, as long as we're not in auto-panning/zooming mode,
//000248:                 // zoom in or out based on the number of mousewheel turns
//000249:             else if (!m_autoPanCamera) Zoom(e.Delta / Mouse.MouseWheelDeltaForOneLine); 
//000250:         }
//000251: 
//000252:         /// <summary>Handle mousedoubleclick events.</summary>
//000253:         /// <param name="sender">The sender.</param>
//000254:         /// <param name="e">The eventargs.</param>
//000255:         private void Window_MouseDoubleClick(object sender, MouseButtonEventArgs e)
//000256:         {
//000257:             // If the right mouse button is double clicked, alternate between maximized and normal view
//000258:             if (e.ChangedButton == MouseButton.Right)
//000259:             {
//000260:                 if (WindowState == WindowState.Maximized)
//000261:                 {
//000262:                     Topmost = false;
//000263:                     WindowStyle = WindowStyle.ThreeDBorderWindow;
//000264:                     WindowState = WindowState.Normal;
//000265:                 }
//000266:                 else
//000267:                 {
//000268:                     Topmost = true;
//000269:                     WindowStyle = WindowStyle.None;
//000270:                     WindowState = WindowState.Maximized;
//000271:                 }
//000272:             }
//000273:                 // If the left mouse button is double clicked, scatter the boids
//000274:             else if (e.ChangedButton == MouseButton.Left)
//000275:             {
//000276:                 Scatter();
//000277:             }
//000278:         }
//000279: 
//000280:         /// <summary>Scatter the boids.</summary>
//000281:         private void Scatter()
//000282:         {
//000283:             // Start scatterring if a scatter isn't already in process
//000284:             if (m_scatterTimer == null)
//000285:             {
//000286:                 // Ka'boom.  Something scares the boids.
//000287:                 SystemSounds.Hand.Play();
//000288: 
//000289:                 // Store original settings
//000290:                 var origHome = m_home;
//000291:                 var origRule1Weight = m_rule1Weight;
//000292:                 var origRule2Weight = m_rule2Weight;
//000293:                 var origRule4Weight = m_rule4Weight;
//000294:                 var origRule5Weight = m_rule5Weight;
//000295: 
//000296:                 // Create new scatter settings
//000297:                 m_home = new Vector3D(0, 0, 0);
//000298:                 m_rule1Weight = origRule1Weight * -5;
//000299:                 m_rule2Weight = origRule2Weight * 2;
//000300:                 m_rule4Weight = 0;
//000301:                 m_rule5Weight = origRule5Weight * -5;
//000302: 
//000303:                 // Start a timer to restore the original settings
//000304:                 m_scatterTimer = new Timer(_ =>
//000305:                 {
//000306:                     // Restore the original settings
//000307:                     m_home = origHome;
//000308:                     m_rule1Weight = origRule1Weight;
//000309:                     m_rule2Weight = origRule2Weight;
//000310:                     m_rule4Weight = origRule4Weight;
//000311:                     m_rule5Weight = origRule5Weight;
//000312: 
//000313:                     // Clean up the timer
//000314:                     m_scatterTimer.Dispose();
//000315:                     m_scatterTimer = null;
//000316:                 }, null, SCATTER_TIME, -1);
//000317:             }
//000318:         }
//000319: 
//000320:         /// <summary>Handle mousemove events.</summary>
//000321:         /// <param name="sender">The sender.</param>
//000322:         /// <param name="e">The eventargs.</param>
//000323:         private void Window_MouseMove(object sender, MouseEventArgs e)
//000324:         {
//000325:             // If we're not auto-panning
//000326:             if (!m_autoPanCamera)
//000327:             {
//000328:                 // Get the new mouse position and compute the difference from the previous
//000329:                 var newPosition = e.GetPosition(this);
//000330:                 var diff = _lastMousePosition - newPosition;
//000331: 
//000332:                 // If the left mouse position was pressed, pan based on the x/y differences
//000333:                 if (e.LeftButton == MouseButtonState.Pressed)
//000334:                 {
//000335:                     camMain.Position = new Point3D(camMain.Position.X + diff.X * .4, camMain.Position.Y - diff.Y * .4, camMain.Position.Z);
//000336:                 }
//000337:                     // If the middle button was pressed, zoom based on the y difference
//000338:                 else if (e.MiddleButton == MouseButtonState.Pressed)
//000339:                 {
//000340:                     Zoom((int)diff.Y);
//000341:                 }
//000342: 
//000343:                 // Store the new position
//000344:                 _lastMousePosition = newPosition;
//000345:             }
//000346:         }
//000347: 
//000348:         /// <summary>Zoom in or out based on the specified degree of zoom.</summary>
//000349:         /// <param name="amountOfChange">Amount to zoom in (positive) or out (negative).</param>
//000350:         private void Zoom(int amountOfChange)
//000351:         {
//000352:             const int ZOOM_FACTOR = 3;
//000353:             camMain.Position = Point3D.Add(camMain.Position, camMain.LookDirection * amountOfChange * ZOOM_FACTOR);
//000354:         }
//000355:         #endregion
//000356: 
//000357:         #region Step and Render
//000358:         /// <summary>Runs the rendering loop.</summary>
//000359:         private void RenderUpdateLoop()
//000360:         {
//000361:             // Loop forever...
//000362:             while (true)
//000363:             {
//000364:                 // Wait to receive a signal that we should render another frame
//000365:                 m_renderSignal.WaitOne();
//000366: 
//000367:                 // Start timing.
//000368:                 m_frameStopwatch.Restart();
//000369: 
//000370:                 // Update the positions and velocities of all of the boids.
//000371:                 StepBoids();
//000372: 
//000373:                 // Update our rendering stats for display to the user
//000374:                 m_totalRenderingMillisecondsSinceLastUserPresentation += m_frameStopwatch.ElapsedMilliseconds;
//000375:                 m_numRendersSinceLastUserPresentation++;
//000376: 
//000377:                 // Render the boids to the UI
//000378:                 Dispatcher.Invoke((Action)RenderBoids, DispatcherPriority.Send, null);
//000379:             }
//000380:         }
//000381: 
//000382:         /// <summary>Step the boids one step, updating their velocities and positions.</summary>
//000383:         private void StepBoids()
//000384:         {
//000385:             // Store the current velocities and positions so that we can operate on an immutable copy
//000386:             foreach (var boid in m_boidModels) boid.StorePositionAndVelocityIntoPrevious();
//000387: 
//000388:             // For each boid, analyze how the various boid rules influence its velocity and position,
//000389:             // then store this new information.  After this step, we'll be able to render the boids.
//000390:             Parallel.ForEach(m_boidModels, m_parallelOptions, boid =>
//000391:             {
//000392:                 var v1_2_3 = PrimaryRules_1_2_3(boid); // weights factored in already in PrimaryRules
//000393:                 var v4 = m_rule4Weight * Rule4_EncourageStayingWithinAviary(boid);
//000394:                 var v5 = m_rule5Weight * Rule5_TendendcyTowardsHome(boid);
//000395: 
//000396:                 boid.Velocity = BoundVelocity(boid.PreviousVelocity + v1_2_3 + v4 + v5, m_speedLimit);
//000397:                 boid.Velocity.Normalize();
//000398: 
//000399:                 var tmpPosition = boid.PreviousPosition + boid.Velocity;
//000400:                 if (tmpPosition.Y >= 0) boid.Position = tmpPosition;
//000401:             });
//000402:         }
//000403: 
//000404:         /// <summary>Render the boids.</summary>
//000405:         private void RenderBoids()
//000406:         {
//000407:             // Make sure the boids are all positioned and pointing correctly
//000408:             foreach (var boid in m_boidModels) boid.TransformByPositionAndVelocity();
//000409: 
//000410:             // Every once in a while, update the user-displayed stats on timings
//000411:             var now = DateTimeOffset.Now;
//000412:             if (now >= m_nextUserPresentation)
//000413:             {
//000414:                 Title = string.Format("Procs: {0}, Time: {1:F2}", m_parallelOptions.MaxDegreeOfParallelism, 
//000415:                     m_numRendersSinceLastUserPresentation > 0 ? 
//000416:                     m_totalRenderingMillisecondsSinceLastUserPresentation / (double)m_numRendersSinceLastUserPresentation : 
//000417:                     0);
//000418:                 m_nextUserPresentation = now.AddSeconds(1);
//000419:                 m_numRendersSinceLastUserPresentation = 0;
//000420:                 m_totalRenderingMillisecondsSinceLastUserPresentation = 0;
//000421:             }
//000422: 
//000423:             // If we're in auto-panning mode, move the camera appropriately
//000424:             if (m_autoPanCamera)
//000425:             {
//000426:                 // Compute the maximum Z value of all of the boids and the center of their mass
//000427:                 double maxZ = double.MinValue;
//000428:                 Vector3D totalPos = new Vector3D();
//000429:                 foreach (var boid in m_boidModels)
//000430:                 {
//000431:                     if (boid.Position.Z > maxZ) maxZ = boid.Position.Z;
//000432:                     totalPos += boid.Position;
//000433:                 }
//000434:                 var newCameraPos = totalPos / m_boidModels.Length;
//000435:                 
//000436:                 // Move the camera to point at the center of the boids, a ways back from the max boid's Z
//000437:                 const int CAMERA_DISTANCE_FROM_MAXZ = 100;
//000438:                 const double CAMERA_SPEED_LIMIT = .01;
//000439:                 var newPos = new Point3D(newCameraPos.X, newCameraPos.Y, maxZ + CAMERA_DISTANCE_FROM_MAXZ);
//000440:                 var cameraVelocity = newPos - camMain.Position;
//000441:                 camMain.Position = camMain.Position + (cameraVelocity * CAMERA_SPEED_LIMIT);
//000442:             }
//000443:         }
//000444:         #endregion
//000445: 
//000446:         #region Boid Rules
//000447:         /// <summary>Run the three primary rules of boidom.</summary>
//000448:         /// <param name="boid">The boid to process.</param>
//000449:         /// <returns>The velocity vector resulting from the three primary rules and their associated weights.</returns>
//000450:         private Vector3D PrimaryRules_1_2_3(Boid boid)
//000451:         {
//000452:             int numNearby = 0;
//000453:             Vector3D summedPosition = new Vector3D();
//000454:             Vector3D summedVelocity = new Vector3D();
//000455:             Vector3D summedSeparation = new Vector3D();
//000456: 
//000457:             // For rule #1, we want the boid to fly towards the center of all of those in its neighborhood.
//000458:             // We find all of those boids, average their positions, and create a velocity vector to move the
//000459:             // boid a bit of the way there.
//000460: 
//000461:             // For rule #2, we want the boid to move away from each other boid it's a bit too close to.
//000462:             // Find all of those boids in its immediate vicinity, and push it away.
//000463: 
//000464:             // For rule #3, we want the boid to match velocities with those boids in its neighborhood.
//000465:             // Sum their velocities, find the average, and move this boid's velocity a bit in that direction.
//000466: 
//000467:             foreach (var other in m_boidModels)
//000468:             {
//000469:                 if (other != boid && 
//000470:                     (other.PreviousPosition - boid.PreviousPosition).Length <= NEIGHBORHOOD_SIZE &&
//000471:                     boid.ComputeAngle(other) <= 135)
//000472:                 {
//000473:                     summedPosition += other.PreviousPosition;
//000474:                     summedVelocity += other.PreviousVelocity;
//000475:                     numNearby++;
//000476: 
//000477:                     if ((other.PreviousPosition - boid.PreviousPosition).Length < MIN_DISTANCE_FROM_NEIGHBOR)
//000478:                     {
//000479:                         summedSeparation -= (other.PreviousPosition - boid.PreviousPosition);
//000480:                     }
//000481:                 }
//000482:             }
//000483: 
//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
//000485:             var rule2_separateFromNearby = summedSeparation;
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
//000487: 
//000488:             return
//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
//000499:             var v = new Vector3D();
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_016e:  ldloc.3
    IL_016f:  brtrue     IL_02ba

//000204:             {
    IL_0174:  nop
//000205:                 string instructions =
    IL_0175:  ldc.i4.s   30
    IL_0177:  newarr     [mscorlib]System.String
    IL_017c:  stloc.s    CS$0$0001
    IL_017e:  ldloc.s    CS$0$0001
    IL_0180:  ldc.i4.0
    IL_0181:  ldstr      "** Window Controls **"
    IL_0186:  stelem.ref
    IL_0187:  ldloc.s    CS$0$0001
    IL_0189:  ldc.i4.1
    IL_018a:  call       string [mscorlib]System.Environment::get_NewLine()
    IL_018f:  stelem.ref
    IL_0190:  ldloc.s    CS$0$0001
    IL_0192:  ldc.i4.2
    IL_0193:  ldstr      "Auto-Camera Positioning: 'a'"
    IL_0198:  stelem.ref
    IL_0199:  ldloc.s    CS$0$0001
    IL_019b:  ldc.i4.3
    IL_019c:  call       string [mscorlib]System.Environment::get_NewLine()
    IL_01a1:  stelem.ref
    IL_01a2:  ldloc.s    CS$0$0001
    IL_01a4:  ldc.i4.4
    IL_01a5:  ldstr      "Pan: Click Left And Drag"
    IL_01aa:  stelem.ref
    IL_01ab:  ldloc.s    CS$0$0001
    IL_01ad:  ldc.i4.5
    IL_01ae:  call       string [mscorlib]System.Environment::get_NewLine()
    IL_01b3:  stelem.ref
    IL_01b4:  ldloc.s    CS$0$0001
    IL_01b6:  ldc.i4.6
    IL_01b7:  ldstr      "Zoom In / Out: Mousewheel (or) Up/Down Keys (or) C"
    + "trl+Middle Mouse Move"
    IL_01bc:  stelem.ref
    IL_01bd:  ldloc.s    CS$0$0001
    IL_01bf:  ldc.i4.7
    IL_01c0:  call       string [mscorlib]System.Environment::get_NewLine()
    IL_01c5:  stelem.ref
    IL_01c6:  ldloc.s    CS$0$0001
    IL_01c8:  ldc.i4.8
    IL_01c9:  ldstr      "Full Screen: Right Double-Click"
    IL_01ce:  stelem.ref
    IL_01cf:  ldloc.s    CS$0$0001
    IL_01d1:  ldc.i4.s   9
    IL_01d3:  call       string [mscorlib]System.Environment::get_NewLine()
    IL_01d8:  stelem.ref
    IL_01d9:  ldloc.s    CS$0$0001
    IL_01db:  ldc.i4.s   10
    IL_01dd:  ldstr      "Restore to Normal Window Size: Right Double-Click "
    + "(or) Escape Key"
    IL_01e2:  stelem.ref
    IL_01e3:  ldloc.s    CS$0$0001
    IL_01e5:  ldc.i4.s   11
    IL_01e7:  call       string [mscorlib]System.Environment::get_NewLine()
    IL_01ec:  stelem.ref
    IL_01ed:  ldloc.s    CS$0$0001
    IL_01ef:  ldc.i4.s   12
    IL_01f1:  ldstr      "Pause: 'b'"
    IL_01f6:  stelem.ref
    IL_01f7:  ldloc.s    CS$0$0001
    IL_01f9:  ldc.i4.s   13
    IL_01fb:  call       string [mscorlib]System.Environment::get_NewLine()
    IL_0200:  stelem.ref
    IL_0201:  ldloc.s    CS$0$0001
    IL_0203:  ldc.i4.s   14
    IL_0205:  ldstr      "Translucency: 't'"
    IL_020a:  stelem.ref
    IL_020b:  ldloc.s    CS$0$0001
    IL_020d:  ldc.i4.s   15
    IL_020f:  call       string [mscorlib]System.Environment::get_NewLine()
    IL_0214:  stelem.ref
    IL_0215:  ldloc.s    CS$0$0001
    IL_0217:  ldc.i4.s   16
    IL_0219:  call       string [mscorlib]System.Environment::get_NewLine()
    IL_021e:  stelem.ref
    IL_021f:  ldloc.s    CS$0$0001
    IL_0221:  ldc.i4.s   17
    IL_0223:  ldstr      "** Boid Controls **"
    IL_0228:  stelem.ref
    IL_0229:  ldloc.s    CS$0$0001
    IL_022b:  ldc.i4.s   18
    IL_022d:  call       string [mscorlib]System.Environment::get_NewLine()
    IL_0232:  stelem.ref
    IL_0233:  ldloc.s    CS$0$0001
    IL_0235:  ldc.i4.s   19
    IL_0237:  ldstr      "Scatter: Left Double-Click"
    IL_023c:  stelem.ref
    IL_023d:  ldloc.s    CS$0$0001
    IL_023f:  ldc.i4.s   20
    IL_0241:  call       string [mscorlib]System.Environment::get_NewLine()
    IL_0246:  stelem.ref
    IL_0247:  ldloc.s    CS$0$0001
    IL_0249:  ldc.i4.s   21
    IL_024b:  ldstr      "Change Max Speed: Ctrl + Mousewheel"
    IL_0250:  stelem.ref
    IL_0251:  ldloc.s    CS$0$0001
    IL_0253:  ldc.i4.s   22
    IL_0255:  call       string [mscorlib]System.Environment::get_NewLine()
    IL_025a:  stelem.ref
    IL_025b:  ldloc.s    CS$0$0001
    IL_025d:  ldc.i4.s   23
    IL_025f:  ldstr      "Randomize: 'r'"
    IL_0264:  stelem.ref
    IL_0265:  ldloc.s    CS$0$0001
    IL_0267:  ldc.i4.s   24
    IL_0269:  call       string [mscorlib]System.Environment::get_NewLine()
    IL_026e:  stelem.ref
    IL_026f:  ldloc.s    CS$0$0001
    IL_0271:  ldc.i4.s   25
    IL_0273:  call       string [mscorlib]System.Environment::get_NewLine()
    IL_0278:  stelem.ref
    IL_0279:  ldloc.s    CS$0$0001
    IL_027b:  ldc.i4.s   26
    IL_027d:  ldstr      "** Parallelism Controls **"
    IL_0282:  stelem.ref
    IL_0283:  ldloc.s    CS$0$0001
    IL_0285:  ldc.i4.s   27
    IL_0287:  call       string [mscorlib]System.Environment::get_NewLine()
    IL_028c:  stelem.ref
    IL_028d:  ldloc.s    CS$0$0001
    IL_028f:  ldc.i4.s   28
    IL_0291:  ldstr      "Go Parallel: 'p'"
    IL_0296:  stelem.ref
    IL_0297:  ldloc.s    CS$0$0001
    IL_0299:  ldc.i4.s   29
    IL_029b:  call       string [mscorlib]System.Environment::get_NewLine()
    IL_02a0:  stelem.ref
    IL_02a1:  ldloc.s    CS$0$0001
    IL_02a3:  call       string [mscorlib]System.String::Concat(string[])
    IL_02a8:  stloc.2
//000206:                     "** Window Controls **" + Environment.NewLine +
//000207:                     "Auto-Camera Positioning: 'a'" + Environment.NewLine +
//000208:                     "Pan: Click Left And Drag" + Environment.NewLine +
//000209:                     "Zoom In / Out: Mousewheel (or) Up/Down Keys (or) Ctrl+Middle Mouse Move" + Environment.NewLine +
//000210:                     "Full Screen: Right Double-Click" + Environment.NewLine +
//000211:                     "Restore to Normal Window Size: Right Double-Click (or) Escape Key" + Environment.NewLine +
//000212:                     "Pause: 'b'" + Environment.NewLine +
//000213:                     "Translucency: 't'" + Environment.NewLine +
//000214:                     Environment.NewLine +
//000215:                     "** Boid Controls **" + Environment.NewLine +
//000216:                     "Scatter: Left Double-Click" + Environment.NewLine +
//000217:                     "Change Max Speed: Ctrl + Mousewheel" + Environment.NewLine +
//000218:                     "Randomize: 'r'" + Environment.NewLine +
//000219:                     Environment.NewLine +
//000220:                     "** Parallelism Controls **" + Environment.NewLine +
//000221:                     "Go Parallel: 'p'" + Environment.NewLine;
//000222:                 MessageBox.Show(this, instructions, "Instructions", MessageBoxButton.OK, MessageBoxImage.Information);
    IL_02a9:  ldarg.0
    IL_02aa:  ldloc.2
    IL_02ab:  ldstr      "Instructions"
    IL_02b0:  ldc.i4.0
    IL_02b1:  ldc.i4.s   64
    IL_02b3:  call       valuetype [PresentationFramework]System.Windows.MessageBoxResult [PresentationFramework]System.Windows.MessageBox::Show(class [PresentationFramework]System.Windows.Window,
                                                                                                                                                 string,
                                                                                                                                                 string,
                                                                                                                                                 valuetype [PresentationFramework]System.Windows.MessageBoxButton,
                                                                                                                                                 valuetype [PresentationFramework]System.Windows.MessageBoxImage)
    IL_02b8:  pop
//000223:             }
    IL_02b9:  nop
//000224:         }
    IL_02ba:  ret
  } // end of method MainWindow::Window_KeyDown

  .method private hidebysig instance void 
          Window_MouseDown(object sender,
                           class [PresentationCore]System.Windows.Input.MouseButtonEventArgs e) cil managed
  {
    // Code size       15 (0xf)
    .maxstack  8
//000225: 
//000226:         /// <summary>Handle mousedown events.</summary>
//000227:         /// <param name="sender">The sender.</param>
//000228:         /// <param name="e">The eventargs.</param>
//000229:         private void Window_MouseDown(object sender, MouseButtonEventArgs e)
//000230:         {
    IL_0000:  nop
//000231:             // Log the last mouse position
//000232:             _lastMousePosition = e.GetPosition(this);
    IL_0001:  ldarg.0
    IL_0002:  ldarg.2
    IL_0003:  ldarg.0
    IL_0004:  callvirt   instance valuetype [WindowsBase]System.Windows.Point [PresentationCore]System.Windows.Input.MouseEventArgs::GetPosition(class [PresentationCore]System.Windows.IInputElement)
    IL_0009:  stfld      valuetype [WindowsBase]System.Windows.Point ParallelBoids.MainWindow::_lastMousePosition
//000233:         }
    IL_000e:  ret
  } // end of method MainWindow::Window_MouseDown

  .method private hidebysig instance void 
          Window_MouseWheel(object sender,
                            class [PresentationCore]System.Windows.Input.MouseWheelEventArgs e) cil managed
  {
    // Code size       164 (0xa4)
    .maxstack  3
    .locals init ([0] bool CS$4$0000)
//000234: 
//000235:         /// <summary>Handle mousewheel events.</summary>
//000236:         /// <param name="sender">The sender.</param>
//000237:         /// <param name="e">The eventargs.</param>
//000238:         private void Window_MouseWheel(object sender, MouseWheelEventArgs e)
//000239:         {
    IL_0000:  nop
//000240:             // If ctrl is pressed, change the max bird speed based on the number of mousewheel turns
//000241:             if ((Keyboard.Modifiers & ModifierKeys.Control) != 0)
    IL_0001:  call       valuetype [WindowsBase]System.Windows.Input.ModifierKeys [PresentationCore]System.Windows.Input.Keyboard::get_Modifiers()
    IL_0006:  ldc.i4.2
    IL_0007:  and
    IL_0008:  ldc.i4.0
    IL_0009:  ceq
    IL_000b:  stloc.0
//000242:             {
//000243:                 const int MIN_SPEED = 2, MAX_SPEED = 10;
//000244:                 if (e.Delta > 0 && m_speedLimit < MAX_SPEED) m_speedLimit++;
//000245:                 else if (e.Delta < 0 && m_speedLimit > MIN_SPEED) m_speedLimit--;
//000246:             }
//000247:                 // Otherwise, as long as we're not in auto-panning/zooming mode,
//000248:                 // zoom in or out based on the number of mousewheel turns
//000249:             else if (!m_autoPanCamera) Zoom(e.Delta / Mouse.MouseWheelDeltaForOneLine); 
//000250:         }
//000251: 
//000252:         /// <summary>Handle mousedoubleclick events.</summary>
//000253:         /// <param name="sender">The sender.</param>
//000254:         /// <param name="e">The eventargs.</param>
//000255:         private void Window_MouseDoubleClick(object sender, MouseButtonEventArgs e)
//000256:         {
//000257:             // If the right mouse button is double clicked, alternate between maximized and normal view
//000258:             if (e.ChangedButton == MouseButton.Right)
//000259:             {
//000260:                 if (WindowState == WindowState.Maximized)
//000261:                 {
//000262:                     Topmost = false;
//000263:                     WindowStyle = WindowStyle.ThreeDBorderWindow;
//000264:                     WindowState = WindowState.Normal;
//000265:                 }
//000266:                 else
//000267:                 {
//000268:                     Topmost = true;
//000269:                     WindowStyle = WindowStyle.None;
//000270:                     WindowState = WindowState.Maximized;
//000271:                 }
//000272:             }
//000273:                 // If the left mouse button is double clicked, scatter the boids
//000274:             else if (e.ChangedButton == MouseButton.Left)
//000275:             {
//000276:                 Scatter();
//000277:             }
//000278:         }
//000279: 
//000280:         /// <summary>Scatter the boids.</summary>
//000281:         private void Scatter()
//000282:         {
//000283:             // Start scatterring if a scatter isn't already in process
//000284:             if (m_scatterTimer == null)
//000285:             {
//000286:                 // Ka'boom.  Something scares the boids.
//000287:                 SystemSounds.Hand.Play();
//000288: 
//000289:                 // Store original settings
//000290:                 var origHome = m_home;
//000291:                 var origRule1Weight = m_rule1Weight;
//000292:                 var origRule2Weight = m_rule2Weight;
//000293:                 var origRule4Weight = m_rule4Weight;
//000294:                 var origRule5Weight = m_rule5Weight;
//000295: 
//000296:                 // Create new scatter settings
//000297:                 m_home = new Vector3D(0, 0, 0);
//000298:                 m_rule1Weight = origRule1Weight * -5;
//000299:                 m_rule2Weight = origRule2Weight * 2;
//000300:                 m_rule4Weight = 0;
//000301:                 m_rule5Weight = origRule5Weight * -5;
//000302: 
//000303:                 // Start a timer to restore the original settings
//000304:                 m_scatterTimer = new Timer(_ =>
//000305:                 {
//000306:                     // Restore the original settings
//000307:                     m_home = origHome;
//000308:                     m_rule1Weight = origRule1Weight;
//000309:                     m_rule2Weight = origRule2Weight;
//000310:                     m_rule4Weight = origRule4Weight;
//000311:                     m_rule5Weight = origRule5Weight;
//000312: 
//000313:                     // Clean up the timer
//000314:                     m_scatterTimer.Dispose();
//000315:                     m_scatterTimer = null;
//000316:                 }, null, SCATTER_TIME, -1);
//000317:             }
//000318:         }
//000319: 
//000320:         /// <summary>Handle mousemove events.</summary>
//000321:         /// <param name="sender">The sender.</param>
//000322:         /// <param name="e">The eventargs.</param>
//000323:         private void Window_MouseMove(object sender, MouseEventArgs e)
//000324:         {
//000325:             // If we're not auto-panning
//000326:             if (!m_autoPanCamera)
//000327:             {
//000328:                 // Get the new mouse position and compute the difference from the previous
//000329:                 var newPosition = e.GetPosition(this);
//000330:                 var diff = _lastMousePosition - newPosition;
//000331: 
//000332:                 // If the left mouse position was pressed, pan based on the x/y differences
//000333:                 if (e.LeftButton == MouseButtonState.Pressed)
//000334:                 {
//000335:                     camMain.Position = new Point3D(camMain.Position.X + diff.X * .4, camMain.Position.Y - diff.Y * .4, camMain.Position.Z);
//000336:                 }
//000337:                     // If the middle button was pressed, zoom based on the y difference
//000338:                 else if (e.MiddleButton == MouseButtonState.Pressed)
//000339:                 {
//000340:                     Zoom((int)diff.Y);
//000341:                 }
//000342: 
//000343:                 // Store the new position
//000344:                 _lastMousePosition = newPosition;
//000345:             }
//000346:         }
//000347: 
//000348:         /// <summary>Zoom in or out based on the specified degree of zoom.</summary>
//000349:         /// <param name="amountOfChange">Amount to zoom in (positive) or out (negative).</param>
//000350:         private void Zoom(int amountOfChange)
//000351:         {
//000352:             const int ZOOM_FACTOR = 3;
//000353:             camMain.Position = Point3D.Add(camMain.Position, camMain.LookDirection * amountOfChange * ZOOM_FACTOR);
//000354:         }
//000355:         #endregion
//000356: 
//000357:         #region Step and Render
//000358:         /// <summary>Runs the rendering loop.</summary>
//000359:         private void RenderUpdateLoop()
//000360:         {
//000361:             // Loop forever...
//000362:             while (true)
//000363:             {
//000364:                 // Wait to receive a signal that we should render another frame
//000365:                 m_renderSignal.WaitOne();
//000366: 
//000367:                 // Start timing.
//000368:                 m_frameStopwatch.Restart();
//000369: 
//000370:                 // Update the positions and velocities of all of the boids.
//000371:                 StepBoids();
//000372: 
//000373:                 // Update our rendering stats for display to the user
//000374:                 m_totalRenderingMillisecondsSinceLastUserPresentation += m_frameStopwatch.ElapsedMilliseconds;
//000375:                 m_numRendersSinceLastUserPresentation++;
//000376: 
//000377:                 // Render the boids to the UI
//000378:                 Dispatcher.Invoke((Action)RenderBoids, DispatcherPriority.Send, null);
//000379:             }
//000380:         }
//000381: 
//000382:         /// <summary>Step the boids one step, updating their velocities and positions.</summary>
//000383:         private void StepBoids()
//000384:         {
//000385:             // Store the current velocities and positions so that we can operate on an immutable copy
//000386:             foreach (var boid in m_boidModels) boid.StorePositionAndVelocityIntoPrevious();
//000387: 
//000388:             // For each boid, analyze how the various boid rules influence its velocity and position,
//000389:             // then store this new information.  After this step, we'll be able to render the boids.
//000390:             Parallel.ForEach(m_boidModels, m_parallelOptions, boid =>
//000391:             {
//000392:                 var v1_2_3 = PrimaryRules_1_2_3(boid); // weights factored in already in PrimaryRules
//000393:                 var v4 = m_rule4Weight * Rule4_EncourageStayingWithinAviary(boid);
//000394:                 var v5 = m_rule5Weight * Rule5_TendendcyTowardsHome(boid);
//000395: 
//000396:                 boid.Velocity = BoundVelocity(boid.PreviousVelocity + v1_2_3 + v4 + v5, m_speedLimit);
//000397:                 boid.Velocity.Normalize();
//000398: 
//000399:                 var tmpPosition = boid.PreviousPosition + boid.Velocity;
//000400:                 if (tmpPosition.Y >= 0) boid.Position = tmpPosition;
//000401:             });
//000402:         }
//000403: 
//000404:         /// <summary>Render the boids.</summary>
//000405:         private void RenderBoids()
//000406:         {
//000407:             // Make sure the boids are all positioned and pointing correctly
//000408:             foreach (var boid in m_boidModels) boid.TransformByPositionAndVelocity();
//000409: 
//000410:             // Every once in a while, update the user-displayed stats on timings
//000411:             var now = DateTimeOffset.Now;
//000412:             if (now >= m_nextUserPresentation)
//000413:             {
//000414:                 Title = string.Format("Procs: {0}, Time: {1:F2}", m_parallelOptions.MaxDegreeOfParallelism, 
//000415:                     m_numRendersSinceLastUserPresentation > 0 ? 
//000416:                     m_totalRenderingMillisecondsSinceLastUserPresentation / (double)m_numRendersSinceLastUserPresentation : 
//000417:                     0);
//000418:                 m_nextUserPresentation = now.AddSeconds(1);
//000419:                 m_numRendersSinceLastUserPresentation = 0;
//000420:                 m_totalRenderingMillisecondsSinceLastUserPresentation = 0;
//000421:             }
//000422: 
//000423:             // If we're in auto-panning mode, move the camera appropriately
//000424:             if (m_autoPanCamera)
//000425:             {
//000426:                 // Compute the maximum Z value of all of the boids and the center of their mass
//000427:                 double maxZ = double.MinValue;
//000428:                 Vector3D totalPos = new Vector3D();
//000429:                 foreach (var boid in m_boidModels)
//000430:                 {
//000431:                     if (boid.Position.Z > maxZ) maxZ = boid.Position.Z;
//000432:                     totalPos += boid.Position;
//000433:                 }
//000434:                 var newCameraPos = totalPos / m_boidModels.Length;
//000435:                 
//000436:                 // Move the camera to point at the center of the boids, a ways back from the max boid's Z
//000437:                 const int CAMERA_DISTANCE_FROM_MAXZ = 100;
//000438:                 const double CAMERA_SPEED_LIMIT = .01;
//000439:                 var newPos = new Point3D(newCameraPos.X, newCameraPos.Y, maxZ + CAMERA_DISTANCE_FROM_MAXZ);
//000440:                 var cameraVelocity = newPos - camMain.Position;
//000441:                 camMain.Position = camMain.Position + (cameraVelocity * CAMERA_SPEED_LIMIT);
//000442:             }
//000443:         }
//000444:         #endregion
//000445: 
//000446:         #region Boid Rules
//000447:         /// <summary>Run the three primary rules of boidom.</summary>
//000448:         /// <param name="boid">The boid to process.</param>
//000449:         /// <returns>The velocity vector resulting from the three primary rules and their associated weights.</returns>
//000450:         private Vector3D PrimaryRules_1_2_3(Boid boid)
//000451:         {
//000452:             int numNearby = 0;
//000453:             Vector3D summedPosition = new Vector3D();
//000454:             Vector3D summedVelocity = new Vector3D();
//000455:             Vector3D summedSeparation = new Vector3D();
//000456: 
//000457:             // For rule #1, we want the boid to fly towards the center of all of those in its neighborhood.
//000458:             // We find all of those boids, average their positions, and create a velocity vector to move the
//000459:             // boid a bit of the way there.
//000460: 
//000461:             // For rule #2, we want the boid to move away from each other boid it's a bit too close to.
//000462:             // Find all of those boids in its immediate vicinity, and push it away.
//000463: 
//000464:             // For rule #3, we want the boid to match velocities with those boids in its neighborhood.
//000465:             // Sum their velocities, find the average, and move this boid's velocity a bit in that direction.
//000466: 
//000467:             foreach (var other in m_boidModels)
//000468:             {
//000469:                 if (other != boid && 
//000470:                     (other.PreviousPosition - boid.PreviousPosition).Length <= NEIGHBORHOOD_SIZE &&
//000471:                     boid.ComputeAngle(other) <= 135)
//000472:                 {
//000473:                     summedPosition += other.PreviousPosition;
//000474:                     summedVelocity += other.PreviousVelocity;
//000475:                     numNearby++;
//000476: 
//000477:                     if ((other.PreviousPosition - boid.PreviousPosition).Length < MIN_DISTANCE_FROM_NEIGHBOR)
//000478:                     {
//000479:                         summedSeparation -= (other.PreviousPosition - boid.PreviousPosition);
//000480:                     }
//000481:                 }
//000482:             }
//000483: 
//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
//000485:             var rule2_separateFromNearby = summedSeparation;
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
//000487: 
//000488:             return
//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
//000499:             var v = new Vector3D();
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_000c:  ldloc.0
    IL_000d:  brtrue.s   IL_0089

//000242:             {
    IL_000f:  nop
//000243:                 const int MIN_SPEED = 2, MAX_SPEED = 10;
//000244:                 if (e.Delta > 0 && m_speedLimit < MAX_SPEED) m_speedLimit++;
    IL_0010:  ldarg.2
    IL_0011:  callvirt   instance int32 [PresentationCore]System.Windows.Input.MouseWheelEventArgs::get_Delta()
    IL_0016:  ldc.i4.0
    IL_0017:  ble.s      IL_002f

    IL_0019:  ldarg.0
    IL_001a:  ldfld      float64 ParallelBoids.MainWindow::m_speedLimit
    IL_001f:  ldc.r8     10.
    IL_0028:  clt
    IL_002a:  ldc.i4.0
    IL_002b:  ceq
    IL_002d:  br.s       IL_0030

    IL_002f:  ldc.i4.1
    IL_0030:  stloc.0
//000245:                 else if (e.Delta < 0 && m_speedLimit > MIN_SPEED) m_speedLimit--;
//000246:             }
//000247:                 // Otherwise, as long as we're not in auto-panning/zooming mode,
//000248:                 // zoom in or out based on the number of mousewheel turns
//000249:             else if (!m_autoPanCamera) Zoom(e.Delta / Mouse.MouseWheelDeltaForOneLine); 
//000250:         }
//000251: 
//000252:         /// <summary>Handle mousedoubleclick events.</summary>
//000253:         /// <param name="sender">The sender.</param>
//000254:         /// <param name="e">The eventargs.</param>
//000255:         private void Window_MouseDoubleClick(object sender, MouseButtonEventArgs e)
//000256:         {
//000257:             // If the right mouse button is double clicked, alternate between maximized and normal view
//000258:             if (e.ChangedButton == MouseButton.Right)
//000259:             {
//000260:                 if (WindowState == WindowState.Maximized)
//000261:                 {
//000262:                     Topmost = false;
//000263:                     WindowStyle = WindowStyle.ThreeDBorderWindow;
//000264:                     WindowState = WindowState.Normal;
//000265:                 }
//000266:                 else
//000267:                 {
//000268:                     Topmost = true;
//000269:                     WindowStyle = WindowStyle.None;
//000270:                     WindowState = WindowState.Maximized;
//000271:                 }
//000272:             }
//000273:                 // If the left mouse button is double clicked, scatter the boids
//000274:             else if (e.ChangedButton == MouseButton.Left)
//000275:             {
//000276:                 Scatter();
//000277:             }
//000278:         }
//000279: 
//000280:         /// <summary>Scatter the boids.</summary>
//000281:         private void Scatter()
//000282:         {
//000283:             // Start scatterring if a scatter isn't already in process
//000284:             if (m_scatterTimer == null)
//000285:             {
//000286:                 // Ka'boom.  Something scares the boids.
//000287:                 SystemSounds.Hand.Play();
//000288: 
//000289:                 // Store original settings
//000290:                 var origHome = m_home;
//000291:                 var origRule1Weight = m_rule1Weight;
//000292:                 var origRule2Weight = m_rule2Weight;
//000293:                 var origRule4Weight = m_rule4Weight;
//000294:                 var origRule5Weight = m_rule5Weight;
//000295: 
//000296:                 // Create new scatter settings
//000297:                 m_home = new Vector3D(0, 0, 0);
//000298:                 m_rule1Weight = origRule1Weight * -5;
//000299:                 m_rule2Weight = origRule2Weight * 2;
//000300:                 m_rule4Weight = 0;
//000301:                 m_rule5Weight = origRule5Weight * -5;
//000302: 
//000303:                 // Start a timer to restore the original settings
//000304:                 m_scatterTimer = new Timer(_ =>
//000305:                 {
//000306:                     // Restore the original settings
//000307:                     m_home = origHome;
//000308:                     m_rule1Weight = origRule1Weight;
//000309:                     m_rule2Weight = origRule2Weight;
//000310:                     m_rule4Weight = origRule4Weight;
//000311:                     m_rule5Weight = origRule5Weight;
//000312: 
//000313:                     // Clean up the timer
//000314:                     m_scatterTimer.Dispose();
//000315:                     m_scatterTimer = null;
//000316:                 }, null, SCATTER_TIME, -1);
//000317:             }
//000318:         }
//000319: 
//000320:         /// <summary>Handle mousemove events.</summary>
//000321:         /// <param name="sender">The sender.</param>
//000322:         /// <param name="e">The eventargs.</param>
//000323:         private void Window_MouseMove(object sender, MouseEventArgs e)
//000324:         {
//000325:             // If we're not auto-panning
//000326:             if (!m_autoPanCamera)
//000327:             {
//000328:                 // Get the new mouse position and compute the difference from the previous
//000329:                 var newPosition = e.GetPosition(this);
//000330:                 var diff = _lastMousePosition - newPosition;
//000331: 
//000332:                 // If the left mouse position was pressed, pan based on the x/y differences
//000333:                 if (e.LeftButton == MouseButtonState.Pressed)
//000334:                 {
//000335:                     camMain.Position = new Point3D(camMain.Position.X + diff.X * .4, camMain.Position.Y - diff.Y * .4, camMain.Position.Z);
//000336:                 }
//000337:                     // If the middle button was pressed, zoom based on the y difference
//000338:                 else if (e.MiddleButton == MouseButtonState.Pressed)
//000339:                 {
//000340:                     Zoom((int)diff.Y);
//000341:                 }
//000342: 
//000343:                 // Store the new position
//000344:                 _lastMousePosition = newPosition;
//000345:             }
//000346:         }
//000347: 
//000348:         /// <summary>Zoom in or out based on the specified degree of zoom.</summary>
//000349:         /// <param name="amountOfChange">Amount to zoom in (positive) or out (negative).</param>
//000350:         private void Zoom(int amountOfChange)
//000351:         {
//000352:             const int ZOOM_FACTOR = 3;
//000353:             camMain.Position = Point3D.Add(camMain.Position, camMain.LookDirection * amountOfChange * ZOOM_FACTOR);
//000354:         }
//000355:         #endregion
//000356: 
//000357:         #region Step and Render
//000358:         /// <summary>Runs the rendering loop.</summary>
//000359:         private void RenderUpdateLoop()
//000360:         {
//000361:             // Loop forever...
//000362:             while (true)
//000363:             {
//000364:                 // Wait to receive a signal that we should render another frame
//000365:                 m_renderSignal.WaitOne();
//000366: 
//000367:                 // Start timing.
//000368:                 m_frameStopwatch.Restart();
//000369: 
//000370:                 // Update the positions and velocities of all of the boids.
//000371:                 StepBoids();
//000372: 
//000373:                 // Update our rendering stats for display to the user
//000374:                 m_totalRenderingMillisecondsSinceLastUserPresentation += m_frameStopwatch.ElapsedMilliseconds;
//000375:                 m_numRendersSinceLastUserPresentation++;
//000376: 
//000377:                 // Render the boids to the UI
//000378:                 Dispatcher.Invoke((Action)RenderBoids, DispatcherPriority.Send, null);
//000379:             }
//000380:         }
//000381: 
//000382:         /// <summary>Step the boids one step, updating their velocities and positions.</summary>
//000383:         private void StepBoids()
//000384:         {
//000385:             // Store the current velocities and positions so that we can operate on an immutable copy
//000386:             foreach (var boid in m_boidModels) boid.StorePositionAndVelocityIntoPrevious();
//000387: 
//000388:             // For each boid, analyze how the various boid rules influence its velocity and position,
//000389:             // then store this new information.  After this step, we'll be able to render the boids.
//000390:             Parallel.ForEach(m_boidModels, m_parallelOptions, boid =>
//000391:             {
//000392:                 var v1_2_3 = PrimaryRules_1_2_3(boid); // weights factored in already in PrimaryRules
//000393:                 var v4 = m_rule4Weight * Rule4_EncourageStayingWithinAviary(boid);
//000394:                 var v5 = m_rule5Weight * Rule5_TendendcyTowardsHome(boid);
//000395: 
//000396:                 boid.Velocity = BoundVelocity(boid.PreviousVelocity + v1_2_3 + v4 + v5, m_speedLimit);
//000397:                 boid.Velocity.Normalize();
//000398: 
//000399:                 var tmpPosition = boid.PreviousPosition + boid.Velocity;
//000400:                 if (tmpPosition.Y >= 0) boid.Position = tmpPosition;
//000401:             });
//000402:         }
//000403: 
//000404:         /// <summary>Render the boids.</summary>
//000405:         private void RenderBoids()
//000406:         {
//000407:             // Make sure the boids are all positioned and pointing correctly
//000408:             foreach (var boid in m_boidModels) boid.TransformByPositionAndVelocity();
//000409: 
//000410:             // Every once in a while, update the user-displayed stats on timings
//000411:             var now = DateTimeOffset.Now;
//000412:             if (now >= m_nextUserPresentation)
//000413:             {
//000414:                 Title = string.Format("Procs: {0}, Time: {1:F2}", m_parallelOptions.MaxDegreeOfParallelism, 
//000415:                     m_numRendersSinceLastUserPresentation > 0 ? 
//000416:                     m_totalRenderingMillisecondsSinceLastUserPresentation / (double)m_numRendersSinceLastUserPresentation : 
//000417:                     0);
//000418:                 m_nextUserPresentation = now.AddSeconds(1);
//000419:                 m_numRendersSinceLastUserPresentation = 0;
//000420:                 m_totalRenderingMillisecondsSinceLastUserPresentation = 0;
//000421:             }
//000422: 
//000423:             // If we're in auto-panning mode, move the camera appropriately
//000424:             if (m_autoPanCamera)
//000425:             {
//000426:                 // Compute the maximum Z value of all of the boids and the center of their mass
//000427:                 double maxZ = double.MinValue;
//000428:                 Vector3D totalPos = new Vector3D();
//000429:                 foreach (var boid in m_boidModels)
//000430:                 {
//000431:                     if (boid.Position.Z > maxZ) maxZ = boid.Position.Z;
//000432:                     totalPos += boid.Position;
//000433:                 }
//000434:                 var newCameraPos = totalPos / m_boidModels.Length;
//000435:                 
//000436:                 // Move the camera to point at the center of the boids, a ways back from the max boid's Z
//000437:                 const int CAMERA_DISTANCE_FROM_MAXZ = 100;
//000438:                 const double CAMERA_SPEED_LIMIT = .01;
//000439:                 var newPos = new Point3D(newCameraPos.X, newCameraPos.Y, maxZ + CAMERA_DISTANCE_FROM_MAXZ);
//000440:                 var cameraVelocity = newPos - camMain.Position;
//000441:                 camMain.Position = camMain.Position + (cameraVelocity * CAMERA_SPEED_LIMIT);
//000442:             }
//000443:         }
//000444:         #endregion
//000445: 
//000446:         #region Boid Rules
//000447:         /// <summary>Run the three primary rules of boidom.</summary>
//000448:         /// <param name="boid">The boid to process.</param>
//000449:         /// <returns>The velocity vector resulting from the three primary rules and their associated weights.</returns>
//000450:         private Vector3D PrimaryRules_1_2_3(Boid boid)
//000451:         {
//000452:             int numNearby = 0;
//000453:             Vector3D summedPosition = new Vector3D();
//000454:             Vector3D summedVelocity = new Vector3D();
//000455:             Vector3D summedSeparation = new Vector3D();
//000456: 
//000457:             // For rule #1, we want the boid to fly towards the center of all of those in its neighborhood.
//000458:             // We find all of those boids, average their positions, and create a velocity vector to move the
//000459:             // boid a bit of the way there.
//000460: 
//000461:             // For rule #2, we want the boid to move away from each other boid it's a bit too close to.
//000462:             // Find all of those boids in its immediate vicinity, and push it away.
//000463: 
//000464:             // For rule #3, we want the boid to match velocities with those boids in its neighborhood.
//000465:             // Sum their velocities, find the average, and move this boid's velocity a bit in that direction.
//000466: 
//000467:             foreach (var other in m_boidModels)
//000468:             {
//000469:                 if (other != boid && 
//000470:                     (other.PreviousPosition - boid.PreviousPosition).Length <= NEIGHBORHOOD_SIZE &&
//000471:                     boid.ComputeAngle(other) <= 135)
//000472:                 {
//000473:                     summedPosition += other.PreviousPosition;
//000474:                     summedVelocity += other.PreviousVelocity;
//000475:                     numNearby++;
//000476: 
//000477:                     if ((other.PreviousPosition - boid.PreviousPosition).Length < MIN_DISTANCE_FROM_NEIGHBOR)
//000478:                     {
//000479:                         summedSeparation -= (other.PreviousPosition - boid.PreviousPosition);
//000480:                     }
//000481:                 }
//000482:             }
//000483: 
//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
//000485:             var rule2_separateFromNearby = summedSeparation;
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
//000487: 
//000488:             return
//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
//000499:             var v = new Vector3D();
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_0031:  ldloc.0
    IL_0032:  brtrue.s   IL_004c

//000244:                 if (e.Delta > 0 && m_speedLimit < MAX_SPEED) m_speedLimit++;
    IL_0034:  ldarg.0
    IL_0035:  dup
    IL_0036:  ldfld      float64 ParallelBoids.MainWindow::m_speedLimit
    IL_003b:  ldc.r8     1.
    IL_0044:  add
    IL_0045:  stfld      float64 ParallelBoids.MainWindow::m_speedLimit
//000245:                 else if (e.Delta < 0 && m_speedLimit > MIN_SPEED) m_speedLimit--;
//000246:             }
//000247:                 // Otherwise, as long as we're not in auto-panning/zooming mode,
//000248:                 // zoom in or out based on the number of mousewheel turns
//000249:             else if (!m_autoPanCamera) Zoom(e.Delta / Mouse.MouseWheelDeltaForOneLine); 
//000250:         }
//000251: 
//000252:         /// <summary>Handle mousedoubleclick events.</summary>
//000253:         /// <param name="sender">The sender.</param>
//000254:         /// <param name="e">The eventargs.</param>
//000255:         private void Window_MouseDoubleClick(object sender, MouseButtonEventArgs e)
//000256:         {
//000257:             // If the right mouse button is double clicked, alternate between maximized and normal view
//000258:             if (e.ChangedButton == MouseButton.Right)
//000259:             {
//000260:                 if (WindowState == WindowState.Maximized)
//000261:                 {
//000262:                     Topmost = false;
//000263:                     WindowStyle = WindowStyle.ThreeDBorderWindow;
//000264:                     WindowState = WindowState.Normal;
//000265:                 }
//000266:                 else
//000267:                 {
//000268:                     Topmost = true;
//000269:                     WindowStyle = WindowStyle.None;
//000270:                     WindowState = WindowState.Maximized;
//000271:                 }
//000272:             }
//000273:                 // If the left mouse button is double clicked, scatter the boids
//000274:             else if (e.ChangedButton == MouseButton.Left)
//000275:             {
//000276:                 Scatter();
//000277:             }
//000278:         }
//000279: 
//000280:         /// <summary>Scatter the boids.</summary>
//000281:         private void Scatter()
//000282:         {
//000283:             // Start scatterring if a scatter isn't already in process
//000284:             if (m_scatterTimer == null)
//000285:             {
//000286:                 // Ka'boom.  Something scares the boids.
//000287:                 SystemSounds.Hand.Play();
//000288: 
//000289:                 // Store original settings
//000290:                 var origHome = m_home;
//000291:                 var origRule1Weight = m_rule1Weight;
//000292:                 var origRule2Weight = m_rule2Weight;
//000293:                 var origRule4Weight = m_rule4Weight;
//000294:                 var origRule5Weight = m_rule5Weight;
//000295: 
//000296:                 // Create new scatter settings
//000297:                 m_home = new Vector3D(0, 0, 0);
//000298:                 m_rule1Weight = origRule1Weight * -5;
//000299:                 m_rule2Weight = origRule2Weight * 2;
//000300:                 m_rule4Weight = 0;
//000301:                 m_rule5Weight = origRule5Weight * -5;
//000302: 
//000303:                 // Start a timer to restore the original settings
//000304:                 m_scatterTimer = new Timer(_ =>
//000305:                 {
//000306:                     // Restore the original settings
//000307:                     m_home = origHome;
//000308:                     m_rule1Weight = origRule1Weight;
//000309:                     m_rule2Weight = origRule2Weight;
//000310:                     m_rule4Weight = origRule4Weight;
//000311:                     m_rule5Weight = origRule5Weight;
//000312: 
//000313:                     // Clean up the timer
//000314:                     m_scatterTimer.Dispose();
//000315:                     m_scatterTimer = null;
//000316:                 }, null, SCATTER_TIME, -1);
//000317:             }
//000318:         }
//000319: 
//000320:         /// <summary>Handle mousemove events.</summary>
//000321:         /// <param name="sender">The sender.</param>
//000322:         /// <param name="e">The eventargs.</param>
//000323:         private void Window_MouseMove(object sender, MouseEventArgs e)
//000324:         {
//000325:             // If we're not auto-panning
//000326:             if (!m_autoPanCamera)
//000327:             {
//000328:                 // Get the new mouse position and compute the difference from the previous
//000329:                 var newPosition = e.GetPosition(this);
//000330:                 var diff = _lastMousePosition - newPosition;
//000331: 
//000332:                 // If the left mouse position was pressed, pan based on the x/y differences
//000333:                 if (e.LeftButton == MouseButtonState.Pressed)
//000334:                 {
//000335:                     camMain.Position = new Point3D(camMain.Position.X + diff.X * .4, camMain.Position.Y - diff.Y * .4, camMain.Position.Z);
//000336:                 }
//000337:                     // If the middle button was pressed, zoom based on the y difference
//000338:                 else if (e.MiddleButton == MouseButtonState.Pressed)
//000339:                 {
//000340:                     Zoom((int)diff.Y);
//000341:                 }
//000342: 
//000343:                 // Store the new position
//000344:                 _lastMousePosition = newPosition;
//000345:             }
//000346:         }
//000347: 
//000348:         /// <summary>Zoom in or out based on the specified degree of zoom.</summary>
//000349:         /// <param name="amountOfChange">Amount to zoom in (positive) or out (negative).</param>
//000350:         private void Zoom(int amountOfChange)
//000351:         {
//000352:             const int ZOOM_FACTOR = 3;
//000353:             camMain.Position = Point3D.Add(camMain.Position, camMain.LookDirection * amountOfChange * ZOOM_FACTOR);
//000354:         }
//000355:         #endregion
//000356: 
//000357:         #region Step and Render
//000358:         /// <summary>Runs the rendering loop.</summary>
//000359:         private void RenderUpdateLoop()
//000360:         {
//000361:             // Loop forever...
//000362:             while (true)
//000363:             {
//000364:                 // Wait to receive a signal that we should render another frame
//000365:                 m_renderSignal.WaitOne();
//000366: 
//000367:                 // Start timing.
//000368:                 m_frameStopwatch.Restart();
//000369: 
//000370:                 // Update the positions and velocities of all of the boids.
//000371:                 StepBoids();
//000372: 
//000373:                 // Update our rendering stats for display to the user
//000374:                 m_totalRenderingMillisecondsSinceLastUserPresentation += m_frameStopwatch.ElapsedMilliseconds;
//000375:                 m_numRendersSinceLastUserPresentation++;
//000376: 
//000377:                 // Render the boids to the UI
//000378:                 Dispatcher.Invoke((Action)RenderBoids, DispatcherPriority.Send, null);
//000379:             }
//000380:         }
//000381: 
//000382:         /// <summary>Step the boids one step, updating their velocities and positions.</summary>
//000383:         private void StepBoids()
//000384:         {
//000385:             // Store the current velocities and positions so that we can operate on an immutable copy
//000386:             foreach (var boid in m_boidModels) boid.StorePositionAndVelocityIntoPrevious();
//000387: 
//000388:             // For each boid, analyze how the various boid rules influence its velocity and position,
//000389:             // then store this new information.  After this step, we'll be able to render the boids.
//000390:             Parallel.ForEach(m_boidModels, m_parallelOptions, boid =>
//000391:             {
//000392:                 var v1_2_3 = PrimaryRules_1_2_3(boid); // weights factored in already in PrimaryRules
//000393:                 var v4 = m_rule4Weight * Rule4_EncourageStayingWithinAviary(boid);
//000394:                 var v5 = m_rule5Weight * Rule5_TendendcyTowardsHome(boid);
//000395: 
//000396:                 boid.Velocity = BoundVelocity(boid.PreviousVelocity + v1_2_3 + v4 + v5, m_speedLimit);
//000397:                 boid.Velocity.Normalize();
//000398: 
//000399:                 var tmpPosition = boid.PreviousPosition + boid.Velocity;
//000400:                 if (tmpPosition.Y >= 0) boid.Position = tmpPosition;
//000401:             });
//000402:         }
//000403: 
//000404:         /// <summary>Render the boids.</summary>
//000405:         private void RenderBoids()
//000406:         {
//000407:             // Make sure the boids are all positioned and pointing correctly
//000408:             foreach (var boid in m_boidModels) boid.TransformByPositionAndVelocity();
//000409: 
//000410:             // Every once in a while, update the user-displayed stats on timings
//000411:             var now = DateTimeOffset.Now;
//000412:             if (now >= m_nextUserPresentation)
//000413:             {
//000414:                 Title = string.Format("Procs: {0}, Time: {1:F2}", m_parallelOptions.MaxDegreeOfParallelism, 
//000415:                     m_numRendersSinceLastUserPresentation > 0 ? 
//000416:                     m_totalRenderingMillisecondsSinceLastUserPresentation / (double)m_numRendersSinceLastUserPresentation : 
//000417:                     0);
//000418:                 m_nextUserPresentation = now.AddSeconds(1);
//000419:                 m_numRendersSinceLastUserPresentation = 0;
//000420:                 m_totalRenderingMillisecondsSinceLastUserPresentation = 0;
//000421:             }
//000422: 
//000423:             // If we're in auto-panning mode, move the camera appropriately
//000424:             if (m_autoPanCamera)
//000425:             {
//000426:                 // Compute the maximum Z value of all of the boids and the center of their mass
//000427:                 double maxZ = double.MinValue;
//000428:                 Vector3D totalPos = new Vector3D();
//000429:                 foreach (var boid in m_boidModels)
//000430:                 {
//000431:                     if (boid.Position.Z > maxZ) maxZ = boid.Position.Z;
//000432:                     totalPos += boid.Position;
//000433:                 }
//000434:                 var newCameraPos = totalPos / m_boidModels.Length;
//000435:                 
//000436:                 // Move the camera to point at the center of the boids, a ways back from the max boid's Z
//000437:                 const int CAMERA_DISTANCE_FROM_MAXZ = 100;
//000438:                 const double CAMERA_SPEED_LIMIT = .01;
//000439:                 var newPos = new Point3D(newCameraPos.X, newCameraPos.Y, maxZ + CAMERA_DISTANCE_FROM_MAXZ);
//000440:                 var cameraVelocity = newPos - camMain.Position;
//000441:                 camMain.Position = camMain.Position + (cameraVelocity * CAMERA_SPEED_LIMIT);
//000442:             }
//000443:         }
//000444:         #endregion
//000445: 
//000446:         #region Boid Rules
//000447:         /// <summary>Run the three primary rules of boidom.</summary>
//000448:         /// <param name="boid">The boid to process.</param>
//000449:         /// <returns>The velocity vector resulting from the three primary rules and their associated weights.</returns>
//000450:         private Vector3D PrimaryRules_1_2_3(Boid boid)
//000451:         {
//000452:             int numNearby = 0;
//000453:             Vector3D summedPosition = new Vector3D();
//000454:             Vector3D summedVelocity = new Vector3D();
//000455:             Vector3D summedSeparation = new Vector3D();
//000456: 
//000457:             // For rule #1, we want the boid to fly towards the center of all of those in its neighborhood.
//000458:             // We find all of those boids, average their positions, and create a velocity vector to move the
//000459:             // boid a bit of the way there.
//000460: 
//000461:             // For rule #2, we want the boid to move away from each other boid it's a bit too close to.
//000462:             // Find all of those boids in its immediate vicinity, and push it away.
//000463: 
//000464:             // For rule #3, we want the boid to match velocities with those boids in its neighborhood.
//000465:             // Sum their velocities, find the average, and move this boid's velocity a bit in that direction.
//000466: 
//000467:             foreach (var other in m_boidModels)
//000468:             {
//000469:                 if (other != boid && 
//000470:                     (other.PreviousPosition - boid.PreviousPosition).Length <= NEIGHBORHOOD_SIZE &&
//000471:                     boid.ComputeAngle(other) <= 135)
//000472:                 {
//000473:                     summedPosition += other.PreviousPosition;
//000474:                     summedVelocity += other.PreviousVelocity;
//000475:                     numNearby++;
//000476: 
//000477:                     if ((other.PreviousPosition - boid.PreviousPosition).Length < MIN_DISTANCE_FROM_NEIGHBOR)
//000478:                     {
//000479:                         summedSeparation -= (other.PreviousPosition - boid.PreviousPosition);
//000480:                     }
//000481:                 }
//000482:             }
//000483: 
//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
//000485:             var rule2_separateFromNearby = summedSeparation;
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
//000487: 
//000488:             return
//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
//000499:             var v = new Vector3D();
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_004a:  br.s       IL_0086

//000245:                 else if (e.Delta < 0 && m_speedLimit > MIN_SPEED) m_speedLimit--;
    IL_004c:  ldarg.2
    IL_004d:  callvirt   instance int32 [PresentationCore]System.Windows.Input.MouseWheelEventArgs::get_Delta()
    IL_0052:  ldc.i4.0
    IL_0053:  bge.s      IL_006b

    IL_0055:  ldarg.0
    IL_0056:  ldfld      float64 ParallelBoids.MainWindow::m_speedLimit
    IL_005b:  ldc.r8     2.
    IL_0064:  cgt
    IL_0066:  ldc.i4.0
    IL_0067:  ceq
    IL_0069:  br.s       IL_006c

    IL_006b:  ldc.i4.1
    IL_006c:  stloc.0
//000246:             }
//000247:                 // Otherwise, as long as we're not in auto-panning/zooming mode,
//000248:                 // zoom in or out based on the number of mousewheel turns
//000249:             else if (!m_autoPanCamera) Zoom(e.Delta / Mouse.MouseWheelDeltaForOneLine); 
//000250:         }
//000251: 
//000252:         /// <summary>Handle mousedoubleclick events.</summary>
//000253:         /// <param name="sender">The sender.</param>
//000254:         /// <param name="e">The eventargs.</param>
//000255:         private void Window_MouseDoubleClick(object sender, MouseButtonEventArgs e)
//000256:         {
//000257:             // If the right mouse button is double clicked, alternate between maximized and normal view
//000258:             if (e.ChangedButton == MouseButton.Right)
//000259:             {
//000260:                 if (WindowState == WindowState.Maximized)
//000261:                 {
//000262:                     Topmost = false;
//000263:                     WindowStyle = WindowStyle.ThreeDBorderWindow;
//000264:                     WindowState = WindowState.Normal;
//000265:                 }
//000266:                 else
//000267:                 {
//000268:                     Topmost = true;
//000269:                     WindowStyle = WindowStyle.None;
//000270:                     WindowState = WindowState.Maximized;
//000271:                 }
//000272:             }
//000273:                 // If the left mouse button is double clicked, scatter the boids
//000274:             else if (e.ChangedButton == MouseButton.Left)
//000275:             {
//000276:                 Scatter();
//000277:             }
//000278:         }
//000279: 
//000280:         /// <summary>Scatter the boids.</summary>
//000281:         private void Scatter()
//000282:         {
//000283:             // Start scatterring if a scatter isn't already in process
//000284:             if (m_scatterTimer == null)
//000285:             {
//000286:                 // Ka'boom.  Something scares the boids.
//000287:                 SystemSounds.Hand.Play();
//000288: 
//000289:                 // Store original settings
//000290:                 var origHome = m_home;
//000291:                 var origRule1Weight = m_rule1Weight;
//000292:                 var origRule2Weight = m_rule2Weight;
//000293:                 var origRule4Weight = m_rule4Weight;
//000294:                 var origRule5Weight = m_rule5Weight;
//000295: 
//000296:                 // Create new scatter settings
//000297:                 m_home = new Vector3D(0, 0, 0);
//000298:                 m_rule1Weight = origRule1Weight * -5;
//000299:                 m_rule2Weight = origRule2Weight * 2;
//000300:                 m_rule4Weight = 0;
//000301:                 m_rule5Weight = origRule5Weight * -5;
//000302: 
//000303:                 // Start a timer to restore the original settings
//000304:                 m_scatterTimer = new Timer(_ =>
//000305:                 {
//000306:                     // Restore the original settings
//000307:                     m_home = origHome;
//000308:                     m_rule1Weight = origRule1Weight;
//000309:                     m_rule2Weight = origRule2Weight;
//000310:                     m_rule4Weight = origRule4Weight;
//000311:                     m_rule5Weight = origRule5Weight;
//000312: 
//000313:                     // Clean up the timer
//000314:                     m_scatterTimer.Dispose();
//000315:                     m_scatterTimer = null;
//000316:                 }, null, SCATTER_TIME, -1);
//000317:             }
//000318:         }
//000319: 
//000320:         /// <summary>Handle mousemove events.</summary>
//000321:         /// <param name="sender">The sender.</param>
//000322:         /// <param name="e">The eventargs.</param>
//000323:         private void Window_MouseMove(object sender, MouseEventArgs e)
//000324:         {
//000325:             // If we're not auto-panning
//000326:             if (!m_autoPanCamera)
//000327:             {
//000328:                 // Get the new mouse position and compute the difference from the previous
//000329:                 var newPosition = e.GetPosition(this);
//000330:                 var diff = _lastMousePosition - newPosition;
//000331: 
//000332:                 // If the left mouse position was pressed, pan based on the x/y differences
//000333:                 if (e.LeftButton == MouseButtonState.Pressed)
//000334:                 {
//000335:                     camMain.Position = new Point3D(camMain.Position.X + diff.X * .4, camMain.Position.Y - diff.Y * .4, camMain.Position.Z);
//000336:                 }
//000337:                     // If the middle button was pressed, zoom based on the y difference
//000338:                 else if (e.MiddleButton == MouseButtonState.Pressed)
//000339:                 {
//000340:                     Zoom((int)diff.Y);
//000341:                 }
//000342: 
//000343:                 // Store the new position
//000344:                 _lastMousePosition = newPosition;
//000345:             }
//000346:         }
//000347: 
//000348:         /// <summary>Zoom in or out based on the specified degree of zoom.</summary>
//000349:         /// <param name="amountOfChange">Amount to zoom in (positive) or out (negative).</param>
//000350:         private void Zoom(int amountOfChange)
//000351:         {
//000352:             const int ZOOM_FACTOR = 3;
//000353:             camMain.Position = Point3D.Add(camMain.Position, camMain.LookDirection * amountOfChange * ZOOM_FACTOR);
//000354:         }
//000355:         #endregion
//000356: 
//000357:         #region Step and Render
//000358:         /// <summary>Runs the rendering loop.</summary>
//000359:         private void RenderUpdateLoop()
//000360:         {
//000361:             // Loop forever...
//000362:             while (true)
//000363:             {
//000364:                 // Wait to receive a signal that we should render another frame
//000365:                 m_renderSignal.WaitOne();
//000366: 
//000367:                 // Start timing.
//000368:                 m_frameStopwatch.Restart();
//000369: 
//000370:                 // Update the positions and velocities of all of the boids.
//000371:                 StepBoids();
//000372: 
//000373:                 // Update our rendering stats for display to the user
//000374:                 m_totalRenderingMillisecondsSinceLastUserPresentation += m_frameStopwatch.ElapsedMilliseconds;
//000375:                 m_numRendersSinceLastUserPresentation++;
//000376: 
//000377:                 // Render the boids to the UI
//000378:                 Dispatcher.Invoke((Action)RenderBoids, DispatcherPriority.Send, null);
//000379:             }
//000380:         }
//000381: 
//000382:         /// <summary>Step the boids one step, updating their velocities and positions.</summary>
//000383:         private void StepBoids()
//000384:         {
//000385:             // Store the current velocities and positions so that we can operate on an immutable copy
//000386:             foreach (var boid in m_boidModels) boid.StorePositionAndVelocityIntoPrevious();
//000387: 
//000388:             // For each boid, analyze how the various boid rules influence its velocity and position,
//000389:             // then store this new information.  After this step, we'll be able to render the boids.
//000390:             Parallel.ForEach(m_boidModels, m_parallelOptions, boid =>
//000391:             {
//000392:                 var v1_2_3 = PrimaryRules_1_2_3(boid); // weights factored in already in PrimaryRules
//000393:                 var v4 = m_rule4Weight * Rule4_EncourageStayingWithinAviary(boid);
//000394:                 var v5 = m_rule5Weight * Rule5_TendendcyTowardsHome(boid);
//000395: 
//000396:                 boid.Velocity = BoundVelocity(boid.PreviousVelocity + v1_2_3 + v4 + v5, m_speedLimit);
//000397:                 boid.Velocity.Normalize();
//000398: 
//000399:                 var tmpPosition = boid.PreviousPosition + boid.Velocity;
//000400:                 if (tmpPosition.Y >= 0) boid.Position = tmpPosition;
//000401:             });
//000402:         }
//000403: 
//000404:         /// <summary>Render the boids.</summary>
//000405:         private void RenderBoids()
//000406:         {
//000407:             // Make sure the boids are all positioned and pointing correctly
//000408:             foreach (var boid in m_boidModels) boid.TransformByPositionAndVelocity();
//000409: 
//000410:             // Every once in a while, update the user-displayed stats on timings
//000411:             var now = DateTimeOffset.Now;
//000412:             if (now >= m_nextUserPresentation)
//000413:             {
//000414:                 Title = string.Format("Procs: {0}, Time: {1:F2}", m_parallelOptions.MaxDegreeOfParallelism, 
//000415:                     m_numRendersSinceLastUserPresentation > 0 ? 
//000416:                     m_totalRenderingMillisecondsSinceLastUserPresentation / (double)m_numRendersSinceLastUserPresentation : 
//000417:                     0);
//000418:                 m_nextUserPresentation = now.AddSeconds(1);
//000419:                 m_numRendersSinceLastUserPresentation = 0;
//000420:                 m_totalRenderingMillisecondsSinceLastUserPresentation = 0;
//000421:             }
//000422: 
//000423:             // If we're in auto-panning mode, move the camera appropriately
//000424:             if (m_autoPanCamera)
//000425:             {
//000426:                 // Compute the maximum Z value of all of the boids and the center of their mass
//000427:                 double maxZ = double.MinValue;
//000428:                 Vector3D totalPos = new Vector3D();
//000429:                 foreach (var boid in m_boidModels)
//000430:                 {
//000431:                     if (boid.Position.Z > maxZ) maxZ = boid.Position.Z;
//000432:                     totalPos += boid.Position;
//000433:                 }
//000434:                 var newCameraPos = totalPos / m_boidModels.Length;
//000435:                 
//000436:                 // Move the camera to point at the center of the boids, a ways back from the max boid's Z
//000437:                 const int CAMERA_DISTANCE_FROM_MAXZ = 100;
//000438:                 const double CAMERA_SPEED_LIMIT = .01;
//000439:                 var newPos = new Point3D(newCameraPos.X, newCameraPos.Y, maxZ + CAMERA_DISTANCE_FROM_MAXZ);
//000440:                 var cameraVelocity = newPos - camMain.Position;
//000441:                 camMain.Position = camMain.Position + (cameraVelocity * CAMERA_SPEED_LIMIT);
//000442:             }
//000443:         }
//000444:         #endregion
//000445: 
//000446:         #region Boid Rules
//000447:         /// <summary>Run the three primary rules of boidom.</summary>
//000448:         /// <param name="boid">The boid to process.</param>
//000449:         /// <returns>The velocity vector resulting from the three primary rules and their associated weights.</returns>
//000450:         private Vector3D PrimaryRules_1_2_3(Boid boid)
//000451:         {
//000452:             int numNearby = 0;
//000453:             Vector3D summedPosition = new Vector3D();
//000454:             Vector3D summedVelocity = new Vector3D();
//000455:             Vector3D summedSeparation = new Vector3D();
//000456: 
//000457:             // For rule #1, we want the boid to fly towards the center of all of those in its neighborhood.
//000458:             // We find all of those boids, average their positions, and create a velocity vector to move the
//000459:             // boid a bit of the way there.
//000460: 
//000461:             // For rule #2, we want the boid to move away from each other boid it's a bit too close to.
//000462:             // Find all of those boids in its immediate vicinity, and push it away.
//000463: 
//000464:             // For rule #3, we want the boid to match velocities with those boids in its neighborhood.
//000465:             // Sum their velocities, find the average, and move this boid's velocity a bit in that direction.
//000466: 
//000467:             foreach (var other in m_boidModels)
//000468:             {
//000469:                 if (other != boid && 
//000470:                     (other.PreviousPosition - boid.PreviousPosition).Length <= NEIGHBORHOOD_SIZE &&
//000471:                     boid.ComputeAngle(other) <= 135)
//000472:                 {
//000473:                     summedPosition += other.PreviousPosition;
//000474:                     summedVelocity += other.PreviousVelocity;
//000475:                     numNearby++;
//000476: 
//000477:                     if ((other.PreviousPosition - boid.PreviousPosition).Length < MIN_DISTANCE_FROM_NEIGHBOR)
//000478:                     {
//000479:                         summedSeparation -= (other.PreviousPosition - boid.PreviousPosition);
//000480:                     }
//000481:                 }
//000482:             }
//000483: 
//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
//000485:             var rule2_separateFromNearby = summedSeparation;
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
//000487: 
//000488:             return
//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
//000499:             var v = new Vector3D();
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_006d:  ldloc.0
    IL_006e:  brtrue.s   IL_0086

//000245:                 else if (e.Delta < 0 && m_speedLimit > MIN_SPEED) m_speedLimit--;
    IL_0070:  ldarg.0
    IL_0071:  dup
    IL_0072:  ldfld      float64 ParallelBoids.MainWindow::m_speedLimit
    IL_0077:  ldc.r8     1.
    IL_0080:  sub
    IL_0081:  stfld      float64 ParallelBoids.MainWindow::m_speedLimit
//000246:             }
    IL_0086:  nop
//000247:                 // Otherwise, as long as we're not in auto-panning/zooming mode,
//000248:                 // zoom in or out based on the number of mousewheel turns
//000249:             else if (!m_autoPanCamera) Zoom(e.Delta / Mouse.MouseWheelDeltaForOneLine); 
//000250:         }
//000251: 
//000252:         /// <summary>Handle mousedoubleclick events.</summary>
//000253:         /// <param name="sender">The sender.</param>
//000254:         /// <param name="e">The eventargs.</param>
//000255:         private void Window_MouseDoubleClick(object sender, MouseButtonEventArgs e)
//000256:         {
//000257:             // If the right mouse button is double clicked, alternate between maximized and normal view
//000258:             if (e.ChangedButton == MouseButton.Right)
//000259:             {
//000260:                 if (WindowState == WindowState.Maximized)
//000261:                 {
//000262:                     Topmost = false;
//000263:                     WindowStyle = WindowStyle.ThreeDBorderWindow;
//000264:                     WindowState = WindowState.Normal;
//000265:                 }
//000266:                 else
//000267:                 {
//000268:                     Topmost = true;
//000269:                     WindowStyle = WindowStyle.None;
//000270:                     WindowState = WindowState.Maximized;
//000271:                 }
//000272:             }
//000273:                 // If the left mouse button is double clicked, scatter the boids
//000274:             else if (e.ChangedButton == MouseButton.Left)
//000275:             {
//000276:                 Scatter();
//000277:             }
//000278:         }
//000279: 
//000280:         /// <summary>Scatter the boids.</summary>
//000281:         private void Scatter()
//000282:         {
//000283:             // Start scatterring if a scatter isn't already in process
//000284:             if (m_scatterTimer == null)
//000285:             {
//000286:                 // Ka'boom.  Something scares the boids.
//000287:                 SystemSounds.Hand.Play();
//000288: 
//000289:                 // Store original settings
//000290:                 var origHome = m_home;
//000291:                 var origRule1Weight = m_rule1Weight;
//000292:                 var origRule2Weight = m_rule2Weight;
//000293:                 var origRule4Weight = m_rule4Weight;
//000294:                 var origRule5Weight = m_rule5Weight;
//000295: 
//000296:                 // Create new scatter settings
//000297:                 m_home = new Vector3D(0, 0, 0);
//000298:                 m_rule1Weight = origRule1Weight * -5;
//000299:                 m_rule2Weight = origRule2Weight * 2;
//000300:                 m_rule4Weight = 0;
//000301:                 m_rule5Weight = origRule5Weight * -5;
//000302: 
//000303:                 // Start a timer to restore the original settings
//000304:                 m_scatterTimer = new Timer(_ =>
//000305:                 {
//000306:                     // Restore the original settings
//000307:                     m_home = origHome;
//000308:                     m_rule1Weight = origRule1Weight;
//000309:                     m_rule2Weight = origRule2Weight;
//000310:                     m_rule4Weight = origRule4Weight;
//000311:                     m_rule5Weight = origRule5Weight;
//000312: 
//000313:                     // Clean up the timer
//000314:                     m_scatterTimer.Dispose();
//000315:                     m_scatterTimer = null;
//000316:                 }, null, SCATTER_TIME, -1);
//000317:             }
//000318:         }
//000319: 
//000320:         /// <summary>Handle mousemove events.</summary>
//000321:         /// <param name="sender">The sender.</param>
//000322:         /// <param name="e">The eventargs.</param>
//000323:         private void Window_MouseMove(object sender, MouseEventArgs e)
//000324:         {
//000325:             // If we're not auto-panning
//000326:             if (!m_autoPanCamera)
//000327:             {
//000328:                 // Get the new mouse position and compute the difference from the previous
//000329:                 var newPosition = e.GetPosition(this);
//000330:                 var diff = _lastMousePosition - newPosition;
//000331: 
//000332:                 // If the left mouse position was pressed, pan based on the x/y differences
//000333:                 if (e.LeftButton == MouseButtonState.Pressed)
//000334:                 {
//000335:                     camMain.Position = new Point3D(camMain.Position.X + diff.X * .4, camMain.Position.Y - diff.Y * .4, camMain.Position.Z);
//000336:                 }
//000337:                     // If the middle button was pressed, zoom based on the y difference
//000338:                 else if (e.MiddleButton == MouseButtonState.Pressed)
//000339:                 {
//000340:                     Zoom((int)diff.Y);
//000341:                 }
//000342: 
//000343:                 // Store the new position
//000344:                 _lastMousePosition = newPosition;
//000345:             }
//000346:         }
//000347: 
//000348:         /// <summary>Zoom in or out based on the specified degree of zoom.</summary>
//000349:         /// <param name="amountOfChange">Amount to zoom in (positive) or out (negative).</param>
//000350:         private void Zoom(int amountOfChange)
//000351:         {
//000352:             const int ZOOM_FACTOR = 3;
//000353:             camMain.Position = Point3D.Add(camMain.Position, camMain.LookDirection * amountOfChange * ZOOM_FACTOR);
//000354:         }
//000355:         #endregion
//000356: 
//000357:         #region Step and Render
//000358:         /// <summary>Runs the rendering loop.</summary>
//000359:         private void RenderUpdateLoop()
//000360:         {
//000361:             // Loop forever...
//000362:             while (true)
//000363:             {
//000364:                 // Wait to receive a signal that we should render another frame
//000365:                 m_renderSignal.WaitOne();
//000366: 
//000367:                 // Start timing.
//000368:                 m_frameStopwatch.Restart();
//000369: 
//000370:                 // Update the positions and velocities of all of the boids.
//000371:                 StepBoids();
//000372: 
//000373:                 // Update our rendering stats for display to the user
//000374:                 m_totalRenderingMillisecondsSinceLastUserPresentation += m_frameStopwatch.ElapsedMilliseconds;
//000375:                 m_numRendersSinceLastUserPresentation++;
//000376: 
//000377:                 // Render the boids to the UI
//000378:                 Dispatcher.Invoke((Action)RenderBoids, DispatcherPriority.Send, null);
//000379:             }
//000380:         }
//000381: 
//000382:         /// <summary>Step the boids one step, updating their velocities and positions.</summary>
//000383:         private void StepBoids()
//000384:         {
//000385:             // Store the current velocities and positions so that we can operate on an immutable copy
//000386:             foreach (var boid in m_boidModels) boid.StorePositionAndVelocityIntoPrevious();
//000387: 
//000388:             // For each boid, analyze how the various boid rules influence its velocity and position,
//000389:             // then store this new information.  After this step, we'll be able to render the boids.
//000390:             Parallel.ForEach(m_boidModels, m_parallelOptions, boid =>
//000391:             {
//000392:                 var v1_2_3 = PrimaryRules_1_2_3(boid); // weights factored in already in PrimaryRules
//000393:                 var v4 = m_rule4Weight * Rule4_EncourageStayingWithinAviary(boid);
//000394:                 var v5 = m_rule5Weight * Rule5_TendendcyTowardsHome(boid);
//000395: 
//000396:                 boid.Velocity = BoundVelocity(boid.PreviousVelocity + v1_2_3 + v4 + v5, m_speedLimit);
//000397:                 boid.Velocity.Normalize();
//000398: 
//000399:                 var tmpPosition = boid.PreviousPosition + boid.Velocity;
//000400:                 if (tmpPosition.Y >= 0) boid.Position = tmpPosition;
//000401:             });
//000402:         }
//000403: 
//000404:         /// <summary>Render the boids.</summary>
//000405:         private void RenderBoids()
//000406:         {
//000407:             // Make sure the boids are all positioned and pointing correctly
//000408:             foreach (var boid in m_boidModels) boid.TransformByPositionAndVelocity();
//000409: 
//000410:             // Every once in a while, update the user-displayed stats on timings
//000411:             var now = DateTimeOffset.Now;
//000412:             if (now >= m_nextUserPresentation)
//000413:             {
//000414:                 Title = string.Format("Procs: {0}, Time: {1:F2}", m_parallelOptions.MaxDegreeOfParallelism, 
//000415:                     m_numRendersSinceLastUserPresentation > 0 ? 
//000416:                     m_totalRenderingMillisecondsSinceLastUserPresentation / (double)m_numRendersSinceLastUserPresentation : 
//000417:                     0);
//000418:                 m_nextUserPresentation = now.AddSeconds(1);
//000419:                 m_numRendersSinceLastUserPresentation = 0;
//000420:                 m_totalRenderingMillisecondsSinceLastUserPresentation = 0;
//000421:             }
//000422: 
//000423:             // If we're in auto-panning mode, move the camera appropriately
//000424:             if (m_autoPanCamera)
//000425:             {
//000426:                 // Compute the maximum Z value of all of the boids and the center of their mass
//000427:                 double maxZ = double.MinValue;
//000428:                 Vector3D totalPos = new Vector3D();
//000429:                 foreach (var boid in m_boidModels)
//000430:                 {
//000431:                     if (boid.Position.Z > maxZ) maxZ = boid.Position.Z;
//000432:                     totalPos += boid.Position;
//000433:                 }
//000434:                 var newCameraPos = totalPos / m_boidModels.Length;
//000435:                 
//000436:                 // Move the camera to point at the center of the boids, a ways back from the max boid's Z
//000437:                 const int CAMERA_DISTANCE_FROM_MAXZ = 100;
//000438:                 const double CAMERA_SPEED_LIMIT = .01;
//000439:                 var newPos = new Point3D(newCameraPos.X, newCameraPos.Y, maxZ + CAMERA_DISTANCE_FROM_MAXZ);
//000440:                 var cameraVelocity = newPos - camMain.Position;
//000441:                 camMain.Position = camMain.Position + (cameraVelocity * CAMERA_SPEED_LIMIT);
//000442:             }
//000443:         }
//000444:         #endregion
//000445: 
//000446:         #region Boid Rules
//000447:         /// <summary>Run the three primary rules of boidom.</summary>
//000448:         /// <param name="boid">The boid to process.</param>
//000449:         /// <returns>The velocity vector resulting from the three primary rules and their associated weights.</returns>
//000450:         private Vector3D PrimaryRules_1_2_3(Boid boid)
//000451:         {
//000452:             int numNearby = 0;
//000453:             Vector3D summedPosition = new Vector3D();
//000454:             Vector3D summedVelocity = new Vector3D();
//000455:             Vector3D summedSeparation = new Vector3D();
//000456: 
//000457:             // For rule #1, we want the boid to fly towards the center of all of those in its neighborhood.
//000458:             // We find all of those boids, average their positions, and create a velocity vector to move the
//000459:             // boid a bit of the way there.
//000460: 
//000461:             // For rule #2, we want the boid to move away from each other boid it's a bit too close to.
//000462:             // Find all of those boids in its immediate vicinity, and push it away.
//000463: 
//000464:             // For rule #3, we want the boid to match velocities with those boids in its neighborhood.
//000465:             // Sum their velocities, find the average, and move this boid's velocity a bit in that direction.
//000466: 
//000467:             foreach (var other in m_boidModels)
//000468:             {
//000469:                 if (other != boid && 
//000470:                     (other.PreviousPosition - boid.PreviousPosition).Length <= NEIGHBORHOOD_SIZE &&
//000471:                     boid.ComputeAngle(other) <= 135)
//000472:                 {
//000473:                     summedPosition += other.PreviousPosition;
//000474:                     summedVelocity += other.PreviousVelocity;
//000475:                     numNearby++;
//000476: 
//000477:                     if ((other.PreviousPosition - boid.PreviousPosition).Length < MIN_DISTANCE_FROM_NEIGHBOR)
//000478:                     {
//000479:                         summedSeparation -= (other.PreviousPosition - boid.PreviousPosition);
//000480:                     }
//000481:                 }
//000482:             }
//000483: 
//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
//000485:             var rule2_separateFromNearby = summedSeparation;
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
//000487: 
//000488:             return
//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
//000499:             var v = new Vector3D();
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_0087:  br.s       IL_00a3

//000249:             else if (!m_autoPanCamera) Zoom(e.Delta / Mouse.MouseWheelDeltaForOneLine); 
    IL_0089:  ldarg.0
    IL_008a:  ldfld      bool ParallelBoids.MainWindow::m_autoPanCamera
    IL_008f:  stloc.0
//000250:         }
//000251: 
//000252:         /// <summary>Handle mousedoubleclick events.</summary>
//000253:         /// <param name="sender">The sender.</param>
//000254:         /// <param name="e">The eventargs.</param>
//000255:         private void Window_MouseDoubleClick(object sender, MouseButtonEventArgs e)
//000256:         {
//000257:             // If the right mouse button is double clicked, alternate between maximized and normal view
//000258:             if (e.ChangedButton == MouseButton.Right)
//000259:             {
//000260:                 if (WindowState == WindowState.Maximized)
//000261:                 {
//000262:                     Topmost = false;
//000263:                     WindowStyle = WindowStyle.ThreeDBorderWindow;
//000264:                     WindowState = WindowState.Normal;
//000265:                 }
//000266:                 else
//000267:                 {
//000268:                     Topmost = true;
//000269:                     WindowStyle = WindowStyle.None;
//000270:                     WindowState = WindowState.Maximized;
//000271:                 }
//000272:             }
//000273:                 // If the left mouse button is double clicked, scatter the boids
//000274:             else if (e.ChangedButton == MouseButton.Left)
//000275:             {
//000276:                 Scatter();
//000277:             }
//000278:         }
//000279: 
//000280:         /// <summary>Scatter the boids.</summary>
//000281:         private void Scatter()
//000282:         {
//000283:             // Start scatterring if a scatter isn't already in process
//000284:             if (m_scatterTimer == null)
//000285:             {
//000286:                 // Ka'boom.  Something scares the boids.
//000287:                 SystemSounds.Hand.Play();
//000288: 
//000289:                 // Store original settings
//000290:                 var origHome = m_home;
//000291:                 var origRule1Weight = m_rule1Weight;
//000292:                 var origRule2Weight = m_rule2Weight;
//000293:                 var origRule4Weight = m_rule4Weight;
//000294:                 var origRule5Weight = m_rule5Weight;
//000295: 
//000296:                 // Create new scatter settings
//000297:                 m_home = new Vector3D(0, 0, 0);
//000298:                 m_rule1Weight = origRule1Weight * -5;
//000299:                 m_rule2Weight = origRule2Weight * 2;
//000300:                 m_rule4Weight = 0;
//000301:                 m_rule5Weight = origRule5Weight * -5;
//000302: 
//000303:                 // Start a timer to restore the original settings
//000304:                 m_scatterTimer = new Timer(_ =>
//000305:                 {
//000306:                     // Restore the original settings
//000307:                     m_home = origHome;
//000308:                     m_rule1Weight = origRule1Weight;
//000309:                     m_rule2Weight = origRule2Weight;
//000310:                     m_rule4Weight = origRule4Weight;
//000311:                     m_rule5Weight = origRule5Weight;
//000312: 
//000313:                     // Clean up the timer
//000314:                     m_scatterTimer.Dispose();
//000315:                     m_scatterTimer = null;
//000316:                 }, null, SCATTER_TIME, -1);
//000317:             }
//000318:         }
//000319: 
//000320:         /// <summary>Handle mousemove events.</summary>
//000321:         /// <param name="sender">The sender.</param>
//000322:         /// <param name="e">The eventargs.</param>
//000323:         private void Window_MouseMove(object sender, MouseEventArgs e)
//000324:         {
//000325:             // If we're not auto-panning
//000326:             if (!m_autoPanCamera)
//000327:             {
//000328:                 // Get the new mouse position and compute the difference from the previous
//000329:                 var newPosition = e.GetPosition(this);
//000330:                 var diff = _lastMousePosition - newPosition;
//000331: 
//000332:                 // If the left mouse position was pressed, pan based on the x/y differences
//000333:                 if (e.LeftButton == MouseButtonState.Pressed)
//000334:                 {
//000335:                     camMain.Position = new Point3D(camMain.Position.X + diff.X * .4, camMain.Position.Y - diff.Y * .4, camMain.Position.Z);
//000336:                 }
//000337:                     // If the middle button was pressed, zoom based on the y difference
//000338:                 else if (e.MiddleButton == MouseButtonState.Pressed)
//000339:                 {
//000340:                     Zoom((int)diff.Y);
//000341:                 }
//000342: 
//000343:                 // Store the new position
//000344:                 _lastMousePosition = newPosition;
//000345:             }
//000346:         }
//000347: 
//000348:         /// <summary>Zoom in or out based on the specified degree of zoom.</summary>
//000349:         /// <param name="amountOfChange">Amount to zoom in (positive) or out (negative).</param>
//000350:         private void Zoom(int amountOfChange)
//000351:         {
//000352:             const int ZOOM_FACTOR = 3;
//000353:             camMain.Position = Point3D.Add(camMain.Position, camMain.LookDirection * amountOfChange * ZOOM_FACTOR);
//000354:         }
//000355:         #endregion
//000356: 
//000357:         #region Step and Render
//000358:         /// <summary>Runs the rendering loop.</summary>
//000359:         private void RenderUpdateLoop()
//000360:         {
//000361:             // Loop forever...
//000362:             while (true)
//000363:             {
//000364:                 // Wait to receive a signal that we should render another frame
//000365:                 m_renderSignal.WaitOne();
//000366: 
//000367:                 // Start timing.
//000368:                 m_frameStopwatch.Restart();
//000369: 
//000370:                 // Update the positions and velocities of all of the boids.
//000371:                 StepBoids();
//000372: 
//000373:                 // Update our rendering stats for display to the user
//000374:                 m_totalRenderingMillisecondsSinceLastUserPresentation += m_frameStopwatch.ElapsedMilliseconds;
//000375:                 m_numRendersSinceLastUserPresentation++;
//000376: 
//000377:                 // Render the boids to the UI
//000378:                 Dispatcher.Invoke((Action)RenderBoids, DispatcherPriority.Send, null);
//000379:             }
//000380:         }
//000381: 
//000382:         /// <summary>Step the boids one step, updating their velocities and positions.</summary>
//000383:         private void StepBoids()
//000384:         {
//000385:             // Store the current velocities and positions so that we can operate on an immutable copy
//000386:             foreach (var boid in m_boidModels) boid.StorePositionAndVelocityIntoPrevious();
//000387: 
//000388:             // For each boid, analyze how the various boid rules influence its velocity and position,
//000389:             // then store this new information.  After this step, we'll be able to render the boids.
//000390:             Parallel.ForEach(m_boidModels, m_parallelOptions, boid =>
//000391:             {
//000392:                 var v1_2_3 = PrimaryRules_1_2_3(boid); // weights factored in already in PrimaryRules
//000393:                 var v4 = m_rule4Weight * Rule4_EncourageStayingWithinAviary(boid);
//000394:                 var v5 = m_rule5Weight * Rule5_TendendcyTowardsHome(boid);
//000395: 
//000396:                 boid.Velocity = BoundVelocity(boid.PreviousVelocity + v1_2_3 + v4 + v5, m_speedLimit);
//000397:                 boid.Velocity.Normalize();
//000398: 
//000399:                 var tmpPosition = boid.PreviousPosition + boid.Velocity;
//000400:                 if (tmpPosition.Y >= 0) boid.Position = tmpPosition;
//000401:             });
//000402:         }
//000403: 
//000404:         /// <summary>Render the boids.</summary>
//000405:         private void RenderBoids()
//000406:         {
//000407:             // Make sure the boids are all positioned and pointing correctly
//000408:             foreach (var boid in m_boidModels) boid.TransformByPositionAndVelocity();
//000409: 
//000410:             // Every once in a while, update the user-displayed stats on timings
//000411:             var now = DateTimeOffset.Now;
//000412:             if (now >= m_nextUserPresentation)
//000413:             {
//000414:                 Title = string.Format("Procs: {0}, Time: {1:F2}", m_parallelOptions.MaxDegreeOfParallelism, 
//000415:                     m_numRendersSinceLastUserPresentation > 0 ? 
//000416:                     m_totalRenderingMillisecondsSinceLastUserPresentation / (double)m_numRendersSinceLastUserPresentation : 
//000417:                     0);
//000418:                 m_nextUserPresentation = now.AddSeconds(1);
//000419:                 m_numRendersSinceLastUserPresentation = 0;
//000420:                 m_totalRenderingMillisecondsSinceLastUserPresentation = 0;
//000421:             }
//000422: 
//000423:             // If we're in auto-panning mode, move the camera appropriately
//000424:             if (m_autoPanCamera)
//000425:             {
//000426:                 // Compute the maximum Z value of all of the boids and the center of their mass
//000427:                 double maxZ = double.MinValue;
//000428:                 Vector3D totalPos = new Vector3D();
//000429:                 foreach (var boid in m_boidModels)
//000430:                 {
//000431:                     if (boid.Position.Z > maxZ) maxZ = boid.Position.Z;
//000432:                     totalPos += boid.Position;
//000433:                 }
//000434:                 var newCameraPos = totalPos / m_boidModels.Length;
//000435:                 
//000436:                 // Move the camera to point at the center of the boids, a ways back from the max boid's Z
//000437:                 const int CAMERA_DISTANCE_FROM_MAXZ = 100;
//000438:                 const double CAMERA_SPEED_LIMIT = .01;
//000439:                 var newPos = new Point3D(newCameraPos.X, newCameraPos.Y, maxZ + CAMERA_DISTANCE_FROM_MAXZ);
//000440:                 var cameraVelocity = newPos - camMain.Position;
//000441:                 camMain.Position = camMain.Position + (cameraVelocity * CAMERA_SPEED_LIMIT);
//000442:             }
//000443:         }
//000444:         #endregion
//000445: 
//000446:         #region Boid Rules
//000447:         /// <summary>Run the three primary rules of boidom.</summary>
//000448:         /// <param name="boid">The boid to process.</param>
//000449:         /// <returns>The velocity vector resulting from the three primary rules and their associated weights.</returns>
//000450:         private Vector3D PrimaryRules_1_2_3(Boid boid)
//000451:         {
//000452:             int numNearby = 0;
//000453:             Vector3D summedPosition = new Vector3D();
//000454:             Vector3D summedVelocity = new Vector3D();
//000455:             Vector3D summedSeparation = new Vector3D();
//000456: 
//000457:             // For rule #1, we want the boid to fly towards the center of all of those in its neighborhood.
//000458:             // We find all of those boids, average their positions, and create a velocity vector to move the
//000459:             // boid a bit of the way there.
//000460: 
//000461:             // For rule #2, we want the boid to move away from each other boid it's a bit too close to.
//000462:             // Find all of those boids in its immediate vicinity, and push it away.
//000463: 
//000464:             // For rule #3, we want the boid to match velocities with those boids in its neighborhood.
//000465:             // Sum their velocities, find the average, and move this boid's velocity a bit in that direction.
//000466: 
//000467:             foreach (var other in m_boidModels)
//000468:             {
//000469:                 if (other != boid && 
//000470:                     (other.PreviousPosition - boid.PreviousPosition).Length <= NEIGHBORHOOD_SIZE &&
//000471:                     boid.ComputeAngle(other) <= 135)
//000472:                 {
//000473:                     summedPosition += other.PreviousPosition;
//000474:                     summedVelocity += other.PreviousVelocity;
//000475:                     numNearby++;
//000476: 
//000477:                     if ((other.PreviousPosition - boid.PreviousPosition).Length < MIN_DISTANCE_FROM_NEIGHBOR)
//000478:                     {
//000479:                         summedSeparation -= (other.PreviousPosition - boid.PreviousPosition);
//000480:                     }
//000481:                 }
//000482:             }
//000483: 
//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
//000485:             var rule2_separateFromNearby = summedSeparation;
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
//000487: 
//000488:             return
//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
//000499:             var v = new Vector3D();
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_0090:  ldloc.0
    IL_0091:  brtrue.s   IL_00a3

//000249:             else if (!m_autoPanCamera) Zoom(e.Delta / Mouse.MouseWheelDeltaForOneLine); 
    IL_0093:  ldarg.0
    IL_0094:  ldarg.2
    IL_0095:  callvirt   instance int32 [PresentationCore]System.Windows.Input.MouseWheelEventArgs::get_Delta()
    IL_009a:  ldc.i4.s   120
    IL_009c:  div
    IL_009d:  call       instance void ParallelBoids.MainWindow::Zoom(int32)
    IL_00a2:  nop
//000250:         }
    IL_00a3:  ret
  } // end of method MainWindow::Window_MouseWheel

  .method private hidebysig instance void 
          Window_MouseDoubleClick(object sender,
                                  class [PresentationCore]System.Windows.Input.MouseButtonEventArgs e) cil managed
  {
    // Code size       117 (0x75)
    .maxstack  2
    .locals init ([0] bool CS$4$0000)
//000251: 
//000252:         /// <summary>Handle mousedoubleclick events.</summary>
//000253:         /// <param name="sender">The sender.</param>
//000254:         /// <param name="e">The eventargs.</param>
//000255:         private void Window_MouseDoubleClick(object sender, MouseButtonEventArgs e)
//000256:         {
    IL_0000:  nop
//000257:             // If the right mouse button is double clicked, alternate between maximized and normal view
//000258:             if (e.ChangedButton == MouseButton.Right)
    IL_0001:  ldarg.2
    IL_0002:  callvirt   instance valuetype [PresentationCore]System.Windows.Input.MouseButton [PresentationCore]System.Windows.Input.MouseButtonEventArgs::get_ChangedButton()
    IL_0007:  ldc.i4.2
    IL_0008:  ceq
    IL_000a:  ldc.i4.0
    IL_000b:  ceq
    IL_000d:  stloc.0
//000259:             {
//000260:                 if (WindowState == WindowState.Maximized)
//000261:                 {
//000262:                     Topmost = false;
//000263:                     WindowStyle = WindowStyle.ThreeDBorderWindow;
//000264:                     WindowState = WindowState.Normal;
//000265:                 }
//000266:                 else
//000267:                 {
//000268:                     Topmost = true;
//000269:                     WindowStyle = WindowStyle.None;
//000270:                     WindowState = WindowState.Maximized;
//000271:                 }
//000272:             }
//000273:                 // If the left mouse button is double clicked, scatter the boids
//000274:             else if (e.ChangedButton == MouseButton.Left)
//000275:             {
//000276:                 Scatter();
//000277:             }
//000278:         }
//000279: 
//000280:         /// <summary>Scatter the boids.</summary>
//000281:         private void Scatter()
//000282:         {
//000283:             // Start scatterring if a scatter isn't already in process
//000284:             if (m_scatterTimer == null)
//000285:             {
//000286:                 // Ka'boom.  Something scares the boids.
//000287:                 SystemSounds.Hand.Play();
//000288: 
//000289:                 // Store original settings
//000290:                 var origHome = m_home;
//000291:                 var origRule1Weight = m_rule1Weight;
//000292:                 var origRule2Weight = m_rule2Weight;
//000293:                 var origRule4Weight = m_rule4Weight;
//000294:                 var origRule5Weight = m_rule5Weight;
//000295: 
//000296:                 // Create new scatter settings
//000297:                 m_home = new Vector3D(0, 0, 0);
//000298:                 m_rule1Weight = origRule1Weight * -5;
//000299:                 m_rule2Weight = origRule2Weight * 2;
//000300:                 m_rule4Weight = 0;
//000301:                 m_rule5Weight = origRule5Weight * -5;
//000302: 
//000303:                 // Start a timer to restore the original settings
//000304:                 m_scatterTimer = new Timer(_ =>
//000305:                 {
//000306:                     // Restore the original settings
//000307:                     m_home = origHome;
//000308:                     m_rule1Weight = origRule1Weight;
//000309:                     m_rule2Weight = origRule2Weight;
//000310:                     m_rule4Weight = origRule4Weight;
//000311:                     m_rule5Weight = origRule5Weight;
//000312: 
//000313:                     // Clean up the timer
//000314:                     m_scatterTimer.Dispose();
//000315:                     m_scatterTimer = null;
//000316:                 }, null, SCATTER_TIME, -1);
//000317:             }
//000318:         }
//000319: 
//000320:         /// <summary>Handle mousemove events.</summary>
//000321:         /// <param name="sender">The sender.</param>
//000322:         /// <param name="e">The eventargs.</param>
//000323:         private void Window_MouseMove(object sender, MouseEventArgs e)
//000324:         {
//000325:             // If we're not auto-panning
//000326:             if (!m_autoPanCamera)
//000327:             {
//000328:                 // Get the new mouse position and compute the difference from the previous
//000329:                 var newPosition = e.GetPosition(this);
//000330:                 var diff = _lastMousePosition - newPosition;
//000331: 
//000332:                 // If the left mouse position was pressed, pan based on the x/y differences
//000333:                 if (e.LeftButton == MouseButtonState.Pressed)
//000334:                 {
//000335:                     camMain.Position = new Point3D(camMain.Position.X + diff.X * .4, camMain.Position.Y - diff.Y * .4, camMain.Position.Z);
//000336:                 }
//000337:                     // If the middle button was pressed, zoom based on the y difference
//000338:                 else if (e.MiddleButton == MouseButtonState.Pressed)
//000339:                 {
//000340:                     Zoom((int)diff.Y);
//000341:                 }
//000342: 
//000343:                 // Store the new position
//000344:                 _lastMousePosition = newPosition;
//000345:             }
//000346:         }
//000347: 
//000348:         /// <summary>Zoom in or out based on the specified degree of zoom.</summary>
//000349:         /// <param name="amountOfChange">Amount to zoom in (positive) or out (negative).</param>
//000350:         private void Zoom(int amountOfChange)
//000351:         {
//000352:             const int ZOOM_FACTOR = 3;
//000353:             camMain.Position = Point3D.Add(camMain.Position, camMain.LookDirection * amountOfChange * ZOOM_FACTOR);
//000354:         }
//000355:         #endregion
//000356: 
//000357:         #region Step and Render
//000358:         /// <summary>Runs the rendering loop.</summary>
//000359:         private void RenderUpdateLoop()
//000360:         {
//000361:             // Loop forever...
//000362:             while (true)
//000363:             {
//000364:                 // Wait to receive a signal that we should render another frame
//000365:                 m_renderSignal.WaitOne();
//000366: 
//000367:                 // Start timing.
//000368:                 m_frameStopwatch.Restart();
//000369: 
//000370:                 // Update the positions and velocities of all of the boids.
//000371:                 StepBoids();
//000372: 
//000373:                 // Update our rendering stats for display to the user
//000374:                 m_totalRenderingMillisecondsSinceLastUserPresentation += m_frameStopwatch.ElapsedMilliseconds;
//000375:                 m_numRendersSinceLastUserPresentation++;
//000376: 
//000377:                 // Render the boids to the UI
//000378:                 Dispatcher.Invoke((Action)RenderBoids, DispatcherPriority.Send, null);
//000379:             }
//000380:         }
//000381: 
//000382:         /// <summary>Step the boids one step, updating their velocities and positions.</summary>
//000383:         private void StepBoids()
//000384:         {
//000385:             // Store the current velocities and positions so that we can operate on an immutable copy
//000386:             foreach (var boid in m_boidModels) boid.StorePositionAndVelocityIntoPrevious();
//000387: 
//000388:             // For each boid, analyze how the various boid rules influence its velocity and position,
//000389:             // then store this new information.  After this step, we'll be able to render the boids.
//000390:             Parallel.ForEach(m_boidModels, m_parallelOptions, boid =>
//000391:             {
//000392:                 var v1_2_3 = PrimaryRules_1_2_3(boid); // weights factored in already in PrimaryRules
//000393:                 var v4 = m_rule4Weight * Rule4_EncourageStayingWithinAviary(boid);
//000394:                 var v5 = m_rule5Weight * Rule5_TendendcyTowardsHome(boid);
//000395: 
//000396:                 boid.Velocity = BoundVelocity(boid.PreviousVelocity + v1_2_3 + v4 + v5, m_speedLimit);
//000397:                 boid.Velocity.Normalize();
//000398: 
//000399:                 var tmpPosition = boid.PreviousPosition + boid.Velocity;
//000400:                 if (tmpPosition.Y >= 0) boid.Position = tmpPosition;
//000401:             });
//000402:         }
//000403: 
//000404:         /// <summary>Render the boids.</summary>
//000405:         private void RenderBoids()
//000406:         {
//000407:             // Make sure the boids are all positioned and pointing correctly
//000408:             foreach (var boid in m_boidModels) boid.TransformByPositionAndVelocity();
//000409: 
//000410:             // Every once in a while, update the user-displayed stats on timings
//000411:             var now = DateTimeOffset.Now;
//000412:             if (now >= m_nextUserPresentation)
//000413:             {
//000414:                 Title = string.Format("Procs: {0}, Time: {1:F2}", m_parallelOptions.MaxDegreeOfParallelism, 
//000415:                     m_numRendersSinceLastUserPresentation > 0 ? 
//000416:                     m_totalRenderingMillisecondsSinceLastUserPresentation / (double)m_numRendersSinceLastUserPresentation : 
//000417:                     0);
//000418:                 m_nextUserPresentation = now.AddSeconds(1);
//000419:                 m_numRendersSinceLastUserPresentation = 0;
//000420:                 m_totalRenderingMillisecondsSinceLastUserPresentation = 0;
//000421:             }
//000422: 
//000423:             // If we're in auto-panning mode, move the camera appropriately
//000424:             if (m_autoPanCamera)
//000425:             {
//000426:                 // Compute the maximum Z value of all of the boids and the center of their mass
//000427:                 double maxZ = double.MinValue;
//000428:                 Vector3D totalPos = new Vector3D();
//000429:                 foreach (var boid in m_boidModels)
//000430:                 {
//000431:                     if (boid.Position.Z > maxZ) maxZ = boid.Position.Z;
//000432:                     totalPos += boid.Position;
//000433:                 }
//000434:                 var newCameraPos = totalPos / m_boidModels.Length;
//000435:                 
//000436:                 // Move the camera to point at the center of the boids, a ways back from the max boid's Z
//000437:                 const int CAMERA_DISTANCE_FROM_MAXZ = 100;
//000438:                 const double CAMERA_SPEED_LIMIT = .01;
//000439:                 var newPos = new Point3D(newCameraPos.X, newCameraPos.Y, maxZ + CAMERA_DISTANCE_FROM_MAXZ);
//000440:                 var cameraVelocity = newPos - camMain.Position;
//000441:                 camMain.Position = camMain.Position + (cameraVelocity * CAMERA_SPEED_LIMIT);
//000442:             }
//000443:         }
//000444:         #endregion
//000445: 
//000446:         #region Boid Rules
//000447:         /// <summary>Run the three primary rules of boidom.</summary>
//000448:         /// <param name="boid">The boid to process.</param>
//000449:         /// <returns>The velocity vector resulting from the three primary rules and their associated weights.</returns>
//000450:         private Vector3D PrimaryRules_1_2_3(Boid boid)
//000451:         {
//000452:             int numNearby = 0;
//000453:             Vector3D summedPosition = new Vector3D();
//000454:             Vector3D summedVelocity = new Vector3D();
//000455:             Vector3D summedSeparation = new Vector3D();
//000456: 
//000457:             // For rule #1, we want the boid to fly towards the center of all of those in its neighborhood.
//000458:             // We find all of those boids, average their positions, and create a velocity vector to move the
//000459:             // boid a bit of the way there.
//000460: 
//000461:             // For rule #2, we want the boid to move away from each other boid it's a bit too close to.
//000462:             // Find all of those boids in its immediate vicinity, and push it away.
//000463: 
//000464:             // For rule #3, we want the boid to match velocities with those boids in its neighborhood.
//000465:             // Sum their velocities, find the average, and move this boid's velocity a bit in that direction.
//000466: 
//000467:             foreach (var other in m_boidModels)
//000468:             {
//000469:                 if (other != boid && 
//000470:                     (other.PreviousPosition - boid.PreviousPosition).Length <= NEIGHBORHOOD_SIZE &&
//000471:                     boid.ComputeAngle(other) <= 135)
//000472:                 {
//000473:                     summedPosition += other.PreviousPosition;
//000474:                     summedVelocity += other.PreviousVelocity;
//000475:                     numNearby++;
//000476: 
//000477:                     if ((other.PreviousPosition - boid.PreviousPosition).Length < MIN_DISTANCE_FROM_NEIGHBOR)
//000478:                     {
//000479:                         summedSeparation -= (other.PreviousPosition - boid.PreviousPosition);
//000480:                     }
//000481:                 }
//000482:             }
//000483: 
//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
//000485:             var rule2_separateFromNearby = summedSeparation;
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
//000487: 
//000488:             return
//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
//000499:             var v = new Vector3D();
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_000e:  ldloc.0
    IL_000f:  brtrue.s   IL_005b

//000259:             {
    IL_0011:  nop
//000260:                 if (WindowState == WindowState.Maximized)
    IL_0012:  ldarg.0
    IL_0013:  call       instance valuetype [PresentationFramework]System.Windows.WindowState [PresentationFramework]System.Windows.Window::get_WindowState()
    IL_0018:  ldc.i4.2
    IL_0019:  ceq
    IL_001b:  ldc.i4.0
    IL_001c:  ceq
    IL_001e:  stloc.0
//000261:                 {
//000262:                     Topmost = false;
//000263:                     WindowStyle = WindowStyle.ThreeDBorderWindow;
//000264:                     WindowState = WindowState.Normal;
//000265:                 }
//000266:                 else
//000267:                 {
//000268:                     Topmost = true;
//000269:                     WindowStyle = WindowStyle.None;
//000270:                     WindowState = WindowState.Maximized;
//000271:                 }
//000272:             }
//000273:                 // If the left mouse button is double clicked, scatter the boids
//000274:             else if (e.ChangedButton == MouseButton.Left)
//000275:             {
//000276:                 Scatter();
//000277:             }
//000278:         }
//000279: 
//000280:         /// <summary>Scatter the boids.</summary>
//000281:         private void Scatter()
//000282:         {
//000283:             // Start scatterring if a scatter isn't already in process
//000284:             if (m_scatterTimer == null)
//000285:             {
//000286:                 // Ka'boom.  Something scares the boids.
//000287:                 SystemSounds.Hand.Play();
//000288: 
//000289:                 // Store original settings
//000290:                 var origHome = m_home;
//000291:                 var origRule1Weight = m_rule1Weight;
//000292:                 var origRule2Weight = m_rule2Weight;
//000293:                 var origRule4Weight = m_rule4Weight;
//000294:                 var origRule5Weight = m_rule5Weight;
//000295: 
//000296:                 // Create new scatter settings
//000297:                 m_home = new Vector3D(0, 0, 0);
//000298:                 m_rule1Weight = origRule1Weight * -5;
//000299:                 m_rule2Weight = origRule2Weight * 2;
//000300:                 m_rule4Weight = 0;
//000301:                 m_rule5Weight = origRule5Weight * -5;
//000302: 
//000303:                 // Start a timer to restore the original settings
//000304:                 m_scatterTimer = new Timer(_ =>
//000305:                 {
//000306:                     // Restore the original settings
//000307:                     m_home = origHome;
//000308:                     m_rule1Weight = origRule1Weight;
//000309:                     m_rule2Weight = origRule2Weight;
//000310:                     m_rule4Weight = origRule4Weight;
//000311:                     m_rule5Weight = origRule5Weight;
//000312: 
//000313:                     // Clean up the timer
//000314:                     m_scatterTimer.Dispose();
//000315:                     m_scatterTimer = null;
//000316:                 }, null, SCATTER_TIME, -1);
//000317:             }
//000318:         }
//000319: 
//000320:         /// <summary>Handle mousemove events.</summary>
//000321:         /// <param name="sender">The sender.</param>
//000322:         /// <param name="e">The eventargs.</param>
//000323:         private void Window_MouseMove(object sender, MouseEventArgs e)
//000324:         {
//000325:             // If we're not auto-panning
//000326:             if (!m_autoPanCamera)
//000327:             {
//000328:                 // Get the new mouse position and compute the difference from the previous
//000329:                 var newPosition = e.GetPosition(this);
//000330:                 var diff = _lastMousePosition - newPosition;
//000331: 
//000332:                 // If the left mouse position was pressed, pan based on the x/y differences
//000333:                 if (e.LeftButton == MouseButtonState.Pressed)
//000334:                 {
//000335:                     camMain.Position = new Point3D(camMain.Position.X + diff.X * .4, camMain.Position.Y - diff.Y * .4, camMain.Position.Z);
//000336:                 }
//000337:                     // If the middle button was pressed, zoom based on the y difference
//000338:                 else if (e.MiddleButton == MouseButtonState.Pressed)
//000339:                 {
//000340:                     Zoom((int)diff.Y);
//000341:                 }
//000342: 
//000343:                 // Store the new position
//000344:                 _lastMousePosition = newPosition;
//000345:             }
//000346:         }
//000347: 
//000348:         /// <summary>Zoom in or out based on the specified degree of zoom.</summary>
//000349:         /// <param name="amountOfChange">Amount to zoom in (positive) or out (negative).</param>
//000350:         private void Zoom(int amountOfChange)
//000351:         {
//000352:             const int ZOOM_FACTOR = 3;
//000353:             camMain.Position = Point3D.Add(camMain.Position, camMain.LookDirection * amountOfChange * ZOOM_FACTOR);
//000354:         }
//000355:         #endregion
//000356: 
//000357:         #region Step and Render
//000358:         /// <summary>Runs the rendering loop.</summary>
//000359:         private void RenderUpdateLoop()
//000360:         {
//000361:             // Loop forever...
//000362:             while (true)
//000363:             {
//000364:                 // Wait to receive a signal that we should render another frame
//000365:                 m_renderSignal.WaitOne();
//000366: 
//000367:                 // Start timing.
//000368:                 m_frameStopwatch.Restart();
//000369: 
//000370:                 // Update the positions and velocities of all of the boids.
//000371:                 StepBoids();
//000372: 
//000373:                 // Update our rendering stats for display to the user
//000374:                 m_totalRenderingMillisecondsSinceLastUserPresentation += m_frameStopwatch.ElapsedMilliseconds;
//000375:                 m_numRendersSinceLastUserPresentation++;
//000376: 
//000377:                 // Render the boids to the UI
//000378:                 Dispatcher.Invoke((Action)RenderBoids, DispatcherPriority.Send, null);
//000379:             }
//000380:         }
//000381: 
//000382:         /// <summary>Step the boids one step, updating their velocities and positions.</summary>
//000383:         private void StepBoids()
//000384:         {
//000385:             // Store the current velocities and positions so that we can operate on an immutable copy
//000386:             foreach (var boid in m_boidModels) boid.StorePositionAndVelocityIntoPrevious();
//000387: 
//000388:             // For each boid, analyze how the various boid rules influence its velocity and position,
//000389:             // then store this new information.  After this step, we'll be able to render the boids.
//000390:             Parallel.ForEach(m_boidModels, m_parallelOptions, boid =>
//000391:             {
//000392:                 var v1_2_3 = PrimaryRules_1_2_3(boid); // weights factored in already in PrimaryRules
//000393:                 var v4 = m_rule4Weight * Rule4_EncourageStayingWithinAviary(boid);
//000394:                 var v5 = m_rule5Weight * Rule5_TendendcyTowardsHome(boid);
//000395: 
//000396:                 boid.Velocity = BoundVelocity(boid.PreviousVelocity + v1_2_3 + v4 + v5, m_speedLimit);
//000397:                 boid.Velocity.Normalize();
//000398: 
//000399:                 var tmpPosition = boid.PreviousPosition + boid.Velocity;
//000400:                 if (tmpPosition.Y >= 0) boid.Position = tmpPosition;
//000401:             });
//000402:         }
//000403: 
//000404:         /// <summary>Render the boids.</summary>
//000405:         private void RenderBoids()
//000406:         {
//000407:             // Make sure the boids are all positioned and pointing correctly
//000408:             foreach (var boid in m_boidModels) boid.TransformByPositionAndVelocity();
//000409: 
//000410:             // Every once in a while, update the user-displayed stats on timings
//000411:             var now = DateTimeOffset.Now;
//000412:             if (now >= m_nextUserPresentation)
//000413:             {
//000414:                 Title = string.Format("Procs: {0}, Time: {1:F2}", m_parallelOptions.MaxDegreeOfParallelism, 
//000415:                     m_numRendersSinceLastUserPresentation > 0 ? 
//000416:                     m_totalRenderingMillisecondsSinceLastUserPresentation / (double)m_numRendersSinceLastUserPresentation : 
//000417:                     0);
//000418:                 m_nextUserPresentation = now.AddSeconds(1);
//000419:                 m_numRendersSinceLastUserPresentation = 0;
//000420:                 m_totalRenderingMillisecondsSinceLastUserPresentation = 0;
//000421:             }
//000422: 
//000423:             // If we're in auto-panning mode, move the camera appropriately
//000424:             if (m_autoPanCamera)
//000425:             {
//000426:                 // Compute the maximum Z value of all of the boids and the center of their mass
//000427:                 double maxZ = double.MinValue;
//000428:                 Vector3D totalPos = new Vector3D();
//000429:                 foreach (var boid in m_boidModels)
//000430:                 {
//000431:                     if (boid.Position.Z > maxZ) maxZ = boid.Position.Z;
//000432:                     totalPos += boid.Position;
//000433:                 }
//000434:                 var newCameraPos = totalPos / m_boidModels.Length;
//000435:                 
//000436:                 // Move the camera to point at the center of the boids, a ways back from the max boid's Z
//000437:                 const int CAMERA_DISTANCE_FROM_MAXZ = 100;
//000438:                 const double CAMERA_SPEED_LIMIT = .01;
//000439:                 var newPos = new Point3D(newCameraPos.X, newCameraPos.Y, maxZ + CAMERA_DISTANCE_FROM_MAXZ);
//000440:                 var cameraVelocity = newPos - camMain.Position;
//000441:                 camMain.Position = camMain.Position + (cameraVelocity * CAMERA_SPEED_LIMIT);
//000442:             }
//000443:         }
//000444:         #endregion
//000445: 
//000446:         #region Boid Rules
//000447:         /// <summary>Run the three primary rules of boidom.</summary>
//000448:         /// <param name="boid">The boid to process.</param>
//000449:         /// <returns>The velocity vector resulting from the three primary rules and their associated weights.</returns>
//000450:         private Vector3D PrimaryRules_1_2_3(Boid boid)
//000451:         {
//000452:             int numNearby = 0;
//000453:             Vector3D summedPosition = new Vector3D();
//000454:             Vector3D summedVelocity = new Vector3D();
//000455:             Vector3D summedSeparation = new Vector3D();
//000456: 
//000457:             // For rule #1, we want the boid to fly towards the center of all of those in its neighborhood.
//000458:             // We find all of those boids, average their positions, and create a velocity vector to move the
//000459:             // boid a bit of the way there.
//000460: 
//000461:             // For rule #2, we want the boid to move away from each other boid it's a bit too close to.
//000462:             // Find all of those boids in its immediate vicinity, and push it away.
//000463: 
//000464:             // For rule #3, we want the boid to match velocities with those boids in its neighborhood.
//000465:             // Sum their velocities, find the average, and move this boid's velocity a bit in that direction.
//000466: 
//000467:             foreach (var other in m_boidModels)
//000468:             {
//000469:                 if (other != boid && 
//000470:                     (other.PreviousPosition - boid.PreviousPosition).Length <= NEIGHBORHOOD_SIZE &&
//000471:                     boid.ComputeAngle(other) <= 135)
//000472:                 {
//000473:                     summedPosition += other.PreviousPosition;
//000474:                     summedVelocity += other.PreviousVelocity;
//000475:                     numNearby++;
//000476: 
//000477:                     if ((other.PreviousPosition - boid.PreviousPosition).Length < MIN_DISTANCE_FROM_NEIGHBOR)
//000478:                     {
//000479:                         summedSeparation -= (other.PreviousPosition - boid.PreviousPosition);
//000480:                     }
//000481:                 }
//000482:             }
//000483: 
//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
//000485:             var rule2_separateFromNearby = summedSeparation;
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
//000487: 
//000488:             return
//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
//000499:             var v = new Vector3D();
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_001f:  ldloc.0
    IL_0020:  brtrue.s   IL_003e

//000261:                 {
    IL_0022:  nop
//000262:                     Topmost = false;
    IL_0023:  ldarg.0
    IL_0024:  ldc.i4.0
    IL_0025:  call       instance void [PresentationFramework]System.Windows.Window::set_Topmost(bool)
    IL_002a:  nop
//000263:                     WindowStyle = WindowStyle.ThreeDBorderWindow;
    IL_002b:  ldarg.0
    IL_002c:  ldc.i4.2
    IL_002d:  call       instance void [PresentationFramework]System.Windows.Window::set_WindowStyle(valuetype [PresentationFramework]System.Windows.WindowStyle)
    IL_0032:  nop
//000264:                     WindowState = WindowState.Normal;
    IL_0033:  ldarg.0
    IL_0034:  ldc.i4.0
    IL_0035:  call       instance void [PresentationFramework]System.Windows.Window::set_WindowState(valuetype [PresentationFramework]System.Windows.WindowState)
    IL_003a:  nop
//000265:                 }
    IL_003b:  nop
//000266:                 else
//000267:                 {
//000268:                     Topmost = true;
//000269:                     WindowStyle = WindowStyle.None;
//000270:                     WindowState = WindowState.Maximized;
//000271:                 }
//000272:             }
//000273:                 // If the left mouse button is double clicked, scatter the boids
//000274:             else if (e.ChangedButton == MouseButton.Left)
//000275:             {
//000276:                 Scatter();
//000277:             }
//000278:         }
//000279: 
//000280:         /// <summary>Scatter the boids.</summary>
//000281:         private void Scatter()
//000282:         {
//000283:             // Start scatterring if a scatter isn't already in process
//000284:             if (m_scatterTimer == null)
//000285:             {
//000286:                 // Ka'boom.  Something scares the boids.
//000287:                 SystemSounds.Hand.Play();
//000288: 
//000289:                 // Store original settings
//000290:                 var origHome = m_home;
//000291:                 var origRule1Weight = m_rule1Weight;
//000292:                 var origRule2Weight = m_rule2Weight;
//000293:                 var origRule4Weight = m_rule4Weight;
//000294:                 var origRule5Weight = m_rule5Weight;
//000295: 
//000296:                 // Create new scatter settings
//000297:                 m_home = new Vector3D(0, 0, 0);
//000298:                 m_rule1Weight = origRule1Weight * -5;
//000299:                 m_rule2Weight = origRule2Weight * 2;
//000300:                 m_rule4Weight = 0;
//000301:                 m_rule5Weight = origRule5Weight * -5;
//000302: 
//000303:                 // Start a timer to restore the original settings
//000304:                 m_scatterTimer = new Timer(_ =>
//000305:                 {
//000306:                     // Restore the original settings
//000307:                     m_home = origHome;
//000308:                     m_rule1Weight = origRule1Weight;
//000309:                     m_rule2Weight = origRule2Weight;
//000310:                     m_rule4Weight = origRule4Weight;
//000311:                     m_rule5Weight = origRule5Weight;
//000312: 
//000313:                     // Clean up the timer
//000314:                     m_scatterTimer.Dispose();
//000315:                     m_scatterTimer = null;
//000316:                 }, null, SCATTER_TIME, -1);
//000317:             }
//000318:         }
//000319: 
//000320:         /// <summary>Handle mousemove events.</summary>
//000321:         /// <param name="sender">The sender.</param>
//000322:         /// <param name="e">The eventargs.</param>
//000323:         private void Window_MouseMove(object sender, MouseEventArgs e)
//000324:         {
//000325:             // If we're not auto-panning
//000326:             if (!m_autoPanCamera)
//000327:             {
//000328:                 // Get the new mouse position and compute the difference from the previous
//000329:                 var newPosition = e.GetPosition(this);
//000330:                 var diff = _lastMousePosition - newPosition;
//000331: 
//000332:                 // If the left mouse position was pressed, pan based on the x/y differences
//000333:                 if (e.LeftButton == MouseButtonState.Pressed)
//000334:                 {
//000335:                     camMain.Position = new Point3D(camMain.Position.X + diff.X * .4, camMain.Position.Y - diff.Y * .4, camMain.Position.Z);
//000336:                 }
//000337:                     // If the middle button was pressed, zoom based on the y difference
//000338:                 else if (e.MiddleButton == MouseButtonState.Pressed)
//000339:                 {
//000340:                     Zoom((int)diff.Y);
//000341:                 }
//000342: 
//000343:                 // Store the new position
//000344:                 _lastMousePosition = newPosition;
//000345:             }
//000346:         }
//000347: 
//000348:         /// <summary>Zoom in or out based on the specified degree of zoom.</summary>
//000349:         /// <param name="amountOfChange">Amount to zoom in (positive) or out (negative).</param>
//000350:         private void Zoom(int amountOfChange)
//000351:         {
//000352:             const int ZOOM_FACTOR = 3;
//000353:             camMain.Position = Point3D.Add(camMain.Position, camMain.LookDirection * amountOfChange * ZOOM_FACTOR);
//000354:         }
//000355:         #endregion
//000356: 
//000357:         #region Step and Render
//000358:         /// <summary>Runs the rendering loop.</summary>
//000359:         private void RenderUpdateLoop()
//000360:         {
//000361:             // Loop forever...
//000362:             while (true)
//000363:             {
//000364:                 // Wait to receive a signal that we should render another frame
//000365:                 m_renderSignal.WaitOne();
//000366: 
//000367:                 // Start timing.
//000368:                 m_frameStopwatch.Restart();
//000369: 
//000370:                 // Update the positions and velocities of all of the boids.
//000371:                 StepBoids();
//000372: 
//000373:                 // Update our rendering stats for display to the user
//000374:                 m_totalRenderingMillisecondsSinceLastUserPresentation += m_frameStopwatch.ElapsedMilliseconds;
//000375:                 m_numRendersSinceLastUserPresentation++;
//000376: 
//000377:                 // Render the boids to the UI
//000378:                 Dispatcher.Invoke((Action)RenderBoids, DispatcherPriority.Send, null);
//000379:             }
//000380:         }
//000381: 
//000382:         /// <summary>Step the boids one step, updating their velocities and positions.</summary>
//000383:         private void StepBoids()
//000384:         {
//000385:             // Store the current velocities and positions so that we can operate on an immutable copy
//000386:             foreach (var boid in m_boidModels) boid.StorePositionAndVelocityIntoPrevious();
//000387: 
//000388:             // For each boid, analyze how the various boid rules influence its velocity and position,
//000389:             // then store this new information.  After this step, we'll be able to render the boids.
//000390:             Parallel.ForEach(m_boidModels, m_parallelOptions, boid =>
//000391:             {
//000392:                 var v1_2_3 = PrimaryRules_1_2_3(boid); // weights factored in already in PrimaryRules
//000393:                 var v4 = m_rule4Weight * Rule4_EncourageStayingWithinAviary(boid);
//000394:                 var v5 = m_rule5Weight * Rule5_TendendcyTowardsHome(boid);
//000395: 
//000396:                 boid.Velocity = BoundVelocity(boid.PreviousVelocity + v1_2_3 + v4 + v5, m_speedLimit);
//000397:                 boid.Velocity.Normalize();
//000398: 
//000399:                 var tmpPosition = boid.PreviousPosition + boid.Velocity;
//000400:                 if (tmpPosition.Y >= 0) boid.Position = tmpPosition;
//000401:             });
//000402:         }
//000403: 
//000404:         /// <summary>Render the boids.</summary>
//000405:         private void RenderBoids()
//000406:         {
//000407:             // Make sure the boids are all positioned and pointing correctly
//000408:             foreach (var boid in m_boidModels) boid.TransformByPositionAndVelocity();
//000409: 
//000410:             // Every once in a while, update the user-displayed stats on timings
//000411:             var now = DateTimeOffset.Now;
//000412:             if (now >= m_nextUserPresentation)
//000413:             {
//000414:                 Title = string.Format("Procs: {0}, Time: {1:F2}", m_parallelOptions.MaxDegreeOfParallelism, 
//000415:                     m_numRendersSinceLastUserPresentation > 0 ? 
//000416:                     m_totalRenderingMillisecondsSinceLastUserPresentation / (double)m_numRendersSinceLastUserPresentation : 
//000417:                     0);
//000418:                 m_nextUserPresentation = now.AddSeconds(1);
//000419:                 m_numRendersSinceLastUserPresentation = 0;
//000420:                 m_totalRenderingMillisecondsSinceLastUserPresentation = 0;
//000421:             }
//000422: 
//000423:             // If we're in auto-panning mode, move the camera appropriately
//000424:             if (m_autoPanCamera)
//000425:             {
//000426:                 // Compute the maximum Z value of all of the boids and the center of their mass
//000427:                 double maxZ = double.MinValue;
//000428:                 Vector3D totalPos = new Vector3D();
//000429:                 foreach (var boid in m_boidModels)
//000430:                 {
//000431:                     if (boid.Position.Z > maxZ) maxZ = boid.Position.Z;
//000432:                     totalPos += boid.Position;
//000433:                 }
//000434:                 var newCameraPos = totalPos / m_boidModels.Length;
//000435:                 
//000436:                 // Move the camera to point at the center of the boids, a ways back from the max boid's Z
//000437:                 const int CAMERA_DISTANCE_FROM_MAXZ = 100;
//000438:                 const double CAMERA_SPEED_LIMIT = .01;
//000439:                 var newPos = new Point3D(newCameraPos.X, newCameraPos.Y, maxZ + CAMERA_DISTANCE_FROM_MAXZ);
//000440:                 var cameraVelocity = newPos - camMain.Position;
//000441:                 camMain.Position = camMain.Position + (cameraVelocity * CAMERA_SPEED_LIMIT);
//000442:             }
//000443:         }
//000444:         #endregion
//000445: 
//000446:         #region Boid Rules
//000447:         /// <summary>Run the three primary rules of boidom.</summary>
//000448:         /// <param name="boid">The boid to process.</param>
//000449:         /// <returns>The velocity vector resulting from the three primary rules and their associated weights.</returns>
//000450:         private Vector3D PrimaryRules_1_2_3(Boid boid)
//000451:         {
//000452:             int numNearby = 0;
//000453:             Vector3D summedPosition = new Vector3D();
//000454:             Vector3D summedVelocity = new Vector3D();
//000455:             Vector3D summedSeparation = new Vector3D();
//000456: 
//000457:             // For rule #1, we want the boid to fly towards the center of all of those in its neighborhood.
//000458:             // We find all of those boids, average their positions, and create a velocity vector to move the
//000459:             // boid a bit of the way there.
//000460: 
//000461:             // For rule #2, we want the boid to move away from each other boid it's a bit too close to.
//000462:             // Find all of those boids in its immediate vicinity, and push it away.
//000463: 
//000464:             // For rule #3, we want the boid to match velocities with those boids in its neighborhood.
//000465:             // Sum their velocities, find the average, and move this boid's velocity a bit in that direction.
//000466: 
//000467:             foreach (var other in m_boidModels)
//000468:             {
//000469:                 if (other != boid && 
//000470:                     (other.PreviousPosition - boid.PreviousPosition).Length <= NEIGHBORHOOD_SIZE &&
//000471:                     boid.ComputeAngle(other) <= 135)
//000472:                 {
//000473:                     summedPosition += other.PreviousPosition;
//000474:                     summedVelocity += other.PreviousVelocity;
//000475:                     numNearby++;
//000476: 
//000477:                     if ((other.PreviousPosition - boid.PreviousPosition).Length < MIN_DISTANCE_FROM_NEIGHBOR)
//000478:                     {
//000479:                         summedSeparation -= (other.PreviousPosition - boid.PreviousPosition);
//000480:                     }
//000481:                 }
//000482:             }
//000483: 
//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
//000485:             var rule2_separateFromNearby = summedSeparation;
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
//000487: 
//000488:             return
//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
//000499:             var v = new Vector3D();
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_003c:  br.s       IL_0058

//000267:                 {
    IL_003e:  nop
//000268:                     Topmost = true;
    IL_003f:  ldarg.0
    IL_0040:  ldc.i4.1
    IL_0041:  call       instance void [PresentationFramework]System.Windows.Window::set_Topmost(bool)
    IL_0046:  nop
//000269:                     WindowStyle = WindowStyle.None;
    IL_0047:  ldarg.0
    IL_0048:  ldc.i4.0
    IL_0049:  call       instance void [PresentationFramework]System.Windows.Window::set_WindowStyle(valuetype [PresentationFramework]System.Windows.WindowStyle)
    IL_004e:  nop
//000270:                     WindowState = WindowState.Maximized;
    IL_004f:  ldarg.0
    IL_0050:  ldc.i4.2
    IL_0051:  call       instance void [PresentationFramework]System.Windows.Window::set_WindowState(valuetype [PresentationFramework]System.Windows.WindowState)
    IL_0056:  nop
//000271:                 }
    IL_0057:  nop
//000272:             }
    IL_0058:  nop
//000273:                 // If the left mouse button is double clicked, scatter the boids
//000274:             else if (e.ChangedButton == MouseButton.Left)
//000275:             {
//000276:                 Scatter();
//000277:             }
//000278:         }
//000279: 
//000280:         /// <summary>Scatter the boids.</summary>
//000281:         private void Scatter()
//000282:         {
//000283:             // Start scatterring if a scatter isn't already in process
//000284:             if (m_scatterTimer == null)
//000285:             {
//000286:                 // Ka'boom.  Something scares the boids.
//000287:                 SystemSounds.Hand.Play();
//000288: 
//000289:                 // Store original settings
//000290:                 var origHome = m_home;
//000291:                 var origRule1Weight = m_rule1Weight;
//000292:                 var origRule2Weight = m_rule2Weight;
//000293:                 var origRule4Weight = m_rule4Weight;
//000294:                 var origRule5Weight = m_rule5Weight;
//000295: 
//000296:                 // Create new scatter settings
//000297:                 m_home = new Vector3D(0, 0, 0);
//000298:                 m_rule1Weight = origRule1Weight * -5;
//000299:                 m_rule2Weight = origRule2Weight * 2;
//000300:                 m_rule4Weight = 0;
//000301:                 m_rule5Weight = origRule5Weight * -5;
//000302: 
//000303:                 // Start a timer to restore the original settings
//000304:                 m_scatterTimer = new Timer(_ =>
//000305:                 {
//000306:                     // Restore the original settings
//000307:                     m_home = origHome;
//000308:                     m_rule1Weight = origRule1Weight;
//000309:                     m_rule2Weight = origRule2Weight;
//000310:                     m_rule4Weight = origRule4Weight;
//000311:                     m_rule5Weight = origRule5Weight;
//000312: 
//000313:                     // Clean up the timer
//000314:                     m_scatterTimer.Dispose();
//000315:                     m_scatterTimer = null;
//000316:                 }, null, SCATTER_TIME, -1);
//000317:             }
//000318:         }
//000319: 
//000320:         /// <summary>Handle mousemove events.</summary>
//000321:         /// <param name="sender">The sender.</param>
//000322:         /// <param name="e">The eventargs.</param>
//000323:         private void Window_MouseMove(object sender, MouseEventArgs e)
//000324:         {
//000325:             // If we're not auto-panning
//000326:             if (!m_autoPanCamera)
//000327:             {
//000328:                 // Get the new mouse position and compute the difference from the previous
//000329:                 var newPosition = e.GetPosition(this);
//000330:                 var diff = _lastMousePosition - newPosition;
//000331: 
//000332:                 // If the left mouse position was pressed, pan based on the x/y differences
//000333:                 if (e.LeftButton == MouseButtonState.Pressed)
//000334:                 {
//000335:                     camMain.Position = new Point3D(camMain.Position.X + diff.X * .4, camMain.Position.Y - diff.Y * .4, camMain.Position.Z);
//000336:                 }
//000337:                     // If the middle button was pressed, zoom based on the y difference
//000338:                 else if (e.MiddleButton == MouseButtonState.Pressed)
//000339:                 {
//000340:                     Zoom((int)diff.Y);
//000341:                 }
//000342: 
//000343:                 // Store the new position
//000344:                 _lastMousePosition = newPosition;
//000345:             }
//000346:         }
//000347: 
//000348:         /// <summary>Zoom in or out based on the specified degree of zoom.</summary>
//000349:         /// <param name="amountOfChange">Amount to zoom in (positive) or out (negative).</param>
//000350:         private void Zoom(int amountOfChange)
//000351:         {
//000352:             const int ZOOM_FACTOR = 3;
//000353:             camMain.Position = Point3D.Add(camMain.Position, camMain.LookDirection * amountOfChange * ZOOM_FACTOR);
//000354:         }
//000355:         #endregion
//000356: 
//000357:         #region Step and Render
//000358:         /// <summary>Runs the rendering loop.</summary>
//000359:         private void RenderUpdateLoop()
//000360:         {
//000361:             // Loop forever...
//000362:             while (true)
//000363:             {
//000364:                 // Wait to receive a signal that we should render another frame
//000365:                 m_renderSignal.WaitOne();
//000366: 
//000367:                 // Start timing.
//000368:                 m_frameStopwatch.Restart();
//000369: 
//000370:                 // Update the positions and velocities of all of the boids.
//000371:                 StepBoids();
//000372: 
//000373:                 // Update our rendering stats for display to the user
//000374:                 m_totalRenderingMillisecondsSinceLastUserPresentation += m_frameStopwatch.ElapsedMilliseconds;
//000375:                 m_numRendersSinceLastUserPresentation++;
//000376: 
//000377:                 // Render the boids to the UI
//000378:                 Dispatcher.Invoke((Action)RenderBoids, DispatcherPriority.Send, null);
//000379:             }
//000380:         }
//000381: 
//000382:         /// <summary>Step the boids one step, updating their velocities and positions.</summary>
//000383:         private void StepBoids()
//000384:         {
//000385:             // Store the current velocities and positions so that we can operate on an immutable copy
//000386:             foreach (var boid in m_boidModels) boid.StorePositionAndVelocityIntoPrevious();
//000387: 
//000388:             // For each boid, analyze how the various boid rules influence its velocity and position,
//000389:             // then store this new information.  After this step, we'll be able to render the boids.
//000390:             Parallel.ForEach(m_boidModels, m_parallelOptions, boid =>
//000391:             {
//000392:                 var v1_2_3 = PrimaryRules_1_2_3(boid); // weights factored in already in PrimaryRules
//000393:                 var v4 = m_rule4Weight * Rule4_EncourageStayingWithinAviary(boid);
//000394:                 var v5 = m_rule5Weight * Rule5_TendendcyTowardsHome(boid);
//000395: 
//000396:                 boid.Velocity = BoundVelocity(boid.PreviousVelocity + v1_2_3 + v4 + v5, m_speedLimit);
//000397:                 boid.Velocity.Normalize();
//000398: 
//000399:                 var tmpPosition = boid.PreviousPosition + boid.Velocity;
//000400:                 if (tmpPosition.Y >= 0) boid.Position = tmpPosition;
//000401:             });
//000402:         }
//000403: 
//000404:         /// <summary>Render the boids.</summary>
//000405:         private void RenderBoids()
//000406:         {
//000407:             // Make sure the boids are all positioned and pointing correctly
//000408:             foreach (var boid in m_boidModels) boid.TransformByPositionAndVelocity();
//000409: 
//000410:             // Every once in a while, update the user-displayed stats on timings
//000411:             var now = DateTimeOffset.Now;
//000412:             if (now >= m_nextUserPresentation)
//000413:             {
//000414:                 Title = string.Format("Procs: {0}, Time: {1:F2}", m_parallelOptions.MaxDegreeOfParallelism, 
//000415:                     m_numRendersSinceLastUserPresentation > 0 ? 
//000416:                     m_totalRenderingMillisecondsSinceLastUserPresentation / (double)m_numRendersSinceLastUserPresentation : 
//000417:                     0);
//000418:                 m_nextUserPresentation = now.AddSeconds(1);
//000419:                 m_numRendersSinceLastUserPresentation = 0;
//000420:                 m_totalRenderingMillisecondsSinceLastUserPresentation = 0;
//000421:             }
//000422: 
//000423:             // If we're in auto-panning mode, move the camera appropriately
//000424:             if (m_autoPanCamera)
//000425:             {
//000426:                 // Compute the maximum Z value of all of the boids and the center of their mass
//000427:                 double maxZ = double.MinValue;
//000428:                 Vector3D totalPos = new Vector3D();
//000429:                 foreach (var boid in m_boidModels)
//000430:                 {
//000431:                     if (boid.Position.Z > maxZ) maxZ = boid.Position.Z;
//000432:                     totalPos += boid.Position;
//000433:                 }
//000434:                 var newCameraPos = totalPos / m_boidModels.Length;
//000435:                 
//000436:                 // Move the camera to point at the center of the boids, a ways back from the max boid's Z
//000437:                 const int CAMERA_DISTANCE_FROM_MAXZ = 100;
//000438:                 const double CAMERA_SPEED_LIMIT = .01;
//000439:                 var newPos = new Point3D(newCameraPos.X, newCameraPos.Y, maxZ + CAMERA_DISTANCE_FROM_MAXZ);
//000440:                 var cameraVelocity = newPos - camMain.Position;
//000441:                 camMain.Position = camMain.Position + (cameraVelocity * CAMERA_SPEED_LIMIT);
//000442:             }
//000443:         }
//000444:         #endregion
//000445: 
//000446:         #region Boid Rules
//000447:         /// <summary>Run the three primary rules of boidom.</summary>
//000448:         /// <param name="boid">The boid to process.</param>
//000449:         /// <returns>The velocity vector resulting from the three primary rules and their associated weights.</returns>
//000450:         private Vector3D PrimaryRules_1_2_3(Boid boid)
//000451:         {
//000452:             int numNearby = 0;
//000453:             Vector3D summedPosition = new Vector3D();
//000454:             Vector3D summedVelocity = new Vector3D();
//000455:             Vector3D summedSeparation = new Vector3D();
//000456: 
//000457:             // For rule #1, we want the boid to fly towards the center of all of those in its neighborhood.
//000458:             // We find all of those boids, average their positions, and create a velocity vector to move the
//000459:             // boid a bit of the way there.
//000460: 
//000461:             // For rule #2, we want the boid to move away from each other boid it's a bit too close to.
//000462:             // Find all of those boids in its immediate vicinity, and push it away.
//000463: 
//000464:             // For rule #3, we want the boid to match velocities with those boids in its neighborhood.
//000465:             // Sum their velocities, find the average, and move this boid's velocity a bit in that direction.
//000466: 
//000467:             foreach (var other in m_boidModels)
//000468:             {
//000469:                 if (other != boid && 
//000470:                     (other.PreviousPosition - boid.PreviousPosition).Length <= NEIGHBORHOOD_SIZE &&
//000471:                     boid.ComputeAngle(other) <= 135)
//000472:                 {
//000473:                     summedPosition += other.PreviousPosition;
//000474:                     summedVelocity += other.PreviousVelocity;
//000475:                     numNearby++;
//000476: 
//000477:                     if ((other.PreviousPosition - boid.PreviousPosition).Length < MIN_DISTANCE_FROM_NEIGHBOR)
//000478:                     {
//000479:                         summedSeparation -= (other.PreviousPosition - boid.PreviousPosition);
//000480:                     }
//000481:                 }
//000482:             }
//000483: 
//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
//000485:             var rule2_separateFromNearby = summedSeparation;
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
//000487: 
//000488:             return
//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
//000499:             var v = new Vector3D();
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_0059:  br.s       IL_0074

//000274:             else if (e.ChangedButton == MouseButton.Left)
    IL_005b:  ldarg.2
    IL_005c:  callvirt   instance valuetype [PresentationCore]System.Windows.Input.MouseButton [PresentationCore]System.Windows.Input.MouseButtonEventArgs::get_ChangedButton()
    IL_0061:  ldc.i4.0
    IL_0062:  ceq
    IL_0064:  ldc.i4.0
    IL_0065:  ceq
    IL_0067:  stloc.0
//000275:             {
//000276:                 Scatter();
//000277:             }
//000278:         }
//000279: 
//000280:         /// <summary>Scatter the boids.</summary>
//000281:         private void Scatter()
//000282:         {
//000283:             // Start scatterring if a scatter isn't already in process
//000284:             if (m_scatterTimer == null)
//000285:             {
//000286:                 // Ka'boom.  Something scares the boids.
//000287:                 SystemSounds.Hand.Play();
//000288: 
//000289:                 // Store original settings
//000290:                 var origHome = m_home;
//000291:                 var origRule1Weight = m_rule1Weight;
//000292:                 var origRule2Weight = m_rule2Weight;
//000293:                 var origRule4Weight = m_rule4Weight;
//000294:                 var origRule5Weight = m_rule5Weight;
//000295: 
//000296:                 // Create new scatter settings
//000297:                 m_home = new Vector3D(0, 0, 0);
//000298:                 m_rule1Weight = origRule1Weight * -5;
//000299:                 m_rule2Weight = origRule2Weight * 2;
//000300:                 m_rule4Weight = 0;
//000301:                 m_rule5Weight = origRule5Weight * -5;
//000302: 
//000303:                 // Start a timer to restore the original settings
//000304:                 m_scatterTimer = new Timer(_ =>
//000305:                 {
//000306:                     // Restore the original settings
//000307:                     m_home = origHome;
//000308:                     m_rule1Weight = origRule1Weight;
//000309:                     m_rule2Weight = origRule2Weight;
//000310:                     m_rule4Weight = origRule4Weight;
//000311:                     m_rule5Weight = origRule5Weight;
//000312: 
//000313:                     // Clean up the timer
//000314:                     m_scatterTimer.Dispose();
//000315:                     m_scatterTimer = null;
//000316:                 }, null, SCATTER_TIME, -1);
//000317:             }
//000318:         }
//000319: 
//000320:         /// <summary>Handle mousemove events.</summary>
//000321:         /// <param name="sender">The sender.</param>
//000322:         /// <param name="e">The eventargs.</param>
//000323:         private void Window_MouseMove(object sender, MouseEventArgs e)
//000324:         {
//000325:             // If we're not auto-panning
//000326:             if (!m_autoPanCamera)
//000327:             {
//000328:                 // Get the new mouse position and compute the difference from the previous
//000329:                 var newPosition = e.GetPosition(this);
//000330:                 var diff = _lastMousePosition - newPosition;
//000331: 
//000332:                 // If the left mouse position was pressed, pan based on the x/y differences
//000333:                 if (e.LeftButton == MouseButtonState.Pressed)
//000334:                 {
//000335:                     camMain.Position = new Point3D(camMain.Position.X + diff.X * .4, camMain.Position.Y - diff.Y * .4, camMain.Position.Z);
//000336:                 }
//000337:                     // If the middle button was pressed, zoom based on the y difference
//000338:                 else if (e.MiddleButton == MouseButtonState.Pressed)
//000339:                 {
//000340:                     Zoom((int)diff.Y);
//000341:                 }
//000342: 
//000343:                 // Store the new position
//000344:                 _lastMousePosition = newPosition;
//000345:             }
//000346:         }
//000347: 
//000348:         /// <summary>Zoom in or out based on the specified degree of zoom.</summary>
//000349:         /// <param name="amountOfChange">Amount to zoom in (positive) or out (negative).</param>
//000350:         private void Zoom(int amountOfChange)
//000351:         {
//000352:             const int ZOOM_FACTOR = 3;
//000353:             camMain.Position = Point3D.Add(camMain.Position, camMain.LookDirection * amountOfChange * ZOOM_FACTOR);
//000354:         }
//000355:         #endregion
//000356: 
//000357:         #region Step and Render
//000358:         /// <summary>Runs the rendering loop.</summary>
//000359:         private void RenderUpdateLoop()
//000360:         {
//000361:             // Loop forever...
//000362:             while (true)
//000363:             {
//000364:                 // Wait to receive a signal that we should render another frame
//000365:                 m_renderSignal.WaitOne();
//000366: 
//000367:                 // Start timing.
//000368:                 m_frameStopwatch.Restart();
//000369: 
//000370:                 // Update the positions and velocities of all of the boids.
//000371:                 StepBoids();
//000372: 
//000373:                 // Update our rendering stats for display to the user
//000374:                 m_totalRenderingMillisecondsSinceLastUserPresentation += m_frameStopwatch.ElapsedMilliseconds;
//000375:                 m_numRendersSinceLastUserPresentation++;
//000376: 
//000377:                 // Render the boids to the UI
//000378:                 Dispatcher.Invoke((Action)RenderBoids, DispatcherPriority.Send, null);
//000379:             }
//000380:         }
//000381: 
//000382:         /// <summary>Step the boids one step, updating their velocities and positions.</summary>
//000383:         private void StepBoids()
//000384:         {
//000385:             // Store the current velocities and positions so that we can operate on an immutable copy
//000386:             foreach (var boid in m_boidModels) boid.StorePositionAndVelocityIntoPrevious();
//000387: 
//000388:             // For each boid, analyze how the various boid rules influence its velocity and position,
//000389:             // then store this new information.  After this step, we'll be able to render the boids.
//000390:             Parallel.ForEach(m_boidModels, m_parallelOptions, boid =>
//000391:             {
//000392:                 var v1_2_3 = PrimaryRules_1_2_3(boid); // weights factored in already in PrimaryRules
//000393:                 var v4 = m_rule4Weight * Rule4_EncourageStayingWithinAviary(boid);
//000394:                 var v5 = m_rule5Weight * Rule5_TendendcyTowardsHome(boid);
//000395: 
//000396:                 boid.Velocity = BoundVelocity(boid.PreviousVelocity + v1_2_3 + v4 + v5, m_speedLimit);
//000397:                 boid.Velocity.Normalize();
//000398: 
//000399:                 var tmpPosition = boid.PreviousPosition + boid.Velocity;
//000400:                 if (tmpPosition.Y >= 0) boid.Position = tmpPosition;
//000401:             });
//000402:         }
//000403: 
//000404:         /// <summary>Render the boids.</summary>
//000405:         private void RenderBoids()
//000406:         {
//000407:             // Make sure the boids are all positioned and pointing correctly
//000408:             foreach (var boid in m_boidModels) boid.TransformByPositionAndVelocity();
//000409: 
//000410:             // Every once in a while, update the user-displayed stats on timings
//000411:             var now = DateTimeOffset.Now;
//000412:             if (now >= m_nextUserPresentation)
//000413:             {
//000414:                 Title = string.Format("Procs: {0}, Time: {1:F2}", m_parallelOptions.MaxDegreeOfParallelism, 
//000415:                     m_numRendersSinceLastUserPresentation > 0 ? 
//000416:                     m_totalRenderingMillisecondsSinceLastUserPresentation / (double)m_numRendersSinceLastUserPresentation : 
//000417:                     0);
//000418:                 m_nextUserPresentation = now.AddSeconds(1);
//000419:                 m_numRendersSinceLastUserPresentation = 0;
//000420:                 m_totalRenderingMillisecondsSinceLastUserPresentation = 0;
//000421:             }
//000422: 
//000423:             // If we're in auto-panning mode, move the camera appropriately
//000424:             if (m_autoPanCamera)
//000425:             {
//000426:                 // Compute the maximum Z value of all of the boids and the center of their mass
//000427:                 double maxZ = double.MinValue;
//000428:                 Vector3D totalPos = new Vector3D();
//000429:                 foreach (var boid in m_boidModels)
//000430:                 {
//000431:                     if (boid.Position.Z > maxZ) maxZ = boid.Position.Z;
//000432:                     totalPos += boid.Position;
//000433:                 }
//000434:                 var newCameraPos = totalPos / m_boidModels.Length;
//000435:                 
//000436:                 // Move the camera to point at the center of the boids, a ways back from the max boid's Z
//000437:                 const int CAMERA_DISTANCE_FROM_MAXZ = 100;
//000438:                 const double CAMERA_SPEED_LIMIT = .01;
//000439:                 var newPos = new Point3D(newCameraPos.X, newCameraPos.Y, maxZ + CAMERA_DISTANCE_FROM_MAXZ);
//000440:                 var cameraVelocity = newPos - camMain.Position;
//000441:                 camMain.Position = camMain.Position + (cameraVelocity * CAMERA_SPEED_LIMIT);
//000442:             }
//000443:         }
//000444:         #endregion
//000445: 
//000446:         #region Boid Rules
//000447:         /// <summary>Run the three primary rules of boidom.</summary>
//000448:         /// <param name="boid">The boid to process.</param>
//000449:         /// <returns>The velocity vector resulting from the three primary rules and their associated weights.</returns>
//000450:         private Vector3D PrimaryRules_1_2_3(Boid boid)
//000451:         {
//000452:             int numNearby = 0;
//000453:             Vector3D summedPosition = new Vector3D();
//000454:             Vector3D summedVelocity = new Vector3D();
//000455:             Vector3D summedSeparation = new Vector3D();
//000456: 
//000457:             // For rule #1, we want the boid to fly towards the center of all of those in its neighborhood.
//000458:             // We find all of those boids, average their positions, and create a velocity vector to move the
//000459:             // boid a bit of the way there.
//000460: 
//000461:             // For rule #2, we want the boid to move away from each other boid it's a bit too close to.
//000462:             // Find all of those boids in its immediate vicinity, and push it away.
//000463: 
//000464:             // For rule #3, we want the boid to match velocities with those boids in its neighborhood.
//000465:             // Sum their velocities, find the average, and move this boid's velocity a bit in that direction.
//000466: 
//000467:             foreach (var other in m_boidModels)
//000468:             {
//000469:                 if (other != boid && 
//000470:                     (other.PreviousPosition - boid.PreviousPosition).Length <= NEIGHBORHOOD_SIZE &&
//000471:                     boid.ComputeAngle(other) <= 135)
//000472:                 {
//000473:                     summedPosition += other.PreviousPosition;
//000474:                     summedVelocity += other.PreviousVelocity;
//000475:                     numNearby++;
//000476: 
//000477:                     if ((other.PreviousPosition - boid.PreviousPosition).Length < MIN_DISTANCE_FROM_NEIGHBOR)
//000478:                     {
//000479:                         summedSeparation -= (other.PreviousPosition - boid.PreviousPosition);
//000480:                     }
//000481:                 }
//000482:             }
//000483: 
//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
//000485:             var rule2_separateFromNearby = summedSeparation;
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
//000487: 
//000488:             return
//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
//000499:             var v = new Vector3D();
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_0068:  ldloc.0
    IL_0069:  brtrue.s   IL_0074

//000275:             {
    IL_006b:  nop
//000276:                 Scatter();
    IL_006c:  ldarg.0
    IL_006d:  call       instance void ParallelBoids.MainWindow::Scatter()
    IL_0072:  nop
//000277:             }
    IL_0073:  nop
//000278:         }
    IL_0074:  ret
  } // end of method MainWindow::Window_MouseDoubleClick

  .method private hidebysig instance void 
          Scatter() cil managed
  {
    // Code size       258 (0x102)
    .maxstack  6
    .locals init ([0] class ParallelBoids.MainWindow/'<>c__DisplayClass6' 'CS$<>8__locals7',
             [1] bool CS$4$0000)
//000279: 
//000280:         /// <summary>Scatter the boids.</summary>
//000281:         private void Scatter()
//000282:         {
    IL_0000:  nop
//000283:             // Start scatterring if a scatter isn't already in process
//000284:             if (m_scatterTimer == null)
    IL_0001:  ldarg.0
    IL_0002:  ldfld      class [mscorlib]System.Threading.Timer ParallelBoids.MainWindow::m_scatterTimer
    IL_0007:  ldnull
    IL_0008:  ceq
    IL_000a:  ldc.i4.0
    IL_000b:  ceq
    IL_000d:  stloc.1
//000285:             {
//000286:                 // Ka'boom.  Something scares the boids.
//000287:                 SystemSounds.Hand.Play();
//000288: 
//000289:                 // Store original settings
//000290:                 var origHome = m_home;
//000291:                 var origRule1Weight = m_rule1Weight;
//000292:                 var origRule2Weight = m_rule2Weight;
//000293:                 var origRule4Weight = m_rule4Weight;
//000294:                 var origRule5Weight = m_rule5Weight;
//000295: 
//000296:                 // Create new scatter settings
//000297:                 m_home = new Vector3D(0, 0, 0);
//000298:                 m_rule1Weight = origRule1Weight * -5;
//000299:                 m_rule2Weight = origRule2Weight * 2;
//000300:                 m_rule4Weight = 0;
//000301:                 m_rule5Weight = origRule5Weight * -5;
//000302: 
//000303:                 // Start a timer to restore the original settings
//000304:                 m_scatterTimer = new Timer(_ =>
//000305:                 {
//000306:                     // Restore the original settings
//000307:                     m_home = origHome;
//000308:                     m_rule1Weight = origRule1Weight;
//000309:                     m_rule2Weight = origRule2Weight;
//000310:                     m_rule4Weight = origRule4Weight;
//000311:                     m_rule5Weight = origRule5Weight;
//000312: 
//000313:                     // Clean up the timer
//000314:                     m_scatterTimer.Dispose();
//000315:                     m_scatterTimer = null;
//000316:                 }, null, SCATTER_TIME, -1);
//000317:             }
//000318:         }
//000319: 
//000320:         /// <summary>Handle mousemove events.</summary>
//000321:         /// <param name="sender">The sender.</param>
//000322:         /// <param name="e">The eventargs.</param>
//000323:         private void Window_MouseMove(object sender, MouseEventArgs e)
//000324:         {
//000325:             // If we're not auto-panning
//000326:             if (!m_autoPanCamera)
//000327:             {
//000328:                 // Get the new mouse position and compute the difference from the previous
//000329:                 var newPosition = e.GetPosition(this);
//000330:                 var diff = _lastMousePosition - newPosition;
//000331: 
//000332:                 // If the left mouse position was pressed, pan based on the x/y differences
//000333:                 if (e.LeftButton == MouseButtonState.Pressed)
//000334:                 {
//000335:                     camMain.Position = new Point3D(camMain.Position.X + diff.X * .4, camMain.Position.Y - diff.Y * .4, camMain.Position.Z);
//000336:                 }
//000337:                     // If the middle button was pressed, zoom based on the y difference
//000338:                 else if (e.MiddleButton == MouseButtonState.Pressed)
//000339:                 {
//000340:                     Zoom((int)diff.Y);
//000341:                 }
//000342: 
//000343:                 // Store the new position
//000344:                 _lastMousePosition = newPosition;
//000345:             }
//000346:         }
//000347: 
//000348:         /// <summary>Zoom in or out based on the specified degree of zoom.</summary>
//000349:         /// <param name="amountOfChange">Amount to zoom in (positive) or out (negative).</param>
//000350:         private void Zoom(int amountOfChange)
//000351:         {
//000352:             const int ZOOM_FACTOR = 3;
//000353:             camMain.Position = Point3D.Add(camMain.Position, camMain.LookDirection * amountOfChange * ZOOM_FACTOR);
//000354:         }
//000355:         #endregion
//000356: 
//000357:         #region Step and Render
//000358:         /// <summary>Runs the rendering loop.</summary>
//000359:         private void RenderUpdateLoop()
//000360:         {
//000361:             // Loop forever...
//000362:             while (true)
//000363:             {
//000364:                 // Wait to receive a signal that we should render another frame
//000365:                 m_renderSignal.WaitOne();
//000366: 
//000367:                 // Start timing.
//000368:                 m_frameStopwatch.Restart();
//000369: 
//000370:                 // Update the positions and velocities of all of the boids.
//000371:                 StepBoids();
//000372: 
//000373:                 // Update our rendering stats for display to the user
//000374:                 m_totalRenderingMillisecondsSinceLastUserPresentation += m_frameStopwatch.ElapsedMilliseconds;
//000375:                 m_numRendersSinceLastUserPresentation++;
//000376: 
//000377:                 // Render the boids to the UI
//000378:                 Dispatcher.Invoke((Action)RenderBoids, DispatcherPriority.Send, null);
//000379:             }
//000380:         }
//000381: 
//000382:         /// <summary>Step the boids one step, updating their velocities and positions.</summary>
//000383:         private void StepBoids()
//000384:         {
//000385:             // Store the current velocities and positions so that we can operate on an immutable copy
//000386:             foreach (var boid in m_boidModels) boid.StorePositionAndVelocityIntoPrevious();
//000387: 
//000388:             // For each boid, analyze how the various boid rules influence its velocity and position,
//000389:             // then store this new information.  After this step, we'll be able to render the boids.
//000390:             Parallel.ForEach(m_boidModels, m_parallelOptions, boid =>
//000391:             {
//000392:                 var v1_2_3 = PrimaryRules_1_2_3(boid); // weights factored in already in PrimaryRules
//000393:                 var v4 = m_rule4Weight * Rule4_EncourageStayingWithinAviary(boid);
//000394:                 var v5 = m_rule5Weight * Rule5_TendendcyTowardsHome(boid);
//000395: 
//000396:                 boid.Velocity = BoundVelocity(boid.PreviousVelocity + v1_2_3 + v4 + v5, m_speedLimit);
//000397:                 boid.Velocity.Normalize();
//000398: 
//000399:                 var tmpPosition = boid.PreviousPosition + boid.Velocity;
//000400:                 if (tmpPosition.Y >= 0) boid.Position = tmpPosition;
//000401:             });
//000402:         }
//000403: 
//000404:         /// <summary>Render the boids.</summary>
//000405:         private void RenderBoids()
//000406:         {
//000407:             // Make sure the boids are all positioned and pointing correctly
//000408:             foreach (var boid in m_boidModels) boid.TransformByPositionAndVelocity();
//000409: 
//000410:             // Every once in a while, update the user-displayed stats on timings
//000411:             var now = DateTimeOffset.Now;
//000412:             if (now >= m_nextUserPresentation)
//000413:             {
//000414:                 Title = string.Format("Procs: {0}, Time: {1:F2}", m_parallelOptions.MaxDegreeOfParallelism, 
//000415:                     m_numRendersSinceLastUserPresentation > 0 ? 
//000416:                     m_totalRenderingMillisecondsSinceLastUserPresentation / (double)m_numRendersSinceLastUserPresentation : 
//000417:                     0);
//000418:                 m_nextUserPresentation = now.AddSeconds(1);
//000419:                 m_numRendersSinceLastUserPresentation = 0;
//000420:                 m_totalRenderingMillisecondsSinceLastUserPresentation = 0;
//000421:             }
//000422: 
//000423:             // If we're in auto-panning mode, move the camera appropriately
//000424:             if (m_autoPanCamera)
//000425:             {
//000426:                 // Compute the maximum Z value of all of the boids and the center of their mass
//000427:                 double maxZ = double.MinValue;
//000428:                 Vector3D totalPos = new Vector3D();
//000429:                 foreach (var boid in m_boidModels)
//000430:                 {
//000431:                     if (boid.Position.Z > maxZ) maxZ = boid.Position.Z;
//000432:                     totalPos += boid.Position;
//000433:                 }
//000434:                 var newCameraPos = totalPos / m_boidModels.Length;
//000435:                 
//000436:                 // Move the camera to point at the center of the boids, a ways back from the max boid's Z
//000437:                 const int CAMERA_DISTANCE_FROM_MAXZ = 100;
//000438:                 const double CAMERA_SPEED_LIMIT = .01;
//000439:                 var newPos = new Point3D(newCameraPos.X, newCameraPos.Y, maxZ + CAMERA_DISTANCE_FROM_MAXZ);
//000440:                 var cameraVelocity = newPos - camMain.Position;
//000441:                 camMain.Position = camMain.Position + (cameraVelocity * CAMERA_SPEED_LIMIT);
//000442:             }
//000443:         }
//000444:         #endregion
//000445: 
//000446:         #region Boid Rules
//000447:         /// <summary>Run the three primary rules of boidom.</summary>
//000448:         /// <param name="boid">The boid to process.</param>
//000449:         /// <returns>The velocity vector resulting from the three primary rules and their associated weights.</returns>
//000450:         private Vector3D PrimaryRules_1_2_3(Boid boid)
//000451:         {
//000452:             int numNearby = 0;
//000453:             Vector3D summedPosition = new Vector3D();
//000454:             Vector3D summedVelocity = new Vector3D();
//000455:             Vector3D summedSeparation = new Vector3D();
//000456: 
//000457:             // For rule #1, we want the boid to fly towards the center of all of those in its neighborhood.
//000458:             // We find all of those boids, average their positions, and create a velocity vector to move the
//000459:             // boid a bit of the way there.
//000460: 
//000461:             // For rule #2, we want the boid to move away from each other boid it's a bit too close to.
//000462:             // Find all of those boids in its immediate vicinity, and push it away.
//000463: 
//000464:             // For rule #3, we want the boid to match velocities with those boids in its neighborhood.
//000465:             // Sum their velocities, find the average, and move this boid's velocity a bit in that direction.
//000466: 
//000467:             foreach (var other in m_boidModels)
//000468:             {
//000469:                 if (other != boid && 
//000470:                     (other.PreviousPosition - boid.PreviousPosition).Length <= NEIGHBORHOOD_SIZE &&
//000471:                     boid.ComputeAngle(other) <= 135)
//000472:                 {
//000473:                     summedPosition += other.PreviousPosition;
//000474:                     summedVelocity += other.PreviousVelocity;
//000475:                     numNearby++;
//000476: 
//000477:                     if ((other.PreviousPosition - boid.PreviousPosition).Length < MIN_DISTANCE_FROM_NEIGHBOR)
//000478:                     {
//000479:                         summedSeparation -= (other.PreviousPosition - boid.PreviousPosition);
//000480:                     }
//000481:                 }
//000482:             }
//000483: 
//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
//000485:             var rule2_separateFromNearby = summedSeparation;
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
//000487: 
//000488:             return
//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
//000499:             var v = new Vector3D();
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_000e:  ldloc.1
    IL_000f:  brtrue     IL_0101

    IL_0014:  newobj     instance void ParallelBoids.MainWindow/'<>c__DisplayClass6'::.ctor()
    IL_0019:  stloc.0
    IL_001a:  ldloc.0
    IL_001b:  ldarg.0
    IL_001c:  stfld      class ParallelBoids.MainWindow ParallelBoids.MainWindow/'<>c__DisplayClass6'::'<>4__this'
//000285:             {
    IL_0021:  nop
//000286:                 // Ka'boom.  Something scares the boids.
//000287:                 SystemSounds.Hand.Play();
    IL_0022:  call       class [System]System.Media.SystemSound [System]System.Media.SystemSounds::get_Hand()
    IL_0027:  callvirt   instance void [System]System.Media.SystemSound::Play()
    IL_002c:  nop
//000288: 
//000289:                 // Store original settings
//000290:                 var origHome = m_home;
    IL_002d:  ldloc.0
    IL_002e:  ldarg.0
    IL_002f:  ldfld      valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.MainWindow::m_home
    IL_0034:  stfld      valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.MainWindow/'<>c__DisplayClass6'::origHome
//000291:                 var origRule1Weight = m_rule1Weight;
    IL_0039:  ldloc.0
    IL_003a:  ldarg.0
    IL_003b:  ldfld      float64 ParallelBoids.MainWindow::m_rule1Weight
    IL_0040:  stfld      float64 ParallelBoids.MainWindow/'<>c__DisplayClass6'::origRule1Weight
//000292:                 var origRule2Weight = m_rule2Weight;
    IL_0045:  ldloc.0
    IL_0046:  ldarg.0
    IL_0047:  ldfld      float64 ParallelBoids.MainWindow::m_rule2Weight
    IL_004c:  stfld      float64 ParallelBoids.MainWindow/'<>c__DisplayClass6'::origRule2Weight
//000293:                 var origRule4Weight = m_rule4Weight;
    IL_0051:  ldloc.0
    IL_0052:  ldarg.0
    IL_0053:  ldfld      float64 ParallelBoids.MainWindow::m_rule4Weight
    IL_0058:  stfld      float64 ParallelBoids.MainWindow/'<>c__DisplayClass6'::origRule4Weight
//000294:                 var origRule5Weight = m_rule5Weight;
    IL_005d:  ldloc.0
    IL_005e:  ldarg.0
    IL_005f:  ldfld      float64 ParallelBoids.MainWindow::m_rule5Weight
    IL_0064:  stfld      float64 ParallelBoids.MainWindow/'<>c__DisplayClass6'::origRule5Weight
//000295: 
//000296:                 // Create new scatter settings
//000297:                 m_home = new Vector3D(0, 0, 0);
    IL_0069:  ldarg.0
    IL_006a:  ldc.r8     0.0
    IL_0073:  ldc.r8     0.0
    IL_007c:  ldc.r8     0.0
    IL_0085:  newobj     instance void [PresentationCore]System.Windows.Media.Media3D.Vector3D::.ctor(float64,
                                                                                                      float64,
                                                                                                      float64)
    IL_008a:  stfld      valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.MainWindow::m_home
//000298:                 m_rule1Weight = origRule1Weight * -5;
    IL_008f:  ldarg.0
    IL_0090:  ldloc.0
    IL_0091:  ldfld      float64 ParallelBoids.MainWindow/'<>c__DisplayClass6'::origRule1Weight
    IL_0096:  ldc.r8     -5.
    IL_009f:  mul
    IL_00a0:  stfld      float64 ParallelBoids.MainWindow::m_rule1Weight
//000299:                 m_rule2Weight = origRule2Weight * 2;
    IL_00a5:  ldarg.0
    IL_00a6:  ldloc.0
    IL_00a7:  ldfld      float64 ParallelBoids.MainWindow/'<>c__DisplayClass6'::origRule2Weight
    IL_00ac:  ldc.r8     2.
    IL_00b5:  mul
    IL_00b6:  stfld      float64 ParallelBoids.MainWindow::m_rule2Weight
//000300:                 m_rule4Weight = 0;
    IL_00bb:  ldarg.0
    IL_00bc:  ldc.r8     0.0
    IL_00c5:  stfld      float64 ParallelBoids.MainWindow::m_rule4Weight
//000301:                 m_rule5Weight = origRule5Weight * -5;
    IL_00ca:  ldarg.0
    IL_00cb:  ldloc.0
    IL_00cc:  ldfld      float64 ParallelBoids.MainWindow/'<>c__DisplayClass6'::origRule5Weight
    IL_00d1:  ldc.r8     -5.
    IL_00da:  mul
    IL_00db:  stfld      float64 ParallelBoids.MainWindow::m_rule5Weight
//000302: 
//000303:                 // Start a timer to restore the original settings
//000304:                 m_scatterTimer = new Timer(_ =>
    IL_00e0:  ldarg.0
    IL_00e1:  ldloc.0
    IL_00e2:  ldftn      instance void ParallelBoids.MainWindow/'<>c__DisplayClass6'::'<Scatter>b__5'(object)
    IL_00e8:  newobj     instance void [mscorlib]System.Threading.TimerCallback::.ctor(object,
                                                                                       native int)
    IL_00ed:  ldnull
    IL_00ee:  ldc.i4     0xfa0
    IL_00f3:  conv.i8
    IL_00f4:  ldc.i4.m1
    IL_00f5:  conv.i8
    IL_00f6:  newobj     instance void [mscorlib]System.Threading.Timer::.ctor(class [mscorlib]System.Threading.TimerCallback,
                                                                               object,
                                                                               int64,
                                                                               int64)
    IL_00fb:  stfld      class [mscorlib]System.Threading.Timer ParallelBoids.MainWindow::m_scatterTimer
//000305:                 {
//000306:                     // Restore the original settings
//000307:                     m_home = origHome;
//000308:                     m_rule1Weight = origRule1Weight;
//000309:                     m_rule2Weight = origRule2Weight;
//000310:                     m_rule4Weight = origRule4Weight;
//000311:                     m_rule5Weight = origRule5Weight;
//000312: 
//000313:                     // Clean up the timer
//000314:                     m_scatterTimer.Dispose();
//000315:                     m_scatterTimer = null;
//000316:                 }, null, SCATTER_TIME, -1);
//000317:             }
    IL_0100:  nop
//000318:         }
    IL_0101:  ret
  } // end of method MainWindow::Scatter

  .method private hidebysig instance void 
          Window_MouseMove(object sender,
                           class [PresentationCore]System.Windows.Input.MouseEventArgs e) cil managed
  {
    // Code size       208 (0xd0)
    .maxstack  5
    .locals init ([0] valuetype [WindowsBase]System.Windows.Point newPosition,
             [1] valuetype [WindowsBase]System.Windows.Vector diff,
             [2] bool CS$4$0000,
             [3] valuetype [PresentationCore]System.Windows.Media.Media3D.Point3D CS$0$0001)
//000319: 
//000320:         /// <summary>Handle mousemove events.</summary>
//000321:         /// <param name="sender">The sender.</param>
//000322:         /// <param name="e">The eventargs.</param>
//000323:         private void Window_MouseMove(object sender, MouseEventArgs e)
//000324:         {
    IL_0000:  nop
//000325:             // If we're not auto-panning
//000326:             if (!m_autoPanCamera)
    IL_0001:  ldarg.0
    IL_0002:  ldfld      bool ParallelBoids.MainWindow::m_autoPanCamera
    IL_0007:  stloc.2
//000327:             {
//000328:                 // Get the new mouse position and compute the difference from the previous
//000329:                 var newPosition = e.GetPosition(this);
//000330:                 var diff = _lastMousePosition - newPosition;
//000331: 
//000332:                 // If the left mouse position was pressed, pan based on the x/y differences
//000333:                 if (e.LeftButton == MouseButtonState.Pressed)
//000334:                 {
//000335:                     camMain.Position = new Point3D(camMain.Position.X + diff.X * .4, camMain.Position.Y - diff.Y * .4, camMain.Position.Z);
//000336:                 }
//000337:                     // If the middle button was pressed, zoom based on the y difference
//000338:                 else if (e.MiddleButton == MouseButtonState.Pressed)
//000339:                 {
//000340:                     Zoom((int)diff.Y);
//000341:                 }
//000342: 
//000343:                 // Store the new position
//000344:                 _lastMousePosition = newPosition;
//000345:             }
//000346:         }
//000347: 
//000348:         /// <summary>Zoom in or out based on the specified degree of zoom.</summary>
//000349:         /// <param name="amountOfChange">Amount to zoom in (positive) or out (negative).</param>
//000350:         private void Zoom(int amountOfChange)
//000351:         {
//000352:             const int ZOOM_FACTOR = 3;
//000353:             camMain.Position = Point3D.Add(camMain.Position, camMain.LookDirection * amountOfChange * ZOOM_FACTOR);
//000354:         }
//000355:         #endregion
//000356: 
//000357:         #region Step and Render
//000358:         /// <summary>Runs the rendering loop.</summary>
//000359:         private void RenderUpdateLoop()
//000360:         {
//000361:             // Loop forever...
//000362:             while (true)
//000363:             {
//000364:                 // Wait to receive a signal that we should render another frame
//000365:                 m_renderSignal.WaitOne();
//000366: 
//000367:                 // Start timing.
//000368:                 m_frameStopwatch.Restart();
//000369: 
//000370:                 // Update the positions and velocities of all of the boids.
//000371:                 StepBoids();
//000372: 
//000373:                 // Update our rendering stats for display to the user
//000374:                 m_totalRenderingMillisecondsSinceLastUserPresentation += m_frameStopwatch.ElapsedMilliseconds;
//000375:                 m_numRendersSinceLastUserPresentation++;
//000376: 
//000377:                 // Render the boids to the UI
//000378:                 Dispatcher.Invoke((Action)RenderBoids, DispatcherPriority.Send, null);
//000379:             }
//000380:         }
//000381: 
//000382:         /// <summary>Step the boids one step, updating their velocities and positions.</summary>
//000383:         private void StepBoids()
//000384:         {
//000385:             // Store the current velocities and positions so that we can operate on an immutable copy
//000386:             foreach (var boid in m_boidModels) boid.StorePositionAndVelocityIntoPrevious();
//000387: 
//000388:             // For each boid, analyze how the various boid rules influence its velocity and position,
//000389:             // then store this new information.  After this step, we'll be able to render the boids.
//000390:             Parallel.ForEach(m_boidModels, m_parallelOptions, boid =>
//000391:             {
//000392:                 var v1_2_3 = PrimaryRules_1_2_3(boid); // weights factored in already in PrimaryRules
//000393:                 var v4 = m_rule4Weight * Rule4_EncourageStayingWithinAviary(boid);
//000394:                 var v5 = m_rule5Weight * Rule5_TendendcyTowardsHome(boid);
//000395: 
//000396:                 boid.Velocity = BoundVelocity(boid.PreviousVelocity + v1_2_3 + v4 + v5, m_speedLimit);
//000397:                 boid.Velocity.Normalize();
//000398: 
//000399:                 var tmpPosition = boid.PreviousPosition + boid.Velocity;
//000400:                 if (tmpPosition.Y >= 0) boid.Position = tmpPosition;
//000401:             });
//000402:         }
//000403: 
//000404:         /// <summary>Render the boids.</summary>
//000405:         private void RenderBoids()
//000406:         {
//000407:             // Make sure the boids are all positioned and pointing correctly
//000408:             foreach (var boid in m_boidModels) boid.TransformByPositionAndVelocity();
//000409: 
//000410:             // Every once in a while, update the user-displayed stats on timings
//000411:             var now = DateTimeOffset.Now;
//000412:             if (now >= m_nextUserPresentation)
//000413:             {
//000414:                 Title = string.Format("Procs: {0}, Time: {1:F2}", m_parallelOptions.MaxDegreeOfParallelism, 
//000415:                     m_numRendersSinceLastUserPresentation > 0 ? 
//000416:                     m_totalRenderingMillisecondsSinceLastUserPresentation / (double)m_numRendersSinceLastUserPresentation : 
//000417:                     0);
//000418:                 m_nextUserPresentation = now.AddSeconds(1);
//000419:                 m_numRendersSinceLastUserPresentation = 0;
//000420:                 m_totalRenderingMillisecondsSinceLastUserPresentation = 0;
//000421:             }
//000422: 
//000423:             // If we're in auto-panning mode, move the camera appropriately
//000424:             if (m_autoPanCamera)
//000425:             {
//000426:                 // Compute the maximum Z value of all of the boids and the center of their mass
//000427:                 double maxZ = double.MinValue;
//000428:                 Vector3D totalPos = new Vector3D();
//000429:                 foreach (var boid in m_boidModels)
//000430:                 {
//000431:                     if (boid.Position.Z > maxZ) maxZ = boid.Position.Z;
//000432:                     totalPos += boid.Position;
//000433:                 }
//000434:                 var newCameraPos = totalPos / m_boidModels.Length;
//000435:                 
//000436:                 // Move the camera to point at the center of the boids, a ways back from the max boid's Z
//000437:                 const int CAMERA_DISTANCE_FROM_MAXZ = 100;
//000438:                 const double CAMERA_SPEED_LIMIT = .01;
//000439:                 var newPos = new Point3D(newCameraPos.X, newCameraPos.Y, maxZ + CAMERA_DISTANCE_FROM_MAXZ);
//000440:                 var cameraVelocity = newPos - camMain.Position;
//000441:                 camMain.Position = camMain.Position + (cameraVelocity * CAMERA_SPEED_LIMIT);
//000442:             }
//000443:         }
//000444:         #endregion
//000445: 
//000446:         #region Boid Rules
//000447:         /// <summary>Run the three primary rules of boidom.</summary>
//000448:         /// <param name="boid">The boid to process.</param>
//000449:         /// <returns>The velocity vector resulting from the three primary rules and their associated weights.</returns>
//000450:         private Vector3D PrimaryRules_1_2_3(Boid boid)
//000451:         {
//000452:             int numNearby = 0;
//000453:             Vector3D summedPosition = new Vector3D();
//000454:             Vector3D summedVelocity = new Vector3D();
//000455:             Vector3D summedSeparation = new Vector3D();
//000456: 
//000457:             // For rule #1, we want the boid to fly towards the center of all of those in its neighborhood.
//000458:             // We find all of those boids, average their positions, and create a velocity vector to move the
//000459:             // boid a bit of the way there.
//000460: 
//000461:             // For rule #2, we want the boid to move away from each other boid it's a bit too close to.
//000462:             // Find all of those boids in its immediate vicinity, and push it away.
//000463: 
//000464:             // For rule #3, we want the boid to match velocities with those boids in its neighborhood.
//000465:             // Sum their velocities, find the average, and move this boid's velocity a bit in that direction.
//000466: 
//000467:             foreach (var other in m_boidModels)
//000468:             {
//000469:                 if (other != boid && 
//000470:                     (other.PreviousPosition - boid.PreviousPosition).Length <= NEIGHBORHOOD_SIZE &&
//000471:                     boid.ComputeAngle(other) <= 135)
//000472:                 {
//000473:                     summedPosition += other.PreviousPosition;
//000474:                     summedVelocity += other.PreviousVelocity;
//000475:                     numNearby++;
//000476: 
//000477:                     if ((other.PreviousPosition - boid.PreviousPosition).Length < MIN_DISTANCE_FROM_NEIGHBOR)
//000478:                     {
//000479:                         summedSeparation -= (other.PreviousPosition - boid.PreviousPosition);
//000480:                     }
//000481:                 }
//000482:             }
//000483: 
//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
//000485:             var rule2_separateFromNearby = summedSeparation;
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
//000487: 
//000488:             return
//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
//000499:             var v = new Vector3D();
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_0008:  ldloc.2
    IL_0009:  brtrue     IL_00cf

//000327:             {
    IL_000e:  nop
//000328:                 // Get the new mouse position and compute the difference from the previous
//000329:                 var newPosition = e.GetPosition(this);
    IL_000f:  ldarg.2
    IL_0010:  ldarg.0
    IL_0011:  callvirt   instance valuetype [WindowsBase]System.Windows.Point [PresentationCore]System.Windows.Input.MouseEventArgs::GetPosition(class [PresentationCore]System.Windows.IInputElement)
    IL_0016:  stloc.0
//000330:                 var diff = _lastMousePosition - newPosition;
    IL_0017:  ldarg.0
    IL_0018:  ldfld      valuetype [WindowsBase]System.Windows.Point ParallelBoids.MainWindow::_lastMousePosition
    IL_001d:  ldloc.0
    IL_001e:  call       valuetype [WindowsBase]System.Windows.Vector [WindowsBase]System.Windows.Point::op_Subtraction(valuetype [WindowsBase]System.Windows.Point,
                                                                                                                        valuetype [WindowsBase]System.Windows.Point)
    IL_0023:  stloc.1
//000331: 
//000332:                 // If the left mouse position was pressed, pan based on the x/y differences
//000333:                 if (e.LeftButton == MouseButtonState.Pressed)
    IL_0024:  ldarg.2
    IL_0025:  callvirt   instance valuetype [PresentationCore]System.Windows.Input.MouseButtonState [PresentationCore]System.Windows.Input.MouseEventArgs::get_LeftButton()
    IL_002a:  ldc.i4.1
    IL_002b:  ceq
    IL_002d:  ldc.i4.0
    IL_002e:  ceq
    IL_0030:  stloc.2
//000334:                 {
//000335:                     camMain.Position = new Point3D(camMain.Position.X + diff.X * .4, camMain.Position.Y - diff.Y * .4, camMain.Position.Z);
//000336:                 }
//000337:                     // If the middle button was pressed, zoom based on the y difference
//000338:                 else if (e.MiddleButton == MouseButtonState.Pressed)
//000339:                 {
//000340:                     Zoom((int)diff.Y);
//000341:                 }
//000342: 
//000343:                 // Store the new position
//000344:                 _lastMousePosition = newPosition;
//000345:             }
//000346:         }
//000347: 
//000348:         /// <summary>Zoom in or out based on the specified degree of zoom.</summary>
//000349:         /// <param name="amountOfChange">Amount to zoom in (positive) or out (negative).</param>
//000350:         private void Zoom(int amountOfChange)
//000351:         {
//000352:             const int ZOOM_FACTOR = 3;
//000353:             camMain.Position = Point3D.Add(camMain.Position, camMain.LookDirection * amountOfChange * ZOOM_FACTOR);
//000354:         }
//000355:         #endregion
//000356: 
//000357:         #region Step and Render
//000358:         /// <summary>Runs the rendering loop.</summary>
//000359:         private void RenderUpdateLoop()
//000360:         {
//000361:             // Loop forever...
//000362:             while (true)
//000363:             {
//000364:                 // Wait to receive a signal that we should render another frame
//000365:                 m_renderSignal.WaitOne();
//000366: 
//000367:                 // Start timing.
//000368:                 m_frameStopwatch.Restart();
//000369: 
//000370:                 // Update the positions and velocities of all of the boids.
//000371:                 StepBoids();
//000372: 
//000373:                 // Update our rendering stats for display to the user
//000374:                 m_totalRenderingMillisecondsSinceLastUserPresentation += m_frameStopwatch.ElapsedMilliseconds;
//000375:                 m_numRendersSinceLastUserPresentation++;
//000376: 
//000377:                 // Render the boids to the UI
//000378:                 Dispatcher.Invoke((Action)RenderBoids, DispatcherPriority.Send, null);
//000379:             }
//000380:         }
//000381: 
//000382:         /// <summary>Step the boids one step, updating their velocities and positions.</summary>
//000383:         private void StepBoids()
//000384:         {
//000385:             // Store the current velocities and positions so that we can operate on an immutable copy
//000386:             foreach (var boid in m_boidModels) boid.StorePositionAndVelocityIntoPrevious();
//000387: 
//000388:             // For each boid, analyze how the various boid rules influence its velocity and position,
//000389:             // then store this new information.  After this step, we'll be able to render the boids.
//000390:             Parallel.ForEach(m_boidModels, m_parallelOptions, boid =>
//000391:             {
//000392:                 var v1_2_3 = PrimaryRules_1_2_3(boid); // weights factored in already in PrimaryRules
//000393:                 var v4 = m_rule4Weight * Rule4_EncourageStayingWithinAviary(boid);
//000394:                 var v5 = m_rule5Weight * Rule5_TendendcyTowardsHome(boid);
//000395: 
//000396:                 boid.Velocity = BoundVelocity(boid.PreviousVelocity + v1_2_3 + v4 + v5, m_speedLimit);
//000397:                 boid.Velocity.Normalize();
//000398: 
//000399:                 var tmpPosition = boid.PreviousPosition + boid.Velocity;
//000400:                 if (tmpPosition.Y >= 0) boid.Position = tmpPosition;
//000401:             });
//000402:         }
//000403: 
//000404:         /// <summary>Render the boids.</summary>
//000405:         private void RenderBoids()
//000406:         {
//000407:             // Make sure the boids are all positioned and pointing correctly
//000408:             foreach (var boid in m_boidModels) boid.TransformByPositionAndVelocity();
//000409: 
//000410:             // Every once in a while, update the user-displayed stats on timings
//000411:             var now = DateTimeOffset.Now;
//000412:             if (now >= m_nextUserPresentation)
//000413:             {
//000414:                 Title = string.Format("Procs: {0}, Time: {1:F2}", m_parallelOptions.MaxDegreeOfParallelism, 
//000415:                     m_numRendersSinceLastUserPresentation > 0 ? 
//000416:                     m_totalRenderingMillisecondsSinceLastUserPresentation / (double)m_numRendersSinceLastUserPresentation : 
//000417:                     0);
//000418:                 m_nextUserPresentation = now.AddSeconds(1);
//000419:                 m_numRendersSinceLastUserPresentation = 0;
//000420:                 m_totalRenderingMillisecondsSinceLastUserPresentation = 0;
//000421:             }
//000422: 
//000423:             // If we're in auto-panning mode, move the camera appropriately
//000424:             if (m_autoPanCamera)
//000425:             {
//000426:                 // Compute the maximum Z value of all of the boids and the center of their mass
//000427:                 double maxZ = double.MinValue;
//000428:                 Vector3D totalPos = new Vector3D();
//000429:                 foreach (var boid in m_boidModels)
//000430:                 {
//000431:                     if (boid.Position.Z > maxZ) maxZ = boid.Position.Z;
//000432:                     totalPos += boid.Position;
//000433:                 }
//000434:                 var newCameraPos = totalPos / m_boidModels.Length;
//000435:                 
//000436:                 // Move the camera to point at the center of the boids, a ways back from the max boid's Z
//000437:                 const int CAMERA_DISTANCE_FROM_MAXZ = 100;
//000438:                 const double CAMERA_SPEED_LIMIT = .01;
//000439:                 var newPos = new Point3D(newCameraPos.X, newCameraPos.Y, maxZ + CAMERA_DISTANCE_FROM_MAXZ);
//000440:                 var cameraVelocity = newPos - camMain.Position;
//000441:                 camMain.Position = camMain.Position + (cameraVelocity * CAMERA_SPEED_LIMIT);
//000442:             }
//000443:         }
//000444:         #endregion
//000445: 
//000446:         #region Boid Rules
//000447:         /// <summary>Run the three primary rules of boidom.</summary>
//000448:         /// <param name="boid">The boid to process.</param>
//000449:         /// <returns>The velocity vector resulting from the three primary rules and their associated weights.</returns>
//000450:         private Vector3D PrimaryRules_1_2_3(Boid boid)
//000451:         {
//000452:             int numNearby = 0;
//000453:             Vector3D summedPosition = new Vector3D();
//000454:             Vector3D summedVelocity = new Vector3D();
//000455:             Vector3D summedSeparation = new Vector3D();
//000456: 
//000457:             // For rule #1, we want the boid to fly towards the center of all of those in its neighborhood.
//000458:             // We find all of those boids, average their positions, and create a velocity vector to move the
//000459:             // boid a bit of the way there.
//000460: 
//000461:             // For rule #2, we want the boid to move away from each other boid it's a bit too close to.
//000462:             // Find all of those boids in its immediate vicinity, and push it away.
//000463: 
//000464:             // For rule #3, we want the boid to match velocities with those boids in its neighborhood.
//000465:             // Sum their velocities, find the average, and move this boid's velocity a bit in that direction.
//000466: 
//000467:             foreach (var other in m_boidModels)
//000468:             {
//000469:                 if (other != boid && 
//000470:                     (other.PreviousPosition - boid.PreviousPosition).Length <= NEIGHBORHOOD_SIZE &&
//000471:                     boid.ComputeAngle(other) <= 135)
//000472:                 {
//000473:                     summedPosition += other.PreviousPosition;
//000474:                     summedVelocity += other.PreviousVelocity;
//000475:                     numNearby++;
//000476: 
//000477:                     if ((other.PreviousPosition - boid.PreviousPosition).Length < MIN_DISTANCE_FROM_NEIGHBOR)
//000478:                     {
//000479:                         summedSeparation -= (other.PreviousPosition - boid.PreviousPosition);
//000480:                     }
//000481:                 }
//000482:             }
//000483: 
//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
//000485:             var rule2_separateFromNearby = summedSeparation;
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
//000487: 
//000488:             return
//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
//000499:             var v = new Vector3D();
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_0031:  ldloc.2
    IL_0032:  brtrue.s   IL_00a6

//000334:                 {
    IL_0034:  nop
//000335:                     camMain.Position = new Point3D(camMain.Position.X + diff.X * .4, camMain.Position.Y - diff.Y * .4, camMain.Position.Z);
    IL_0035:  ldarg.0
    IL_0036:  ldfld      class [PresentationCore]System.Windows.Media.Media3D.PerspectiveCamera ParallelBoids.MainWindow::camMain
    IL_003b:  ldarg.0
    IL_003c:  ldfld      class [PresentationCore]System.Windows.Media.Media3D.PerspectiveCamera ParallelBoids.MainWindow::camMain
    IL_0041:  callvirt   instance valuetype [PresentationCore]System.Windows.Media.Media3D.Point3D [PresentationCore]System.Windows.Media.Media3D.ProjectionCamera::get_Position()
    IL_0046:  stloc.3
    IL_0047:  ldloca.s   CS$0$0001
    IL_0049:  call       instance float64 [PresentationCore]System.Windows.Media.Media3D.Point3D::get_X()
    IL_004e:  ldloca.s   diff
    IL_0050:  call       instance float64 [WindowsBase]System.Windows.Vector::get_X()
    IL_0055:  ldc.r8     0.40000000000000002
    IL_005e:  mul
    IL_005f:  add
    IL_0060:  ldarg.0
    IL_0061:  ldfld      class [PresentationCore]System.Windows.Media.Media3D.PerspectiveCamera ParallelBoids.MainWindow::camMain
    IL_0066:  callvirt   instance valuetype [PresentationCore]System.Windows.Media.Media3D.Point3D [PresentationCore]System.Windows.Media.Media3D.ProjectionCamera::get_Position()
    IL_006b:  stloc.3
    IL_006c:  ldloca.s   CS$0$0001
    IL_006e:  call       instance float64 [PresentationCore]System.Windows.Media.Media3D.Point3D::get_Y()
    IL_0073:  ldloca.s   diff
    IL_0075:  call       instance float64 [WindowsBase]System.Windows.Vector::get_Y()
    IL_007a:  ldc.r8     0.40000000000000002
    IL_0083:  mul
    IL_0084:  sub
    IL_0085:  ldarg.0
    IL_0086:  ldfld      class [PresentationCore]System.Windows.Media.Media3D.PerspectiveCamera ParallelBoids.MainWindow::camMain
    IL_008b:  callvirt   instance valuetype [PresentationCore]System.Windows.Media.Media3D.Point3D [PresentationCore]System.Windows.Media.Media3D.ProjectionCamera::get_Position()
    IL_0090:  stloc.3
    IL_0091:  ldloca.s   CS$0$0001
    IL_0093:  call       instance float64 [PresentationCore]System.Windows.Media.Media3D.Point3D::get_Z()
    IL_0098:  newobj     instance void [PresentationCore]System.Windows.Media.Media3D.Point3D::.ctor(float64,
                                                                                                     float64,
                                                                                                     float64)
    IL_009d:  callvirt   instance void [PresentationCore]System.Windows.Media.Media3D.ProjectionCamera::set_Position(valuetype [PresentationCore]System.Windows.Media.Media3D.Point3D)
    IL_00a2:  nop
//000336:                 }
    IL_00a3:  nop
//000337:                     // If the middle button was pressed, zoom based on the y difference
//000338:                 else if (e.MiddleButton == MouseButtonState.Pressed)
//000339:                 {
//000340:                     Zoom((int)diff.Y);
//000341:                 }
//000342: 
//000343:                 // Store the new position
//000344:                 _lastMousePosition = newPosition;
//000345:             }
//000346:         }
//000347: 
//000348:         /// <summary>Zoom in or out based on the specified degree of zoom.</summary>
//000349:         /// <param name="amountOfChange">Amount to zoom in (positive) or out (negative).</param>
//000350:         private void Zoom(int amountOfChange)
//000351:         {
//000352:             const int ZOOM_FACTOR = 3;
//000353:             camMain.Position = Point3D.Add(camMain.Position, camMain.LookDirection * amountOfChange * ZOOM_FACTOR);
//000354:         }
//000355:         #endregion
//000356: 
//000357:         #region Step and Render
//000358:         /// <summary>Runs the rendering loop.</summary>
//000359:         private void RenderUpdateLoop()
//000360:         {
//000361:             // Loop forever...
//000362:             while (true)
//000363:             {
//000364:                 // Wait to receive a signal that we should render another frame
//000365:                 m_renderSignal.WaitOne();
//000366: 
//000367:                 // Start timing.
//000368:                 m_frameStopwatch.Restart();
//000369: 
//000370:                 // Update the positions and velocities of all of the boids.
//000371:                 StepBoids();
//000372: 
//000373:                 // Update our rendering stats for display to the user
//000374:                 m_totalRenderingMillisecondsSinceLastUserPresentation += m_frameStopwatch.ElapsedMilliseconds;
//000375:                 m_numRendersSinceLastUserPresentation++;
//000376: 
//000377:                 // Render the boids to the UI
//000378:                 Dispatcher.Invoke((Action)RenderBoids, DispatcherPriority.Send, null);
//000379:             }
//000380:         }
//000381: 
//000382:         /// <summary>Step the boids one step, updating their velocities and positions.</summary>
//000383:         private void StepBoids()
//000384:         {
//000385:             // Store the current velocities and positions so that we can operate on an immutable copy
//000386:             foreach (var boid in m_boidModels) boid.StorePositionAndVelocityIntoPrevious();
//000387: 
//000388:             // For each boid, analyze how the various boid rules influence its velocity and position,
//000389:             // then store this new information.  After this step, we'll be able to render the boids.
//000390:             Parallel.ForEach(m_boidModels, m_parallelOptions, boid =>
//000391:             {
//000392:                 var v1_2_3 = PrimaryRules_1_2_3(boid); // weights factored in already in PrimaryRules
//000393:                 var v4 = m_rule4Weight * Rule4_EncourageStayingWithinAviary(boid);
//000394:                 var v5 = m_rule5Weight * Rule5_TendendcyTowardsHome(boid);
//000395: 
//000396:                 boid.Velocity = BoundVelocity(boid.PreviousVelocity + v1_2_3 + v4 + v5, m_speedLimit);
//000397:                 boid.Velocity.Normalize();
//000398: 
//000399:                 var tmpPosition = boid.PreviousPosition + boid.Velocity;
//000400:                 if (tmpPosition.Y >= 0) boid.Position = tmpPosition;
//000401:             });
//000402:         }
//000403: 
//000404:         /// <summary>Render the boids.</summary>
//000405:         private void RenderBoids()
//000406:         {
//000407:             // Make sure the boids are all positioned and pointing correctly
//000408:             foreach (var boid in m_boidModels) boid.TransformByPositionAndVelocity();
//000409: 
//000410:             // Every once in a while, update the user-displayed stats on timings
//000411:             var now = DateTimeOffset.Now;
//000412:             if (now >= m_nextUserPresentation)
//000413:             {
//000414:                 Title = string.Format("Procs: {0}, Time: {1:F2}", m_parallelOptions.MaxDegreeOfParallelism, 
//000415:                     m_numRendersSinceLastUserPresentation > 0 ? 
//000416:                     m_totalRenderingMillisecondsSinceLastUserPresentation / (double)m_numRendersSinceLastUserPresentation : 
//000417:                     0);
//000418:                 m_nextUserPresentation = now.AddSeconds(1);
//000419:                 m_numRendersSinceLastUserPresentation = 0;
//000420:                 m_totalRenderingMillisecondsSinceLastUserPresentation = 0;
//000421:             }
//000422: 
//000423:             // If we're in auto-panning mode, move the camera appropriately
//000424:             if (m_autoPanCamera)
//000425:             {
//000426:                 // Compute the maximum Z value of all of the boids and the center of their mass
//000427:                 double maxZ = double.MinValue;
//000428:                 Vector3D totalPos = new Vector3D();
//000429:                 foreach (var boid in m_boidModels)
//000430:                 {
//000431:                     if (boid.Position.Z > maxZ) maxZ = boid.Position.Z;
//000432:                     totalPos += boid.Position;
//000433:                 }
//000434:                 var newCameraPos = totalPos / m_boidModels.Length;
//000435:                 
//000436:                 // Move the camera to point at the center of the boids, a ways back from the max boid's Z
//000437:                 const int CAMERA_DISTANCE_FROM_MAXZ = 100;
//000438:                 const double CAMERA_SPEED_LIMIT = .01;
//000439:                 var newPos = new Point3D(newCameraPos.X, newCameraPos.Y, maxZ + CAMERA_DISTANCE_FROM_MAXZ);
//000440:                 var cameraVelocity = newPos - camMain.Position;
//000441:                 camMain.Position = camMain.Position + (cameraVelocity * CAMERA_SPEED_LIMIT);
//000442:             }
//000443:         }
//000444:         #endregion
//000445: 
//000446:         #region Boid Rules
//000447:         /// <summary>Run the three primary rules of boidom.</summary>
//000448:         /// <param name="boid">The boid to process.</param>
//000449:         /// <returns>The velocity vector resulting from the three primary rules and their associated weights.</returns>
//000450:         private Vector3D PrimaryRules_1_2_3(Boid boid)
//000451:         {
//000452:             int numNearby = 0;
//000453:             Vector3D summedPosition = new Vector3D();
//000454:             Vector3D summedVelocity = new Vector3D();
//000455:             Vector3D summedSeparation = new Vector3D();
//000456: 
//000457:             // For rule #1, we want the boid to fly towards the center of all of those in its neighborhood.
//000458:             // We find all of those boids, average their positions, and create a velocity vector to move the
//000459:             // boid a bit of the way there.
//000460: 
//000461:             // For rule #2, we want the boid to move away from each other boid it's a bit too close to.
//000462:             // Find all of those boids in its immediate vicinity, and push it away.
//000463: 
//000464:             // For rule #3, we want the boid to match velocities with those boids in its neighborhood.
//000465:             // Sum their velocities, find the average, and move this boid's velocity a bit in that direction.
//000466: 
//000467:             foreach (var other in m_boidModels)
//000468:             {
//000469:                 if (other != boid && 
//000470:                     (other.PreviousPosition - boid.PreviousPosition).Length <= NEIGHBORHOOD_SIZE &&
//000471:                     boid.ComputeAngle(other) <= 135)
//000472:                 {
//000473:                     summedPosition += other.PreviousPosition;
//000474:                     summedVelocity += other.PreviousVelocity;
//000475:                     numNearby++;
//000476: 
//000477:                     if ((other.PreviousPosition - boid.PreviousPosition).Length < MIN_DISTANCE_FROM_NEIGHBOR)
//000478:                     {
//000479:                         summedSeparation -= (other.PreviousPosition - boid.PreviousPosition);
//000480:                     }
//000481:                 }
//000482:             }
//000483: 
//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
//000485:             var rule2_separateFromNearby = summedSeparation;
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
//000487: 
//000488:             return
//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
//000499:             var v = new Vector3D();
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_00a4:  br.s       IL_00c7

//000338:                 else if (e.MiddleButton == MouseButtonState.Pressed)
    IL_00a6:  ldarg.2
    IL_00a7:  callvirt   instance valuetype [PresentationCore]System.Windows.Input.MouseButtonState [PresentationCore]System.Windows.Input.MouseEventArgs::get_MiddleButton()
    IL_00ac:  ldc.i4.1
    IL_00ad:  ceq
    IL_00af:  ldc.i4.0
    IL_00b0:  ceq
    IL_00b2:  stloc.2
//000339:                 {
//000340:                     Zoom((int)diff.Y);
//000341:                 }
//000342: 
//000343:                 // Store the new position
//000344:                 _lastMousePosition = newPosition;
//000345:             }
//000346:         }
//000347: 
//000348:         /// <summary>Zoom in or out based on the specified degree of zoom.</summary>
//000349:         /// <param name="amountOfChange">Amount to zoom in (positive) or out (negative).</param>
//000350:         private void Zoom(int amountOfChange)
//000351:         {
//000352:             const int ZOOM_FACTOR = 3;
//000353:             camMain.Position = Point3D.Add(camMain.Position, camMain.LookDirection * amountOfChange * ZOOM_FACTOR);
//000354:         }
//000355:         #endregion
//000356: 
//000357:         #region Step and Render
//000358:         /// <summary>Runs the rendering loop.</summary>
//000359:         private void RenderUpdateLoop()
//000360:         {
//000361:             // Loop forever...
//000362:             while (true)
//000363:             {
//000364:                 // Wait to receive a signal that we should render another frame
//000365:                 m_renderSignal.WaitOne();
//000366: 
//000367:                 // Start timing.
//000368:                 m_frameStopwatch.Restart();
//000369: 
//000370:                 // Update the positions and velocities of all of the boids.
//000371:                 StepBoids();
//000372: 
//000373:                 // Update our rendering stats for display to the user
//000374:                 m_totalRenderingMillisecondsSinceLastUserPresentation += m_frameStopwatch.ElapsedMilliseconds;
//000375:                 m_numRendersSinceLastUserPresentation++;
//000376: 
//000377:                 // Render the boids to the UI
//000378:                 Dispatcher.Invoke((Action)RenderBoids, DispatcherPriority.Send, null);
//000379:             }
//000380:         }
//000381: 
//000382:         /// <summary>Step the boids one step, updating their velocities and positions.</summary>
//000383:         private void StepBoids()
//000384:         {
//000385:             // Store the current velocities and positions so that we can operate on an immutable copy
//000386:             foreach (var boid in m_boidModels) boid.StorePositionAndVelocityIntoPrevious();
//000387: 
//000388:             // For each boid, analyze how the various boid rules influence its velocity and position,
//000389:             // then store this new information.  After this step, we'll be able to render the boids.
//000390:             Parallel.ForEach(m_boidModels, m_parallelOptions, boid =>
//000391:             {
//000392:                 var v1_2_3 = PrimaryRules_1_2_3(boid); // weights factored in already in PrimaryRules
//000393:                 var v4 = m_rule4Weight * Rule4_EncourageStayingWithinAviary(boid);
//000394:                 var v5 = m_rule5Weight * Rule5_TendendcyTowardsHome(boid);
//000395: 
//000396:                 boid.Velocity = BoundVelocity(boid.PreviousVelocity + v1_2_3 + v4 + v5, m_speedLimit);
//000397:                 boid.Velocity.Normalize();
//000398: 
//000399:                 var tmpPosition = boid.PreviousPosition + boid.Velocity;
//000400:                 if (tmpPosition.Y >= 0) boid.Position = tmpPosition;
//000401:             });
//000402:         }
//000403: 
//000404:         /// <summary>Render the boids.</summary>
//000405:         private void RenderBoids()
//000406:         {
//000407:             // Make sure the boids are all positioned and pointing correctly
//000408:             foreach (var boid in m_boidModels) boid.TransformByPositionAndVelocity();
//000409: 
//000410:             // Every once in a while, update the user-displayed stats on timings
//000411:             var now = DateTimeOffset.Now;
//000412:             if (now >= m_nextUserPresentation)
//000413:             {
//000414:                 Title = string.Format("Procs: {0}, Time: {1:F2}", m_parallelOptions.MaxDegreeOfParallelism, 
//000415:                     m_numRendersSinceLastUserPresentation > 0 ? 
//000416:                     m_totalRenderingMillisecondsSinceLastUserPresentation / (double)m_numRendersSinceLastUserPresentation : 
//000417:                     0);
//000418:                 m_nextUserPresentation = now.AddSeconds(1);
//000419:                 m_numRendersSinceLastUserPresentation = 0;
//000420:                 m_totalRenderingMillisecondsSinceLastUserPresentation = 0;
//000421:             }
//000422: 
//000423:             // If we're in auto-panning mode, move the camera appropriately
//000424:             if (m_autoPanCamera)
//000425:             {
//000426:                 // Compute the maximum Z value of all of the boids and the center of their mass
//000427:                 double maxZ = double.MinValue;
//000428:                 Vector3D totalPos = new Vector3D();
//000429:                 foreach (var boid in m_boidModels)
//000430:                 {
//000431:                     if (boid.Position.Z > maxZ) maxZ = boid.Position.Z;
//000432:                     totalPos += boid.Position;
//000433:                 }
//000434:                 var newCameraPos = totalPos / m_boidModels.Length;
//000435:                 
//000436:                 // Move the camera to point at the center of the boids, a ways back from the max boid's Z
//000437:                 const int CAMERA_DISTANCE_FROM_MAXZ = 100;
//000438:                 const double CAMERA_SPEED_LIMIT = .01;
//000439:                 var newPos = new Point3D(newCameraPos.X, newCameraPos.Y, maxZ + CAMERA_DISTANCE_FROM_MAXZ);
//000440:                 var cameraVelocity = newPos - camMain.Position;
//000441:                 camMain.Position = camMain.Position + (cameraVelocity * CAMERA_SPEED_LIMIT);
//000442:             }
//000443:         }
//000444:         #endregion
//000445: 
//000446:         #region Boid Rules
//000447:         /// <summary>Run the three primary rules of boidom.</summary>
//000448:         /// <param name="boid">The boid to process.</param>
//000449:         /// <returns>The velocity vector resulting from the three primary rules and their associated weights.</returns>
//000450:         private Vector3D PrimaryRules_1_2_3(Boid boid)
//000451:         {
//000452:             int numNearby = 0;
//000453:             Vector3D summedPosition = new Vector3D();
//000454:             Vector3D summedVelocity = new Vector3D();
//000455:             Vector3D summedSeparation = new Vector3D();
//000456: 
//000457:             // For rule #1, we want the boid to fly towards the center of all of those in its neighborhood.
//000458:             // We find all of those boids, average their positions, and create a velocity vector to move the
//000459:             // boid a bit of the way there.
//000460: 
//000461:             // For rule #2, we want the boid to move away from each other boid it's a bit too close to.
//000462:             // Find all of those boids in its immediate vicinity, and push it away.
//000463: 
//000464:             // For rule #3, we want the boid to match velocities with those boids in its neighborhood.
//000465:             // Sum their velocities, find the average, and move this boid's velocity a bit in that direction.
//000466: 
//000467:             foreach (var other in m_boidModels)
//000468:             {
//000469:                 if (other != boid && 
//000470:                     (other.PreviousPosition - boid.PreviousPosition).Length <= NEIGHBORHOOD_SIZE &&
//000471:                     boid.ComputeAngle(other) <= 135)
//000472:                 {
//000473:                     summedPosition += other.PreviousPosition;
//000474:                     summedVelocity += other.PreviousVelocity;
//000475:                     numNearby++;
//000476: 
//000477:                     if ((other.PreviousPosition - boid.PreviousPosition).Length < MIN_DISTANCE_FROM_NEIGHBOR)
//000478:                     {
//000479:                         summedSeparation -= (other.PreviousPosition - boid.PreviousPosition);
//000480:                     }
//000481:                 }
//000482:             }
//000483: 
//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
//000485:             var rule2_separateFromNearby = summedSeparation;
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
//000487: 
//000488:             return
//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
//000499:             var v = new Vector3D();
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_00b3:  ldloc.2
    IL_00b4:  brtrue.s   IL_00c7

//000339:                 {
    IL_00b6:  nop
//000340:                     Zoom((int)diff.Y);
    IL_00b7:  ldarg.0
    IL_00b8:  ldloca.s   diff
    IL_00ba:  call       instance float64 [WindowsBase]System.Windows.Vector::get_Y()
    IL_00bf:  conv.i4
    IL_00c0:  call       instance void ParallelBoids.MainWindow::Zoom(int32)
    IL_00c5:  nop
//000341:                 }
    IL_00c6:  nop
//000342: 
//000343:                 // Store the new position
//000344:                 _lastMousePosition = newPosition;
    IL_00c7:  ldarg.0
    IL_00c8:  ldloc.0
    IL_00c9:  stfld      valuetype [WindowsBase]System.Windows.Point ParallelBoids.MainWindow::_lastMousePosition
//000345:             }
    IL_00ce:  nop
//000346:         }
    IL_00cf:  ret
  } // end of method MainWindow::Window_MouseMove

  .method private hidebysig instance void 
          Zoom(int32 amountOfChange) cil managed
  {
    // Code size       62 (0x3e)
    .maxstack  8
//000347: 
//000348:         /// <summary>Zoom in or out based on the specified degree of zoom.</summary>
//000349:         /// <param name="amountOfChange">Amount to zoom in (positive) or out (negative).</param>
//000350:         private void Zoom(int amountOfChange)
//000351:         {
    IL_0000:  nop
//000352:             const int ZOOM_FACTOR = 3;
//000353:             camMain.Position = Point3D.Add(camMain.Position, camMain.LookDirection * amountOfChange * ZOOM_FACTOR);
    IL_0001:  ldarg.0
    IL_0002:  ldfld      class [PresentationCore]System.Windows.Media.Media3D.PerspectiveCamera ParallelBoids.MainWindow::camMain
    IL_0007:  ldarg.0
    IL_0008:  ldfld      class [PresentationCore]System.Windows.Media.Media3D.PerspectiveCamera ParallelBoids.MainWindow::camMain
    IL_000d:  callvirt   instance valuetype [PresentationCore]System.Windows.Media.Media3D.Point3D [PresentationCore]System.Windows.Media.Media3D.ProjectionCamera::get_Position()
    IL_0012:  ldarg.0
    IL_0013:  ldfld      class [PresentationCore]System.Windows.Media.Media3D.PerspectiveCamera ParallelBoids.MainWindow::camMain
    IL_0018:  callvirt   instance valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D [PresentationCore]System.Windows.Media.Media3D.ProjectionCamera::get_LookDirection()
    IL_001d:  ldarg.1
    IL_001e:  conv.r8
    IL_001f:  call       valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D [PresentationCore]System.Windows.Media.Media3D.Vector3D::op_Multiply(valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D,
                                                                                                                                                                float64)
    IL_0024:  ldc.r8     3.
    IL_002d:  call       valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D [PresentationCore]System.Windows.Media.Media3D.Vector3D::op_Multiply(valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D,
                                                                                                                                                                float64)
    IL_0032:  call       valuetype [PresentationCore]System.Windows.Media.Media3D.Point3D [PresentationCore]System.Windows.Media.Media3D.Point3D::Add(valuetype [PresentationCore]System.Windows.Media.Media3D.Point3D,
                                                                                                                                                      valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D)
    IL_0037:  callvirt   instance void [PresentationCore]System.Windows.Media.Media3D.ProjectionCamera::set_Position(valuetype [PresentationCore]System.Windows.Media.Media3D.Point3D)
    IL_003c:  nop
//000354:         }
    IL_003d:  ret
  } // end of method MainWindow::Zoom

  .method private hidebysig instance void 
          RenderUpdateLoop() cil managed
  {
    // Code size       105 (0x69)
    .maxstack  4
    .locals init ([0] bool CS$4$0000)
//000355:         #endregion
//000356: 
//000357:         #region Step and Render
//000358:         /// <summary>Runs the rendering loop.</summary>
//000359:         private void RenderUpdateLoop()
//000360:         {
    IL_0000:  nop
//000361:             // Loop forever...
//000362:             while (true)
//000363:             {
//000364:                 // Wait to receive a signal that we should render another frame
//000365:                 m_renderSignal.WaitOne();
//000366: 
//000367:                 // Start timing.
//000368:                 m_frameStopwatch.Restart();
//000369: 
//000370:                 // Update the positions and velocities of all of the boids.
//000371:                 StepBoids();
//000372: 
//000373:                 // Update our rendering stats for display to the user
//000374:                 m_totalRenderingMillisecondsSinceLastUserPresentation += m_frameStopwatch.ElapsedMilliseconds;
//000375:                 m_numRendersSinceLastUserPresentation++;
//000376: 
//000377:                 // Render the boids to the UI
//000378:                 Dispatcher.Invoke((Action)RenderBoids, DispatcherPriority.Send, null);
//000379:             }
//000380:         }
//000381: 
//000382:         /// <summary>Step the boids one step, updating their velocities and positions.</summary>
//000383:         private void StepBoids()
//000384:         {
//000385:             // Store the current velocities and positions so that we can operate on an immutable copy
//000386:             foreach (var boid in m_boidModels) boid.StorePositionAndVelocityIntoPrevious();
//000387: 
//000388:             // For each boid, analyze how the various boid rules influence its velocity and position,
//000389:             // then store this new information.  After this step, we'll be able to render the boids.
//000390:             Parallel.ForEach(m_boidModels, m_parallelOptions, boid =>
//000391:             {
//000392:                 var v1_2_3 = PrimaryRules_1_2_3(boid); // weights factored in already in PrimaryRules
//000393:                 var v4 = m_rule4Weight * Rule4_EncourageStayingWithinAviary(boid);
//000394:                 var v5 = m_rule5Weight * Rule5_TendendcyTowardsHome(boid);
//000395: 
//000396:                 boid.Velocity = BoundVelocity(boid.PreviousVelocity + v1_2_3 + v4 + v5, m_speedLimit);
//000397:                 boid.Velocity.Normalize();
//000398: 
//000399:                 var tmpPosition = boid.PreviousPosition + boid.Velocity;
//000400:                 if (tmpPosition.Y >= 0) boid.Position = tmpPosition;
//000401:             });
//000402:         }
//000403: 
//000404:         /// <summary>Render the boids.</summary>
//000405:         private void RenderBoids()
//000406:         {
//000407:             // Make sure the boids are all positioned and pointing correctly
//000408:             foreach (var boid in m_boidModels) boid.TransformByPositionAndVelocity();
//000409: 
//000410:             // Every once in a while, update the user-displayed stats on timings
//000411:             var now = DateTimeOffset.Now;
//000412:             if (now >= m_nextUserPresentation)
//000413:             {
//000414:                 Title = string.Format("Procs: {0}, Time: {1:F2}", m_parallelOptions.MaxDegreeOfParallelism, 
//000415:                     m_numRendersSinceLastUserPresentation > 0 ? 
//000416:                     m_totalRenderingMillisecondsSinceLastUserPresentation / (double)m_numRendersSinceLastUserPresentation : 
//000417:                     0);
//000418:                 m_nextUserPresentation = now.AddSeconds(1);
//000419:                 m_numRendersSinceLastUserPresentation = 0;
//000420:                 m_totalRenderingMillisecondsSinceLastUserPresentation = 0;
//000421:             }
//000422: 
//000423:             // If we're in auto-panning mode, move the camera appropriately
//000424:             if (m_autoPanCamera)
//000425:             {
//000426:                 // Compute the maximum Z value of all of the boids and the center of their mass
//000427:                 double maxZ = double.MinValue;
//000428:                 Vector3D totalPos = new Vector3D();
//000429:                 foreach (var boid in m_boidModels)
//000430:                 {
//000431:                     if (boid.Position.Z > maxZ) maxZ = boid.Position.Z;
//000432:                     totalPos += boid.Position;
//000433:                 }
//000434:                 var newCameraPos = totalPos / m_boidModels.Length;
//000435:                 
//000436:                 // Move the camera to point at the center of the boids, a ways back from the max boid's Z
//000437:                 const int CAMERA_DISTANCE_FROM_MAXZ = 100;
//000438:                 const double CAMERA_SPEED_LIMIT = .01;
//000439:                 var newPos = new Point3D(newCameraPos.X, newCameraPos.Y, maxZ + CAMERA_DISTANCE_FROM_MAXZ);
//000440:                 var cameraVelocity = newPos - camMain.Position;
//000441:                 camMain.Position = camMain.Position + (cameraVelocity * CAMERA_SPEED_LIMIT);
//000442:             }
//000443:         }
//000444:         #endregion
//000445: 
//000446:         #region Boid Rules
//000447:         /// <summary>Run the three primary rules of boidom.</summary>
//000448:         /// <param name="boid">The boid to process.</param>
//000449:         /// <returns>The velocity vector resulting from the three primary rules and their associated weights.</returns>
//000450:         private Vector3D PrimaryRules_1_2_3(Boid boid)
//000451:         {
//000452:             int numNearby = 0;
//000453:             Vector3D summedPosition = new Vector3D();
//000454:             Vector3D summedVelocity = new Vector3D();
//000455:             Vector3D summedSeparation = new Vector3D();
//000456: 
//000457:             // For rule #1, we want the boid to fly towards the center of all of those in its neighborhood.
//000458:             // We find all of those boids, average their positions, and create a velocity vector to move the
//000459:             // boid a bit of the way there.
//000460: 
//000461:             // For rule #2, we want the boid to move away from each other boid it's a bit too close to.
//000462:             // Find all of those boids in its immediate vicinity, and push it away.
//000463: 
//000464:             // For rule #3, we want the boid to match velocities with those boids in its neighborhood.
//000465:             // Sum their velocities, find the average, and move this boid's velocity a bit in that direction.
//000466: 
//000467:             foreach (var other in m_boidModels)
//000468:             {
//000469:                 if (other != boid && 
//000470:                     (other.PreviousPosition - boid.PreviousPosition).Length <= NEIGHBORHOOD_SIZE &&
//000471:                     boid.ComputeAngle(other) <= 135)
//000472:                 {
//000473:                     summedPosition += other.PreviousPosition;
//000474:                     summedVelocity += other.PreviousVelocity;
//000475:                     numNearby++;
//000476: 
//000477:                     if ((other.PreviousPosition - boid.PreviousPosition).Length < MIN_DISTANCE_FROM_NEIGHBOR)
//000478:                     {
//000479:                         summedSeparation -= (other.PreviousPosition - boid.PreviousPosition);
//000480:                     }
//000481:                 }
//000482:             }
//000483: 
//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
//000485:             var rule2_separateFromNearby = summedSeparation;
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
//000487: 
//000488:             return
//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
//000499:             var v = new Vector3D();
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_0001:  br.s       IL_0065

//000363:             {
    IL_0003:  nop
//000364:                 // Wait to receive a signal that we should render another frame
//000365:                 m_renderSignal.WaitOne();
    IL_0004:  ldarg.0
    IL_0005:  ldfld      class [mscorlib]System.Threading.AutoResetEvent ParallelBoids.MainWindow::m_renderSignal
    IL_000a:  callvirt   instance bool [mscorlib]System.Threading.WaitHandle::WaitOne()
    IL_000f:  pop
//000366: 
//000367:                 // Start timing.
//000368:                 m_frameStopwatch.Restart();
    IL_0010:  ldarg.0
    IL_0011:  ldfld      class [System]System.Diagnostics.Stopwatch ParallelBoids.MainWindow::m_frameStopwatch
    IL_0016:  callvirt   instance void [System]System.Diagnostics.Stopwatch::Restart()
    IL_001b:  nop
//000369: 
//000370:                 // Update the positions and velocities of all of the boids.
//000371:                 StepBoids();
    IL_001c:  ldarg.0
    IL_001d:  call       instance void ParallelBoids.MainWindow::StepBoids()
    IL_0022:  nop
//000372: 
//000373:                 // Update our rendering stats for display to the user
//000374:                 m_totalRenderingMillisecondsSinceLastUserPresentation += m_frameStopwatch.ElapsedMilliseconds;
    IL_0023:  ldarg.0
    IL_0024:  dup
    IL_0025:  ldfld      int64 ParallelBoids.MainWindow::m_totalRenderingMillisecondsSinceLastUserPresentation
    IL_002a:  ldarg.0
    IL_002b:  ldfld      class [System]System.Diagnostics.Stopwatch ParallelBoids.MainWindow::m_frameStopwatch
    IL_0030:  callvirt   instance int64 [System]System.Diagnostics.Stopwatch::get_ElapsedMilliseconds()
    IL_0035:  add
    IL_0036:  stfld      int64 ParallelBoids.MainWindow::m_totalRenderingMillisecondsSinceLastUserPresentation
//000375:                 m_numRendersSinceLastUserPresentation++;
    IL_003b:  ldarg.0
    IL_003c:  dup
    IL_003d:  ldfld      int32 ParallelBoids.MainWindow::m_numRendersSinceLastUserPresentation
    IL_0042:  ldc.i4.1
    IL_0043:  add
    IL_0044:  stfld      int32 ParallelBoids.MainWindow::m_numRendersSinceLastUserPresentation
//000376: 
//000377:                 // Render the boids to the UI
//000378:                 Dispatcher.Invoke((Action)RenderBoids, DispatcherPriority.Send, null);
    IL_0049:  ldarg.0
    IL_004a:  call       instance class [WindowsBase]System.Windows.Threading.Dispatcher [WindowsBase]System.Windows.Threading.DispatcherObject::get_Dispatcher()
    IL_004f:  ldarg.0
    IL_0050:  ldftn      instance void ParallelBoids.MainWindow::RenderBoids()
    IL_0056:  newobj     instance void [mscorlib]System.Action::.ctor(object,
                                                                      native int)
    IL_005b:  ldc.i4.s   10
    IL_005d:  ldnull
    IL_005e:  callvirt   instance object [WindowsBase]System.Windows.Threading.Dispatcher::Invoke(class [mscorlib]System.Delegate,
                                                                                                  valuetype [WindowsBase]System.Windows.Threading.DispatcherPriority,
                                                                                                  object[])
    IL_0063:  pop
//000379:             }
    IL_0064:  nop
//000362:             while (true)
    IL_0065:  ldc.i4.1
    IL_0066:  stloc.0
//000363:             {
//000364:                 // Wait to receive a signal that we should render another frame
//000365:                 m_renderSignal.WaitOne();
//000366: 
//000367:                 // Start timing.
//000368:                 m_frameStopwatch.Restart();
//000369: 
//000370:                 // Update the positions and velocities of all of the boids.
//000371:                 StepBoids();
//000372: 
//000373:                 // Update our rendering stats for display to the user
//000374:                 m_totalRenderingMillisecondsSinceLastUserPresentation += m_frameStopwatch.ElapsedMilliseconds;
//000375:                 m_numRendersSinceLastUserPresentation++;
//000376: 
//000377:                 // Render the boids to the UI
//000378:                 Dispatcher.Invoke((Action)RenderBoids, DispatcherPriority.Send, null);
//000379:             }
//000380:         }
//000381: 
//000382:         /// <summary>Step the boids one step, updating their velocities and positions.</summary>
//000383:         private void StepBoids()
//000384:         {
//000385:             // Store the current velocities and positions so that we can operate on an immutable copy
//000386:             foreach (var boid in m_boidModels) boid.StorePositionAndVelocityIntoPrevious();
//000387: 
//000388:             // For each boid, analyze how the various boid rules influence its velocity and position,
//000389:             // then store this new information.  After this step, we'll be able to render the boids.
//000390:             Parallel.ForEach(m_boidModels, m_parallelOptions, boid =>
//000391:             {
//000392:                 var v1_2_3 = PrimaryRules_1_2_3(boid); // weights factored in already in PrimaryRules
//000393:                 var v4 = m_rule4Weight * Rule4_EncourageStayingWithinAviary(boid);
//000394:                 var v5 = m_rule5Weight * Rule5_TendendcyTowardsHome(boid);
//000395: 
//000396:                 boid.Velocity = BoundVelocity(boid.PreviousVelocity + v1_2_3 + v4 + v5, m_speedLimit);
//000397:                 boid.Velocity.Normalize();
//000398: 
//000399:                 var tmpPosition = boid.PreviousPosition + boid.Velocity;
//000400:                 if (tmpPosition.Y >= 0) boid.Position = tmpPosition;
//000401:             });
//000402:         }
//000403: 
//000404:         /// <summary>Render the boids.</summary>
//000405:         private void RenderBoids()
//000406:         {
//000407:             // Make sure the boids are all positioned and pointing correctly
//000408:             foreach (var boid in m_boidModels) boid.TransformByPositionAndVelocity();
//000409: 
//000410:             // Every once in a while, update the user-displayed stats on timings
//000411:             var now = DateTimeOffset.Now;
//000412:             if (now >= m_nextUserPresentation)
//000413:             {
//000414:                 Title = string.Format("Procs: {0}, Time: {1:F2}", m_parallelOptions.MaxDegreeOfParallelism, 
//000415:                     m_numRendersSinceLastUserPresentation > 0 ? 
//000416:                     m_totalRenderingMillisecondsSinceLastUserPresentation / (double)m_numRendersSinceLastUserPresentation : 
//000417:                     0);
//000418:                 m_nextUserPresentation = now.AddSeconds(1);
//000419:                 m_numRendersSinceLastUserPresentation = 0;
//000420:                 m_totalRenderingMillisecondsSinceLastUserPresentation = 0;
//000421:             }
//000422: 
//000423:             // If we're in auto-panning mode, move the camera appropriately
//000424:             if (m_autoPanCamera)
//000425:             {
//000426:                 // Compute the maximum Z value of all of the boids and the center of their mass
//000427:                 double maxZ = double.MinValue;
//000428:                 Vector3D totalPos = new Vector3D();
//000429:                 foreach (var boid in m_boidModels)
//000430:                 {
//000431:                     if (boid.Position.Z > maxZ) maxZ = boid.Position.Z;
//000432:                     totalPos += boid.Position;
//000433:                 }
//000434:                 var newCameraPos = totalPos / m_boidModels.Length;
//000435:                 
//000436:                 // Move the camera to point at the center of the boids, a ways back from the max boid's Z
//000437:                 const int CAMERA_DISTANCE_FROM_MAXZ = 100;
//000438:                 const double CAMERA_SPEED_LIMIT = .01;
//000439:                 var newPos = new Point3D(newCameraPos.X, newCameraPos.Y, maxZ + CAMERA_DISTANCE_FROM_MAXZ);
//000440:                 var cameraVelocity = newPos - camMain.Position;
//000441:                 camMain.Position = camMain.Position + (cameraVelocity * CAMERA_SPEED_LIMIT);
//000442:             }
//000443:         }
//000444:         #endregion
//000445: 
//000446:         #region Boid Rules
//000447:         /// <summary>Run the three primary rules of boidom.</summary>
//000448:         /// <param name="boid">The boid to process.</param>
//000449:         /// <returns>The velocity vector resulting from the three primary rules and their associated weights.</returns>
//000450:         private Vector3D PrimaryRules_1_2_3(Boid boid)
//000451:         {
//000452:             int numNearby = 0;
//000453:             Vector3D summedPosition = new Vector3D();
//000454:             Vector3D summedVelocity = new Vector3D();
//000455:             Vector3D summedSeparation = new Vector3D();
//000456: 
//000457:             // For rule #1, we want the boid to fly towards the center of all of those in its neighborhood.
//000458:             // We find all of those boids, average their positions, and create a velocity vector to move the
//000459:             // boid a bit of the way there.
//000460: 
//000461:             // For rule #2, we want the boid to move away from each other boid it's a bit too close to.
//000462:             // Find all of those boids in its immediate vicinity, and push it away.
//000463: 
//000464:             // For rule #3, we want the boid to match velocities with those boids in its neighborhood.
//000465:             // Sum their velocities, find the average, and move this boid's velocity a bit in that direction.
//000466: 
//000467:             foreach (var other in m_boidModels)
//000468:             {
//000469:                 if (other != boid && 
//000470:                     (other.PreviousPosition - boid.PreviousPosition).Length <= NEIGHBORHOOD_SIZE &&
//000471:                     boid.ComputeAngle(other) <= 135)
//000472:                 {
//000473:                     summedPosition += other.PreviousPosition;
//000474:                     summedVelocity += other.PreviousVelocity;
//000475:                     numNearby++;
//000476: 
//000477:                     if ((other.PreviousPosition - boid.PreviousPosition).Length < MIN_DISTANCE_FROM_NEIGHBOR)
//000478:                     {
//000479:                         summedSeparation -= (other.PreviousPosition - boid.PreviousPosition);
//000480:                     }
//000481:                 }
//000482:             }
//000483: 
//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
//000485:             var rule2_separateFromNearby = summedSeparation;
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
//000487: 
//000488:             return
//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
//000499:             var v = new Vector3D();
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_0067:  br.s       IL_0003
  } // end of method MainWindow::RenderUpdateLoop

  .method private hidebysig instance void 
          StepBoids() cil managed
  {
    // Code size       69 (0x45)
    .maxstack  5
    .locals init ([0] class ParallelBoids.Boid boid,
             [1] class ParallelBoids.Boid[] CS$6$0000,
             [2] int32 CS$7$0001,
             [3] bool CS$4$0002)
//000384:         {
    IL_0000:  nop
//000385:             // Store the current velocities and positions so that we can operate on an immutable copy
//000386:             foreach (var boid in m_boidModels) boid.StorePositionAndVelocityIntoPrevious();
    IL_0001:  nop
    IL_0002:  ldarg.0
    IL_0003:  ldfld      class ParallelBoids.Boid[] ParallelBoids.MainWindow::m_boidModels
    IL_0008:  stloc.1
//000387: 
//000388:             // For each boid, analyze how the various boid rules influence its velocity and position,
//000389:             // then store this new information.  After this step, we'll be able to render the boids.
//000390:             Parallel.ForEach(m_boidModels, m_parallelOptions, boid =>
//000391:             {
//000392:                 var v1_2_3 = PrimaryRules_1_2_3(boid); // weights factored in already in PrimaryRules
//000393:                 var v4 = m_rule4Weight * Rule4_EncourageStayingWithinAviary(boid);
//000394:                 var v5 = m_rule5Weight * Rule5_TendendcyTowardsHome(boid);
//000395: 
//000396:                 boid.Velocity = BoundVelocity(boid.PreviousVelocity + v1_2_3 + v4 + v5, m_speedLimit);
//000397:                 boid.Velocity.Normalize();
//000398: 
//000399:                 var tmpPosition = boid.PreviousPosition + boid.Velocity;
//000400:                 if (tmpPosition.Y >= 0) boid.Position = tmpPosition;
//000401:             });
//000402:         }
//000403: 
//000404:         /// <summary>Render the boids.</summary>
//000405:         private void RenderBoids()
//000406:         {
//000407:             // Make sure the boids are all positioned and pointing correctly
//000408:             foreach (var boid in m_boidModels) boid.TransformByPositionAndVelocity();
//000409: 
//000410:             // Every once in a while, update the user-displayed stats on timings
//000411:             var now = DateTimeOffset.Now;
//000412:             if (now >= m_nextUserPresentation)
//000413:             {
//000414:                 Title = string.Format("Procs: {0}, Time: {1:F2}", m_parallelOptions.MaxDegreeOfParallelism, 
//000415:                     m_numRendersSinceLastUserPresentation > 0 ? 
//000416:                     m_totalRenderingMillisecondsSinceLastUserPresentation / (double)m_numRendersSinceLastUserPresentation : 
//000417:                     0);
//000418:                 m_nextUserPresentation = now.AddSeconds(1);
//000419:                 m_numRendersSinceLastUserPresentation = 0;
//000420:                 m_totalRenderingMillisecondsSinceLastUserPresentation = 0;
//000421:             }
//000422: 
//000423:             // If we're in auto-panning mode, move the camera appropriately
//000424:             if (m_autoPanCamera)
//000425:             {
//000426:                 // Compute the maximum Z value of all of the boids and the center of their mass
//000427:                 double maxZ = double.MinValue;
//000428:                 Vector3D totalPos = new Vector3D();
//000429:                 foreach (var boid in m_boidModels)
//000430:                 {
//000431:                     if (boid.Position.Z > maxZ) maxZ = boid.Position.Z;
//000432:                     totalPos += boid.Position;
//000433:                 }
//000434:                 var newCameraPos = totalPos / m_boidModels.Length;
//000435:                 
//000436:                 // Move the camera to point at the center of the boids, a ways back from the max boid's Z
//000437:                 const int CAMERA_DISTANCE_FROM_MAXZ = 100;
//000438:                 const double CAMERA_SPEED_LIMIT = .01;
//000439:                 var newPos = new Point3D(newCameraPos.X, newCameraPos.Y, maxZ + CAMERA_DISTANCE_FROM_MAXZ);
//000440:                 var cameraVelocity = newPos - camMain.Position;
//000441:                 camMain.Position = camMain.Position + (cameraVelocity * CAMERA_SPEED_LIMIT);
//000442:             }
//000443:         }
//000444:         #endregion
//000445: 
//000446:         #region Boid Rules
//000447:         /// <summary>Run the three primary rules of boidom.</summary>
//000448:         /// <param name="boid">The boid to process.</param>
//000449:         /// <returns>The velocity vector resulting from the three primary rules and their associated weights.</returns>
//000450:         private Vector3D PrimaryRules_1_2_3(Boid boid)
//000451:         {
//000452:             int numNearby = 0;
//000453:             Vector3D summedPosition = new Vector3D();
//000454:             Vector3D summedVelocity = new Vector3D();
//000455:             Vector3D summedSeparation = new Vector3D();
//000456: 
//000457:             // For rule #1, we want the boid to fly towards the center of all of those in its neighborhood.
//000458:             // We find all of those boids, average their positions, and create a velocity vector to move the
//000459:             // boid a bit of the way there.
//000460: 
//000461:             // For rule #2, we want the boid to move away from each other boid it's a bit too close to.
//000462:             // Find all of those boids in its immediate vicinity, and push it away.
//000463: 
//000464:             // For rule #3, we want the boid to match velocities with those boids in its neighborhood.
//000465:             // Sum their velocities, find the average, and move this boid's velocity a bit in that direction.
//000466: 
//000467:             foreach (var other in m_boidModels)
//000468:             {
//000469:                 if (other != boid && 
//000470:                     (other.PreviousPosition - boid.PreviousPosition).Length <= NEIGHBORHOOD_SIZE &&
//000471:                     boid.ComputeAngle(other) <= 135)
//000472:                 {
//000473:                     summedPosition += other.PreviousPosition;
//000474:                     summedVelocity += other.PreviousVelocity;
//000475:                     numNearby++;
//000476: 
//000477:                     if ((other.PreviousPosition - boid.PreviousPosition).Length < MIN_DISTANCE_FROM_NEIGHBOR)
//000478:                     {
//000479:                         summedSeparation -= (other.PreviousPosition - boid.PreviousPosition);
//000480:                     }
//000481:                 }
//000482:             }
//000483: 
//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
//000485:             var rule2_separateFromNearby = summedSeparation;
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
//000487: 
//000488:             return
//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
//000499:             var v = new Vector3D();
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_0009:  ldc.i4.0
    IL_000a:  stloc.2
    IL_000b:  br.s       IL_001c

//000386:             foreach (var boid in m_boidModels) boid.StorePositionAndVelocityIntoPrevious();
    IL_000d:  ldloc.1
    IL_000e:  ldloc.2
    IL_000f:  ldelem.ref
    IL_0010:  stloc.0
    IL_0011:  ldloc.0
    IL_0012:  callvirt   instance void ParallelBoids.Boid::StorePositionAndVelocityIntoPrevious()
    IL_0017:  nop
//000387: 
//000388:             // For each boid, analyze how the various boid rules influence its velocity and position,
//000389:             // then store this new information.  After this step, we'll be able to render the boids.
//000390:             Parallel.ForEach(m_boidModels, m_parallelOptions, boid =>
//000391:             {
//000392:                 var v1_2_3 = PrimaryRules_1_2_3(boid); // weights factored in already in PrimaryRules
//000393:                 var v4 = m_rule4Weight * Rule4_EncourageStayingWithinAviary(boid);
//000394:                 var v5 = m_rule5Weight * Rule5_TendendcyTowardsHome(boid);
//000395: 
//000396:                 boid.Velocity = BoundVelocity(boid.PreviousVelocity + v1_2_3 + v4 + v5, m_speedLimit);
//000397:                 boid.Velocity.Normalize();
//000398: 
//000399:                 var tmpPosition = boid.PreviousPosition + boid.Velocity;
//000400:                 if (tmpPosition.Y >= 0) boid.Position = tmpPosition;
//000401:             });
//000402:         }
//000403: 
//000404:         /// <summary>Render the boids.</summary>
//000405:         private void RenderBoids()
//000406:         {
//000407:             // Make sure the boids are all positioned and pointing correctly
//000408:             foreach (var boid in m_boidModels) boid.TransformByPositionAndVelocity();
//000409: 
//000410:             // Every once in a while, update the user-displayed stats on timings
//000411:             var now = DateTimeOffset.Now;
//000412:             if (now >= m_nextUserPresentation)
//000413:             {
//000414:                 Title = string.Format("Procs: {0}, Time: {1:F2}", m_parallelOptions.MaxDegreeOfParallelism, 
//000415:                     m_numRendersSinceLastUserPresentation > 0 ? 
//000416:                     m_totalRenderingMillisecondsSinceLastUserPresentation / (double)m_numRendersSinceLastUserPresentation : 
//000417:                     0);
//000418:                 m_nextUserPresentation = now.AddSeconds(1);
//000419:                 m_numRendersSinceLastUserPresentation = 0;
//000420:                 m_totalRenderingMillisecondsSinceLastUserPresentation = 0;
//000421:             }
//000422: 
//000423:             // If we're in auto-panning mode, move the camera appropriately
//000424:             if (m_autoPanCamera)
//000425:             {
//000426:                 // Compute the maximum Z value of all of the boids and the center of their mass
//000427:                 double maxZ = double.MinValue;
//000428:                 Vector3D totalPos = new Vector3D();
//000429:                 foreach (var boid in m_boidModels)
//000430:                 {
//000431:                     if (boid.Position.Z > maxZ) maxZ = boid.Position.Z;
//000432:                     totalPos += boid.Position;
//000433:                 }
//000434:                 var newCameraPos = totalPos / m_boidModels.Length;
//000435:                 
//000436:                 // Move the camera to point at the center of the boids, a ways back from the max boid's Z
//000437:                 const int CAMERA_DISTANCE_FROM_MAXZ = 100;
//000438:                 const double CAMERA_SPEED_LIMIT = .01;
//000439:                 var newPos = new Point3D(newCameraPos.X, newCameraPos.Y, maxZ + CAMERA_DISTANCE_FROM_MAXZ);
//000440:                 var cameraVelocity = newPos - camMain.Position;
//000441:                 camMain.Position = camMain.Position + (cameraVelocity * CAMERA_SPEED_LIMIT);
//000442:             }
//000443:         }
//000444:         #endregion
//000445: 
//000446:         #region Boid Rules
//000447:         /// <summary>Run the three primary rules of boidom.</summary>
//000448:         /// <param name="boid">The boid to process.</param>
//000449:         /// <returns>The velocity vector resulting from the three primary rules and their associated weights.</returns>
//000450:         private Vector3D PrimaryRules_1_2_3(Boid boid)
//000451:         {
//000452:             int numNearby = 0;
//000453:             Vector3D summedPosition = new Vector3D();
//000454:             Vector3D summedVelocity = new Vector3D();
//000455:             Vector3D summedSeparation = new Vector3D();
//000456: 
//000457:             // For rule #1, we want the boid to fly towards the center of all of those in its neighborhood.
//000458:             // We find all of those boids, average their positions, and create a velocity vector to move the
//000459:             // boid a bit of the way there.
//000460: 
//000461:             // For rule #2, we want the boid to move away from each other boid it's a bit too close to.
//000462:             // Find all of those boids in its immediate vicinity, and push it away.
//000463: 
//000464:             // For rule #3, we want the boid to match velocities with those boids in its neighborhood.
//000465:             // Sum their velocities, find the average, and move this boid's velocity a bit in that direction.
//000466: 
//000467:             foreach (var other in m_boidModels)
//000468:             {
//000469:                 if (other != boid && 
//000470:                     (other.PreviousPosition - boid.PreviousPosition).Length <= NEIGHBORHOOD_SIZE &&
//000471:                     boid.ComputeAngle(other) <= 135)
//000472:                 {
//000473:                     summedPosition += other.PreviousPosition;
//000474:                     summedVelocity += other.PreviousVelocity;
//000475:                     numNearby++;
//000476: 
//000477:                     if ((other.PreviousPosition - boid.PreviousPosition).Length < MIN_DISTANCE_FROM_NEIGHBOR)
//000478:                     {
//000479:                         summedSeparation -= (other.PreviousPosition - boid.PreviousPosition);
//000480:                     }
//000481:                 }
//000482:             }
//000483: 
//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
//000485:             var rule2_separateFromNearby = summedSeparation;
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
//000487: 
//000488:             return
//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
//000499:             var v = new Vector3D();
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_0018:  ldloc.2
    IL_0019:  ldc.i4.1
    IL_001a:  add
    IL_001b:  stloc.2
//000386:             foreach (var boid in m_boidModels) boid.StorePositionAndVelocityIntoPrevious();
    IL_001c:  ldloc.2
    IL_001d:  ldloc.1
    IL_001e:  ldlen
    IL_001f:  conv.i4
    IL_0020:  clt
    IL_0022:  stloc.3
//000387: 
//000388:             // For each boid, analyze how the various boid rules influence its velocity and position,
//000389:             // then store this new information.  After this step, we'll be able to render the boids.
//000390:             Parallel.ForEach(m_boidModels, m_parallelOptions, boid =>
//000391:             {
//000392:                 var v1_2_3 = PrimaryRules_1_2_3(boid); // weights factored in already in PrimaryRules
//000393:                 var v4 = m_rule4Weight * Rule4_EncourageStayingWithinAviary(boid);
//000394:                 var v5 = m_rule5Weight * Rule5_TendendcyTowardsHome(boid);
//000395: 
//000396:                 boid.Velocity = BoundVelocity(boid.PreviousVelocity + v1_2_3 + v4 + v5, m_speedLimit);
//000397:                 boid.Velocity.Normalize();
//000398: 
//000399:                 var tmpPosition = boid.PreviousPosition + boid.Velocity;
//000400:                 if (tmpPosition.Y >= 0) boid.Position = tmpPosition;
//000401:             });
//000402:         }
//000403: 
//000404:         /// <summary>Render the boids.</summary>
//000405:         private void RenderBoids()
//000406:         {
//000407:             // Make sure the boids are all positioned and pointing correctly
//000408:             foreach (var boid in m_boidModels) boid.TransformByPositionAndVelocity();
//000409: 
//000410:             // Every once in a while, update the user-displayed stats on timings
//000411:             var now = DateTimeOffset.Now;
//000412:             if (now >= m_nextUserPresentation)
//000413:             {
//000414:                 Title = string.Format("Procs: {0}, Time: {1:F2}", m_parallelOptions.MaxDegreeOfParallelism, 
//000415:                     m_numRendersSinceLastUserPresentation > 0 ? 
//000416:                     m_totalRenderingMillisecondsSinceLastUserPresentation / (double)m_numRendersSinceLastUserPresentation : 
//000417:                     0);
//000418:                 m_nextUserPresentation = now.AddSeconds(1);
//000419:                 m_numRendersSinceLastUserPresentation = 0;
//000420:                 m_totalRenderingMillisecondsSinceLastUserPresentation = 0;
//000421:             }
//000422: 
//000423:             // If we're in auto-panning mode, move the camera appropriately
//000424:             if (m_autoPanCamera)
//000425:             {
//000426:                 // Compute the maximum Z value of all of the boids and the center of their mass
//000427:                 double maxZ = double.MinValue;
//000428:                 Vector3D totalPos = new Vector3D();
//000429:                 foreach (var boid in m_boidModels)
//000430:                 {
//000431:                     if (boid.Position.Z > maxZ) maxZ = boid.Position.Z;
//000432:                     totalPos += boid.Position;
//000433:                 }
//000434:                 var newCameraPos = totalPos / m_boidModels.Length;
//000435:                 
//000436:                 // Move the camera to point at the center of the boids, a ways back from the max boid's Z
//000437:                 const int CAMERA_DISTANCE_FROM_MAXZ = 100;
//000438:                 const double CAMERA_SPEED_LIMIT = .01;
//000439:                 var newPos = new Point3D(newCameraPos.X, newCameraPos.Y, maxZ + CAMERA_DISTANCE_FROM_MAXZ);
//000440:                 var cameraVelocity = newPos - camMain.Position;
//000441:                 camMain.Position = camMain.Position + (cameraVelocity * CAMERA_SPEED_LIMIT);
//000442:             }
//000443:         }
//000444:         #endregion
//000445: 
//000446:         #region Boid Rules
//000447:         /// <summary>Run the three primary rules of boidom.</summary>
//000448:         /// <param name="boid">The boid to process.</param>
//000449:         /// <returns>The velocity vector resulting from the three primary rules and their associated weights.</returns>
//000450:         private Vector3D PrimaryRules_1_2_3(Boid boid)
//000451:         {
//000452:             int numNearby = 0;
//000453:             Vector3D summedPosition = new Vector3D();
//000454:             Vector3D summedVelocity = new Vector3D();
//000455:             Vector3D summedSeparation = new Vector3D();
//000456: 
//000457:             // For rule #1, we want the boid to fly towards the center of all of those in its neighborhood.
//000458:             // We find all of those boids, average their positions, and create a velocity vector to move the
//000459:             // boid a bit of the way there.
//000460: 
//000461:             // For rule #2, we want the boid to move away from each other boid it's a bit too close to.
//000462:             // Find all of those boids in its immediate vicinity, and push it away.
//000463: 
//000464:             // For rule #3, we want the boid to match velocities with those boids in its neighborhood.
//000465:             // Sum their velocities, find the average, and move this boid's velocity a bit in that direction.
//000466: 
//000467:             foreach (var other in m_boidModels)
//000468:             {
//000469:                 if (other != boid && 
//000470:                     (other.PreviousPosition - boid.PreviousPosition).Length <= NEIGHBORHOOD_SIZE &&
//000471:                     boid.ComputeAngle(other) <= 135)
//000472:                 {
//000473:                     summedPosition += other.PreviousPosition;
//000474:                     summedVelocity += other.PreviousVelocity;
//000475:                     numNearby++;
//000476: 
//000477:                     if ((other.PreviousPosition - boid.PreviousPosition).Length < MIN_DISTANCE_FROM_NEIGHBOR)
//000478:                     {
//000479:                         summedSeparation -= (other.PreviousPosition - boid.PreviousPosition);
//000480:                     }
//000481:                 }
//000482:             }
//000483: 
//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
//000485:             var rule2_separateFromNearby = summedSeparation;
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
//000487: 
//000488:             return
//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
//000499:             var v = new Vector3D();
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_0023:  ldloc.3
    IL_0024:  brtrue.s   IL_000d

//000390:             Parallel.ForEach(m_boidModels, m_parallelOptions, boid =>
    IL_0026:  ldarg.0
    IL_0027:  ldfld      class ParallelBoids.Boid[] ParallelBoids.MainWindow::m_boidModels
    IL_002c:  ldarg.0
    IL_002d:  ldfld      class [mscorlib]System.Threading.Tasks.ParallelOptions ParallelBoids.MainWindow::m_parallelOptions
    IL_0032:  ldarg.0
    IL_0033:  ldftn      instance void ParallelBoids.MainWindow::'<StepBoids>b__8'(class ParallelBoids.Boid)
    IL_0039:  newobj     instance void class [mscorlib]System.Action`1<class ParallelBoids.Boid>::.ctor(object,
                                                                                                        native int)
    IL_003e:  call       valuetype [mscorlib]System.Threading.Tasks.ParallelLoopResult [mscorlib]System.Threading.Tasks.Parallel::ForEach<class ParallelBoids.Boid>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>,
                                                                                                                                                                    class [mscorlib]System.Threading.Tasks.ParallelOptions,
                                                                                                                                                                    class [mscorlib]System.Action`1<!!0>)
    IL_0043:  pop
//000391:             {
//000392:                 var v1_2_3 = PrimaryRules_1_2_3(boid); // weights factored in already in PrimaryRules
//000393:                 var v4 = m_rule4Weight * Rule4_EncourageStayingWithinAviary(boid);
//000394:                 var v5 = m_rule5Weight * Rule5_TendendcyTowardsHome(boid);
//000395: 
//000396:                 boid.Velocity = BoundVelocity(boid.PreviousVelocity + v1_2_3 + v4 + v5, m_speedLimit);
//000397:                 boid.Velocity.Normalize();
//000398: 
//000399:                 var tmpPosition = boid.PreviousPosition + boid.Velocity;
//000400:                 if (tmpPosition.Y >= 0) boid.Position = tmpPosition;
//000401:             });
//000402:         }
    IL_0044:  ret
  } // end of method MainWindow::StepBoids

  .method private hidebysig instance void 
          RenderBoids() cil managed
  {
    // Code size       438 (0x1b6)
    .maxstack  6
    .locals init ([0] class ParallelBoids.Boid boid,
             [1] valuetype [mscorlib]System.DateTimeOffset now,
             [2] float64 maxZ,
             [3] valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D totalPos,
             [4] valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D newCameraPos,
             [5] valuetype [PresentationCore]System.Windows.Media.Media3D.Point3D newPos,
             [6] valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D cameraVelocity,
             [7] class ParallelBoids.Boid[] CS$6$0000,
             [8] int32 CS$7$0001,
             [9] bool CS$4$0002,
             [10] valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D CS$0$0003)
//000403: 
//000404:         /// <summary>Render the boids.</summary>
//000405:         private void RenderBoids()
//000406:         {
    IL_0000:  nop
//000407:             // Make sure the boids are all positioned and pointing correctly
//000408:             foreach (var boid in m_boidModels) boid.TransformByPositionAndVelocity();
    IL_0001:  nop
    IL_0002:  ldarg.0
    IL_0003:  ldfld      class ParallelBoids.Boid[] ParallelBoids.MainWindow::m_boidModels
    IL_0008:  stloc.s    CS$6$0000
//000409: 
//000410:             // Every once in a while, update the user-displayed stats on timings
//000411:             var now = DateTimeOffset.Now;
//000412:             if (now >= m_nextUserPresentation)
//000413:             {
//000414:                 Title = string.Format("Procs: {0}, Time: {1:F2}", m_parallelOptions.MaxDegreeOfParallelism, 
//000415:                     m_numRendersSinceLastUserPresentation > 0 ? 
//000416:                     m_totalRenderingMillisecondsSinceLastUserPresentation / (double)m_numRendersSinceLastUserPresentation : 
//000417:                     0);
//000418:                 m_nextUserPresentation = now.AddSeconds(1);
//000419:                 m_numRendersSinceLastUserPresentation = 0;
//000420:                 m_totalRenderingMillisecondsSinceLastUserPresentation = 0;
//000421:             }
//000422: 
//000423:             // If we're in auto-panning mode, move the camera appropriately
//000424:             if (m_autoPanCamera)
//000425:             {
//000426:                 // Compute the maximum Z value of all of the boids and the center of their mass
//000427:                 double maxZ = double.MinValue;
//000428:                 Vector3D totalPos = new Vector3D();
//000429:                 foreach (var boid in m_boidModels)
//000430:                 {
//000431:                     if (boid.Position.Z > maxZ) maxZ = boid.Position.Z;
//000432:                     totalPos += boid.Position;
//000433:                 }
//000434:                 var newCameraPos = totalPos / m_boidModels.Length;
//000435:                 
//000436:                 // Move the camera to point at the center of the boids, a ways back from the max boid's Z
//000437:                 const int CAMERA_DISTANCE_FROM_MAXZ = 100;
//000438:                 const double CAMERA_SPEED_LIMIT = .01;
//000439:                 var newPos = new Point3D(newCameraPos.X, newCameraPos.Y, maxZ + CAMERA_DISTANCE_FROM_MAXZ);
//000440:                 var cameraVelocity = newPos - camMain.Position;
//000441:                 camMain.Position = camMain.Position + (cameraVelocity * CAMERA_SPEED_LIMIT);
//000442:             }
//000443:         }
//000444:         #endregion
//000445: 
//000446:         #region Boid Rules
//000447:         /// <summary>Run the three primary rules of boidom.</summary>
//000448:         /// <param name="boid">The boid to process.</param>
//000449:         /// <returns>The velocity vector resulting from the three primary rules and their associated weights.</returns>
//000450:         private Vector3D PrimaryRules_1_2_3(Boid boid)
//000451:         {
//000452:             int numNearby = 0;
//000453:             Vector3D summedPosition = new Vector3D();
//000454:             Vector3D summedVelocity = new Vector3D();
//000455:             Vector3D summedSeparation = new Vector3D();
//000456: 
//000457:             // For rule #1, we want the boid to fly towards the center of all of those in its neighborhood.
//000458:             // We find all of those boids, average their positions, and create a velocity vector to move the
//000459:             // boid a bit of the way there.
//000460: 
//000461:             // For rule #2, we want the boid to move away from each other boid it's a bit too close to.
//000462:             // Find all of those boids in its immediate vicinity, and push it away.
//000463: 
//000464:             // For rule #3, we want the boid to match velocities with those boids in its neighborhood.
//000465:             // Sum their velocities, find the average, and move this boid's velocity a bit in that direction.
//000466: 
//000467:             foreach (var other in m_boidModels)
//000468:             {
//000469:                 if (other != boid && 
//000470:                     (other.PreviousPosition - boid.PreviousPosition).Length <= NEIGHBORHOOD_SIZE &&
//000471:                     boid.ComputeAngle(other) <= 135)
//000472:                 {
//000473:                     summedPosition += other.PreviousPosition;
//000474:                     summedVelocity += other.PreviousVelocity;
//000475:                     numNearby++;
//000476: 
//000477:                     if ((other.PreviousPosition - boid.PreviousPosition).Length < MIN_DISTANCE_FROM_NEIGHBOR)
//000478:                     {
//000479:                         summedSeparation -= (other.PreviousPosition - boid.PreviousPosition);
//000480:                     }
//000481:                 }
//000482:             }
//000483: 
//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
//000485:             var rule2_separateFromNearby = summedSeparation;
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
//000487: 
//000488:             return
//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
//000499:             var v = new Vector3D();
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_000a:  ldc.i4.0
    IL_000b:  stloc.s    CS$7$0001
    IL_000d:  br.s       IL_0022

//000408:             foreach (var boid in m_boidModels) boid.TransformByPositionAndVelocity();
    IL_000f:  ldloc.s    CS$6$0000
    IL_0011:  ldloc.s    CS$7$0001
    IL_0013:  ldelem.ref
    IL_0014:  stloc.0
    IL_0015:  ldloc.0
    IL_0016:  callvirt   instance void ParallelBoids.Boid::TransformByPositionAndVelocity()
    IL_001b:  nop
//000409: 
//000410:             // Every once in a while, update the user-displayed stats on timings
//000411:             var now = DateTimeOffset.Now;
//000412:             if (now >= m_nextUserPresentation)
//000413:             {
//000414:                 Title = string.Format("Procs: {0}, Time: {1:F2}", m_parallelOptions.MaxDegreeOfParallelism, 
//000415:                     m_numRendersSinceLastUserPresentation > 0 ? 
//000416:                     m_totalRenderingMillisecondsSinceLastUserPresentation / (double)m_numRendersSinceLastUserPresentation : 
//000417:                     0);
//000418:                 m_nextUserPresentation = now.AddSeconds(1);
//000419:                 m_numRendersSinceLastUserPresentation = 0;
//000420:                 m_totalRenderingMillisecondsSinceLastUserPresentation = 0;
//000421:             }
//000422: 
//000423:             // If we're in auto-panning mode, move the camera appropriately
//000424:             if (m_autoPanCamera)
//000425:             {
//000426:                 // Compute the maximum Z value of all of the boids and the center of their mass
//000427:                 double maxZ = double.MinValue;
//000428:                 Vector3D totalPos = new Vector3D();
//000429:                 foreach (var boid in m_boidModels)
//000430:                 {
//000431:                     if (boid.Position.Z > maxZ) maxZ = boid.Position.Z;
//000432:                     totalPos += boid.Position;
//000433:                 }
//000434:                 var newCameraPos = totalPos / m_boidModels.Length;
//000435:                 
//000436:                 // Move the camera to point at the center of the boids, a ways back from the max boid's Z
//000437:                 const int CAMERA_DISTANCE_FROM_MAXZ = 100;
//000438:                 const double CAMERA_SPEED_LIMIT = .01;
//000439:                 var newPos = new Point3D(newCameraPos.X, newCameraPos.Y, maxZ + CAMERA_DISTANCE_FROM_MAXZ);
//000440:                 var cameraVelocity = newPos - camMain.Position;
//000441:                 camMain.Position = camMain.Position + (cameraVelocity * CAMERA_SPEED_LIMIT);
//000442:             }
//000443:         }
//000444:         #endregion
//000445: 
//000446:         #region Boid Rules
//000447:         /// <summary>Run the three primary rules of boidom.</summary>
//000448:         /// <param name="boid">The boid to process.</param>
//000449:         /// <returns>The velocity vector resulting from the three primary rules and their associated weights.</returns>
//000450:         private Vector3D PrimaryRules_1_2_3(Boid boid)
//000451:         {
//000452:             int numNearby = 0;
//000453:             Vector3D summedPosition = new Vector3D();
//000454:             Vector3D summedVelocity = new Vector3D();
//000455:             Vector3D summedSeparation = new Vector3D();
//000456: 
//000457:             // For rule #1, we want the boid to fly towards the center of all of those in its neighborhood.
//000458:             // We find all of those boids, average their positions, and create a velocity vector to move the
//000459:             // boid a bit of the way there.
//000460: 
//000461:             // For rule #2, we want the boid to move away from each other boid it's a bit too close to.
//000462:             // Find all of those boids in its immediate vicinity, and push it away.
//000463: 
//000464:             // For rule #3, we want the boid to match velocities with those boids in its neighborhood.
//000465:             // Sum their velocities, find the average, and move this boid's velocity a bit in that direction.
//000466: 
//000467:             foreach (var other in m_boidModels)
//000468:             {
//000469:                 if (other != boid && 
//000470:                     (other.PreviousPosition - boid.PreviousPosition).Length <= NEIGHBORHOOD_SIZE &&
//000471:                     boid.ComputeAngle(other) <= 135)
//000472:                 {
//000473:                     summedPosition += other.PreviousPosition;
//000474:                     summedVelocity += other.PreviousVelocity;
//000475:                     numNearby++;
//000476: 
//000477:                     if ((other.PreviousPosition - boid.PreviousPosition).Length < MIN_DISTANCE_FROM_NEIGHBOR)
//000478:                     {
//000479:                         summedSeparation -= (other.PreviousPosition - boid.PreviousPosition);
//000480:                     }
//000481:                 }
//000482:             }
//000483: 
//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
//000485:             var rule2_separateFromNearby = summedSeparation;
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
//000487: 
//000488:             return
//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
//000499:             var v = new Vector3D();
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_001c:  ldloc.s    CS$7$0001
    IL_001e:  ldc.i4.1
    IL_001f:  add
    IL_0020:  stloc.s    CS$7$0001
//000408:             foreach (var boid in m_boidModels) boid.TransformByPositionAndVelocity();
    IL_0022:  ldloc.s    CS$7$0001
    IL_0024:  ldloc.s    CS$6$0000
    IL_0026:  ldlen
    IL_0027:  conv.i4
    IL_0028:  clt
    IL_002a:  stloc.s    CS$4$0002
//000409: 
//000410:             // Every once in a while, update the user-displayed stats on timings
//000411:             var now = DateTimeOffset.Now;
//000412:             if (now >= m_nextUserPresentation)
//000413:             {
//000414:                 Title = string.Format("Procs: {0}, Time: {1:F2}", m_parallelOptions.MaxDegreeOfParallelism, 
//000415:                     m_numRendersSinceLastUserPresentation > 0 ? 
//000416:                     m_totalRenderingMillisecondsSinceLastUserPresentation / (double)m_numRendersSinceLastUserPresentation : 
//000417:                     0);
//000418:                 m_nextUserPresentation = now.AddSeconds(1);
//000419:                 m_numRendersSinceLastUserPresentation = 0;
//000420:                 m_totalRenderingMillisecondsSinceLastUserPresentation = 0;
//000421:             }
//000422: 
//000423:             // If we're in auto-panning mode, move the camera appropriately
//000424:             if (m_autoPanCamera)
//000425:             {
//000426:                 // Compute the maximum Z value of all of the boids and the center of their mass
//000427:                 double maxZ = double.MinValue;
//000428:                 Vector3D totalPos = new Vector3D();
//000429:                 foreach (var boid in m_boidModels)
//000430:                 {
//000431:                     if (boid.Position.Z > maxZ) maxZ = boid.Position.Z;
//000432:                     totalPos += boid.Position;
//000433:                 }
//000434:                 var newCameraPos = totalPos / m_boidModels.Length;
//000435:                 
//000436:                 // Move the camera to point at the center of the boids, a ways back from the max boid's Z
//000437:                 const int CAMERA_DISTANCE_FROM_MAXZ = 100;
//000438:                 const double CAMERA_SPEED_LIMIT = .01;
//000439:                 var newPos = new Point3D(newCameraPos.X, newCameraPos.Y, maxZ + CAMERA_DISTANCE_FROM_MAXZ);
//000440:                 var cameraVelocity = newPos - camMain.Position;
//000441:                 camMain.Position = camMain.Position + (cameraVelocity * CAMERA_SPEED_LIMIT);
//000442:             }
//000443:         }
//000444:         #endregion
//000445: 
//000446:         #region Boid Rules
//000447:         /// <summary>Run the three primary rules of boidom.</summary>
//000448:         /// <param name="boid">The boid to process.</param>
//000449:         /// <returns>The velocity vector resulting from the three primary rules and their associated weights.</returns>
//000450:         private Vector3D PrimaryRules_1_2_3(Boid boid)
//000451:         {
//000452:             int numNearby = 0;
//000453:             Vector3D summedPosition = new Vector3D();
//000454:             Vector3D summedVelocity = new Vector3D();
//000455:             Vector3D summedSeparation = new Vector3D();
//000456: 
//000457:             // For rule #1, we want the boid to fly towards the center of all of those in its neighborhood.
//000458:             // We find all of those boids, average their positions, and create a velocity vector to move the
//000459:             // boid a bit of the way there.
//000460: 
//000461:             // For rule #2, we want the boid to move away from each other boid it's a bit too close to.
//000462:             // Find all of those boids in its immediate vicinity, and push it away.
//000463: 
//000464:             // For rule #3, we want the boid to match velocities with those boids in its neighborhood.
//000465:             // Sum their velocities, find the average, and move this boid's velocity a bit in that direction.
//000466: 
//000467:             foreach (var other in m_boidModels)
//000468:             {
//000469:                 if (other != boid && 
//000470:                     (other.PreviousPosition - boid.PreviousPosition).Length <= NEIGHBORHOOD_SIZE &&
//000471:                     boid.ComputeAngle(other) <= 135)
//000472:                 {
//000473:                     summedPosition += other.PreviousPosition;
//000474:                     summedVelocity += other.PreviousVelocity;
//000475:                     numNearby++;
//000476: 
//000477:                     if ((other.PreviousPosition - boid.PreviousPosition).Length < MIN_DISTANCE_FROM_NEIGHBOR)
//000478:                     {
//000479:                         summedSeparation -= (other.PreviousPosition - boid.PreviousPosition);
//000480:                     }
//000481:                 }
//000482:             }
//000483: 
//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
//000485:             var rule2_separateFromNearby = summedSeparation;
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
//000487: 
//000488:             return
//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
//000499:             var v = new Vector3D();
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_002c:  ldloc.s    CS$4$0002
    IL_002e:  brtrue.s   IL_000f

//000411:             var now = DateTimeOffset.Now;
    IL_0030:  call       valuetype [mscorlib]System.DateTimeOffset [mscorlib]System.DateTimeOffset::get_Now()
    IL_0035:  stloc.1
//000412:             if (now >= m_nextUserPresentation)
    IL_0036:  ldloc.1
    IL_0037:  ldarg.0
    IL_0038:  ldfld      valuetype [mscorlib]System.DateTimeOffset ParallelBoids.MainWindow::m_nextUserPresentation
    IL_003d:  call       bool [mscorlib]System.DateTimeOffset::op_GreaterThanOrEqual(valuetype [mscorlib]System.DateTimeOffset,
                                                                                     valuetype [mscorlib]System.DateTimeOffset)
    IL_0042:  ldc.i4.0
    IL_0043:  ceq
    IL_0045:  stloc.s    CS$4$0002
//000413:             {
//000414:                 Title = string.Format("Procs: {0}, Time: {1:F2}", m_parallelOptions.MaxDegreeOfParallelism, 
//000415:                     m_numRendersSinceLastUserPresentation > 0 ? 
//000416:                     m_totalRenderingMillisecondsSinceLastUserPresentation / (double)m_numRendersSinceLastUserPresentation : 
//000417:                     0);
//000418:                 m_nextUserPresentation = now.AddSeconds(1);
//000419:                 m_numRendersSinceLastUserPresentation = 0;
//000420:                 m_totalRenderingMillisecondsSinceLastUserPresentation = 0;
//000421:             }
//000422: 
//000423:             // If we're in auto-panning mode, move the camera appropriately
//000424:             if (m_autoPanCamera)
//000425:             {
//000426:                 // Compute the maximum Z value of all of the boids and the center of their mass
//000427:                 double maxZ = double.MinValue;
//000428:                 Vector3D totalPos = new Vector3D();
//000429:                 foreach (var boid in m_boidModels)
//000430:                 {
//000431:                     if (boid.Position.Z > maxZ) maxZ = boid.Position.Z;
//000432:                     totalPos += boid.Position;
//000433:                 }
//000434:                 var newCameraPos = totalPos / m_boidModels.Length;
//000435:                 
//000436:                 // Move the camera to point at the center of the boids, a ways back from the max boid's Z
//000437:                 const int CAMERA_DISTANCE_FROM_MAXZ = 100;
//000438:                 const double CAMERA_SPEED_LIMIT = .01;
//000439:                 var newPos = new Point3D(newCameraPos.X, newCameraPos.Y, maxZ + CAMERA_DISTANCE_FROM_MAXZ);
//000440:                 var cameraVelocity = newPos - camMain.Position;
//000441:                 camMain.Position = camMain.Position + (cameraVelocity * CAMERA_SPEED_LIMIT);
//000442:             }
//000443:         }
//000444:         #endregion
//000445: 
//000446:         #region Boid Rules
//000447:         /// <summary>Run the three primary rules of boidom.</summary>
//000448:         /// <param name="boid">The boid to process.</param>
//000449:         /// <returns>The velocity vector resulting from the three primary rules and their associated weights.</returns>
//000450:         private Vector3D PrimaryRules_1_2_3(Boid boid)
//000451:         {
//000452:             int numNearby = 0;
//000453:             Vector3D summedPosition = new Vector3D();
//000454:             Vector3D summedVelocity = new Vector3D();
//000455:             Vector3D summedSeparation = new Vector3D();
//000456: 
//000457:             // For rule #1, we want the boid to fly towards the center of all of those in its neighborhood.
//000458:             // We find all of those boids, average their positions, and create a velocity vector to move the
//000459:             // boid a bit of the way there.
//000460: 
//000461:             // For rule #2, we want the boid to move away from each other boid it's a bit too close to.
//000462:             // Find all of those boids in its immediate vicinity, and push it away.
//000463: 
//000464:             // For rule #3, we want the boid to match velocities with those boids in its neighborhood.
//000465:             // Sum their velocities, find the average, and move this boid's velocity a bit in that direction.
//000466: 
//000467:             foreach (var other in m_boidModels)
//000468:             {
//000469:                 if (other != boid && 
//000470:                     (other.PreviousPosition - boid.PreviousPosition).Length <= NEIGHBORHOOD_SIZE &&
//000471:                     boid.ComputeAngle(other) <= 135)
//000472:                 {
//000473:                     summedPosition += other.PreviousPosition;
//000474:                     summedVelocity += other.PreviousVelocity;
//000475:                     numNearby++;
//000476: 
//000477:                     if ((other.PreviousPosition - boid.PreviousPosition).Length < MIN_DISTANCE_FROM_NEIGHBOR)
//000478:                     {
//000479:                         summedSeparation -= (other.PreviousPosition - boid.PreviousPosition);
//000480:                     }
//000481:                 }
//000482:             }
//000483: 
//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
//000485:             var rule2_separateFromNearby = summedSeparation;
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
//000487: 
//000488:             return
//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
//000499:             var v = new Vector3D();
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_0047:  ldloc.s    CS$4$0002
    IL_0049:  brtrue.s   IL_00bb

//000413:             {
    IL_004b:  nop
//000414:                 Title = string.Format("Procs: {0}, Time: {1:F2}", m_parallelOptions.MaxDegreeOfParallelism, 
    IL_004c:  ldarg.0
    IL_004d:  ldstr      "Procs: {0}, Time: {1:F2}"
    IL_0052:  ldarg.0
    IL_0053:  ldfld      class [mscorlib]System.Threading.Tasks.ParallelOptions ParallelBoids.MainWindow::m_parallelOptions
    IL_0058:  callvirt   instance int32 [mscorlib]System.Threading.Tasks.ParallelOptions::get_MaxDegreeOfParallelism()
    IL_005d:  box        [mscorlib]System.Int32
    IL_0062:  ldarg.0
    IL_0063:  ldfld      int32 ParallelBoids.MainWindow::m_numRendersSinceLastUserPresentation
    IL_0068:  ldc.i4.0
    IL_0069:  bgt.s      IL_0076

    IL_006b:  ldc.r8     0.0
    IL_0074:  br.s       IL_0085

    IL_0076:  ldarg.0
    IL_0077:  ldfld      int64 ParallelBoids.MainWindow::m_totalRenderingMillisecondsSinceLastUserPresentation
    IL_007c:  conv.r8
    IL_007d:  ldarg.0
    IL_007e:  ldfld      int32 ParallelBoids.MainWindow::m_numRendersSinceLastUserPresentation
    IL_0083:  conv.r8
    IL_0084:  div
    IL_0085:  box        [mscorlib]System.Double
    IL_008a:  call       string [mscorlib]System.String::Format(string,
                                                                object,
                                                                object)
    IL_008f:  call       instance void [PresentationFramework]System.Windows.Window::set_Title(string)
    IL_0094:  nop
//000415:                     m_numRendersSinceLastUserPresentation > 0 ? 
//000416:                     m_totalRenderingMillisecondsSinceLastUserPresentation / (double)m_numRendersSinceLastUserPresentation : 
//000417:                     0);
//000418:                 m_nextUserPresentation = now.AddSeconds(1);
    IL_0095:  ldarg.0
    IL_0096:  ldloca.s   now
    IL_0098:  ldc.r8     1.
    IL_00a1:  call       instance valuetype [mscorlib]System.DateTimeOffset [mscorlib]System.DateTimeOffset::AddSeconds(float64)
    IL_00a6:  stfld      valuetype [mscorlib]System.DateTimeOffset ParallelBoids.MainWindow::m_nextUserPresentation
//000419:                 m_numRendersSinceLastUserPresentation = 0;
    IL_00ab:  ldarg.0
    IL_00ac:  ldc.i4.0
    IL_00ad:  stfld      int32 ParallelBoids.MainWindow::m_numRendersSinceLastUserPresentation
//000420:                 m_totalRenderingMillisecondsSinceLastUserPresentation = 0;
    IL_00b2:  ldarg.0
    IL_00b3:  ldc.i4.0
    IL_00b4:  conv.i8
    IL_00b5:  stfld      int64 ParallelBoids.MainWindow::m_totalRenderingMillisecondsSinceLastUserPresentation
//000421:             }
    IL_00ba:  nop
//000422: 
//000423:             // If we're in auto-panning mode, move the camera appropriately
//000424:             if (m_autoPanCamera)
    IL_00bb:  ldarg.0
    IL_00bc:  ldfld      bool ParallelBoids.MainWindow::m_autoPanCamera
    IL_00c1:  ldc.i4.0
    IL_00c2:  ceq
    IL_00c4:  stloc.s    CS$4$0002
//000425:             {
//000426:                 // Compute the maximum Z value of all of the boids and the center of their mass
//000427:                 double maxZ = double.MinValue;
//000428:                 Vector3D totalPos = new Vector3D();
//000429:                 foreach (var boid in m_boidModels)
//000430:                 {
//000431:                     if (boid.Position.Z > maxZ) maxZ = boid.Position.Z;
//000432:                     totalPos += boid.Position;
//000433:                 }
//000434:                 var newCameraPos = totalPos / m_boidModels.Length;
//000435:                 
//000436:                 // Move the camera to point at the center of the boids, a ways back from the max boid's Z
//000437:                 const int CAMERA_DISTANCE_FROM_MAXZ = 100;
//000438:                 const double CAMERA_SPEED_LIMIT = .01;
//000439:                 var newPos = new Point3D(newCameraPos.X, newCameraPos.Y, maxZ + CAMERA_DISTANCE_FROM_MAXZ);
//000440:                 var cameraVelocity = newPos - camMain.Position;
//000441:                 camMain.Position = camMain.Position + (cameraVelocity * CAMERA_SPEED_LIMIT);
//000442:             }
//000443:         }
//000444:         #endregion
//000445: 
//000446:         #region Boid Rules
//000447:         /// <summary>Run the three primary rules of boidom.</summary>
//000448:         /// <param name="boid">The boid to process.</param>
//000449:         /// <returns>The velocity vector resulting from the three primary rules and their associated weights.</returns>
//000450:         private Vector3D PrimaryRules_1_2_3(Boid boid)
//000451:         {
//000452:             int numNearby = 0;
//000453:             Vector3D summedPosition = new Vector3D();
//000454:             Vector3D summedVelocity = new Vector3D();
//000455:             Vector3D summedSeparation = new Vector3D();
//000456: 
//000457:             // For rule #1, we want the boid to fly towards the center of all of those in its neighborhood.
//000458:             // We find all of those boids, average their positions, and create a velocity vector to move the
//000459:             // boid a bit of the way there.
//000460: 
//000461:             // For rule #2, we want the boid to move away from each other boid it's a bit too close to.
//000462:             // Find all of those boids in its immediate vicinity, and push it away.
//000463: 
//000464:             // For rule #3, we want the boid to match velocities with those boids in its neighborhood.
//000465:             // Sum their velocities, find the average, and move this boid's velocity a bit in that direction.
//000466: 
//000467:             foreach (var other in m_boidModels)
//000468:             {
//000469:                 if (other != boid && 
//000470:                     (other.PreviousPosition - boid.PreviousPosition).Length <= NEIGHBORHOOD_SIZE &&
//000471:                     boid.ComputeAngle(other) <= 135)
//000472:                 {
//000473:                     summedPosition += other.PreviousPosition;
//000474:                     summedVelocity += other.PreviousVelocity;
//000475:                     numNearby++;
//000476: 
//000477:                     if ((other.PreviousPosition - boid.PreviousPosition).Length < MIN_DISTANCE_FROM_NEIGHBOR)
//000478:                     {
//000479:                         summedSeparation -= (other.PreviousPosition - boid.PreviousPosition);
//000480:                     }
//000481:                 }
//000482:             }
//000483: 
//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
//000485:             var rule2_separateFromNearby = summedSeparation;
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
//000487: 
//000488:             return
//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
//000499:             var v = new Vector3D();
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_00c6:  ldloc.s    CS$4$0002
    IL_00c8:  brtrue     IL_01b5

//000425:             {
    IL_00cd:  nop
//000426:                 // Compute the maximum Z value of all of the boids and the center of their mass
//000427:                 double maxZ = double.MinValue;
    IL_00ce:  ldc.r8     -1.7976931348623157e+308
    IL_00d7:  stloc.2
//000428:                 Vector3D totalPos = new Vector3D();
    IL_00d8:  ldloca.s   totalPos
    IL_00da:  initobj    [PresentationCore]System.Windows.Media.Media3D.Vector3D
//000429:                 foreach (var boid in m_boidModels)
    IL_00e0:  nop
    IL_00e1:  ldarg.0
    IL_00e2:  ldfld      class ParallelBoids.Boid[] ParallelBoids.MainWindow::m_boidModels
    IL_00e7:  stloc.s    CS$6$0000
//000430:                 {
//000431:                     if (boid.Position.Z > maxZ) maxZ = boid.Position.Z;
//000432:                     totalPos += boid.Position;
//000433:                 }
//000434:                 var newCameraPos = totalPos / m_boidModels.Length;
//000435:                 
//000436:                 // Move the camera to point at the center of the boids, a ways back from the max boid's Z
//000437:                 const int CAMERA_DISTANCE_FROM_MAXZ = 100;
//000438:                 const double CAMERA_SPEED_LIMIT = .01;
//000439:                 var newPos = new Point3D(newCameraPos.X, newCameraPos.Y, maxZ + CAMERA_DISTANCE_FROM_MAXZ);
//000440:                 var cameraVelocity = newPos - camMain.Position;
//000441:                 camMain.Position = camMain.Position + (cameraVelocity * CAMERA_SPEED_LIMIT);
//000442:             }
//000443:         }
//000444:         #endregion
//000445: 
//000446:         #region Boid Rules
//000447:         /// <summary>Run the three primary rules of boidom.</summary>
//000448:         /// <param name="boid">The boid to process.</param>
//000449:         /// <returns>The velocity vector resulting from the three primary rules and their associated weights.</returns>
//000450:         private Vector3D PrimaryRules_1_2_3(Boid boid)
//000451:         {
//000452:             int numNearby = 0;
//000453:             Vector3D summedPosition = new Vector3D();
//000454:             Vector3D summedVelocity = new Vector3D();
//000455:             Vector3D summedSeparation = new Vector3D();
//000456: 
//000457:             // For rule #1, we want the boid to fly towards the center of all of those in its neighborhood.
//000458:             // We find all of those boids, average their positions, and create a velocity vector to move the
//000459:             // boid a bit of the way there.
//000460: 
//000461:             // For rule #2, we want the boid to move away from each other boid it's a bit too close to.
//000462:             // Find all of those boids in its immediate vicinity, and push it away.
//000463: 
//000464:             // For rule #3, we want the boid to match velocities with those boids in its neighborhood.
//000465:             // Sum their velocities, find the average, and move this boid's velocity a bit in that direction.
//000466: 
//000467:             foreach (var other in m_boidModels)
//000468:             {
//000469:                 if (other != boid && 
//000470:                     (other.PreviousPosition - boid.PreviousPosition).Length <= NEIGHBORHOOD_SIZE &&
//000471:                     boid.ComputeAngle(other) <= 135)
//000472:                 {
//000473:                     summedPosition += other.PreviousPosition;
//000474:                     summedVelocity += other.PreviousVelocity;
//000475:                     numNearby++;
//000476: 
//000477:                     if ((other.PreviousPosition - boid.PreviousPosition).Length < MIN_DISTANCE_FROM_NEIGHBOR)
//000478:                     {
//000479:                         summedSeparation -= (other.PreviousPosition - boid.PreviousPosition);
//000480:                     }
//000481:                 }
//000482:             }
//000483: 
//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
//000485:             var rule2_separateFromNearby = summedSeparation;
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
//000487: 
//000488:             return
//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
//000499:             var v = new Vector3D();
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_00e9:  ldc.i4.0
    IL_00ea:  stloc.s    CS$7$0001
    IL_00ec:  br.s       IL_0134

//000429:                 foreach (var boid in m_boidModels)
    IL_00ee:  ldloc.s    CS$6$0000
    IL_00f0:  ldloc.s    CS$7$0001
    IL_00f2:  ldelem.ref
    IL_00f3:  stloc.0
//000430:                 {
    IL_00f4:  nop
//000431:                     if (boid.Position.Z > maxZ) maxZ = boid.Position.Z;
    IL_00f5:  ldloc.0
    IL_00f6:  callvirt   instance valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.Boid::get_Position()
    IL_00fb:  stloc.s    CS$0$0003
    IL_00fd:  ldloca.s   CS$0$0003
    IL_00ff:  call       instance float64 [PresentationCore]System.Windows.Media.Media3D.Vector3D::get_Z()
    IL_0104:  ldloc.2
    IL_0105:  cgt
    IL_0107:  ldc.i4.0
    IL_0108:  ceq
    IL_010a:  stloc.s    CS$4$0002
//000432:                     totalPos += boid.Position;
//000433:                 }
//000434:                 var newCameraPos = totalPos / m_boidModels.Length;
//000435:                 
//000436:                 // Move the camera to point at the center of the boids, a ways back from the max boid's Z
//000437:                 const int CAMERA_DISTANCE_FROM_MAXZ = 100;
//000438:                 const double CAMERA_SPEED_LIMIT = .01;
//000439:                 var newPos = new Point3D(newCameraPos.X, newCameraPos.Y, maxZ + CAMERA_DISTANCE_FROM_MAXZ);
//000440:                 var cameraVelocity = newPos - camMain.Position;
//000441:                 camMain.Position = camMain.Position + (cameraVelocity * CAMERA_SPEED_LIMIT);
//000442:             }
//000443:         }
//000444:         #endregion
//000445: 
//000446:         #region Boid Rules
//000447:         /// <summary>Run the three primary rules of boidom.</summary>
//000448:         /// <param name="boid">The boid to process.</param>
//000449:         /// <returns>The velocity vector resulting from the three primary rules and their associated weights.</returns>
//000450:         private Vector3D PrimaryRules_1_2_3(Boid boid)
//000451:         {
//000452:             int numNearby = 0;
//000453:             Vector3D summedPosition = new Vector3D();
//000454:             Vector3D summedVelocity = new Vector3D();
//000455:             Vector3D summedSeparation = new Vector3D();
//000456: 
//000457:             // For rule #1, we want the boid to fly towards the center of all of those in its neighborhood.
//000458:             // We find all of those boids, average their positions, and create a velocity vector to move the
//000459:             // boid a bit of the way there.
//000460: 
//000461:             // For rule #2, we want the boid to move away from each other boid it's a bit too close to.
//000462:             // Find all of those boids in its immediate vicinity, and push it away.
//000463: 
//000464:             // For rule #3, we want the boid to match velocities with those boids in its neighborhood.
//000465:             // Sum their velocities, find the average, and move this boid's velocity a bit in that direction.
//000466: 
//000467:             foreach (var other in m_boidModels)
//000468:             {
//000469:                 if (other != boid && 
//000470:                     (other.PreviousPosition - boid.PreviousPosition).Length <= NEIGHBORHOOD_SIZE &&
//000471:                     boid.ComputeAngle(other) <= 135)
//000472:                 {
//000473:                     summedPosition += other.PreviousPosition;
//000474:                     summedVelocity += other.PreviousVelocity;
//000475:                     numNearby++;
//000476: 
//000477:                     if ((other.PreviousPosition - boid.PreviousPosition).Length < MIN_DISTANCE_FROM_NEIGHBOR)
//000478:                     {
//000479:                         summedSeparation -= (other.PreviousPosition - boid.PreviousPosition);
//000480:                     }
//000481:                 }
//000482:             }
//000483: 
//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
//000485:             var rule2_separateFromNearby = summedSeparation;
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
//000487: 
//000488:             return
//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
//000499:             var v = new Vector3D();
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_010c:  ldloc.s    CS$4$0002
    IL_010e:  brtrue.s   IL_0120

//000431:                     if (boid.Position.Z > maxZ) maxZ = boid.Position.Z;
    IL_0110:  ldloc.0
    IL_0111:  callvirt   instance valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.Boid::get_Position()
    IL_0116:  stloc.s    CS$0$0003
    IL_0118:  ldloca.s   CS$0$0003
    IL_011a:  call       instance float64 [PresentationCore]System.Windows.Media.Media3D.Vector3D::get_Z()
    IL_011f:  stloc.2
//000432:                     totalPos += boid.Position;
    IL_0120:  ldloc.3
    IL_0121:  ldloc.0
    IL_0122:  callvirt   instance valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.Boid::get_Position()
    IL_0127:  call       valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D [PresentationCore]System.Windows.Media.Media3D.Vector3D::op_Addition(valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D,
                                                                                                                                                                valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D)
    IL_012c:  stloc.3
//000433:                 }
    IL_012d:  nop
//000434:                 var newCameraPos = totalPos / m_boidModels.Length;
//000435:                 
//000436:                 // Move the camera to point at the center of the boids, a ways back from the max boid's Z
//000437:                 const int CAMERA_DISTANCE_FROM_MAXZ = 100;
//000438:                 const double CAMERA_SPEED_LIMIT = .01;
//000439:                 var newPos = new Point3D(newCameraPos.X, newCameraPos.Y, maxZ + CAMERA_DISTANCE_FROM_MAXZ);
//000440:                 var cameraVelocity = newPos - camMain.Position;
//000441:                 camMain.Position = camMain.Position + (cameraVelocity * CAMERA_SPEED_LIMIT);
//000442:             }
//000443:         }
//000444:         #endregion
//000445: 
//000446:         #region Boid Rules
//000447:         /// <summary>Run the three primary rules of boidom.</summary>
//000448:         /// <param name="boid">The boid to process.</param>
//000449:         /// <returns>The velocity vector resulting from the three primary rules and their associated weights.</returns>
//000450:         private Vector3D PrimaryRules_1_2_3(Boid boid)
//000451:         {
//000452:             int numNearby = 0;
//000453:             Vector3D summedPosition = new Vector3D();
//000454:             Vector3D summedVelocity = new Vector3D();
//000455:             Vector3D summedSeparation = new Vector3D();
//000456: 
//000457:             // For rule #1, we want the boid to fly towards the center of all of those in its neighborhood.
//000458:             // We find all of those boids, average their positions, and create a velocity vector to move the
//000459:             // boid a bit of the way there.
//000460: 
//000461:             // For rule #2, we want the boid to move away from each other boid it's a bit too close to.
//000462:             // Find all of those boids in its immediate vicinity, and push it away.
//000463: 
//000464:             // For rule #3, we want the boid to match velocities with those boids in its neighborhood.
//000465:             // Sum their velocities, find the average, and move this boid's velocity a bit in that direction.
//000466: 
//000467:             foreach (var other in m_boidModels)
//000468:             {
//000469:                 if (other != boid && 
//000470:                     (other.PreviousPosition - boid.PreviousPosition).Length <= NEIGHBORHOOD_SIZE &&
//000471:                     boid.ComputeAngle(other) <= 135)
//000472:                 {
//000473:                     summedPosition += other.PreviousPosition;
//000474:                     summedVelocity += other.PreviousVelocity;
//000475:                     numNearby++;
//000476: 
//000477:                     if ((other.PreviousPosition - boid.PreviousPosition).Length < MIN_DISTANCE_FROM_NEIGHBOR)
//000478:                     {
//000479:                         summedSeparation -= (other.PreviousPosition - boid.PreviousPosition);
//000480:                     }
//000481:                 }
//000482:             }
//000483: 
//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
//000485:             var rule2_separateFromNearby = summedSeparation;
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
//000487: 
//000488:             return
//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
//000499:             var v = new Vector3D();
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_012e:  ldloc.s    CS$7$0001
    IL_0130:  ldc.i4.1
    IL_0131:  add
    IL_0132:  stloc.s    CS$7$0001
//000429:                 foreach (var boid in m_boidModels)
    IL_0134:  ldloc.s    CS$7$0001
    IL_0136:  ldloc.s    CS$6$0000
    IL_0138:  ldlen
    IL_0139:  conv.i4
    IL_013a:  clt
    IL_013c:  stloc.s    CS$4$0002
//000430:                 {
//000431:                     if (boid.Position.Z > maxZ) maxZ = boid.Position.Z;
//000432:                     totalPos += boid.Position;
//000433:                 }
//000434:                 var newCameraPos = totalPos / m_boidModels.Length;
//000435:                 
//000436:                 // Move the camera to point at the center of the boids, a ways back from the max boid's Z
//000437:                 const int CAMERA_DISTANCE_FROM_MAXZ = 100;
//000438:                 const double CAMERA_SPEED_LIMIT = .01;
//000439:                 var newPos = new Point3D(newCameraPos.X, newCameraPos.Y, maxZ + CAMERA_DISTANCE_FROM_MAXZ);
//000440:                 var cameraVelocity = newPos - camMain.Position;
//000441:                 camMain.Position = camMain.Position + (cameraVelocity * CAMERA_SPEED_LIMIT);
//000442:             }
//000443:         }
//000444:         #endregion
//000445: 
//000446:         #region Boid Rules
//000447:         /// <summary>Run the three primary rules of boidom.</summary>
//000448:         /// <param name="boid">The boid to process.</param>
//000449:         /// <returns>The velocity vector resulting from the three primary rules and their associated weights.</returns>
//000450:         private Vector3D PrimaryRules_1_2_3(Boid boid)
//000451:         {
//000452:             int numNearby = 0;
//000453:             Vector3D summedPosition = new Vector3D();
//000454:             Vector3D summedVelocity = new Vector3D();
//000455:             Vector3D summedSeparation = new Vector3D();
//000456: 
//000457:             // For rule #1, we want the boid to fly towards the center of all of those in its neighborhood.
//000458:             // We find all of those boids, average their positions, and create a velocity vector to move the
//000459:             // boid a bit of the way there.
//000460: 
//000461:             // For rule #2, we want the boid to move away from each other boid it's a bit too close to.
//000462:             // Find all of those boids in its immediate vicinity, and push it away.
//000463: 
//000464:             // For rule #3, we want the boid to match velocities with those boids in its neighborhood.
//000465:             // Sum their velocities, find the average, and move this boid's velocity a bit in that direction.
//000466: 
//000467:             foreach (var other in m_boidModels)
//000468:             {
//000469:                 if (other != boid && 
//000470:                     (other.PreviousPosition - boid.PreviousPosition).Length <= NEIGHBORHOOD_SIZE &&
//000471:                     boid.ComputeAngle(other) <= 135)
//000472:                 {
//000473:                     summedPosition += other.PreviousPosition;
//000474:                     summedVelocity += other.PreviousVelocity;
//000475:                     numNearby++;
//000476: 
//000477:                     if ((other.PreviousPosition - boid.PreviousPosition).Length < MIN_DISTANCE_FROM_NEIGHBOR)
//000478:                     {
//000479:                         summedSeparation -= (other.PreviousPosition - boid.PreviousPosition);
//000480:                     }
//000481:                 }
//000482:             }
//000483: 
//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
//000485:             var rule2_separateFromNearby = summedSeparation;
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
//000487: 
//000488:             return
//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
//000499:             var v = new Vector3D();
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_013e:  ldloc.s    CS$4$0002
    IL_0140:  brtrue.s   IL_00ee

//000434:                 var newCameraPos = totalPos / m_boidModels.Length;
    IL_0142:  ldloc.3
    IL_0143:  ldarg.0
    IL_0144:  ldfld      class ParallelBoids.Boid[] ParallelBoids.MainWindow::m_boidModels
    IL_0149:  ldlen
    IL_014a:  conv.i4
    IL_014b:  conv.r8
    IL_014c:  call       valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D [PresentationCore]System.Windows.Media.Media3D.Vector3D::op_Division(valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D,
                                                                                                                                                                float64)
    IL_0151:  stloc.s    newCameraPos
//000435:                 
//000436:                 // Move the camera to point at the center of the boids, a ways back from the max boid's Z
//000437:                 const int CAMERA_DISTANCE_FROM_MAXZ = 100;
//000438:                 const double CAMERA_SPEED_LIMIT = .01;
//000439:                 var newPos = new Point3D(newCameraPos.X, newCameraPos.Y, maxZ + CAMERA_DISTANCE_FROM_MAXZ);
    IL_0153:  ldloca.s   newPos
    IL_0155:  ldloca.s   newCameraPos
    IL_0157:  call       instance float64 [PresentationCore]System.Windows.Media.Media3D.Vector3D::get_X()
    IL_015c:  ldloca.s   newCameraPos
    IL_015e:  call       instance float64 [PresentationCore]System.Windows.Media.Media3D.Vector3D::get_Y()
    IL_0163:  ldloc.2
    IL_0164:  ldc.r8     100.
    IL_016d:  add
    IL_016e:  call       instance void [PresentationCore]System.Windows.Media.Media3D.Point3D::.ctor(float64,
                                                                                                     float64,
                                                                                                     float64)
    IL_0173:  nop
//000440:                 var cameraVelocity = newPos - camMain.Position;
    IL_0174:  ldloc.s    newPos
    IL_0176:  ldarg.0
    IL_0177:  ldfld      class [PresentationCore]System.Windows.Media.Media3D.PerspectiveCamera ParallelBoids.MainWindow::camMain
    IL_017c:  callvirt   instance valuetype [PresentationCore]System.Windows.Media.Media3D.Point3D [PresentationCore]System.Windows.Media.Media3D.ProjectionCamera::get_Position()
    IL_0181:  call       valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D [PresentationCore]System.Windows.Media.Media3D.Point3D::op_Subtraction(valuetype [PresentationCore]System.Windows.Media.Media3D.Point3D,
                                                                                                                                                                  valuetype [PresentationCore]System.Windows.Media.Media3D.Point3D)
    IL_0186:  stloc.s    cameraVelocity
//000441:                 camMain.Position = camMain.Position + (cameraVelocity * CAMERA_SPEED_LIMIT);
    IL_0188:  ldarg.0
    IL_0189:  ldfld      class [PresentationCore]System.Windows.Media.Media3D.PerspectiveCamera ParallelBoids.MainWindow::camMain
    IL_018e:  ldarg.0
    IL_018f:  ldfld      class [PresentationCore]System.Windows.Media.Media3D.PerspectiveCamera ParallelBoids.MainWindow::camMain
    IL_0194:  callvirt   instance valuetype [PresentationCore]System.Windows.Media.Media3D.Point3D [PresentationCore]System.Windows.Media.Media3D.ProjectionCamera::get_Position()
    IL_0199:  ldloc.s    cameraVelocity
    IL_019b:  ldc.r8     1.e-002
    IL_01a4:  call       valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D [PresentationCore]System.Windows.Media.Media3D.Vector3D::op_Multiply(valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D,
                                                                                                                                                                float64)
    IL_01a9:  call       valuetype [PresentationCore]System.Windows.Media.Media3D.Point3D [PresentationCore]System.Windows.Media.Media3D.Point3D::op_Addition(valuetype [PresentationCore]System.Windows.Media.Media3D.Point3D,
                                                                                                                                                              valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D)
    IL_01ae:  callvirt   instance void [PresentationCore]System.Windows.Media.Media3D.ProjectionCamera::set_Position(valuetype [PresentationCore]System.Windows.Media.Media3D.Point3D)
    IL_01b3:  nop
//000442:             }
    IL_01b4:  nop
//000443:         }
    IL_01b5:  ret
  } // end of method MainWindow::RenderBoids

  .method private hidebysig instance valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D 
          PrimaryRules_1_2_3(class ParallelBoids.Boid boid) cil managed
  {
    // Code size       416 (0x1a0)
    .maxstack  3
    .locals init ([0] int32 numNearby,
             [1] valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D summedPosition,
             [2] valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D summedVelocity,
             [3] valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D summedSeparation,
             [4] class ParallelBoids.Boid other,
             [5] valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D rule1_flyTowardsCenter,
             [6] valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D rule2_separateFromNearby,
             [7] valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D rule3_matchVelocities,
             [8] valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D CS$1$0000,
             [9] class ParallelBoids.Boid[] CS$6$0001,
             [10] int32 CS$7$0002,
             [11] valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D CS$0$0003,
             [12] bool CS$4$0004)
//000444:         #endregion
//000445: 
//000446:         #region Boid Rules
//000447:         /// <summary>Run the three primary rules of boidom.</summary>
//000448:         /// <param name="boid">The boid to process.</param>
//000449:         /// <returns>The velocity vector resulting from the three primary rules and their associated weights.</returns>
//000450:         private Vector3D PrimaryRules_1_2_3(Boid boid)
//000451:         {
    IL_0000:  nop
//000452:             int numNearby = 0;
    IL_0001:  ldc.i4.0
    IL_0002:  stloc.0
//000453:             Vector3D summedPosition = new Vector3D();
    IL_0003:  ldloca.s   summedPosition
    IL_0005:  initobj    [PresentationCore]System.Windows.Media.Media3D.Vector3D
//000454:             Vector3D summedVelocity = new Vector3D();
    IL_000b:  ldloca.s   summedVelocity
    IL_000d:  initobj    [PresentationCore]System.Windows.Media.Media3D.Vector3D
//000455:             Vector3D summedSeparation = new Vector3D();
    IL_0013:  ldloca.s   summedSeparation
    IL_0015:  initobj    [PresentationCore]System.Windows.Media.Media3D.Vector3D
//000456: 
//000457:             // For rule #1, we want the boid to fly towards the center of all of those in its neighborhood.
//000458:             // We find all of those boids, average their positions, and create a velocity vector to move the
//000459:             // boid a bit of the way there.
//000460: 
//000461:             // For rule #2, we want the boid to move away from each other boid it's a bit too close to.
//000462:             // Find all of those boids in its immediate vicinity, and push it away.
//000463: 
//000464:             // For rule #3, we want the boid to match velocities with those boids in its neighborhood.
//000465:             // Sum their velocities, find the average, and move this boid's velocity a bit in that direction.
//000466: 
//000467:             foreach (var other in m_boidModels)
    IL_001b:  nop
    IL_001c:  ldarg.0
    IL_001d:  ldfld      class ParallelBoids.Boid[] ParallelBoids.MainWindow::m_boidModels
    IL_0022:  stloc.s    CS$6$0001
//000468:             {
//000469:                 if (other != boid && 
//000470:                     (other.PreviousPosition - boid.PreviousPosition).Length <= NEIGHBORHOOD_SIZE &&
//000471:                     boid.ComputeAngle(other) <= 135)
//000472:                 {
//000473:                     summedPosition += other.PreviousPosition;
//000474:                     summedVelocity += other.PreviousVelocity;
//000475:                     numNearby++;
//000476: 
//000477:                     if ((other.PreviousPosition - boid.PreviousPosition).Length < MIN_DISTANCE_FROM_NEIGHBOR)
//000478:                     {
//000479:                         summedSeparation -= (other.PreviousPosition - boid.PreviousPosition);
//000480:                     }
//000481:                 }
//000482:             }
//000483: 
//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
//000485:             var rule2_separateFromNearby = summedSeparation;
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
//000487: 
//000488:             return
//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
//000499:             var v = new Vector3D();
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_0024:  ldc.i4.0
    IL_0025:  stloc.s    CS$7$0002
    IL_0027:  br         IL_00ee

//000467:             foreach (var other in m_boidModels)
    IL_002c:  ldloc.s    CS$6$0001
    IL_002e:  ldloc.s    CS$7$0002
    IL_0030:  ldelem.ref
    IL_0031:  stloc.s    other
//000468:             {
    IL_0033:  nop
//000469:                 if (other != boid && 
    IL_0034:  ldloc.s    other
    IL_0036:  ldarg.1
    IL_0037:  beq.s      IL_0074

    IL_0039:  ldloc.s    other
    IL_003b:  callvirt   instance valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.Boid::get_PreviousPosition()
    IL_0040:  ldarg.1
    IL_0041:  callvirt   instance valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.Boid::get_PreviousPosition()
    IL_0046:  call       valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D [PresentationCore]System.Windows.Media.Media3D.Vector3D::op_Subtraction(valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D,
                                                                                                                                                                   valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D)
    IL_004b:  stloc.s    CS$0$0003
    IL_004d:  ldloca.s   CS$0$0003
    IL_004f:  call       instance float64 [PresentationCore]System.Windows.Media.Media3D.Vector3D::get_Length()
    IL_0054:  ldc.r8     100.
    IL_005d:  bgt.un.s   IL_0074

    IL_005f:  ldarg.1
    IL_0060:  ldloc.s    other
    IL_0062:  callvirt   instance float64 ParallelBoids.Boid::ComputeAngle(class ParallelBoids.Boid)
    IL_0067:  ldc.r8     135.
    IL_0070:  cgt.un
    IL_0072:  br.s       IL_0075

    IL_0074:  ldc.i4.1
    IL_0075:  stloc.s    CS$4$0004
//000470:                     (other.PreviousPosition - boid.PreviousPosition).Length <= NEIGHBORHOOD_SIZE &&
//000471:                     boid.ComputeAngle(other) <= 135)
//000472:                 {
//000473:                     summedPosition += other.PreviousPosition;
//000474:                     summedVelocity += other.PreviousVelocity;
//000475:                     numNearby++;
//000476: 
//000477:                     if ((other.PreviousPosition - boid.PreviousPosition).Length < MIN_DISTANCE_FROM_NEIGHBOR)
//000478:                     {
//000479:                         summedSeparation -= (other.PreviousPosition - boid.PreviousPosition);
//000480:                     }
//000481:                 }
//000482:             }
//000483: 
//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
//000485:             var rule2_separateFromNearby = summedSeparation;
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
//000487: 
//000488:             return
//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
//000499:             var v = new Vector3D();
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_0077:  ldloc.s    CS$4$0004
    IL_0079:  brtrue.s   IL_00e7

//000472:                 {
    IL_007b:  nop
//000473:                     summedPosition += other.PreviousPosition;
    IL_007c:  ldloc.1
    IL_007d:  ldloc.s    other
    IL_007f:  callvirt   instance valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.Boid::get_PreviousPosition()
    IL_0084:  call       valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D [PresentationCore]System.Windows.Media.Media3D.Vector3D::op_Addition(valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D,
                                                                                                                                                                valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D)
    IL_0089:  stloc.1
//000474:                     summedVelocity += other.PreviousVelocity;
    IL_008a:  ldloc.2
    IL_008b:  ldloc.s    other
    IL_008d:  callvirt   instance valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.Boid::get_PreviousVelocity()
    IL_0092:  call       valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D [PresentationCore]System.Windows.Media.Media3D.Vector3D::op_Addition(valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D,
                                                                                                                                                                valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D)
    IL_0097:  stloc.2
//000475:                     numNearby++;
    IL_0098:  ldloc.0
    IL_0099:  ldc.i4.1
    IL_009a:  add
    IL_009b:  stloc.0
//000476: 
//000477:                     if ((other.PreviousPosition - boid.PreviousPosition).Length < MIN_DISTANCE_FROM_NEIGHBOR)
    IL_009c:  ldloc.s    other
    IL_009e:  callvirt   instance valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.Boid::get_PreviousPosition()
    IL_00a3:  ldarg.1
    IL_00a4:  callvirt   instance valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.Boid::get_PreviousPosition()
    IL_00a9:  call       valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D [PresentationCore]System.Windows.Media.Media3D.Vector3D::op_Subtraction(valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D,
                                                                                                                                                                   valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D)
    IL_00ae:  stloc.s    CS$0$0003
    IL_00b0:  ldloca.s   CS$0$0003
    IL_00b2:  call       instance float64 [PresentationCore]System.Windows.Media.Media3D.Vector3D::get_Length()
    IL_00b7:  ldc.r8     20.
    IL_00c0:  clt
    IL_00c2:  ldc.i4.0
    IL_00c3:  ceq
    IL_00c5:  stloc.s    CS$4$0004
//000478:                     {
//000479:                         summedSeparation -= (other.PreviousPosition - boid.PreviousPosition);
//000480:                     }
//000481:                 }
//000482:             }
//000483: 
//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
//000485:             var rule2_separateFromNearby = summedSeparation;
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
//000487: 
//000488:             return
//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
//000499:             var v = new Vector3D();
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_00c7:  ldloc.s    CS$4$0004
    IL_00c9:  brtrue.s   IL_00e6

//000478:                     {
    IL_00cb:  nop
//000479:                         summedSeparation -= (other.PreviousPosition - boid.PreviousPosition);
    IL_00cc:  ldloc.3
    IL_00cd:  ldloc.s    other
    IL_00cf:  callvirt   instance valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.Boid::get_PreviousPosition()
    IL_00d4:  ldarg.1
    IL_00d5:  callvirt   instance valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.Boid::get_PreviousPosition()
    IL_00da:  call       valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D [PresentationCore]System.Windows.Media.Media3D.Vector3D::op_Subtraction(valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D,
                                                                                                                                                                   valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D)
    IL_00df:  call       valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D [PresentationCore]System.Windows.Media.Media3D.Vector3D::op_Subtraction(valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D,
                                                                                                                                                                   valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D)
    IL_00e4:  stloc.3
//000480:                     }
    IL_00e5:  nop
//000481:                 }
    IL_00e6:  nop
//000482:             }
    IL_00e7:  nop
//000483: 
//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
//000485:             var rule2_separateFromNearby = summedSeparation;
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
//000487: 
//000488:             return
//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
//000499:             var v = new Vector3D();
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_00e8:  ldloc.s    CS$7$0002
    IL_00ea:  ldc.i4.1
    IL_00eb:  add
    IL_00ec:  stloc.s    CS$7$0002
//000467:             foreach (var other in m_boidModels)
    IL_00ee:  ldloc.s    CS$7$0002
    IL_00f0:  ldloc.s    CS$6$0001
    IL_00f2:  ldlen
    IL_00f3:  conv.i4
    IL_00f4:  clt
    IL_00f6:  stloc.s    CS$4$0004
//000468:             {
//000469:                 if (other != boid && 
//000470:                     (other.PreviousPosition - boid.PreviousPosition).Length <= NEIGHBORHOOD_SIZE &&
//000471:                     boid.ComputeAngle(other) <= 135)
//000472:                 {
//000473:                     summedPosition += other.PreviousPosition;
//000474:                     summedVelocity += other.PreviousVelocity;
//000475:                     numNearby++;
//000476: 
//000477:                     if ((other.PreviousPosition - boid.PreviousPosition).Length < MIN_DISTANCE_FROM_NEIGHBOR)
//000478:                     {
//000479:                         summedSeparation -= (other.PreviousPosition - boid.PreviousPosition);
//000480:                     }
//000481:                 }
//000482:             }
//000483: 
//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
//000485:             var rule2_separateFromNearby = summedSeparation;
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
//000487: 
//000488:             return
//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
//000499:             var v = new Vector3D();
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_00f8:  ldloc.s    CS$4$0004
    IL_00fa:  brtrue     IL_002c

//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
    IL_00ff:  ldloc.0
    IL_0100:  ldc.i4.0
    IL_0101:  bgt.s      IL_010f

    IL_0103:  ldloca.s   CS$0$0003
    IL_0105:  initobj    [PresentationCore]System.Windows.Media.Media3D.Vector3D
    IL_010b:  ldloc.s    CS$0$0003
    IL_010d:  br.s       IL_0122

    IL_010f:  ldloc.1
    IL_0110:  ldarg.1
    IL_0111:  callvirt   instance valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.Boid::get_PreviousPosition()
    IL_0116:  call       valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D [PresentationCore]System.Windows.Media.Media3D.Vector3D::op_Subtraction(valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D,
                                                                                                                                                                   valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D)
    IL_011b:  ldloc.0
    IL_011c:  conv.r8
    IL_011d:  call       valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D [PresentationCore]System.Windows.Media.Media3D.Vector3D::op_Division(valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D,
                                                                                                                                                                float64)
    IL_0122:  ldc.r8     1.e-002
    IL_012b:  call       valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D [PresentationCore]System.Windows.Media.Media3D.Vector3D::op_Multiply(valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D,
                                                                                                                                                                float64)
    IL_0130:  stloc.s    rule1_flyTowardsCenter
//000485:             var rule2_separateFromNearby = summedSeparation;
    IL_0132:  ldloc.3
    IL_0133:  stloc.s    rule2_separateFromNearby
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
    IL_0135:  ldloc.0
    IL_0136:  ldc.i4.0
    IL_0137:  bgt.s      IL_0145

    IL_0139:  ldloca.s   CS$0$0003
    IL_013b:  initobj    [PresentationCore]System.Windows.Media.Media3D.Vector3D
    IL_0141:  ldloc.s    CS$0$0003
    IL_0143:  br.s       IL_0158

    IL_0145:  ldloc.2
    IL_0146:  ldarg.1
    IL_0147:  callvirt   instance valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.Boid::get_PreviousVelocity()
    IL_014c:  call       valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D [PresentationCore]System.Windows.Media.Media3D.Vector3D::op_Subtraction(valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D,
                                                                                                                                                                   valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D)
    IL_0151:  ldloc.0
    IL_0152:  conv.r8
    IL_0153:  call       valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D [PresentationCore]System.Windows.Media.Media3D.Vector3D::op_Division(valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D,
                                                                                                                                                                float64)
    IL_0158:  ldc.r8     1.e-002
    IL_0161:  call       valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D [PresentationCore]System.Windows.Media.Media3D.Vector3D::op_Multiply(valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D,
                                                                                                                                                                float64)
    IL_0166:  stloc.s    rule3_matchVelocities
//000487: 
//000488:             return
    IL_0168:  ldarg.0
    IL_0169:  ldfld      float64 ParallelBoids.MainWindow::m_rule1Weight
    IL_016e:  ldloc.s    rule1_flyTowardsCenter
    IL_0170:  call       valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D [PresentationCore]System.Windows.Media.Media3D.Vector3D::op_Multiply(float64,
                                                                                                                                                                valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D)
    IL_0175:  ldarg.0
    IL_0176:  ldfld      float64 ParallelBoids.MainWindow::m_rule2Weight
    IL_017b:  ldloc.s    rule2_separateFromNearby
    IL_017d:  call       valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D [PresentationCore]System.Windows.Media.Media3D.Vector3D::op_Multiply(float64,
                                                                                                                                                                valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D)
    IL_0182:  call       valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D [PresentationCore]System.Windows.Media.Media3D.Vector3D::op_Addition(valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D,
                                                                                                                                                                valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D)
    IL_0187:  ldarg.0
    IL_0188:  ldfld      float64 ParallelBoids.MainWindow::m_rule3Weight
    IL_018d:  ldloc.s    rule3_matchVelocities
    IL_018f:  call       valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D [PresentationCore]System.Windows.Media.Media3D.Vector3D::op_Multiply(float64,
                                                                                                                                                                valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D)
    IL_0194:  call       valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D [PresentationCore]System.Windows.Media.Media3D.Vector3D::op_Addition(valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D,
                                                                                                                                                                valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D)
    IL_0199:  stloc.s    CS$1$0000
    IL_019b:  br.s       IL_019d

//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
    IL_019d:  ldloc.s    CS$1$0000
    IL_019f:  ret
  } // end of method MainWindow::PrimaryRules_1_2_3

  .method private hidebysig instance valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D 
          Rule4_EncourageStayingWithinAviary(class ParallelBoids.Boid boid) cil managed
  {
    // Code size       495 (0x1ef)
    .maxstack  3
    .locals init ([0] valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D v,
             [1] valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D CS$1$0000,
             [2] valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D CS$0$0001,
             [3] bool CS$4$0002)
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
    IL_0000:  nop
//000499:             var v = new Vector3D();
    IL_0001:  ldloca.s   v
    IL_0003:  initobj    [PresentationCore]System.Windows.Media.Media3D.Vector3D
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
    IL_0009:  ldarg.1
    IL_000a:  callvirt   instance valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.Boid::get_PreviousPosition()
    IL_000f:  stloc.2
    IL_0010:  ldloca.s   CS$0$0001
    IL_0012:  call       instance float64 [PresentationCore]System.Windows.Media.Media3D.Vector3D::get_X()
    IL_0017:  ldarg.0
    IL_0018:  ldflda     valuetype [PresentationCore]System.Windows.Media.Media3D.Rect3D ParallelBoids.MainWindow::m_aviary
    IL_001d:  call       instance float64 [PresentationCore]System.Windows.Media.Media3D.Rect3D::get_X()
    IL_0022:  clt
    IL_0024:  ldc.i4.0
    IL_0025:  ceq
    IL_0027:  stloc.3
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_0028:  ldloc.3
    IL_0029:  brtrue.s   IL_004f

//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
    IL_002b:  ldloca.s   v
    IL_002d:  ldarg.0
    IL_002e:  ldflda     valuetype [PresentationCore]System.Windows.Media.Media3D.Rect3D ParallelBoids.MainWindow::m_aviary
    IL_0033:  call       instance float64 [PresentationCore]System.Windows.Media.Media3D.Rect3D::get_X()
    IL_0038:  ldarg.1
    IL_0039:  callvirt   instance valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.Boid::get_PreviousPosition()
    IL_003e:  stloc.2
    IL_003f:  ldloca.s   CS$0$0001
    IL_0041:  call       instance float64 [PresentationCore]System.Windows.Media.Media3D.Vector3D::get_X()
    IL_0046:  sub
    IL_0047:  call       instance void [PresentationCore]System.Windows.Media.Media3D.Vector3D::set_X(float64)
    IL_004c:  nop
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_004d:  br.s       IL_00ab

//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
    IL_004f:  ldarg.1
    IL_0050:  callvirt   instance valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.Boid::get_PreviousPosition()
    IL_0055:  stloc.2
    IL_0056:  ldloca.s   CS$0$0001
    IL_0058:  call       instance float64 [PresentationCore]System.Windows.Media.Media3D.Vector3D::get_X()
    IL_005d:  ldarg.0
    IL_005e:  ldflda     valuetype [PresentationCore]System.Windows.Media.Media3D.Rect3D ParallelBoids.MainWindow::m_aviary
    IL_0063:  call       instance float64 [PresentationCore]System.Windows.Media.Media3D.Rect3D::get_X()
    IL_0068:  ldarg.0
    IL_0069:  ldflda     valuetype [PresentationCore]System.Windows.Media.Media3D.Rect3D ParallelBoids.MainWindow::m_aviary
    IL_006e:  call       instance float64 [PresentationCore]System.Windows.Media.Media3D.Rect3D::get_SizeX()
    IL_0073:  add
    IL_0074:  cgt
    IL_0076:  ldc.i4.0
    IL_0077:  ceq
    IL_0079:  stloc.3
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_007a:  ldloc.3
    IL_007b:  brtrue.s   IL_00ab

//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
    IL_007d:  ldloca.s   v
    IL_007f:  ldarg.0
    IL_0080:  ldflda     valuetype [PresentationCore]System.Windows.Media.Media3D.Rect3D ParallelBoids.MainWindow::m_aviary
    IL_0085:  call       instance float64 [PresentationCore]System.Windows.Media.Media3D.Rect3D::get_X()
    IL_008a:  ldarg.0
    IL_008b:  ldflda     valuetype [PresentationCore]System.Windows.Media.Media3D.Rect3D ParallelBoids.MainWindow::m_aviary
    IL_0090:  call       instance float64 [PresentationCore]System.Windows.Media.Media3D.Rect3D::get_SizeX()
    IL_0095:  add
    IL_0096:  ldarg.1
    IL_0097:  callvirt   instance valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.Boid::get_PreviousPosition()
    IL_009c:  stloc.2
    IL_009d:  ldloca.s   CS$0$0001
    IL_009f:  call       instance float64 [PresentationCore]System.Windows.Media.Media3D.Vector3D::get_X()
    IL_00a4:  sub
    IL_00a5:  call       instance void [PresentationCore]System.Windows.Media.Media3D.Vector3D::set_X(float64)
    IL_00aa:  nop
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
    IL_00ab:  ldarg.1
    IL_00ac:  callvirt   instance valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.Boid::get_PreviousPosition()
    IL_00b1:  stloc.2
    IL_00b2:  ldloca.s   CS$0$0001
    IL_00b4:  call       instance float64 [PresentationCore]System.Windows.Media.Media3D.Vector3D::get_Y()
    IL_00b9:  ldarg.0
    IL_00ba:  ldflda     valuetype [PresentationCore]System.Windows.Media.Media3D.Rect3D ParallelBoids.MainWindow::m_aviary
    IL_00bf:  call       instance float64 [PresentationCore]System.Windows.Media.Media3D.Rect3D::get_Y()
    IL_00c4:  clt
    IL_00c6:  ldc.i4.0
    IL_00c7:  ceq
    IL_00c9:  stloc.3
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_00ca:  ldloc.3
    IL_00cb:  brtrue.s   IL_00dd

//000509:                 v.Y = m_speedLimit;
    IL_00cd:  ldloca.s   v
    IL_00cf:  ldarg.0
    IL_00d0:  ldfld      float64 ParallelBoids.MainWindow::m_speedLimit
    IL_00d5:  call       instance void [PresentationCore]System.Windows.Media.Media3D.Vector3D::set_Y(float64)
    IL_00da:  nop
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_00db:  br.s       IL_0139

//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
    IL_00dd:  ldarg.1
    IL_00de:  callvirt   instance valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.Boid::get_PreviousPosition()
    IL_00e3:  stloc.2
    IL_00e4:  ldloca.s   CS$0$0001
    IL_00e6:  call       instance float64 [PresentationCore]System.Windows.Media.Media3D.Vector3D::get_Y()
    IL_00eb:  ldarg.0
    IL_00ec:  ldflda     valuetype [PresentationCore]System.Windows.Media.Media3D.Rect3D ParallelBoids.MainWindow::m_aviary
    IL_00f1:  call       instance float64 [PresentationCore]System.Windows.Media.Media3D.Rect3D::get_Y()
    IL_00f6:  ldarg.0
    IL_00f7:  ldflda     valuetype [PresentationCore]System.Windows.Media.Media3D.Rect3D ParallelBoids.MainWindow::m_aviary
    IL_00fc:  call       instance float64 [PresentationCore]System.Windows.Media.Media3D.Rect3D::get_SizeY()
    IL_0101:  add
    IL_0102:  cgt
    IL_0104:  ldc.i4.0
    IL_0105:  ceq
    IL_0107:  stloc.3
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_0108:  ldloc.3
    IL_0109:  brtrue.s   IL_0139

//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
    IL_010b:  ldloca.s   v
    IL_010d:  ldarg.0
    IL_010e:  ldflda     valuetype [PresentationCore]System.Windows.Media.Media3D.Rect3D ParallelBoids.MainWindow::m_aviary
    IL_0113:  call       instance float64 [PresentationCore]System.Windows.Media.Media3D.Rect3D::get_Y()
    IL_0118:  ldarg.0
    IL_0119:  ldflda     valuetype [PresentationCore]System.Windows.Media.Media3D.Rect3D ParallelBoids.MainWindow::m_aviary
    IL_011e:  call       instance float64 [PresentationCore]System.Windows.Media.Media3D.Rect3D::get_SizeY()
    IL_0123:  add
    IL_0124:  ldarg.1
    IL_0125:  callvirt   instance valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.Boid::get_PreviousPosition()
    IL_012a:  stloc.2
    IL_012b:  ldloca.s   CS$0$0001
    IL_012d:  call       instance float64 [PresentationCore]System.Windows.Media.Media3D.Vector3D::get_Y()
    IL_0132:  sub
    IL_0133:  call       instance void [PresentationCore]System.Windows.Media.Media3D.Vector3D::set_Y(float64)
    IL_0138:  nop
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
    IL_0139:  ldarg.1
    IL_013a:  callvirt   instance valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.Boid::get_PreviousPosition()
    IL_013f:  stloc.2
    IL_0140:  ldloca.s   CS$0$0001
    IL_0142:  call       instance float64 [PresentationCore]System.Windows.Media.Media3D.Vector3D::get_Z()
    IL_0147:  ldarg.0
    IL_0148:  ldflda     valuetype [PresentationCore]System.Windows.Media.Media3D.Rect3D ParallelBoids.MainWindow::m_aviary
    IL_014d:  call       instance float64 [PresentationCore]System.Windows.Media.Media3D.Rect3D::get_Z()
    IL_0152:  clt
    IL_0154:  ldc.i4.0
    IL_0155:  ceq
    IL_0157:  stloc.3
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_0158:  ldloc.3
    IL_0159:  brtrue.s   IL_017f

//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
    IL_015b:  ldloca.s   v
    IL_015d:  ldarg.0
    IL_015e:  ldflda     valuetype [PresentationCore]System.Windows.Media.Media3D.Rect3D ParallelBoids.MainWindow::m_aviary
    IL_0163:  call       instance float64 [PresentationCore]System.Windows.Media.Media3D.Rect3D::get_Z()
    IL_0168:  ldarg.1
    IL_0169:  callvirt   instance valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.Boid::get_PreviousPosition()
    IL_016e:  stloc.2
    IL_016f:  ldloca.s   CS$0$0001
    IL_0171:  call       instance float64 [PresentationCore]System.Windows.Media.Media3D.Vector3D::get_Z()
    IL_0176:  sub
    IL_0177:  call       instance void [PresentationCore]System.Windows.Media.Media3D.Vector3D::set_Z(float64)
    IL_017c:  nop
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_017d:  br.s       IL_01db

//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
    IL_017f:  ldarg.1
    IL_0180:  callvirt   instance valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.Boid::get_PreviousPosition()
    IL_0185:  stloc.2
    IL_0186:  ldloca.s   CS$0$0001
    IL_0188:  call       instance float64 [PresentationCore]System.Windows.Media.Media3D.Vector3D::get_Z()
    IL_018d:  ldarg.0
    IL_018e:  ldflda     valuetype [PresentationCore]System.Windows.Media.Media3D.Rect3D ParallelBoids.MainWindow::m_aviary
    IL_0193:  call       instance float64 [PresentationCore]System.Windows.Media.Media3D.Rect3D::get_Z()
    IL_0198:  ldarg.0
    IL_0199:  ldflda     valuetype [PresentationCore]System.Windows.Media.Media3D.Rect3D ParallelBoids.MainWindow::m_aviary
    IL_019e:  call       instance float64 [PresentationCore]System.Windows.Media.Media3D.Rect3D::get_SizeZ()
    IL_01a3:  add
    IL_01a4:  cgt
    IL_01a6:  ldc.i4.0
    IL_01a7:  ceq
    IL_01a9:  stloc.3
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_01aa:  ldloc.3
    IL_01ab:  brtrue.s   IL_01db

//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
    IL_01ad:  ldloca.s   v
    IL_01af:  ldarg.0
    IL_01b0:  ldflda     valuetype [PresentationCore]System.Windows.Media.Media3D.Rect3D ParallelBoids.MainWindow::m_aviary
    IL_01b5:  call       instance float64 [PresentationCore]System.Windows.Media.Media3D.Rect3D::get_Z()
    IL_01ba:  ldarg.0
    IL_01bb:  ldflda     valuetype [PresentationCore]System.Windows.Media.Media3D.Rect3D ParallelBoids.MainWindow::m_aviary
    IL_01c0:  call       instance float64 [PresentationCore]System.Windows.Media.Media3D.Rect3D::get_SizeZ()
    IL_01c5:  add
    IL_01c6:  ldarg.1
    IL_01c7:  callvirt   instance valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.Boid::get_PreviousPosition()
    IL_01cc:  stloc.2
    IL_01cd:  ldloca.s   CS$0$0001
    IL_01cf:  call       instance float64 [PresentationCore]System.Windows.Media.Media3D.Vector3D::get_Z()
    IL_01d4:  sub
    IL_01d5:  call       instance void [PresentationCore]System.Windows.Media.Media3D.Vector3D::set_Z(float64)
    IL_01da:  nop
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
    IL_01db:  ldloc.0
    IL_01dc:  ldc.r8     0.20000000000000001
    IL_01e5:  call       valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D [PresentationCore]System.Windows.Media.Media3D.Vector3D::op_Multiply(valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D,
                                                                                                                                                                float64)
    IL_01ea:  stloc.1
    IL_01eb:  br.s       IL_01ed

//000520:         }
    IL_01ed:  ldloc.1
    IL_01ee:  ret
  } // end of method MainWindow::Rule4_EncourageStayingWithinAviary

  .method private hidebysig instance valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D 
          Rule5_TendendcyTowardsHome(class ParallelBoids.Boid boid) cil managed
  {
    // Code size       37 (0x25)
    .maxstack  2
    .locals init ([0] valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D CS$1$0000)
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
    IL_0000:  nop
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
    IL_0001:  ldarg.0
    IL_0002:  ldfld      valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.MainWindow::m_home
    IL_0007:  ldarg.1
    IL_0008:  callvirt   instance valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.Boid::get_PreviousPosition()
    IL_000d:  call       valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D [PresentationCore]System.Windows.Media.Media3D.Vector3D::op_Subtraction(valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D,
                                                                                                                                                                   valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D)
    IL_0012:  ldc.r8     1.e-002
    IL_001b:  call       valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D [PresentationCore]System.Windows.Media.Media3D.Vector3D::op_Multiply(valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D,
                                                                                                                                                                float64)
    IL_0020:  stloc.0
    IL_0021:  br.s       IL_0023

//000528:         }
    IL_0023:  ldloc.0
    IL_0024:  ret
  } // end of method MainWindow::Rule5_TendendcyTowardsHome

  .method private hidebysig static valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D 
          BoundVelocity(valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D velocity,
                        float64 speedLimit) cil managed
  {
    // Code size       38 (0x26)
    .maxstack  3
    .locals init ([0] valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D CS$1$0000)
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
    IL_0000:  nop
//000535:             return (velocity.Length > speedLimit) ?
    IL_0001:  ldarga.s   velocity
    IL_0003:  call       instance float64 [PresentationCore]System.Windows.Media.Media3D.Vector3D::get_Length()
    IL_0008:  ldarg.1
    IL_0009:  bgt.s      IL_000e

    IL_000b:  ldarg.0
    IL_000c:  br.s       IL_0021

    IL_000e:  ldarg.0
    IL_000f:  ldarga.s   velocity
    IL_0011:  call       instance float64 [PresentationCore]System.Windows.Media.Media3D.Vector3D::get_Length()
    IL_0016:  call       valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D [PresentationCore]System.Windows.Media.Media3D.Vector3D::op_Division(valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D,
                                                                                                                                                                float64)
    IL_001b:  ldarg.1
    IL_001c:  call       valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D [PresentationCore]System.Windows.Media.Media3D.Vector3D::op_Multiply(valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D,
                                                                                                                                                                float64)
    IL_0021:  stloc.0
    IL_0022:  br.s       IL_0024

//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
    IL_0024:  ldloc.0
    IL_0025:  ret
  } // end of method MainWindow::BoundVelocity

  .method public hidebysig newslot virtual final 
          instance void  InitializeComponent() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       45 (0x2d)
    .maxstack  3
    .locals init ([0] class [System]System.Uri resourceLocater,
             [1] bool CS$4$0000)
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Boids\Boids_CSharp\obj\Debug\MainWindow.g.cs' 
    IL_0000:  nop
    IL_0001:  ldarg.0
    IL_0002:  ldfld      bool ParallelBoids.MainWindow::_contentLoaded
    IL_0007:  ldc.i4.0
    IL_0008:  ceq
    IL_000a:  stloc.1
    IL_000b:  ldloc.1
    IL_000c:  brtrue.s   IL_0011

    IL_000e:  nop
    IL_000f:  br.s       IL_002c

    IL_0011:  ldarg.0
    IL_0012:  ldc.i4.1
    IL_0013:  stfld      bool ParallelBoids.MainWindow::_contentLoaded
    IL_0018:  ldstr      "/Boids;component/mainwindow.xaml"
    IL_001d:  ldc.i4.2
    IL_001e:  newobj     instance void [System]System.Uri::.ctor(string,
                                                                 valuetype [System]System.UriKind)
    IL_0023:  stloc.0
// Source File 'c:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Boids\Boids_CSharp\MainWindow.xaml' 
//000001: ?<!--
    IL_0024:  ldarg.0
    IL_0025:  ldloc.0
    IL_0026:  call       void [PresentationFramework]System.Windows.Application::LoadComponent(object,
                                                                                               class [System]System.Uri)
    IL_002b:  nop
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Boids\Boids_CSharp\obj\Debug\MainWindow.g.cs' 
    IL_002c:  ret
  } // end of method MainWindow::InitializeComponent

  .method private hidebysig newslot virtual final 
          instance void  System.Windows.Markup.IComponentConnector.Connect(int32 connectionId,
                                                                           object target) cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
    .override [System.Xaml]System.Windows.Markup.IComponentConnector::Connect
    // Code size       228 (0xe4)
    .maxstack  4
    .locals init ([0] int32 CS$4$0000)
    IL_0000:  nop
    IL_0001:  ldarg.1
    IL_0002:  stloc.0
    IL_0003:  ldloc.0
    IL_0004:  ldc.i4.1
    IL_0005:  sub
    IL_0006:  switch     ( 
                          IL_0020,
                          IL_00b2,
                          IL_00c0,
                          IL_00ce)
    IL_001b:  br         IL_00dc

// Source File 'c:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Boids\Boids_CSharp\MainWindow.xaml' 
//000009:         MouseWheel="Window_MouseWheel" MouseDoubleClick="Window_MouseDoubleClick" KeyDown="Window_KeyDown" MouseDown="Window_MouseDown" MouseMove="Window_MouseMove" Loaded="Window_Loaded">
    IL_0020:  ldarg.2
    IL_0021:  castclass  ParallelBoids.MainWindow
    IL_0026:  ldarg.0
    IL_0027:  ldftn      instance void ParallelBoids.MainWindow::Window_MouseWheel(object,
                                                                                   class [PresentationCore]System.Windows.Input.MouseWheelEventArgs)
    IL_002d:  newobj     instance void [PresentationCore]System.Windows.Input.MouseWheelEventHandler::.ctor(object,
                                                                                                            native int)
    IL_0032:  callvirt   instance void [PresentationCore]System.Windows.UIElement::add_MouseWheel(class [PresentationCore]System.Windows.Input.MouseWheelEventHandler)
    IL_0037:  nop
    IL_0038:  ldarg.2
    IL_0039:  castclass  ParallelBoids.MainWindow
    IL_003e:  ldarg.0
    IL_003f:  ldftn      instance void ParallelBoids.MainWindow::Window_MouseDoubleClick(object,
                                                                                         class [PresentationCore]System.Windows.Input.MouseButtonEventArgs)
    IL_0045:  newobj     instance void [PresentationCore]System.Windows.Input.MouseButtonEventHandler::.ctor(object,
                                                                                                             native int)
    IL_004a:  callvirt   instance void [PresentationFramework]System.Windows.Controls.Control::add_MouseDoubleClick(class [PresentationCore]System.Windows.Input.MouseButtonEventHandler)
    IL_004f:  nop
    IL_0050:  ldarg.2
    IL_0051:  castclass  ParallelBoids.MainWindow
    IL_0056:  ldarg.0
    IL_0057:  ldftn      instance void ParallelBoids.MainWindow::Window_KeyDown(object,
                                                                                class [PresentationCore]System.Windows.Input.KeyEventArgs)
    IL_005d:  newobj     instance void [PresentationCore]System.Windows.Input.KeyEventHandler::.ctor(object,
                                                                                                     native int)
    IL_0062:  callvirt   instance void [PresentationCore]System.Windows.UIElement::add_KeyDown(class [PresentationCore]System.Windows.Input.KeyEventHandler)
    IL_0067:  nop
    IL_0068:  ldarg.2
    IL_0069:  castclass  ParallelBoids.MainWindow
    IL_006e:  ldarg.0
    IL_006f:  ldftn      instance void ParallelBoids.MainWindow::Window_MouseDown(object,
                                                                                  class [PresentationCore]System.Windows.Input.MouseButtonEventArgs)
    IL_0075:  newobj     instance void [PresentationCore]System.Windows.Input.MouseButtonEventHandler::.ctor(object,
                                                                                                             native int)
    IL_007a:  callvirt   instance void [PresentationCore]System.Windows.UIElement::add_MouseDown(class [PresentationCore]System.Windows.Input.MouseButtonEventHandler)
    IL_007f:  nop
    IL_0080:  ldarg.2
    IL_0081:  castclass  ParallelBoids.MainWindow
    IL_0086:  ldarg.0
    IL_0087:  ldftn      instance void ParallelBoids.MainWindow::Window_MouseMove(object,
                                                                                  class [PresentationCore]System.Windows.Input.MouseEventArgs)
    IL_008d:  newobj     instance void [PresentationCore]System.Windows.Input.MouseEventHandler::.ctor(object,
                                                                                                       native int)
    IL_0092:  callvirt   instance void [PresentationCore]System.Windows.UIElement::add_MouseMove(class [PresentationCore]System.Windows.Input.MouseEventHandler)
    IL_0097:  nop
    IL_0098:  ldarg.2
    IL_0099:  castclass  ParallelBoids.MainWindow
    IL_009e:  ldarg.0
    IL_009f:  ldftn      instance void ParallelBoids.MainWindow::Window_Loaded(object,
                                                                               class [PresentationCore]System.Windows.RoutedEventArgs)
    IL_00a5:  newobj     instance void [PresentationCore]System.Windows.RoutedEventHandler::.ctor(object,
                                                                                                  native int)
    IL_00aa:  callvirt   instance void [PresentationFramework]System.Windows.FrameworkElement::add_Loaded(class [PresentationCore]System.Windows.RoutedEventHandler)
    IL_00af:  nop
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Boids\Boids_CSharp\obj\Debug\MainWindow.g.cs' 
    IL_00b0:  br.s       IL_00e3

    IL_00b2:  ldarg.0
    IL_00b3:  ldarg.2
    IL_00b4:  castclass  [PresentationFramework]System.Windows.Controls.Viewport3D
    IL_00b9:  stfld      class [PresentationFramework]System.Windows.Controls.Viewport3D ParallelBoids.MainWindow::viewport3D
    IL_00be:  br.s       IL_00e3

    IL_00c0:  ldarg.0
    IL_00c1:  ldarg.2
    IL_00c2:  castclass  [PresentationCore]System.Windows.Media.Media3D.PerspectiveCamera
    IL_00c7:  stfld      class [PresentationCore]System.Windows.Media.Media3D.PerspectiveCamera ParallelBoids.MainWindow::camMain
    IL_00cc:  br.s       IL_00e3

    IL_00ce:  ldarg.0
    IL_00cf:  ldarg.2
    IL_00d0:  castclass  [PresentationCore]System.Windows.Media.Media3D.AxisAngleRotation3D
    IL_00d5:  stfld      class [PresentationCore]System.Windows.Media.Media3D.AxisAngleRotation3D ParallelBoids.MainWindow::myAngleRotation
    IL_00da:  br.s       IL_00e3

    IL_00dc:  ldarg.0
    IL_00dd:  ldc.i4.1
    IL_00de:  stfld      bool ParallelBoids.MainWindow::_contentLoaded
    IL_00e3:  ret
  } // end of method MainWindow::System.Windows.Markup.IComponentConnector.Connect

  .method private hidebysig instance void 
          '<Window_Loaded>b__2'(object _,
                                class [System]System.Timers.ElapsedEventArgs __) cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       13 (0xd)
    .maxstack  8
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Boids\Boids_CSharp\MainWindow.xaml.cs' 
//000125:             m_renderTimer.Elapsed += (_, __) => m_renderSignal.Set();
    IL_0000:  ldarg.0
    IL_0001:  ldfld      class [mscorlib]System.Threading.AutoResetEvent ParallelBoids.MainWindow::m_renderSignal
    IL_0006:  callvirt   instance bool [mscorlib]System.Threading.EventWaitHandle::Set()
    IL_000b:  pop
//000126:             m_renderTimer.Enabled = true;
//000127: 
//000128:             // Start the rendering loop on a background thread
//000129:             Task.Factory.StartNew(RenderUpdateLoop);
//000130:         }
//000131: 
//000132:         /// <summary>Move the boids to random positions and velocities.</summary>
//000133:         /// <param name="rand">The random number generator to use.</param>
//000134:         private void RandomizeBoidPositionsAndVelocities(Random rand = null)
//000135:         {
//000136:             if (rand == null) rand = new Random();
//000137:             foreach (var boid in m_boidModels)
//000138:             {
//000139:                 boid.Position = new Vector3D(
//000140:                            rand.Next((int)m_aviary.X, (int)(m_aviary.X + m_aviary.SizeX)),
//000141:                            rand.Next((int)m_aviary.Y, (int)(m_aviary.Y + m_aviary.SizeY)),
//000142:                            rand.Next((int)m_aviary.Z, (int)(m_aviary.Z + m_aviary.SizeZ)));
//000143:                 boid.Velocity = new Vector3D(
//000144:                            rand.NextDouble() * 2 - 1,
//000145:                            rand.NextDouble() * 2 - 1,
//000146:                            rand.NextDouble() * 2 - 1);
//000147:             }
//000148:         }
//000149:         #endregion
//000150: 
//000151:         #region Window Interaction Controls
//000152:         /// <summary>Handle keydown events.</summary>
//000153:         /// <param name="sender">The sender.</param>
//000154:         /// <param name="e">The eventargs.</param>
//000155:         private void Window_KeyDown(object sender, KeyEventArgs e)
//000156:         {
//000157:             // If escape is pressed, normalize the window size
//000158:             if (e.Key == Key.Escape)
//000159:             {
//000160:                 Topmost = false;
//000161:                 WindowStyle = WindowStyle.ThreeDBorderWindow;
//000162:                 WindowState = WindowState.Normal;
//000163:             }
//000164: 
//000165:                 // If 'P' is pressed, switch back and forth between serial and parallel
//000166:             else if (e.Key == Key.P)
//000167:             {
//000168:                 int procCount = Environment.ProcessorCount;
//000169:                 m_parallelOptions.MaxDegreeOfParallelism = m_parallelOptions.MaxDegreeOfParallelism == 1 ? procCount : 1;
//000170:             }
//000171: 
//000172:                 // If 'b' is pressed, break/pause the scene until 'b' is pressed again
//000173:             else if (e.Key == Key.B)
//000174:             {
//000175:                 m_renderTimer.Enabled = !m_renderTimer.Enabled;
//000176:             }
//000177: 
//000178:                 // If 't' is pressed, toggle translucency to enable following just one boid
//000179:             else if (e.Key == Key.T)
//000180:             {
//000181:                 for (int i = 1; i < m_boidModels.Length; i++) m_boidModels[i].ToggleTranslucency();
//000182:             }
//000183: 
//000184:                 // If 'a' is pressed, turn auto-panning/zoom of the camera on/off
//000185:             else if (e.Key == Key.A)
//000186:             {
//000187:                 m_autoPanCamera = !m_autoPanCamera;
//000188:             }
//000189: 
//000190:                 // If up or down is pressed and we're in auto-pan mode, 
//000191:             else if ((e.Key == Key.Up || e.Key == Key.Down) && !m_autoPanCamera)
//000192:             {
//000193:                 Zoom(e.Key == Key.Up ? 1 : -1);
//000194:             }
//000195: 
//000196:                 // If 'r' is pressed, reset all of the boids to random positions and velocities
//000197:             else if (e.Key == Key.R)
//000198:             {
//000199:                 RandomizeBoidPositionsAndVelocities();
//000200:             }
//000201: 
//000202:                 // If 'h', display usage instructions to the user
//000203:             else if (e.Key == Key.H)
//000204:             {
//000205:                 string instructions =
//000206:                     "** Window Controls **" + Environment.NewLine +
//000207:                     "Auto-Camera Positioning: 'a'" + Environment.NewLine +
//000208:                     "Pan: Click Left And Drag" + Environment.NewLine +
//000209:                     "Zoom In / Out: Mousewheel (or) Up/Down Keys (or) Ctrl+Middle Mouse Move" + Environment.NewLine +
//000210:                     "Full Screen: Right Double-Click" + Environment.NewLine +
//000211:                     "Restore to Normal Window Size: Right Double-Click (or) Escape Key" + Environment.NewLine +
//000212:                     "Pause: 'b'" + Environment.NewLine +
//000213:                     "Translucency: 't'" + Environment.NewLine +
//000214:                     Environment.NewLine +
//000215:                     "** Boid Controls **" + Environment.NewLine +
//000216:                     "Scatter: Left Double-Click" + Environment.NewLine +
//000217:                     "Change Max Speed: Ctrl + Mousewheel" + Environment.NewLine +
//000218:                     "Randomize: 'r'" + Environment.NewLine +
//000219:                     Environment.NewLine +
//000220:                     "** Parallelism Controls **" + Environment.NewLine +
//000221:                     "Go Parallel: 'p'" + Environment.NewLine;
//000222:                 MessageBox.Show(this, instructions, "Instructions", MessageBoxButton.OK, MessageBoxImage.Information);
//000223:             }
//000224:         }
//000225: 
//000226:         /// <summary>Handle mousedown events.</summary>
//000227:         /// <param name="sender">The sender.</param>
//000228:         /// <param name="e">The eventargs.</param>
//000229:         private void Window_MouseDown(object sender, MouseButtonEventArgs e)
//000230:         {
//000231:             // Log the last mouse position
//000232:             _lastMousePosition = e.GetPosition(this);
//000233:         }
//000234: 
//000235:         /// <summary>Handle mousewheel events.</summary>
//000236:         /// <param name="sender">The sender.</param>
//000237:         /// <param name="e">The eventargs.</param>
//000238:         private void Window_MouseWheel(object sender, MouseWheelEventArgs e)
//000239:         {
//000240:             // If ctrl is pressed, change the max bird speed based on the number of mousewheel turns
//000241:             if ((Keyboard.Modifiers & ModifierKeys.Control) != 0)
//000242:             {
//000243:                 const int MIN_SPEED = 2, MAX_SPEED = 10;
//000244:                 if (e.Delta > 0 && m_speedLimit < MAX_SPEED) m_speedLimit++;
//000245:                 else if (e.Delta < 0 && m_speedLimit > MIN_SPEED) m_speedLimit--;
//000246:             }
//000247:                 // Otherwise, as long as we're not in auto-panning/zooming mode,
//000248:                 // zoom in or out based on the number of mousewheel turns
//000249:             else if (!m_autoPanCamera) Zoom(e.Delta / Mouse.MouseWheelDeltaForOneLine); 
//000250:         }
//000251: 
//000252:         /// <summary>Handle mousedoubleclick events.</summary>
//000253:         /// <param name="sender">The sender.</param>
//000254:         /// <param name="e">The eventargs.</param>
//000255:         private void Window_MouseDoubleClick(object sender, MouseButtonEventArgs e)
//000256:         {
//000257:             // If the right mouse button is double clicked, alternate between maximized and normal view
//000258:             if (e.ChangedButton == MouseButton.Right)
//000259:             {
//000260:                 if (WindowState == WindowState.Maximized)
//000261:                 {
//000262:                     Topmost = false;
//000263:                     WindowStyle = WindowStyle.ThreeDBorderWindow;
//000264:                     WindowState = WindowState.Normal;
//000265:                 }
//000266:                 else
//000267:                 {
//000268:                     Topmost = true;
//000269:                     WindowStyle = WindowStyle.None;
//000270:                     WindowState = WindowState.Maximized;
//000271:                 }
//000272:             }
//000273:                 // If the left mouse button is double clicked, scatter the boids
//000274:             else if (e.ChangedButton == MouseButton.Left)
//000275:             {
//000276:                 Scatter();
//000277:             }
//000278:         }
//000279: 
//000280:         /// <summary>Scatter the boids.</summary>
//000281:         private void Scatter()
//000282:         {
//000283:             // Start scatterring if a scatter isn't already in process
//000284:             if (m_scatterTimer == null)
//000285:             {
//000286:                 // Ka'boom.  Something scares the boids.
//000287:                 SystemSounds.Hand.Play();
//000288: 
//000289:                 // Store original settings
//000290:                 var origHome = m_home;
//000291:                 var origRule1Weight = m_rule1Weight;
//000292:                 var origRule2Weight = m_rule2Weight;
//000293:                 var origRule4Weight = m_rule4Weight;
//000294:                 var origRule5Weight = m_rule5Weight;
//000295: 
//000296:                 // Create new scatter settings
//000297:                 m_home = new Vector3D(0, 0, 0);
//000298:                 m_rule1Weight = origRule1Weight * -5;
//000299:                 m_rule2Weight = origRule2Weight * 2;
//000300:                 m_rule4Weight = 0;
//000301:                 m_rule5Weight = origRule5Weight * -5;
//000302: 
//000303:                 // Start a timer to restore the original settings
//000304:                 m_scatterTimer = new Timer(_ =>
//000305:                 {
//000306:                     // Restore the original settings
//000307:                     m_home = origHome;
//000308:                     m_rule1Weight = origRule1Weight;
//000309:                     m_rule2Weight = origRule2Weight;
//000310:                     m_rule4Weight = origRule4Weight;
//000311:                     m_rule5Weight = origRule5Weight;
//000312: 
//000313:                     // Clean up the timer
//000314:                     m_scatterTimer.Dispose();
//000315:                     m_scatterTimer = null;
//000316:                 }, null, SCATTER_TIME, -1);
//000317:             }
//000318:         }
//000319: 
//000320:         /// <summary>Handle mousemove events.</summary>
//000321:         /// <param name="sender">The sender.</param>
//000322:         /// <param name="e">The eventargs.</param>
//000323:         private void Window_MouseMove(object sender, MouseEventArgs e)
//000324:         {
//000325:             // If we're not auto-panning
//000326:             if (!m_autoPanCamera)
//000327:             {
//000328:                 // Get the new mouse position and compute the difference from the previous
//000329:                 var newPosition = e.GetPosition(this);
//000330:                 var diff = _lastMousePosition - newPosition;
//000331: 
//000332:                 // If the left mouse position was pressed, pan based on the x/y differences
//000333:                 if (e.LeftButton == MouseButtonState.Pressed)
//000334:                 {
//000335:                     camMain.Position = new Point3D(camMain.Position.X + diff.X * .4, camMain.Position.Y - diff.Y * .4, camMain.Position.Z);
//000336:                 }
//000337:                     // If the middle button was pressed, zoom based on the y difference
//000338:                 else if (e.MiddleButton == MouseButtonState.Pressed)
//000339:                 {
//000340:                     Zoom((int)diff.Y);
//000341:                 }
//000342: 
//000343:                 // Store the new position
//000344:                 _lastMousePosition = newPosition;
//000345:             }
//000346:         }
//000347: 
//000348:         /// <summary>Zoom in or out based on the specified degree of zoom.</summary>
//000349:         /// <param name="amountOfChange">Amount to zoom in (positive) or out (negative).</param>
//000350:         private void Zoom(int amountOfChange)
//000351:         {
//000352:             const int ZOOM_FACTOR = 3;
//000353:             camMain.Position = Point3D.Add(camMain.Position, camMain.LookDirection * amountOfChange * ZOOM_FACTOR);
//000354:         }
//000355:         #endregion
//000356: 
//000357:         #region Step and Render
//000358:         /// <summary>Runs the rendering loop.</summary>
//000359:         private void RenderUpdateLoop()
//000360:         {
//000361:             // Loop forever...
//000362:             while (true)
//000363:             {
//000364:                 // Wait to receive a signal that we should render another frame
//000365:                 m_renderSignal.WaitOne();
//000366: 
//000367:                 // Start timing.
//000368:                 m_frameStopwatch.Restart();
//000369: 
//000370:                 // Update the positions and velocities of all of the boids.
//000371:                 StepBoids();
//000372: 
//000373:                 // Update our rendering stats for display to the user
//000374:                 m_totalRenderingMillisecondsSinceLastUserPresentation += m_frameStopwatch.ElapsedMilliseconds;
//000375:                 m_numRendersSinceLastUserPresentation++;
//000376: 
//000377:                 // Render the boids to the UI
//000378:                 Dispatcher.Invoke((Action)RenderBoids, DispatcherPriority.Send, null);
//000379:             }
//000380:         }
//000381: 
//000382:         /// <summary>Step the boids one step, updating their velocities and positions.</summary>
//000383:         private void StepBoids()
//000384:         {
//000385:             // Store the current velocities and positions so that we can operate on an immutable copy
//000386:             foreach (var boid in m_boidModels) boid.StorePositionAndVelocityIntoPrevious();
//000387: 
//000388:             // For each boid, analyze how the various boid rules influence its velocity and position,
//000389:             // then store this new information.  After this step, we'll be able to render the boids.
//000390:             Parallel.ForEach(m_boidModels, m_parallelOptions, boid =>
//000391:             {
//000392:                 var v1_2_3 = PrimaryRules_1_2_3(boid); // weights factored in already in PrimaryRules
//000393:                 var v4 = m_rule4Weight * Rule4_EncourageStayingWithinAviary(boid);
//000394:                 var v5 = m_rule5Weight * Rule5_TendendcyTowardsHome(boid);
//000395: 
//000396:                 boid.Velocity = BoundVelocity(boid.PreviousVelocity + v1_2_3 + v4 + v5, m_speedLimit);
//000397:                 boid.Velocity.Normalize();
//000398: 
//000399:                 var tmpPosition = boid.PreviousPosition + boid.Velocity;
//000400:                 if (tmpPosition.Y >= 0) boid.Position = tmpPosition;
//000401:             });
//000402:         }
//000403: 
//000404:         /// <summary>Render the boids.</summary>
//000405:         private void RenderBoids()
//000406:         {
//000407:             // Make sure the boids are all positioned and pointing correctly
//000408:             foreach (var boid in m_boidModels) boid.TransformByPositionAndVelocity();
//000409: 
//000410:             // Every once in a while, update the user-displayed stats on timings
//000411:             var now = DateTimeOffset.Now;
//000412:             if (now >= m_nextUserPresentation)
//000413:             {
//000414:                 Title = string.Format("Procs: {0}, Time: {1:F2}", m_parallelOptions.MaxDegreeOfParallelism, 
//000415:                     m_numRendersSinceLastUserPresentation > 0 ? 
//000416:                     m_totalRenderingMillisecondsSinceLastUserPresentation / (double)m_numRendersSinceLastUserPresentation : 
//000417:                     0);
//000418:                 m_nextUserPresentation = now.AddSeconds(1);
//000419:                 m_numRendersSinceLastUserPresentation = 0;
//000420:                 m_totalRenderingMillisecondsSinceLastUserPresentation = 0;
//000421:             }
//000422: 
//000423:             // If we're in auto-panning mode, move the camera appropriately
//000424:             if (m_autoPanCamera)
//000425:             {
//000426:                 // Compute the maximum Z value of all of the boids and the center of their mass
//000427:                 double maxZ = double.MinValue;
//000428:                 Vector3D totalPos = new Vector3D();
//000429:                 foreach (var boid in m_boidModels)
//000430:                 {
//000431:                     if (boid.Position.Z > maxZ) maxZ = boid.Position.Z;
//000432:                     totalPos += boid.Position;
//000433:                 }
//000434:                 var newCameraPos = totalPos / m_boidModels.Length;
//000435:                 
//000436:                 // Move the camera to point at the center of the boids, a ways back from the max boid's Z
//000437:                 const int CAMERA_DISTANCE_FROM_MAXZ = 100;
//000438:                 const double CAMERA_SPEED_LIMIT = .01;
//000439:                 var newPos = new Point3D(newCameraPos.X, newCameraPos.Y, maxZ + CAMERA_DISTANCE_FROM_MAXZ);
//000440:                 var cameraVelocity = newPos - camMain.Position;
//000441:                 camMain.Position = camMain.Position + (cameraVelocity * CAMERA_SPEED_LIMIT);
//000442:             }
//000443:         }
//000444:         #endregion
//000445: 
//000446:         #region Boid Rules
//000447:         /// <summary>Run the three primary rules of boidom.</summary>
//000448:         /// <param name="boid">The boid to process.</param>
//000449:         /// <returns>The velocity vector resulting from the three primary rules and their associated weights.</returns>
//000450:         private Vector3D PrimaryRules_1_2_3(Boid boid)
//000451:         {
//000452:             int numNearby = 0;
//000453:             Vector3D summedPosition = new Vector3D();
//000454:             Vector3D summedVelocity = new Vector3D();
//000455:             Vector3D summedSeparation = new Vector3D();
//000456: 
//000457:             // For rule #1, we want the boid to fly towards the center of all of those in its neighborhood.
//000458:             // We find all of those boids, average their positions, and create a velocity vector to move the
//000459:             // boid a bit of the way there.
//000460: 
//000461:             // For rule #2, we want the boid to move away from each other boid it's a bit too close to.
//000462:             // Find all of those boids in its immediate vicinity, and push it away.
//000463: 
//000464:             // For rule #3, we want the boid to match velocities with those boids in its neighborhood.
//000465:             // Sum their velocities, find the average, and move this boid's velocity a bit in that direction.
//000466: 
//000467:             foreach (var other in m_boidModels)
//000468:             {
//000469:                 if (other != boid && 
//000470:                     (other.PreviousPosition - boid.PreviousPosition).Length <= NEIGHBORHOOD_SIZE &&
//000471:                     boid.ComputeAngle(other) <= 135)
//000472:                 {
//000473:                     summedPosition += other.PreviousPosition;
//000474:                     summedVelocity += other.PreviousVelocity;
//000475:                     numNearby++;
//000476: 
//000477:                     if ((other.PreviousPosition - boid.PreviousPosition).Length < MIN_DISTANCE_FROM_NEIGHBOR)
//000478:                     {
//000479:                         summedSeparation -= (other.PreviousPosition - boid.PreviousPosition);
//000480:                     }
//000481:                 }
//000482:             }
//000483: 
//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
//000485:             var rule2_separateFromNearby = summedSeparation;
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
//000487: 
//000488:             return
//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
//000499:             var v = new Vector3D();
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_000c:  ret
  } // end of method MainWindow::'<Window_Loaded>b__2'

  .method private hidebysig instance void 
          '<StepBoids>b__8'(class ParallelBoids.Boid boid) cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       156 (0x9c)
    .maxstack  3
    .locals init ([0] valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D v1_2_3,
             [1] valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D v4,
             [2] valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D v5,
             [3] valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D tmpPosition,
             [4] valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D CS$0$0000,
             [5] bool CS$4$0001)
//000391:             {
    IL_0000:  nop
//000392:                 var v1_2_3 = PrimaryRules_1_2_3(boid); // weights factored in already in PrimaryRules
    IL_0001:  ldarg.0
    IL_0002:  ldarg.1
    IL_0003:  call       instance valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.MainWindow::PrimaryRules_1_2_3(class ParallelBoids.Boid)
    IL_0008:  stloc.0
//000393:                 var v4 = m_rule4Weight * Rule4_EncourageStayingWithinAviary(boid);
    IL_0009:  ldarg.0
    IL_000a:  ldfld      float64 ParallelBoids.MainWindow::m_rule4Weight
    IL_000f:  ldarg.0
    IL_0010:  ldarg.1
    IL_0011:  call       instance valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.MainWindow::Rule4_EncourageStayingWithinAviary(class ParallelBoids.Boid)
    IL_0016:  call       valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D [PresentationCore]System.Windows.Media.Media3D.Vector3D::op_Multiply(float64,
                                                                                                                                                                valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D)
    IL_001b:  stloc.1
//000394:                 var v5 = m_rule5Weight * Rule5_TendendcyTowardsHome(boid);
    IL_001c:  ldarg.0
    IL_001d:  ldfld      float64 ParallelBoids.MainWindow::m_rule5Weight
    IL_0022:  ldarg.0
    IL_0023:  ldarg.1
    IL_0024:  call       instance valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.MainWindow::Rule5_TendendcyTowardsHome(class ParallelBoids.Boid)
    IL_0029:  call       valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D [PresentationCore]System.Windows.Media.Media3D.Vector3D::op_Multiply(float64,
                                                                                                                                                                valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D)
    IL_002e:  stloc.2
//000395: 
//000396:                 boid.Velocity = BoundVelocity(boid.PreviousVelocity + v1_2_3 + v4 + v5, m_speedLimit);
    IL_002f:  ldarg.1
    IL_0030:  ldarg.1
    IL_0031:  callvirt   instance valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.Boid::get_PreviousVelocity()
    IL_0036:  ldloc.0
    IL_0037:  call       valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D [PresentationCore]System.Windows.Media.Media3D.Vector3D::op_Addition(valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D,
                                                                                                                                                                valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D)
    IL_003c:  ldloc.1
    IL_003d:  call       valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D [PresentationCore]System.Windows.Media.Media3D.Vector3D::op_Addition(valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D,
                                                                                                                                                                valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D)
    IL_0042:  ldloc.2
    IL_0043:  call       valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D [PresentationCore]System.Windows.Media.Media3D.Vector3D::op_Addition(valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D,
                                                                                                                                                                valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D)
    IL_0048:  ldarg.0
    IL_0049:  ldfld      float64 ParallelBoids.MainWindow::m_speedLimit
    IL_004e:  call       valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.MainWindow::BoundVelocity(valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D,
                                                                                                                                   float64)
    IL_0053:  callvirt   instance void ParallelBoids.Boid::set_Velocity(valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D)
    IL_0058:  nop
//000397:                 boid.Velocity.Normalize();
    IL_0059:  ldarg.1
    IL_005a:  callvirt   instance valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.Boid::get_Velocity()
    IL_005f:  stloc.s    CS$0$0000
    IL_0061:  ldloca.s   CS$0$0000
    IL_0063:  call       instance void [PresentationCore]System.Windows.Media.Media3D.Vector3D::Normalize()
    IL_0068:  nop
//000398: 
//000399:                 var tmpPosition = boid.PreviousPosition + boid.Velocity;
    IL_0069:  ldarg.1
    IL_006a:  callvirt   instance valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.Boid::get_PreviousPosition()
    IL_006f:  ldarg.1
    IL_0070:  callvirt   instance valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D ParallelBoids.Boid::get_Velocity()
    IL_0075:  call       valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D [PresentationCore]System.Windows.Media.Media3D.Vector3D::op_Addition(valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D,
                                                                                                                                                                valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D)
    IL_007a:  stloc.3
//000400:                 if (tmpPosition.Y >= 0) boid.Position = tmpPosition;
    IL_007b:  ldloca.s   tmpPosition
    IL_007d:  call       instance float64 [PresentationCore]System.Windows.Media.Media3D.Vector3D::get_Y()
    IL_0082:  ldc.r8     0.0
    IL_008b:  clt.un
    IL_008d:  stloc.s    CS$4$0001
//000401:             });
//000402:         }
//000403: 
//000404:         /// <summary>Render the boids.</summary>
//000405:         private void RenderBoids()
//000406:         {
//000407:             // Make sure the boids are all positioned and pointing correctly
//000408:             foreach (var boid in m_boidModels) boid.TransformByPositionAndVelocity();
//000409: 
//000410:             // Every once in a while, update the user-displayed stats on timings
//000411:             var now = DateTimeOffset.Now;
//000412:             if (now >= m_nextUserPresentation)
//000413:             {
//000414:                 Title = string.Format("Procs: {0}, Time: {1:F2}", m_parallelOptions.MaxDegreeOfParallelism, 
//000415:                     m_numRendersSinceLastUserPresentation > 0 ? 
//000416:                     m_totalRenderingMillisecondsSinceLastUserPresentation / (double)m_numRendersSinceLastUserPresentation : 
//000417:                     0);
//000418:                 m_nextUserPresentation = now.AddSeconds(1);
//000419:                 m_numRendersSinceLastUserPresentation = 0;
//000420:                 m_totalRenderingMillisecondsSinceLastUserPresentation = 0;
//000421:             }
//000422: 
//000423:             // If we're in auto-panning mode, move the camera appropriately
//000424:             if (m_autoPanCamera)
//000425:             {
//000426:                 // Compute the maximum Z value of all of the boids and the center of their mass
//000427:                 double maxZ = double.MinValue;
//000428:                 Vector3D totalPos = new Vector3D();
//000429:                 foreach (var boid in m_boidModels)
//000430:                 {
//000431:                     if (boid.Position.Z > maxZ) maxZ = boid.Position.Z;
//000432:                     totalPos += boid.Position;
//000433:                 }
//000434:                 var newCameraPos = totalPos / m_boidModels.Length;
//000435:                 
//000436:                 // Move the camera to point at the center of the boids, a ways back from the max boid's Z
//000437:                 const int CAMERA_DISTANCE_FROM_MAXZ = 100;
//000438:                 const double CAMERA_SPEED_LIMIT = .01;
//000439:                 var newPos = new Point3D(newCameraPos.X, newCameraPos.Y, maxZ + CAMERA_DISTANCE_FROM_MAXZ);
//000440:                 var cameraVelocity = newPos - camMain.Position;
//000441:                 camMain.Position = camMain.Position + (cameraVelocity * CAMERA_SPEED_LIMIT);
//000442:             }
//000443:         }
//000444:         #endregion
//000445: 
//000446:         #region Boid Rules
//000447:         /// <summary>Run the three primary rules of boidom.</summary>
//000448:         /// <param name="boid">The boid to process.</param>
//000449:         /// <returns>The velocity vector resulting from the three primary rules and their associated weights.</returns>
//000450:         private Vector3D PrimaryRules_1_2_3(Boid boid)
//000451:         {
//000452:             int numNearby = 0;
//000453:             Vector3D summedPosition = new Vector3D();
//000454:             Vector3D summedVelocity = new Vector3D();
//000455:             Vector3D summedSeparation = new Vector3D();
//000456: 
//000457:             // For rule #1, we want the boid to fly towards the center of all of those in its neighborhood.
//000458:             // We find all of those boids, average their positions, and create a velocity vector to move the
//000459:             // boid a bit of the way there.
//000460: 
//000461:             // For rule #2, we want the boid to move away from each other boid it's a bit too close to.
//000462:             // Find all of those boids in its immediate vicinity, and push it away.
//000463: 
//000464:             // For rule #3, we want the boid to match velocities with those boids in its neighborhood.
//000465:             // Sum their velocities, find the average, and move this boid's velocity a bit in that direction.
//000466: 
//000467:             foreach (var other in m_boidModels)
//000468:             {
//000469:                 if (other != boid && 
//000470:                     (other.PreviousPosition - boid.PreviousPosition).Length <= NEIGHBORHOOD_SIZE &&
//000471:                     boid.ComputeAngle(other) <= 135)
//000472:                 {
//000473:                     summedPosition += other.PreviousPosition;
//000474:                     summedVelocity += other.PreviousVelocity;
//000475:                     numNearby++;
//000476: 
//000477:                     if ((other.PreviousPosition - boid.PreviousPosition).Length < MIN_DISTANCE_FROM_NEIGHBOR)
//000478:                     {
//000479:                         summedSeparation -= (other.PreviousPosition - boid.PreviousPosition);
//000480:                     }
//000481:                 }
//000482:             }
//000483: 
//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
//000485:             var rule2_separateFromNearby = summedSeparation;
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
//000487: 
//000488:             return
//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
//000499:             var v = new Vector3D();
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_008f:  ldloc.s    CS$4$0001
    IL_0091:  brtrue.s   IL_009b

//000400:                 if (tmpPosition.Y >= 0) boid.Position = tmpPosition;
    IL_0093:  ldarg.1
    IL_0094:  ldloc.3
    IL_0095:  callvirt   instance void ParallelBoids.Boid::set_Position(valuetype [PresentationCore]System.Windows.Media.Media3D.Vector3D)
    IL_009a:  nop
//000401:             });
//000402:         }
//000403: 
//000404:         /// <summary>Render the boids.</summary>
//000405:         private void RenderBoids()
//000406:         {
//000407:             // Make sure the boids are all positioned and pointing correctly
//000408:             foreach (var boid in m_boidModels) boid.TransformByPositionAndVelocity();
//000409: 
//000410:             // Every once in a while, update the user-displayed stats on timings
//000411:             var now = DateTimeOffset.Now;
//000412:             if (now >= m_nextUserPresentation)
//000413:             {
//000414:                 Title = string.Format("Procs: {0}, Time: {1:F2}", m_parallelOptions.MaxDegreeOfParallelism, 
//000415:                     m_numRendersSinceLastUserPresentation > 0 ? 
//000416:                     m_totalRenderingMillisecondsSinceLastUserPresentation / (double)m_numRendersSinceLastUserPresentation : 
//000417:                     0);
//000418:                 m_nextUserPresentation = now.AddSeconds(1);
//000419:                 m_numRendersSinceLastUserPresentation = 0;
//000420:                 m_totalRenderingMillisecondsSinceLastUserPresentation = 0;
//000421:             }
//000422: 
//000423:             // If we're in auto-panning mode, move the camera appropriately
//000424:             if (m_autoPanCamera)
//000425:             {
//000426:                 // Compute the maximum Z value of all of the boids and the center of their mass
//000427:                 double maxZ = double.MinValue;
//000428:                 Vector3D totalPos = new Vector3D();
//000429:                 foreach (var boid in m_boidModels)
//000430:                 {
//000431:                     if (boid.Position.Z > maxZ) maxZ = boid.Position.Z;
//000432:                     totalPos += boid.Position;
//000433:                 }
//000434:                 var newCameraPos = totalPos / m_boidModels.Length;
//000435:                 
//000436:                 // Move the camera to point at the center of the boids, a ways back from the max boid's Z
//000437:                 const int CAMERA_DISTANCE_FROM_MAXZ = 100;
//000438:                 const double CAMERA_SPEED_LIMIT = .01;
//000439:                 var newPos = new Point3D(newCameraPos.X, newCameraPos.Y, maxZ + CAMERA_DISTANCE_FROM_MAXZ);
//000440:                 var cameraVelocity = newPos - camMain.Position;
//000441:                 camMain.Position = camMain.Position + (cameraVelocity * CAMERA_SPEED_LIMIT);
//000442:             }
//000443:         }
//000444:         #endregion
//000445: 
//000446:         #region Boid Rules
//000447:         /// <summary>Run the three primary rules of boidom.</summary>
//000448:         /// <param name="boid">The boid to process.</param>
//000449:         /// <returns>The velocity vector resulting from the three primary rules and their associated weights.</returns>
//000450:         private Vector3D PrimaryRules_1_2_3(Boid boid)
//000451:         {
//000452:             int numNearby = 0;
//000453:             Vector3D summedPosition = new Vector3D();
//000454:             Vector3D summedVelocity = new Vector3D();
//000455:             Vector3D summedSeparation = new Vector3D();
//000456: 
//000457:             // For rule #1, we want the boid to fly towards the center of all of those in its neighborhood.
//000458:             // We find all of those boids, average their positions, and create a velocity vector to move the
//000459:             // boid a bit of the way there.
//000460: 
//000461:             // For rule #2, we want the boid to move away from each other boid it's a bit too close to.
//000462:             // Find all of those boids in its immediate vicinity, and push it away.
//000463: 
//000464:             // For rule #3, we want the boid to match velocities with those boids in its neighborhood.
//000465:             // Sum their velocities, find the average, and move this boid's velocity a bit in that direction.
//000466: 
//000467:             foreach (var other in m_boidModels)
//000468:             {
//000469:                 if (other != boid && 
//000470:                     (other.PreviousPosition - boid.PreviousPosition).Length <= NEIGHBORHOOD_SIZE &&
//000471:                     boid.ComputeAngle(other) <= 135)
//000472:                 {
//000473:                     summedPosition += other.PreviousPosition;
//000474:                     summedVelocity += other.PreviousVelocity;
//000475:                     numNearby++;
//000476: 
//000477:                     if ((other.PreviousPosition - boid.PreviousPosition).Length < MIN_DISTANCE_FROM_NEIGHBOR)
//000478:                     {
//000479:                         summedSeparation -= (other.PreviousPosition - boid.PreviousPosition);
//000480:                     }
//000481:                 }
//000482:             }
//000483: 
//000484:             var rule1_flyTowardsCenter = (numNearby > 0 ? (summedPosition - boid.PreviousPosition) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_POSITION;
//000485:             var rule2_separateFromNearby = summedSeparation;
//000486:             var rule3_matchVelocities = (numNearby > 0 ? (summedVelocity - boid.PreviousVelocity) / numNearby : new Vector3D()) * PERCENTAGE_TO_MOVE_TOWARDS_AVERAGE_VELOCITY;
//000487: 
//000488:             return
//000489:                 (m_rule1Weight * rule1_flyTowardsCenter) +
//000490:                 (m_rule2Weight * rule2_separateFromNearby) +
//000491:                 (m_rule3Weight * rule3_matchVelocities);
//000492:         }
//000493: 
//000494:         /// <summary>Encourage a boid to stay within its aviary.</summary>
//000495:         /// <param name="boid">The boid.</param>
//000496:         /// <returns>The velocity vector encouraging a boid to stay within its bounds.</returns>
//000497:         private Vector3D Rule4_EncourageStayingWithinAviary(Boid boid)
//000498:         {
//000499:             var v = new Vector3D();
//000500: 
//000501:             // X
//000502:             if (boid.PreviousPosition.X < m_aviary.X)
//000503:                 v.X = m_aviary.X - boid.PreviousPosition.X;
//000504:             else if (boid.PreviousPosition.X > m_aviary.X + m_aviary.SizeX)
//000505:                 v.X = (m_aviary.X + m_aviary.SizeX) - boid.PreviousPosition.X;
//000506: 
//000507:             // Y
//000508:             if (boid.PreviousPosition.Y < m_aviary.Y)
//000509:                 v.Y = m_speedLimit;
//000510:             else if (boid.PreviousPosition.Y > m_aviary.Y + m_aviary.SizeY)
//000511:                 v.Y = (m_aviary.Y + m_aviary.SizeY) - boid.PreviousPosition.Y;
//000512: 
//000513:             // Z
//000514:             if (boid.PreviousPosition.Z < m_aviary.Z)
//000515:                 v.Z = m_aviary.Z - boid.PreviousPosition.Z;
//000516:             else if (boid.PreviousPosition.Z > m_aviary.Z + m_aviary.SizeZ)
//000517:                 v.Z = (m_aviary.Z + m_aviary.SizeZ) - boid.PreviousPosition.Z;
//000518: 
//000519:             return v * PERCENTAGE_TO_MOVE_TOWARDS_INBOUNDS;
//000520:         }
//000521: 
//000522:         /// <summary>Encourage a boid to stay close to its home position.</summary>
//000523:         /// <param name="boid">The boid.</param>
//000524:         /// <returns>The velocity vector encouraging a boid to stay at home.</returns>
//000525:         private Vector3D Rule5_TendendcyTowardsHome(Boid boid)
//000526:         {
//000527:             return (m_home - boid.PreviousPosition) * PERCENTAGE_TO_MOVE_TOWARDS_HOME;
//000528:         }
//000529: 
//000530:         /// <summary>Bound a velocity to the max speed limit.</summary>
//000531:         /// <param name="velocity">The velocity to bound.</param>
//000532:         /// <returns>The bounded velocity.</returns>
//000533:         private static Vector3D BoundVelocity(Vector3D velocity, double speedLimit)
//000534:         {
//000535:             return (velocity.Length > speedLimit) ?
//000536:                 (velocity / velocity.Length) * speedLimit : 
//000537:                 velocity;
//000538:         }
//000539:         #endregion
//000540:     }
//000541: }
    IL_009b:  ret
  } // end of method MainWindow::'<StepBoids>b__8'

} // end of class ParallelBoids.MainWindow


// =============================================================

// *********** DISASSEMBLY COMPLETE ***********************
