
//  Microsoft (R) .NET Framework IL Disassembler.  Version 4.0.30319.1
//  Copyright (c) Microsoft Corporation.  All rights reserved.



// Metadata version: v4.0.30319
.assembly extern mscorlib
{
  .publickeytoken = (B7 7A 5C 56 19 34 E0 89 )                         // .z\V.4..
  .ver 4:0:0:0
}
.assembly extern Microsoft.VisualBasic
{
  .publickeytoken = (B0 3F 5F 7F 11 D5 0A 3A )                         // .?_....:
  .ver 10:0:0:0
}
.assembly extern System.Windows.Forms
{
  .publickeytoken = (B7 7A 5C 56 19 34 E0 89 )                         // .z\V.4..
  .ver 4:0:0:0
}
.assembly extern System
{
  .publickeytoken = (B7 7A 5C 56 19 34 E0 89 )                         // .z\V.4..
  .ver 4:0:0:0
}
.assembly extern System.Drawing
{
  .publickeytoken = (B0 3F 5F 7F 11 D5 0A 3A )                         // .?_....:
  .ver 4:0:0:0
}
.assembly extern ParallelExtensionsExtras
{
  .ver 1:2:0:0
}
.assembly extern System.Core
{
  .publickeytoken = (B7 7A 5C 56 19 34 E0 89 )                         // .z\V.4..
  .ver 4:0:0:0
}
.assembly VisualizePartitioning
{
  .custom instance void [mscorlib]System.Reflection.AssemblyProductAttribute::.ctor(string) = ( 01 00 15 56 69 73 75 61 6C 69 7A 65 50 61 72 74   // ...VisualizePart
                                                                                                69 74 69 6F 6E 69 6E 67 00 00 )                   // itioning..
  .custom instance void [mscorlib]System.Reflection.AssemblyConfigurationAttribute::.ctor(string) = ( 01 00 00 00 00 ) 
  .custom instance void [mscorlib]System.Reflection.AssemblyDescriptionAttribute::.ctor(string) = ( 01 00 00 00 00 ) 
  .custom instance void [mscorlib]System.Reflection.AssemblyTrademarkAttribute::.ctor(string) = ( 01 00 00 00 00 ) 

  // --- The following custom attribute is added automatically, do not uncomment -------
  //  .custom instance void [mscorlib]System.Diagnostics.DebuggableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggableAttribute/DebuggingModes) = ( 01 00 07 01 00 00 00 00 ) 

  .custom instance void [mscorlib]System.Reflection.AssemblyCompanyAttribute::.ctor(string) = ( 01 00 15 4D 69 63 72 6F 73 6F 66 74 20 43 6F 72   // ...Microsoft Cor
                                                                                                70 6F 72 61 74 69 6F 6E 00 00 )                   // poration..
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilationRelaxationsAttribute::.ctor(int32) = ( 01 00 08 00 00 00 00 00 ) 
  .custom instance void [mscorlib]System.Reflection.AssemblyTitleAttribute::.ctor(string) = ( 01 00 15 56 69 73 75 61 6C 69 7A 65 50 61 72 74   // ...VisualizePart
                                                                                              69 74 69 6F 6E 69 6E 67 00 00 )                   // itioning..
  .custom instance void [mscorlib]System.Reflection.AssemblyCopyrightAttribute::.ctor(string) = ( 01 00 39 43 6F 70 79 72 69 67 68 74 20 C2 A9 20   // ..9Copyright .. 
                                                                                                  4D 69 63 72 6F 73 6F 66 74 20 43 6F 72 70 6F 72   // Microsoft Corpor
                                                                                                  61 74 69 6F 6E 2E 20 20 41 6C 6C 20 72 69 67 68   // ation.  All righ
                                                                                                  74 73 20 72 65 73 65 72 76 65 64 2E 00 00 )       // ts reserved...
  .custom instance void [mscorlib]System.Runtime.Versioning.TargetFrameworkAttribute::.ctor(string) = ( 01 00 1A 2E 4E 45 54 46 72 61 6D 65 77 6F 72 6B   // ....NETFramework
                                                                                                        2C 56 65 72 73 69 6F 6E 3D 76 34 2E 30 01 00 54   // ,Version=v4.0..T
                                                                                                        0E 14 46 72 61 6D 65 77 6F 72 6B 44 69 73 70 6C   // ..FrameworkDispl
                                                                                                        61 79 4E 61 6D 65 10 2E 4E 45 54 20 46 72 61 6D   // ayName..NET Fram
                                                                                                        65 77 6F 72 6B 20 34 )                            // ework 4
  .custom instance void [mscorlib]System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = ( 01 00 00 00 00 ) 
  .custom instance void [mscorlib]System.Runtime.CompilerServices.RuntimeCompatibilityAttribute::.ctor() = ( 01 00 01 00 54 02 16 57 72 61 70 4E 6F 6E 45 78   // ....T..WrapNonEx
                                                                                                             63 65 70 74 69 6F 6E 54 68 72 6F 77 73 01 )       // ceptionThrows.
  .custom instance void [mscorlib]System.Reflection.AssemblyFileVersionAttribute::.ctor(string) = ( 01 00 07 31 2E 30 2E 30 2E 30 00 00 )             // ...1.0.0.0..
  .custom instance void [mscorlib]System.Runtime.InteropServices.GuidAttribute::.ctor(string) = ( 01 00 24 34 35 33 36 61 61 64 63 2D 33 62 61 34   // ..$4536aadc-3ba4
                                                                                                  2D 34 65 62 30 2D 38 32 37 38 2D 39 62 30 64 33   // -4eb0-8278-9b0d3
                                                                                                  32 62 65 39 32 35 64 00 00 )                      // 2be925d..
  .hash algorithm 0x00008004
  .ver 1:0:0:0
}
.mresource public Resources.resources
{
  // Offset: 0x00000000 Length: 0x000000B4
}
.mresource public VisualizePartitioning.MainForm.resources
{
  // Offset: 0x000000B8 Length: 0x000000B4
}
.module VisualizePartitioning.exe
// MVID: {9001F403-FAF3-43D3-906F-C2E49F4BA602}
.imagebase 0x00400000
.file alignment 0x00000200
.stackreserve 0x00100000
.subsystem 0x0002       // WINDOWS_GUI
.corflags 0x00000001    //  ILONLY
// Image base: 0x013A0000


// =============== CLASS MEMBERS DECLARATION ===================

.class private auto ansi My.MyApplication
       extends [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.ApplicationBase
{
  .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
  .custom instance void [System]System.CodeDom.Compiler.GeneratedCodeAttribute::.ctor(string,
                                                                                      string) = ( 01 00 0A 4D 79 54 65 6D 70 6C 61 74 65 08 31 30   // ...MyTemplate.10
                                                                                                  2E 30 2E 30 2E 30 00 00 )                         // .0.0.0..
  .method public specialname rtspecialname 
          instance void  .ctor() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       9 (0x9)
    .maxstack  8
    IL_0000:  ldarg.0
    IL_0001:  call       instance void [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.ApplicationBase::.ctor()
    IL_0006:  nop
    IL_0007:  nop
    IL_0008:  ret
  } // end of method MyApplication::.ctor

} // end of class My.MyApplication

.class private auto ansi My.MyComputer
       extends [Microsoft.VisualBasic]Microsoft.VisualBasic.Devices.Computer
{
  .custom instance void [System]System.CodeDom.Compiler.GeneratedCodeAttribute::.ctor(string,
                                                                                      string) = ( 01 00 0A 4D 79 54 65 6D 70 6C 61 74 65 08 31 30   // ...MyTemplate.10
                                                                                                  2E 30 2E 30 2E 30 00 00 )                         // .0.0.0..
  .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
  .method public specialname rtspecialname 
          instance void  .ctor() cil managed
  {
    .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
    .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       10 (0xa)
    .maxstack  8
    .language '{3A12D0B8-C26C-11D0-B442-00A0244A1DD2}', '{994B45C4-E6E9-11D2-903F-00C04FA302A1}', '{5A869D0B-6611-11D3-BD2A-0000F80849BD}'
// Source File '17d14f5c-a337-4978-8281-53493378c1071.vb' not found
    IL_0000:  nop
    IL_0001:  ldarg.0
    IL_0002:  call       instance void [Microsoft.VisualBasic]Microsoft.VisualBasic.Devices.Computer::.ctor()
    IL_0007:  nop
    IL_0008:  nop
    IL_0009:  ret
  } // end of method MyComputer::.ctor

} // end of class My.MyComputer

.class private auto ansi sealed beforefieldinit My.MyProject
       extends [mscorlib]System.Object
{
  .custom instance void [Microsoft.VisualBasic]Microsoft.VisualBasic.CompilerServices.StandardModuleAttribute::.ctor() = ( 01 00 00 00 ) 
  .custom instance void [System]System.CodeDom.Compiler.GeneratedCodeAttribute::.ctor(string,
                                                                                      string) = ( 01 00 0A 4D 79 54 65 6D 70 6C 61 74 65 08 31 30   // ...MyTemplate.10
                                                                                                  2E 30 2E 30 2E 30 00 00 )                         // .0.0.0..
  .custom instance void [Microsoft.VisualBasic]Microsoft.VisualBasic.HideModuleNameAttribute::.ctor() = ( 01 00 00 00 ) 
  .class auto ansi sealed nested assembly MyWebServices
         extends [mscorlib]System.Object
  {
    .custom instance void [Microsoft.VisualBasic]Microsoft.VisualBasic.MyGroupCollectionAttribute::.ctor(string,
                                                                                                         string,
                                                                                                         string,
                                                                                                         string) = ( 01 00 34 53 79 73 74 65 6D 2E 57 65 62 2E 53 65   // ..4System.Web.Se
                                                                                                                     72 76 69 63 65 73 2E 50 72 6F 74 6F 63 6F 6C 73   // rvices.Protocols
                                                                                                                     2E 53 6F 61 70 48 74 74 70 43 6C 69 65 6E 74 50   // .SoapHttpClientP
                                                                                                                     72 6F 74 6F 63 6F 6C 12 43 72 65 61 74 65 5F 5F   // rotocol.Create__
                                                                                                                     49 6E 73 74 61 6E 63 65 5F 5F 13 44 69 73 70 6F   // Instance__.Dispo
                                                                                                                     73 65 5F 5F 49 6E 73 74 61 6E 63 65 5F 5F 00 00   // se__Instance__..
                                                                                                                     00 ) 
    .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
    .method public strict virtual instance bool 
            Equals(object o) cil managed
    {
      .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       18 (0x12)
      .maxstack  2
      .locals init ([0] bool Equals)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldarg.1
      IL_0003:  call       object [mscorlib]System.Runtime.CompilerServices.RuntimeHelpers::GetObjectValue(object)
      IL_0008:  call       instance bool [mscorlib]System.Object::Equals(object)
      IL_000d:  stloc.0
      IL_000e:  br.s       IL_0010

      IL_0010:  ldloc.0
      IL_0011:  ret
    } // end of method MyWebServices::Equals

    .method public strict virtual instance int32 
            GetHashCode() cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
      // Code size       12 (0xc)
      .maxstack  1
      .locals init ([0] int32 GetHashCode)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  call       instance int32 [mscorlib]System.Object::GetHashCode()
      IL_0007:  stloc.0
      IL_0008:  br.s       IL_000a

      IL_000a:  ldloc.0
      IL_000b:  ret
    } // end of method MyWebServices::GetHashCode

    .method assembly hidebysig instance class [mscorlib]System.Type 
            GetType() cil managed
    {
      .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       16 (0x10)
      .maxstack  1
      .locals init ([0] class [mscorlib]System.Type GetType)
      IL_0000:  nop
      IL_0001:  ldtoken    My.MyProject/MyWebServices
      IL_0006:  call       class [mscorlib]System.Type [mscorlib]System.Type::GetTypeFromHandle(valuetype [mscorlib]System.RuntimeTypeHandle)
      IL_000b:  stloc.0
      IL_000c:  br.s       IL_000e

      IL_000e:  ldloc.0
      IL_000f:  ret
    } // end of method MyWebServices::GetType

    .method public strict virtual instance string 
            ToString() cil managed
    {
      .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       12 (0xc)
      .maxstack  1
      .locals init ([0] string ToString)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  call       instance string [mscorlib]System.Object::ToString()
      IL_0007:  stloc.0
      IL_0008:  br.s       IL_000a

      IL_000a:  ldloc.0
      IL_000b:  ret
    } // end of method MyWebServices::ToString

    .method private static !!T  Create__Instance__<.ctor T>(!!T 'instance') cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       32 (0x20)
      .maxstack  2
      .locals init ([0] !!T Create__Instance__,
               [1] bool VB$CG$t_bool$S0)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  box        !!T
      IL_0007:  ldnull
      IL_0008:  ceq
      IL_000a:  stloc.1
      IL_000b:  ldloc.1
      IL_000c:  brfalse.s  IL_0018

      IL_000e:  call       !!0 [mscorlib]System.Activator::CreateInstance<!!0>()
      IL_0013:  stloc.0
      IL_0014:  br.s       IL_001e

      IL_0016:  br.s       IL_001d

      IL_0018:  nop
      IL_0019:  ldarg.0
      IL_001a:  stloc.0
      IL_001b:  br.s       IL_001e

      IL_001d:  nop
      IL_001e:  ldloc.0
      IL_001f:  ret
    } // end of method MyWebServices::Create__Instance__

    .method private instance void  Dispose__Instance__<T>(!!T& 'instance') cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       18 (0x12)
      .maxstack  2
      .locals init ([0] !!T VB$t_generic$S0)
      IL_0000:  nop
      IL_0001:  ldarg.1
      IL_0002:  ldloca.s   VB$t_generic$S0
      IL_0004:  initobj    !!T
      IL_000a:  ldloc.0
      IL_000b:  stobj      !!T
      IL_0010:  nop
      IL_0011:  ret
    } // end of method MyWebServices::Dispose__Instance__

    .method public specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
      // Code size       10 (0xa)
      .maxstack  8
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0007:  nop
      IL_0008:  nop
      IL_0009:  ret
    } // end of method MyWebServices::.ctor

  } // end of class MyWebServices

  .class auto ansi sealed nested assembly ThreadSafeObjectProvider`1<.ctor T>
         extends [mscorlib]System.Object
  {
    .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
    .custom instance void [mscorlib]System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = ( 01 00 00 00 00 ) 
    .field private static !T m_ThreadStaticValue
    .custom instance void [mscorlib]System.ThreadStaticAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .method assembly specialname instance !T 
            get_GetInstance() cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       38 (0x26)
      .maxstack  2
      .locals init ([0] !T GetInstance,
               [1] bool VB$CG$t_bool$S0)
      IL_0000:  nop
      IL_0001:  ldsfld     !0 class My.MyProject/ThreadSafeObjectProvider`1<!T>::m_ThreadStaticValue
      IL_0006:  box        !T
      IL_000b:  ldnull
      IL_000c:  ceq
      IL_000e:  stloc.1
      IL_000f:  ldloc.1
      IL_0010:  brfalse.s  IL_001c

      IL_0012:  call       !!0 [mscorlib]System.Activator::CreateInstance<!T>()
      IL_0017:  stsfld     !0 class My.MyProject/ThreadSafeObjectProvider`1<!T>::m_ThreadStaticValue
      IL_001c:  ldsfld     !0 class My.MyProject/ThreadSafeObjectProvider`1<!T>::m_ThreadStaticValue
      IL_0021:  stloc.0
      IL_0022:  br.s       IL_0024

      IL_0024:  ldloc.0
      IL_0025:  ret
    } // end of method ThreadSafeObjectProvider`1::get_GetInstance

    .method public specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
      // Code size       10 (0xa)
      .maxstack  8
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0007:  nop
      IL_0008:  nop
      IL_0009:  ret
    } // end of method ThreadSafeObjectProvider`1::.ctor

    .property instance !T GetInstance()
    {
      .get instance !T My.MyProject/ThreadSafeObjectProvider`1::get_GetInstance()
    } // end of property ThreadSafeObjectProvider`1::GetInstance
  } // end of class ThreadSafeObjectProvider`1

  .field private static initonly class My.MyProject/ThreadSafeObjectProvider`1<class My.MyComputer> m_ComputerObjectProvider
  .field private static initonly class My.MyProject/ThreadSafeObjectProvider`1<class My.MyApplication> m_AppObjectProvider
  .field private static initonly class My.MyProject/ThreadSafeObjectProvider`1<class [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.User> m_UserObjectProvider
  .field private static initonly class My.MyProject/ThreadSafeObjectProvider`1<class My.MyProject/MyWebServices> m_MyWebServicesObjectProvider
  .method private specialname rtspecialname static 
          void  .cctor() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       42 (0x2a)
    .maxstack  8
    IL_0000:  newobj     instance void class My.MyProject/ThreadSafeObjectProvider`1<class My.MyComputer>::.ctor()
    IL_0005:  stsfld     class My.MyProject/ThreadSafeObjectProvider`1<class My.MyComputer> My.MyProject::m_ComputerObjectProvider
    IL_000a:  newobj     instance void class My.MyProject/ThreadSafeObjectProvider`1<class My.MyApplication>::.ctor()
    IL_000f:  stsfld     class My.MyProject/ThreadSafeObjectProvider`1<class My.MyApplication> My.MyProject::m_AppObjectProvider
    IL_0014:  newobj     instance void class My.MyProject/ThreadSafeObjectProvider`1<class [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.User>::.ctor()
    IL_0019:  stsfld     class My.MyProject/ThreadSafeObjectProvider`1<class [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.User> My.MyProject::m_UserObjectProvider
    IL_001e:  newobj     instance void class My.MyProject/ThreadSafeObjectProvider`1<class My.MyProject/MyWebServices>::.ctor()
    IL_0023:  stsfld     class My.MyProject/ThreadSafeObjectProvider`1<class My.MyProject/MyWebServices> My.MyProject::m_MyWebServicesObjectProvider
    IL_0028:  nop
    IL_0029:  ret
  } // end of method MyProject::.cctor

  .method assembly specialname static class My.MyComputer 
          get_Computer() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       16 (0x10)
    .maxstack  1
    .locals init ([0] class My.MyComputer Computer)
    IL_0000:  nop
    IL_0001:  ldsfld     class My.MyProject/ThreadSafeObjectProvider`1<class My.MyComputer> My.MyProject::m_ComputerObjectProvider
    IL_0006:  callvirt   instance !0 class My.MyProject/ThreadSafeObjectProvider`1<class My.MyComputer>::get_GetInstance()
    IL_000b:  stloc.0
    IL_000c:  br.s       IL_000e

    IL_000e:  ldloc.0
    IL_000f:  ret
  } // end of method MyProject::get_Computer

  .method assembly specialname static class My.MyApplication 
          get_Application() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       16 (0x10)
    .maxstack  1
    .locals init ([0] class My.MyApplication Application)
    IL_0000:  nop
    IL_0001:  ldsfld     class My.MyProject/ThreadSafeObjectProvider`1<class My.MyApplication> My.MyProject::m_AppObjectProvider
    IL_0006:  callvirt   instance !0 class My.MyProject/ThreadSafeObjectProvider`1<class My.MyApplication>::get_GetInstance()
    IL_000b:  stloc.0
    IL_000c:  br.s       IL_000e

    IL_000e:  ldloc.0
    IL_000f:  ret
  } // end of method MyProject::get_Application

  .method assembly specialname static class [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.User 
          get_User() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       16 (0x10)
    .maxstack  1
    .locals init ([0] class [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.User User)
    IL_0000:  nop
    IL_0001:  ldsfld     class My.MyProject/ThreadSafeObjectProvider`1<class [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.User> My.MyProject::m_UserObjectProvider
    IL_0006:  callvirt   instance !0 class My.MyProject/ThreadSafeObjectProvider`1<class [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.User>::get_GetInstance()
    IL_000b:  stloc.0
    IL_000c:  br.s       IL_000e

    IL_000e:  ldloc.0
    IL_000f:  ret
  } // end of method MyProject::get_User

  .method assembly specialname static class My.MyProject/MyWebServices 
          get_WebServices() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       16 (0x10)
    .maxstack  1
    .locals init ([0] class My.MyProject/MyWebServices WebServices)
    IL_0000:  nop
    IL_0001:  ldsfld     class My.MyProject/ThreadSafeObjectProvider`1<class My.MyProject/MyWebServices> My.MyProject::m_MyWebServicesObjectProvider
    IL_0006:  callvirt   instance !0 class My.MyProject/ThreadSafeObjectProvider`1<class My.MyProject/MyWebServices>::get_GetInstance()
    IL_000b:  stloc.0
    IL_000c:  br.s       IL_000e

    IL_000e:  ldloc.0
    IL_000f:  ret
  } // end of method MyProject::get_WebServices

  .property class My.MyComputer Computer()
  {
    .custom instance void [System]System.ComponentModel.Design.HelpKeywordAttribute::.ctor(string) = ( 01 00 0B 4D 79 2E 43 6F 6D 70 75 74 65 72 00 00 ) // ...My.Computer..
    .get class My.MyComputer My.MyProject::get_Computer()
  } // end of property MyProject::Computer
  .property class My.MyApplication Application()
  {
    .custom instance void [System]System.ComponentModel.Design.HelpKeywordAttribute::.ctor(string) = ( 01 00 0E 4D 79 2E 41 70 70 6C 69 63 61 74 69 6F   // ...My.Applicatio
                                                                                                       6E 00 00 )                                        // n..
    .get class My.MyApplication My.MyProject::get_Application()
  } // end of property MyProject::Application
  .property class [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.User
          User()
  {
    .custom instance void [System]System.ComponentModel.Design.HelpKeywordAttribute::.ctor(string) = ( 01 00 07 4D 79 2E 55 73 65 72 00 00 )             // ...My.User..
    .get class [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.User My.MyProject::get_User()
  } // end of property MyProject::User
  .property class My.MyProject/MyWebServices
          WebServices()
  {
    .custom instance void [System]System.ComponentModel.Design.HelpKeywordAttribute::.ctor(string) = ( 01 00 0E 4D 79 2E 57 65 62 53 65 72 76 69 63 65   // ...My.WebService
                                                                                                       73 00 00 )                                        // s..
    .get class My.MyProject/MyWebServices My.MyProject::get_WebServices()
  } // end of property MyProject::WebServices
} // end of class My.MyProject

.class public auto ansi beforefieldinit VisualizePartitioning.MainForm
       extends [System.Windows.Forms]System.Windows.Forms.Form
{
  .class auto ansi nested assembly _Closure$__1
         extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .field public class [mscorlib]System.Random $VB$Local_random
    .method public specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       9 (0x9)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  nop
      IL_0007:  nop
      IL_0008:  ret
    } // end of method _Closure$__1::.ctor

    .method public specialname rtspecialname 
            instance void  .ctor(class VisualizePartitioning.MainForm/_Closure$__1 other) cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       33 (0x21)
      .maxstack  2
      .locals init (bool V_0)
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  nop
      IL_0007:  ldarg.1
      IL_0008:  ldnull
      IL_0009:  ceq
      IL_000b:  ldc.i4.0
      IL_000c:  ceq
      IL_000e:  stloc.0
      IL_000f:  ldloc.0
      IL_0010:  brfalse.s  IL_001e

      IL_0012:  ldarg.0
      IL_0013:  ldarg.1
      IL_0014:  ldfld      class [mscorlib]System.Random VisualizePartitioning.MainForm/_Closure$__1::$VB$Local_random
      IL_0019:  stfld      class [mscorlib]System.Random VisualizePartitioning.MainForm/_Closure$__1::$VB$Local_random
      IL_001e:  nop
      IL_001f:  nop
      IL_0020:  ret
    } // end of method _Closure$__1::.ctor

    .method public specialname instance valuetype [System.Drawing]System.Drawing.Color 
            _Lambda$__2(int32 i) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       67 (0x43)
      .maxstack  4
      .locals init ([0] valuetype [System.Drawing]System.Drawing.Color _Lambda$__2)
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\VisualizePartitioning\VisualizePartitioning_VisualBasic\MainForm.vb' 
//000059:                 Select Color.FromArgb(random.[Next](128) + 127, random.[Next](128) + 127, random.[Next](128) + 127)).ToArray()
      IL_0000:  ldarg.0
      IL_0001:  ldfld      class [mscorlib]System.Random VisualizePartitioning.MainForm/_Closure$__1::$VB$Local_random
      IL_0006:  ldc.i4     0x80
      IL_000b:  callvirt   instance int32 [mscorlib]System.Random::Next(int32)
      IL_0010:  ldc.i4.s   127
      IL_0012:  add.ovf
      IL_0013:  ldarg.0
      IL_0014:  ldfld      class [mscorlib]System.Random VisualizePartitioning.MainForm/_Closure$__1::$VB$Local_random
      IL_0019:  ldc.i4     0x80
      IL_001e:  callvirt   instance int32 [mscorlib]System.Random::Next(int32)
      IL_0023:  ldc.i4.s   127
      IL_0025:  add.ovf
      IL_0026:  ldarg.0
      IL_0027:  ldfld      class [mscorlib]System.Random VisualizePartitioning.MainForm/_Closure$__1::$VB$Local_random
      IL_002c:  ldc.i4     0x80
      IL_0031:  callvirt   instance int32 [mscorlib]System.Random::Next(int32)
      IL_0036:  ldc.i4.s   127
      IL_0038:  add.ovf
      IL_0039:  call       valuetype [System.Drawing]System.Drawing.Color [System.Drawing]System.Drawing.Color::FromArgb(int32,
                                                                                                                         int32,
                                                                                                                         int32)
      IL_003e:  stloc.0
      IL_003f:  br.s       IL_0041

      IL_0041:  ldloc.0
      IL_0042:  ret
    } // end of method _Closure$__1::_Lambda$__2

  } // end of class _Closure$__1

  .class auto ansi nested assembly _Closure$__2
         extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .class auto ansi nested assembly _Closure$__3
           extends [mscorlib]System.Object
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .field public int32[] $VB$Local_e
      .method public specialname rtspecialname 
              instance void  .ctor() cil managed
      {
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       9 (0x9)
        .maxstack  8
        IL_0000:  ldarg.0
        IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
        IL_0006:  nop
        IL_0007:  nop
        IL_0008:  ret
      } // end of method _Closure$__3::.ctor

      .method public specialname rtspecialname 
              instance void  .ctor(class VisualizePartitioning.MainForm/_Closure$__2/_Closure$__3 other) cil managed
      {
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       33 (0x21)
        .maxstack  2
        .locals init (bool V_0)
        IL_0000:  ldarg.0
        IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
        IL_0006:  nop
        IL_0007:  ldarg.1
        IL_0008:  ldnull
        IL_0009:  ceq
        IL_000b:  ldc.i4.0
        IL_000c:  ceq
        IL_000e:  stloc.0
        IL_000f:  ldloc.0
        IL_0010:  brfalse.s  IL_001e

        IL_0012:  ldarg.0
        IL_0013:  ldarg.1
        IL_0014:  ldfld      int32[] VisualizePartitioning.MainForm/_Closure$__2/_Closure$__3::$VB$Local_e
        IL_0019:  stfld      int32[] VisualizePartitioning.MainForm/_Closure$__2/_Closure$__3::$VB$Local_e
        IL_001e:  nop
        IL_001f:  nop
        IL_0020:  ret
      } // end of method _Closure$__3::.ctor

      .method public specialname instance int32 
              _Lambda$__12(int32 prev) cil managed
      {
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       86 (0x56)
        .maxstack  3
        .locals init ([0] int32 _Lambda$__12,
                 [1] int32 next,
                 [2] bool VB$CG$t_bool$S0)
//000060:         End Sub
//000061: 
//000062:         ''' <summary>Initializes the workloads list view.</summary>
//000063:         Private Sub InitializeWorkloads()
//000064:             lvWorkloads.Items.Clear()
//000065:             Dim workloads = New List(Of Tuple(Of String, Func(Of Integer, Integer, Integer)))()
//000066:             ' NOTE: To add a new workload, simply add a new entry below with a name and corresponding function.
//000067:             With workloads
//000068:                 .Add(Tuple.Create(Of String, Func(Of Integer, Integer, Integer))("Constant", Function(size, current) 1000 * _workFactor))
//000069:                 .Add(Tuple.Create(Of String, Func(Of Integer, Integer, Integer))("Increasing Linear", Function(size, current) 200 * current * _workFactor))
//000070:                 .Add(Tuple.Create(Of String, Func(Of Integer, Integer, Integer))("Decreasing Linear", Function(size, current) 200 * (size - current) * _workFactor))
//000071:                 .Add(Tuple.Create(Of String, Func(Of Integer, Integer, Integer))("Random", Function(size, current) _localRandom.Value.[Next](100, 10000) * _workFactor))
//000072:             End With
//000073: 
//000074:             For Each workload In workloads
//000075:                 lvWorkloads.Items.Add(New ListViewItem(workload.Item1) With {.Tag = workload})
//000076:             Next
//000077:             lvWorkloads.Items(0).Selected = True
//000078:         End Sub
//000079: 
//000080:         ''' <summary>Initializes the partitioning methods list view.</summary>
//000081:         Private Sub InitializePartitioningMethods()
//000082:             lvPartitioningMethods.Items.Clear()
//000083:             Dim usingPLINQ As Boolean = rbPLINQ.Checked
//000084:             Dim partitioningMethods = New List(Of Tuple(Of String, Func(Of Integer(), Partitioner(Of Integer))))()
//000085: 
//000086:             ' Static partitioning using the Partitioner.Create overload requires static partitioner support,
//000087:             ' which Parallel.ForEach does not provide.
//000088:             If usingPLINQ Then
//000089:                 partitioningMethods.Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))("Static", Function(e) partitioner.Create(e, False)))
//000090:             End If
//000091: 
//000092:             ' Add a bunch of partitioning approaches that work with both PLINQ and Parallel.ForEach.
//000093:             With partitioningMethods
//000094:                 .Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))("Load Balance", Function(e) partitioner.Create(e, True)))
//000095:                 .Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))("Dynamic(1)", Function(e) ChunkPartitioner.Create(e, 1)))
//000096:                 .Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))("Dynamic(16)", Function(e) ChunkPartitioner.Create(e, 16)))
//000097:                 .Add(Tuple.Create(Of String,  _
//000098:                 Func(Of Integer(), Partitioner(Of Integer)))("Guided", Function(e) ChunkPartitioner.Create(e, Function(prev)
        IL_0000:  nop
//000099:                                                                                                                   If prev <= 0 Then
        IL_0001:  ldarg.1
        IL_0002:  ldc.i4.0
        IL_0003:  cgt
        IL_0005:  ldc.i4.0
        IL_0006:  ceq
        IL_0008:  stloc.2
//000100:                                                                                                                       Return If(e.Length <= 1, 1,
//000101:                                                                                                                                 CType(e.Length /
//000102:                                                                                                                                     (Environment.ProcessorCount * 3), Integer))
//000103:                                                                                                                   End If
//000104:                                                                                                                   Dim [next] = CType(prev / 2, Integer)
//000105:                                                                                                                   Return If([next] <= 0, prev, [next])
//000106:                                                                                                               End Function)))
//000107:                 .Add(Tuple.Create(Of String,  _
//000108:                                         Func(Of Integer(),  _
//000109:                                              Partitioner(Of Integer)))("Grow Exponential", Function(e) ChunkPartitioner.Create(e, Function(prev) If(prev <= 0, 1, prev * 2))))
//000110:                 .Add(Tuple.Create(Of String,  _
//000111:                                         Func(Of Integer(), Partitioner(Of Integer)))("Random", Function(e) ChunkPartitioner.Create(e, Function(prev) _localRandom.Value.[Next](e.Length))))
//000112: 
//000113:             End With
//000114: 
//000115:             ' Special-case some PLINQ-only hashing.
//000116:             If usingPLINQ Then
//000117:                 ' The actual enabling of these partitioning schemes is done later, as they can't 
//000118:                 ' be encoded in a partitioner but rather are based on what operators are used in the PLINQ query.
//000119:                 partitioningMethods.Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))(PartitioningStripe, Function(e) partitioner.Create(e)))
//000120:                 partitioningMethods.Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))(PartitioningHash, Function(e) partitioner.Create(e)))
//000121:             End If
//000122: 
//000123:             ' Dump the partitioners into the list view.
//000124:             For Each method In partitioningMethods
//000125:                 lvPartitioningMethods.Items.Add(New ListViewItem(method.Item1) With {.Tag = method})
//000126:             Next
//000127:             lvPartitioningMethods.Items(0).Selected = True
//000128:         End Sub
//000129: 
//000130:         ''' <summary>Visualize the partitioning.</summary>
//000131:         Private Sub btnVisualize_Click(ByVal sender As Object, ByVal e As EventArgs) Handles btnVisualize.Click
//000132:             Dim numProcs = tbCores.Value
//000133:             Dim width = pbPartitionedImage.Width
//000134:             Dim height = pbPartitionedImage.Height
//000135:             Dim useParallelFor = rbParallelFor.Checked
//000136:             Dim useParallelForEach = rbParallelForEach.Checked
//000137:             _workFactor = tbWorkFactor.Value
//000138: 
//000139:             ' If we're using Parallel.ForEach or PLINQ, ensure a partitioning scheme was selected and use it.
//000140:             Dim selectedMethod As Tuple(Of String, Func(Of Integer(), Partitioner(Of Integer))) = Nothing
//000141:             If Not useParallelFor Then
//000142:                 If lvPartitioningMethods.SelectedIndices.Count = 0 Then
//000143:                     Exit Sub
//000144:                 Else
//000145:                     selectedMethod = DirectCast(lvPartitioningMethods.SelectedItems(0).Tag, Tuple(Of String, Func(Of Integer(), Partitioner(Of Integer))))
//000146:                 End If
//000147:             End If
//000148: 
//000149:             ' Make sure a workload was selected and use it.
//000150:             If lvWorkloads.SelectedItems.Count = 0 Then
//000151:                 Exit Sub
//000152:             End If
//000153: 
//000154:             Dim selectedWorkload = DirectCast(lvWorkloads.SelectedItems(0).Tag, Tuple(Of String, Func(Of Integer, Integer, Integer)))
//000155: 
//000156:             ' Create a new Bitmap to store the rendered output
//000157:             Dim bmp = New Bitmap(width, height)
//000158: 
//000159:             ' Disable the start button and kick off the background work.
//000160:             btnVisualize.Enabled = False
//000161:             ' Assign each thread a unique id.
//000162:             ' Get faster access to the Bitmap's contents.
//000163:             ' Time the operation.
//000164:             ' Create the partitioner to be used.
//000165:             ' Run the work with Parallel.ForEach
//000166:             ' PLINQ.
//000167:             ' Run the work with PLINQ. If a special partitioning method was selected, use relevant query operators
//000168:             ' to get PLINQ to use that partitioning approach.
//000169:             ' Return the total time from the task
//000170:             ' When the work completes, run the following on the UI thread.
//000171: 
//000172:             Task.Factory.StartNew(Function()
//000173:                                       Dim nextId = -1
//000174:                                       Dim threadId = New ThreadLocal(Of Integer)(Function() Interlocked.Increment(nextId))
//000175:                                       Using fastBmp As New FastBitmap(bmp)
//000176:                                           Dim sw = Stopwatch.StartNew()
//000177:                                           If useParallelFor Then
//000178:                                               If fastBmp Is Nothing Then
//000179:                                                   MsgBox("FastBmp Disposed")
//000180:                                               End If
//000181:                                               Parallel.[For](0, height, New ParallelOptions(), Sub(i)
//000182:                                                                                                    Dim id = threadId.Value
//000183:                                                                                                    DoWork(selectedWorkload.Item2(height, i))
//000184: 
//000185:                                                                                                    For j = 0 To width - 1
//000186:                                                                                                        fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000187:                                                                                                    Next
//000188:                                                                                                End Sub)
//000189:                                           Else
//000190:                                               Dim partitioner = selectedMethod.Item2(Enumerable.Range(0, height).ToArray())
//000191:                                               If useParallelForEach Then
//000192:                                                   Parallel.ForEach(partitioner, New ParallelOptions(), Sub(i)
//000193:                                                                                                            Dim id = threadId.Value
//000194:                                                                                                            DoWork(selectedWorkload.Item2(height, i))
//000195:                                                                                                            For j = 0 To width - 1
//000196:                                                                                                                fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000197:                                                                                                            Next
//000198:                                                                                                        End Sub)
//000199:                                               Else
//000200:                                                   Dim source = partitioner.AsParallel().WithDegreeOfParallelism(numProcs)
//000201:                                                   If selectedMethod.Item1 = PartitioningStripe Then
//000202:                                                       source = source.TakeWhile(Function(elem) True)
//000203:                                                   ElseIf selectedMethod.Item1 = PartitioningHash Then
//000204:                                                       source = source.Join(Enumerable.Range(0, height).AsParallel(), Function(i) i, Function(i) i, Function(i, ignore) i)
//000205:                                                   End If
//000206:                                                   source.ForAll(Sub(i)
//000207:                                                                     Dim id = threadId.Value
//000208:                                                                     DoWork(selectedWorkload.Item2(height, i))
//000209:                                                                     For j = 0 To width - 1
//000210:                                                                         fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000211:                                                                     Next
//000212:                                                                 End Sub)
//000213:                                               End If
//000214:                                           End If
//000215:                                           Return sw.Elapsed
//000216:                                       End Using
//000217:                                   End Function).ContinueWith(Sub(t)
//000218:                                                                  ' Dispose of the old image (if there was one) and display the new one.
//000219:                                                                  Dim old = pbPartitionedImage.Image
//000220:                                                                  pbPartitionedImage.Image = bmp
//000221:                                                                  If old IsNot Nothing Then
//000222:                                                                      old.Dispose()
//000223:                                                                  End If
//000224: 
//000225:                                                                  ' Re-enable controls on the form and display the elapsed time.
//000226:                                                                  btnVisualize.Enabled = True
//000227:                                                                  lblTime.Text = "Time: " & t.Result.ToString()
//000228:                                                              End Sub, TaskScheduler.FromCurrentSynchronizationContext())
//000229:         End Sub
//000230: 
//000231:         ''' <summary>Does an amount of work relative to the amount requested.</summary>
//000232:         ''' <param name="workAmount">The amount of work to perform.</param>
//000233:         <MethodImpl(MethodImplOptions.NoOptimization Or MethodImplOptions.NoInlining)>
//000234:         Private Shared Function DoWork(ByVal workAmount As Integer) As Integer
//000235:             Try
//000236:                 Dim value = 1
//000237:                 For i = 0 To workAmount - 1
//000238:                     value = value * workAmount
//000239:                 Next i
//000240:                 Return value
//000241:             Catch
//000242:                 Return 0
//000243:             End Try
//000244:         End Function
//000245: 
//000246:         ''' <summary>Update relevant portions of the form when the API radio buttons are checked.</summary>
//000247:         ''' <param name="sender">The radio button.</param>
//000248:         ''' <param name="e">The event args.</param>
//000249:         Private Sub rbAPI_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles rbParallelForEach.CheckedChanged,
//000250:             rbPLINQ.CheckedChanged, rbParallelFor.CheckedChanged
//000251:             lvPartitioningMethods.Enabled = Not rbParallelFor.Checked
//000252:             lvPartitioningMethods.HideSelection = Not lvPartitioningMethods.Enabled
//000253: 
//000254:             ' Recreate partitioning methods every time a radio button is checked,
//000255:             ' as which API is selected determines which partitioning methods are available.
//000256:             InitializePartitioningMethods()
//000257:         End Sub
//000258: 
//000259:         Private Sub tbCores_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbCores.ValueChanged
//000260:             toolTip1.SetToolTip(tbCores, tbCores.Value.ToString())
//000261:             InitializeColorPalette()
//000262:             Dim worker As Integer
//000263:             Dim io As Integer
//000264:             ThreadPool.GetMinThreads(worker, io)
//000265:             ThreadPool.SetMinThreads(tbCores.Value, io)
//000266:         End Sub
//000267: 
//000268:         Private Sub tbWorkFactor_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbWorkFactor.ValueChanged
//000269:             toolTip1.SetToolTip(tbWorkFactor, tbWorkFactor.Value.ToString())
//000270:         End Sub
//000271:     End Class
//000272: End Namespace
        IL_0009:  ldloc.2
        IL_000a:  brfalse.s  IL_0035

//000100:                                                                                                                       Return If(e.Length <= 1, 1,
        IL_000c:  ldarg.0
        IL_000d:  ldfld      int32[] VisualizePartitioning.MainForm/_Closure$__2/_Closure$__3::$VB$Local_e
        IL_0012:  ldlen
        IL_0013:  conv.ovf.i4
        IL_0014:  ldc.i4.1
        IL_0015:  ble.s      IL_0031

        IL_0017:  ldarg.0
        IL_0018:  ldfld      int32[] VisualizePartitioning.MainForm/_Closure$__2/_Closure$__3::$VB$Local_e
        IL_001d:  ldlen
        IL_001e:  conv.ovf.i4
        IL_001f:  conv.r8
        IL_0020:  call       int32 [mscorlib]System.Environment::get_ProcessorCount()
        IL_0025:  ldc.i4.3
        IL_0026:  mul.ovf
        IL_0027:  conv.r8
        IL_0028:  div
        IL_0029:  call       float64 [mscorlib]System.Math::Round(float64)
        IL_002e:  conv.ovf.i4
        IL_002f:  br.s       IL_0032

        IL_0031:  ldc.i4.1
        IL_0032:  stloc.0
        IL_0033:  br.s       IL_0054

//000101:                                                                                                                                 CType(e.Length /
//000102:                                                                                                                                     (Environment.ProcessorCount * 3), Integer))
//000103:                                                                                                                   End If
        IL_0035:  nop
//000104:                                                                                                                   Dim [next] = CType(prev / 2, Integer)
        IL_0036:  ldarg.1
        IL_0037:  conv.r8
        IL_0038:  ldc.r8     2.
        IL_0041:  div
        IL_0042:  call       float64 [mscorlib]System.Math::Round(float64)
        IL_0047:  conv.ovf.i4
        IL_0048:  stloc.1
//000105:                                                                                                                   Return If([next] <= 0, prev, [next])
        IL_0049:  ldloc.1
        IL_004a:  ldc.i4.0
        IL_004b:  ble.s      IL_0050

        IL_004d:  ldloc.1
        IL_004e:  br.s       IL_0051

        IL_0050:  ldarg.1
        IL_0051:  stloc.0
        IL_0052:  br.s       IL_0054

//000106:                                                                                                               End Function)))
        IL_0054:  ldloc.0
        IL_0055:  ret
      } // end of method _Closure$__3::_Lambda$__12

    } // end of class _Closure$__3

    .class auto ansi nested assembly _Closure$__4
           extends [mscorlib]System.Object
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .field public int32[] $VB$Local_e
      .method public specialname rtspecialname 
              instance void  .ctor() cil managed
      {
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       9 (0x9)
        .maxstack  8
        IL_0000:  ldarg.0
        IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
        IL_0006:  nop
        IL_0007:  nop
        IL_0008:  ret
      } // end of method _Closure$__4::.ctor

      .method public specialname rtspecialname 
              instance void  .ctor(class VisualizePartitioning.MainForm/_Closure$__2/_Closure$__4 other) cil managed
      {
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       33 (0x21)
        .maxstack  2
        .locals init (bool V_0)
        IL_0000:  ldarg.0
        IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
        IL_0006:  nop
        IL_0007:  ldarg.1
        IL_0008:  ldnull
        IL_0009:  ceq
        IL_000b:  ldc.i4.0
        IL_000c:  ceq
        IL_000e:  stloc.0
        IL_000f:  ldloc.0
        IL_0010:  brfalse.s  IL_001e

        IL_0012:  ldarg.0
        IL_0013:  ldarg.1
        IL_0014:  ldfld      int32[] VisualizePartitioning.MainForm/_Closure$__2/_Closure$__4::$VB$Local_e
        IL_0019:  stfld      int32[] VisualizePartitioning.MainForm/_Closure$__2/_Closure$__4::$VB$Local_e
        IL_001e:  nop
        IL_001f:  nop
        IL_0020:  ret
      } // end of method _Closure$__4::.ctor

      .method public specialname instance int32 
              _Lambda$__16(int32 prev) cil managed
      {
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       28 (0x1c)
        .maxstack  2
        .locals init ([0] int32 _Lambda$__16)
//000107:                 .Add(Tuple.Create(Of String,  _
//000108:                                         Func(Of Integer(),  _
//000109:                                              Partitioner(Of Integer)))("Grow Exponential", Function(e) ChunkPartitioner.Create(e, Function(prev) If(prev <= 0, 1, prev * 2))))
//000110:                 .Add(Tuple.Create(Of String,  _
//000111:                                         Func(Of Integer(), Partitioner(Of Integer)))("Random", Function(e) ChunkPartitioner.Create(e, Function(prev) _localRandom.Value.[Next](e.Length))))
        IL_0000:  ldsfld     class [mscorlib]System.Threading.ThreadLocal`1<class [mscorlib]System.Random> VisualizePartitioning.MainForm::_localRandom
        IL_0005:  callvirt   instance !0 class [mscorlib]System.Threading.ThreadLocal`1<class [mscorlib]System.Random>::get_Value()
        IL_000a:  ldarg.0
        IL_000b:  ldfld      int32[] VisualizePartitioning.MainForm/_Closure$__2/_Closure$__4::$VB$Local_e
        IL_0010:  ldlen
        IL_0011:  conv.ovf.i4
        IL_0012:  callvirt   instance int32 [mscorlib]System.Random::Next(int32)
        IL_0017:  stloc.0
        IL_0018:  br.s       IL_001a

        IL_001a:  ldloc.0
        IL_001b:  ret
      } // end of method _Closure$__4::_Lambda$__16

    } // end of class _Closure$__4

    .method public specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       9 (0x9)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  nop
      IL_0007:  nop
      IL_0008:  ret
    } // end of method _Closure$__2::.ctor

    .method public specialname rtspecialname 
            instance void  .ctor(class VisualizePartitioning.MainForm/_Closure$__2 other) cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       21 (0x15)
      .maxstack  2
      .locals init (bool V_0)
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  nop
      IL_0007:  ldarg.1
      IL_0008:  ldnull
      IL_0009:  ceq
      IL_000b:  ldc.i4.0
      IL_000c:  ceq
      IL_000e:  stloc.0
      IL_000f:  ldloc.0
      IL_0010:  brfalse.s  IL_0012

      IL_0012:  nop
      IL_0013:  nop
      IL_0014:  ret
    } // end of method _Closure$__2::.ctor

    .method public specialname instance class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32> 
            _Lambda$__11(int32[] e) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       42 (0x2a)
      .maxstack  3
      .locals init ([0] class VisualizePartitioning.MainForm/_Closure$__2/_Closure$__3 $VB$Closure_ClosureVariable_61_47,
               [1] class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32> _Lambda$__11)
//000112: 
//000113:             End With
//000114: 
//000115:             ' Special-case some PLINQ-only hashing.
//000116:             If usingPLINQ Then
//000117:                 ' The actual enabling of these partitioning schemes is done later, as they can't 
//000118:                 ' be encoded in a partitioner but rather are based on what operators are used in the PLINQ query.
//000119:                 partitioningMethods.Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))(PartitioningStripe, Function(e) partitioner.Create(e)))
//000120:                 partitioningMethods.Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))(PartitioningHash, Function(e) partitioner.Create(e)))
//000121:             End If
//000122: 
//000123:             ' Dump the partitioners into the list view.
//000124:             For Each method In partitioningMethods
//000125:                 lvPartitioningMethods.Items.Add(New ListViewItem(method.Item1) With {.Tag = method})
//000126:             Next
//000127:             lvPartitioningMethods.Items(0).Selected = True
//000128:         End Sub
//000129: 
//000130:         ''' <summary>Visualize the partitioning.</summary>
//000131:         Private Sub btnVisualize_Click(ByVal sender As Object, ByVal e As EventArgs) Handles btnVisualize.Click
//000132:             Dim numProcs = tbCores.Value
//000133:             Dim width = pbPartitionedImage.Width
//000134:             Dim height = pbPartitionedImage.Height
//000135:             Dim useParallelFor = rbParallelFor.Checked
//000136:             Dim useParallelForEach = rbParallelForEach.Checked
//000137:             _workFactor = tbWorkFactor.Value
//000138: 
//000139:             ' If we're using Parallel.ForEach or PLINQ, ensure a partitioning scheme was selected and use it.
//000140:             Dim selectedMethod As Tuple(Of String, Func(Of Integer(), Partitioner(Of Integer))) = Nothing
//000141:             If Not useParallelFor Then
//000142:                 If lvPartitioningMethods.SelectedIndices.Count = 0 Then
//000143:                     Exit Sub
//000144:                 Else
//000145:                     selectedMethod = DirectCast(lvPartitioningMethods.SelectedItems(0).Tag, Tuple(Of String, Func(Of Integer(), Partitioner(Of Integer))))
//000146:                 End If
//000147:             End If
//000148: 
//000149:             ' Make sure a workload was selected and use it.
//000150:             If lvWorkloads.SelectedItems.Count = 0 Then
//000151:                 Exit Sub
//000152:             End If
//000153: 
//000154:             Dim selectedWorkload = DirectCast(lvWorkloads.SelectedItems(0).Tag, Tuple(Of String, Func(Of Integer, Integer, Integer)))
//000155: 
//000156:             ' Create a new Bitmap to store the rendered output
//000157:             Dim bmp = New Bitmap(width, height)
//000158: 
//000159:             ' Disable the start button and kick off the background work.
//000160:             btnVisualize.Enabled = False
//000161:             ' Assign each thread a unique id.
//000162:             ' Get faster access to the Bitmap's contents.
//000163:             ' Time the operation.
//000164:             ' Create the partitioner to be used.
//000165:             ' Run the work with Parallel.ForEach
//000166:             ' PLINQ.
//000167:             ' Run the work with PLINQ. If a special partitioning method was selected, use relevant query operators
//000168:             ' to get PLINQ to use that partitioning approach.
//000169:             ' Return the total time from the task
//000170:             ' When the work completes, run the following on the UI thread.
//000171: 
//000172:             Task.Factory.StartNew(Function()
//000173:                                       Dim nextId = -1
//000174:                                       Dim threadId = New ThreadLocal(Of Integer)(Function() Interlocked.Increment(nextId))
//000175:                                       Using fastBmp As New FastBitmap(bmp)
//000176:                                           Dim sw = Stopwatch.StartNew()
//000177:                                           If useParallelFor Then
//000178:                                               If fastBmp Is Nothing Then
//000179:                                                   MsgBox("FastBmp Disposed")
//000180:                                               End If
//000181:                                               Parallel.[For](0, height, New ParallelOptions(), Sub(i)
//000182:                                                                                                    Dim id = threadId.Value
//000183:                                                                                                    DoWork(selectedWorkload.Item2(height, i))
//000184: 
//000185:                                                                                                    For j = 0 To width - 1
//000186:                                                                                                        fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000187:                                                                                                    Next
//000188:                                                                                                End Sub)
//000189:                                           Else
//000190:                                               Dim partitioner = selectedMethod.Item2(Enumerable.Range(0, height).ToArray())
//000191:                                               If useParallelForEach Then
//000192:                                                   Parallel.ForEach(partitioner, New ParallelOptions(), Sub(i)
//000193:                                                                                                            Dim id = threadId.Value
//000194:                                                                                                            DoWork(selectedWorkload.Item2(height, i))
//000195:                                                                                                            For j = 0 To width - 1
//000196:                                                                                                                fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000197:                                                                                                            Next
//000198:                                                                                                        End Sub)
//000199:                                               Else
//000200:                                                   Dim source = partitioner.AsParallel().WithDegreeOfParallelism(numProcs)
//000201:                                                   If selectedMethod.Item1 = PartitioningStripe Then
//000202:                                                       source = source.TakeWhile(Function(elem) True)
//000203:                                                   ElseIf selectedMethod.Item1 = PartitioningHash Then
//000204:                                                       source = source.Join(Enumerable.Range(0, height).AsParallel(), Function(i) i, Function(i) i, Function(i, ignore) i)
//000205:                                                   End If
//000206:                                                   source.ForAll(Sub(i)
//000207:                                                                     Dim id = threadId.Value
//000208:                                                                     DoWork(selectedWorkload.Item2(height, i))
//000209:                                                                     For j = 0 To width - 1
//000210:                                                                         fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000211:                                                                     Next
//000212:                                                                 End Sub)
//000213:                                               End If
//000214:                                           End If
//000215:                                           Return sw.Elapsed
//000216:                                       End Using
//000217:                                   End Function).ContinueWith(Sub(t)
//000218:                                                                  ' Dispose of the old image (if there was one) and display the new one.
//000219:                                                                  Dim old = pbPartitionedImage.Image
//000220:                                                                  pbPartitionedImage.Image = bmp
//000221:                                                                  If old IsNot Nothing Then
//000222:                                                                      old.Dispose()
//000223:                                                                  End If
//000224: 
//000225:                                                                  ' Re-enable controls on the form and display the elapsed time.
//000226:                                                                  btnVisualize.Enabled = True
//000227:                                                                  lblTime.Text = "Time: " & t.Result.ToString()
//000228:                                                              End Sub, TaskScheduler.FromCurrentSynchronizationContext())
//000229:         End Sub
//000230: 
//000231:         ''' <summary>Does an amount of work relative to the amount requested.</summary>
//000232:         ''' <param name="workAmount">The amount of work to perform.</param>
//000233:         <MethodImpl(MethodImplOptions.NoOptimization Or MethodImplOptions.NoInlining)>
//000234:         Private Shared Function DoWork(ByVal workAmount As Integer) As Integer
//000235:             Try
//000236:                 Dim value = 1
//000237:                 For i = 0 To workAmount - 1
//000238:                     value = value * workAmount
//000239:                 Next i
//000240:                 Return value
//000241:             Catch
//000242:                 Return 0
//000243:             End Try
//000244:         End Function
//000245: 
//000246:         ''' <summary>Update relevant portions of the form when the API radio buttons are checked.</summary>
//000247:         ''' <param name="sender">The radio button.</param>
//000248:         ''' <param name="e">The event args.</param>
//000249:         Private Sub rbAPI_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles rbParallelForEach.CheckedChanged,
//000250:             rbPLINQ.CheckedChanged, rbParallelFor.CheckedChanged
//000251:             lvPartitioningMethods.Enabled = Not rbParallelFor.Checked
//000252:             lvPartitioningMethods.HideSelection = Not lvPartitioningMethods.Enabled
//000253: 
//000254:             ' Recreate partitioning methods every time a radio button is checked,
//000255:             ' as which API is selected determines which partitioning methods are available.
//000256:             InitializePartitioningMethods()
//000257:         End Sub
//000258: 
//000259:         Private Sub tbCores_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbCores.ValueChanged
//000260:             toolTip1.SetToolTip(tbCores, tbCores.Value.ToString())
//000261:             InitializeColorPalette()
//000262:             Dim worker As Integer
//000263:             Dim io As Integer
//000264:             ThreadPool.GetMinThreads(worker, io)
//000265:             ThreadPool.SetMinThreads(tbCores.Value, io)
//000266:         End Sub
//000267: 
//000268:         Private Sub tbWorkFactor_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbWorkFactor.ValueChanged
//000269:             toolTip1.SetToolTip(tbWorkFactor, tbWorkFactor.Value.ToString())
//000270:         End Sub
//000271:     End Class
//000272: End Namespace
      IL_0000:  newobj     instance void VisualizePartitioning.MainForm/_Closure$__2/_Closure$__3::.ctor()
      IL_0005:  stloc.0
      IL_0006:  ldloc.0
      IL_0007:  ldarg.1
      IL_0008:  stfld      int32[] VisualizePartitioning.MainForm/_Closure$__2/_Closure$__3::$VB$Local_e
//000098:                 Func(Of Integer(), Partitioner(Of Integer)))("Guided", Function(e) ChunkPartitioner.Create(e, Function(prev)
      IL_000d:  ldloc.0
      IL_000e:  ldfld      int32[] VisualizePartitioning.MainForm/_Closure$__2/_Closure$__3::$VB$Local_e
      IL_0013:  ldloc.0
      IL_0014:  dup
      IL_0015:  ldvirtftn  instance int32 VisualizePartitioning.MainForm/_Closure$__2/_Closure$__3::_Lambda$__12(int32)
      IL_001b:  newobj     instance void class [mscorlib]System.Func`2<int32,int32>::.ctor(object,
                                                                                           native int)
      IL_0020:  call       class [mscorlib]System.Collections.Concurrent.OrderablePartitioner`1<!!0> [ParallelExtensionsExtras]System.Collections.Concurrent.Partitioners.ChunkPartitioner::Create<int32>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>,
                                                                                                                                                                                                          class [mscorlib]System.Func`2<int32,int32>)
      IL_0025:  stloc.1
      IL_0026:  br.s       IL_0028

      IL_0028:  ldloc.1
      IL_0029:  ret
    } // end of method _Closure$__2::_Lambda$__11

    .method public specialname instance class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32> 
            _Lambda$__15(int32[] e) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       42 (0x2a)
      .maxstack  3
      .locals init ([0] class VisualizePartitioning.MainForm/_Closure$__2/_Closure$__4 $VB$Closure_ClosureVariable_6E_5F,
               [1] class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32> _Lambda$__15)
//000099:                                                                                                                   If prev <= 0 Then
//000100:                                                                                                                       Return If(e.Length <= 1, 1,
//000101:                                                                                                                                 CType(e.Length /
//000102:                                                                                                                                     (Environment.ProcessorCount * 3), Integer))
//000103:                                                                                                                   End If
//000104:                                                                                                                   Dim [next] = CType(prev / 2, Integer)
//000105:                                                                                                                   Return If([next] <= 0, prev, [next])
//000106:                                                                                                               End Function)))
//000107:                 .Add(Tuple.Create(Of String,  _
//000108:                                         Func(Of Integer(),  _
//000109:                                              Partitioner(Of Integer)))("Grow Exponential", Function(e) ChunkPartitioner.Create(e, Function(prev) If(prev <= 0, 1, prev * 2))))
//000110:                 .Add(Tuple.Create(Of String,  _
//000111:                                         Func(Of Integer(), Partitioner(Of Integer)))("Random", Function(e) ChunkPartitioner.Create(e, Function(prev) _localRandom.Value.[Next](e.Length))))
//000112: 
//000113:             End With
//000114: 
//000115:             ' Special-case some PLINQ-only hashing.
//000116:             If usingPLINQ Then
//000117:                 ' The actual enabling of these partitioning schemes is done later, as they can't 
//000118:                 ' be encoded in a partitioner but rather are based on what operators are used in the PLINQ query.
//000119:                 partitioningMethods.Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))(PartitioningStripe, Function(e) partitioner.Create(e)))
//000120:                 partitioningMethods.Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))(PartitioningHash, Function(e) partitioner.Create(e)))
//000121:             End If
//000122: 
//000123:             ' Dump the partitioners into the list view.
//000124:             For Each method In partitioningMethods
//000125:                 lvPartitioningMethods.Items.Add(New ListViewItem(method.Item1) With {.Tag = method})
//000126:             Next
//000127:             lvPartitioningMethods.Items(0).Selected = True
//000128:         End Sub
//000129: 
//000130:         ''' <summary>Visualize the partitioning.</summary>
//000131:         Private Sub btnVisualize_Click(ByVal sender As Object, ByVal e As EventArgs) Handles btnVisualize.Click
//000132:             Dim numProcs = tbCores.Value
//000133:             Dim width = pbPartitionedImage.Width
//000134:             Dim height = pbPartitionedImage.Height
//000135:             Dim useParallelFor = rbParallelFor.Checked
//000136:             Dim useParallelForEach = rbParallelForEach.Checked
//000137:             _workFactor = tbWorkFactor.Value
//000138: 
//000139:             ' If we're using Parallel.ForEach or PLINQ, ensure a partitioning scheme was selected and use it.
//000140:             Dim selectedMethod As Tuple(Of String, Func(Of Integer(), Partitioner(Of Integer))) = Nothing
//000141:             If Not useParallelFor Then
//000142:                 If lvPartitioningMethods.SelectedIndices.Count = 0 Then
//000143:                     Exit Sub
//000144:                 Else
//000145:                     selectedMethod = DirectCast(lvPartitioningMethods.SelectedItems(0).Tag, Tuple(Of String, Func(Of Integer(), Partitioner(Of Integer))))
//000146:                 End If
//000147:             End If
//000148: 
//000149:             ' Make sure a workload was selected and use it.
//000150:             If lvWorkloads.SelectedItems.Count = 0 Then
//000151:                 Exit Sub
//000152:             End If
//000153: 
//000154:             Dim selectedWorkload = DirectCast(lvWorkloads.SelectedItems(0).Tag, Tuple(Of String, Func(Of Integer, Integer, Integer)))
//000155: 
//000156:             ' Create a new Bitmap to store the rendered output
//000157:             Dim bmp = New Bitmap(width, height)
//000158: 
//000159:             ' Disable the start button and kick off the background work.
//000160:             btnVisualize.Enabled = False
//000161:             ' Assign each thread a unique id.
//000162:             ' Get faster access to the Bitmap's contents.
//000163:             ' Time the operation.
//000164:             ' Create the partitioner to be used.
//000165:             ' Run the work with Parallel.ForEach
//000166:             ' PLINQ.
//000167:             ' Run the work with PLINQ. If a special partitioning method was selected, use relevant query operators
//000168:             ' to get PLINQ to use that partitioning approach.
//000169:             ' Return the total time from the task
//000170:             ' When the work completes, run the following on the UI thread.
//000171: 
//000172:             Task.Factory.StartNew(Function()
//000173:                                       Dim nextId = -1
//000174:                                       Dim threadId = New ThreadLocal(Of Integer)(Function() Interlocked.Increment(nextId))
//000175:                                       Using fastBmp As New FastBitmap(bmp)
//000176:                                           Dim sw = Stopwatch.StartNew()
//000177:                                           If useParallelFor Then
//000178:                                               If fastBmp Is Nothing Then
//000179:                                                   MsgBox("FastBmp Disposed")
//000180:                                               End If
//000181:                                               Parallel.[For](0, height, New ParallelOptions(), Sub(i)
//000182:                                                                                                    Dim id = threadId.Value
//000183:                                                                                                    DoWork(selectedWorkload.Item2(height, i))
//000184: 
//000185:                                                                                                    For j = 0 To width - 1
//000186:                                                                                                        fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000187:                                                                                                    Next
//000188:                                                                                                End Sub)
//000189:                                           Else
//000190:                                               Dim partitioner = selectedMethod.Item2(Enumerable.Range(0, height).ToArray())
//000191:                                               If useParallelForEach Then
//000192:                                                   Parallel.ForEach(partitioner, New ParallelOptions(), Sub(i)
//000193:                                                                                                            Dim id = threadId.Value
//000194:                                                                                                            DoWork(selectedWorkload.Item2(height, i))
//000195:                                                                                                            For j = 0 To width - 1
//000196:                                                                                                                fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000197:                                                                                                            Next
//000198:                                                                                                        End Sub)
//000199:                                               Else
//000200:                                                   Dim source = partitioner.AsParallel().WithDegreeOfParallelism(numProcs)
//000201:                                                   If selectedMethod.Item1 = PartitioningStripe Then
//000202:                                                       source = source.TakeWhile(Function(elem) True)
//000203:                                                   ElseIf selectedMethod.Item1 = PartitioningHash Then
//000204:                                                       source = source.Join(Enumerable.Range(0, height).AsParallel(), Function(i) i, Function(i) i, Function(i, ignore) i)
//000205:                                                   End If
//000206:                                                   source.ForAll(Sub(i)
//000207:                                                                     Dim id = threadId.Value
//000208:                                                                     DoWork(selectedWorkload.Item2(height, i))
//000209:                                                                     For j = 0 To width - 1
//000210:                                                                         fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000211:                                                                     Next
//000212:                                                                 End Sub)
//000213:                                               End If
//000214:                                           End If
//000215:                                           Return sw.Elapsed
//000216:                                       End Using
//000217:                                   End Function).ContinueWith(Sub(t)
//000218:                                                                  ' Dispose of the old image (if there was one) and display the new one.
//000219:                                                                  Dim old = pbPartitionedImage.Image
//000220:                                                                  pbPartitionedImage.Image = bmp
//000221:                                                                  If old IsNot Nothing Then
//000222:                                                                      old.Dispose()
//000223:                                                                  End If
//000224: 
//000225:                                                                  ' Re-enable controls on the form and display the elapsed time.
//000226:                                                                  btnVisualize.Enabled = True
//000227:                                                                  lblTime.Text = "Time: " & t.Result.ToString()
//000228:                                                              End Sub, TaskScheduler.FromCurrentSynchronizationContext())
//000229:         End Sub
//000230: 
//000231:         ''' <summary>Does an amount of work relative to the amount requested.</summary>
//000232:         ''' <param name="workAmount">The amount of work to perform.</param>
//000233:         <MethodImpl(MethodImplOptions.NoOptimization Or MethodImplOptions.NoInlining)>
//000234:         Private Shared Function DoWork(ByVal workAmount As Integer) As Integer
//000235:             Try
//000236:                 Dim value = 1
//000237:                 For i = 0 To workAmount - 1
//000238:                     value = value * workAmount
//000239:                 Next i
//000240:                 Return value
//000241:             Catch
//000242:                 Return 0
//000243:             End Try
//000244:         End Function
//000245: 
//000246:         ''' <summary>Update relevant portions of the form when the API radio buttons are checked.</summary>
//000247:         ''' <param name="sender">The radio button.</param>
//000248:         ''' <param name="e">The event args.</param>
//000249:         Private Sub rbAPI_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles rbParallelForEach.CheckedChanged,
//000250:             rbPLINQ.CheckedChanged, rbParallelFor.CheckedChanged
//000251:             lvPartitioningMethods.Enabled = Not rbParallelFor.Checked
//000252:             lvPartitioningMethods.HideSelection = Not lvPartitioningMethods.Enabled
//000253: 
//000254:             ' Recreate partitioning methods every time a radio button is checked,
//000255:             ' as which API is selected determines which partitioning methods are available.
//000256:             InitializePartitioningMethods()
//000257:         End Sub
//000258: 
//000259:         Private Sub tbCores_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbCores.ValueChanged
//000260:             toolTip1.SetToolTip(tbCores, tbCores.Value.ToString())
//000261:             InitializeColorPalette()
//000262:             Dim worker As Integer
//000263:             Dim io As Integer
//000264:             ThreadPool.GetMinThreads(worker, io)
//000265:             ThreadPool.SetMinThreads(tbCores.Value, io)
//000266:         End Sub
//000267: 
//000268:         Private Sub tbWorkFactor_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbWorkFactor.ValueChanged
//000269:             toolTip1.SetToolTip(tbWorkFactor, tbWorkFactor.Value.ToString())
//000270:         End Sub
//000271:     End Class
//000272: End Namespace
      IL_0000:  newobj     instance void VisualizePartitioning.MainForm/_Closure$__2/_Closure$__4::.ctor()
      IL_0005:  stloc.0
      IL_0006:  ldloc.0
      IL_0007:  ldarg.1
      IL_0008:  stfld      int32[] VisualizePartitioning.MainForm/_Closure$__2/_Closure$__4::$VB$Local_e
//000111:                                         Func(Of Integer(), Partitioner(Of Integer)))("Random", Function(e) ChunkPartitioner.Create(e, Function(prev) _localRandom.Value.[Next](e.Length))))
      IL_000d:  ldloc.0
      IL_000e:  ldfld      int32[] VisualizePartitioning.MainForm/_Closure$__2/_Closure$__4::$VB$Local_e
      IL_0013:  ldloc.0
      IL_0014:  dup
      IL_0015:  ldvirtftn  instance int32 VisualizePartitioning.MainForm/_Closure$__2/_Closure$__4::_Lambda$__16(int32)
      IL_001b:  newobj     instance void class [mscorlib]System.Func`2<int32,int32>::.ctor(object,
                                                                                           native int)
      IL_0020:  call       class [mscorlib]System.Collections.Concurrent.OrderablePartitioner`1<!!0> [ParallelExtensionsExtras]System.Collections.Concurrent.Partitioners.ChunkPartitioner::Create<int32>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>,
                                                                                                                                                                                                          class [mscorlib]System.Func`2<int32,int32>)
      IL_0025:  stloc.1
      IL_0026:  br.s       IL_0028

      IL_0028:  ldloc.1
      IL_0029:  ret
    } // end of method _Closure$__2::_Lambda$__15

  } // end of class _Closure$__2

  .class auto ansi nested assembly _Closure$__5
         extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .class auto ansi nested assembly _Closure$__6
           extends [mscorlib]System.Object
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .class auto ansi nested assembly _Closure$__7
             extends [mscorlib]System.Object
      {
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        .field public class [ParallelExtensionsExtras]Microsoft.Drawing.FastBitmap $VB$Local_fastBmp
        .field public class VisualizePartitioning.MainForm/_Closure$__5/_Closure$__6 $VB$NonLocal_$VB$Closure_ClosureVariable_AB_22
        .field public class VisualizePartitioning.MainForm/_Closure$__5 $VB$NonLocal__Closure$__5
        .method public specialname rtspecialname 
                instance void  .ctor() cil managed
        {
          .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
          // Code size       9 (0x9)
          .maxstack  8
          IL_0000:  ldarg.0
          IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
          IL_0006:  nop
          IL_0007:  nop
          IL_0008:  ret
        } // end of method _Closure$__7::.ctor

        .method public specialname rtspecialname 
                instance void  .ctor(class VisualizePartitioning.MainForm/_Closure$__5/_Closure$__6/_Closure$__7 other) cil managed
        {
          .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
          // Code size       45 (0x2d)
          .maxstack  2
          .locals init (bool V_0)
          IL_0000:  ldarg.0
          IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
          IL_0006:  nop
          IL_0007:  ldarg.1
          IL_0008:  ldnull
          IL_0009:  ceq
          IL_000b:  ldc.i4.0
          IL_000c:  ceq
          IL_000e:  stloc.0
          IL_000f:  ldloc.0
          IL_0010:  brfalse.s  IL_002a

          IL_0012:  ldarg.0
          IL_0013:  ldarg.1
          IL_0014:  ldfld      class VisualizePartitioning.MainForm/_Closure$__5 VisualizePartitioning.MainForm/_Closure$__5/_Closure$__6/_Closure$__7::$VB$NonLocal__Closure$__5
          IL_0019:  stfld      class VisualizePartitioning.MainForm/_Closure$__5 VisualizePartitioning.MainForm/_Closure$__5/_Closure$__6/_Closure$__7::$VB$NonLocal__Closure$__5
          IL_001e:  ldarg.0
          IL_001f:  ldarg.1
          IL_0020:  ldfld      class [ParallelExtensionsExtras]Microsoft.Drawing.FastBitmap VisualizePartitioning.MainForm/_Closure$__5/_Closure$__6/_Closure$__7::$VB$Local_fastBmp
          IL_0025:  stfld      class [ParallelExtensionsExtras]Microsoft.Drawing.FastBitmap VisualizePartitioning.MainForm/_Closure$__5/_Closure$__6/_Closure$__7::$VB$Local_fastBmp
          IL_002a:  nop
          IL_002b:  nop
          IL_002c:  ret
        } // end of method _Closure$__7::.ctor

        .method public specialname instance void 
                _Lambda$__22(int32 i) cil managed
        {
          .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
          // Code size       148 (0x94)
          .maxstack  6
          .locals init ([0] int32 id,
                   [1] int32 j,
                   [2] int32 VB$t_i4$L0,
                   [3] int32 VB$CG$t_i4$S0)
//000112: 
//000113:             End With
//000114: 
//000115:             ' Special-case some PLINQ-only hashing.
//000116:             If usingPLINQ Then
//000117:                 ' The actual enabling of these partitioning schemes is done later, as they can't 
//000118:                 ' be encoded in a partitioner but rather are based on what operators are used in the PLINQ query.
//000119:                 partitioningMethods.Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))(PartitioningStripe, Function(e) partitioner.Create(e)))
//000120:                 partitioningMethods.Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))(PartitioningHash, Function(e) partitioner.Create(e)))
//000121:             End If
//000122: 
//000123:             ' Dump the partitioners into the list view.
//000124:             For Each method In partitioningMethods
//000125:                 lvPartitioningMethods.Items.Add(New ListViewItem(method.Item1) With {.Tag = method})
//000126:             Next
//000127:             lvPartitioningMethods.Items(0).Selected = True
//000128:         End Sub
//000129: 
//000130:         ''' <summary>Visualize the partitioning.</summary>
//000131:         Private Sub btnVisualize_Click(ByVal sender As Object, ByVal e As EventArgs) Handles btnVisualize.Click
//000132:             Dim numProcs = tbCores.Value
//000133:             Dim width = pbPartitionedImage.Width
//000134:             Dim height = pbPartitionedImage.Height
//000135:             Dim useParallelFor = rbParallelFor.Checked
//000136:             Dim useParallelForEach = rbParallelForEach.Checked
//000137:             _workFactor = tbWorkFactor.Value
//000138: 
//000139:             ' If we're using Parallel.ForEach or PLINQ, ensure a partitioning scheme was selected and use it.
//000140:             Dim selectedMethod As Tuple(Of String, Func(Of Integer(), Partitioner(Of Integer))) = Nothing
//000141:             If Not useParallelFor Then
//000142:                 If lvPartitioningMethods.SelectedIndices.Count = 0 Then
//000143:                     Exit Sub
//000144:                 Else
//000145:                     selectedMethod = DirectCast(lvPartitioningMethods.SelectedItems(0).Tag, Tuple(Of String, Func(Of Integer(), Partitioner(Of Integer))))
//000146:                 End If
//000147:             End If
//000148: 
//000149:             ' Make sure a workload was selected and use it.
//000150:             If lvWorkloads.SelectedItems.Count = 0 Then
//000151:                 Exit Sub
//000152:             End If
//000153: 
//000154:             Dim selectedWorkload = DirectCast(lvWorkloads.SelectedItems(0).Tag, Tuple(Of String, Func(Of Integer, Integer, Integer)))
//000155: 
//000156:             ' Create a new Bitmap to store the rendered output
//000157:             Dim bmp = New Bitmap(width, height)
//000158: 
//000159:             ' Disable the start button and kick off the background work.
//000160:             btnVisualize.Enabled = False
//000161:             ' Assign each thread a unique id.
//000162:             ' Get faster access to the Bitmap's contents.
//000163:             ' Time the operation.
//000164:             ' Create the partitioner to be used.
//000165:             ' Run the work with Parallel.ForEach
//000166:             ' PLINQ.
//000167:             ' Run the work with PLINQ. If a special partitioning method was selected, use relevant query operators
//000168:             ' to get PLINQ to use that partitioning approach.
//000169:             ' Return the total time from the task
//000170:             ' When the work completes, run the following on the UI thread.
//000171: 
//000172:             Task.Factory.StartNew(Function()
//000173:                                       Dim nextId = -1
//000174:                                       Dim threadId = New ThreadLocal(Of Integer)(Function() Interlocked.Increment(nextId))
//000175:                                       Using fastBmp As New FastBitmap(bmp)
//000176:                                           Dim sw = Stopwatch.StartNew()
//000177:                                           If useParallelFor Then
//000178:                                               If fastBmp Is Nothing Then
//000179:                                                   MsgBox("FastBmp Disposed")
//000180:                                               End If
//000181:                                               Parallel.[For](0, height, New ParallelOptions(), Sub(i)
          IL_0000:  nop
//000182:                                                                                                    Dim id = threadId.Value
          IL_0001:  ldarg.0
          IL_0002:  ldfld      class VisualizePartitioning.MainForm/_Closure$__5/_Closure$__6 VisualizePartitioning.MainForm/_Closure$__5/_Closure$__6/_Closure$__7::$VB$NonLocal_$VB$Closure_ClosureVariable_AB_22
          IL_0007:  ldfld      class [mscorlib]System.Threading.ThreadLocal`1<int32> VisualizePartitioning.MainForm/_Closure$__5/_Closure$__6::$VB$Local_threadId
          IL_000c:  callvirt   instance !0 class [mscorlib]System.Threading.ThreadLocal`1<int32>::get_Value()
          IL_0011:  stloc.0
//000183:                                                                                                    DoWork(selectedWorkload.Item2(height, i))
          IL_0012:  ldarg.0
          IL_0013:  ldfld      class VisualizePartitioning.MainForm/_Closure$__5 VisualizePartitioning.MainForm/_Closure$__5/_Closure$__6/_Closure$__7::$VB$NonLocal__Closure$__5
          IL_0018:  ldfld      class [mscorlib]System.Tuple`2<string,class [mscorlib]System.Func`3<int32,int32,int32>> VisualizePartitioning.MainForm/_Closure$__5::$VB$Local_selectedWorkload
          IL_001d:  callvirt   instance !1 class [mscorlib]System.Tuple`2<string,class [mscorlib]System.Func`3<int32,int32,int32>>::get_Item2()
          IL_0022:  ldarg.0
          IL_0023:  ldfld      class VisualizePartitioning.MainForm/_Closure$__5 VisualizePartitioning.MainForm/_Closure$__5/_Closure$__6/_Closure$__7::$VB$NonLocal__Closure$__5
          IL_0028:  ldfld      int32 VisualizePartitioning.MainForm/_Closure$__5::$VB$Local_height
          IL_002d:  ldarg.1
          IL_002e:  callvirt   instance !2 class [mscorlib]System.Func`3<int32,int32,int32>::Invoke(!0,
                                                                                                    !1)
          IL_0033:  call       int32 VisualizePartitioning.MainForm::DoWork(int32)
          IL_0038:  pop
//000184: 
//000185:                                                                                                    For j = 0 To width - 1
          IL_0039:  ldc.i4.0
          IL_003a:  ldarg.0
          IL_003b:  ldfld      class VisualizePartitioning.MainForm/_Closure$__5 VisualizePartitioning.MainForm/_Closure$__5/_Closure$__6/_Closure$__7::$VB$NonLocal__Closure$__5
          IL_0040:  ldfld      int32 VisualizePartitioning.MainForm/_Closure$__5::$VB$Local_width
          IL_0045:  ldc.i4.1
          IL_0046:  sub.ovf
          IL_0047:  stloc.2
          IL_0048:  stloc.1
          IL_0049:  br.s       IL_008c

//000186:                                                                                                        fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
          IL_004b:  ldarg.0
          IL_004c:  ldfld      class [ParallelExtensionsExtras]Microsoft.Drawing.FastBitmap VisualizePartitioning.MainForm/_Closure$__5/_Closure$__6/_Closure$__7::$VB$Local_fastBmp
          IL_0051:  ldloc.1
          IL_0052:  ldarg.1
          IL_0053:  ldarg.0
          IL_0054:  ldfld      class VisualizePartitioning.MainForm/_Closure$__5 VisualizePartitioning.MainForm/_Closure$__5/_Closure$__6/_Closure$__7::$VB$NonLocal__Closure$__5
          IL_0059:  ldfld      class VisualizePartitioning.MainForm VisualizePartitioning.MainForm/_Closure$__5::$VB$Me
          IL_005e:  ldfld      valuetype [System.Drawing]System.Drawing.Color[] VisualizePartitioning.MainForm::_colors
          IL_0063:  ldloc.0
          IL_0064:  ldarg.0
          IL_0065:  ldfld      class VisualizePartitioning.MainForm/_Closure$__5 VisualizePartitioning.MainForm/_Closure$__5/_Closure$__6/_Closure$__7::$VB$NonLocal__Closure$__5
          IL_006a:  ldfld      class VisualizePartitioning.MainForm VisualizePartitioning.MainForm/_Closure$__5::$VB$Me
          IL_006f:  ldfld      valuetype [System.Drawing]System.Drawing.Color[] VisualizePartitioning.MainForm::_colors
          IL_0074:  ldlen
          IL_0075:  conv.ovf.i4
          IL_0076:  rem
          IL_0077:  ldelema    [System.Drawing]System.Drawing.Color
          IL_007c:  ldobj      [System.Drawing]System.Drawing.Color
          IL_0081:  callvirt   instance void [ParallelExtensionsExtras]Microsoft.Drawing.FastBitmap::SetColor(int32,
                                                                                                              int32,
                                                                                                              valuetype [System.Drawing]System.Drawing.Color)
          IL_0086:  nop
//000187:                                                                                                    Next
          IL_0087:  nop
          IL_0088:  ldloc.1
          IL_0089:  ldc.i4.1
          IL_008a:  add.ovf
          IL_008b:  stloc.1
//000188:                                                                                                End Sub)
//000189:                                           Else
//000190:                                               Dim partitioner = selectedMethod.Item2(Enumerable.Range(0, height).ToArray())
//000191:                                               If useParallelForEach Then
//000192:                                                   Parallel.ForEach(partitioner, New ParallelOptions(), Sub(i)
//000193:                                                                                                            Dim id = threadId.Value
//000194:                                                                                                            DoWork(selectedWorkload.Item2(height, i))
//000195:                                                                                                            For j = 0 To width - 1
//000196:                                                                                                                fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000197:                                                                                                            Next
//000198:                                                                                                        End Sub)
//000199:                                               Else
//000200:                                                   Dim source = partitioner.AsParallel().WithDegreeOfParallelism(numProcs)
//000201:                                                   If selectedMethod.Item1 = PartitioningStripe Then
//000202:                                                       source = source.TakeWhile(Function(elem) True)
//000203:                                                   ElseIf selectedMethod.Item1 = PartitioningHash Then
//000204:                                                       source = source.Join(Enumerable.Range(0, height).AsParallel(), Function(i) i, Function(i) i, Function(i, ignore) i)
//000205:                                                   End If
//000206:                                                   source.ForAll(Sub(i)
//000207:                                                                     Dim id = threadId.Value
//000208:                                                                     DoWork(selectedWorkload.Item2(height, i))
//000209:                                                                     For j = 0 To width - 1
//000210:                                                                         fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000211:                                                                     Next
//000212:                                                                 End Sub)
//000213:                                               End If
//000214:                                           End If
//000215:                                           Return sw.Elapsed
//000216:                                       End Using
//000217:                                   End Function).ContinueWith(Sub(t)
//000218:                                                                  ' Dispose of the old image (if there was one) and display the new one.
//000219:                                                                  Dim old = pbPartitionedImage.Image
//000220:                                                                  pbPartitionedImage.Image = bmp
//000221:                                                                  If old IsNot Nothing Then
//000222:                                                                      old.Dispose()
//000223:                                                                  End If
//000224: 
//000225:                                                                  ' Re-enable controls on the form and display the elapsed time.
//000226:                                                                  btnVisualize.Enabled = True
//000227:                                                                  lblTime.Text = "Time: " & t.Result.ToString()
//000228:                                                              End Sub, TaskScheduler.FromCurrentSynchronizationContext())
//000229:         End Sub
//000230: 
//000231:         ''' <summary>Does an amount of work relative to the amount requested.</summary>
//000232:         ''' <param name="workAmount">The amount of work to perform.</param>
//000233:         <MethodImpl(MethodImplOptions.NoOptimization Or MethodImplOptions.NoInlining)>
//000234:         Private Shared Function DoWork(ByVal workAmount As Integer) As Integer
//000235:             Try
//000236:                 Dim value = 1
//000237:                 For i = 0 To workAmount - 1
//000238:                     value = value * workAmount
//000239:                 Next i
//000240:                 Return value
//000241:             Catch
//000242:                 Return 0
//000243:             End Try
//000244:         End Function
//000245: 
//000246:         ''' <summary>Update relevant portions of the form when the API radio buttons are checked.</summary>
//000247:         ''' <param name="sender">The radio button.</param>
//000248:         ''' <param name="e">The event args.</param>
//000249:         Private Sub rbAPI_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles rbParallelForEach.CheckedChanged,
//000250:             rbPLINQ.CheckedChanged, rbParallelFor.CheckedChanged
//000251:             lvPartitioningMethods.Enabled = Not rbParallelFor.Checked
//000252:             lvPartitioningMethods.HideSelection = Not lvPartitioningMethods.Enabled
//000253: 
//000254:             ' Recreate partitioning methods every time a radio button is checked,
//000255:             ' as which API is selected determines which partitioning methods are available.
//000256:             InitializePartitioningMethods()
//000257:         End Sub
//000258: 
//000259:         Private Sub tbCores_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbCores.ValueChanged
//000260:             toolTip1.SetToolTip(tbCores, tbCores.Value.ToString())
//000261:             InitializeColorPalette()
//000262:             Dim worker As Integer
//000263:             Dim io As Integer
//000264:             ThreadPool.GetMinThreads(worker, io)
//000265:             ThreadPool.SetMinThreads(tbCores.Value, io)
//000266:         End Sub
//000267: 
//000268:         Private Sub tbWorkFactor_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbWorkFactor.ValueChanged
//000269:             toolTip1.SetToolTip(tbWorkFactor, tbWorkFactor.Value.ToString())
//000270:         End Sub
//000271:     End Class
//000272: End Namespace
          IL_008c:  ldloc.1
          IL_008d:  ldloc.2
          IL_008e:  stloc.3
          IL_008f:  ldloc.3
          IL_0090:  ble.s      IL_004b

//000188:                                                                                                End Sub)
          IL_0092:  nop
          IL_0093:  ret
        } // end of method _Closure$__7::_Lambda$__22

        .method public specialname instance void 
                _Lambda$__23(int32 i) cil managed
        {
          .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
          // Code size       148 (0x94)
          .maxstack  6
          .locals init ([0] int32 id,
                   [1] int32 j,
                   [2] int32 VB$t_i4$L0,
                   [3] int32 VB$CG$t_i4$S0)
//000189:                                           Else
//000190:                                               Dim partitioner = selectedMethod.Item2(Enumerable.Range(0, height).ToArray())
//000191:                                               If useParallelForEach Then
//000192:                                                   Parallel.ForEach(partitioner, New ParallelOptions(), Sub(i)
          IL_0000:  nop
//000193:                                                                                                            Dim id = threadId.Value
          IL_0001:  ldarg.0
          IL_0002:  ldfld      class VisualizePartitioning.MainForm/_Closure$__5/_Closure$__6 VisualizePartitioning.MainForm/_Closure$__5/_Closure$__6/_Closure$__7::$VB$NonLocal_$VB$Closure_ClosureVariable_AB_22
          IL_0007:  ldfld      class [mscorlib]System.Threading.ThreadLocal`1<int32> VisualizePartitioning.MainForm/_Closure$__5/_Closure$__6::$VB$Local_threadId
          IL_000c:  callvirt   instance !0 class [mscorlib]System.Threading.ThreadLocal`1<int32>::get_Value()
          IL_0011:  stloc.0
//000194:                                                                                                            DoWork(selectedWorkload.Item2(height, i))
          IL_0012:  ldarg.0
          IL_0013:  ldfld      class VisualizePartitioning.MainForm/_Closure$__5 VisualizePartitioning.MainForm/_Closure$__5/_Closure$__6/_Closure$__7::$VB$NonLocal__Closure$__5
          IL_0018:  ldfld      class [mscorlib]System.Tuple`2<string,class [mscorlib]System.Func`3<int32,int32,int32>> VisualizePartitioning.MainForm/_Closure$__5::$VB$Local_selectedWorkload
          IL_001d:  callvirt   instance !1 class [mscorlib]System.Tuple`2<string,class [mscorlib]System.Func`3<int32,int32,int32>>::get_Item2()
          IL_0022:  ldarg.0
          IL_0023:  ldfld      class VisualizePartitioning.MainForm/_Closure$__5 VisualizePartitioning.MainForm/_Closure$__5/_Closure$__6/_Closure$__7::$VB$NonLocal__Closure$__5
          IL_0028:  ldfld      int32 VisualizePartitioning.MainForm/_Closure$__5::$VB$Local_height
          IL_002d:  ldarg.1
          IL_002e:  callvirt   instance !2 class [mscorlib]System.Func`3<int32,int32,int32>::Invoke(!0,
                                                                                                    !1)
          IL_0033:  call       int32 VisualizePartitioning.MainForm::DoWork(int32)
          IL_0038:  pop
//000195:                                                                                                            For j = 0 To width - 1
          IL_0039:  ldc.i4.0
          IL_003a:  ldarg.0
          IL_003b:  ldfld      class VisualizePartitioning.MainForm/_Closure$__5 VisualizePartitioning.MainForm/_Closure$__5/_Closure$__6/_Closure$__7::$VB$NonLocal__Closure$__5
          IL_0040:  ldfld      int32 VisualizePartitioning.MainForm/_Closure$__5::$VB$Local_width
          IL_0045:  ldc.i4.1
          IL_0046:  sub.ovf
          IL_0047:  stloc.2
          IL_0048:  stloc.1
          IL_0049:  br.s       IL_008c

//000196:                                                                                                                fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
          IL_004b:  ldarg.0
          IL_004c:  ldfld      class [ParallelExtensionsExtras]Microsoft.Drawing.FastBitmap VisualizePartitioning.MainForm/_Closure$__5/_Closure$__6/_Closure$__7::$VB$Local_fastBmp
          IL_0051:  ldloc.1
          IL_0052:  ldarg.1
          IL_0053:  ldarg.0
          IL_0054:  ldfld      class VisualizePartitioning.MainForm/_Closure$__5 VisualizePartitioning.MainForm/_Closure$__5/_Closure$__6/_Closure$__7::$VB$NonLocal__Closure$__5
          IL_0059:  ldfld      class VisualizePartitioning.MainForm VisualizePartitioning.MainForm/_Closure$__5::$VB$Me
          IL_005e:  ldfld      valuetype [System.Drawing]System.Drawing.Color[] VisualizePartitioning.MainForm::_colors
          IL_0063:  ldloc.0
          IL_0064:  ldarg.0
          IL_0065:  ldfld      class VisualizePartitioning.MainForm/_Closure$__5 VisualizePartitioning.MainForm/_Closure$__5/_Closure$__6/_Closure$__7::$VB$NonLocal__Closure$__5
          IL_006a:  ldfld      class VisualizePartitioning.MainForm VisualizePartitioning.MainForm/_Closure$__5::$VB$Me
          IL_006f:  ldfld      valuetype [System.Drawing]System.Drawing.Color[] VisualizePartitioning.MainForm::_colors
          IL_0074:  ldlen
          IL_0075:  conv.ovf.i4
          IL_0076:  rem
          IL_0077:  ldelema    [System.Drawing]System.Drawing.Color
          IL_007c:  ldobj      [System.Drawing]System.Drawing.Color
          IL_0081:  callvirt   instance void [ParallelExtensionsExtras]Microsoft.Drawing.FastBitmap::SetColor(int32,
                                                                                                              int32,
                                                                                                              valuetype [System.Drawing]System.Drawing.Color)
          IL_0086:  nop
//000197:                                                                                                            Next
          IL_0087:  nop
          IL_0088:  ldloc.1
          IL_0089:  ldc.i4.1
          IL_008a:  add.ovf
          IL_008b:  stloc.1
//000198:                                                                                                        End Sub)
//000199:                                               Else
//000200:                                                   Dim source = partitioner.AsParallel().WithDegreeOfParallelism(numProcs)
//000201:                                                   If selectedMethod.Item1 = PartitioningStripe Then
//000202:                                                       source = source.TakeWhile(Function(elem) True)
//000203:                                                   ElseIf selectedMethod.Item1 = PartitioningHash Then
//000204:                                                       source = source.Join(Enumerable.Range(0, height).AsParallel(), Function(i) i, Function(i) i, Function(i, ignore) i)
//000205:                                                   End If
//000206:                                                   source.ForAll(Sub(i)
//000207:                                                                     Dim id = threadId.Value
//000208:                                                                     DoWork(selectedWorkload.Item2(height, i))
//000209:                                                                     For j = 0 To width - 1
//000210:                                                                         fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000211:                                                                     Next
//000212:                                                                 End Sub)
//000213:                                               End If
//000214:                                           End If
//000215:                                           Return sw.Elapsed
//000216:                                       End Using
//000217:                                   End Function).ContinueWith(Sub(t)
//000218:                                                                  ' Dispose of the old image (if there was one) and display the new one.
//000219:                                                                  Dim old = pbPartitionedImage.Image
//000220:                                                                  pbPartitionedImage.Image = bmp
//000221:                                                                  If old IsNot Nothing Then
//000222:                                                                      old.Dispose()
//000223:                                                                  End If
//000224: 
//000225:                                                                  ' Re-enable controls on the form and display the elapsed time.
//000226:                                                                  btnVisualize.Enabled = True
//000227:                                                                  lblTime.Text = "Time: " & t.Result.ToString()
//000228:                                                              End Sub, TaskScheduler.FromCurrentSynchronizationContext())
//000229:         End Sub
//000230: 
//000231:         ''' <summary>Does an amount of work relative to the amount requested.</summary>
//000232:         ''' <param name="workAmount">The amount of work to perform.</param>
//000233:         <MethodImpl(MethodImplOptions.NoOptimization Or MethodImplOptions.NoInlining)>
//000234:         Private Shared Function DoWork(ByVal workAmount As Integer) As Integer
//000235:             Try
//000236:                 Dim value = 1
//000237:                 For i = 0 To workAmount - 1
//000238:                     value = value * workAmount
//000239:                 Next i
//000240:                 Return value
//000241:             Catch
//000242:                 Return 0
//000243:             End Try
//000244:         End Function
//000245: 
//000246:         ''' <summary>Update relevant portions of the form when the API radio buttons are checked.</summary>
//000247:         ''' <param name="sender">The radio button.</param>
//000248:         ''' <param name="e">The event args.</param>
//000249:         Private Sub rbAPI_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles rbParallelForEach.CheckedChanged,
//000250:             rbPLINQ.CheckedChanged, rbParallelFor.CheckedChanged
//000251:             lvPartitioningMethods.Enabled = Not rbParallelFor.Checked
//000252:             lvPartitioningMethods.HideSelection = Not lvPartitioningMethods.Enabled
//000253: 
//000254:             ' Recreate partitioning methods every time a radio button is checked,
//000255:             ' as which API is selected determines which partitioning methods are available.
//000256:             InitializePartitioningMethods()
//000257:         End Sub
//000258: 
//000259:         Private Sub tbCores_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbCores.ValueChanged
//000260:             toolTip1.SetToolTip(tbCores, tbCores.Value.ToString())
//000261:             InitializeColorPalette()
//000262:             Dim worker As Integer
//000263:             Dim io As Integer
//000264:             ThreadPool.GetMinThreads(worker, io)
//000265:             ThreadPool.SetMinThreads(tbCores.Value, io)
//000266:         End Sub
//000267: 
//000268:         Private Sub tbWorkFactor_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbWorkFactor.ValueChanged
//000269:             toolTip1.SetToolTip(tbWorkFactor, tbWorkFactor.Value.ToString())
//000270:         End Sub
//000271:     End Class
//000272: End Namespace
          IL_008c:  ldloc.1
          IL_008d:  ldloc.2
          IL_008e:  stloc.3
          IL_008f:  ldloc.3
          IL_0090:  ble.s      IL_004b

//000198:                                                                                                        End Sub)
          IL_0092:  nop
          IL_0093:  ret
        } // end of method _Closure$__7::_Lambda$__23

        .method public specialname instance void 
                _Lambda$__28(int32 i) cil managed
        {
          .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
          // Code size       148 (0x94)
          .maxstack  6
          .locals init ([0] int32 id,
                   [1] int32 j,
                   [2] int32 VB$t_i4$L0,
                   [3] int32 VB$CG$t_i4$S0)
//000199:                                               Else
//000200:                                                   Dim source = partitioner.AsParallel().WithDegreeOfParallelism(numProcs)
//000201:                                                   If selectedMethod.Item1 = PartitioningStripe Then
//000202:                                                       source = source.TakeWhile(Function(elem) True)
//000203:                                                   ElseIf selectedMethod.Item1 = PartitioningHash Then
//000204:                                                       source = source.Join(Enumerable.Range(0, height).AsParallel(), Function(i) i, Function(i) i, Function(i, ignore) i)
//000205:                                                   End If
//000206:                                                   source.ForAll(Sub(i)
          IL_0000:  nop
//000207:                                                                     Dim id = threadId.Value
          IL_0001:  ldarg.0
          IL_0002:  ldfld      class VisualizePartitioning.MainForm/_Closure$__5/_Closure$__6 VisualizePartitioning.MainForm/_Closure$__5/_Closure$__6/_Closure$__7::$VB$NonLocal_$VB$Closure_ClosureVariable_AB_22
          IL_0007:  ldfld      class [mscorlib]System.Threading.ThreadLocal`1<int32> VisualizePartitioning.MainForm/_Closure$__5/_Closure$__6::$VB$Local_threadId
          IL_000c:  callvirt   instance !0 class [mscorlib]System.Threading.ThreadLocal`1<int32>::get_Value()
          IL_0011:  stloc.0
//000208:                                                                     DoWork(selectedWorkload.Item2(height, i))
          IL_0012:  ldarg.0
          IL_0013:  ldfld      class VisualizePartitioning.MainForm/_Closure$__5 VisualizePartitioning.MainForm/_Closure$__5/_Closure$__6/_Closure$__7::$VB$NonLocal__Closure$__5
          IL_0018:  ldfld      class [mscorlib]System.Tuple`2<string,class [mscorlib]System.Func`3<int32,int32,int32>> VisualizePartitioning.MainForm/_Closure$__5::$VB$Local_selectedWorkload
          IL_001d:  callvirt   instance !1 class [mscorlib]System.Tuple`2<string,class [mscorlib]System.Func`3<int32,int32,int32>>::get_Item2()
          IL_0022:  ldarg.0
          IL_0023:  ldfld      class VisualizePartitioning.MainForm/_Closure$__5 VisualizePartitioning.MainForm/_Closure$__5/_Closure$__6/_Closure$__7::$VB$NonLocal__Closure$__5
          IL_0028:  ldfld      int32 VisualizePartitioning.MainForm/_Closure$__5::$VB$Local_height
          IL_002d:  ldarg.1
          IL_002e:  callvirt   instance !2 class [mscorlib]System.Func`3<int32,int32,int32>::Invoke(!0,
                                                                                                    !1)
          IL_0033:  call       int32 VisualizePartitioning.MainForm::DoWork(int32)
          IL_0038:  pop
//000209:                                                                     For j = 0 To width - 1
          IL_0039:  ldc.i4.0
          IL_003a:  ldarg.0
          IL_003b:  ldfld      class VisualizePartitioning.MainForm/_Closure$__5 VisualizePartitioning.MainForm/_Closure$__5/_Closure$__6/_Closure$__7::$VB$NonLocal__Closure$__5
          IL_0040:  ldfld      int32 VisualizePartitioning.MainForm/_Closure$__5::$VB$Local_width
          IL_0045:  ldc.i4.1
          IL_0046:  sub.ovf
          IL_0047:  stloc.2
          IL_0048:  stloc.1
          IL_0049:  br.s       IL_008c

//000210:                                                                         fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
          IL_004b:  ldarg.0
          IL_004c:  ldfld      class [ParallelExtensionsExtras]Microsoft.Drawing.FastBitmap VisualizePartitioning.MainForm/_Closure$__5/_Closure$__6/_Closure$__7::$VB$Local_fastBmp
          IL_0051:  ldloc.1
          IL_0052:  ldarg.1
          IL_0053:  ldarg.0
          IL_0054:  ldfld      class VisualizePartitioning.MainForm/_Closure$__5 VisualizePartitioning.MainForm/_Closure$__5/_Closure$__6/_Closure$__7::$VB$NonLocal__Closure$__5
          IL_0059:  ldfld      class VisualizePartitioning.MainForm VisualizePartitioning.MainForm/_Closure$__5::$VB$Me
          IL_005e:  ldfld      valuetype [System.Drawing]System.Drawing.Color[] VisualizePartitioning.MainForm::_colors
          IL_0063:  ldloc.0
          IL_0064:  ldarg.0
          IL_0065:  ldfld      class VisualizePartitioning.MainForm/_Closure$__5 VisualizePartitioning.MainForm/_Closure$__5/_Closure$__6/_Closure$__7::$VB$NonLocal__Closure$__5
          IL_006a:  ldfld      class VisualizePartitioning.MainForm VisualizePartitioning.MainForm/_Closure$__5::$VB$Me
          IL_006f:  ldfld      valuetype [System.Drawing]System.Drawing.Color[] VisualizePartitioning.MainForm::_colors
          IL_0074:  ldlen
          IL_0075:  conv.ovf.i4
          IL_0076:  rem
          IL_0077:  ldelema    [System.Drawing]System.Drawing.Color
          IL_007c:  ldobj      [System.Drawing]System.Drawing.Color
          IL_0081:  callvirt   instance void [ParallelExtensionsExtras]Microsoft.Drawing.FastBitmap::SetColor(int32,
                                                                                                              int32,
                                                                                                              valuetype [System.Drawing]System.Drawing.Color)
          IL_0086:  nop
//000211:                                                                     Next
          IL_0087:  nop
          IL_0088:  ldloc.1
          IL_0089:  ldc.i4.1
          IL_008a:  add.ovf
          IL_008b:  stloc.1
//000212:                                                                 End Sub)
//000213:                                               End If
//000214:                                           End If
//000215:                                           Return sw.Elapsed
//000216:                                       End Using
//000217:                                   End Function).ContinueWith(Sub(t)
//000218:                                                                  ' Dispose of the old image (if there was one) and display the new one.
//000219:                                                                  Dim old = pbPartitionedImage.Image
//000220:                                                                  pbPartitionedImage.Image = bmp
//000221:                                                                  If old IsNot Nothing Then
//000222:                                                                      old.Dispose()
//000223:                                                                  End If
//000224: 
//000225:                                                                  ' Re-enable controls on the form and display the elapsed time.
//000226:                                                                  btnVisualize.Enabled = True
//000227:                                                                  lblTime.Text = "Time: " & t.Result.ToString()
//000228:                                                              End Sub, TaskScheduler.FromCurrentSynchronizationContext())
//000229:         End Sub
//000230: 
//000231:         ''' <summary>Does an amount of work relative to the amount requested.</summary>
//000232:         ''' <param name="workAmount">The amount of work to perform.</param>
//000233:         <MethodImpl(MethodImplOptions.NoOptimization Or MethodImplOptions.NoInlining)>
//000234:         Private Shared Function DoWork(ByVal workAmount As Integer) As Integer
//000235:             Try
//000236:                 Dim value = 1
//000237:                 For i = 0 To workAmount - 1
//000238:                     value = value * workAmount
//000239:                 Next i
//000240:                 Return value
//000241:             Catch
//000242:                 Return 0
//000243:             End Try
//000244:         End Function
//000245: 
//000246:         ''' <summary>Update relevant portions of the form when the API radio buttons are checked.</summary>
//000247:         ''' <param name="sender">The radio button.</param>
//000248:         ''' <param name="e">The event args.</param>
//000249:         Private Sub rbAPI_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles rbParallelForEach.CheckedChanged,
//000250:             rbPLINQ.CheckedChanged, rbParallelFor.CheckedChanged
//000251:             lvPartitioningMethods.Enabled = Not rbParallelFor.Checked
//000252:             lvPartitioningMethods.HideSelection = Not lvPartitioningMethods.Enabled
//000253: 
//000254:             ' Recreate partitioning methods every time a radio button is checked,
//000255:             ' as which API is selected determines which partitioning methods are available.
//000256:             InitializePartitioningMethods()
//000257:         End Sub
//000258: 
//000259:         Private Sub tbCores_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbCores.ValueChanged
//000260:             toolTip1.SetToolTip(tbCores, tbCores.Value.ToString())
//000261:             InitializeColorPalette()
//000262:             Dim worker As Integer
//000263:             Dim io As Integer
//000264:             ThreadPool.GetMinThreads(worker, io)
//000265:             ThreadPool.SetMinThreads(tbCores.Value, io)
//000266:         End Sub
//000267: 
//000268:         Private Sub tbWorkFactor_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbWorkFactor.ValueChanged
//000269:             toolTip1.SetToolTip(tbWorkFactor, tbWorkFactor.Value.ToString())
//000270:         End Sub
//000271:     End Class
//000272: End Namespace
          IL_008c:  ldloc.1
          IL_008d:  ldloc.2
          IL_008e:  stloc.3
          IL_008f:  ldloc.3
          IL_0090:  ble.s      IL_004b

//000212:                                                                 End Sub)
          IL_0092:  nop
          IL_0093:  ret
        } // end of method _Closure$__7::_Lambda$__28

      } // end of class _Closure$__7

      .field public int32 $VB$Local_nextId
      .field public class [mscorlib]System.Threading.ThreadLocal`1<int32> $VB$Local_threadId
      .method public specialname rtspecialname 
              instance void  .ctor() cil managed
      {
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       9 (0x9)
        .maxstack  8
        IL_0000:  ldarg.0
        IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
        IL_0006:  nop
        IL_0007:  nop
        IL_0008:  ret
      } // end of method _Closure$__6::.ctor

      .method public specialname rtspecialname 
              instance void  .ctor(class VisualizePartitioning.MainForm/_Closure$__5/_Closure$__6 other) cil managed
      {
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       45 (0x2d)
        .maxstack  2
        .locals init (bool V_0)
        IL_0000:  ldarg.0
        IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
        IL_0006:  nop
        IL_0007:  ldarg.1
        IL_0008:  ldnull
        IL_0009:  ceq
        IL_000b:  ldc.i4.0
        IL_000c:  ceq
        IL_000e:  stloc.0
        IL_000f:  ldloc.0
        IL_0010:  brfalse.s  IL_002a

        IL_0012:  ldarg.0
        IL_0013:  ldarg.1
        IL_0014:  ldfld      class [mscorlib]System.Threading.ThreadLocal`1<int32> VisualizePartitioning.MainForm/_Closure$__5/_Closure$__6::$VB$Local_threadId
        IL_0019:  stfld      class [mscorlib]System.Threading.ThreadLocal`1<int32> VisualizePartitioning.MainForm/_Closure$__5/_Closure$__6::$VB$Local_threadId
        IL_001e:  ldarg.0
        IL_001f:  ldarg.1
        IL_0020:  ldfld      int32 VisualizePartitioning.MainForm/_Closure$__5/_Closure$__6::$VB$Local_nextId
        IL_0025:  stfld      int32 VisualizePartitioning.MainForm/_Closure$__5/_Closure$__6::$VB$Local_nextId
        IL_002a:  nop
        IL_002b:  nop
        IL_002c:  ret
      } // end of method _Closure$__6::.ctor

      .method public specialname instance int32 
              _Lambda$__21() cil managed
      {
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       16 (0x10)
        .maxstack  1
        .locals init ([0] int32 _Lambda$__21)
//000174:                                       Dim threadId = New ThreadLocal(Of Integer)(Function() Interlocked.Increment(nextId))
        IL_0000:  ldarg.0
        IL_0001:  ldflda     int32 VisualizePartitioning.MainForm/_Closure$__5/_Closure$__6::$VB$Local_nextId
        IL_0006:  call       int32 [mscorlib]System.Threading.Interlocked::Increment(int32&)
        IL_000b:  stloc.0
        IL_000c:  br.s       IL_000e

        IL_000e:  ldloc.0
        IL_000f:  ret
      } // end of method _Closure$__6::_Lambda$__21

    } // end of class _Closure$__6

    .field public class [System.Drawing]System.Drawing.Bitmap $VB$Local_bmp
    .field public int32 $VB$Local_height
    .field public int32 $VB$Local_numProcs
    .field public class [mscorlib]System.Tuple`2<string,class [mscorlib]System.Func`2<int32[],class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32>>> $VB$Local_selectedMethod
    .field public class [mscorlib]System.Tuple`2<string,class [mscorlib]System.Func`3<int32,int32,int32>> $VB$Local_selectedWorkload
    .field public bool $VB$Local_useParallelFor
    .field public bool $VB$Local_useParallelForEach
    .field public int32 $VB$Local_width
    .field public class VisualizePartitioning.MainForm $VB$Me
    .method public specialname rtspecialname 
            instance void  .ctor(class VisualizePartitioning.MainForm/_Closure$__5 other) cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       129 (0x81)
      .maxstack  2
      .locals init (bool V_0)
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  nop
      IL_0007:  ldarg.1
      IL_0008:  ldnull
      IL_0009:  ceq
      IL_000b:  ldc.i4.0
      IL_000c:  ceq
      IL_000e:  stloc.0
      IL_000f:  ldloc.0
      IL_0010:  brfalse.s  IL_007e

      IL_0012:  ldarg.0
      IL_0013:  ldarg.1
      IL_0014:  ldfld      class [System.Drawing]System.Drawing.Bitmap VisualizePartitioning.MainForm/_Closure$__5::$VB$Local_bmp
      IL_0019:  stfld      class [System.Drawing]System.Drawing.Bitmap VisualizePartitioning.MainForm/_Closure$__5::$VB$Local_bmp
      IL_001e:  ldarg.0
      IL_001f:  ldarg.1
      IL_0020:  ldfld      int32 VisualizePartitioning.MainForm/_Closure$__5::$VB$Local_width
      IL_0025:  stfld      int32 VisualizePartitioning.MainForm/_Closure$__5::$VB$Local_width
      IL_002a:  ldarg.0
      IL_002b:  ldarg.1
      IL_002c:  ldfld      bool VisualizePartitioning.MainForm/_Closure$__5::$VB$Local_useParallelFor
      IL_0031:  stfld      bool VisualizePartitioning.MainForm/_Closure$__5::$VB$Local_useParallelFor
      IL_0036:  ldarg.0
      IL_0037:  ldarg.1
      IL_0038:  ldfld      class [mscorlib]System.Tuple`2<string,class [mscorlib]System.Func`2<int32[],class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32>>> VisualizePartitioning.MainForm/_Closure$__5::$VB$Local_selectedMethod
      IL_003d:  stfld      class [mscorlib]System.Tuple`2<string,class [mscorlib]System.Func`2<int32[],class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32>>> VisualizePartitioning.MainForm/_Closure$__5::$VB$Local_selectedMethod
      IL_0042:  ldarg.0
      IL_0043:  ldarg.1
      IL_0044:  ldfld      class VisualizePartitioning.MainForm VisualizePartitioning.MainForm/_Closure$__5::$VB$Me
      IL_0049:  stfld      class VisualizePartitioning.MainForm VisualizePartitioning.MainForm/_Closure$__5::$VB$Me
      IL_004e:  ldarg.0
      IL_004f:  ldarg.1
      IL_0050:  ldfld      class [mscorlib]System.Tuple`2<string,class [mscorlib]System.Func`3<int32,int32,int32>> VisualizePartitioning.MainForm/_Closure$__5::$VB$Local_selectedWorkload
      IL_0055:  stfld      class [mscorlib]System.Tuple`2<string,class [mscorlib]System.Func`3<int32,int32,int32>> VisualizePartitioning.MainForm/_Closure$__5::$VB$Local_selectedWorkload
      IL_005a:  ldarg.0
      IL_005b:  ldarg.1
      IL_005c:  ldfld      int32 VisualizePartitioning.MainForm/_Closure$__5::$VB$Local_height
      IL_0061:  stfld      int32 VisualizePartitioning.MainForm/_Closure$__5::$VB$Local_height
      IL_0066:  ldarg.0
      IL_0067:  ldarg.1
      IL_0068:  ldfld      int32 VisualizePartitioning.MainForm/_Closure$__5::$VB$Local_numProcs
      IL_006d:  stfld      int32 VisualizePartitioning.MainForm/_Closure$__5::$VB$Local_numProcs
      IL_0072:  ldarg.0
      IL_0073:  ldarg.1
      IL_0074:  ldfld      bool VisualizePartitioning.MainForm/_Closure$__5::$VB$Local_useParallelForEach
      IL_0079:  stfld      bool VisualizePartitioning.MainForm/_Closure$__5::$VB$Local_useParallelForEach
      IL_007e:  nop
      IL_007f:  nop
      IL_0080:  ret
    } // end of method _Closure$__5::.ctor

    .method public specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       9 (0x9)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  nop
      IL_0007:  nop
      IL_0008:  ret
    } // end of method _Closure$__5::.ctor

    .method public specialname instance void 
            _Lambda$__19(class [mscorlib]System.Threading.Tasks.Task`1<valuetype [mscorlib]System.TimeSpan> t) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       127 (0x7f)
      .maxstack  3
      .locals init ([0] class [System.Drawing]System.Drawing.Image old,
               [1] valuetype [mscorlib]System.TimeSpan VB$t_struct$S0,
               [2] bool VB$CG$t_bool$S0)
//000175:                                       Using fastBmp As New FastBitmap(bmp)
//000176:                                           Dim sw = Stopwatch.StartNew()
//000177:                                           If useParallelFor Then
//000178:                                               If fastBmp Is Nothing Then
//000179:                                                   MsgBox("FastBmp Disposed")
//000180:                                               End If
//000181:                                               Parallel.[For](0, height, New ParallelOptions(), Sub(i)
//000182:                                                                                                    Dim id = threadId.Value
//000183:                                                                                                    DoWork(selectedWorkload.Item2(height, i))
//000184: 
//000185:                                                                                                    For j = 0 To width - 1
//000186:                                                                                                        fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000187:                                                                                                    Next
//000188:                                                                                                End Sub)
//000189:                                           Else
//000190:                                               Dim partitioner = selectedMethod.Item2(Enumerable.Range(0, height).ToArray())
//000191:                                               If useParallelForEach Then
//000192:                                                   Parallel.ForEach(partitioner, New ParallelOptions(), Sub(i)
//000193:                                                                                                            Dim id = threadId.Value
//000194:                                                                                                            DoWork(selectedWorkload.Item2(height, i))
//000195:                                                                                                            For j = 0 To width - 1
//000196:                                                                                                                fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000197:                                                                                                            Next
//000198:                                                                                                        End Sub)
//000199:                                               Else
//000200:                                                   Dim source = partitioner.AsParallel().WithDegreeOfParallelism(numProcs)
//000201:                                                   If selectedMethod.Item1 = PartitioningStripe Then
//000202:                                                       source = source.TakeWhile(Function(elem) True)
//000203:                                                   ElseIf selectedMethod.Item1 = PartitioningHash Then
//000204:                                                       source = source.Join(Enumerable.Range(0, height).AsParallel(), Function(i) i, Function(i) i, Function(i, ignore) i)
//000205:                                                   End If
//000206:                                                   source.ForAll(Sub(i)
//000207:                                                                     Dim id = threadId.Value
//000208:                                                                     DoWork(selectedWorkload.Item2(height, i))
//000209:                                                                     For j = 0 To width - 1
//000210:                                                                         fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000211:                                                                     Next
//000212:                                                                 End Sub)
//000213:                                               End If
//000214:                                           End If
//000215:                                           Return sw.Elapsed
//000216:                                       End Using
//000217:                                   End Function).ContinueWith(Sub(t)
      IL_0000:  nop
//000218:                                                                  ' Dispose of the old image (if there was one) and display the new one.
//000219:                                                                  Dim old = pbPartitionedImage.Image
      IL_0001:  ldarg.0
      IL_0002:  ldfld      class VisualizePartitioning.MainForm VisualizePartitioning.MainForm/_Closure$__5::$VB$Me
      IL_0007:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox VisualizePartitioning.MainForm::pbPartitionedImage
      IL_000c:  callvirt   instance class [System.Drawing]System.Drawing.Image [System.Windows.Forms]System.Windows.Forms.PictureBox::get_Image()
      IL_0011:  stloc.0
//000220:                                                                  pbPartitionedImage.Image = bmp
      IL_0012:  ldarg.0
      IL_0013:  ldfld      class VisualizePartitioning.MainForm VisualizePartitioning.MainForm/_Closure$__5::$VB$Me
      IL_0018:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox VisualizePartitioning.MainForm::pbPartitionedImage
      IL_001d:  ldarg.0
      IL_001e:  ldfld      class [System.Drawing]System.Drawing.Bitmap VisualizePartitioning.MainForm/_Closure$__5::$VB$Local_bmp
      IL_0023:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.PictureBox::set_Image(class [System.Drawing]System.Drawing.Image)
      IL_0028:  nop
//000221:                                                                  If old IsNot Nothing Then
      IL_0029:  ldloc.0
      IL_002a:  ldnull
      IL_002b:  ceq
      IL_002d:  ldc.i4.0
      IL_002e:  ceq
      IL_0030:  stloc.2
//000222:                                                                      old.Dispose()
//000223:                                                                  End If
//000224: 
//000225:                                                                  ' Re-enable controls on the form and display the elapsed time.
//000226:                                                                  btnVisualize.Enabled = True
//000227:                                                                  lblTime.Text = "Time: " & t.Result.ToString()
//000228:                                                              End Sub, TaskScheduler.FromCurrentSynchronizationContext())
//000229:         End Sub
//000230: 
//000231:         ''' <summary>Does an amount of work relative to the amount requested.</summary>
//000232:         ''' <param name="workAmount">The amount of work to perform.</param>
//000233:         <MethodImpl(MethodImplOptions.NoOptimization Or MethodImplOptions.NoInlining)>
//000234:         Private Shared Function DoWork(ByVal workAmount As Integer) As Integer
//000235:             Try
//000236:                 Dim value = 1
//000237:                 For i = 0 To workAmount - 1
//000238:                     value = value * workAmount
//000239:                 Next i
//000240:                 Return value
//000241:             Catch
//000242:                 Return 0
//000243:             End Try
//000244:         End Function
//000245: 
//000246:         ''' <summary>Update relevant portions of the form when the API radio buttons are checked.</summary>
//000247:         ''' <param name="sender">The radio button.</param>
//000248:         ''' <param name="e">The event args.</param>
//000249:         Private Sub rbAPI_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles rbParallelForEach.CheckedChanged,
//000250:             rbPLINQ.CheckedChanged, rbParallelFor.CheckedChanged
//000251:             lvPartitioningMethods.Enabled = Not rbParallelFor.Checked
//000252:             lvPartitioningMethods.HideSelection = Not lvPartitioningMethods.Enabled
//000253: 
//000254:             ' Recreate partitioning methods every time a radio button is checked,
//000255:             ' as which API is selected determines which partitioning methods are available.
//000256:             InitializePartitioningMethods()
//000257:         End Sub
//000258: 
//000259:         Private Sub tbCores_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbCores.ValueChanged
//000260:             toolTip1.SetToolTip(tbCores, tbCores.Value.ToString())
//000261:             InitializeColorPalette()
//000262:             Dim worker As Integer
//000263:             Dim io As Integer
//000264:             ThreadPool.GetMinThreads(worker, io)
//000265:             ThreadPool.SetMinThreads(tbCores.Value, io)
//000266:         End Sub
//000267: 
//000268:         Private Sub tbWorkFactor_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbWorkFactor.ValueChanged
//000269:             toolTip1.SetToolTip(tbWorkFactor, tbWorkFactor.Value.ToString())
//000270:         End Sub
//000271:     End Class
//000272: End Namespace
      IL_0031:  ldloc.2
      IL_0032:  brfalse.s  IL_003b

//000222:                                                                      old.Dispose()
      IL_0034:  ldloc.0
      IL_0035:  callvirt   instance void [System.Drawing]System.Drawing.Image::Dispose()
      IL_003a:  nop
//000223:                                                                  End If
      IL_003b:  nop
//000224: 
//000225:                                                                  ' Re-enable controls on the form and display the elapsed time.
//000226:                                                                  btnVisualize.Enabled = True
      IL_003c:  ldarg.0
      IL_003d:  ldfld      class VisualizePartitioning.MainForm VisualizePartitioning.MainForm/_Closure$__5::$VB$Me
      IL_0042:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Button VisualizePartitioning.MainForm::get_btnVisualize()
      IL_0047:  ldc.i4.1
      IL_0048:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Enabled(bool)
      IL_004d:  nop
//000227:                                                                  lblTime.Text = "Time: " & t.Result.ToString()
      IL_004e:  ldarg.0
      IL_004f:  ldfld      class VisualizePartitioning.MainForm VisualizePartitioning.MainForm/_Closure$__5::$VB$Me
      IL_0054:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label VisualizePartitioning.MainForm::lblTime
      IL_0059:  ldstr      "Time: "
      IL_005e:  ldarg.1
      IL_005f:  callvirt   instance !0 class [mscorlib]System.Threading.Tasks.Task`1<valuetype [mscorlib]System.TimeSpan>::get_Result()
      IL_0064:  stloc.1
      IL_0065:  ldloca.s   VB$t_struct$S0
      IL_0067:  constrained. [mscorlib]System.TimeSpan
      IL_006d:  callvirt   instance string [mscorlib]System.Object::ToString()
      IL_0072:  call       string [mscorlib]System.String::Concat(string,
                                                                  string)
      IL_0077:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Label::set_Text(string)
      IL_007c:  nop
//000228:                                                              End Sub, TaskScheduler.FromCurrentSynchronizationContext())
      IL_007d:  nop
      IL_007e:  ret
    } // end of method _Closure$__5::_Lambda$__19

    .method public specialname instance valuetype [mscorlib]System.TimeSpan 
            _Lambda$__20() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       477 (0x1dd)
      .maxstack  6
      .locals init ([0] valuetype [mscorlib]System.TimeSpan _Lambda$__20,
               [1] class VisualizePartitioning.MainForm/_Closure$__5/_Closure$__6 $VB$Closure_ClosureVariable_AB_22,
               [2] class VisualizePartitioning.MainForm/_Closure$__5/_Closure$__6/_Closure$__7 $VB$Closure_ClosureVariable_AE_26,
               [3] class [System]System.Diagnostics.Stopwatch sw,
               [4] class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32> partitioner,
               [5] class [System.Core]System.Linq.ParallelQuery`1<int32> source,
               [6] bool VB$CG$t_bool$S0,
               [7] bool VB$CG$t_bool$S1)
//000172:             Task.Factory.StartNew(Function()
      IL_0000:  nop
//000173:                                       Dim nextId = -1
//000174:                                       Dim threadId = New ThreadLocal(Of Integer)(Function() Interlocked.Increment(nextId))
//000175:                                       Using fastBmp As New FastBitmap(bmp)
//000176:                                           Dim sw = Stopwatch.StartNew()
//000177:                                           If useParallelFor Then
//000178:                                               If fastBmp Is Nothing Then
//000179:                                                   MsgBox("FastBmp Disposed")
//000180:                                               End If
//000181:                                               Parallel.[For](0, height, New ParallelOptions(), Sub(i)
//000182:                                                                                                    Dim id = threadId.Value
//000183:                                                                                                    DoWork(selectedWorkload.Item2(height, i))
//000184: 
//000185:                                                                                                    For j = 0 To width - 1
//000186:                                                                                                        fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000187:                                                                                                    Next
//000188:                                                                                                End Sub)
//000189:                                           Else
//000190:                                               Dim partitioner = selectedMethod.Item2(Enumerable.Range(0, height).ToArray())
//000191:                                               If useParallelForEach Then
//000192:                                                   Parallel.ForEach(partitioner, New ParallelOptions(), Sub(i)
//000193:                                                                                                            Dim id = threadId.Value
//000194:                                                                                                            DoWork(selectedWorkload.Item2(height, i))
//000195:                                                                                                            For j = 0 To width - 1
//000196:                                                                                                                fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000197:                                                                                                            Next
//000198:                                                                                                        End Sub)
//000199:                                               Else
//000200:                                                   Dim source = partitioner.AsParallel().WithDegreeOfParallelism(numProcs)
//000201:                                                   If selectedMethod.Item1 = PartitioningStripe Then
//000202:                                                       source = source.TakeWhile(Function(elem) True)
//000203:                                                   ElseIf selectedMethod.Item1 = PartitioningHash Then
//000204:                                                       source = source.Join(Enumerable.Range(0, height).AsParallel(), Function(i) i, Function(i) i, Function(i, ignore) i)
//000205:                                                   End If
//000206:                                                   source.ForAll(Sub(i)
//000207:                                                                     Dim id = threadId.Value
//000208:                                                                     DoWork(selectedWorkload.Item2(height, i))
//000209:                                                                     For j = 0 To width - 1
//000210:                                                                         fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000211:                                                                     Next
//000212:                                                                 End Sub)
//000213:                                               End If
//000214:                                           End If
//000215:                                           Return sw.Elapsed
//000216:                                       End Using
//000217:                                   End Function).ContinueWith(Sub(t)
//000218:                                                                  ' Dispose of the old image (if there was one) and display the new one.
//000219:                                                                  Dim old = pbPartitionedImage.Image
//000220:                                                                  pbPartitionedImage.Image = bmp
//000221:                                                                  If old IsNot Nothing Then
//000222:                                                                      old.Dispose()
//000223:                                                                  End If
//000224: 
//000225:                                                                  ' Re-enable controls on the form and display the elapsed time.
//000226:                                                                  btnVisualize.Enabled = True
//000227:                                                                  lblTime.Text = "Time: " & t.Result.ToString()
//000228:                                                              End Sub, TaskScheduler.FromCurrentSynchronizationContext())
//000229:         End Sub
//000230: 
//000231:         ''' <summary>Does an amount of work relative to the amount requested.</summary>
//000232:         ''' <param name="workAmount">The amount of work to perform.</param>
//000233:         <MethodImpl(MethodImplOptions.NoOptimization Or MethodImplOptions.NoInlining)>
//000234:         Private Shared Function DoWork(ByVal workAmount As Integer) As Integer
//000235:             Try
//000236:                 Dim value = 1
//000237:                 For i = 0 To workAmount - 1
//000238:                     value = value * workAmount
//000239:                 Next i
//000240:                 Return value
//000241:             Catch
//000242:                 Return 0
//000243:             End Try
//000244:         End Function
//000245: 
//000246:         ''' <summary>Update relevant portions of the form when the API radio buttons are checked.</summary>
//000247:         ''' <param name="sender">The radio button.</param>
//000248:         ''' <param name="e">The event args.</param>
//000249:         Private Sub rbAPI_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles rbParallelForEach.CheckedChanged,
//000250:             rbPLINQ.CheckedChanged, rbParallelFor.CheckedChanged
//000251:             lvPartitioningMethods.Enabled = Not rbParallelFor.Checked
//000252:             lvPartitioningMethods.HideSelection = Not lvPartitioningMethods.Enabled
//000253: 
//000254:             ' Recreate partitioning methods every time a radio button is checked,
//000255:             ' as which API is selected determines which partitioning methods are available.
//000256:             InitializePartitioningMethods()
//000257:         End Sub
//000258: 
//000259:         Private Sub tbCores_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbCores.ValueChanged
//000260:             toolTip1.SetToolTip(tbCores, tbCores.Value.ToString())
//000261:             InitializeColorPalette()
//000262:             Dim worker As Integer
//000263:             Dim io As Integer
//000264:             ThreadPool.GetMinThreads(worker, io)
//000265:             ThreadPool.SetMinThreads(tbCores.Value, io)
//000266:         End Sub
//000267: 
//000268:         Private Sub tbWorkFactor_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbWorkFactor.ValueChanged
//000269:             toolTip1.SetToolTip(tbWorkFactor, tbWorkFactor.Value.ToString())
//000270:         End Sub
//000271:     End Class
//000272: End Namespace
      IL_0001:  newobj     instance void VisualizePartitioning.MainForm/_Closure$__5/_Closure$__6::.ctor()
      IL_0006:  stloc.1
//000173:                                       Dim nextId = -1
      IL_0007:  ldloc.1
      IL_0008:  ldc.i4.m1
      IL_0009:  stfld      int32 VisualizePartitioning.MainForm/_Closure$__5/_Closure$__6::$VB$Local_nextId
//000174:                                       Dim threadId = New ThreadLocal(Of Integer)(Function() Interlocked.Increment(nextId))
      IL_000e:  ldloc.1
      IL_000f:  ldloc.1
      IL_0010:  dup
      IL_0011:  ldvirtftn  instance int32 VisualizePartitioning.MainForm/_Closure$__5/_Closure$__6::_Lambda$__21()
      IL_0017:  newobj     instance void class [mscorlib]System.Func`1<int32>::.ctor(object,
                                                                                     native int)
      IL_001c:  newobj     instance void class [mscorlib]System.Threading.ThreadLocal`1<int32>::.ctor(class [mscorlib]System.Func`1<!0>)
      IL_0021:  stfld      class [mscorlib]System.Threading.ThreadLocal`1<int32> VisualizePartitioning.MainForm/_Closure$__5/_Closure$__6::$VB$Local_threadId
//000175:                                       Using fastBmp As New FastBitmap(bmp)
      IL_0026:  nop
//000176:                                           Dim sw = Stopwatch.StartNew()
//000177:                                           If useParallelFor Then
//000178:                                               If fastBmp Is Nothing Then
//000179:                                                   MsgBox("FastBmp Disposed")
//000180:                                               End If
//000181:                                               Parallel.[For](0, height, New ParallelOptions(), Sub(i)
//000182:                                                                                                    Dim id = threadId.Value
//000183:                                                                                                    DoWork(selectedWorkload.Item2(height, i))
//000184: 
//000185:                                                                                                    For j = 0 To width - 1
//000186:                                                                                                        fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000187:                                                                                                    Next
//000188:                                                                                                End Sub)
//000189:                                           Else
//000190:                                               Dim partitioner = selectedMethod.Item2(Enumerable.Range(0, height).ToArray())
//000191:                                               If useParallelForEach Then
//000192:                                                   Parallel.ForEach(partitioner, New ParallelOptions(), Sub(i)
//000193:                                                                                                            Dim id = threadId.Value
//000194:                                                                                                            DoWork(selectedWorkload.Item2(height, i))
//000195:                                                                                                            For j = 0 To width - 1
//000196:                                                                                                                fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000197:                                                                                                            Next
//000198:                                                                                                        End Sub)
//000199:                                               Else
//000200:                                                   Dim source = partitioner.AsParallel().WithDegreeOfParallelism(numProcs)
//000201:                                                   If selectedMethod.Item1 = PartitioningStripe Then
//000202:                                                       source = source.TakeWhile(Function(elem) True)
//000203:                                                   ElseIf selectedMethod.Item1 = PartitioningHash Then
//000204:                                                       source = source.Join(Enumerable.Range(0, height).AsParallel(), Function(i) i, Function(i) i, Function(i, ignore) i)
//000205:                                                   End If
//000206:                                                   source.ForAll(Sub(i)
//000207:                                                                     Dim id = threadId.Value
//000208:                                                                     DoWork(selectedWorkload.Item2(height, i))
//000209:                                                                     For j = 0 To width - 1
//000210:                                                                         fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000211:                                                                     Next
//000212:                                                                 End Sub)
//000213:                                               End If
//000214:                                           End If
//000215:                                           Return sw.Elapsed
//000216:                                       End Using
//000217:                                   End Function).ContinueWith(Sub(t)
//000218:                                                                  ' Dispose of the old image (if there was one) and display the new one.
//000219:                                                                  Dim old = pbPartitionedImage.Image
//000220:                                                                  pbPartitionedImage.Image = bmp
//000221:                                                                  If old IsNot Nothing Then
//000222:                                                                      old.Dispose()
//000223:                                                                  End If
//000224: 
//000225:                                                                  ' Re-enable controls on the form and display the elapsed time.
//000226:                                                                  btnVisualize.Enabled = True
//000227:                                                                  lblTime.Text = "Time: " & t.Result.ToString()
//000228:                                                              End Sub, TaskScheduler.FromCurrentSynchronizationContext())
//000229:         End Sub
//000230: 
//000231:         ''' <summary>Does an amount of work relative to the amount requested.</summary>
//000232:         ''' <param name="workAmount">The amount of work to perform.</param>
//000233:         <MethodImpl(MethodImplOptions.NoOptimization Or MethodImplOptions.NoInlining)>
//000234:         Private Shared Function DoWork(ByVal workAmount As Integer) As Integer
//000235:             Try
//000236:                 Dim value = 1
//000237:                 For i = 0 To workAmount - 1
//000238:                     value = value * workAmount
//000239:                 Next i
//000240:                 Return value
//000241:             Catch
//000242:                 Return 0
//000243:             End Try
//000244:         End Function
//000245: 
//000246:         ''' <summary>Update relevant portions of the form when the API radio buttons are checked.</summary>
//000247:         ''' <param name="sender">The radio button.</param>
//000248:         ''' <param name="e">The event args.</param>
//000249:         Private Sub rbAPI_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles rbParallelForEach.CheckedChanged,
//000250:             rbPLINQ.CheckedChanged, rbParallelFor.CheckedChanged
//000251:             lvPartitioningMethods.Enabled = Not rbParallelFor.Checked
//000252:             lvPartitioningMethods.HideSelection = Not lvPartitioningMethods.Enabled
//000253: 
//000254:             ' Recreate partitioning methods every time a radio button is checked,
//000255:             ' as which API is selected determines which partitioning methods are available.
//000256:             InitializePartitioningMethods()
//000257:         End Sub
//000258: 
//000259:         Private Sub tbCores_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbCores.ValueChanged
//000260:             toolTip1.SetToolTip(tbCores, tbCores.Value.ToString())
//000261:             InitializeColorPalette()
//000262:             Dim worker As Integer
//000263:             Dim io As Integer
//000264:             ThreadPool.GetMinThreads(worker, io)
//000265:             ThreadPool.SetMinThreads(tbCores.Value, io)
//000266:         End Sub
//000267: 
//000268:         Private Sub tbWorkFactor_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbWorkFactor.ValueChanged
//000269:             toolTip1.SetToolTip(tbWorkFactor, tbWorkFactor.Value.ToString())
//000270:         End Sub
//000271:     End Class
//000272: End Namespace
      IL_0027:  newobj     instance void VisualizePartitioning.MainForm/_Closure$__5/_Closure$__6/_Closure$__7::.ctor()
      IL_002c:  stloc.2
      IL_002d:  ldloc.2
      IL_002e:  ldarg.0
      IL_002f:  stfld      class VisualizePartitioning.MainForm/_Closure$__5 VisualizePartitioning.MainForm/_Closure$__5/_Closure$__6/_Closure$__7::$VB$NonLocal__Closure$__5
      IL_0034:  ldloc.2
      IL_0035:  ldloc.1
      IL_0036:  stfld      class VisualizePartitioning.MainForm/_Closure$__5/_Closure$__6 VisualizePartitioning.MainForm/_Closure$__5/_Closure$__6/_Closure$__7::$VB$NonLocal_$VB$Closure_ClosureVariable_AB_22
//000175:                                       Using fastBmp As New FastBitmap(bmp)
      IL_003b:  ldloc.2
      IL_003c:  ldarg.0
      IL_003d:  ldfld      class [System.Drawing]System.Drawing.Bitmap VisualizePartitioning.MainForm/_Closure$__5::$VB$Local_bmp
      IL_0042:  newobj     instance void [ParallelExtensionsExtras]Microsoft.Drawing.FastBitmap::.ctor(class [System.Drawing]System.Drawing.Bitmap)
      IL_0047:  stfld      class [ParallelExtensionsExtras]Microsoft.Drawing.FastBitmap VisualizePartitioning.MainForm/_Closure$__5/_Closure$__6/_Closure$__7::$VB$Local_fastBmp
//000176:                                           Dim sw = Stopwatch.StartNew()
//000177:                                           If useParallelFor Then
//000178:                                               If fastBmp Is Nothing Then
//000179:                                                   MsgBox("FastBmp Disposed")
//000180:                                               End If
//000181:                                               Parallel.[For](0, height, New ParallelOptions(), Sub(i)
//000182:                                                                                                    Dim id = threadId.Value
//000183:                                                                                                    DoWork(selectedWorkload.Item2(height, i))
//000184: 
//000185:                                                                                                    For j = 0 To width - 1
//000186:                                                                                                        fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000187:                                                                                                    Next
//000188:                                                                                                End Sub)
//000189:                                           Else
//000190:                                               Dim partitioner = selectedMethod.Item2(Enumerable.Range(0, height).ToArray())
//000191:                                               If useParallelForEach Then
//000192:                                                   Parallel.ForEach(partitioner, New ParallelOptions(), Sub(i)
//000193:                                                                                                            Dim id = threadId.Value
//000194:                                                                                                            DoWork(selectedWorkload.Item2(height, i))
//000195:                                                                                                            For j = 0 To width - 1
//000196:                                                                                                                fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000197:                                                                                                            Next
//000198:                                                                                                        End Sub)
//000199:                                               Else
//000200:                                                   Dim source = partitioner.AsParallel().WithDegreeOfParallelism(numProcs)
//000201:                                                   If selectedMethod.Item1 = PartitioningStripe Then
//000202:                                                       source = source.TakeWhile(Function(elem) True)
//000203:                                                   ElseIf selectedMethod.Item1 = PartitioningHash Then
//000204:                                                       source = source.Join(Enumerable.Range(0, height).AsParallel(), Function(i) i, Function(i) i, Function(i, ignore) i)
//000205:                                                   End If
//000206:                                                   source.ForAll(Sub(i)
//000207:                                                                     Dim id = threadId.Value
//000208:                                                                     DoWork(selectedWorkload.Item2(height, i))
//000209:                                                                     For j = 0 To width - 1
//000210:                                                                         fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000211:                                                                     Next
//000212:                                                                 End Sub)
//000213:                                               End If
//000214:                                           End If
//000215:                                           Return sw.Elapsed
//000216:                                       End Using
//000217:                                   End Function).ContinueWith(Sub(t)
//000218:                                                                  ' Dispose of the old image (if there was one) and display the new one.
//000219:                                                                  Dim old = pbPartitionedImage.Image
//000220:                                                                  pbPartitionedImage.Image = bmp
//000221:                                                                  If old IsNot Nothing Then
//000222:                                                                      old.Dispose()
//000223:                                                                  End If
//000224: 
//000225:                                                                  ' Re-enable controls on the form and display the elapsed time.
//000226:                                                                  btnVisualize.Enabled = True
//000227:                                                                  lblTime.Text = "Time: " & t.Result.ToString()
//000228:                                                              End Sub, TaskScheduler.FromCurrentSynchronizationContext())
//000229:         End Sub
//000230: 
//000231:         ''' <summary>Does an amount of work relative to the amount requested.</summary>
//000232:         ''' <param name="workAmount">The amount of work to perform.</param>
//000233:         <MethodImpl(MethodImplOptions.NoOptimization Or MethodImplOptions.NoInlining)>
//000234:         Private Shared Function DoWork(ByVal workAmount As Integer) As Integer
//000235:             Try
//000236:                 Dim value = 1
//000237:                 For i = 0 To workAmount - 1
//000238:                     value = value * workAmount
//000239:                 Next i
//000240:                 Return value
//000241:             Catch
//000242:                 Return 0
//000243:             End Try
//000244:         End Function
//000245: 
//000246:         ''' <summary>Update relevant portions of the form when the API radio buttons are checked.</summary>
//000247:         ''' <param name="sender">The radio button.</param>
//000248:         ''' <param name="e">The event args.</param>
//000249:         Private Sub rbAPI_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles rbParallelForEach.CheckedChanged,
//000250:             rbPLINQ.CheckedChanged, rbParallelFor.CheckedChanged
//000251:             lvPartitioningMethods.Enabled = Not rbParallelFor.Checked
//000252:             lvPartitioningMethods.HideSelection = Not lvPartitioningMethods.Enabled
//000253: 
//000254:             ' Recreate partitioning methods every time a radio button is checked,
//000255:             ' as which API is selected determines which partitioning methods are available.
//000256:             InitializePartitioningMethods()
//000257:         End Sub
//000258: 
//000259:         Private Sub tbCores_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbCores.ValueChanged
//000260:             toolTip1.SetToolTip(tbCores, tbCores.Value.ToString())
//000261:             InitializeColorPalette()
//000262:             Dim worker As Integer
//000263:             Dim io As Integer
//000264:             ThreadPool.GetMinThreads(worker, io)
//000265:             ThreadPool.SetMinThreads(tbCores.Value, io)
//000266:         End Sub
//000267: 
//000268:         Private Sub tbWorkFactor_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbWorkFactor.ValueChanged
//000269:             toolTip1.SetToolTip(tbWorkFactor, tbWorkFactor.Value.ToString())
//000270:         End Sub
//000271:     End Class
//000272: End Namespace
      IL_004c:  nop
//000176:                                           Dim sw = Stopwatch.StartNew()
      .try
      {
        IL_004d:  call       class [System]System.Diagnostics.Stopwatch [System]System.Diagnostics.Stopwatch::StartNew()
        IL_0052:  stloc.3
//000177:                                           If useParallelFor Then
        IL_0053:  ldarg.0
        IL_0054:  ldfld      bool VisualizePartitioning.MainForm/_Closure$__5::$VB$Local_useParallelFor
        IL_0059:  stloc.s    VB$CG$t_bool$S0
//000178:                                               If fastBmp Is Nothing Then
//000179:                                                   MsgBox("FastBmp Disposed")
//000180:                                               End If
//000181:                                               Parallel.[For](0, height, New ParallelOptions(), Sub(i)
//000182:                                                                                                    Dim id = threadId.Value
//000183:                                                                                                    DoWork(selectedWorkload.Item2(height, i))
//000184: 
//000185:                                                                                                    For j = 0 To width - 1
//000186:                                                                                                        fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000187:                                                                                                    Next
//000188:                                                                                                End Sub)
//000189:                                           Else
//000190:                                               Dim partitioner = selectedMethod.Item2(Enumerable.Range(0, height).ToArray())
//000191:                                               If useParallelForEach Then
//000192:                                                   Parallel.ForEach(partitioner, New ParallelOptions(), Sub(i)
//000193:                                                                                                            Dim id = threadId.Value
//000194:                                                                                                            DoWork(selectedWorkload.Item2(height, i))
//000195:                                                                                                            For j = 0 To width - 1
//000196:                                                                                                                fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000197:                                                                                                            Next
//000198:                                                                                                        End Sub)
//000199:                                               Else
//000200:                                                   Dim source = partitioner.AsParallel().WithDegreeOfParallelism(numProcs)
//000201:                                                   If selectedMethod.Item1 = PartitioningStripe Then
//000202:                                                       source = source.TakeWhile(Function(elem) True)
//000203:                                                   ElseIf selectedMethod.Item1 = PartitioningHash Then
//000204:                                                       source = source.Join(Enumerable.Range(0, height).AsParallel(), Function(i) i, Function(i) i, Function(i, ignore) i)
//000205:                                                   End If
//000206:                                                   source.ForAll(Sub(i)
//000207:                                                                     Dim id = threadId.Value
//000208:                                                                     DoWork(selectedWorkload.Item2(height, i))
//000209:                                                                     For j = 0 To width - 1
//000210:                                                                         fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000211:                                                                     Next
//000212:                                                                 End Sub)
//000213:                                               End If
//000214:                                           End If
//000215:                                           Return sw.Elapsed
//000216:                                       End Using
//000217:                                   End Function).ContinueWith(Sub(t)
//000218:                                                                  ' Dispose of the old image (if there was one) and display the new one.
//000219:                                                                  Dim old = pbPartitionedImage.Image
//000220:                                                                  pbPartitionedImage.Image = bmp
//000221:                                                                  If old IsNot Nothing Then
//000222:                                                                      old.Dispose()
//000223:                                                                  End If
//000224: 
//000225:                                                                  ' Re-enable controls on the form and display the elapsed time.
//000226:                                                                  btnVisualize.Enabled = True
//000227:                                                                  lblTime.Text = "Time: " & t.Result.ToString()
//000228:                                                              End Sub, TaskScheduler.FromCurrentSynchronizationContext())
//000229:         End Sub
//000230: 
//000231:         ''' <summary>Does an amount of work relative to the amount requested.</summary>
//000232:         ''' <param name="workAmount">The amount of work to perform.</param>
//000233:         <MethodImpl(MethodImplOptions.NoOptimization Or MethodImplOptions.NoInlining)>
//000234:         Private Shared Function DoWork(ByVal workAmount As Integer) As Integer
//000235:             Try
//000236:                 Dim value = 1
//000237:                 For i = 0 To workAmount - 1
//000238:                     value = value * workAmount
//000239:                 Next i
//000240:                 Return value
//000241:             Catch
//000242:                 Return 0
//000243:             End Try
//000244:         End Function
//000245: 
//000246:         ''' <summary>Update relevant portions of the form when the API radio buttons are checked.</summary>
//000247:         ''' <param name="sender">The radio button.</param>
//000248:         ''' <param name="e">The event args.</param>
//000249:         Private Sub rbAPI_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles rbParallelForEach.CheckedChanged,
//000250:             rbPLINQ.CheckedChanged, rbParallelFor.CheckedChanged
//000251:             lvPartitioningMethods.Enabled = Not rbParallelFor.Checked
//000252:             lvPartitioningMethods.HideSelection = Not lvPartitioningMethods.Enabled
//000253: 
//000254:             ' Recreate partitioning methods every time a radio button is checked,
//000255:             ' as which API is selected determines which partitioning methods are available.
//000256:             InitializePartitioningMethods()
//000257:         End Sub
//000258: 
//000259:         Private Sub tbCores_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbCores.ValueChanged
//000260:             toolTip1.SetToolTip(tbCores, tbCores.Value.ToString())
//000261:             InitializeColorPalette()
//000262:             Dim worker As Integer
//000263:             Dim io As Integer
//000264:             ThreadPool.GetMinThreads(worker, io)
//000265:             ThreadPool.SetMinThreads(tbCores.Value, io)
//000266:         End Sub
//000267: 
//000268:         Private Sub tbWorkFactor_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbWorkFactor.ValueChanged
//000269:             toolTip1.SetToolTip(tbWorkFactor, tbWorkFactor.Value.ToString())
//000270:         End Sub
//000271:     End Class
//000272: End Namespace
        IL_005b:  ldloc.s    VB$CG$t_bool$S0
        IL_005d:  brfalse.s  IL_00a0

//000178:                                               If fastBmp Is Nothing Then
        IL_005f:  ldloc.2
        IL_0060:  ldfld      class [ParallelExtensionsExtras]Microsoft.Drawing.FastBitmap VisualizePartitioning.MainForm/_Closure$__5/_Closure$__6/_Closure$__7::$VB$Local_fastBmp
        IL_0065:  ldnull
        IL_0066:  ceq
        IL_0068:  stloc.s    VB$CG$t_bool$S1
//000179:                                                   MsgBox("FastBmp Disposed")
//000180:                                               End If
//000181:                                               Parallel.[For](0, height, New ParallelOptions(), Sub(i)
//000182:                                                                                                    Dim id = threadId.Value
//000183:                                                                                                    DoWork(selectedWorkload.Item2(height, i))
//000184: 
//000185:                                                                                                    For j = 0 To width - 1
//000186:                                                                                                        fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000187:                                                                                                    Next
//000188:                                                                                                End Sub)
//000189:                                           Else
//000190:                                               Dim partitioner = selectedMethod.Item2(Enumerable.Range(0, height).ToArray())
//000191:                                               If useParallelForEach Then
//000192:                                                   Parallel.ForEach(partitioner, New ParallelOptions(), Sub(i)
//000193:                                                                                                            Dim id = threadId.Value
//000194:                                                                                                            DoWork(selectedWorkload.Item2(height, i))
//000195:                                                                                                            For j = 0 To width - 1
//000196:                                                                                                                fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000197:                                                                                                            Next
//000198:                                                                                                        End Sub)
//000199:                                               Else
//000200:                                                   Dim source = partitioner.AsParallel().WithDegreeOfParallelism(numProcs)
//000201:                                                   If selectedMethod.Item1 = PartitioningStripe Then
//000202:                                                       source = source.TakeWhile(Function(elem) True)
//000203:                                                   ElseIf selectedMethod.Item1 = PartitioningHash Then
//000204:                                                       source = source.Join(Enumerable.Range(0, height).AsParallel(), Function(i) i, Function(i) i, Function(i, ignore) i)
//000205:                                                   End If
//000206:                                                   source.ForAll(Sub(i)
//000207:                                                                     Dim id = threadId.Value
//000208:                                                                     DoWork(selectedWorkload.Item2(height, i))
//000209:                                                                     For j = 0 To width - 1
//000210:                                                                         fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000211:                                                                     Next
//000212:                                                                 End Sub)
//000213:                                               End If
//000214:                                           End If
//000215:                                           Return sw.Elapsed
//000216:                                       End Using
//000217:                                   End Function).ContinueWith(Sub(t)
//000218:                                                                  ' Dispose of the old image (if there was one) and display the new one.
//000219:                                                                  Dim old = pbPartitionedImage.Image
//000220:                                                                  pbPartitionedImage.Image = bmp
//000221:                                                                  If old IsNot Nothing Then
//000222:                                                                      old.Dispose()
//000223:                                                                  End If
//000224: 
//000225:                                                                  ' Re-enable controls on the form and display the elapsed time.
//000226:                                                                  btnVisualize.Enabled = True
//000227:                                                                  lblTime.Text = "Time: " & t.Result.ToString()
//000228:                                                              End Sub, TaskScheduler.FromCurrentSynchronizationContext())
//000229:         End Sub
//000230: 
//000231:         ''' <summary>Does an amount of work relative to the amount requested.</summary>
//000232:         ''' <param name="workAmount">The amount of work to perform.</param>
//000233:         <MethodImpl(MethodImplOptions.NoOptimization Or MethodImplOptions.NoInlining)>
//000234:         Private Shared Function DoWork(ByVal workAmount As Integer) As Integer
//000235:             Try
//000236:                 Dim value = 1
//000237:                 For i = 0 To workAmount - 1
//000238:                     value = value * workAmount
//000239:                 Next i
//000240:                 Return value
//000241:             Catch
//000242:                 Return 0
//000243:             End Try
//000244:         End Function
//000245: 
//000246:         ''' <summary>Update relevant portions of the form when the API radio buttons are checked.</summary>
//000247:         ''' <param name="sender">The radio button.</param>
//000248:         ''' <param name="e">The event args.</param>
//000249:         Private Sub rbAPI_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles rbParallelForEach.CheckedChanged,
//000250:             rbPLINQ.CheckedChanged, rbParallelFor.CheckedChanged
//000251:             lvPartitioningMethods.Enabled = Not rbParallelFor.Checked
//000252:             lvPartitioningMethods.HideSelection = Not lvPartitioningMethods.Enabled
//000253: 
//000254:             ' Recreate partitioning methods every time a radio button is checked,
//000255:             ' as which API is selected determines which partitioning methods are available.
//000256:             InitializePartitioningMethods()
//000257:         End Sub
//000258: 
//000259:         Private Sub tbCores_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbCores.ValueChanged
//000260:             toolTip1.SetToolTip(tbCores, tbCores.Value.ToString())
//000261:             InitializeColorPalette()
//000262:             Dim worker As Integer
//000263:             Dim io As Integer
//000264:             ThreadPool.GetMinThreads(worker, io)
//000265:             ThreadPool.SetMinThreads(tbCores.Value, io)
//000266:         End Sub
//000267: 
//000268:         Private Sub tbWorkFactor_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbWorkFactor.ValueChanged
//000269:             toolTip1.SetToolTip(tbWorkFactor, tbWorkFactor.Value.ToString())
//000270:         End Sub
//000271:     End Class
//000272: End Namespace
        IL_006a:  ldloc.s    VB$CG$t_bool$S1
        IL_006c:  brfalse.s  IL_007b

//000179:                                                   MsgBox("FastBmp Disposed")
        IL_006e:  ldstr      "FastBmp Disposed"
        IL_0073:  ldc.i4.0
        IL_0074:  ldnull
        IL_0075:  call       valuetype [Microsoft.VisualBasic]Microsoft.VisualBasic.MsgBoxResult [Microsoft.VisualBasic]Microsoft.VisualBasic.Interaction::MsgBox(object,
                                                                                                                                                                  valuetype [Microsoft.VisualBasic]Microsoft.VisualBasic.MsgBoxStyle,
                                                                                                                                                                  object)
        IL_007a:  pop
//000180:                                               End If
        IL_007b:  nop
//000181:                                               Parallel.[For](0, height, New ParallelOptions(), Sub(i)
        IL_007c:  ldc.i4.0
        IL_007d:  ldarg.0
        IL_007e:  ldfld      int32 VisualizePartitioning.MainForm/_Closure$__5::$VB$Local_height
        IL_0083:  newobj     instance void [mscorlib]System.Threading.Tasks.ParallelOptions::.ctor()
        IL_0088:  ldloc.2
        IL_0089:  dup
        IL_008a:  ldvirtftn  instance void VisualizePartitioning.MainForm/_Closure$__5/_Closure$__6/_Closure$__7::_Lambda$__22(int32)
        IL_0090:  newobj     instance void class [mscorlib]System.Action`1<int32>::.ctor(object,
                                                                                         native int)
        IL_0095:  call       valuetype [mscorlib]System.Threading.Tasks.ParallelLoopResult [mscorlib]System.Threading.Tasks.Parallel::For(int32,
                                                                                                                                          int32,
                                                                                                                                          class [mscorlib]System.Threading.Tasks.ParallelOptions,
                                                                                                                                          class [mscorlib]System.Action`1<int32>)
        IL_009a:  pop
        IL_009b:  br         IL_01ae

//000182:                                                                                                    Dim id = threadId.Value
//000183:                                                                                                    DoWork(selectedWorkload.Item2(height, i))
//000184: 
//000185:                                                                                                    For j = 0 To width - 1
//000186:                                                                                                        fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000187:                                                                                                    Next
//000188:                                                                                                End Sub)
//000189:                                           Else
        IL_00a0:  nop
//000190:                                               Dim partitioner = selectedMethod.Item2(Enumerable.Range(0, height).ToArray())
        IL_00a1:  ldarg.0
        IL_00a2:  ldfld      class [mscorlib]System.Tuple`2<string,class [mscorlib]System.Func`2<int32[],class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32>>> VisualizePartitioning.MainForm/_Closure$__5::$VB$Local_selectedMethod
        IL_00a7:  callvirt   instance !1 class [mscorlib]System.Tuple`2<string,class [mscorlib]System.Func`2<int32[],class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32>>>::get_Item2()
        IL_00ac:  ldc.i4.0
        IL_00ad:  ldarg.0
        IL_00ae:  ldfld      int32 VisualizePartitioning.MainForm/_Closure$__5::$VB$Local_height
        IL_00b3:  call       class [mscorlib]System.Collections.Generic.IEnumerable`1<int32> [System.Core]System.Linq.Enumerable::Range(int32,
                                                                                                                                        int32)
        IL_00b8:  call       !!0[] [System.Core]System.Linq.Enumerable::ToArray<int32>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>)
        IL_00bd:  callvirt   instance !1 class [mscorlib]System.Func`2<int32[],class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32>>::Invoke(!0)
        IL_00c2:  stloc.s    partitioner
//000191:                                               If useParallelForEach Then
        IL_00c4:  ldarg.0
        IL_00c5:  ldfld      bool VisualizePartitioning.MainForm/_Closure$__5::$VB$Local_useParallelForEach
        IL_00ca:  stloc.s    VB$CG$t_bool$S1
//000192:                                                   Parallel.ForEach(partitioner, New ParallelOptions(), Sub(i)
//000193:                                                                                                            Dim id = threadId.Value
//000194:                                                                                                            DoWork(selectedWorkload.Item2(height, i))
//000195:                                                                                                            For j = 0 To width - 1
//000196:                                                                                                                fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000197:                                                                                                            Next
//000198:                                                                                                        End Sub)
//000199:                                               Else
//000200:                                                   Dim source = partitioner.AsParallel().WithDegreeOfParallelism(numProcs)
//000201:                                                   If selectedMethod.Item1 = PartitioningStripe Then
//000202:                                                       source = source.TakeWhile(Function(elem) True)
//000203:                                                   ElseIf selectedMethod.Item1 = PartitioningHash Then
//000204:                                                       source = source.Join(Enumerable.Range(0, height).AsParallel(), Function(i) i, Function(i) i, Function(i, ignore) i)
//000205:                                                   End If
//000206:                                                   source.ForAll(Sub(i)
//000207:                                                                     Dim id = threadId.Value
//000208:                                                                     DoWork(selectedWorkload.Item2(height, i))
//000209:                                                                     For j = 0 To width - 1
//000210:                                                                         fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000211:                                                                     Next
//000212:                                                                 End Sub)
//000213:                                               End If
//000214:                                           End If
//000215:                                           Return sw.Elapsed
//000216:                                       End Using
//000217:                                   End Function).ContinueWith(Sub(t)
//000218:                                                                  ' Dispose of the old image (if there was one) and display the new one.
//000219:                                                                  Dim old = pbPartitionedImage.Image
//000220:                                                                  pbPartitionedImage.Image = bmp
//000221:                                                                  If old IsNot Nothing Then
//000222:                                                                      old.Dispose()
//000223:                                                                  End If
//000224: 
//000225:                                                                  ' Re-enable controls on the form and display the elapsed time.
//000226:                                                                  btnVisualize.Enabled = True
//000227:                                                                  lblTime.Text = "Time: " & t.Result.ToString()
//000228:                                                              End Sub, TaskScheduler.FromCurrentSynchronizationContext())
//000229:         End Sub
//000230: 
//000231:         ''' <summary>Does an amount of work relative to the amount requested.</summary>
//000232:         ''' <param name="workAmount">The amount of work to perform.</param>
//000233:         <MethodImpl(MethodImplOptions.NoOptimization Or MethodImplOptions.NoInlining)>
//000234:         Private Shared Function DoWork(ByVal workAmount As Integer) As Integer
//000235:             Try
//000236:                 Dim value = 1
//000237:                 For i = 0 To workAmount - 1
//000238:                     value = value * workAmount
//000239:                 Next i
//000240:                 Return value
//000241:             Catch
//000242:                 Return 0
//000243:             End Try
//000244:         End Function
//000245: 
//000246:         ''' <summary>Update relevant portions of the form when the API radio buttons are checked.</summary>
//000247:         ''' <param name="sender">The radio button.</param>
//000248:         ''' <param name="e">The event args.</param>
//000249:         Private Sub rbAPI_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles rbParallelForEach.CheckedChanged,
//000250:             rbPLINQ.CheckedChanged, rbParallelFor.CheckedChanged
//000251:             lvPartitioningMethods.Enabled = Not rbParallelFor.Checked
//000252:             lvPartitioningMethods.HideSelection = Not lvPartitioningMethods.Enabled
//000253: 
//000254:             ' Recreate partitioning methods every time a radio button is checked,
//000255:             ' as which API is selected determines which partitioning methods are available.
//000256:             InitializePartitioningMethods()
//000257:         End Sub
//000258: 
//000259:         Private Sub tbCores_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbCores.ValueChanged
//000260:             toolTip1.SetToolTip(tbCores, tbCores.Value.ToString())
//000261:             InitializeColorPalette()
//000262:             Dim worker As Integer
//000263:             Dim io As Integer
//000264:             ThreadPool.GetMinThreads(worker, io)
//000265:             ThreadPool.SetMinThreads(tbCores.Value, io)
//000266:         End Sub
//000267: 
//000268:         Private Sub tbWorkFactor_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbWorkFactor.ValueChanged
//000269:             toolTip1.SetToolTip(tbWorkFactor, tbWorkFactor.Value.ToString())
//000270:         End Sub
//000271:     End Class
//000272: End Namespace
        IL_00cc:  ldloc.s    VB$CG$t_bool$S1
        IL_00ce:  brfalse.s  IL_00ef

//000192:                                                   Parallel.ForEach(partitioner, New ParallelOptions(), Sub(i)
        IL_00d0:  ldloc.s    partitioner
        IL_00d2:  newobj     instance void [mscorlib]System.Threading.Tasks.ParallelOptions::.ctor()
        IL_00d7:  ldloc.2
        IL_00d8:  dup
        IL_00d9:  ldvirtftn  instance void VisualizePartitioning.MainForm/_Closure$__5/_Closure$__6/_Closure$__7::_Lambda$__23(int32)
        IL_00df:  newobj     instance void class [mscorlib]System.Action`1<int32>::.ctor(object,
                                                                                         native int)
        IL_00e4:  call       valuetype [mscorlib]System.Threading.Tasks.ParallelLoopResult [mscorlib]System.Threading.Tasks.Parallel::ForEach<int32>(class [mscorlib]System.Collections.Concurrent.Partitioner`1<!!0>,
                                                                                                                                                     class [mscorlib]System.Threading.Tasks.ParallelOptions,
                                                                                                                                                     class [mscorlib]System.Action`1<!!0>)
        IL_00e9:  pop
        IL_00ea:  br         IL_01ad

//000193:                                                                                                            Dim id = threadId.Value
//000194:                                                                                                            DoWork(selectedWorkload.Item2(height, i))
//000195:                                                                                                            For j = 0 To width - 1
//000196:                                                                                                                fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000197:                                                                                                            Next
//000198:                                                                                                        End Sub)
//000199:                                               Else
        IL_00ef:  nop
//000200:                                                   Dim source = partitioner.AsParallel().WithDegreeOfParallelism(numProcs)
        IL_00f0:  ldloc.s    partitioner
        IL_00f2:  call       class [System.Core]System.Linq.ParallelQuery`1<!!0> [System.Core]System.Linq.ParallelEnumerable::AsParallel<int32>(class [mscorlib]System.Collections.Concurrent.Partitioner`1<!!0>)
        IL_00f7:  ldarg.0
        IL_00f8:  ldfld      int32 VisualizePartitioning.MainForm/_Closure$__5::$VB$Local_numProcs
        IL_00fd:  call       class [System.Core]System.Linq.ParallelQuery`1<!!0> [System.Core]System.Linq.ParallelEnumerable::WithDegreeOfParallelism<int32>(class [System.Core]System.Linq.ParallelQuery`1<!!0>,
                                                                                                                                                             int32)
        IL_0102:  stloc.s    source
//000201:                                                   If selectedMethod.Item1 = PartitioningStripe Then
        IL_0104:  ldarg.0
        IL_0105:  ldfld      class [mscorlib]System.Tuple`2<string,class [mscorlib]System.Func`2<int32[],class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32>>> VisualizePartitioning.MainForm/_Closure$__5::$VB$Local_selectedMethod
        IL_010a:  callvirt   instance !0 class [mscorlib]System.Tuple`2<string,class [mscorlib]System.Func`2<int32[],class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32>>>::get_Item1()
        IL_010f:  ldstr      "Stripe"
        IL_0114:  ldc.i4.0
        IL_0115:  call       int32 [Microsoft.VisualBasic]Microsoft.VisualBasic.CompilerServices.Operators::CompareString(string,
                                                                                                                          string,
                                                                                                                          bool)
        IL_011a:  ldc.i4.0
        IL_011b:  ceq
        IL_011d:  stloc.s    VB$CG$t_bool$S1
//000202:                                                       source = source.TakeWhile(Function(elem) True)
//000203:                                                   ElseIf selectedMethod.Item1 = PartitioningHash Then
//000204:                                                       source = source.Join(Enumerable.Range(0, height).AsParallel(), Function(i) i, Function(i) i, Function(i, ignore) i)
//000205:                                                   End If
//000206:                                                   source.ForAll(Sub(i)
//000207:                                                                     Dim id = threadId.Value
//000208:                                                                     DoWork(selectedWorkload.Item2(height, i))
//000209:                                                                     For j = 0 To width - 1
//000210:                                                                         fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000211:                                                                     Next
//000212:                                                                 End Sub)
//000213:                                               End If
//000214:                                           End If
//000215:                                           Return sw.Elapsed
//000216:                                       End Using
//000217:                                   End Function).ContinueWith(Sub(t)
//000218:                                                                  ' Dispose of the old image (if there was one) and display the new one.
//000219:                                                                  Dim old = pbPartitionedImage.Image
//000220:                                                                  pbPartitionedImage.Image = bmp
//000221:                                                                  If old IsNot Nothing Then
//000222:                                                                      old.Dispose()
//000223:                                                                  End If
//000224: 
//000225:                                                                  ' Re-enable controls on the form and display the elapsed time.
//000226:                                                                  btnVisualize.Enabled = True
//000227:                                                                  lblTime.Text = "Time: " & t.Result.ToString()
//000228:                                                              End Sub, TaskScheduler.FromCurrentSynchronizationContext())
//000229:         End Sub
//000230: 
//000231:         ''' <summary>Does an amount of work relative to the amount requested.</summary>
//000232:         ''' <param name="workAmount">The amount of work to perform.</param>
//000233:         <MethodImpl(MethodImplOptions.NoOptimization Or MethodImplOptions.NoInlining)>
//000234:         Private Shared Function DoWork(ByVal workAmount As Integer) As Integer
//000235:             Try
//000236:                 Dim value = 1
//000237:                 For i = 0 To workAmount - 1
//000238:                     value = value * workAmount
//000239:                 Next i
//000240:                 Return value
//000241:             Catch
//000242:                 Return 0
//000243:             End Try
//000244:         End Function
//000245: 
//000246:         ''' <summary>Update relevant portions of the form when the API radio buttons are checked.</summary>
//000247:         ''' <param name="sender">The radio button.</param>
//000248:         ''' <param name="e">The event args.</param>
//000249:         Private Sub rbAPI_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles rbParallelForEach.CheckedChanged,
//000250:             rbPLINQ.CheckedChanged, rbParallelFor.CheckedChanged
//000251:             lvPartitioningMethods.Enabled = Not rbParallelFor.Checked
//000252:             lvPartitioningMethods.HideSelection = Not lvPartitioningMethods.Enabled
//000253: 
//000254:             ' Recreate partitioning methods every time a radio button is checked,
//000255:             ' as which API is selected determines which partitioning methods are available.
//000256:             InitializePartitioningMethods()
//000257:         End Sub
//000258: 
//000259:         Private Sub tbCores_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbCores.ValueChanged
//000260:             toolTip1.SetToolTip(tbCores, tbCores.Value.ToString())
//000261:             InitializeColorPalette()
//000262:             Dim worker As Integer
//000263:             Dim io As Integer
//000264:             ThreadPool.GetMinThreads(worker, io)
//000265:             ThreadPool.SetMinThreads(tbCores.Value, io)
//000266:         End Sub
//000267: 
//000268:         Private Sub tbWorkFactor_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbWorkFactor.ValueChanged
//000269:             toolTip1.SetToolTip(tbWorkFactor, tbWorkFactor.Value.ToString())
//000270:         End Sub
//000271:     End Class
//000272: End Namespace
        IL_011f:  ldloc.s    VB$CG$t_bool$S1
        IL_0121:  brfalse.s  IL_013a

//000202:                                                       source = source.TakeWhile(Function(elem) True)
        IL_0123:  ldloc.s    source
        IL_0125:  ldnull
        IL_0126:  ldftn      bool VisualizePartitioning.MainForm::_Lambda$__24(int32)
        IL_012c:  newobj     instance void class [mscorlib]System.Func`2<int32,bool>::.ctor(object,
                                                                                            native int)
        IL_0131:  call       class [System.Core]System.Linq.ParallelQuery`1<!!0> [System.Core]System.Linq.ParallelEnumerable::TakeWhile<int32>(class [System.Core]System.Linq.ParallelQuery`1<!!0>,
                                                                                                                                               class [mscorlib]System.Func`2<!!0,bool>)
        IL_0136:  stloc.s    source
        IL_0138:  br.s       IL_0197

//000203:                                                   ElseIf selectedMethod.Item1 = PartitioningHash Then
        IL_013a:  ldarg.0
        IL_013b:  ldfld      class [mscorlib]System.Tuple`2<string,class [mscorlib]System.Func`2<int32[],class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32>>> VisualizePartitioning.MainForm/_Closure$__5::$VB$Local_selectedMethod
        IL_0140:  callvirt   instance !0 class [mscorlib]System.Tuple`2<string,class [mscorlib]System.Func`2<int32[],class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32>>>::get_Item1()
        IL_0145:  ldstr      "Hash"
        IL_014a:  ldc.i4.0
        IL_014b:  call       int32 [Microsoft.VisualBasic]Microsoft.VisualBasic.CompilerServices.Operators::CompareString(string,
                                                                                                                          string,
                                                                                                                          bool)
        IL_0150:  ldc.i4.0
        IL_0151:  ceq
        IL_0153:  stloc.s    VB$CG$t_bool$S1
//000204:                                                       source = source.Join(Enumerable.Range(0, height).AsParallel(), Function(i) i, Function(i) i, Function(i, ignore) i)
//000205:                                                   End If
//000206:                                                   source.ForAll(Sub(i)
//000207:                                                                     Dim id = threadId.Value
//000208:                                                                     DoWork(selectedWorkload.Item2(height, i))
//000209:                                                                     For j = 0 To width - 1
//000210:                                                                         fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000211:                                                                     Next
//000212:                                                                 End Sub)
//000213:                                               End If
//000214:                                           End If
//000215:                                           Return sw.Elapsed
//000216:                                       End Using
//000217:                                   End Function).ContinueWith(Sub(t)
//000218:                                                                  ' Dispose of the old image (if there was one) and display the new one.
//000219:                                                                  Dim old = pbPartitionedImage.Image
//000220:                                                                  pbPartitionedImage.Image = bmp
//000221:                                                                  If old IsNot Nothing Then
//000222:                                                                      old.Dispose()
//000223:                                                                  End If
//000224: 
//000225:                                                                  ' Re-enable controls on the form and display the elapsed time.
//000226:                                                                  btnVisualize.Enabled = True
//000227:                                                                  lblTime.Text = "Time: " & t.Result.ToString()
//000228:                                                              End Sub, TaskScheduler.FromCurrentSynchronizationContext())
//000229:         End Sub
//000230: 
//000231:         ''' <summary>Does an amount of work relative to the amount requested.</summary>
//000232:         ''' <param name="workAmount">The amount of work to perform.</param>
//000233:         <MethodImpl(MethodImplOptions.NoOptimization Or MethodImplOptions.NoInlining)>
//000234:         Private Shared Function DoWork(ByVal workAmount As Integer) As Integer
//000235:             Try
//000236:                 Dim value = 1
//000237:                 For i = 0 To workAmount - 1
//000238:                     value = value * workAmount
//000239:                 Next i
//000240:                 Return value
//000241:             Catch
//000242:                 Return 0
//000243:             End Try
//000244:         End Function
//000245: 
//000246:         ''' <summary>Update relevant portions of the form when the API radio buttons are checked.</summary>
//000247:         ''' <param name="sender">The radio button.</param>
//000248:         ''' <param name="e">The event args.</param>
//000249:         Private Sub rbAPI_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles rbParallelForEach.CheckedChanged,
//000250:             rbPLINQ.CheckedChanged, rbParallelFor.CheckedChanged
//000251:             lvPartitioningMethods.Enabled = Not rbParallelFor.Checked
//000252:             lvPartitioningMethods.HideSelection = Not lvPartitioningMethods.Enabled
//000253: 
//000254:             ' Recreate partitioning methods every time a radio button is checked,
//000255:             ' as which API is selected determines which partitioning methods are available.
//000256:             InitializePartitioningMethods()
//000257:         End Sub
//000258: 
//000259:         Private Sub tbCores_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbCores.ValueChanged
//000260:             toolTip1.SetToolTip(tbCores, tbCores.Value.ToString())
//000261:             InitializeColorPalette()
//000262:             Dim worker As Integer
//000263:             Dim io As Integer
//000264:             ThreadPool.GetMinThreads(worker, io)
//000265:             ThreadPool.SetMinThreads(tbCores.Value, io)
//000266:         End Sub
//000267: 
//000268:         Private Sub tbWorkFactor_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbWorkFactor.ValueChanged
//000269:             toolTip1.SetToolTip(tbWorkFactor, tbWorkFactor.Value.ToString())
//000270:         End Sub
//000271:     End Class
//000272: End Namespace
        IL_0155:  ldloc.s    VB$CG$t_bool$S1
        IL_0157:  brfalse.s  IL_0197

//000204:                                                       source = source.Join(Enumerable.Range(0, height).AsParallel(), Function(i) i, Function(i) i, Function(i, ignore) i)
        IL_0159:  ldloc.s    source
        IL_015b:  ldc.i4.0
        IL_015c:  ldarg.0
        IL_015d:  ldfld      int32 VisualizePartitioning.MainForm/_Closure$__5::$VB$Local_height
        IL_0162:  call       class [mscorlib]System.Collections.Generic.IEnumerable`1<int32> [System.Core]System.Linq.Enumerable::Range(int32,
                                                                                                                                        int32)
        IL_0167:  call       class [System.Core]System.Linq.ParallelQuery`1<!!0> [System.Core]System.Linq.ParallelEnumerable::AsParallel<int32>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>)
        IL_016c:  ldnull
        IL_016d:  ldftn      int32 VisualizePartitioning.MainForm::_Lambda$__25(int32)
        IL_0173:  newobj     instance void class [mscorlib]System.Func`2<int32,int32>::.ctor(object,
                                                                                             native int)
        IL_0178:  ldnull
        IL_0179:  ldftn      int32 VisualizePartitioning.MainForm::_Lambda$__26(int32)
        IL_017f:  newobj     instance void class [mscorlib]System.Func`2<int32,int32>::.ctor(object,
                                                                                             native int)
        IL_0184:  ldnull
        IL_0185:  ldftn      int32 VisualizePartitioning.MainForm::_Lambda$__27(int32,
                                                                                int32)
        IL_018b:  newobj     instance void class [mscorlib]System.Func`3<int32,int32,int32>::.ctor(object,
                                                                                                   native int)
        IL_0190:  call       class [System.Core]System.Linq.ParallelQuery`1<!!3> [System.Core]System.Linq.ParallelEnumerable::Join<int32,int32,int32,int32>(class [System.Core]System.Linq.ParallelQuery`1<!!0>,
                                                                                                                                                            class [System.Core]System.Linq.ParallelQuery`1<!!1>,
                                                                                                                                                            class [mscorlib]System.Func`2<!!0,!!2>,
                                                                                                                                                            class [mscorlib]System.Func`2<!!1,!!2>,
                                                                                                                                                            class [mscorlib]System.Func`3<!!0,!!1,!!3>)
        IL_0195:  stloc.s    source
//000205:                                                   End If
        IL_0197:  nop
//000206:                                                   source.ForAll(Sub(i)
        IL_0198:  ldloc.s    source
        IL_019a:  ldloc.2
        IL_019b:  dup
        IL_019c:  ldvirtftn  instance void VisualizePartitioning.MainForm/_Closure$__5/_Closure$__6/_Closure$__7::_Lambda$__28(int32)
        IL_01a2:  newobj     instance void class [mscorlib]System.Action`1<int32>::.ctor(object,
                                                                                         native int)
        IL_01a7:  call       void [System.Core]System.Linq.ParallelEnumerable::ForAll<int32>(class [System.Core]System.Linq.ParallelQuery`1<!!0>,
                                                                                             class [mscorlib]System.Action`1<!!0>)
        IL_01ac:  nop
//000207:                                                                     Dim id = threadId.Value
//000208:                                                                     DoWork(selectedWorkload.Item2(height, i))
//000209:                                                                     For j = 0 To width - 1
//000210:                                                                         fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000211:                                                                     Next
//000212:                                                                 End Sub)
//000213:                                               End If
        IL_01ad:  nop
//000214:                                           End If
        IL_01ae:  nop
//000215:                                           Return sw.Elapsed
        IL_01af:  ldloc.3
        IL_01b0:  callvirt   instance valuetype [mscorlib]System.TimeSpan [System]System.Diagnostics.Stopwatch::get_Elapsed()
        IL_01b5:  stloc.0
//000216:                                       End Using
//000217:                                   End Function).ContinueWith(Sub(t)
//000218:                                                                  ' Dispose of the old image (if there was one) and display the new one.
//000219:                                                                  Dim old = pbPartitionedImage.Image
//000220:                                                                  pbPartitionedImage.Image = bmp
//000221:                                                                  If old IsNot Nothing Then
//000222:                                                                      old.Dispose()
//000223:                                                                  End If
//000224: 
//000225:                                                                  ' Re-enable controls on the form and display the elapsed time.
//000226:                                                                  btnVisualize.Enabled = True
//000227:                                                                  lblTime.Text = "Time: " & t.Result.ToString()
//000228:                                                              End Sub, TaskScheduler.FromCurrentSynchronizationContext())
//000229:         End Sub
//000230: 
//000231:         ''' <summary>Does an amount of work relative to the amount requested.</summary>
//000232:         ''' <param name="workAmount">The amount of work to perform.</param>
//000233:         <MethodImpl(MethodImplOptions.NoOptimization Or MethodImplOptions.NoInlining)>
//000234:         Private Shared Function DoWork(ByVal workAmount As Integer) As Integer
//000235:             Try
//000236:                 Dim value = 1
//000237:                 For i = 0 To workAmount - 1
//000238:                     value = value * workAmount
//000239:                 Next i
//000240:                 Return value
//000241:             Catch
//000242:                 Return 0
//000243:             End Try
//000244:         End Function
//000245: 
//000246:         ''' <summary>Update relevant portions of the form when the API radio buttons are checked.</summary>
//000247:         ''' <param name="sender">The radio button.</param>
//000248:         ''' <param name="e">The event args.</param>
//000249:         Private Sub rbAPI_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles rbParallelForEach.CheckedChanged,
//000250:             rbPLINQ.CheckedChanged, rbParallelFor.CheckedChanged
//000251:             lvPartitioningMethods.Enabled = Not rbParallelFor.Checked
//000252:             lvPartitioningMethods.HideSelection = Not lvPartitioningMethods.Enabled
//000253: 
//000254:             ' Recreate partitioning methods every time a radio button is checked,
//000255:             ' as which API is selected determines which partitioning methods are available.
//000256:             InitializePartitioningMethods()
//000257:         End Sub
//000258: 
//000259:         Private Sub tbCores_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbCores.ValueChanged
//000260:             toolTip1.SetToolTip(tbCores, tbCores.Value.ToString())
//000261:             InitializeColorPalette()
//000262:             Dim worker As Integer
//000263:             Dim io As Integer
//000264:             ThreadPool.GetMinThreads(worker, io)
//000265:             ThreadPool.SetMinThreads(tbCores.Value, io)
//000266:         End Sub
//000267: 
//000268:         Private Sub tbWorkFactor_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbWorkFactor.ValueChanged
//000269:             toolTip1.SetToolTip(tbWorkFactor, tbWorkFactor.Value.ToString())
//000270:         End Sub
//000271:     End Class
//000272: End Namespace
        IL_01b6:  leave.s    IL_01db

//000216:                                       End Using
        IL_01b8:  nop
//000217:                                   End Function).ContinueWith(Sub(t)
//000218:                                                                  ' Dispose of the old image (if there was one) and display the new one.
//000219:                                                                  Dim old = pbPartitionedImage.Image
//000220:                                                                  pbPartitionedImage.Image = bmp
//000221:                                                                  If old IsNot Nothing Then
//000222:                                                                      old.Dispose()
//000223:                                                                  End If
//000224: 
//000225:                                                                  ' Re-enable controls on the form and display the elapsed time.
//000226:                                                                  btnVisualize.Enabled = True
//000227:                                                                  lblTime.Text = "Time: " & t.Result.ToString()
//000228:                                                              End Sub, TaskScheduler.FromCurrentSynchronizationContext())
//000229:         End Sub
//000230: 
//000231:         ''' <summary>Does an amount of work relative to the amount requested.</summary>
//000232:         ''' <param name="workAmount">The amount of work to perform.</param>
//000233:         <MethodImpl(MethodImplOptions.NoOptimization Or MethodImplOptions.NoInlining)>
//000234:         Private Shared Function DoWork(ByVal workAmount As Integer) As Integer
//000235:             Try
//000236:                 Dim value = 1
//000237:                 For i = 0 To workAmount - 1
//000238:                     value = value * workAmount
//000239:                 Next i
//000240:                 Return value
//000241:             Catch
//000242:                 Return 0
//000243:             End Try
//000244:         End Function
//000245: 
//000246:         ''' <summary>Update relevant portions of the form when the API radio buttons are checked.</summary>
//000247:         ''' <param name="sender">The radio button.</param>
//000248:         ''' <param name="e">The event args.</param>
//000249:         Private Sub rbAPI_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles rbParallelForEach.CheckedChanged,
//000250:             rbPLINQ.CheckedChanged, rbParallelFor.CheckedChanged
//000251:             lvPartitioningMethods.Enabled = Not rbParallelFor.Checked
//000252:             lvPartitioningMethods.HideSelection = Not lvPartitioningMethods.Enabled
//000253: 
//000254:             ' Recreate partitioning methods every time a radio button is checked,
//000255:             ' as which API is selected determines which partitioning methods are available.
//000256:             InitializePartitioningMethods()
//000257:         End Sub
//000258: 
//000259:         Private Sub tbCores_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbCores.ValueChanged
//000260:             toolTip1.SetToolTip(tbCores, tbCores.Value.ToString())
//000261:             InitializeColorPalette()
//000262:             Dim worker As Integer
//000263:             Dim io As Integer
//000264:             ThreadPool.GetMinThreads(worker, io)
//000265:             ThreadPool.SetMinThreads(tbCores.Value, io)
//000266:         End Sub
//000267: 
//000268:         Private Sub tbWorkFactor_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbWorkFactor.ValueChanged
//000269:             toolTip1.SetToolTip(tbWorkFactor, tbWorkFactor.Value.ToString())
//000270:         End Sub
//000271:     End Class
//000272: End Namespace
        IL_01b9:  leave.s    IL_01db

      }  // end .try
      finally
      {
        IL_01bb:  ldloc.2
        IL_01bc:  ldfld      class [ParallelExtensionsExtras]Microsoft.Drawing.FastBitmap VisualizePartitioning.MainForm/_Closure$__5/_Closure$__6/_Closure$__7::$VB$Local_fastBmp
        IL_01c1:  ldnull
        IL_01c2:  ceq
        IL_01c4:  ldc.i4.0
        IL_01c5:  ceq
        IL_01c7:  stloc.s    VB$CG$t_bool$S1
        IL_01c9:  ldloc.s    VB$CG$t_bool$S1
        IL_01cb:  brfalse.s  IL_01d9

        IL_01cd:  ldloc.2
        IL_01ce:  ldfld      class [ParallelExtensionsExtras]Microsoft.Drawing.FastBitmap VisualizePartitioning.MainForm/_Closure$__5/_Closure$__6/_Closure$__7::$VB$Local_fastBmp
        IL_01d3:  callvirt   instance void [mscorlib]System.IDisposable::Dispose()
        IL_01d8:  nop
        IL_01d9:  nop
        IL_01da:  endfinally
//000217:                                   End Function).ContinueWith(Sub(t)
      }  // end handler
      IL_01db:  ldloc.0
      IL_01dc:  ret
    } // end of method _Closure$__5::_Lambda$__20

  } // end of class _Closure$__5

  .field private static class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> __ENCList
  .field private class [System]System.ComponentModel.IContainer components
  .field private class [System.Windows.Forms]System.Windows.Forms.PictureBox pbPartitionedImage
  .field private class [System.Windows.Forms]System.Windows.Forms.Button _btnVisualize
  .custom instance void [mscorlib]System.Runtime.CompilerServices.AccessedThroughPropertyAttribute::.ctor(string) = ( 01 00 0C 62 74 6E 56 69 73 75 61 6C 69 7A 65 00   // ...btnVisualize.
                                                                                                                      00 ) 
  .field private class [System.Windows.Forms]System.Windows.Forms.ListView lvPartitioningMethods
  .field private class [System.Windows.Forms]System.Windows.Forms.ListView lvWorkloads
  .field private class [System.Windows.Forms]System.Windows.Forms.Label label1
  .field private class [System.Windows.Forms]System.Windows.Forms.Label label2
  .field private class [System.Windows.Forms]System.Windows.Forms.Label lblTime
  .field private class [System.Windows.Forms]System.Windows.Forms.TrackBar _tbWorkFactor
  .custom instance void [mscorlib]System.Runtime.CompilerServices.AccessedThroughPropertyAttribute::.ctor(string) = ( 01 00 0C 74 62 57 6F 72 6B 46 61 63 74 6F 72 00   // ...tbWorkFactor.
                                                                                                                      00 ) 
  .field private class [System.Windows.Forms]System.Windows.Forms.Label label3
  .field private class [System.Windows.Forms]System.Windows.Forms.RadioButton _rbParallelFor
  .custom instance void [mscorlib]System.Runtime.CompilerServices.AccessedThroughPropertyAttribute::.ctor(string) = ( 01 00 0D 72 62 50 61 72 61 6C 6C 65 6C 46 6F 72   // ...rbParallelFor
                                                                                                                      00 00 ) 
  .field private class [System.Windows.Forms]System.Windows.Forms.RadioButton _rbParallelForEach
  .custom instance void [mscorlib]System.Runtime.CompilerServices.AccessedThroughPropertyAttribute::.ctor(string) = ( 01 00 11 72 62 50 61 72 61 6C 6C 65 6C 46 6F 72   // ...rbParallelFor
                                                                                                                      45 61 63 68 00 00 )                               // Each..
  .field private class [System.Windows.Forms]System.Windows.Forms.RadioButton _rbPLINQ
  .custom instance void [mscorlib]System.Runtime.CompilerServices.AccessedThroughPropertyAttribute::.ctor(string) = ( 01 00 07 72 62 50 4C 49 4E 51 00 00 )             // ...rbPLINQ..
  .field private class [System.Windows.Forms]System.Windows.Forms.GroupBox groupBox1
  .field private class [System.Windows.Forms]System.Windows.Forms.Label label4
  .field private class [System.Windows.Forms]System.Windows.Forms.TrackBar _tbCores
  .custom instance void [mscorlib]System.Runtime.CompilerServices.AccessedThroughPropertyAttribute::.ctor(string) = ( 01 00 07 74 62 43 6F 72 65 73 00 00 )             // ...tbCores..
  .field private class [System.Windows.Forms]System.Windows.Forms.ToolTip toolTip1
  .field private static literal string PartitioningStripe = "Stripe"
  .field private static literal string PartitioningHash = "Hash"
  .field private valuetype [System.Drawing]System.Drawing.Color[] _colors
  .field private int32 _workFactor
  .field private static class [mscorlib]System.Random _randomnessSeed
  .field private static class [mscorlib]System.Threading.ThreadLocal`1<class [mscorlib]System.Random> _localRandom
  .method private static void  __ENCAddToList(object 'value') cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       243 (0xf3)
    .maxstack  4
    .locals init (int32 V_0,
             int32 V_1,
             class [mscorlib]System.WeakReference V_2,
             class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> V_3,
             bool V_4,
             int32 V_5,
             bool V_6,
             bool V_7,
             int32 V_8)
    IL_0000:  nop
    IL_0001:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> VisualizePartitioning.MainForm::__ENCList
    IL_0006:  stloc.3
    IL_0007:  ldc.i4.0
    IL_0008:  stloc.s    V_4
    IL_000a:  nop
    .try
    {
      IL_000b:  ldloc.3
      IL_000c:  ldloca.s   V_4
      IL_000e:  call       void [mscorlib]System.Threading.Monitor::Enter(object,
                                                                          bool&)
      IL_0013:  nop
      IL_0014:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> VisualizePartitioning.MainForm::__ENCList
      IL_0019:  callvirt   instance int32 class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::get_Count()
      IL_001e:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> VisualizePartitioning.MainForm::__ENCList
      IL_0023:  callvirt   instance int32 class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::get_Capacity()
      IL_0028:  ceq
      IL_002a:  stloc.s    V_6
      IL_002c:  ldloc.s    V_6
      IL_002e:  brfalse    IL_00c4

      IL_0033:  ldc.i4.0
      IL_0034:  stloc.0
      IL_0035:  ldc.i4.0
      IL_0036:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> VisualizePartitioning.MainForm::__ENCList
      IL_003b:  callvirt   instance int32 class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::get_Count()
      IL_0040:  ldc.i4.1
      IL_0041:  sub.ovf
      IL_0042:  stloc.s    V_5
      IL_0044:  stloc.1
      IL_0045:  br.s       IL_008e

      IL_0047:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> VisualizePartitioning.MainForm::__ENCList
      IL_004c:  ldloc.1
      IL_004d:  callvirt   instance !0 class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::get_Item(int32)
      IL_0052:  stloc.2
      IL_0053:  ldloc.2
      IL_0054:  callvirt   instance bool [mscorlib]System.WeakReference::get_IsAlive()
      IL_0059:  stloc.s    V_6
      IL_005b:  ldloc.s    V_6
      IL_005d:  brfalse.s  IL_0088

      IL_005f:  ldloc.1
      IL_0060:  ldloc.0
      IL_0061:  ceq
      IL_0063:  ldc.i4.0
      IL_0064:  ceq
      IL_0066:  stloc.s    V_7
      IL_0068:  ldloc.s    V_7
      IL_006a:  brfalse.s  IL_0083

      IL_006c:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> VisualizePartitioning.MainForm::__ENCList
      IL_0071:  ldloc.0
      IL_0072:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> VisualizePartitioning.MainForm::__ENCList
      IL_0077:  ldloc.1
      IL_0078:  callvirt   instance !0 class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::get_Item(int32)
      IL_007d:  callvirt   instance void class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::set_Item(int32,
                                                                                                                                           !0)
      IL_0082:  nop
      IL_0083:  nop
      IL_0084:  ldloc.0
      IL_0085:  ldc.i4.1
      IL_0086:  add.ovf
      IL_0087:  stloc.0
      IL_0088:  nop
      IL_0089:  nop
      IL_008a:  ldloc.1
      IL_008b:  ldc.i4.1
      IL_008c:  add.ovf
      IL_008d:  stloc.1
      IL_008e:  ldloc.1
      IL_008f:  ldloc.s    V_5
      IL_0091:  stloc.s    V_8
      IL_0093:  ldloc.s    V_8
      IL_0095:  ble.s      IL_0047

      IL_0097:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> VisualizePartitioning.MainForm::__ENCList
      IL_009c:  ldloc.0
      IL_009d:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> VisualizePartitioning.MainForm::__ENCList
      IL_00a2:  callvirt   instance int32 class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::get_Count()
      IL_00a7:  ldloc.0
      IL_00a8:  sub.ovf
      IL_00a9:  callvirt   instance void class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::RemoveRange(int32,
                                                                                                                                              int32)
      IL_00ae:  nop
      IL_00af:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> VisualizePartitioning.MainForm::__ENCList
      IL_00b4:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> VisualizePartitioning.MainForm::__ENCList
      IL_00b9:  callvirt   instance int32 class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::get_Count()
      IL_00be:  callvirt   instance void class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::set_Capacity(int32)
      IL_00c3:  nop
      IL_00c4:  nop
      IL_00c5:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> VisualizePartitioning.MainForm::__ENCList
      IL_00ca:  ldarg.0
      IL_00cb:  call       object [mscorlib]System.Runtime.CompilerServices.RuntimeHelpers::GetObjectValue(object)
      IL_00d0:  newobj     instance void [mscorlib]System.WeakReference::.ctor(object)
      IL_00d5:  callvirt   instance void class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::Add(!0)
      IL_00da:  nop
      IL_00db:  nop
      IL_00dc:  leave.s    IL_00f0

    }  // end .try
    finally
    {
      IL_00de:  nop
      IL_00df:  ldloc.s    V_4
      IL_00e1:  stloc.s    V_7
      IL_00e3:  ldloc.s    V_7
      IL_00e5:  brfalse.s  IL_00ee

      IL_00e7:  ldloc.3
      IL_00e8:  call       void [mscorlib]System.Threading.Monitor::Exit(object)
      IL_00ed:  nop
      IL_00ee:  nop
      IL_00ef:  endfinally
    }  // end handler
    IL_00f0:  nop
    IL_00f1:  nop
    IL_00f2:  ret
  } // end of method MainForm::__ENCAddToList

  .method family strict virtual instance void 
          Dispose(bool disposing) cil managed
  {
    // Code size       43 (0x2b)
    .maxstack  2
    .locals init ([0] bool VB$CG$t_bool$S0)
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\VisualizePartitioning\VisualizePartitioning_VisualBasic\MainForm.Designer.vb' 
//000012:         Protected Overrides Sub Dispose(ByVal disposing As Boolean)
    IL_0000:  nop
//000013:             If disposing AndAlso (components IsNot Nothing) Then
    IL_0001:  ldarg.1
    IL_0002:  brfalse.s  IL_000c

    IL_0004:  ldarg.0
    IL_0005:  ldfld      class [System]System.ComponentModel.IContainer VisualizePartitioning.MainForm::components
    IL_000a:  brtrue.s   IL_000f

    IL_000c:  ldc.i4.0
    IL_000d:  br.s       IL_0010

    IL_000f:  ldc.i4.1
    IL_0010:  stloc.0
//000014:                 components.Dispose()
//000015:             End If
//000016:             MyBase.Dispose(disposing)
//000017:         End Sub
//000018: 
//000019: #Region "Windows Form Designer generated code"
//000020: 
//000021:         ''' <summary>
//000022:         ''' Required method for Designer support - do not modify
//000023:         ''' the contents of this method with the code editor.
//000024:         ''' </summary>
//000025:         Private Sub InitializeComponent()
//000026:             Me.components = New System.ComponentModel.Container()
//000027:             Me.pbPartitionedImage = New PictureBox()
//000028:             Me.btnVisualize = New Button()
//000029:             Me.lvPartitioningMethods = New ListView()
//000030:             Me.lvWorkloads = New ListView()
//000031:             Me.label1 = New Label()
//000032:             Me.label2 = New Label()
//000033:             Me.lblTime = New Label()
//000034:             Me.tbWorkFactor = New TrackBar()
//000035:             Me.label3 = New Label()
//000036:             Me.rbParallelFor = New RadioButton()
//000037:             Me.rbParallelForEach = New RadioButton()
//000038:             Me.rbPLINQ = New RadioButton()
//000039:             Me.groupBox1 = New GroupBox()
//000040:             Me.label4 = New Label()
//000041:             Me.tbCores = New TrackBar()
//000042:             Me.toolTip1 = New ToolTip(Me.components)
//000043:             CType(Me.pbPartitionedImage, System.ComponentModel.ISupportInitialize).BeginInit()
//000044:             CType(Me.tbWorkFactor, System.ComponentModel.ISupportInitialize).BeginInit()
//000045:             Me.groupBox1.SuspendLayout()
//000046:             CType(Me.tbCores, System.ComponentModel.ISupportInitialize).BeginInit()
//000047:             Me.SuspendLayout()
//000048:             ' 
//000049:             ' pbPartitionedImage
//000050:             ' 
//000051:             Me.pbPartitionedImage.Anchor = (CType((((AnchorStyles.Top Or AnchorStyles.Bottom) Or AnchorStyles.Left) Or AnchorStyles.Right), AnchorStyles))
//000052:             Me.pbPartitionedImage.BackColor = Color.Black
//000053:             Me.pbPartitionedImage.BorderStyle = BorderStyle.Fixed3D
//000054:             Me.pbPartitionedImage.Location = New Point(12, 12)
//000055:             Me.pbPartitionedImage.Name = "pbPartitionedImage"
//000056:             Me.pbPartitionedImage.Size = New Size(539, 522)
//000057:             Me.pbPartitionedImage.SizeMode = PictureBoxSizeMode.StretchImage
//000058:             Me.pbPartitionedImage.TabIndex = 0
//000059:             Me.pbPartitionedImage.TabStop = False
//000060:             ' 
//000061:             ' btnVisualize
//000062:             ' 
//000063:             Me.btnVisualize.Anchor = (CType((AnchorStyles.Top Or AnchorStyles.Right), AnchorStyles))
//000064:             Me.btnVisualize.Location = New Point(557, 490)
//000065:             Me.btnVisualize.Name = "btnVisualize"
//000066:             Me.btnVisualize.Size = New Size(75, 23)
//000067:             Me.btnVisualize.TabIndex = 1
//000068:             Me.btnVisualize.Text = "Visualize"
//000069:             Me.btnVisualize.UseVisualStyleBackColor = True
//000070:             ' Me.btnVisualize.Click += New System.EventHandler(AddressOf Me.btnVisualize_Click)
//000071:             ' 
//000072:             ' lvPartitioningMethods
//000073:             ' 
//000074:             Me.lvPartitioningMethods.Activation = ItemActivation.OneClick
//000075:             Me.lvPartitioningMethods.Alignment = ListViewAlignment.Default
//000076:             Me.lvPartitioningMethods.Anchor = (CType((AnchorStyles.Top Or AnchorStyles.Right), AnchorStyles))
//000077:             Me.lvPartitioningMethods.AutoArrange = False
//000078:             Me.lvPartitioningMethods.Enabled = False
//000079:             Me.lvPartitioningMethods.FullRowSelect = True
//000080:             Me.lvPartitioningMethods.GridLines = True
//000081:             Me.lvPartitioningMethods.HeaderStyle = ColumnHeaderStyle.None
//000082:             Me.lvPartitioningMethods.Location = New Point(559, 127)
//000083:             Me.lvPartitioningMethods.MultiSelect = False
//000084:             Me.lvPartitioningMethods.Name = "lvPartitioningMethods"
//000085:             Me.lvPartitioningMethods.ShowGroups = False
//000086:             Me.lvPartitioningMethods.Size = New Size(126, 150)
//000087:             Me.lvPartitioningMethods.TabIndex = 2
//000088:             Me.lvPartitioningMethods.UseCompatibleStateImageBehavior = False
//000089:             Me.lvPartitioningMethods.View = View.List
//000090:             ' 
//000091:             ' lvWorkloads
//000092:             ' 
//000093:             Me.lvWorkloads.Activation = ItemActivation.OneClick
//000094:             Me.lvWorkloads.Alignment = ListViewAlignment.Default
//000095:             Me.lvWorkloads.Anchor = (CType((AnchorStyles.Top Or AnchorStyles.Right), AnchorStyles))
//000096:             Me.lvWorkloads.AutoArrange = False
//000097:             Me.lvWorkloads.FullRowSelect = True
//000098:             Me.lvWorkloads.GridLines = True
//000099:             Me.lvWorkloads.HeaderStyle = ColumnHeaderStyle.None
//000100:             Me.lvWorkloads.HideSelection = False
//000101:             Me.lvWorkloads.Location = New Point(559, 296)
//000102:             Me.lvWorkloads.MultiSelect = False
//000103:             Me.lvWorkloads.Name = "lvWorkloads"
//000104:             Me.lvWorkloads.ShowGroups = False
//000105:             Me.lvWorkloads.Size = New Size(126, 77)
//000106:             Me.lvWorkloads.TabIndex = 3
//000107:             Me.lvWorkloads.UseCompatibleStateImageBehavior = False
//000108:             Me.lvWorkloads.View = View.List
//000109:             ' 
//000110:             ' label1
//000111:             ' 
//000112:             Me.label1.Anchor = (CType((AnchorStyles.Top Or AnchorStyles.Right), AnchorStyles))
//000113:             Me.label1.AutoSize = True
//000114:             Me.label1.Location = New Point(556, 280)
//000115:             Me.label1.Name = "label1"
//000116:             Me.label1.Size = New Size(53, 13)
//000117:             Me.label1.TabIndex = 4
//000118:             Me.label1.Text = "Workload"
//000119:             ' 
//000120:             ' label2
//000121:             ' 
//000122:             Me.label2.Anchor = (CType((AnchorStyles.Top Or AnchorStyles.Right), AnchorStyles))
//000123:             Me.label2.AutoSize = True
//000124:             Me.label2.Location = New Point(557, 111)
//000125:             Me.label2.Name = "label2"
//000126:             Me.label2.Size = New Size(59, 13)
//000127:             Me.label2.TabIndex = 5
//000128:             Me.label2.Text = "Partitioning"
//000129:             ' 
//000130:             ' lblTime
//000131:             ' 
//000132:             Me.lblTime.Anchor = (CType((AnchorStyles.Top Or AnchorStyles.Right), AnchorStyles))
//000133:             Me.lblTime.AutoSize = True
//000134:             Me.lblTime.Location = New Point(556, 516)
//000135:             Me.lblTime.Name = "lblTime"
//000136:             Me.lblTime.Size = New Size(36, 13)
//000137:             Me.lblTime.TabIndex = 6
//000138:             Me.lblTime.Text = "Time: "
//000139:             ' 
//000140:             ' tbWorkFactor
//000141:             ' 
//000142:             Me.tbWorkFactor.Anchor = (CType((AnchorStyles.Top Or AnchorStyles.Right), AnchorStyles))
//000143:             Me.tbWorkFactor.LargeChange = 1
//000144:             Me.tbWorkFactor.Location = New Point(558, 408)
//000145:             Me.tbWorkFactor.Maximum = 1000
//000146:             Me.tbWorkFactor.Minimum = 1
//000147:             Me.tbWorkFactor.Name = "tbWorkFactor"
//000148:             Me.tbWorkFactor.Size = New Size(123, 45)
//000149:             Me.tbWorkFactor.TabIndex = 7
//000150:             Me.tbWorkFactor.TickFrequency = 100
//000151:             Me.tbWorkFactor.TickStyle = TickStyle.None
//000152:             Me.tbWorkFactor.Value = 1
//000153:             ' Me.tbWorkFactor.ValueChanged += New System.EventHandler(Me.tbWorkFactor_ValueChanged)
//000154:             ' 
//000155:             ' label3
//000156:             ' 
//000157:             Me.label3.Anchor = (CType((AnchorStyles.Top Or AnchorStyles.Right), AnchorStyles))
//000158:             Me.label3.AutoSize = True
//000159:             Me.label3.Location = New Point(557, 385)
//000160:             Me.label3.Name = "label3"
//000161:             Me.label3.Size = New Size(66, 13)
//000162:             Me.label3.TabIndex = 8
//000163:             Me.label3.Text = "Work Factor"
//000164:             ' 
//000165:             ' rbParallelFor
//000166:             ' 
//000167:             Me.rbParallelFor.AutoSize = True
//000168:             Me.rbParallelFor.Checked = True
//000169:             Me.rbParallelFor.Location = New Point(7, 18)
//000170:             Me.rbParallelFor.Name = "rbParallelFor"
//000171:             Me.rbParallelFor.Size = New Size(77, 17)
//000172:             Me.rbParallelFor.TabIndex = 9
//000173:             Me.rbParallelFor.TabStop = True
//000174:             Me.rbParallelFor.Text = "Parallel.For"
//000175:             Me.rbParallelFor.UseVisualStyleBackColor = True
//000176:             ' Me.rbParallelFor.CheckedChanged += New System.EventHandler(Me.rbAPI_CheckedChanged)
//000177:             ' 
//000178:             ' rbParallelForEach
//000179:             ' 
//000180:             Me.rbParallelForEach.AutoSize = True
//000181:             Me.rbParallelForEach.Location = New Point(6, 41)
//000182:             Me.rbParallelForEach.Name = "rbParallelForEach"
//000183:             Me.rbParallelForEach.Size = New Size(102, 17)
//000184:             Me.rbParallelForEach.TabIndex = 10
//000185:             Me.rbParallelForEach.TabStop = True
//000186:             Me.rbParallelForEach.Text = "Parallel.ForEach"
//000187:             Me.rbParallelForEach.UseVisualStyleBackColor = True
//000188:             ' Me.rbParallelForEach.CheckedChanged += New System.EventHandler(Me.rbAPI_CheckedChanged)
//000189:             ' 
//000190:             ' rbPLINQ
//000191:             ' 
//000192:             Me.rbPLINQ.AutoSize = True
//000193:             Me.rbPLINQ.Location = New Point(6, 64)
//000194:             Me.rbPLINQ.Name = "rbPLINQ"
//000195:             Me.rbPLINQ.Size = New Size(57, 17)
//000196:             Me.rbPLINQ.TabIndex = 11
//000197:             Me.rbPLINQ.TabStop = True
//000198:             Me.rbPLINQ.Text = "PLINQ"
//000199:             Me.rbPLINQ.UseVisualStyleBackColor = True
//000200:             ' Me.rbPLINQ.CheckedChanged += New System.EventHandler(Me.rbAPI_CheckedChanged)
//000201:             ' 
//000202:             ' groupBox1
//000203:             ' 
//000204:             Me.groupBox1.Anchor = (CType((AnchorStyles.Top Or AnchorStyles.Right), AnchorStyles))
//000205:             Me.groupBox1.Controls.Add(Me.rbParallelForEach)
//000206:             Me.groupBox1.Controls.Add(Me.rbPLINQ)
//000207:             Me.groupBox1.Controls.Add(Me.rbParallelFor)
//000208:             Me.groupBox1.Location = New Point(557, 12)
//000209:             Me.groupBox1.Name = "groupBox1"
//000210:             Me.groupBox1.Size = New Size(130, 91)
//000211:             Me.groupBox1.TabIndex = 12
//000212:             Me.groupBox1.TabStop = False
//000213:             Me.groupBox1.Text = "API"
//000214:             ' 
//000215:             ' label4
//000216:             ' 
//000217:             Me.label4.Anchor = (CType((AnchorStyles.Top Or AnchorStyles.Right), AnchorStyles))
//000218:             Me.label4.AutoSize = True
//000219:             Me.label4.Location = New Point(556, 436)
//000220:             Me.label4.Name = "label4"
//000221:             Me.label4.Size = New Size(34, 13)
//000222:             Me.label4.TabIndex = 14
//000223:             Me.label4.Text = "Cores"
//000224:             ' 
//000225:             ' tbCores
//000226:             ' 
//000227:             Me.tbCores.Anchor = (CType((AnchorStyles.Top Or AnchorStyles.Right), AnchorStyles))
//000228:             Me.tbCores.LargeChange = 1
//000229:             Me.tbCores.Location = New Point(557, 459)
//000230:             Me.tbCores.Maximum = 100
//000231:             Me.tbCores.Minimum = 0
//000232:             Me.tbCores.Name = "tbCores"
//000233:             Me.tbCores.Size = New Size(123, 45)
//000234:             Me.tbCores.TabIndex = 13
//000235:             Me.tbCores.TickStyle = TickStyle.None
//000236:             Me.tbCores.Value = 0
//000237:             ' Me.tbCores.ValueChanged += New System.EventHandler(Me.tbCores_ValueChanged)
//000238:             ' 
//000239:             ' MainForm
//000240:             ' 
//000241:             Me.AutoScaleDimensions = New SizeF(6.0F, 13.0F)
//000242:             Me.AutoScaleMode = AutoScaleMode.Font
//000243:             Me.ClientSize = New Size(695, 547)
//000244:             Me.Controls.Add(Me.btnVisualize)
//000245:             Me.Controls.Add(Me.label4)
//000246:             Me.Controls.Add(Me.tbCores)
//000247:             Me.Controls.Add(Me.groupBox1)
//000248:             Me.Controls.Add(Me.label3)
//000249:             Me.Controls.Add(Me.tbWorkFactor)
//000250:             Me.Controls.Add(Me.lblTime)
//000251:             Me.Controls.Add(Me.label2)
//000252:             Me.Controls.Add(Me.label1)
//000253:             Me.Controls.Add(Me.lvWorkloads)
//000254:             Me.Controls.Add(Me.lvPartitioningMethods)
//000255:             Me.Controls.Add(Me.pbPartitionedImage)
//000256:             Me.Name = "MainForm"
//000257:             Me.Text = "Visualize Partitioning"
//000258:             CType(Me.pbPartitionedImage, System.ComponentModel.ISupportInitialize).EndInit()
//000259:             CType(Me.tbWorkFactor, System.ComponentModel.ISupportInitialize).EndInit()
//000260:             Me.groupBox1.ResumeLayout(False)
//000261:             Me.groupBox1.PerformLayout()
//000262:             CType(Me.tbCores, System.ComponentModel.ISupportInitialize).EndInit()
//000263:             Me.ResumeLayout(False)
//000264:             Me.PerformLayout()
//000265: 
//000266:         End Sub
//000267: 
//000268: #End Region
//000269: 
//000270:         Private pbPartitionedImage As PictureBox
//000271:         Private WithEvents btnVisualize As Button
//000272:         Private lvPartitioningMethods As ListView
//000273:         Private lvWorkloads As ListView
//000274:         Private label1 As Label
//000275:         Private label2 As Label
//000276:         Private lblTime As Label
//000277:         Private WithEvents tbWorkFactor As TrackBar
//000278:         Private label3 As Label
//000279:         Private WithEvents rbParallelFor As RadioButton
//000280:         Private WithEvents rbParallelForEach As RadioButton
//000281:         Private WithEvents rbPLINQ As RadioButton
//000282:         Private groupBox1 As GroupBox
//000283:         Private label4 As Label
//000284:         Private WithEvents tbCores As TrackBar
//000285:         Private toolTip1 As ToolTip
//000286:     End Class
//000287: End Namespace
//000288: 
    IL_0011:  ldloc.0
    IL_0012:  brfalse.s  IL_0020

//000014:                 components.Dispose()
    IL_0014:  ldarg.0
    IL_0015:  ldfld      class [System]System.ComponentModel.IContainer VisualizePartitioning.MainForm::components
    IL_001a:  callvirt   instance void [mscorlib]System.IDisposable::Dispose()
    IL_001f:  nop
//000015:             End If
    IL_0020:  nop
//000016:             MyBase.Dispose(disposing)
    IL_0021:  ldarg.0
    IL_0022:  ldarg.1
    IL_0023:  call       instance void [System.Windows.Forms]System.Windows.Forms.Form::Dispose(bool)
    IL_0028:  nop
//000017:         End Sub
    IL_0029:  nop
    IL_002a:  ret
  } // end of method MainForm::Dispose

  .method private instance void  InitializeComponent() cil managed
  {
    // Code size       3041 (0xbe1)
    .maxstack  4
    .locals init ([0] valuetype [System.Drawing]System.Drawing.Color VB$t_struct$N0,
             [1] valuetype [System.Drawing]System.Drawing.Point VB$t_struct$N1,
             [2] valuetype [System.Drawing]System.Drawing.Point VB$t_struct$S2,
             [3] valuetype [System.Drawing]System.Drawing.Size VB$t_struct$N3,
             [4] valuetype [System.Drawing]System.Drawing.Size VB$t_struct$S4,
             [5] valuetype [System.Drawing]System.Drawing.SizeF VB$t_struct$N5,
             [6] valuetype [System.Drawing]System.Drawing.SizeF VB$t_struct$S6)
//000018: 
//000019: #Region "Windows Form Designer generated code"
//000020: 
//000021:         ''' <summary>
//000022:         ''' Required method for Designer support - do not modify
//000023:         ''' the contents of this method with the code editor.
//000024:         ''' </summary>
//000025:         Private Sub InitializeComponent()
    IL_0000:  nop
//000026:             Me.components = New System.ComponentModel.Container()
    IL_0001:  ldarg.0
    IL_0002:  newobj     instance void [System]System.ComponentModel.Container::.ctor()
    IL_0007:  stfld      class [System]System.ComponentModel.IContainer VisualizePartitioning.MainForm::components
//000027:             Me.pbPartitionedImage = New PictureBox()
    IL_000c:  ldarg.0
    IL_000d:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.PictureBox::.ctor()
    IL_0012:  stfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox VisualizePartitioning.MainForm::pbPartitionedImage
//000028:             Me.btnVisualize = New Button()
    IL_0017:  ldarg.0
    IL_0018:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.Button::.ctor()
    IL_001d:  callvirt   instance void VisualizePartitioning.MainForm::set_btnVisualize(class [System.Windows.Forms]System.Windows.Forms.Button)
    IL_0022:  nop
//000029:             Me.lvPartitioningMethods = New ListView()
    IL_0023:  ldarg.0
    IL_0024:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.ListView::.ctor()
    IL_0029:  stfld      class [System.Windows.Forms]System.Windows.Forms.ListView VisualizePartitioning.MainForm::lvPartitioningMethods
//000030:             Me.lvWorkloads = New ListView()
    IL_002e:  ldarg.0
    IL_002f:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.ListView::.ctor()
    IL_0034:  stfld      class [System.Windows.Forms]System.Windows.Forms.ListView VisualizePartitioning.MainForm::lvWorkloads
//000031:             Me.label1 = New Label()
    IL_0039:  ldarg.0
    IL_003a:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.Label::.ctor()
    IL_003f:  stfld      class [System.Windows.Forms]System.Windows.Forms.Label VisualizePartitioning.MainForm::label1
//000032:             Me.label2 = New Label()
    IL_0044:  ldarg.0
    IL_0045:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.Label::.ctor()
    IL_004a:  stfld      class [System.Windows.Forms]System.Windows.Forms.Label VisualizePartitioning.MainForm::label2
//000033:             Me.lblTime = New Label()
    IL_004f:  ldarg.0
    IL_0050:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.Label::.ctor()
    IL_0055:  stfld      class [System.Windows.Forms]System.Windows.Forms.Label VisualizePartitioning.MainForm::lblTime
//000034:             Me.tbWorkFactor = New TrackBar()
    IL_005a:  ldarg.0
    IL_005b:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.TrackBar::.ctor()
    IL_0060:  callvirt   instance void VisualizePartitioning.MainForm::set_tbWorkFactor(class [System.Windows.Forms]System.Windows.Forms.TrackBar)
    IL_0065:  nop
//000035:             Me.label3 = New Label()
    IL_0066:  ldarg.0
    IL_0067:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.Label::.ctor()
    IL_006c:  stfld      class [System.Windows.Forms]System.Windows.Forms.Label VisualizePartitioning.MainForm::label3
//000036:             Me.rbParallelFor = New RadioButton()
    IL_0071:  ldarg.0
    IL_0072:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.RadioButton::.ctor()
    IL_0077:  callvirt   instance void VisualizePartitioning.MainForm::set_rbParallelFor(class [System.Windows.Forms]System.Windows.Forms.RadioButton)
    IL_007c:  nop
//000037:             Me.rbParallelForEach = New RadioButton()
    IL_007d:  ldarg.0
    IL_007e:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.RadioButton::.ctor()
    IL_0083:  callvirt   instance void VisualizePartitioning.MainForm::set_rbParallelForEach(class [System.Windows.Forms]System.Windows.Forms.RadioButton)
    IL_0088:  nop
//000038:             Me.rbPLINQ = New RadioButton()
    IL_0089:  ldarg.0
    IL_008a:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.RadioButton::.ctor()
    IL_008f:  callvirt   instance void VisualizePartitioning.MainForm::set_rbPLINQ(class [System.Windows.Forms]System.Windows.Forms.RadioButton)
    IL_0094:  nop
//000039:             Me.groupBox1 = New GroupBox()
    IL_0095:  ldarg.0
    IL_0096:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.GroupBox::.ctor()
    IL_009b:  stfld      class [System.Windows.Forms]System.Windows.Forms.GroupBox VisualizePartitioning.MainForm::groupBox1
//000040:             Me.label4 = New Label()
    IL_00a0:  ldarg.0
    IL_00a1:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.Label::.ctor()
    IL_00a6:  stfld      class [System.Windows.Forms]System.Windows.Forms.Label VisualizePartitioning.MainForm::label4
//000041:             Me.tbCores = New TrackBar()
    IL_00ab:  ldarg.0
    IL_00ac:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.TrackBar::.ctor()
    IL_00b1:  callvirt   instance void VisualizePartitioning.MainForm::set_tbCores(class [System.Windows.Forms]System.Windows.Forms.TrackBar)
    IL_00b6:  nop
//000042:             Me.toolTip1 = New ToolTip(Me.components)
    IL_00b7:  ldarg.0
    IL_00b8:  ldarg.0
    IL_00b9:  ldfld      class [System]System.ComponentModel.IContainer VisualizePartitioning.MainForm::components
    IL_00be:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.ToolTip::.ctor(class [System]System.ComponentModel.IContainer)
    IL_00c3:  stfld      class [System.Windows.Forms]System.Windows.Forms.ToolTip VisualizePartitioning.MainForm::toolTip1
//000043:             CType(Me.pbPartitionedImage, System.ComponentModel.ISupportInitialize).BeginInit()
    IL_00c8:  ldarg.0
    IL_00c9:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox VisualizePartitioning.MainForm::pbPartitionedImage
    IL_00ce:  callvirt   instance void [System]System.ComponentModel.ISupportInitialize::BeginInit()
    IL_00d3:  nop
//000044:             CType(Me.tbWorkFactor, System.ComponentModel.ISupportInitialize).BeginInit()
    IL_00d4:  ldarg.0
    IL_00d5:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.TrackBar VisualizePartitioning.MainForm::get_tbWorkFactor()
    IL_00da:  callvirt   instance void [System]System.ComponentModel.ISupportInitialize::BeginInit()
    IL_00df:  nop
//000045:             Me.groupBox1.SuspendLayout()
    IL_00e0:  ldarg.0
    IL_00e1:  ldfld      class [System.Windows.Forms]System.Windows.Forms.GroupBox VisualizePartitioning.MainForm::groupBox1
    IL_00e6:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::SuspendLayout()
    IL_00eb:  nop
//000046:             CType(Me.tbCores, System.ComponentModel.ISupportInitialize).BeginInit()
    IL_00ec:  ldarg.0
    IL_00ed:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.TrackBar VisualizePartitioning.MainForm::get_tbCores()
    IL_00f2:  callvirt   instance void [System]System.ComponentModel.ISupportInitialize::BeginInit()
    IL_00f7:  nop
//000047:             Me.SuspendLayout()
    IL_00f8:  ldarg.0
    IL_00f9:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::SuspendLayout()
    IL_00fe:  nop
//000048:             ' 
//000049:             ' pbPartitionedImage
//000050:             ' 
//000051:             Me.pbPartitionedImage.Anchor = (CType((((AnchorStyles.Top Or AnchorStyles.Bottom) Or AnchorStyles.Left) Or AnchorStyles.Right), AnchorStyles))
    IL_00ff:  ldarg.0
    IL_0100:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox VisualizePartitioning.MainForm::pbPartitionedImage
    IL_0105:  ldc.i4.s   15
    IL_0107:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Anchor(valuetype [System.Windows.Forms]System.Windows.Forms.AnchorStyles)
    IL_010c:  nop
//000052:             Me.pbPartitionedImage.BackColor = Color.Black
    IL_010d:  ldarg.0
    IL_010e:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox VisualizePartitioning.MainForm::pbPartitionedImage
    IL_0113:  call       valuetype [System.Drawing]System.Drawing.Color [System.Drawing]System.Drawing.Color::get_Black()
    IL_0118:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_BackColor(valuetype [System.Drawing]System.Drawing.Color)
    IL_011d:  nop
//000053:             Me.pbPartitionedImage.BorderStyle = BorderStyle.Fixed3D
    IL_011e:  ldarg.0
    IL_011f:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox VisualizePartitioning.MainForm::pbPartitionedImage
    IL_0124:  ldc.i4.2
    IL_0125:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.PictureBox::set_BorderStyle(valuetype [System.Windows.Forms]System.Windows.Forms.BorderStyle)
    IL_012a:  nop
//000054:             Me.pbPartitionedImage.Location = New Point(12, 12)
    IL_012b:  ldarg.0
    IL_012c:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox VisualizePartitioning.MainForm::pbPartitionedImage
    IL_0131:  ldloca.s   VB$t_struct$S2
    IL_0133:  ldc.i4.s   12
    IL_0135:  ldc.i4.s   12
    IL_0137:  call       instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_013c:  nop
    IL_013d:  ldloc.2
    IL_013e:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_0143:  nop
//000055:             Me.pbPartitionedImage.Name = "pbPartitionedImage"
    IL_0144:  ldarg.0
    IL_0145:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox VisualizePartitioning.MainForm::pbPartitionedImage
    IL_014a:  ldstr      "pbPartitionedImage"
    IL_014f:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_0154:  nop
//000056:             Me.pbPartitionedImage.Size = New Size(539, 522)
    IL_0155:  ldarg.0
    IL_0156:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox VisualizePartitioning.MainForm::pbPartitionedImage
    IL_015b:  ldloca.s   VB$t_struct$S4
    IL_015d:  ldc.i4     0x21b
    IL_0162:  ldc.i4     0x20a
    IL_0167:  call       instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_016c:  nop
    IL_016d:  ldloc.s    VB$t_struct$S4
    IL_016f:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_0174:  nop
//000057:             Me.pbPartitionedImage.SizeMode = PictureBoxSizeMode.StretchImage
    IL_0175:  ldarg.0
    IL_0176:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox VisualizePartitioning.MainForm::pbPartitionedImage
    IL_017b:  ldc.i4.1
    IL_017c:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.PictureBox::set_SizeMode(valuetype [System.Windows.Forms]System.Windows.Forms.PictureBoxSizeMode)
    IL_0181:  nop
//000058:             Me.pbPartitionedImage.TabIndex = 0
    IL_0182:  ldarg.0
    IL_0183:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox VisualizePartitioning.MainForm::pbPartitionedImage
    IL_0188:  ldc.i4.0
    IL_0189:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.PictureBox::set_TabIndex(int32)
    IL_018e:  nop
//000059:             Me.pbPartitionedImage.TabStop = False
    IL_018f:  ldarg.0
    IL_0190:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox VisualizePartitioning.MainForm::pbPartitionedImage
    IL_0195:  ldc.i4.0
    IL_0196:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.PictureBox::set_TabStop(bool)
    IL_019b:  nop
//000060:             ' 
//000061:             ' btnVisualize
//000062:             ' 
//000063:             Me.btnVisualize.Anchor = (CType((AnchorStyles.Top Or AnchorStyles.Right), AnchorStyles))
    IL_019c:  ldarg.0
    IL_019d:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Button VisualizePartitioning.MainForm::get_btnVisualize()
    IL_01a2:  ldc.i4.s   9
    IL_01a4:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Anchor(valuetype [System.Windows.Forms]System.Windows.Forms.AnchorStyles)
    IL_01a9:  nop
//000064:             Me.btnVisualize.Location = New Point(557, 490)
    IL_01aa:  ldarg.0
    IL_01ab:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Button VisualizePartitioning.MainForm::get_btnVisualize()
    IL_01b0:  ldloca.s   VB$t_struct$S2
    IL_01b2:  ldc.i4     0x22d
    IL_01b7:  ldc.i4     0x1ea
    IL_01bc:  call       instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_01c1:  nop
    IL_01c2:  ldloc.2
    IL_01c3:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_01c8:  nop
//000065:             Me.btnVisualize.Name = "btnVisualize"
    IL_01c9:  ldarg.0
    IL_01ca:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Button VisualizePartitioning.MainForm::get_btnVisualize()
    IL_01cf:  ldstr      "btnVisualize"
    IL_01d4:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_01d9:  nop
//000066:             Me.btnVisualize.Size = New Size(75, 23)
    IL_01da:  ldarg.0
    IL_01db:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Button VisualizePartitioning.MainForm::get_btnVisualize()
    IL_01e0:  ldloca.s   VB$t_struct$S4
    IL_01e2:  ldc.i4.s   75
    IL_01e4:  ldc.i4.s   23
    IL_01e6:  call       instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_01eb:  nop
    IL_01ec:  ldloc.s    VB$t_struct$S4
    IL_01ee:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_01f3:  nop
//000067:             Me.btnVisualize.TabIndex = 1
    IL_01f4:  ldarg.0
    IL_01f5:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Button VisualizePartitioning.MainForm::get_btnVisualize()
    IL_01fa:  ldc.i4.1
    IL_01fb:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_TabIndex(int32)
    IL_0200:  nop
//000068:             Me.btnVisualize.Text = "Visualize"
    IL_0201:  ldarg.0
    IL_0202:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Button VisualizePartitioning.MainForm::get_btnVisualize()
    IL_0207:  ldstr      "Visualize"
    IL_020c:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ButtonBase::set_Text(string)
    IL_0211:  nop
//000069:             Me.btnVisualize.UseVisualStyleBackColor = True
    IL_0212:  ldarg.0
    IL_0213:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Button VisualizePartitioning.MainForm::get_btnVisualize()
    IL_0218:  ldc.i4.1
    IL_0219:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ButtonBase::set_UseVisualStyleBackColor(bool)
    IL_021e:  nop
//000070:             ' Me.btnVisualize.Click += New System.EventHandler(AddressOf Me.btnVisualize_Click)
//000071:             ' 
//000072:             ' lvPartitioningMethods
//000073:             ' 
//000074:             Me.lvPartitioningMethods.Activation = ItemActivation.OneClick
    IL_021f:  ldarg.0
    IL_0220:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ListView VisualizePartitioning.MainForm::lvPartitioningMethods
    IL_0225:  ldc.i4.1
    IL_0226:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ListView::set_Activation(valuetype [System.Windows.Forms]System.Windows.Forms.ItemActivation)
    IL_022b:  nop
//000075:             Me.lvPartitioningMethods.Alignment = ListViewAlignment.Default
    IL_022c:  ldarg.0
    IL_022d:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ListView VisualizePartitioning.MainForm::lvPartitioningMethods
    IL_0232:  ldc.i4.0
    IL_0233:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ListView::set_Alignment(valuetype [System.Windows.Forms]System.Windows.Forms.ListViewAlignment)
    IL_0238:  nop
//000076:             Me.lvPartitioningMethods.Anchor = (CType((AnchorStyles.Top Or AnchorStyles.Right), AnchorStyles))
    IL_0239:  ldarg.0
    IL_023a:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ListView VisualizePartitioning.MainForm::lvPartitioningMethods
    IL_023f:  ldc.i4.s   9
    IL_0241:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Anchor(valuetype [System.Windows.Forms]System.Windows.Forms.AnchorStyles)
    IL_0246:  nop
//000077:             Me.lvPartitioningMethods.AutoArrange = False
    IL_0247:  ldarg.0
    IL_0248:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ListView VisualizePartitioning.MainForm::lvPartitioningMethods
    IL_024d:  ldc.i4.0
    IL_024e:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ListView::set_AutoArrange(bool)
    IL_0253:  nop
//000078:             Me.lvPartitioningMethods.Enabled = False
    IL_0254:  ldarg.0
    IL_0255:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ListView VisualizePartitioning.MainForm::lvPartitioningMethods
    IL_025a:  ldc.i4.0
    IL_025b:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Enabled(bool)
    IL_0260:  nop
//000079:             Me.lvPartitioningMethods.FullRowSelect = True
    IL_0261:  ldarg.0
    IL_0262:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ListView VisualizePartitioning.MainForm::lvPartitioningMethods
    IL_0267:  ldc.i4.1
    IL_0268:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ListView::set_FullRowSelect(bool)
    IL_026d:  nop
//000080:             Me.lvPartitioningMethods.GridLines = True
    IL_026e:  ldarg.0
    IL_026f:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ListView VisualizePartitioning.MainForm::lvPartitioningMethods
    IL_0274:  ldc.i4.1
    IL_0275:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ListView::set_GridLines(bool)
    IL_027a:  nop
//000081:             Me.lvPartitioningMethods.HeaderStyle = ColumnHeaderStyle.None
    IL_027b:  ldarg.0
    IL_027c:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ListView VisualizePartitioning.MainForm::lvPartitioningMethods
    IL_0281:  ldc.i4.0
    IL_0282:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ListView::set_HeaderStyle(valuetype [System.Windows.Forms]System.Windows.Forms.ColumnHeaderStyle)
    IL_0287:  nop
//000082:             Me.lvPartitioningMethods.Location = New Point(559, 127)
    IL_0288:  ldarg.0
    IL_0289:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ListView VisualizePartitioning.MainForm::lvPartitioningMethods
    IL_028e:  ldloca.s   VB$t_struct$S2
    IL_0290:  ldc.i4     0x22f
    IL_0295:  ldc.i4.s   127
    IL_0297:  call       instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_029c:  nop
    IL_029d:  ldloc.2
    IL_029e:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_02a3:  nop
//000083:             Me.lvPartitioningMethods.MultiSelect = False
    IL_02a4:  ldarg.0
    IL_02a5:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ListView VisualizePartitioning.MainForm::lvPartitioningMethods
    IL_02aa:  ldc.i4.0
    IL_02ab:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ListView::set_MultiSelect(bool)
    IL_02b0:  nop
//000084:             Me.lvPartitioningMethods.Name = "lvPartitioningMethods"
    IL_02b1:  ldarg.0
    IL_02b2:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ListView VisualizePartitioning.MainForm::lvPartitioningMethods
    IL_02b7:  ldstr      "lvPartitioningMethods"
    IL_02bc:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_02c1:  nop
//000085:             Me.lvPartitioningMethods.ShowGroups = False
    IL_02c2:  ldarg.0
    IL_02c3:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ListView VisualizePartitioning.MainForm::lvPartitioningMethods
    IL_02c8:  ldc.i4.0
    IL_02c9:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ListView::set_ShowGroups(bool)
    IL_02ce:  nop
//000086:             Me.lvPartitioningMethods.Size = New Size(126, 150)
    IL_02cf:  ldarg.0
    IL_02d0:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ListView VisualizePartitioning.MainForm::lvPartitioningMethods
    IL_02d5:  ldloca.s   VB$t_struct$S4
    IL_02d7:  ldc.i4.s   126
    IL_02d9:  ldc.i4     0x96
    IL_02de:  call       instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_02e3:  nop
    IL_02e4:  ldloc.s    VB$t_struct$S4
    IL_02e6:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_02eb:  nop
//000087:             Me.lvPartitioningMethods.TabIndex = 2
    IL_02ec:  ldarg.0
    IL_02ed:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ListView VisualizePartitioning.MainForm::lvPartitioningMethods
    IL_02f2:  ldc.i4.2
    IL_02f3:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_TabIndex(int32)
    IL_02f8:  nop
//000088:             Me.lvPartitioningMethods.UseCompatibleStateImageBehavior = False
    IL_02f9:  ldarg.0
    IL_02fa:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ListView VisualizePartitioning.MainForm::lvPartitioningMethods
    IL_02ff:  ldc.i4.0
    IL_0300:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ListView::set_UseCompatibleStateImageBehavior(bool)
    IL_0305:  nop
//000089:             Me.lvPartitioningMethods.View = View.List
    IL_0306:  ldarg.0
    IL_0307:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ListView VisualizePartitioning.MainForm::lvPartitioningMethods
    IL_030c:  ldc.i4.3
    IL_030d:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ListView::set_View(valuetype [System.Windows.Forms]System.Windows.Forms.View)
    IL_0312:  nop
//000090:             ' 
//000091:             ' lvWorkloads
//000092:             ' 
//000093:             Me.lvWorkloads.Activation = ItemActivation.OneClick
    IL_0313:  ldarg.0
    IL_0314:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ListView VisualizePartitioning.MainForm::lvWorkloads
    IL_0319:  ldc.i4.1
    IL_031a:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ListView::set_Activation(valuetype [System.Windows.Forms]System.Windows.Forms.ItemActivation)
    IL_031f:  nop
//000094:             Me.lvWorkloads.Alignment = ListViewAlignment.Default
    IL_0320:  ldarg.0
    IL_0321:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ListView VisualizePartitioning.MainForm::lvWorkloads
    IL_0326:  ldc.i4.0
    IL_0327:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ListView::set_Alignment(valuetype [System.Windows.Forms]System.Windows.Forms.ListViewAlignment)
    IL_032c:  nop
//000095:             Me.lvWorkloads.Anchor = (CType((AnchorStyles.Top Or AnchorStyles.Right), AnchorStyles))
    IL_032d:  ldarg.0
    IL_032e:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ListView VisualizePartitioning.MainForm::lvWorkloads
    IL_0333:  ldc.i4.s   9
    IL_0335:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Anchor(valuetype [System.Windows.Forms]System.Windows.Forms.AnchorStyles)
    IL_033a:  nop
//000096:             Me.lvWorkloads.AutoArrange = False
    IL_033b:  ldarg.0
    IL_033c:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ListView VisualizePartitioning.MainForm::lvWorkloads
    IL_0341:  ldc.i4.0
    IL_0342:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ListView::set_AutoArrange(bool)
    IL_0347:  nop
//000097:             Me.lvWorkloads.FullRowSelect = True
    IL_0348:  ldarg.0
    IL_0349:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ListView VisualizePartitioning.MainForm::lvWorkloads
    IL_034e:  ldc.i4.1
    IL_034f:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ListView::set_FullRowSelect(bool)
    IL_0354:  nop
//000098:             Me.lvWorkloads.GridLines = True
    IL_0355:  ldarg.0
    IL_0356:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ListView VisualizePartitioning.MainForm::lvWorkloads
    IL_035b:  ldc.i4.1
    IL_035c:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ListView::set_GridLines(bool)
    IL_0361:  nop
//000099:             Me.lvWorkloads.HeaderStyle = ColumnHeaderStyle.None
    IL_0362:  ldarg.0
    IL_0363:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ListView VisualizePartitioning.MainForm::lvWorkloads
    IL_0368:  ldc.i4.0
    IL_0369:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ListView::set_HeaderStyle(valuetype [System.Windows.Forms]System.Windows.Forms.ColumnHeaderStyle)
    IL_036e:  nop
//000100:             Me.lvWorkloads.HideSelection = False
    IL_036f:  ldarg.0
    IL_0370:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ListView VisualizePartitioning.MainForm::lvWorkloads
    IL_0375:  ldc.i4.0
    IL_0376:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ListView::set_HideSelection(bool)
    IL_037b:  nop
//000101:             Me.lvWorkloads.Location = New Point(559, 296)
    IL_037c:  ldarg.0
    IL_037d:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ListView VisualizePartitioning.MainForm::lvWorkloads
    IL_0382:  ldloca.s   VB$t_struct$S2
    IL_0384:  ldc.i4     0x22f
    IL_0389:  ldc.i4     0x128
    IL_038e:  call       instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_0393:  nop
    IL_0394:  ldloc.2
    IL_0395:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_039a:  nop
//000102:             Me.lvWorkloads.MultiSelect = False
    IL_039b:  ldarg.0
    IL_039c:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ListView VisualizePartitioning.MainForm::lvWorkloads
    IL_03a1:  ldc.i4.0
    IL_03a2:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ListView::set_MultiSelect(bool)
    IL_03a7:  nop
//000103:             Me.lvWorkloads.Name = "lvWorkloads"
    IL_03a8:  ldarg.0
    IL_03a9:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ListView VisualizePartitioning.MainForm::lvWorkloads
    IL_03ae:  ldstr      "lvWorkloads"
    IL_03b3:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_03b8:  nop
//000104:             Me.lvWorkloads.ShowGroups = False
    IL_03b9:  ldarg.0
    IL_03ba:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ListView VisualizePartitioning.MainForm::lvWorkloads
    IL_03bf:  ldc.i4.0
    IL_03c0:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ListView::set_ShowGroups(bool)
    IL_03c5:  nop
//000105:             Me.lvWorkloads.Size = New Size(126, 77)
    IL_03c6:  ldarg.0
    IL_03c7:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ListView VisualizePartitioning.MainForm::lvWorkloads
    IL_03cc:  ldloca.s   VB$t_struct$S4
    IL_03ce:  ldc.i4.s   126
    IL_03d0:  ldc.i4.s   77
    IL_03d2:  call       instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_03d7:  nop
    IL_03d8:  ldloc.s    VB$t_struct$S4
    IL_03da:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_03df:  nop
//000106:             Me.lvWorkloads.TabIndex = 3
    IL_03e0:  ldarg.0
    IL_03e1:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ListView VisualizePartitioning.MainForm::lvWorkloads
    IL_03e6:  ldc.i4.3
    IL_03e7:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_TabIndex(int32)
    IL_03ec:  nop
//000107:             Me.lvWorkloads.UseCompatibleStateImageBehavior = False
    IL_03ed:  ldarg.0
    IL_03ee:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ListView VisualizePartitioning.MainForm::lvWorkloads
    IL_03f3:  ldc.i4.0
    IL_03f4:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ListView::set_UseCompatibleStateImageBehavior(bool)
    IL_03f9:  nop
//000108:             Me.lvWorkloads.View = View.List
    IL_03fa:  ldarg.0
    IL_03fb:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ListView VisualizePartitioning.MainForm::lvWorkloads
    IL_0400:  ldc.i4.3
    IL_0401:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ListView::set_View(valuetype [System.Windows.Forms]System.Windows.Forms.View)
    IL_0406:  nop
//000109:             ' 
//000110:             ' label1
//000111:             ' 
//000112:             Me.label1.Anchor = (CType((AnchorStyles.Top Or AnchorStyles.Right), AnchorStyles))
    IL_0407:  ldarg.0
    IL_0408:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label VisualizePartitioning.MainForm::label1
    IL_040d:  ldc.i4.s   9
    IL_040f:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Anchor(valuetype [System.Windows.Forms]System.Windows.Forms.AnchorStyles)
    IL_0414:  nop
//000113:             Me.label1.AutoSize = True
    IL_0415:  ldarg.0
    IL_0416:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label VisualizePartitioning.MainForm::label1
    IL_041b:  ldc.i4.1
    IL_041c:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Label::set_AutoSize(bool)
    IL_0421:  nop
//000114:             Me.label1.Location = New Point(556, 280)
    IL_0422:  ldarg.0
    IL_0423:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label VisualizePartitioning.MainForm::label1
    IL_0428:  ldloca.s   VB$t_struct$S2
    IL_042a:  ldc.i4     0x22c
    IL_042f:  ldc.i4     0x118
    IL_0434:  call       instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_0439:  nop
    IL_043a:  ldloc.2
    IL_043b:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_0440:  nop
//000115:             Me.label1.Name = "label1"
    IL_0441:  ldarg.0
    IL_0442:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label VisualizePartitioning.MainForm::label1
    IL_0447:  ldstr      "label1"
    IL_044c:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_0451:  nop
//000116:             Me.label1.Size = New Size(53, 13)
    IL_0452:  ldarg.0
    IL_0453:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label VisualizePartitioning.MainForm::label1
    IL_0458:  ldloca.s   VB$t_struct$S4
    IL_045a:  ldc.i4.s   53
    IL_045c:  ldc.i4.s   13
    IL_045e:  call       instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_0463:  nop
    IL_0464:  ldloc.s    VB$t_struct$S4
    IL_0466:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_046b:  nop
//000117:             Me.label1.TabIndex = 4
    IL_046c:  ldarg.0
    IL_046d:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label VisualizePartitioning.MainForm::label1
    IL_0472:  ldc.i4.4
    IL_0473:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_TabIndex(int32)
    IL_0478:  nop
//000118:             Me.label1.Text = "Workload"
    IL_0479:  ldarg.0
    IL_047a:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label VisualizePartitioning.MainForm::label1
    IL_047f:  ldstr      "Workload"
    IL_0484:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Label::set_Text(string)
    IL_0489:  nop
//000119:             ' 
//000120:             ' label2
//000121:             ' 
//000122:             Me.label2.Anchor = (CType((AnchorStyles.Top Or AnchorStyles.Right), AnchorStyles))
    IL_048a:  ldarg.0
    IL_048b:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label VisualizePartitioning.MainForm::label2
    IL_0490:  ldc.i4.s   9
    IL_0492:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Anchor(valuetype [System.Windows.Forms]System.Windows.Forms.AnchorStyles)
    IL_0497:  nop
//000123:             Me.label2.AutoSize = True
    IL_0498:  ldarg.0
    IL_0499:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label VisualizePartitioning.MainForm::label2
    IL_049e:  ldc.i4.1
    IL_049f:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Label::set_AutoSize(bool)
    IL_04a4:  nop
//000124:             Me.label2.Location = New Point(557, 111)
    IL_04a5:  ldarg.0
    IL_04a6:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label VisualizePartitioning.MainForm::label2
    IL_04ab:  ldloca.s   VB$t_struct$S2
    IL_04ad:  ldc.i4     0x22d
    IL_04b2:  ldc.i4.s   111
    IL_04b4:  call       instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_04b9:  nop
    IL_04ba:  ldloc.2
    IL_04bb:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_04c0:  nop
//000125:             Me.label2.Name = "label2"
    IL_04c1:  ldarg.0
    IL_04c2:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label VisualizePartitioning.MainForm::label2
    IL_04c7:  ldstr      "label2"
    IL_04cc:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_04d1:  nop
//000126:             Me.label2.Size = New Size(59, 13)
    IL_04d2:  ldarg.0
    IL_04d3:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label VisualizePartitioning.MainForm::label2
    IL_04d8:  ldloca.s   VB$t_struct$S4
    IL_04da:  ldc.i4.s   59
    IL_04dc:  ldc.i4.s   13
    IL_04de:  call       instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_04e3:  nop
    IL_04e4:  ldloc.s    VB$t_struct$S4
    IL_04e6:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_04eb:  nop
//000127:             Me.label2.TabIndex = 5
    IL_04ec:  ldarg.0
    IL_04ed:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label VisualizePartitioning.MainForm::label2
    IL_04f2:  ldc.i4.5
    IL_04f3:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_TabIndex(int32)
    IL_04f8:  nop
//000128:             Me.label2.Text = "Partitioning"
    IL_04f9:  ldarg.0
    IL_04fa:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label VisualizePartitioning.MainForm::label2
    IL_04ff:  ldstr      "Partitioning"
    IL_0504:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Label::set_Text(string)
    IL_0509:  nop
//000129:             ' 
//000130:             ' lblTime
//000131:             ' 
//000132:             Me.lblTime.Anchor = (CType((AnchorStyles.Top Or AnchorStyles.Right), AnchorStyles))
    IL_050a:  ldarg.0
    IL_050b:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label VisualizePartitioning.MainForm::lblTime
    IL_0510:  ldc.i4.s   9
    IL_0512:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Anchor(valuetype [System.Windows.Forms]System.Windows.Forms.AnchorStyles)
    IL_0517:  nop
//000133:             Me.lblTime.AutoSize = True
    IL_0518:  ldarg.0
    IL_0519:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label VisualizePartitioning.MainForm::lblTime
    IL_051e:  ldc.i4.1
    IL_051f:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Label::set_AutoSize(bool)
    IL_0524:  nop
//000134:             Me.lblTime.Location = New Point(556, 516)
    IL_0525:  ldarg.0
    IL_0526:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label VisualizePartitioning.MainForm::lblTime
    IL_052b:  ldloca.s   VB$t_struct$S2
    IL_052d:  ldc.i4     0x22c
    IL_0532:  ldc.i4     0x204
    IL_0537:  call       instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_053c:  nop
    IL_053d:  ldloc.2
    IL_053e:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_0543:  nop
//000135:             Me.lblTime.Name = "lblTime"
    IL_0544:  ldarg.0
    IL_0545:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label VisualizePartitioning.MainForm::lblTime
    IL_054a:  ldstr      "lblTime"
    IL_054f:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_0554:  nop
//000136:             Me.lblTime.Size = New Size(36, 13)
    IL_0555:  ldarg.0
    IL_0556:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label VisualizePartitioning.MainForm::lblTime
    IL_055b:  ldloca.s   VB$t_struct$S4
    IL_055d:  ldc.i4.s   36
    IL_055f:  ldc.i4.s   13
    IL_0561:  call       instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_0566:  nop
    IL_0567:  ldloc.s    VB$t_struct$S4
    IL_0569:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_056e:  nop
//000137:             Me.lblTime.TabIndex = 6
    IL_056f:  ldarg.0
    IL_0570:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label VisualizePartitioning.MainForm::lblTime
    IL_0575:  ldc.i4.6
    IL_0576:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_TabIndex(int32)
    IL_057b:  nop
//000138:             Me.lblTime.Text = "Time: "
    IL_057c:  ldarg.0
    IL_057d:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label VisualizePartitioning.MainForm::lblTime
    IL_0582:  ldstr      "Time: "
    IL_0587:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Label::set_Text(string)
    IL_058c:  nop
//000139:             ' 
//000140:             ' tbWorkFactor
//000141:             ' 
//000142:             Me.tbWorkFactor.Anchor = (CType((AnchorStyles.Top Or AnchorStyles.Right), AnchorStyles))
    IL_058d:  ldarg.0
    IL_058e:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.TrackBar VisualizePartitioning.MainForm::get_tbWorkFactor()
    IL_0593:  ldc.i4.s   9
    IL_0595:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Anchor(valuetype [System.Windows.Forms]System.Windows.Forms.AnchorStyles)
    IL_059a:  nop
//000143:             Me.tbWorkFactor.LargeChange = 1
    IL_059b:  ldarg.0
    IL_059c:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.TrackBar VisualizePartitioning.MainForm::get_tbWorkFactor()
    IL_05a1:  ldc.i4.1
    IL_05a2:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.TrackBar::set_LargeChange(int32)
    IL_05a7:  nop
//000144:             Me.tbWorkFactor.Location = New Point(558, 408)
    IL_05a8:  ldarg.0
    IL_05a9:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.TrackBar VisualizePartitioning.MainForm::get_tbWorkFactor()
    IL_05ae:  ldloca.s   VB$t_struct$S2
    IL_05b0:  ldc.i4     0x22e
    IL_05b5:  ldc.i4     0x198
    IL_05ba:  call       instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_05bf:  nop
    IL_05c0:  ldloc.2
    IL_05c1:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_05c6:  nop
//000145:             Me.tbWorkFactor.Maximum = 1000
    IL_05c7:  ldarg.0
    IL_05c8:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.TrackBar VisualizePartitioning.MainForm::get_tbWorkFactor()
    IL_05cd:  ldc.i4     0x3e8
    IL_05d2:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.TrackBar::set_Maximum(int32)
    IL_05d7:  nop
//000146:             Me.tbWorkFactor.Minimum = 1
    IL_05d8:  ldarg.0
    IL_05d9:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.TrackBar VisualizePartitioning.MainForm::get_tbWorkFactor()
    IL_05de:  ldc.i4.1
    IL_05df:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.TrackBar::set_Minimum(int32)
    IL_05e4:  nop
//000147:             Me.tbWorkFactor.Name = "tbWorkFactor"
    IL_05e5:  ldarg.0
    IL_05e6:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.TrackBar VisualizePartitioning.MainForm::get_tbWorkFactor()
    IL_05eb:  ldstr      "tbWorkFactor"
    IL_05f0:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_05f5:  nop
//000148:             Me.tbWorkFactor.Size = New Size(123, 45)
    IL_05f6:  ldarg.0
    IL_05f7:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.TrackBar VisualizePartitioning.MainForm::get_tbWorkFactor()
    IL_05fc:  ldloca.s   VB$t_struct$S4
    IL_05fe:  ldc.i4.s   123
    IL_0600:  ldc.i4.s   45
    IL_0602:  call       instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_0607:  nop
    IL_0608:  ldloc.s    VB$t_struct$S4
    IL_060a:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_060f:  nop
//000149:             Me.tbWorkFactor.TabIndex = 7
    IL_0610:  ldarg.0
    IL_0611:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.TrackBar VisualizePartitioning.MainForm::get_tbWorkFactor()
    IL_0616:  ldc.i4.7
    IL_0617:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_TabIndex(int32)
    IL_061c:  nop
//000150:             Me.tbWorkFactor.TickFrequency = 100
    IL_061d:  ldarg.0
    IL_061e:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.TrackBar VisualizePartitioning.MainForm::get_tbWorkFactor()
    IL_0623:  ldc.i4.s   100
    IL_0625:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.TrackBar::set_TickFrequency(int32)
    IL_062a:  nop
//000151:             Me.tbWorkFactor.TickStyle = TickStyle.None
    IL_062b:  ldarg.0
    IL_062c:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.TrackBar VisualizePartitioning.MainForm::get_tbWorkFactor()
    IL_0631:  ldc.i4.0
    IL_0632:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.TrackBar::set_TickStyle(valuetype [System.Windows.Forms]System.Windows.Forms.TickStyle)
    IL_0637:  nop
//000152:             Me.tbWorkFactor.Value = 1
    IL_0638:  ldarg.0
    IL_0639:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.TrackBar VisualizePartitioning.MainForm::get_tbWorkFactor()
    IL_063e:  ldc.i4.1
    IL_063f:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.TrackBar::set_Value(int32)
    IL_0644:  nop
//000153:             ' Me.tbWorkFactor.ValueChanged += New System.EventHandler(Me.tbWorkFactor_ValueChanged)
//000154:             ' 
//000155:             ' label3
//000156:             ' 
//000157:             Me.label3.Anchor = (CType((AnchorStyles.Top Or AnchorStyles.Right), AnchorStyles))
    IL_0645:  ldarg.0
    IL_0646:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label VisualizePartitioning.MainForm::label3
    IL_064b:  ldc.i4.s   9
    IL_064d:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Anchor(valuetype [System.Windows.Forms]System.Windows.Forms.AnchorStyles)
    IL_0652:  nop
//000158:             Me.label3.AutoSize = True
    IL_0653:  ldarg.0
    IL_0654:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label VisualizePartitioning.MainForm::label3
    IL_0659:  ldc.i4.1
    IL_065a:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Label::set_AutoSize(bool)
    IL_065f:  nop
//000159:             Me.label3.Location = New Point(557, 385)
    IL_0660:  ldarg.0
    IL_0661:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label VisualizePartitioning.MainForm::label3
    IL_0666:  ldloca.s   VB$t_struct$S2
    IL_0668:  ldc.i4     0x22d
    IL_066d:  ldc.i4     0x181
    IL_0672:  call       instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_0677:  nop
    IL_0678:  ldloc.2
    IL_0679:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_067e:  nop
//000160:             Me.label3.Name = "label3"
    IL_067f:  ldarg.0
    IL_0680:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label VisualizePartitioning.MainForm::label3
    IL_0685:  ldstr      "label3"
    IL_068a:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_068f:  nop
//000161:             Me.label3.Size = New Size(66, 13)
    IL_0690:  ldarg.0
    IL_0691:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label VisualizePartitioning.MainForm::label3
    IL_0696:  ldloca.s   VB$t_struct$S4
    IL_0698:  ldc.i4.s   66
    IL_069a:  ldc.i4.s   13
    IL_069c:  call       instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_06a1:  nop
    IL_06a2:  ldloc.s    VB$t_struct$S4
    IL_06a4:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_06a9:  nop
//000162:             Me.label3.TabIndex = 8
    IL_06aa:  ldarg.0
    IL_06ab:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label VisualizePartitioning.MainForm::label3
    IL_06b0:  ldc.i4.8
    IL_06b1:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_TabIndex(int32)
    IL_06b6:  nop
//000163:             Me.label3.Text = "Work Factor"
    IL_06b7:  ldarg.0
    IL_06b8:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label VisualizePartitioning.MainForm::label3
    IL_06bd:  ldstr      "Work Factor"
    IL_06c2:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Label::set_Text(string)
    IL_06c7:  nop
//000164:             ' 
//000165:             ' rbParallelFor
//000166:             ' 
//000167:             Me.rbParallelFor.AutoSize = True
    IL_06c8:  ldarg.0
    IL_06c9:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.RadioButton VisualizePartitioning.MainForm::get_rbParallelFor()
    IL_06ce:  ldc.i4.1
    IL_06cf:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ButtonBase::set_AutoSize(bool)
    IL_06d4:  nop
//000168:             Me.rbParallelFor.Checked = True
    IL_06d5:  ldarg.0
    IL_06d6:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.RadioButton VisualizePartitioning.MainForm::get_rbParallelFor()
    IL_06db:  ldc.i4.1
    IL_06dc:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.RadioButton::set_Checked(bool)
    IL_06e1:  nop
//000169:             Me.rbParallelFor.Location = New Point(7, 18)
    IL_06e2:  ldarg.0
    IL_06e3:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.RadioButton VisualizePartitioning.MainForm::get_rbParallelFor()
    IL_06e8:  ldloca.s   VB$t_struct$S2
    IL_06ea:  ldc.i4.7
    IL_06eb:  ldc.i4.s   18
    IL_06ed:  call       instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_06f2:  nop
    IL_06f3:  ldloc.2
    IL_06f4:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_06f9:  nop
//000170:             Me.rbParallelFor.Name = "rbParallelFor"
    IL_06fa:  ldarg.0
    IL_06fb:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.RadioButton VisualizePartitioning.MainForm::get_rbParallelFor()
    IL_0700:  ldstr      "rbParallelFor"
    IL_0705:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_070a:  nop
//000171:             Me.rbParallelFor.Size = New Size(77, 17)
    IL_070b:  ldarg.0
    IL_070c:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.RadioButton VisualizePartitioning.MainForm::get_rbParallelFor()
    IL_0711:  ldloca.s   VB$t_struct$S4
    IL_0713:  ldc.i4.s   77
    IL_0715:  ldc.i4.s   17
    IL_0717:  call       instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_071c:  nop
    IL_071d:  ldloc.s    VB$t_struct$S4
    IL_071f:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_0724:  nop
//000172:             Me.rbParallelFor.TabIndex = 9
    IL_0725:  ldarg.0
    IL_0726:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.RadioButton VisualizePartitioning.MainForm::get_rbParallelFor()
    IL_072b:  ldc.i4.s   9
    IL_072d:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_TabIndex(int32)
    IL_0732:  nop
//000173:             Me.rbParallelFor.TabStop = True
    IL_0733:  ldarg.0
    IL_0734:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.RadioButton VisualizePartitioning.MainForm::get_rbParallelFor()
    IL_0739:  ldc.i4.1
    IL_073a:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.RadioButton::set_TabStop(bool)
    IL_073f:  nop
//000174:             Me.rbParallelFor.Text = "Parallel.For"
    IL_0740:  ldarg.0
    IL_0741:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.RadioButton VisualizePartitioning.MainForm::get_rbParallelFor()
    IL_0746:  ldstr      "Parallel.For"
    IL_074b:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ButtonBase::set_Text(string)
    IL_0750:  nop
//000175:             Me.rbParallelFor.UseVisualStyleBackColor = True
    IL_0751:  ldarg.0
    IL_0752:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.RadioButton VisualizePartitioning.MainForm::get_rbParallelFor()
    IL_0757:  ldc.i4.1
    IL_0758:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ButtonBase::set_UseVisualStyleBackColor(bool)
    IL_075d:  nop
//000176:             ' Me.rbParallelFor.CheckedChanged += New System.EventHandler(Me.rbAPI_CheckedChanged)
//000177:             ' 
//000178:             ' rbParallelForEach
//000179:             ' 
//000180:             Me.rbParallelForEach.AutoSize = True
    IL_075e:  ldarg.0
    IL_075f:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.RadioButton VisualizePartitioning.MainForm::get_rbParallelForEach()
    IL_0764:  ldc.i4.1
    IL_0765:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ButtonBase::set_AutoSize(bool)
    IL_076a:  nop
//000181:             Me.rbParallelForEach.Location = New Point(6, 41)
    IL_076b:  ldarg.0
    IL_076c:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.RadioButton VisualizePartitioning.MainForm::get_rbParallelForEach()
    IL_0771:  ldloca.s   VB$t_struct$S2
    IL_0773:  ldc.i4.6
    IL_0774:  ldc.i4.s   41
    IL_0776:  call       instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_077b:  nop
    IL_077c:  ldloc.2
    IL_077d:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_0782:  nop
//000182:             Me.rbParallelForEach.Name = "rbParallelForEach"
    IL_0783:  ldarg.0
    IL_0784:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.RadioButton VisualizePartitioning.MainForm::get_rbParallelForEach()
    IL_0789:  ldstr      "rbParallelForEach"
    IL_078e:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_0793:  nop
//000183:             Me.rbParallelForEach.Size = New Size(102, 17)
    IL_0794:  ldarg.0
    IL_0795:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.RadioButton VisualizePartitioning.MainForm::get_rbParallelForEach()
    IL_079a:  ldloca.s   VB$t_struct$S4
    IL_079c:  ldc.i4.s   102
    IL_079e:  ldc.i4.s   17
    IL_07a0:  call       instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_07a5:  nop
    IL_07a6:  ldloc.s    VB$t_struct$S4
    IL_07a8:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_07ad:  nop
//000184:             Me.rbParallelForEach.TabIndex = 10
    IL_07ae:  ldarg.0
    IL_07af:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.RadioButton VisualizePartitioning.MainForm::get_rbParallelForEach()
    IL_07b4:  ldc.i4.s   10
    IL_07b6:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_TabIndex(int32)
    IL_07bb:  nop
//000185:             Me.rbParallelForEach.TabStop = True
    IL_07bc:  ldarg.0
    IL_07bd:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.RadioButton VisualizePartitioning.MainForm::get_rbParallelForEach()
    IL_07c2:  ldc.i4.1
    IL_07c3:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.RadioButton::set_TabStop(bool)
    IL_07c8:  nop
//000186:             Me.rbParallelForEach.Text = "Parallel.ForEach"
    IL_07c9:  ldarg.0
    IL_07ca:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.RadioButton VisualizePartitioning.MainForm::get_rbParallelForEach()
    IL_07cf:  ldstr      "Parallel.ForEach"
    IL_07d4:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ButtonBase::set_Text(string)
    IL_07d9:  nop
//000187:             Me.rbParallelForEach.UseVisualStyleBackColor = True
    IL_07da:  ldarg.0
    IL_07db:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.RadioButton VisualizePartitioning.MainForm::get_rbParallelForEach()
    IL_07e0:  ldc.i4.1
    IL_07e1:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ButtonBase::set_UseVisualStyleBackColor(bool)
    IL_07e6:  nop
//000188:             ' Me.rbParallelForEach.CheckedChanged += New System.EventHandler(Me.rbAPI_CheckedChanged)
//000189:             ' 
//000190:             ' rbPLINQ
//000191:             ' 
//000192:             Me.rbPLINQ.AutoSize = True
    IL_07e7:  ldarg.0
    IL_07e8:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.RadioButton VisualizePartitioning.MainForm::get_rbPLINQ()
    IL_07ed:  ldc.i4.1
    IL_07ee:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ButtonBase::set_AutoSize(bool)
    IL_07f3:  nop
//000193:             Me.rbPLINQ.Location = New Point(6, 64)
    IL_07f4:  ldarg.0
    IL_07f5:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.RadioButton VisualizePartitioning.MainForm::get_rbPLINQ()
    IL_07fa:  ldloca.s   VB$t_struct$S2
    IL_07fc:  ldc.i4.6
    IL_07fd:  ldc.i4.s   64
    IL_07ff:  call       instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_0804:  nop
    IL_0805:  ldloc.2
    IL_0806:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_080b:  nop
//000194:             Me.rbPLINQ.Name = "rbPLINQ"
    IL_080c:  ldarg.0
    IL_080d:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.RadioButton VisualizePartitioning.MainForm::get_rbPLINQ()
    IL_0812:  ldstr      "rbPLINQ"
    IL_0817:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_081c:  nop
//000195:             Me.rbPLINQ.Size = New Size(57, 17)
    IL_081d:  ldarg.0
    IL_081e:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.RadioButton VisualizePartitioning.MainForm::get_rbPLINQ()
    IL_0823:  ldloca.s   VB$t_struct$S4
    IL_0825:  ldc.i4.s   57
    IL_0827:  ldc.i4.s   17
    IL_0829:  call       instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_082e:  nop
    IL_082f:  ldloc.s    VB$t_struct$S4
    IL_0831:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_0836:  nop
//000196:             Me.rbPLINQ.TabIndex = 11
    IL_0837:  ldarg.0
    IL_0838:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.RadioButton VisualizePartitioning.MainForm::get_rbPLINQ()
    IL_083d:  ldc.i4.s   11
    IL_083f:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_TabIndex(int32)
    IL_0844:  nop
//000197:             Me.rbPLINQ.TabStop = True
    IL_0845:  ldarg.0
    IL_0846:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.RadioButton VisualizePartitioning.MainForm::get_rbPLINQ()
    IL_084b:  ldc.i4.1
    IL_084c:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.RadioButton::set_TabStop(bool)
    IL_0851:  nop
//000198:             Me.rbPLINQ.Text = "PLINQ"
    IL_0852:  ldarg.0
    IL_0853:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.RadioButton VisualizePartitioning.MainForm::get_rbPLINQ()
    IL_0858:  ldstr      "PLINQ"
    IL_085d:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ButtonBase::set_Text(string)
    IL_0862:  nop
//000199:             Me.rbPLINQ.UseVisualStyleBackColor = True
    IL_0863:  ldarg.0
    IL_0864:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.RadioButton VisualizePartitioning.MainForm::get_rbPLINQ()
    IL_0869:  ldc.i4.1
    IL_086a:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ButtonBase::set_UseVisualStyleBackColor(bool)
    IL_086f:  nop
//000200:             ' Me.rbPLINQ.CheckedChanged += New System.EventHandler(Me.rbAPI_CheckedChanged)
//000201:             ' 
//000202:             ' groupBox1
//000203:             ' 
//000204:             Me.groupBox1.Anchor = (CType((AnchorStyles.Top Or AnchorStyles.Right), AnchorStyles))
    IL_0870:  ldarg.0
    IL_0871:  ldfld      class [System.Windows.Forms]System.Windows.Forms.GroupBox VisualizePartitioning.MainForm::groupBox1
    IL_0876:  ldc.i4.s   9
    IL_0878:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Anchor(valuetype [System.Windows.Forms]System.Windows.Forms.AnchorStyles)
    IL_087d:  nop
//000205:             Me.groupBox1.Controls.Add(Me.rbParallelForEach)
    IL_087e:  ldarg.0
    IL_087f:  ldfld      class [System.Windows.Forms]System.Windows.Forms.GroupBox VisualizePartitioning.MainForm::groupBox1
    IL_0884:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_0889:  ldarg.0
    IL_088a:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.RadioButton VisualizePartitioning.MainForm::get_rbParallelForEach()
    IL_088f:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_0894:  nop
//000206:             Me.groupBox1.Controls.Add(Me.rbPLINQ)
    IL_0895:  ldarg.0
    IL_0896:  ldfld      class [System.Windows.Forms]System.Windows.Forms.GroupBox VisualizePartitioning.MainForm::groupBox1
    IL_089b:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_08a0:  ldarg.0
    IL_08a1:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.RadioButton VisualizePartitioning.MainForm::get_rbPLINQ()
    IL_08a6:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_08ab:  nop
//000207:             Me.groupBox1.Controls.Add(Me.rbParallelFor)
    IL_08ac:  ldarg.0
    IL_08ad:  ldfld      class [System.Windows.Forms]System.Windows.Forms.GroupBox VisualizePartitioning.MainForm::groupBox1
    IL_08b2:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_08b7:  ldarg.0
    IL_08b8:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.RadioButton VisualizePartitioning.MainForm::get_rbParallelFor()
    IL_08bd:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_08c2:  nop
//000208:             Me.groupBox1.Location = New Point(557, 12)
    IL_08c3:  ldarg.0
    IL_08c4:  ldfld      class [System.Windows.Forms]System.Windows.Forms.GroupBox VisualizePartitioning.MainForm::groupBox1
    IL_08c9:  ldloca.s   VB$t_struct$S2
    IL_08cb:  ldc.i4     0x22d
    IL_08d0:  ldc.i4.s   12
    IL_08d2:  call       instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_08d7:  nop
    IL_08d8:  ldloc.2
    IL_08d9:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_08de:  nop
//000209:             Me.groupBox1.Name = "groupBox1"
    IL_08df:  ldarg.0
    IL_08e0:  ldfld      class [System.Windows.Forms]System.Windows.Forms.GroupBox VisualizePartitioning.MainForm::groupBox1
    IL_08e5:  ldstr      "groupBox1"
    IL_08ea:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_08ef:  nop
//000210:             Me.groupBox1.Size = New Size(130, 91)
    IL_08f0:  ldarg.0
    IL_08f1:  ldfld      class [System.Windows.Forms]System.Windows.Forms.GroupBox VisualizePartitioning.MainForm::groupBox1
    IL_08f6:  ldloca.s   VB$t_struct$S4
    IL_08f8:  ldc.i4     0x82
    IL_08fd:  ldc.i4.s   91
    IL_08ff:  call       instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_0904:  nop
    IL_0905:  ldloc.s    VB$t_struct$S4
    IL_0907:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_090c:  nop
//000211:             Me.groupBox1.TabIndex = 12
    IL_090d:  ldarg.0
    IL_090e:  ldfld      class [System.Windows.Forms]System.Windows.Forms.GroupBox VisualizePartitioning.MainForm::groupBox1
    IL_0913:  ldc.i4.s   12
    IL_0915:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_TabIndex(int32)
    IL_091a:  nop
//000212:             Me.groupBox1.TabStop = False
    IL_091b:  ldarg.0
    IL_091c:  ldfld      class [System.Windows.Forms]System.Windows.Forms.GroupBox VisualizePartitioning.MainForm::groupBox1
    IL_0921:  ldc.i4.0
    IL_0922:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.GroupBox::set_TabStop(bool)
    IL_0927:  nop
//000213:             Me.groupBox1.Text = "API"
    IL_0928:  ldarg.0
    IL_0929:  ldfld      class [System.Windows.Forms]System.Windows.Forms.GroupBox VisualizePartitioning.MainForm::groupBox1
    IL_092e:  ldstr      "API"
    IL_0933:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.GroupBox::set_Text(string)
    IL_0938:  nop
//000214:             ' 
//000215:             ' label4
//000216:             ' 
//000217:             Me.label4.Anchor = (CType((AnchorStyles.Top Or AnchorStyles.Right), AnchorStyles))
    IL_0939:  ldarg.0
    IL_093a:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label VisualizePartitioning.MainForm::label4
    IL_093f:  ldc.i4.s   9
    IL_0941:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Anchor(valuetype [System.Windows.Forms]System.Windows.Forms.AnchorStyles)
    IL_0946:  nop
//000218:             Me.label4.AutoSize = True
    IL_0947:  ldarg.0
    IL_0948:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label VisualizePartitioning.MainForm::label4
    IL_094d:  ldc.i4.1
    IL_094e:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Label::set_AutoSize(bool)
    IL_0953:  nop
//000219:             Me.label4.Location = New Point(556, 436)
    IL_0954:  ldarg.0
    IL_0955:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label VisualizePartitioning.MainForm::label4
    IL_095a:  ldloca.s   VB$t_struct$S2
    IL_095c:  ldc.i4     0x22c
    IL_0961:  ldc.i4     0x1b4
    IL_0966:  call       instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_096b:  nop
    IL_096c:  ldloc.2
    IL_096d:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_0972:  nop
//000220:             Me.label4.Name = "label4"
    IL_0973:  ldarg.0
    IL_0974:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label VisualizePartitioning.MainForm::label4
    IL_0979:  ldstr      "label4"
    IL_097e:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_0983:  nop
//000221:             Me.label4.Size = New Size(34, 13)
    IL_0984:  ldarg.0
    IL_0985:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label VisualizePartitioning.MainForm::label4
    IL_098a:  ldloca.s   VB$t_struct$S4
    IL_098c:  ldc.i4.s   34
    IL_098e:  ldc.i4.s   13
    IL_0990:  call       instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_0995:  nop
    IL_0996:  ldloc.s    VB$t_struct$S4
    IL_0998:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_099d:  nop
//000222:             Me.label4.TabIndex = 14
    IL_099e:  ldarg.0
    IL_099f:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label VisualizePartitioning.MainForm::label4
    IL_09a4:  ldc.i4.s   14
    IL_09a6:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_TabIndex(int32)
    IL_09ab:  nop
//000223:             Me.label4.Text = "Cores"
    IL_09ac:  ldarg.0
    IL_09ad:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label VisualizePartitioning.MainForm::label4
    IL_09b2:  ldstr      "Cores"
    IL_09b7:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Label::set_Text(string)
    IL_09bc:  nop
//000224:             ' 
//000225:             ' tbCores
//000226:             ' 
//000227:             Me.tbCores.Anchor = (CType((AnchorStyles.Top Or AnchorStyles.Right), AnchorStyles))
    IL_09bd:  ldarg.0
    IL_09be:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.TrackBar VisualizePartitioning.MainForm::get_tbCores()
    IL_09c3:  ldc.i4.s   9
    IL_09c5:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Anchor(valuetype [System.Windows.Forms]System.Windows.Forms.AnchorStyles)
    IL_09ca:  nop
//000228:             Me.tbCores.LargeChange = 1
    IL_09cb:  ldarg.0
    IL_09cc:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.TrackBar VisualizePartitioning.MainForm::get_tbCores()
    IL_09d1:  ldc.i4.1
    IL_09d2:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.TrackBar::set_LargeChange(int32)
    IL_09d7:  nop
//000229:             Me.tbCores.Location = New Point(557, 459)
    IL_09d8:  ldarg.0
    IL_09d9:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.TrackBar VisualizePartitioning.MainForm::get_tbCores()
    IL_09de:  ldloca.s   VB$t_struct$S2
    IL_09e0:  ldc.i4     0x22d
    IL_09e5:  ldc.i4     0x1cb
    IL_09ea:  call       instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_09ef:  nop
    IL_09f0:  ldloc.2
    IL_09f1:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_09f6:  nop
//000230:             Me.tbCores.Maximum = 100
    IL_09f7:  ldarg.0
    IL_09f8:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.TrackBar VisualizePartitioning.MainForm::get_tbCores()
    IL_09fd:  ldc.i4.s   100
    IL_09ff:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.TrackBar::set_Maximum(int32)
    IL_0a04:  nop
//000231:             Me.tbCores.Minimum = 0
    IL_0a05:  ldarg.0
    IL_0a06:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.TrackBar VisualizePartitioning.MainForm::get_tbCores()
    IL_0a0b:  ldc.i4.0
    IL_0a0c:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.TrackBar::set_Minimum(int32)
    IL_0a11:  nop
//000232:             Me.tbCores.Name = "tbCores"
    IL_0a12:  ldarg.0
    IL_0a13:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.TrackBar VisualizePartitioning.MainForm::get_tbCores()
    IL_0a18:  ldstr      "tbCores"
    IL_0a1d:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_0a22:  nop
//000233:             Me.tbCores.Size = New Size(123, 45)
    IL_0a23:  ldarg.0
    IL_0a24:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.TrackBar VisualizePartitioning.MainForm::get_tbCores()
    IL_0a29:  ldloca.s   VB$t_struct$S4
    IL_0a2b:  ldc.i4.s   123
    IL_0a2d:  ldc.i4.s   45
    IL_0a2f:  call       instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_0a34:  nop
    IL_0a35:  ldloc.s    VB$t_struct$S4
    IL_0a37:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_0a3c:  nop
//000234:             Me.tbCores.TabIndex = 13
    IL_0a3d:  ldarg.0
    IL_0a3e:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.TrackBar VisualizePartitioning.MainForm::get_tbCores()
    IL_0a43:  ldc.i4.s   13
    IL_0a45:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_TabIndex(int32)
    IL_0a4a:  nop
//000235:             Me.tbCores.TickStyle = TickStyle.None
    IL_0a4b:  ldarg.0
    IL_0a4c:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.TrackBar VisualizePartitioning.MainForm::get_tbCores()
    IL_0a51:  ldc.i4.0
    IL_0a52:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.TrackBar::set_TickStyle(valuetype [System.Windows.Forms]System.Windows.Forms.TickStyle)
    IL_0a57:  nop
//000236:             Me.tbCores.Value = 0
    IL_0a58:  ldarg.0
    IL_0a59:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.TrackBar VisualizePartitioning.MainForm::get_tbCores()
    IL_0a5e:  ldc.i4.0
    IL_0a5f:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.TrackBar::set_Value(int32)
    IL_0a64:  nop
//000237:             ' Me.tbCores.ValueChanged += New System.EventHandler(Me.tbCores_ValueChanged)
//000238:             ' 
//000239:             ' MainForm
//000240:             ' 
//000241:             Me.AutoScaleDimensions = New SizeF(6.0F, 13.0F)
    IL_0a65:  ldarg.0
    IL_0a66:  ldloca.s   VB$t_struct$S6
    IL_0a68:  ldc.r4     6.
    IL_0a6d:  ldc.r4     13.
    IL_0a72:  call       instance void [System.Drawing]System.Drawing.SizeF::.ctor(float32,
                                                                                   float32)
    IL_0a77:  nop
    IL_0a78:  ldloc.s    VB$t_struct$S6
    IL_0a7a:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ContainerControl::set_AutoScaleDimensions(valuetype [System.Drawing]System.Drawing.SizeF)
    IL_0a7f:  nop
//000242:             Me.AutoScaleMode = AutoScaleMode.Font
    IL_0a80:  ldarg.0
    IL_0a81:  ldc.i4.1
    IL_0a82:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ContainerControl::set_AutoScaleMode(valuetype [System.Windows.Forms]System.Windows.Forms.AutoScaleMode)
    IL_0a87:  nop
//000243:             Me.ClientSize = New Size(695, 547)
    IL_0a88:  ldarg.0
    IL_0a89:  ldloca.s   VB$t_struct$S4
    IL_0a8b:  ldc.i4     0x2b7
    IL_0a90:  ldc.i4     0x223
    IL_0a95:  call       instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_0a9a:  nop
    IL_0a9b:  ldloc.s    VB$t_struct$S4
    IL_0a9d:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Form::set_ClientSize(valuetype [System.Drawing]System.Drawing.Size)
    IL_0aa2:  nop
//000244:             Me.Controls.Add(Me.btnVisualize)
    IL_0aa3:  ldarg.0
    IL_0aa4:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_0aa9:  ldarg.0
    IL_0aaa:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Button VisualizePartitioning.MainForm::get_btnVisualize()
    IL_0aaf:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_0ab4:  nop
//000245:             Me.Controls.Add(Me.label4)
    IL_0ab5:  ldarg.0
    IL_0ab6:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_0abb:  ldarg.0
    IL_0abc:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label VisualizePartitioning.MainForm::label4
    IL_0ac1:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_0ac6:  nop
//000246:             Me.Controls.Add(Me.tbCores)
    IL_0ac7:  ldarg.0
    IL_0ac8:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_0acd:  ldarg.0
    IL_0ace:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.TrackBar VisualizePartitioning.MainForm::get_tbCores()
    IL_0ad3:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_0ad8:  nop
//000247:             Me.Controls.Add(Me.groupBox1)
    IL_0ad9:  ldarg.0
    IL_0ada:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_0adf:  ldarg.0
    IL_0ae0:  ldfld      class [System.Windows.Forms]System.Windows.Forms.GroupBox VisualizePartitioning.MainForm::groupBox1
    IL_0ae5:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_0aea:  nop
//000248:             Me.Controls.Add(Me.label3)
    IL_0aeb:  ldarg.0
    IL_0aec:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_0af1:  ldarg.0
    IL_0af2:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label VisualizePartitioning.MainForm::label3
    IL_0af7:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_0afc:  nop
//000249:             Me.Controls.Add(Me.tbWorkFactor)
    IL_0afd:  ldarg.0
    IL_0afe:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_0b03:  ldarg.0
    IL_0b04:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.TrackBar VisualizePartitioning.MainForm::get_tbWorkFactor()
    IL_0b09:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_0b0e:  nop
//000250:             Me.Controls.Add(Me.lblTime)
    IL_0b0f:  ldarg.0
    IL_0b10:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_0b15:  ldarg.0
    IL_0b16:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label VisualizePartitioning.MainForm::lblTime
    IL_0b1b:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_0b20:  nop
//000251:             Me.Controls.Add(Me.label2)
    IL_0b21:  ldarg.0
    IL_0b22:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_0b27:  ldarg.0
    IL_0b28:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label VisualizePartitioning.MainForm::label2
    IL_0b2d:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_0b32:  nop
//000252:             Me.Controls.Add(Me.label1)
    IL_0b33:  ldarg.0
    IL_0b34:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_0b39:  ldarg.0
    IL_0b3a:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label VisualizePartitioning.MainForm::label1
    IL_0b3f:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_0b44:  nop
//000253:             Me.Controls.Add(Me.lvWorkloads)
    IL_0b45:  ldarg.0
    IL_0b46:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_0b4b:  ldarg.0
    IL_0b4c:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ListView VisualizePartitioning.MainForm::lvWorkloads
    IL_0b51:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_0b56:  nop
//000254:             Me.Controls.Add(Me.lvPartitioningMethods)
    IL_0b57:  ldarg.0
    IL_0b58:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_0b5d:  ldarg.0
    IL_0b5e:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ListView VisualizePartitioning.MainForm::lvPartitioningMethods
    IL_0b63:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_0b68:  nop
//000255:             Me.Controls.Add(Me.pbPartitionedImage)
    IL_0b69:  ldarg.0
    IL_0b6a:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_0b6f:  ldarg.0
    IL_0b70:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox VisualizePartitioning.MainForm::pbPartitionedImage
    IL_0b75:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_0b7a:  nop
//000256:             Me.Name = "MainForm"
    IL_0b7b:  ldarg.0
    IL_0b7c:  ldstr      "MainForm"
    IL_0b81:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_0b86:  nop
//000257:             Me.Text = "Visualize Partitioning"
    IL_0b87:  ldarg.0
    IL_0b88:  ldstr      "Visualize Partitioning"
    IL_0b8d:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Form::set_Text(string)
    IL_0b92:  nop
//000258:             CType(Me.pbPartitionedImage, System.ComponentModel.ISupportInitialize).EndInit()
    IL_0b93:  ldarg.0
    IL_0b94:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox VisualizePartitioning.MainForm::pbPartitionedImage
    IL_0b99:  callvirt   instance void [System]System.ComponentModel.ISupportInitialize::EndInit()
    IL_0b9e:  nop
//000259:             CType(Me.tbWorkFactor, System.ComponentModel.ISupportInitialize).EndInit()
    IL_0b9f:  ldarg.0
    IL_0ba0:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.TrackBar VisualizePartitioning.MainForm::get_tbWorkFactor()
    IL_0ba5:  callvirt   instance void [System]System.ComponentModel.ISupportInitialize::EndInit()
    IL_0baa:  nop
//000260:             Me.groupBox1.ResumeLayout(False)
    IL_0bab:  ldarg.0
    IL_0bac:  ldfld      class [System.Windows.Forms]System.Windows.Forms.GroupBox VisualizePartitioning.MainForm::groupBox1
    IL_0bb1:  ldc.i4.0
    IL_0bb2:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::ResumeLayout(bool)
    IL_0bb7:  nop
//000261:             Me.groupBox1.PerformLayout()
    IL_0bb8:  ldarg.0
    IL_0bb9:  ldfld      class [System.Windows.Forms]System.Windows.Forms.GroupBox VisualizePartitioning.MainForm::groupBox1
    IL_0bbe:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::PerformLayout()
    IL_0bc3:  nop
//000262:             CType(Me.tbCores, System.ComponentModel.ISupportInitialize).EndInit()
    IL_0bc4:  ldarg.0
    IL_0bc5:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.TrackBar VisualizePartitioning.MainForm::get_tbCores()
    IL_0bca:  callvirt   instance void [System]System.ComponentModel.ISupportInitialize::EndInit()
    IL_0bcf:  nop
//000263:             Me.ResumeLayout(False)
    IL_0bd0:  ldarg.0
    IL_0bd1:  ldc.i4.0
    IL_0bd2:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::ResumeLayout(bool)
    IL_0bd7:  nop
//000264:             Me.PerformLayout()
    IL_0bd8:  ldarg.0
    IL_0bd9:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::PerformLayout()
    IL_0bde:  nop
//000265: 
//000266:         End Sub
    IL_0bdf:  nop
    IL_0be0:  ret
  } // end of method MainForm::InitializeComponent

  .method private newslot specialname strict virtual 
          instance class [System.Windows.Forms]System.Windows.Forms.Button 
          get_btnVisualize() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       11 (0xb)
    .maxstack  1
    .locals init (class [System.Windows.Forms]System.Windows.Forms.Button V_0)
    IL_0000:  ldarg.0
    IL_0001:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Button VisualizePartitioning.MainForm::_btnVisualize
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method MainForm::get_btnVisualize

  .method private newslot specialname strict virtual 
          instance void  set_btnVisualize(class [System.Windows.Forms]System.Windows.Forms.Button WithEventsValue) cil managed synchronized
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       83 (0x53)
    .maxstack  2
    .locals init (class [mscorlib]System.EventHandler V_0,
             bool V_1)
    IL_0000:  ldarg.0
    IL_0001:  dup
    IL_0002:  ldvirtftn  instance void VisualizePartitioning.MainForm::btnVisualize_Click(object,
                                                                                          class [mscorlib]System.EventArgs)
    IL_0008:  newobj     instance void [mscorlib]System.EventHandler::.ctor(object,
                                                                            native int)
    IL_000d:  stloc.0
    IL_000e:  ldarg.0
    IL_000f:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Button VisualizePartitioning.MainForm::_btnVisualize
    IL_0014:  ldnull
    IL_0015:  ceq
    IL_0017:  ldc.i4.0
    IL_0018:  ceq
    IL_001a:  stloc.1
    IL_001b:  ldloc.1
    IL_001c:  brfalse.s  IL_002b

    IL_001e:  ldarg.0
    IL_001f:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Button VisualizePartitioning.MainForm::_btnVisualize
    IL_0024:  ldloc.0
    IL_0025:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::remove_Click(class [mscorlib]System.EventHandler)
    IL_002a:  nop
    IL_002b:  nop
    IL_002c:  ldarg.0
    IL_002d:  ldarg.1
    IL_002e:  stfld      class [System.Windows.Forms]System.Windows.Forms.Button VisualizePartitioning.MainForm::_btnVisualize
    IL_0033:  ldarg.0
    IL_0034:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Button VisualizePartitioning.MainForm::_btnVisualize
    IL_0039:  ldnull
    IL_003a:  ceq
    IL_003c:  ldc.i4.0
    IL_003d:  ceq
    IL_003f:  stloc.1
    IL_0040:  ldloc.1
    IL_0041:  brfalse.s  IL_0050

    IL_0043:  ldarg.0
    IL_0044:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Button VisualizePartitioning.MainForm::_btnVisualize
    IL_0049:  ldloc.0
    IL_004a:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::add_Click(class [mscorlib]System.EventHandler)
    IL_004f:  nop
    IL_0050:  nop
    IL_0051:  nop
    IL_0052:  ret
  } // end of method MainForm::set_btnVisualize

  .method private newslot specialname strict virtual 
          instance class [System.Windows.Forms]System.Windows.Forms.TrackBar 
          get_tbWorkFactor() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       11 (0xb)
    .maxstack  1
    .locals init (class [System.Windows.Forms]System.Windows.Forms.TrackBar V_0)
    IL_0000:  ldarg.0
    IL_0001:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TrackBar VisualizePartitioning.MainForm::_tbWorkFactor
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method MainForm::get_tbWorkFactor

  .method private newslot specialname strict virtual 
          instance void  set_tbWorkFactor(class [System.Windows.Forms]System.Windows.Forms.TrackBar WithEventsValue) cil managed synchronized
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       83 (0x53)
    .maxstack  2
    .locals init (class [mscorlib]System.EventHandler V_0,
             bool V_1)
    IL_0000:  ldarg.0
    IL_0001:  dup
    IL_0002:  ldvirtftn  instance void VisualizePartitioning.MainForm::tbWorkFactor_ValueChanged(object,
                                                                                                 class [mscorlib]System.EventArgs)
    IL_0008:  newobj     instance void [mscorlib]System.EventHandler::.ctor(object,
                                                                            native int)
    IL_000d:  stloc.0
    IL_000e:  ldarg.0
    IL_000f:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TrackBar VisualizePartitioning.MainForm::_tbWorkFactor
    IL_0014:  ldnull
    IL_0015:  ceq
    IL_0017:  ldc.i4.0
    IL_0018:  ceq
    IL_001a:  stloc.1
    IL_001b:  ldloc.1
    IL_001c:  brfalse.s  IL_002b

    IL_001e:  ldarg.0
    IL_001f:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TrackBar VisualizePartitioning.MainForm::_tbWorkFactor
    IL_0024:  ldloc.0
    IL_0025:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.TrackBar::remove_ValueChanged(class [mscorlib]System.EventHandler)
    IL_002a:  nop
    IL_002b:  nop
    IL_002c:  ldarg.0
    IL_002d:  ldarg.1
    IL_002e:  stfld      class [System.Windows.Forms]System.Windows.Forms.TrackBar VisualizePartitioning.MainForm::_tbWorkFactor
    IL_0033:  ldarg.0
    IL_0034:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TrackBar VisualizePartitioning.MainForm::_tbWorkFactor
    IL_0039:  ldnull
    IL_003a:  ceq
    IL_003c:  ldc.i4.0
    IL_003d:  ceq
    IL_003f:  stloc.1
    IL_0040:  ldloc.1
    IL_0041:  brfalse.s  IL_0050

    IL_0043:  ldarg.0
    IL_0044:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TrackBar VisualizePartitioning.MainForm::_tbWorkFactor
    IL_0049:  ldloc.0
    IL_004a:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.TrackBar::add_ValueChanged(class [mscorlib]System.EventHandler)
    IL_004f:  nop
    IL_0050:  nop
    IL_0051:  nop
    IL_0052:  ret
  } // end of method MainForm::set_tbWorkFactor

  .method private newslot specialname strict virtual 
          instance class [System.Windows.Forms]System.Windows.Forms.RadioButton 
          get_rbParallelFor() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       11 (0xb)
    .maxstack  1
    .locals init (class [System.Windows.Forms]System.Windows.Forms.RadioButton V_0)
    IL_0000:  ldarg.0
    IL_0001:  ldfld      class [System.Windows.Forms]System.Windows.Forms.RadioButton VisualizePartitioning.MainForm::_rbParallelFor
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method MainForm::get_rbParallelFor

  .method private newslot specialname strict virtual 
          instance void  set_rbParallelFor(class [System.Windows.Forms]System.Windows.Forms.RadioButton WithEventsValue) cil managed synchronized
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       83 (0x53)
    .maxstack  2
    .locals init (class [mscorlib]System.EventHandler V_0,
             bool V_1)
    IL_0000:  ldarg.0
    IL_0001:  dup
    IL_0002:  ldvirtftn  instance void VisualizePartitioning.MainForm::rbAPI_CheckedChanged(object,
                                                                                            class [mscorlib]System.EventArgs)
    IL_0008:  newobj     instance void [mscorlib]System.EventHandler::.ctor(object,
                                                                            native int)
    IL_000d:  stloc.0
    IL_000e:  ldarg.0
    IL_000f:  ldfld      class [System.Windows.Forms]System.Windows.Forms.RadioButton VisualizePartitioning.MainForm::_rbParallelFor
    IL_0014:  ldnull
    IL_0015:  ceq
    IL_0017:  ldc.i4.0
    IL_0018:  ceq
    IL_001a:  stloc.1
    IL_001b:  ldloc.1
    IL_001c:  brfalse.s  IL_002b

    IL_001e:  ldarg.0
    IL_001f:  ldfld      class [System.Windows.Forms]System.Windows.Forms.RadioButton VisualizePartitioning.MainForm::_rbParallelFor
    IL_0024:  ldloc.0
    IL_0025:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.RadioButton::remove_CheckedChanged(class [mscorlib]System.EventHandler)
    IL_002a:  nop
    IL_002b:  nop
    IL_002c:  ldarg.0
    IL_002d:  ldarg.1
    IL_002e:  stfld      class [System.Windows.Forms]System.Windows.Forms.RadioButton VisualizePartitioning.MainForm::_rbParallelFor
    IL_0033:  ldarg.0
    IL_0034:  ldfld      class [System.Windows.Forms]System.Windows.Forms.RadioButton VisualizePartitioning.MainForm::_rbParallelFor
    IL_0039:  ldnull
    IL_003a:  ceq
    IL_003c:  ldc.i4.0
    IL_003d:  ceq
    IL_003f:  stloc.1
    IL_0040:  ldloc.1
    IL_0041:  brfalse.s  IL_0050

    IL_0043:  ldarg.0
    IL_0044:  ldfld      class [System.Windows.Forms]System.Windows.Forms.RadioButton VisualizePartitioning.MainForm::_rbParallelFor
    IL_0049:  ldloc.0
    IL_004a:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.RadioButton::add_CheckedChanged(class [mscorlib]System.EventHandler)
    IL_004f:  nop
    IL_0050:  nop
    IL_0051:  nop
    IL_0052:  ret
  } // end of method MainForm::set_rbParallelFor

  .method private newslot specialname strict virtual 
          instance class [System.Windows.Forms]System.Windows.Forms.RadioButton 
          get_rbParallelForEach() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       11 (0xb)
    .maxstack  1
    .locals init (class [System.Windows.Forms]System.Windows.Forms.RadioButton V_0)
    IL_0000:  ldarg.0
    IL_0001:  ldfld      class [System.Windows.Forms]System.Windows.Forms.RadioButton VisualizePartitioning.MainForm::_rbParallelForEach
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method MainForm::get_rbParallelForEach

  .method private newslot specialname strict virtual 
          instance void  set_rbParallelForEach(class [System.Windows.Forms]System.Windows.Forms.RadioButton WithEventsValue) cil managed synchronized
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       83 (0x53)
    .maxstack  2
    .locals init (class [mscorlib]System.EventHandler V_0,
             bool V_1)
    IL_0000:  ldarg.0
    IL_0001:  dup
    IL_0002:  ldvirtftn  instance void VisualizePartitioning.MainForm::rbAPI_CheckedChanged(object,
                                                                                            class [mscorlib]System.EventArgs)
    IL_0008:  newobj     instance void [mscorlib]System.EventHandler::.ctor(object,
                                                                            native int)
    IL_000d:  stloc.0
    IL_000e:  ldarg.0
    IL_000f:  ldfld      class [System.Windows.Forms]System.Windows.Forms.RadioButton VisualizePartitioning.MainForm::_rbParallelForEach
    IL_0014:  ldnull
    IL_0015:  ceq
    IL_0017:  ldc.i4.0
    IL_0018:  ceq
    IL_001a:  stloc.1
    IL_001b:  ldloc.1
    IL_001c:  brfalse.s  IL_002b

    IL_001e:  ldarg.0
    IL_001f:  ldfld      class [System.Windows.Forms]System.Windows.Forms.RadioButton VisualizePartitioning.MainForm::_rbParallelForEach
    IL_0024:  ldloc.0
    IL_0025:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.RadioButton::remove_CheckedChanged(class [mscorlib]System.EventHandler)
    IL_002a:  nop
    IL_002b:  nop
    IL_002c:  ldarg.0
    IL_002d:  ldarg.1
    IL_002e:  stfld      class [System.Windows.Forms]System.Windows.Forms.RadioButton VisualizePartitioning.MainForm::_rbParallelForEach
    IL_0033:  ldarg.0
    IL_0034:  ldfld      class [System.Windows.Forms]System.Windows.Forms.RadioButton VisualizePartitioning.MainForm::_rbParallelForEach
    IL_0039:  ldnull
    IL_003a:  ceq
    IL_003c:  ldc.i4.0
    IL_003d:  ceq
    IL_003f:  stloc.1
    IL_0040:  ldloc.1
    IL_0041:  brfalse.s  IL_0050

    IL_0043:  ldarg.0
    IL_0044:  ldfld      class [System.Windows.Forms]System.Windows.Forms.RadioButton VisualizePartitioning.MainForm::_rbParallelForEach
    IL_0049:  ldloc.0
    IL_004a:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.RadioButton::add_CheckedChanged(class [mscorlib]System.EventHandler)
    IL_004f:  nop
    IL_0050:  nop
    IL_0051:  nop
    IL_0052:  ret
  } // end of method MainForm::set_rbParallelForEach

  .method private newslot specialname strict virtual 
          instance class [System.Windows.Forms]System.Windows.Forms.RadioButton 
          get_rbPLINQ() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       11 (0xb)
    .maxstack  1
    .locals init (class [System.Windows.Forms]System.Windows.Forms.RadioButton V_0)
    IL_0000:  ldarg.0
    IL_0001:  ldfld      class [System.Windows.Forms]System.Windows.Forms.RadioButton VisualizePartitioning.MainForm::_rbPLINQ
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method MainForm::get_rbPLINQ

  .method private newslot specialname strict virtual 
          instance void  set_rbPLINQ(class [System.Windows.Forms]System.Windows.Forms.RadioButton WithEventsValue) cil managed synchronized
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       83 (0x53)
    .maxstack  2
    .locals init (class [mscorlib]System.EventHandler V_0,
             bool V_1)
    IL_0000:  ldarg.0
    IL_0001:  dup
    IL_0002:  ldvirtftn  instance void VisualizePartitioning.MainForm::rbAPI_CheckedChanged(object,
                                                                                            class [mscorlib]System.EventArgs)
    IL_0008:  newobj     instance void [mscorlib]System.EventHandler::.ctor(object,
                                                                            native int)
    IL_000d:  stloc.0
    IL_000e:  ldarg.0
    IL_000f:  ldfld      class [System.Windows.Forms]System.Windows.Forms.RadioButton VisualizePartitioning.MainForm::_rbPLINQ
    IL_0014:  ldnull
    IL_0015:  ceq
    IL_0017:  ldc.i4.0
    IL_0018:  ceq
    IL_001a:  stloc.1
    IL_001b:  ldloc.1
    IL_001c:  brfalse.s  IL_002b

    IL_001e:  ldarg.0
    IL_001f:  ldfld      class [System.Windows.Forms]System.Windows.Forms.RadioButton VisualizePartitioning.MainForm::_rbPLINQ
    IL_0024:  ldloc.0
    IL_0025:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.RadioButton::remove_CheckedChanged(class [mscorlib]System.EventHandler)
    IL_002a:  nop
    IL_002b:  nop
    IL_002c:  ldarg.0
    IL_002d:  ldarg.1
    IL_002e:  stfld      class [System.Windows.Forms]System.Windows.Forms.RadioButton VisualizePartitioning.MainForm::_rbPLINQ
    IL_0033:  ldarg.0
    IL_0034:  ldfld      class [System.Windows.Forms]System.Windows.Forms.RadioButton VisualizePartitioning.MainForm::_rbPLINQ
    IL_0039:  ldnull
    IL_003a:  ceq
    IL_003c:  ldc.i4.0
    IL_003d:  ceq
    IL_003f:  stloc.1
    IL_0040:  ldloc.1
    IL_0041:  brfalse.s  IL_0050

    IL_0043:  ldarg.0
    IL_0044:  ldfld      class [System.Windows.Forms]System.Windows.Forms.RadioButton VisualizePartitioning.MainForm::_rbPLINQ
    IL_0049:  ldloc.0
    IL_004a:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.RadioButton::add_CheckedChanged(class [mscorlib]System.EventHandler)
    IL_004f:  nop
    IL_0050:  nop
    IL_0051:  nop
    IL_0052:  ret
  } // end of method MainForm::set_rbPLINQ

  .method private newslot specialname strict virtual 
          instance class [System.Windows.Forms]System.Windows.Forms.TrackBar 
          get_tbCores() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       11 (0xb)
    .maxstack  1
    .locals init (class [System.Windows.Forms]System.Windows.Forms.TrackBar V_0)
    IL_0000:  ldarg.0
    IL_0001:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TrackBar VisualizePartitioning.MainForm::_tbCores
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method MainForm::get_tbCores

  .method private newslot specialname strict virtual 
          instance void  set_tbCores(class [System.Windows.Forms]System.Windows.Forms.TrackBar WithEventsValue) cil managed synchronized
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       83 (0x53)
    .maxstack  2
    .locals init (class [mscorlib]System.EventHandler V_0,
             bool V_1)
    IL_0000:  ldarg.0
    IL_0001:  dup
    IL_0002:  ldvirtftn  instance void VisualizePartitioning.MainForm::tbCores_ValueChanged(object,
                                                                                            class [mscorlib]System.EventArgs)
    IL_0008:  newobj     instance void [mscorlib]System.EventHandler::.ctor(object,
                                                                            native int)
    IL_000d:  stloc.0
    IL_000e:  ldarg.0
    IL_000f:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TrackBar VisualizePartitioning.MainForm::_tbCores
    IL_0014:  ldnull
    IL_0015:  ceq
    IL_0017:  ldc.i4.0
    IL_0018:  ceq
    IL_001a:  stloc.1
    IL_001b:  ldloc.1
    IL_001c:  brfalse.s  IL_002b

    IL_001e:  ldarg.0
    IL_001f:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TrackBar VisualizePartitioning.MainForm::_tbCores
    IL_0024:  ldloc.0
    IL_0025:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.TrackBar::remove_ValueChanged(class [mscorlib]System.EventHandler)
    IL_002a:  nop
    IL_002b:  nop
    IL_002c:  ldarg.0
    IL_002d:  ldarg.1
    IL_002e:  stfld      class [System.Windows.Forms]System.Windows.Forms.TrackBar VisualizePartitioning.MainForm::_tbCores
    IL_0033:  ldarg.0
    IL_0034:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TrackBar VisualizePartitioning.MainForm::_tbCores
    IL_0039:  ldnull
    IL_003a:  ceq
    IL_003c:  ldc.i4.0
    IL_003d:  ceq
    IL_003f:  stloc.1
    IL_0040:  ldloc.1
    IL_0041:  brfalse.s  IL_0050

    IL_0043:  ldarg.0
    IL_0044:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TrackBar VisualizePartitioning.MainForm::_tbCores
    IL_0049:  ldloc.0
    IL_004a:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.TrackBar::add_ValueChanged(class [mscorlib]System.EventHandler)
    IL_004f:  nop
    IL_0050:  nop
    IL_0051:  nop
    IL_0052:  ret
  } // end of method MainForm::set_tbCores

  .method private specialname rtspecialname static 
          void  .cctor() cil managed
  {
    // Code size       44 (0x2c)
    .maxstack  8
//000267: 
//000268: #End Region
//000269: 
//000270:         Private pbPartitionedImage As PictureBox
//000271:         Private WithEvents btnVisualize As Button
//000272:         Private lvPartitioningMethods As ListView
//000273:         Private lvWorkloads As ListView
//000274:         Private label1 As Label
//000275:         Private label2 As Label
//000276:         Private lblTime As Label
//000277:         Private WithEvents tbWorkFactor As TrackBar
//000278:         Private label3 As Label
//000279:         Private WithEvents rbParallelFor As RadioButton
//000280:         Private WithEvents rbParallelForEach As RadioButton
//000281:         Private WithEvents rbPLINQ As RadioButton
//000282:         Private groupBox1 As GroupBox
//000283:         Private label4 As Label
//000284:         Private WithEvents tbCores As TrackBar
//000285:         Private toolTip1 As ToolTip
//000286:     End Class
//000287: End Namespace
//000288: 
    IL_0000:  newobj     instance void class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::.ctor()
    IL_0005:  stsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> VisualizePartitioning.MainForm::__ENCList
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\VisualizePartitioning\VisualizePartitioning_VisualBasic\MainForm.vb' 
//000029:         Private Shared _randomnessSeed As New Random()
    IL_000a:  newobj     instance void [mscorlib]System.Random::.ctor()
    IL_000f:  stsfld     class [mscorlib]System.Random VisualizePartitioning.MainForm::_randomnessSeed
//000030:         ''' <summary>A thread-safe source of randomness for all threads that need random values.</summary>
//000031:         Private Shared _localRandom As New ThreadLocal(Of Random)(Function()
    IL_0014:  ldnull
    IL_0015:  ldftn      class [mscorlib]System.Random VisualizePartitioning.MainForm::_Lambda$__1()
    IL_001b:  newobj     instance void class [mscorlib]System.Func`1<class [mscorlib]System.Random>::.ctor(object,
                                                                                                           native int)
    IL_0020:  newobj     instance void class [mscorlib]System.Threading.ThreadLocal`1<class [mscorlib]System.Random>::.ctor(class [mscorlib]System.Func`1<!0>)
    IL_0025:  stsfld     class [mscorlib]System.Threading.ThreadLocal`1<class [mscorlib]System.Random> VisualizePartitioning.MainForm::_localRandom
    IL_002a:  nop
    IL_002b:  ret
  } // end of method MainForm::.cctor

  .method public specialname rtspecialname 
          instance void  .ctor() cil managed
  {
    // Code size       81 (0x51)
    .maxstack  3
    .locals init ([0] class [System.Windows.Forms]System.Windows.Forms.TrackBar VB$t_ref$L0)
//000032:                                                                       SyncLock _randomnessSeed
//000033:                                                                           Return New Random(_randomnessSeed.[Next]())
//000034:                                                                       End SyncLock
//000035:                                                                   End Function)
//000036: 
//000037:         Public Sub New()
    IL_0000:  nop
//000038:             InitializeComponent()
//000039: 
//000040:             ' Configure the workloads and the color palette. The partitioning methods initialization will be done
//000041:             ' when the radio button is changed to Parallel.ForEach or PLINQ. The color palette will be
//000042:             ' initialized when the cores trackbar changes value.
//000043:             InitializeWorkloads()
//000044: 
//000045:             ' Configure number of cores.
//000046:             With tbCores
//000047:                 .Minimum = 1
//000048:                 .Maximum = Environment.ProcessorCount * 2
//000049:                 .Value = Environment.ProcessorCount
//000050:             End With
//000051:            
//000052:         End Sub
//000053: 
//000054:         ''' <summary>Initializes the color palette to use when rendering threads.</summary>
//000055:         Private Sub InitializeColorPalette()
//000056:             Dim random As New Random(8)
//000057:             ' Change seed value to change the palette used.
//000058:             _colors = (From i In Enumerable.Range(0, tbCores.Value)
//000059:                 Select Color.FromArgb(random.[Next](128) + 127, random.[Next](128) + 127, random.[Next](128) + 127)).ToArray()
//000060:         End Sub
//000061: 
//000062:         ''' <summary>Initializes the workloads list view.</summary>
//000063:         Private Sub InitializeWorkloads()
//000064:             lvWorkloads.Items.Clear()
//000065:             Dim workloads = New List(Of Tuple(Of String, Func(Of Integer, Integer, Integer)))()
//000066:             ' NOTE: To add a new workload, simply add a new entry below with a name and corresponding function.
//000067:             With workloads
//000068:                 .Add(Tuple.Create(Of String, Func(Of Integer, Integer, Integer))("Constant", Function(size, current) 1000 * _workFactor))
//000069:                 .Add(Tuple.Create(Of String, Func(Of Integer, Integer, Integer))("Increasing Linear", Function(size, current) 200 * current * _workFactor))
//000070:                 .Add(Tuple.Create(Of String, Func(Of Integer, Integer, Integer))("Decreasing Linear", Function(size, current) 200 * (size - current) * _workFactor))
//000071:                 .Add(Tuple.Create(Of String, Func(Of Integer, Integer, Integer))("Random", Function(size, current) _localRandom.Value.[Next](100, 10000) * _workFactor))
//000072:             End With
//000073: 
//000074:             For Each workload In workloads
//000075:                 lvWorkloads.Items.Add(New ListViewItem(workload.Item1) With {.Tag = workload})
//000076:             Next
//000077:             lvWorkloads.Items(0).Selected = True
//000078:         End Sub
//000079: 
//000080:         ''' <summary>Initializes the partitioning methods list view.</summary>
//000081:         Private Sub InitializePartitioningMethods()
//000082:             lvPartitioningMethods.Items.Clear()
//000083:             Dim usingPLINQ As Boolean = rbPLINQ.Checked
//000084:             Dim partitioningMethods = New List(Of Tuple(Of String, Func(Of Integer(), Partitioner(Of Integer))))()
//000085: 
//000086:             ' Static partitioning using the Partitioner.Create overload requires static partitioner support,
//000087:             ' which Parallel.ForEach does not provide.
//000088:             If usingPLINQ Then
//000089:                 partitioningMethods.Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))("Static", Function(e) partitioner.Create(e, False)))
//000090:             End If
//000091: 
//000092:             ' Add a bunch of partitioning approaches that work with both PLINQ and Parallel.ForEach.
//000093:             With partitioningMethods
//000094:                 .Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))("Load Balance", Function(e) partitioner.Create(e, True)))
//000095:                 .Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))("Dynamic(1)", Function(e) ChunkPartitioner.Create(e, 1)))
//000096:                 .Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))("Dynamic(16)", Function(e) ChunkPartitioner.Create(e, 16)))
//000097:                 .Add(Tuple.Create(Of String,  _
//000098:                 Func(Of Integer(), Partitioner(Of Integer)))("Guided", Function(e) ChunkPartitioner.Create(e, Function(prev)
//000099:                                                                                                                   If prev <= 0 Then
//000100:                                                                                                                       Return If(e.Length <= 1, 1,
//000101:                                                                                                                                 CType(e.Length /
//000102:                                                                                                                                     (Environment.ProcessorCount * 3), Integer))
//000103:                                                                                                                   End If
//000104:                                                                                                                   Dim [next] = CType(prev / 2, Integer)
//000105:                                                                                                                   Return If([next] <= 0, prev, [next])
//000106:                                                                                                               End Function)))
//000107:                 .Add(Tuple.Create(Of String,  _
//000108:                                         Func(Of Integer(),  _
//000109:                                              Partitioner(Of Integer)))("Grow Exponential", Function(e) ChunkPartitioner.Create(e, Function(prev) If(prev <= 0, 1, prev * 2))))
//000110:                 .Add(Tuple.Create(Of String,  _
//000111:                                         Func(Of Integer(), Partitioner(Of Integer)))("Random", Function(e) ChunkPartitioner.Create(e, Function(prev) _localRandom.Value.[Next](e.Length))))
//000112: 
//000113:             End With
//000114: 
//000115:             ' Special-case some PLINQ-only hashing.
//000116:             If usingPLINQ Then
//000117:                 ' The actual enabling of these partitioning schemes is done later, as they can't 
//000118:                 ' be encoded in a partitioner but rather are based on what operators are used in the PLINQ query.
//000119:                 partitioningMethods.Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))(PartitioningStripe, Function(e) partitioner.Create(e)))
//000120:                 partitioningMethods.Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))(PartitioningHash, Function(e) partitioner.Create(e)))
//000121:             End If
//000122: 
//000123:             ' Dump the partitioners into the list view.
//000124:             For Each method In partitioningMethods
//000125:                 lvPartitioningMethods.Items.Add(New ListViewItem(method.Item1) With {.Tag = method})
//000126:             Next
//000127:             lvPartitioningMethods.Items(0).Selected = True
//000128:         End Sub
//000129: 
//000130:         ''' <summary>Visualize the partitioning.</summary>
//000131:         Private Sub btnVisualize_Click(ByVal sender As Object, ByVal e As EventArgs) Handles btnVisualize.Click
//000132:             Dim numProcs = tbCores.Value
//000133:             Dim width = pbPartitionedImage.Width
//000134:             Dim height = pbPartitionedImage.Height
//000135:             Dim useParallelFor = rbParallelFor.Checked
//000136:             Dim useParallelForEach = rbParallelForEach.Checked
//000137:             _workFactor = tbWorkFactor.Value
//000138: 
//000139:             ' If we're using Parallel.ForEach or PLINQ, ensure a partitioning scheme was selected and use it.
//000140:             Dim selectedMethod As Tuple(Of String, Func(Of Integer(), Partitioner(Of Integer))) = Nothing
//000141:             If Not useParallelFor Then
//000142:                 If lvPartitioningMethods.SelectedIndices.Count = 0 Then
//000143:                     Exit Sub
//000144:                 Else
//000145:                     selectedMethod = DirectCast(lvPartitioningMethods.SelectedItems(0).Tag, Tuple(Of String, Func(Of Integer(), Partitioner(Of Integer))))
//000146:                 End If
//000147:             End If
//000148: 
//000149:             ' Make sure a workload was selected and use it.
//000150:             If lvWorkloads.SelectedItems.Count = 0 Then
//000151:                 Exit Sub
//000152:             End If
//000153: 
//000154:             Dim selectedWorkload = DirectCast(lvWorkloads.SelectedItems(0).Tag, Tuple(Of String, Func(Of Integer, Integer, Integer)))
//000155: 
//000156:             ' Create a new Bitmap to store the rendered output
//000157:             Dim bmp = New Bitmap(width, height)
//000158: 
//000159:             ' Disable the start button and kick off the background work.
//000160:             btnVisualize.Enabled = False
//000161:             ' Assign each thread a unique id.
//000162:             ' Get faster access to the Bitmap's contents.
//000163:             ' Time the operation.
//000164:             ' Create the partitioner to be used.
//000165:             ' Run the work with Parallel.ForEach
//000166:             ' PLINQ.
//000167:             ' Run the work with PLINQ. If a special partitioning method was selected, use relevant query operators
//000168:             ' to get PLINQ to use that partitioning approach.
//000169:             ' Return the total time from the task
//000170:             ' When the work completes, run the following on the UI thread.
//000171: 
//000172:             Task.Factory.StartNew(Function()
//000173:                                       Dim nextId = -1
//000174:                                       Dim threadId = New ThreadLocal(Of Integer)(Function() Interlocked.Increment(nextId))
//000175:                                       Using fastBmp As New FastBitmap(bmp)
//000176:                                           Dim sw = Stopwatch.StartNew()
//000177:                                           If useParallelFor Then
//000178:                                               If fastBmp Is Nothing Then
//000179:                                                   MsgBox("FastBmp Disposed")
//000180:                                               End If
//000181:                                               Parallel.[For](0, height, New ParallelOptions(), Sub(i)
//000182:                                                                                                    Dim id = threadId.Value
//000183:                                                                                                    DoWork(selectedWorkload.Item2(height, i))
//000184: 
//000185:                                                                                                    For j = 0 To width - 1
//000186:                                                                                                        fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000187:                                                                                                    Next
//000188:                                                                                                End Sub)
//000189:                                           Else
//000190:                                               Dim partitioner = selectedMethod.Item2(Enumerable.Range(0, height).ToArray())
//000191:                                               If useParallelForEach Then
//000192:                                                   Parallel.ForEach(partitioner, New ParallelOptions(), Sub(i)
//000193:                                                                                                            Dim id = threadId.Value
//000194:                                                                                                            DoWork(selectedWorkload.Item2(height, i))
//000195:                                                                                                            For j = 0 To width - 1
//000196:                                                                                                                fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000197:                                                                                                            Next
//000198:                                                                                                        End Sub)
//000199:                                               Else
//000200:                                                   Dim source = partitioner.AsParallel().WithDegreeOfParallelism(numProcs)
//000201:                                                   If selectedMethod.Item1 = PartitioningStripe Then
//000202:                                                       source = source.TakeWhile(Function(elem) True)
//000203:                                                   ElseIf selectedMethod.Item1 = PartitioningHash Then
//000204:                                                       source = source.Join(Enumerable.Range(0, height).AsParallel(), Function(i) i, Function(i) i, Function(i, ignore) i)
//000205:                                                   End If
//000206:                                                   source.ForAll(Sub(i)
//000207:                                                                     Dim id = threadId.Value
//000208:                                                                     DoWork(selectedWorkload.Item2(height, i))
//000209:                                                                     For j = 0 To width - 1
//000210:                                                                         fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000211:                                                                     Next
//000212:                                                                 End Sub)
//000213:                                               End If
//000214:                                           End If
//000215:                                           Return sw.Elapsed
//000216:                                       End Using
//000217:                                   End Function).ContinueWith(Sub(t)
//000218:                                                                  ' Dispose of the old image (if there was one) and display the new one.
//000219:                                                                  Dim old = pbPartitionedImage.Image
//000220:                                                                  pbPartitionedImage.Image = bmp
//000221:                                                                  If old IsNot Nothing Then
//000222:                                                                      old.Dispose()
//000223:                                                                  End If
//000224: 
//000225:                                                                  ' Re-enable controls on the form and display the elapsed time.
//000226:                                                                  btnVisualize.Enabled = True
//000227:                                                                  lblTime.Text = "Time: " & t.Result.ToString()
//000228:                                                              End Sub, TaskScheduler.FromCurrentSynchronizationContext())
//000229:         End Sub
//000230: 
//000231:         ''' <summary>Does an amount of work relative to the amount requested.</summary>
//000232:         ''' <param name="workAmount">The amount of work to perform.</param>
//000233:         <MethodImpl(MethodImplOptions.NoOptimization Or MethodImplOptions.NoInlining)>
//000234:         Private Shared Function DoWork(ByVal workAmount As Integer) As Integer
//000235:             Try
//000236:                 Dim value = 1
//000237:                 For i = 0 To workAmount - 1
//000238:                     value = value * workAmount
//000239:                 Next i
//000240:                 Return value
//000241:             Catch
//000242:                 Return 0
//000243:             End Try
//000244:         End Function
//000245: 
//000246:         ''' <summary>Update relevant portions of the form when the API radio buttons are checked.</summary>
//000247:         ''' <param name="sender">The radio button.</param>
//000248:         ''' <param name="e">The event args.</param>
//000249:         Private Sub rbAPI_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles rbParallelForEach.CheckedChanged,
//000250:             rbPLINQ.CheckedChanged, rbParallelFor.CheckedChanged
//000251:             lvPartitioningMethods.Enabled = Not rbParallelFor.Checked
//000252:             lvPartitioningMethods.HideSelection = Not lvPartitioningMethods.Enabled
//000253: 
//000254:             ' Recreate partitioning methods every time a radio button is checked,
//000255:             ' as which API is selected determines which partitioning methods are available.
//000256:             InitializePartitioningMethods()
//000257:         End Sub
//000258: 
//000259:         Private Sub tbCores_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbCores.ValueChanged
//000260:             toolTip1.SetToolTip(tbCores, tbCores.Value.ToString())
//000261:             InitializeColorPalette()
//000262:             Dim worker As Integer
//000263:             Dim io As Integer
//000264:             ThreadPool.GetMinThreads(worker, io)
//000265:             ThreadPool.SetMinThreads(tbCores.Value, io)
//000266:         End Sub
//000267: 
//000268:         Private Sub tbWorkFactor_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbWorkFactor.ValueChanged
//000269:             toolTip1.SetToolTip(tbWorkFactor, tbWorkFactor.Value.ToString())
//000270:         End Sub
//000271:     End Class
//000272: End Namespace
    IL_0001:  ldarg.0
    IL_0002:  call       instance void [System.Windows.Forms]System.Windows.Forms.Form::.ctor()
    IL_0007:  nop
    IL_0008:  ldarg.0
    IL_0009:  call       void VisualizePartitioning.MainForm::__ENCAddToList(object)
    IL_000e:  nop
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\VisualizePartitioning\VisualizePartitioning_VisualBasic\MainForm.Designer.vb' 
//000006:         Private components As System.ComponentModel.IContainer = Nothing
    IL_000f:  ldarg.0
    IL_0010:  ldnull
    IL_0011:  stfld      class [System]System.ComponentModel.IContainer VisualizePartitioning.MainForm::components
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\VisualizePartitioning\VisualizePartitioning_VisualBasic\MainForm.vb' 
//000038:             InitializeComponent()
    IL_0016:  ldarg.0
    IL_0017:  callvirt   instance void VisualizePartitioning.MainForm::InitializeComponent()
    IL_001c:  nop
//000039: 
//000040:             ' Configure the workloads and the color palette. The partitioning methods initialization will be done
//000041:             ' when the radio button is changed to Parallel.ForEach or PLINQ. The color palette will be
//000042:             ' initialized when the cores trackbar changes value.
//000043:             InitializeWorkloads()
    IL_001d:  ldarg.0
    IL_001e:  callvirt   instance void VisualizePartitioning.MainForm::InitializeWorkloads()
    IL_0023:  nop
//000044: 
//000045:             ' Configure number of cores.
//000046:             With tbCores
    IL_0024:  ldarg.0
    IL_0025:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.TrackBar VisualizePartitioning.MainForm::get_tbCores()
    IL_002a:  stloc.0
//000047:                 .Minimum = 1
    IL_002b:  ldloc.0
    IL_002c:  ldc.i4.1
    IL_002d:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.TrackBar::set_Minimum(int32)
    IL_0032:  nop
//000048:                 .Maximum = Environment.ProcessorCount * 2
    IL_0033:  ldloc.0
    IL_0034:  call       int32 [mscorlib]System.Environment::get_ProcessorCount()
    IL_0039:  ldc.i4.2
    IL_003a:  mul.ovf
    IL_003b:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.TrackBar::set_Maximum(int32)
    IL_0040:  nop
//000049:                 .Value = Environment.ProcessorCount
    IL_0041:  ldloc.0
    IL_0042:  call       int32 [mscorlib]System.Environment::get_ProcessorCount()
    IL_0047:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.TrackBar::set_Value(int32)
    IL_004c:  nop
//000050:             End With
    IL_004d:  ldnull
    IL_004e:  stloc.0
//000051:            
//000052:         End Sub
    IL_004f:  nop
    IL_0050:  ret
  } // end of method MainForm::.ctor

  .method private instance void  InitializeColorPalette() cil managed
  {
    // Code size       67 (0x43)
    .maxstack  4
    .locals init ([0] class VisualizePartitioning.MainForm/_Closure$__1 $VB$Closure_ClosureVariable_36_2C)
//000053: 
//000054:         ''' <summary>Initializes the color palette to use when rendering threads.</summary>
//000055:         Private Sub InitializeColorPalette()
    IL_0000:  nop
//000056:             Dim random As New Random(8)
//000057:             ' Change seed value to change the palette used.
//000058:             _colors = (From i In Enumerable.Range(0, tbCores.Value)
//000059:                 Select Color.FromArgb(random.[Next](128) + 127, random.[Next](128) + 127, random.[Next](128) + 127)).ToArray()
//000060:         End Sub
//000061: 
//000062:         ''' <summary>Initializes the workloads list view.</summary>
//000063:         Private Sub InitializeWorkloads()
//000064:             lvWorkloads.Items.Clear()
//000065:             Dim workloads = New List(Of Tuple(Of String, Func(Of Integer, Integer, Integer)))()
//000066:             ' NOTE: To add a new workload, simply add a new entry below with a name and corresponding function.
//000067:             With workloads
//000068:                 .Add(Tuple.Create(Of String, Func(Of Integer, Integer, Integer))("Constant", Function(size, current) 1000 * _workFactor))
//000069:                 .Add(Tuple.Create(Of String, Func(Of Integer, Integer, Integer))("Increasing Linear", Function(size, current) 200 * current * _workFactor))
//000070:                 .Add(Tuple.Create(Of String, Func(Of Integer, Integer, Integer))("Decreasing Linear", Function(size, current) 200 * (size - current) * _workFactor))
//000071:                 .Add(Tuple.Create(Of String, Func(Of Integer, Integer, Integer))("Random", Function(size, current) _localRandom.Value.[Next](100, 10000) * _workFactor))
//000072:             End With
//000073: 
//000074:             For Each workload In workloads
//000075:                 lvWorkloads.Items.Add(New ListViewItem(workload.Item1) With {.Tag = workload})
//000076:             Next
//000077:             lvWorkloads.Items(0).Selected = True
//000078:         End Sub
//000079: 
//000080:         ''' <summary>Initializes the partitioning methods list view.</summary>
//000081:         Private Sub InitializePartitioningMethods()
//000082:             lvPartitioningMethods.Items.Clear()
//000083:             Dim usingPLINQ As Boolean = rbPLINQ.Checked
//000084:             Dim partitioningMethods = New List(Of Tuple(Of String, Func(Of Integer(), Partitioner(Of Integer))))()
//000085: 
//000086:             ' Static partitioning using the Partitioner.Create overload requires static partitioner support,
//000087:             ' which Parallel.ForEach does not provide.
//000088:             If usingPLINQ Then
//000089:                 partitioningMethods.Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))("Static", Function(e) partitioner.Create(e, False)))
//000090:             End If
//000091: 
//000092:             ' Add a bunch of partitioning approaches that work with both PLINQ and Parallel.ForEach.
//000093:             With partitioningMethods
//000094:                 .Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))("Load Balance", Function(e) partitioner.Create(e, True)))
//000095:                 .Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))("Dynamic(1)", Function(e) ChunkPartitioner.Create(e, 1)))
//000096:                 .Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))("Dynamic(16)", Function(e) ChunkPartitioner.Create(e, 16)))
//000097:                 .Add(Tuple.Create(Of String,  _
//000098:                 Func(Of Integer(), Partitioner(Of Integer)))("Guided", Function(e) ChunkPartitioner.Create(e, Function(prev)
//000099:                                                                                                                   If prev <= 0 Then
//000100:                                                                                                                       Return If(e.Length <= 1, 1,
//000101:                                                                                                                                 CType(e.Length /
//000102:                                                                                                                                     (Environment.ProcessorCount * 3), Integer))
//000103:                                                                                                                   End If
//000104:                                                                                                                   Dim [next] = CType(prev / 2, Integer)
//000105:                                                                                                                   Return If([next] <= 0, prev, [next])
//000106:                                                                                                               End Function)))
//000107:                 .Add(Tuple.Create(Of String,  _
//000108:                                         Func(Of Integer(),  _
//000109:                                              Partitioner(Of Integer)))("Grow Exponential", Function(e) ChunkPartitioner.Create(e, Function(prev) If(prev <= 0, 1, prev * 2))))
//000110:                 .Add(Tuple.Create(Of String,  _
//000111:                                         Func(Of Integer(), Partitioner(Of Integer)))("Random", Function(e) ChunkPartitioner.Create(e, Function(prev) _localRandom.Value.[Next](e.Length))))
//000112: 
//000113:             End With
//000114: 
//000115:             ' Special-case some PLINQ-only hashing.
//000116:             If usingPLINQ Then
//000117:                 ' The actual enabling of these partitioning schemes is done later, as they can't 
//000118:                 ' be encoded in a partitioner but rather are based on what operators are used in the PLINQ query.
//000119:                 partitioningMethods.Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))(PartitioningStripe, Function(e) partitioner.Create(e)))
//000120:                 partitioningMethods.Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))(PartitioningHash, Function(e) partitioner.Create(e)))
//000121:             End If
//000122: 
//000123:             ' Dump the partitioners into the list view.
//000124:             For Each method In partitioningMethods
//000125:                 lvPartitioningMethods.Items.Add(New ListViewItem(method.Item1) With {.Tag = method})
//000126:             Next
//000127:             lvPartitioningMethods.Items(0).Selected = True
//000128:         End Sub
//000129: 
//000130:         ''' <summary>Visualize the partitioning.</summary>
//000131:         Private Sub btnVisualize_Click(ByVal sender As Object, ByVal e As EventArgs) Handles btnVisualize.Click
//000132:             Dim numProcs = tbCores.Value
//000133:             Dim width = pbPartitionedImage.Width
//000134:             Dim height = pbPartitionedImage.Height
//000135:             Dim useParallelFor = rbParallelFor.Checked
//000136:             Dim useParallelForEach = rbParallelForEach.Checked
//000137:             _workFactor = tbWorkFactor.Value
//000138: 
//000139:             ' If we're using Parallel.ForEach or PLINQ, ensure a partitioning scheme was selected and use it.
//000140:             Dim selectedMethod As Tuple(Of String, Func(Of Integer(), Partitioner(Of Integer))) = Nothing
//000141:             If Not useParallelFor Then
//000142:                 If lvPartitioningMethods.SelectedIndices.Count = 0 Then
//000143:                     Exit Sub
//000144:                 Else
//000145:                     selectedMethod = DirectCast(lvPartitioningMethods.SelectedItems(0).Tag, Tuple(Of String, Func(Of Integer(), Partitioner(Of Integer))))
//000146:                 End If
//000147:             End If
//000148: 
//000149:             ' Make sure a workload was selected and use it.
//000150:             If lvWorkloads.SelectedItems.Count = 0 Then
//000151:                 Exit Sub
//000152:             End If
//000153: 
//000154:             Dim selectedWorkload = DirectCast(lvWorkloads.SelectedItems(0).Tag, Tuple(Of String, Func(Of Integer, Integer, Integer)))
//000155: 
//000156:             ' Create a new Bitmap to store the rendered output
//000157:             Dim bmp = New Bitmap(width, height)
//000158: 
//000159:             ' Disable the start button and kick off the background work.
//000160:             btnVisualize.Enabled = False
//000161:             ' Assign each thread a unique id.
//000162:             ' Get faster access to the Bitmap's contents.
//000163:             ' Time the operation.
//000164:             ' Create the partitioner to be used.
//000165:             ' Run the work with Parallel.ForEach
//000166:             ' PLINQ.
//000167:             ' Run the work with PLINQ. If a special partitioning method was selected, use relevant query operators
//000168:             ' to get PLINQ to use that partitioning approach.
//000169:             ' Return the total time from the task
//000170:             ' When the work completes, run the following on the UI thread.
//000171: 
//000172:             Task.Factory.StartNew(Function()
//000173:                                       Dim nextId = -1
//000174:                                       Dim threadId = New ThreadLocal(Of Integer)(Function() Interlocked.Increment(nextId))
//000175:                                       Using fastBmp As New FastBitmap(bmp)
//000176:                                           Dim sw = Stopwatch.StartNew()
//000177:                                           If useParallelFor Then
//000178:                                               If fastBmp Is Nothing Then
//000179:                                                   MsgBox("FastBmp Disposed")
//000180:                                               End If
//000181:                                               Parallel.[For](0, height, New ParallelOptions(), Sub(i)
//000182:                                                                                                    Dim id = threadId.Value
//000183:                                                                                                    DoWork(selectedWorkload.Item2(height, i))
//000184: 
//000185:                                                                                                    For j = 0 To width - 1
//000186:                                                                                                        fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000187:                                                                                                    Next
//000188:                                                                                                End Sub)
//000189:                                           Else
//000190:                                               Dim partitioner = selectedMethod.Item2(Enumerable.Range(0, height).ToArray())
//000191:                                               If useParallelForEach Then
//000192:                                                   Parallel.ForEach(partitioner, New ParallelOptions(), Sub(i)
//000193:                                                                                                            Dim id = threadId.Value
//000194:                                                                                                            DoWork(selectedWorkload.Item2(height, i))
//000195:                                                                                                            For j = 0 To width - 1
//000196:                                                                                                                fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000197:                                                                                                            Next
//000198:                                                                                                        End Sub)
//000199:                                               Else
//000200:                                                   Dim source = partitioner.AsParallel().WithDegreeOfParallelism(numProcs)
//000201:                                                   If selectedMethod.Item1 = PartitioningStripe Then
//000202:                                                       source = source.TakeWhile(Function(elem) True)
//000203:                                                   ElseIf selectedMethod.Item1 = PartitioningHash Then
//000204:                                                       source = source.Join(Enumerable.Range(0, height).AsParallel(), Function(i) i, Function(i) i, Function(i, ignore) i)
//000205:                                                   End If
//000206:                                                   source.ForAll(Sub(i)
//000207:                                                                     Dim id = threadId.Value
//000208:                                                                     DoWork(selectedWorkload.Item2(height, i))
//000209:                                                                     For j = 0 To width - 1
//000210:                                                                         fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000211:                                                                     Next
//000212:                                                                 End Sub)
//000213:                                               End If
//000214:                                           End If
//000215:                                           Return sw.Elapsed
//000216:                                       End Using
//000217:                                   End Function).ContinueWith(Sub(t)
//000218:                                                                  ' Dispose of the old image (if there was one) and display the new one.
//000219:                                                                  Dim old = pbPartitionedImage.Image
//000220:                                                                  pbPartitionedImage.Image = bmp
//000221:                                                                  If old IsNot Nothing Then
//000222:                                                                      old.Dispose()
//000223:                                                                  End If
//000224: 
//000225:                                                                  ' Re-enable controls on the form and display the elapsed time.
//000226:                                                                  btnVisualize.Enabled = True
//000227:                                                                  lblTime.Text = "Time: " & t.Result.ToString()
//000228:                                                              End Sub, TaskScheduler.FromCurrentSynchronizationContext())
//000229:         End Sub
//000230: 
//000231:         ''' <summary>Does an amount of work relative to the amount requested.</summary>
//000232:         ''' <param name="workAmount">The amount of work to perform.</param>
//000233:         <MethodImpl(MethodImplOptions.NoOptimization Or MethodImplOptions.NoInlining)>
//000234:         Private Shared Function DoWork(ByVal workAmount As Integer) As Integer
//000235:             Try
//000236:                 Dim value = 1
//000237:                 For i = 0 To workAmount - 1
//000238:                     value = value * workAmount
//000239:                 Next i
//000240:                 Return value
//000241:             Catch
//000242:                 Return 0
//000243:             End Try
//000244:         End Function
//000245: 
//000246:         ''' <summary>Update relevant portions of the form when the API radio buttons are checked.</summary>
//000247:         ''' <param name="sender">The radio button.</param>
//000248:         ''' <param name="e">The event args.</param>
//000249:         Private Sub rbAPI_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles rbParallelForEach.CheckedChanged,
//000250:             rbPLINQ.CheckedChanged, rbParallelFor.CheckedChanged
//000251:             lvPartitioningMethods.Enabled = Not rbParallelFor.Checked
//000252:             lvPartitioningMethods.HideSelection = Not lvPartitioningMethods.Enabled
//000253: 
//000254:             ' Recreate partitioning methods every time a radio button is checked,
//000255:             ' as which API is selected determines which partitioning methods are available.
//000256:             InitializePartitioningMethods()
//000257:         End Sub
//000258: 
//000259:         Private Sub tbCores_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbCores.ValueChanged
//000260:             toolTip1.SetToolTip(tbCores, tbCores.Value.ToString())
//000261:             InitializeColorPalette()
//000262:             Dim worker As Integer
//000263:             Dim io As Integer
//000264:             ThreadPool.GetMinThreads(worker, io)
//000265:             ThreadPool.SetMinThreads(tbCores.Value, io)
//000266:         End Sub
//000267: 
//000268:         Private Sub tbWorkFactor_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbWorkFactor.ValueChanged
//000269:             toolTip1.SetToolTip(tbWorkFactor, tbWorkFactor.Value.ToString())
//000270:         End Sub
//000271:     End Class
//000272: End Namespace
    IL_0001:  newobj     instance void VisualizePartitioning.MainForm/_Closure$__1::.ctor()
    IL_0006:  stloc.0
//000056:             Dim random As New Random(8)
    IL_0007:  ldloc.0
    IL_0008:  ldc.i4.8
    IL_0009:  newobj     instance void [mscorlib]System.Random::.ctor(int32)
    IL_000e:  stfld      class [mscorlib]System.Random VisualizePartitioning.MainForm/_Closure$__1::$VB$Local_random
//000057:             ' Change seed value to change the palette used.
//000058:             _colors = (From i In Enumerable.Range(0, tbCores.Value)
    IL_0013:  ldarg.0
    IL_0014:  ldc.i4.0
    IL_0015:  ldarg.0
    IL_0016:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.TrackBar VisualizePartitioning.MainForm::get_tbCores()
    IL_001b:  callvirt   instance int32 [System.Windows.Forms]System.Windows.Forms.TrackBar::get_Value()
    IL_0020:  call       class [mscorlib]System.Collections.Generic.IEnumerable`1<int32> [System.Core]System.Linq.Enumerable::Range(int32,
                                                                                                                                    int32)
    IL_0025:  ldloc.0
    IL_0026:  dup
    IL_0027:  ldvirtftn  instance valuetype [System.Drawing]System.Drawing.Color VisualizePartitioning.MainForm/_Closure$__1::_Lambda$__2(int32)
    IL_002d:  newobj     instance void class [mscorlib]System.Func`2<int32,valuetype [System.Drawing]System.Drawing.Color>::.ctor(object,
                                                                                                                                  native int)
    IL_0032:  call       class [mscorlib]System.Collections.Generic.IEnumerable`1<!!1> [System.Core]System.Linq.Enumerable::Select<int32,valuetype [System.Drawing]System.Drawing.Color>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>,
                                                                                                                                                                                         class [mscorlib]System.Func`2<!!0,!!1>)
    IL_0037:  call       !!0[] [System.Core]System.Linq.Enumerable::ToArray<valuetype [System.Drawing]System.Drawing.Color>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>)
    IL_003c:  stfld      valuetype [System.Drawing]System.Drawing.Color[] VisualizePartitioning.MainForm::_colors
//000059:                 Select Color.FromArgb(random.[Next](128) + 127, random.[Next](128) + 127, random.[Next](128) + 127)).ToArray()
//000060:         End Sub
    IL_0041:  nop
    IL_0042:  ret
  } // end of method MainForm::InitializeColorPalette

  .method private instance void  InitializeWorkloads() cil managed
  {
    // Code size       265 (0x109)
    .maxstack  4
    .locals init ([0] class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.Tuple`2<string,class [mscorlib]System.Func`3<int32,int32,int32>>> workloads,
             [1] class [mscorlib]System.Tuple`2<string,class [mscorlib]System.Func`3<int32,int32,int32>> workload,
             [2] class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.Tuple`2<string,class [mscorlib]System.Func`3<int32,int32,int32>>> VB$t_ref$L0,
             [3] valuetype [mscorlib]System.Collections.Generic.List`1/Enumerator<class [mscorlib]System.Tuple`2<string,class [mscorlib]System.Func`3<int32,int32,int32>>> VB$t_struct$L0,
             [4] class [System.Windows.Forms]System.Windows.Forms.ListViewItem VB$t_ref$S1,
             [5] bool VB$CG$t_bool$S0)
//000061: 
//000062:         ''' <summary>Initializes the workloads list view.</summary>
//000063:         Private Sub InitializeWorkloads()
    IL_0000:  nop
//000064:             lvWorkloads.Items.Clear()
    IL_0001:  ldarg.0
    IL_0002:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ListView VisualizePartitioning.MainForm::lvWorkloads
    IL_0007:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.ListView/ListViewItemCollection [System.Windows.Forms]System.Windows.Forms.ListView::get_Items()
    IL_000c:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ListView/ListViewItemCollection::Clear()
    IL_0011:  nop
//000065:             Dim workloads = New List(Of Tuple(Of String, Func(Of Integer, Integer, Integer)))()
    IL_0012:  newobj     instance void class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.Tuple`2<string,class [mscorlib]System.Func`3<int32,int32,int32>>>::.ctor()
    IL_0017:  stloc.0
//000066:             ' NOTE: To add a new workload, simply add a new entry below with a name and corresponding function.
//000067:             With workloads
    IL_0018:  ldloc.0
    IL_0019:  stloc.2
//000068:                 .Add(Tuple.Create(Of String, Func(Of Integer, Integer, Integer))("Constant", Function(size, current) 1000 * _workFactor))
    IL_001a:  ldloc.2
    IL_001b:  ldstr      "Constant"
    IL_0020:  ldarg.0
    IL_0021:  dup
    IL_0022:  ldvirtftn  instance int32 VisualizePartitioning.MainForm::_Lambda$__3(int32,
                                                                                    int32)
    IL_0028:  newobj     instance void class [mscorlib]System.Func`3<int32,int32,int32>::.ctor(object,
                                                                                               native int)
    IL_002d:  call       class [mscorlib]System.Tuple`2<!!0,!!1> [mscorlib]System.Tuple::Create<string,class [mscorlib]System.Func`3<int32,int32,int32>>(!!0,
                                                                                                                                                         !!1)
    IL_0032:  callvirt   instance void class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.Tuple`2<string,class [mscorlib]System.Func`3<int32,int32,int32>>>::Add(!0)
    IL_0037:  nop
//000069:                 .Add(Tuple.Create(Of String, Func(Of Integer, Integer, Integer))("Increasing Linear", Function(size, current) 200 * current * _workFactor))
    IL_0038:  ldloc.2
    IL_0039:  ldstr      "Increasing Linear"
    IL_003e:  ldarg.0
    IL_003f:  dup
    IL_0040:  ldvirtftn  instance int32 VisualizePartitioning.MainForm::_Lambda$__4(int32,
                                                                                    int32)
    IL_0046:  newobj     instance void class [mscorlib]System.Func`3<int32,int32,int32>::.ctor(object,
                                                                                               native int)
    IL_004b:  call       class [mscorlib]System.Tuple`2<!!0,!!1> [mscorlib]System.Tuple::Create<string,class [mscorlib]System.Func`3<int32,int32,int32>>(!!0,
                                                                                                                                                         !!1)
    IL_0050:  callvirt   instance void class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.Tuple`2<string,class [mscorlib]System.Func`3<int32,int32,int32>>>::Add(!0)
    IL_0055:  nop
//000070:                 .Add(Tuple.Create(Of String, Func(Of Integer, Integer, Integer))("Decreasing Linear", Function(size, current) 200 * (size - current) * _workFactor))
    IL_0056:  ldloc.2
    IL_0057:  ldstr      "Decreasing Linear"
    IL_005c:  ldarg.0
    IL_005d:  dup
    IL_005e:  ldvirtftn  instance int32 VisualizePartitioning.MainForm::_Lambda$__5(int32,
                                                                                    int32)
    IL_0064:  newobj     instance void class [mscorlib]System.Func`3<int32,int32,int32>::.ctor(object,
                                                                                               native int)
    IL_0069:  call       class [mscorlib]System.Tuple`2<!!0,!!1> [mscorlib]System.Tuple::Create<string,class [mscorlib]System.Func`3<int32,int32,int32>>(!!0,
                                                                                                                                                         !!1)
    IL_006e:  callvirt   instance void class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.Tuple`2<string,class [mscorlib]System.Func`3<int32,int32,int32>>>::Add(!0)
    IL_0073:  nop
//000071:                 .Add(Tuple.Create(Of String, Func(Of Integer, Integer, Integer))("Random", Function(size, current) _localRandom.Value.[Next](100, 10000) * _workFactor))
    IL_0074:  ldloc.2
    IL_0075:  ldstr      "Random"
    IL_007a:  ldarg.0
    IL_007b:  dup
    IL_007c:  ldvirtftn  instance int32 VisualizePartitioning.MainForm::_Lambda$__6(int32,
                                                                                    int32)
    IL_0082:  newobj     instance void class [mscorlib]System.Func`3<int32,int32,int32>::.ctor(object,
                                                                                               native int)
    IL_0087:  call       class [mscorlib]System.Tuple`2<!!0,!!1> [mscorlib]System.Tuple::Create<string,class [mscorlib]System.Func`3<int32,int32,int32>>(!!0,
                                                                                                                                                         !!1)
    IL_008c:  callvirt   instance void class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.Tuple`2<string,class [mscorlib]System.Func`3<int32,int32,int32>>>::Add(!0)
    IL_0091:  nop
//000072:             End With
    IL_0092:  ldnull
    IL_0093:  stloc.2
//000073: 
//000074:             For Each workload In workloads
//000075:                 lvWorkloads.Items.Add(New ListViewItem(workload.Item1) With {.Tag = workload})
//000076:             Next
//000077:             lvWorkloads.Items(0).Selected = True
//000078:         End Sub
//000079: 
//000080:         ''' <summary>Initializes the partitioning methods list view.</summary>
//000081:         Private Sub InitializePartitioningMethods()
//000082:             lvPartitioningMethods.Items.Clear()
//000083:             Dim usingPLINQ As Boolean = rbPLINQ.Checked
//000084:             Dim partitioningMethods = New List(Of Tuple(Of String, Func(Of Integer(), Partitioner(Of Integer))))()
//000085: 
//000086:             ' Static partitioning using the Partitioner.Create overload requires static partitioner support,
//000087:             ' which Parallel.ForEach does not provide.
//000088:             If usingPLINQ Then
//000089:                 partitioningMethods.Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))("Static", Function(e) partitioner.Create(e, False)))
//000090:             End If
//000091: 
//000092:             ' Add a bunch of partitioning approaches that work with both PLINQ and Parallel.ForEach.
//000093:             With partitioningMethods
//000094:                 .Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))("Load Balance", Function(e) partitioner.Create(e, True)))
//000095:                 .Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))("Dynamic(1)", Function(e) ChunkPartitioner.Create(e, 1)))
//000096:                 .Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))("Dynamic(16)", Function(e) ChunkPartitioner.Create(e, 16)))
//000097:                 .Add(Tuple.Create(Of String,  _
//000098:                 Func(Of Integer(), Partitioner(Of Integer)))("Guided", Function(e) ChunkPartitioner.Create(e, Function(prev)
//000099:                                                                                                                   If prev <= 0 Then
//000100:                                                                                                                       Return If(e.Length <= 1, 1,
//000101:                                                                                                                                 CType(e.Length /
//000102:                                                                                                                                     (Environment.ProcessorCount * 3), Integer))
//000103:                                                                                                                   End If
//000104:                                                                                                                   Dim [next] = CType(prev / 2, Integer)
//000105:                                                                                                                   Return If([next] <= 0, prev, [next])
//000106:                                                                                                               End Function)))
//000107:                 .Add(Tuple.Create(Of String,  _
//000108:                                         Func(Of Integer(),  _
//000109:                                              Partitioner(Of Integer)))("Grow Exponential", Function(e) ChunkPartitioner.Create(e, Function(prev) If(prev <= 0, 1, prev * 2))))
//000110:                 .Add(Tuple.Create(Of String,  _
//000111:                                         Func(Of Integer(), Partitioner(Of Integer)))("Random", Function(e) ChunkPartitioner.Create(e, Function(prev) _localRandom.Value.[Next](e.Length))))
//000112: 
//000113:             End With
//000114: 
//000115:             ' Special-case some PLINQ-only hashing.
//000116:             If usingPLINQ Then
//000117:                 ' The actual enabling of these partitioning schemes is done later, as they can't 
//000118:                 ' be encoded in a partitioner but rather are based on what operators are used in the PLINQ query.
//000119:                 partitioningMethods.Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))(PartitioningStripe, Function(e) partitioner.Create(e)))
//000120:                 partitioningMethods.Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))(PartitioningHash, Function(e) partitioner.Create(e)))
//000121:             End If
//000122: 
//000123:             ' Dump the partitioners into the list view.
//000124:             For Each method In partitioningMethods
//000125:                 lvPartitioningMethods.Items.Add(New ListViewItem(method.Item1) With {.Tag = method})
//000126:             Next
//000127:             lvPartitioningMethods.Items(0).Selected = True
//000128:         End Sub
//000129: 
//000130:         ''' <summary>Visualize the partitioning.</summary>
//000131:         Private Sub btnVisualize_Click(ByVal sender As Object, ByVal e As EventArgs) Handles btnVisualize.Click
//000132:             Dim numProcs = tbCores.Value
//000133:             Dim width = pbPartitionedImage.Width
//000134:             Dim height = pbPartitionedImage.Height
//000135:             Dim useParallelFor = rbParallelFor.Checked
//000136:             Dim useParallelForEach = rbParallelForEach.Checked
//000137:             _workFactor = tbWorkFactor.Value
//000138: 
//000139:             ' If we're using Parallel.ForEach or PLINQ, ensure a partitioning scheme was selected and use it.
//000140:             Dim selectedMethod As Tuple(Of String, Func(Of Integer(), Partitioner(Of Integer))) = Nothing
//000141:             If Not useParallelFor Then
//000142:                 If lvPartitioningMethods.SelectedIndices.Count = 0 Then
//000143:                     Exit Sub
//000144:                 Else
//000145:                     selectedMethod = DirectCast(lvPartitioningMethods.SelectedItems(0).Tag, Tuple(Of String, Func(Of Integer(), Partitioner(Of Integer))))
//000146:                 End If
//000147:             End If
//000148: 
//000149:             ' Make sure a workload was selected and use it.
//000150:             If lvWorkloads.SelectedItems.Count = 0 Then
//000151:                 Exit Sub
//000152:             End If
//000153: 
//000154:             Dim selectedWorkload = DirectCast(lvWorkloads.SelectedItems(0).Tag, Tuple(Of String, Func(Of Integer, Integer, Integer)))
//000155: 
//000156:             ' Create a new Bitmap to store the rendered output
//000157:             Dim bmp = New Bitmap(width, height)
//000158: 
//000159:             ' Disable the start button and kick off the background work.
//000160:             btnVisualize.Enabled = False
//000161:             ' Assign each thread a unique id.
//000162:             ' Get faster access to the Bitmap's contents.
//000163:             ' Time the operation.
//000164:             ' Create the partitioner to be used.
//000165:             ' Run the work with Parallel.ForEach
//000166:             ' PLINQ.
//000167:             ' Run the work with PLINQ. If a special partitioning method was selected, use relevant query operators
//000168:             ' to get PLINQ to use that partitioning approach.
//000169:             ' Return the total time from the task
//000170:             ' When the work completes, run the following on the UI thread.
//000171: 
//000172:             Task.Factory.StartNew(Function()
//000173:                                       Dim nextId = -1
//000174:                                       Dim threadId = New ThreadLocal(Of Integer)(Function() Interlocked.Increment(nextId))
//000175:                                       Using fastBmp As New FastBitmap(bmp)
//000176:                                           Dim sw = Stopwatch.StartNew()
//000177:                                           If useParallelFor Then
//000178:                                               If fastBmp Is Nothing Then
//000179:                                                   MsgBox("FastBmp Disposed")
//000180:                                               End If
//000181:                                               Parallel.[For](0, height, New ParallelOptions(), Sub(i)
//000182:                                                                                                    Dim id = threadId.Value
//000183:                                                                                                    DoWork(selectedWorkload.Item2(height, i))
//000184: 
//000185:                                                                                                    For j = 0 To width - 1
//000186:                                                                                                        fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000187:                                                                                                    Next
//000188:                                                                                                End Sub)
//000189:                                           Else
//000190:                                               Dim partitioner = selectedMethod.Item2(Enumerable.Range(0, height).ToArray())
//000191:                                               If useParallelForEach Then
//000192:                                                   Parallel.ForEach(partitioner, New ParallelOptions(), Sub(i)
//000193:                                                                                                            Dim id = threadId.Value
//000194:                                                                                                            DoWork(selectedWorkload.Item2(height, i))
//000195:                                                                                                            For j = 0 To width - 1
//000196:                                                                                                                fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000197:                                                                                                            Next
//000198:                                                                                                        End Sub)
//000199:                                               Else
//000200:                                                   Dim source = partitioner.AsParallel().WithDegreeOfParallelism(numProcs)
//000201:                                                   If selectedMethod.Item1 = PartitioningStripe Then
//000202:                                                       source = source.TakeWhile(Function(elem) True)
//000203:                                                   ElseIf selectedMethod.Item1 = PartitioningHash Then
//000204:                                                       source = source.Join(Enumerable.Range(0, height).AsParallel(), Function(i) i, Function(i) i, Function(i, ignore) i)
//000205:                                                   End If
//000206:                                                   source.ForAll(Sub(i)
//000207:                                                                     Dim id = threadId.Value
//000208:                                                                     DoWork(selectedWorkload.Item2(height, i))
//000209:                                                                     For j = 0 To width - 1
//000210:                                                                         fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000211:                                                                     Next
//000212:                                                                 End Sub)
//000213:                                               End If
//000214:                                           End If
//000215:                                           Return sw.Elapsed
//000216:                                       End Using
//000217:                                   End Function).ContinueWith(Sub(t)
//000218:                                                                  ' Dispose of the old image (if there was one) and display the new one.
//000219:                                                                  Dim old = pbPartitionedImage.Image
//000220:                                                                  pbPartitionedImage.Image = bmp
//000221:                                                                  If old IsNot Nothing Then
//000222:                                                                      old.Dispose()
//000223:                                                                  End If
//000224: 
//000225:                                                                  ' Re-enable controls on the form and display the elapsed time.
//000226:                                                                  btnVisualize.Enabled = True
//000227:                                                                  lblTime.Text = "Time: " & t.Result.ToString()
//000228:                                                              End Sub, TaskScheduler.FromCurrentSynchronizationContext())
//000229:         End Sub
//000230: 
//000231:         ''' <summary>Does an amount of work relative to the amount requested.</summary>
//000232:         ''' <param name="workAmount">The amount of work to perform.</param>
//000233:         <MethodImpl(MethodImplOptions.NoOptimization Or MethodImplOptions.NoInlining)>
//000234:         Private Shared Function DoWork(ByVal workAmount As Integer) As Integer
//000235:             Try
//000236:                 Dim value = 1
//000237:                 For i = 0 To workAmount - 1
//000238:                     value = value * workAmount
//000239:                 Next i
//000240:                 Return value
//000241:             Catch
//000242:                 Return 0
//000243:             End Try
//000244:         End Function
//000245: 
//000246:         ''' <summary>Update relevant portions of the form when the API radio buttons are checked.</summary>
//000247:         ''' <param name="sender">The radio button.</param>
//000248:         ''' <param name="e">The event args.</param>
//000249:         Private Sub rbAPI_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles rbParallelForEach.CheckedChanged,
//000250:             rbPLINQ.CheckedChanged, rbParallelFor.CheckedChanged
//000251:             lvPartitioningMethods.Enabled = Not rbParallelFor.Checked
//000252:             lvPartitioningMethods.HideSelection = Not lvPartitioningMethods.Enabled
//000253: 
//000254:             ' Recreate partitioning methods every time a radio button is checked,
//000255:             ' as which API is selected determines which partitioning methods are available.
//000256:             InitializePartitioningMethods()
//000257:         End Sub
//000258: 
//000259:         Private Sub tbCores_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbCores.ValueChanged
//000260:             toolTip1.SetToolTip(tbCores, tbCores.Value.ToString())
//000261:             InitializeColorPalette()
//000262:             Dim worker As Integer
//000263:             Dim io As Integer
//000264:             ThreadPool.GetMinThreads(worker, io)
//000265:             ThreadPool.SetMinThreads(tbCores.Value, io)
//000266:         End Sub
//000267: 
//000268:         Private Sub tbWorkFactor_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbWorkFactor.ValueChanged
//000269:             toolTip1.SetToolTip(tbWorkFactor, tbWorkFactor.Value.ToString())
//000270:         End Sub
//000271:     End Class
//000272: End Namespace
    IL_0094:  nop
//000074:             For Each workload In workloads
    .try
    {
      IL_0095:  ldloc.0
      IL_0096:  callvirt   instance valuetype [mscorlib]System.Collections.Generic.List`1/Enumerator<!0> class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.Tuple`2<string,class [mscorlib]System.Func`3<int32,int32,int32>>>::GetEnumerator()
      IL_009b:  stloc.3
      IL_009c:  br.s       IL_00d0

//000075:                 lvWorkloads.Items.Add(New ListViewItem(workload.Item1) With {.Tag = workload})
//000076:             Next
//000077:             lvWorkloads.Items(0).Selected = True
//000078:         End Sub
//000079: 
//000080:         ''' <summary>Initializes the partitioning methods list view.</summary>
//000081:         Private Sub InitializePartitioningMethods()
//000082:             lvPartitioningMethods.Items.Clear()
//000083:             Dim usingPLINQ As Boolean = rbPLINQ.Checked
//000084:             Dim partitioningMethods = New List(Of Tuple(Of String, Func(Of Integer(), Partitioner(Of Integer))))()
//000085: 
//000086:             ' Static partitioning using the Partitioner.Create overload requires static partitioner support,
//000087:             ' which Parallel.ForEach does not provide.
//000088:             If usingPLINQ Then
//000089:                 partitioningMethods.Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))("Static", Function(e) partitioner.Create(e, False)))
//000090:             End If
//000091: 
//000092:             ' Add a bunch of partitioning approaches that work with both PLINQ and Parallel.ForEach.
//000093:             With partitioningMethods
//000094:                 .Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))("Load Balance", Function(e) partitioner.Create(e, True)))
//000095:                 .Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))("Dynamic(1)", Function(e) ChunkPartitioner.Create(e, 1)))
//000096:                 .Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))("Dynamic(16)", Function(e) ChunkPartitioner.Create(e, 16)))
//000097:                 .Add(Tuple.Create(Of String,  _
//000098:                 Func(Of Integer(), Partitioner(Of Integer)))("Guided", Function(e) ChunkPartitioner.Create(e, Function(prev)
//000099:                                                                                                                   If prev <= 0 Then
//000100:                                                                                                                       Return If(e.Length <= 1, 1,
//000101:                                                                                                                                 CType(e.Length /
//000102:                                                                                                                                     (Environment.ProcessorCount * 3), Integer))
//000103:                                                                                                                   End If
//000104:                                                                                                                   Dim [next] = CType(prev / 2, Integer)
//000105:                                                                                                                   Return If([next] <= 0, prev, [next])
//000106:                                                                                                               End Function)))
//000107:                 .Add(Tuple.Create(Of String,  _
//000108:                                         Func(Of Integer(),  _
//000109:                                              Partitioner(Of Integer)))("Grow Exponential", Function(e) ChunkPartitioner.Create(e, Function(prev) If(prev <= 0, 1, prev * 2))))
//000110:                 .Add(Tuple.Create(Of String,  _
//000111:                                         Func(Of Integer(), Partitioner(Of Integer)))("Random", Function(e) ChunkPartitioner.Create(e, Function(prev) _localRandom.Value.[Next](e.Length))))
//000112: 
//000113:             End With
//000114: 
//000115:             ' Special-case some PLINQ-only hashing.
//000116:             If usingPLINQ Then
//000117:                 ' The actual enabling of these partitioning schemes is done later, as they can't 
//000118:                 ' be encoded in a partitioner but rather are based on what operators are used in the PLINQ query.
//000119:                 partitioningMethods.Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))(PartitioningStripe, Function(e) partitioner.Create(e)))
//000120:                 partitioningMethods.Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))(PartitioningHash, Function(e) partitioner.Create(e)))
//000121:             End If
//000122: 
//000123:             ' Dump the partitioners into the list view.
//000124:             For Each method In partitioningMethods
//000125:                 lvPartitioningMethods.Items.Add(New ListViewItem(method.Item1) With {.Tag = method})
//000126:             Next
//000127:             lvPartitioningMethods.Items(0).Selected = True
//000128:         End Sub
//000129: 
//000130:         ''' <summary>Visualize the partitioning.</summary>
//000131:         Private Sub btnVisualize_Click(ByVal sender As Object, ByVal e As EventArgs) Handles btnVisualize.Click
//000132:             Dim numProcs = tbCores.Value
//000133:             Dim width = pbPartitionedImage.Width
//000134:             Dim height = pbPartitionedImage.Height
//000135:             Dim useParallelFor = rbParallelFor.Checked
//000136:             Dim useParallelForEach = rbParallelForEach.Checked
//000137:             _workFactor = tbWorkFactor.Value
//000138: 
//000139:             ' If we're using Parallel.ForEach or PLINQ, ensure a partitioning scheme was selected and use it.
//000140:             Dim selectedMethod As Tuple(Of String, Func(Of Integer(), Partitioner(Of Integer))) = Nothing
//000141:             If Not useParallelFor Then
//000142:                 If lvPartitioningMethods.SelectedIndices.Count = 0 Then
//000143:                     Exit Sub
//000144:                 Else
//000145:                     selectedMethod = DirectCast(lvPartitioningMethods.SelectedItems(0).Tag, Tuple(Of String, Func(Of Integer(), Partitioner(Of Integer))))
//000146:                 End If
//000147:             End If
//000148: 
//000149:             ' Make sure a workload was selected and use it.
//000150:             If lvWorkloads.SelectedItems.Count = 0 Then
//000151:                 Exit Sub
//000152:             End If
//000153: 
//000154:             Dim selectedWorkload = DirectCast(lvWorkloads.SelectedItems(0).Tag, Tuple(Of String, Func(Of Integer, Integer, Integer)))
//000155: 
//000156:             ' Create a new Bitmap to store the rendered output
//000157:             Dim bmp = New Bitmap(width, height)
//000158: 
//000159:             ' Disable the start button and kick off the background work.
//000160:             btnVisualize.Enabled = False
//000161:             ' Assign each thread a unique id.
//000162:             ' Get faster access to the Bitmap's contents.
//000163:             ' Time the operation.
//000164:             ' Create the partitioner to be used.
//000165:             ' Run the work with Parallel.ForEach
//000166:             ' PLINQ.
//000167:             ' Run the work with PLINQ. If a special partitioning method was selected, use relevant query operators
//000168:             ' to get PLINQ to use that partitioning approach.
//000169:             ' Return the total time from the task
//000170:             ' When the work completes, run the following on the UI thread.
//000171: 
//000172:             Task.Factory.StartNew(Function()
//000173:                                       Dim nextId = -1
//000174:                                       Dim threadId = New ThreadLocal(Of Integer)(Function() Interlocked.Increment(nextId))
//000175:                                       Using fastBmp As New FastBitmap(bmp)
//000176:                                           Dim sw = Stopwatch.StartNew()
//000177:                                           If useParallelFor Then
//000178:                                               If fastBmp Is Nothing Then
//000179:                                                   MsgBox("FastBmp Disposed")
//000180:                                               End If
//000181:                                               Parallel.[For](0, height, New ParallelOptions(), Sub(i)
//000182:                                                                                                    Dim id = threadId.Value
//000183:                                                                                                    DoWork(selectedWorkload.Item2(height, i))
//000184: 
//000185:                                                                                                    For j = 0 To width - 1
//000186:                                                                                                        fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000187:                                                                                                    Next
//000188:                                                                                                End Sub)
//000189:                                           Else
//000190:                                               Dim partitioner = selectedMethod.Item2(Enumerable.Range(0, height).ToArray())
//000191:                                               If useParallelForEach Then
//000192:                                                   Parallel.ForEach(partitioner, New ParallelOptions(), Sub(i)
//000193:                                                                                                            Dim id = threadId.Value
//000194:                                                                                                            DoWork(selectedWorkload.Item2(height, i))
//000195:                                                                                                            For j = 0 To width - 1
//000196:                                                                                                                fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000197:                                                                                                            Next
//000198:                                                                                                        End Sub)
//000199:                                               Else
//000200:                                                   Dim source = partitioner.AsParallel().WithDegreeOfParallelism(numProcs)
//000201:                                                   If selectedMethod.Item1 = PartitioningStripe Then
//000202:                                                       source = source.TakeWhile(Function(elem) True)
//000203:                                                   ElseIf selectedMethod.Item1 = PartitioningHash Then
//000204:                                                       source = source.Join(Enumerable.Range(0, height).AsParallel(), Function(i) i, Function(i) i, Function(i, ignore) i)
//000205:                                                   End If
//000206:                                                   source.ForAll(Sub(i)
//000207:                                                                     Dim id = threadId.Value
//000208:                                                                     DoWork(selectedWorkload.Item2(height, i))
//000209:                                                                     For j = 0 To width - 1
//000210:                                                                         fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000211:                                                                     Next
//000212:                                                                 End Sub)
//000213:                                               End If
//000214:                                           End If
//000215:                                           Return sw.Elapsed
//000216:                                       End Using
//000217:                                   End Function).ContinueWith(Sub(t)
//000218:                                                                  ' Dispose of the old image (if there was one) and display the new one.
//000219:                                                                  Dim old = pbPartitionedImage.Image
//000220:                                                                  pbPartitionedImage.Image = bmp
//000221:                                                                  If old IsNot Nothing Then
//000222:                                                                      old.Dispose()
//000223:                                                                  End If
//000224: 
//000225:                                                                  ' Re-enable controls on the form and display the elapsed time.
//000226:                                                                  btnVisualize.Enabled = True
//000227:                                                                  lblTime.Text = "Time: " & t.Result.ToString()
//000228:                                                              End Sub, TaskScheduler.FromCurrentSynchronizationContext())
//000229:         End Sub
//000230: 
//000231:         ''' <summary>Does an amount of work relative to the amount requested.</summary>
//000232:         ''' <param name="workAmount">The amount of work to perform.</param>
//000233:         <MethodImpl(MethodImplOptions.NoOptimization Or MethodImplOptions.NoInlining)>
//000234:         Private Shared Function DoWork(ByVal workAmount As Integer) As Integer
//000235:             Try
//000236:                 Dim value = 1
//000237:                 For i = 0 To workAmount - 1
//000238:                     value = value * workAmount
//000239:                 Next i
//000240:                 Return value
//000241:             Catch
//000242:                 Return 0
//000243:             End Try
//000244:         End Function
//000245: 
//000246:         ''' <summary>Update relevant portions of the form when the API radio buttons are checked.</summary>
//000247:         ''' <param name="sender">The radio button.</param>
//000248:         ''' <param name="e">The event args.</param>
//000249:         Private Sub rbAPI_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles rbParallelForEach.CheckedChanged,
//000250:             rbPLINQ.CheckedChanged, rbParallelFor.CheckedChanged
//000251:             lvPartitioningMethods.Enabled = Not rbParallelFor.Checked
//000252:             lvPartitioningMethods.HideSelection = Not lvPartitioningMethods.Enabled
//000253: 
//000254:             ' Recreate partitioning methods every time a radio button is checked,
//000255:             ' as which API is selected determines which partitioning methods are available.
//000256:             InitializePartitioningMethods()
//000257:         End Sub
//000258: 
//000259:         Private Sub tbCores_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbCores.ValueChanged
//000260:             toolTip1.SetToolTip(tbCores, tbCores.Value.ToString())
//000261:             InitializeColorPalette()
//000262:             Dim worker As Integer
//000263:             Dim io As Integer
//000264:             ThreadPool.GetMinThreads(worker, io)
//000265:             ThreadPool.SetMinThreads(tbCores.Value, io)
//000266:         End Sub
//000267: 
//000268:         Private Sub tbWorkFactor_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbWorkFactor.ValueChanged
//000269:             toolTip1.SetToolTip(tbWorkFactor, tbWorkFactor.Value.ToString())
//000270:         End Sub
//000271:     End Class
//000272: End Namespace
      IL_009e:  ldloca.s   VB$t_struct$L0
      IL_00a0:  call       instance !0 valuetype [mscorlib]System.Collections.Generic.List`1/Enumerator<class [mscorlib]System.Tuple`2<string,class [mscorlib]System.Func`3<int32,int32,int32>>>::get_Current()
      IL_00a5:  stloc.1
//000075:                 lvWorkloads.Items.Add(New ListViewItem(workload.Item1) With {.Tag = workload})
      IL_00a6:  ldarg.0
      IL_00a7:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ListView VisualizePartitioning.MainForm::lvWorkloads
      IL_00ac:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.ListView/ListViewItemCollection [System.Windows.Forms]System.Windows.Forms.ListView::get_Items()
      IL_00b1:  ldloc.1
      IL_00b2:  callvirt   instance !0 class [mscorlib]System.Tuple`2<string,class [mscorlib]System.Func`3<int32,int32,int32>>::get_Item1()
      IL_00b7:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.ListViewItem::.ctor(string)
      IL_00bc:  stloc.s    VB$t_ref$S1
      IL_00be:  ldloc.s    VB$t_ref$S1
      IL_00c0:  ldloc.1
      IL_00c1:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ListViewItem::set_Tag(object)
      IL_00c6:  nop
      IL_00c7:  ldloc.s    VB$t_ref$S1
      IL_00c9:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.ListViewItem [System.Windows.Forms]System.Windows.Forms.ListView/ListViewItemCollection::Add(class [System.Windows.Forms]System.Windows.Forms.ListViewItem)
      IL_00ce:  pop
//000076:             Next
      IL_00cf:  nop
//000077:             lvWorkloads.Items(0).Selected = True
//000078:         End Sub
//000079: 
//000080:         ''' <summary>Initializes the partitioning methods list view.</summary>
//000081:         Private Sub InitializePartitioningMethods()
//000082:             lvPartitioningMethods.Items.Clear()
//000083:             Dim usingPLINQ As Boolean = rbPLINQ.Checked
//000084:             Dim partitioningMethods = New List(Of Tuple(Of String, Func(Of Integer(), Partitioner(Of Integer))))()
//000085: 
//000086:             ' Static partitioning using the Partitioner.Create overload requires static partitioner support,
//000087:             ' which Parallel.ForEach does not provide.
//000088:             If usingPLINQ Then
//000089:                 partitioningMethods.Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))("Static", Function(e) partitioner.Create(e, False)))
//000090:             End If
//000091: 
//000092:             ' Add a bunch of partitioning approaches that work with both PLINQ and Parallel.ForEach.
//000093:             With partitioningMethods
//000094:                 .Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))("Load Balance", Function(e) partitioner.Create(e, True)))
//000095:                 .Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))("Dynamic(1)", Function(e) ChunkPartitioner.Create(e, 1)))
//000096:                 .Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))("Dynamic(16)", Function(e) ChunkPartitioner.Create(e, 16)))
//000097:                 .Add(Tuple.Create(Of String,  _
//000098:                 Func(Of Integer(), Partitioner(Of Integer)))("Guided", Function(e) ChunkPartitioner.Create(e, Function(prev)
//000099:                                                                                                                   If prev <= 0 Then
//000100:                                                                                                                       Return If(e.Length <= 1, 1,
//000101:                                                                                                                                 CType(e.Length /
//000102:                                                                                                                                     (Environment.ProcessorCount * 3), Integer))
//000103:                                                                                                                   End If
//000104:                                                                                                                   Dim [next] = CType(prev / 2, Integer)
//000105:                                                                                                                   Return If([next] <= 0, prev, [next])
//000106:                                                                                                               End Function)))
//000107:                 .Add(Tuple.Create(Of String,  _
//000108:                                         Func(Of Integer(),  _
//000109:                                              Partitioner(Of Integer)))("Grow Exponential", Function(e) ChunkPartitioner.Create(e, Function(prev) If(prev <= 0, 1, prev * 2))))
//000110:                 .Add(Tuple.Create(Of String,  _
//000111:                                         Func(Of Integer(), Partitioner(Of Integer)))("Random", Function(e) ChunkPartitioner.Create(e, Function(prev) _localRandom.Value.[Next](e.Length))))
//000112: 
//000113:             End With
//000114: 
//000115:             ' Special-case some PLINQ-only hashing.
//000116:             If usingPLINQ Then
//000117:                 ' The actual enabling of these partitioning schemes is done later, as they can't 
//000118:                 ' be encoded in a partitioner but rather are based on what operators are used in the PLINQ query.
//000119:                 partitioningMethods.Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))(PartitioningStripe, Function(e) partitioner.Create(e)))
//000120:                 partitioningMethods.Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))(PartitioningHash, Function(e) partitioner.Create(e)))
//000121:             End If
//000122: 
//000123:             ' Dump the partitioners into the list view.
//000124:             For Each method In partitioningMethods
//000125:                 lvPartitioningMethods.Items.Add(New ListViewItem(method.Item1) With {.Tag = method})
//000126:             Next
//000127:             lvPartitioningMethods.Items(0).Selected = True
//000128:         End Sub
//000129: 
//000130:         ''' <summary>Visualize the partitioning.</summary>
//000131:         Private Sub btnVisualize_Click(ByVal sender As Object, ByVal e As EventArgs) Handles btnVisualize.Click
//000132:             Dim numProcs = tbCores.Value
//000133:             Dim width = pbPartitionedImage.Width
//000134:             Dim height = pbPartitionedImage.Height
//000135:             Dim useParallelFor = rbParallelFor.Checked
//000136:             Dim useParallelForEach = rbParallelForEach.Checked
//000137:             _workFactor = tbWorkFactor.Value
//000138: 
//000139:             ' If we're using Parallel.ForEach or PLINQ, ensure a partitioning scheme was selected and use it.
//000140:             Dim selectedMethod As Tuple(Of String, Func(Of Integer(), Partitioner(Of Integer))) = Nothing
//000141:             If Not useParallelFor Then
//000142:                 If lvPartitioningMethods.SelectedIndices.Count = 0 Then
//000143:                     Exit Sub
//000144:                 Else
//000145:                     selectedMethod = DirectCast(lvPartitioningMethods.SelectedItems(0).Tag, Tuple(Of String, Func(Of Integer(), Partitioner(Of Integer))))
//000146:                 End If
//000147:             End If
//000148: 
//000149:             ' Make sure a workload was selected and use it.
//000150:             If lvWorkloads.SelectedItems.Count = 0 Then
//000151:                 Exit Sub
//000152:             End If
//000153: 
//000154:             Dim selectedWorkload = DirectCast(lvWorkloads.SelectedItems(0).Tag, Tuple(Of String, Func(Of Integer, Integer, Integer)))
//000155: 
//000156:             ' Create a new Bitmap to store the rendered output
//000157:             Dim bmp = New Bitmap(width, height)
//000158: 
//000159:             ' Disable the start button and kick off the background work.
//000160:             btnVisualize.Enabled = False
//000161:             ' Assign each thread a unique id.
//000162:             ' Get faster access to the Bitmap's contents.
//000163:             ' Time the operation.
//000164:             ' Create the partitioner to be used.
//000165:             ' Run the work with Parallel.ForEach
//000166:             ' PLINQ.
//000167:             ' Run the work with PLINQ. If a special partitioning method was selected, use relevant query operators
//000168:             ' to get PLINQ to use that partitioning approach.
//000169:             ' Return the total time from the task
//000170:             ' When the work completes, run the following on the UI thread.
//000171: 
//000172:             Task.Factory.StartNew(Function()
//000173:                                       Dim nextId = -1
//000174:                                       Dim threadId = New ThreadLocal(Of Integer)(Function() Interlocked.Increment(nextId))
//000175:                                       Using fastBmp As New FastBitmap(bmp)
//000176:                                           Dim sw = Stopwatch.StartNew()
//000177:                                           If useParallelFor Then
//000178:                                               If fastBmp Is Nothing Then
//000179:                                                   MsgBox("FastBmp Disposed")
//000180:                                               End If
//000181:                                               Parallel.[For](0, height, New ParallelOptions(), Sub(i)
//000182:                                                                                                    Dim id = threadId.Value
//000183:                                                                                                    DoWork(selectedWorkload.Item2(height, i))
//000184: 
//000185:                                                                                                    For j = 0 To width - 1
//000186:                                                                                                        fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000187:                                                                                                    Next
//000188:                                                                                                End Sub)
//000189:                                           Else
//000190:                                               Dim partitioner = selectedMethod.Item2(Enumerable.Range(0, height).ToArray())
//000191:                                               If useParallelForEach Then
//000192:                                                   Parallel.ForEach(partitioner, New ParallelOptions(), Sub(i)
//000193:                                                                                                            Dim id = threadId.Value
//000194:                                                                                                            DoWork(selectedWorkload.Item2(height, i))
//000195:                                                                                                            For j = 0 To width - 1
//000196:                                                                                                                fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000197:                                                                                                            Next
//000198:                                                                                                        End Sub)
//000199:                                               Else
//000200:                                                   Dim source = partitioner.AsParallel().WithDegreeOfParallelism(numProcs)
//000201:                                                   If selectedMethod.Item1 = PartitioningStripe Then
//000202:                                                       source = source.TakeWhile(Function(elem) True)
//000203:                                                   ElseIf selectedMethod.Item1 = PartitioningHash Then
//000204:                                                       source = source.Join(Enumerable.Range(0, height).AsParallel(), Function(i) i, Function(i) i, Function(i, ignore) i)
//000205:                                                   End If
//000206:                                                   source.ForAll(Sub(i)
//000207:                                                                     Dim id = threadId.Value
//000208:                                                                     DoWork(selectedWorkload.Item2(height, i))
//000209:                                                                     For j = 0 To width - 1
//000210:                                                                         fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000211:                                                                     Next
//000212:                                                                 End Sub)
//000213:                                               End If
//000214:                                           End If
//000215:                                           Return sw.Elapsed
//000216:                                       End Using
//000217:                                   End Function).ContinueWith(Sub(t)
//000218:                                                                  ' Dispose of the old image (if there was one) and display the new one.
//000219:                                                                  Dim old = pbPartitionedImage.Image
//000220:                                                                  pbPartitionedImage.Image = bmp
//000221:                                                                  If old IsNot Nothing Then
//000222:                                                                      old.Dispose()
//000223:                                                                  End If
//000224: 
//000225:                                                                  ' Re-enable controls on the form and display the elapsed time.
//000226:                                                                  btnVisualize.Enabled = True
//000227:                                                                  lblTime.Text = "Time: " & t.Result.ToString()
//000228:                                                              End Sub, TaskScheduler.FromCurrentSynchronizationContext())
//000229:         End Sub
//000230: 
//000231:         ''' <summary>Does an amount of work relative to the amount requested.</summary>
//000232:         ''' <param name="workAmount">The amount of work to perform.</param>
//000233:         <MethodImpl(MethodImplOptions.NoOptimization Or MethodImplOptions.NoInlining)>
//000234:         Private Shared Function DoWork(ByVal workAmount As Integer) As Integer
//000235:             Try
//000236:                 Dim value = 1
//000237:                 For i = 0 To workAmount - 1
//000238:                     value = value * workAmount
//000239:                 Next i
//000240:                 Return value
//000241:             Catch
//000242:                 Return 0
//000243:             End Try
//000244:         End Function
//000245: 
//000246:         ''' <summary>Update relevant portions of the form when the API radio buttons are checked.</summary>
//000247:         ''' <param name="sender">The radio button.</param>
//000248:         ''' <param name="e">The event args.</param>
//000249:         Private Sub rbAPI_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles rbParallelForEach.CheckedChanged,
//000250:             rbPLINQ.CheckedChanged, rbParallelFor.CheckedChanged
//000251:             lvPartitioningMethods.Enabled = Not rbParallelFor.Checked
//000252:             lvPartitioningMethods.HideSelection = Not lvPartitioningMethods.Enabled
//000253: 
//000254:             ' Recreate partitioning methods every time a radio button is checked,
//000255:             ' as which API is selected determines which partitioning methods are available.
//000256:             InitializePartitioningMethods()
//000257:         End Sub
//000258: 
//000259:         Private Sub tbCores_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbCores.ValueChanged
//000260:             toolTip1.SetToolTip(tbCores, tbCores.Value.ToString())
//000261:             InitializeColorPalette()
//000262:             Dim worker As Integer
//000263:             Dim io As Integer
//000264:             ThreadPool.GetMinThreads(worker, io)
//000265:             ThreadPool.SetMinThreads(tbCores.Value, io)
//000266:         End Sub
//000267: 
//000268:         Private Sub tbWorkFactor_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbWorkFactor.ValueChanged
//000269:             toolTip1.SetToolTip(tbWorkFactor, tbWorkFactor.Value.ToString())
//000270:         End Sub
//000271:     End Class
//000272: End Namespace
      IL_00d0:  ldloca.s   VB$t_struct$L0
      IL_00d2:  call       instance bool valuetype [mscorlib]System.Collections.Generic.List`1/Enumerator<class [mscorlib]System.Tuple`2<string,class [mscorlib]System.Func`3<int32,int32,int32>>>::MoveNext()
      IL_00d7:  stloc.s    VB$CG$t_bool$S0
      IL_00d9:  ldloc.s    VB$CG$t_bool$S0
      IL_00db:  brtrue.s   IL_009e

      IL_00dd:  nop
      IL_00de:  leave.s    IL_00ef

    }  // end .try
    finally
    {
      IL_00e0:  ldloca.s   VB$t_struct$L0
      IL_00e2:  constrained. valuetype [mscorlib]System.Collections.Generic.List`1/Enumerator<class [mscorlib]System.Tuple`2<string,class [mscorlib]System.Func`3<int32,int32,int32>>>
      IL_00e8:  callvirt   instance void [mscorlib]System.IDisposable::Dispose()
      IL_00ed:  nop
      IL_00ee:  endfinally
//000077:             lvWorkloads.Items(0).Selected = True
    }  // end handler
    IL_00ef:  ldarg.0
    IL_00f0:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ListView VisualizePartitioning.MainForm::lvWorkloads
    IL_00f5:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.ListView/ListViewItemCollection [System.Windows.Forms]System.Windows.Forms.ListView::get_Items()
    IL_00fa:  ldc.i4.0
    IL_00fb:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.ListViewItem [System.Windows.Forms]System.Windows.Forms.ListView/ListViewItemCollection::get_Item(int32)
    IL_0100:  ldc.i4.1
    IL_0101:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ListViewItem::set_Selected(bool)
    IL_0106:  nop
//000078:         End Sub
    IL_0107:  nop
    IL_0108:  ret
  } // end of method MainForm::InitializeWorkloads

  .method private instance void  InitializePartitioningMethods() cil managed
  {
    // Code size       451 (0x1c3)
    .maxstack  4
    .locals init ([0] class VisualizePartitioning.MainForm/_Closure$__2 $VB$Closure_ClosureVariable_50_33,
             [1] class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.Tuple`2<string,class [mscorlib]System.Func`2<int32[],class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32>>>> partitioningMethods,
             [2] bool usingPLINQ,
             [3] class [mscorlib]System.Tuple`2<string,class [mscorlib]System.Func`2<int32[],class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32>>> 'method',
             [4] class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.Tuple`2<string,class [mscorlib]System.Func`2<int32[],class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32>>>> VB$t_ref$L0,
             [5] valuetype [mscorlib]System.Collections.Generic.List`1/Enumerator<class [mscorlib]System.Tuple`2<string,class [mscorlib]System.Func`2<int32[],class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32>>>> VB$t_struct$L0,
             [6] class [System.Windows.Forms]System.Windows.Forms.ListViewItem VB$t_ref$S1,
             [7] bool VB$CG$t_bool$S0)
//000079: 
//000080:         ''' <summary>Initializes the partitioning methods list view.</summary>
//000081:         Private Sub InitializePartitioningMethods()
    IL_0000:  nop
//000082:             lvPartitioningMethods.Items.Clear()
//000083:             Dim usingPLINQ As Boolean = rbPLINQ.Checked
//000084:             Dim partitioningMethods = New List(Of Tuple(Of String, Func(Of Integer(), Partitioner(Of Integer))))()
//000085: 
//000086:             ' Static partitioning using the Partitioner.Create overload requires static partitioner support,
//000087:             ' which Parallel.ForEach does not provide.
//000088:             If usingPLINQ Then
//000089:                 partitioningMethods.Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))("Static", Function(e) partitioner.Create(e, False)))
//000090:             End If
//000091: 
//000092:             ' Add a bunch of partitioning approaches that work with both PLINQ and Parallel.ForEach.
//000093:             With partitioningMethods
//000094:                 .Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))("Load Balance", Function(e) partitioner.Create(e, True)))
//000095:                 .Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))("Dynamic(1)", Function(e) ChunkPartitioner.Create(e, 1)))
//000096:                 .Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))("Dynamic(16)", Function(e) ChunkPartitioner.Create(e, 16)))
//000097:                 .Add(Tuple.Create(Of String,  _
//000098:                 Func(Of Integer(), Partitioner(Of Integer)))("Guided", Function(e) ChunkPartitioner.Create(e, Function(prev)
//000099:                                                                                                                   If prev <= 0 Then
//000100:                                                                                                                       Return If(e.Length <= 1, 1,
//000101:                                                                                                                                 CType(e.Length /
//000102:                                                                                                                                     (Environment.ProcessorCount * 3), Integer))
//000103:                                                                                                                   End If
//000104:                                                                                                                   Dim [next] = CType(prev / 2, Integer)
//000105:                                                                                                                   Return If([next] <= 0, prev, [next])
//000106:                                                                                                               End Function)))
//000107:                 .Add(Tuple.Create(Of String,  _
//000108:                                         Func(Of Integer(),  _
//000109:                                              Partitioner(Of Integer)))("Grow Exponential", Function(e) ChunkPartitioner.Create(e, Function(prev) If(prev <= 0, 1, prev * 2))))
//000110:                 .Add(Tuple.Create(Of String,  _
//000111:                                         Func(Of Integer(), Partitioner(Of Integer)))("Random", Function(e) ChunkPartitioner.Create(e, Function(prev) _localRandom.Value.[Next](e.Length))))
//000112: 
//000113:             End With
//000114: 
//000115:             ' Special-case some PLINQ-only hashing.
//000116:             If usingPLINQ Then
//000117:                 ' The actual enabling of these partitioning schemes is done later, as they can't 
//000118:                 ' be encoded in a partitioner but rather are based on what operators are used in the PLINQ query.
//000119:                 partitioningMethods.Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))(PartitioningStripe, Function(e) partitioner.Create(e)))
//000120:                 partitioningMethods.Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))(PartitioningHash, Function(e) partitioner.Create(e)))
//000121:             End If
//000122: 
//000123:             ' Dump the partitioners into the list view.
//000124:             For Each method In partitioningMethods
//000125:                 lvPartitioningMethods.Items.Add(New ListViewItem(method.Item1) With {.Tag = method})
//000126:             Next
//000127:             lvPartitioningMethods.Items(0).Selected = True
//000128:         End Sub
//000129: 
//000130:         ''' <summary>Visualize the partitioning.</summary>
//000131:         Private Sub btnVisualize_Click(ByVal sender As Object, ByVal e As EventArgs) Handles btnVisualize.Click
//000132:             Dim numProcs = tbCores.Value
//000133:             Dim width = pbPartitionedImage.Width
//000134:             Dim height = pbPartitionedImage.Height
//000135:             Dim useParallelFor = rbParallelFor.Checked
//000136:             Dim useParallelForEach = rbParallelForEach.Checked
//000137:             _workFactor = tbWorkFactor.Value
//000138: 
//000139:             ' If we're using Parallel.ForEach or PLINQ, ensure a partitioning scheme was selected and use it.
//000140:             Dim selectedMethod As Tuple(Of String, Func(Of Integer(), Partitioner(Of Integer))) = Nothing
//000141:             If Not useParallelFor Then
//000142:                 If lvPartitioningMethods.SelectedIndices.Count = 0 Then
//000143:                     Exit Sub
//000144:                 Else
//000145:                     selectedMethod = DirectCast(lvPartitioningMethods.SelectedItems(0).Tag, Tuple(Of String, Func(Of Integer(), Partitioner(Of Integer))))
//000146:                 End If
//000147:             End If
//000148: 
//000149:             ' Make sure a workload was selected and use it.
//000150:             If lvWorkloads.SelectedItems.Count = 0 Then
//000151:                 Exit Sub
//000152:             End If
//000153: 
//000154:             Dim selectedWorkload = DirectCast(lvWorkloads.SelectedItems(0).Tag, Tuple(Of String, Func(Of Integer, Integer, Integer)))
//000155: 
//000156:             ' Create a new Bitmap to store the rendered output
//000157:             Dim bmp = New Bitmap(width, height)
//000158: 
//000159:             ' Disable the start button and kick off the background work.
//000160:             btnVisualize.Enabled = False
//000161:             ' Assign each thread a unique id.
//000162:             ' Get faster access to the Bitmap's contents.
//000163:             ' Time the operation.
//000164:             ' Create the partitioner to be used.
//000165:             ' Run the work with Parallel.ForEach
//000166:             ' PLINQ.
//000167:             ' Run the work with PLINQ. If a special partitioning method was selected, use relevant query operators
//000168:             ' to get PLINQ to use that partitioning approach.
//000169:             ' Return the total time from the task
//000170:             ' When the work completes, run the following on the UI thread.
//000171: 
//000172:             Task.Factory.StartNew(Function()
//000173:                                       Dim nextId = -1
//000174:                                       Dim threadId = New ThreadLocal(Of Integer)(Function() Interlocked.Increment(nextId))
//000175:                                       Using fastBmp As New FastBitmap(bmp)
//000176:                                           Dim sw = Stopwatch.StartNew()
//000177:                                           If useParallelFor Then
//000178:                                               If fastBmp Is Nothing Then
//000179:                                                   MsgBox("FastBmp Disposed")
//000180:                                               End If
//000181:                                               Parallel.[For](0, height, New ParallelOptions(), Sub(i)
//000182:                                                                                                    Dim id = threadId.Value
//000183:                                                                                                    DoWork(selectedWorkload.Item2(height, i))
//000184: 
//000185:                                                                                                    For j = 0 To width - 1
//000186:                                                                                                        fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000187:                                                                                                    Next
//000188:                                                                                                End Sub)
//000189:                                           Else
//000190:                                               Dim partitioner = selectedMethod.Item2(Enumerable.Range(0, height).ToArray())
//000191:                                               If useParallelForEach Then
//000192:                                                   Parallel.ForEach(partitioner, New ParallelOptions(), Sub(i)
//000193:                                                                                                            Dim id = threadId.Value
//000194:                                                                                                            DoWork(selectedWorkload.Item2(height, i))
//000195:                                                                                                            For j = 0 To width - 1
//000196:                                                                                                                fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000197:                                                                                                            Next
//000198:                                                                                                        End Sub)
//000199:                                               Else
//000200:                                                   Dim source = partitioner.AsParallel().WithDegreeOfParallelism(numProcs)
//000201:                                                   If selectedMethod.Item1 = PartitioningStripe Then
//000202:                                                       source = source.TakeWhile(Function(elem) True)
//000203:                                                   ElseIf selectedMethod.Item1 = PartitioningHash Then
//000204:                                                       source = source.Join(Enumerable.Range(0, height).AsParallel(), Function(i) i, Function(i) i, Function(i, ignore) i)
//000205:                                                   End If
//000206:                                                   source.ForAll(Sub(i)
//000207:                                                                     Dim id = threadId.Value
//000208:                                                                     DoWork(selectedWorkload.Item2(height, i))
//000209:                                                                     For j = 0 To width - 1
//000210:                                                                         fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000211:                                                                     Next
//000212:                                                                 End Sub)
//000213:                                               End If
//000214:                                           End If
//000215:                                           Return sw.Elapsed
//000216:                                       End Using
//000217:                                   End Function).ContinueWith(Sub(t)
//000218:                                                                  ' Dispose of the old image (if there was one) and display the new one.
//000219:                                                                  Dim old = pbPartitionedImage.Image
//000220:                                                                  pbPartitionedImage.Image = bmp
//000221:                                                                  If old IsNot Nothing Then
//000222:                                                                      old.Dispose()
//000223:                                                                  End If
//000224: 
//000225:                                                                  ' Re-enable controls on the form and display the elapsed time.
//000226:                                                                  btnVisualize.Enabled = True
//000227:                                                                  lblTime.Text = "Time: " & t.Result.ToString()
//000228:                                                              End Sub, TaskScheduler.FromCurrentSynchronizationContext())
//000229:         End Sub
//000230: 
//000231:         ''' <summary>Does an amount of work relative to the amount requested.</summary>
//000232:         ''' <param name="workAmount">The amount of work to perform.</param>
//000233:         <MethodImpl(MethodImplOptions.NoOptimization Or MethodImplOptions.NoInlining)>
//000234:         Private Shared Function DoWork(ByVal workAmount As Integer) As Integer
//000235:             Try
//000236:                 Dim value = 1
//000237:                 For i = 0 To workAmount - 1
//000238:                     value = value * workAmount
//000239:                 Next i
//000240:                 Return value
//000241:             Catch
//000242:                 Return 0
//000243:             End Try
//000244:         End Function
//000245: 
//000246:         ''' <summary>Update relevant portions of the form when the API radio buttons are checked.</summary>
//000247:         ''' <param name="sender">The radio button.</param>
//000248:         ''' <param name="e">The event args.</param>
//000249:         Private Sub rbAPI_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles rbParallelForEach.CheckedChanged,
//000250:             rbPLINQ.CheckedChanged, rbParallelFor.CheckedChanged
//000251:             lvPartitioningMethods.Enabled = Not rbParallelFor.Checked
//000252:             lvPartitioningMethods.HideSelection = Not lvPartitioningMethods.Enabled
//000253: 
//000254:             ' Recreate partitioning methods every time a radio button is checked,
//000255:             ' as which API is selected determines which partitioning methods are available.
//000256:             InitializePartitioningMethods()
//000257:         End Sub
//000258: 
//000259:         Private Sub tbCores_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbCores.ValueChanged
//000260:             toolTip1.SetToolTip(tbCores, tbCores.Value.ToString())
//000261:             InitializeColorPalette()
//000262:             Dim worker As Integer
//000263:             Dim io As Integer
//000264:             ThreadPool.GetMinThreads(worker, io)
//000265:             ThreadPool.SetMinThreads(tbCores.Value, io)
//000266:         End Sub
//000267: 
//000268:         Private Sub tbWorkFactor_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbWorkFactor.ValueChanged
//000269:             toolTip1.SetToolTip(tbWorkFactor, tbWorkFactor.Value.ToString())
//000270:         End Sub
//000271:     End Class
//000272: End Namespace
    IL_0001:  newobj     instance void VisualizePartitioning.MainForm/_Closure$__2::.ctor()
    IL_0006:  stloc.0
//000082:             lvPartitioningMethods.Items.Clear()
    IL_0007:  ldarg.0
    IL_0008:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ListView VisualizePartitioning.MainForm::lvPartitioningMethods
    IL_000d:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.ListView/ListViewItemCollection [System.Windows.Forms]System.Windows.Forms.ListView::get_Items()
    IL_0012:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ListView/ListViewItemCollection::Clear()
    IL_0017:  nop
//000083:             Dim usingPLINQ As Boolean = rbPLINQ.Checked
    IL_0018:  ldarg.0
    IL_0019:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.RadioButton VisualizePartitioning.MainForm::get_rbPLINQ()
    IL_001e:  callvirt   instance bool [System.Windows.Forms]System.Windows.Forms.RadioButton::get_Checked()
    IL_0023:  stloc.2
//000084:             Dim partitioningMethods = New List(Of Tuple(Of String, Func(Of Integer(), Partitioner(Of Integer))))()
    IL_0024:  newobj     instance void class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.Tuple`2<string,class [mscorlib]System.Func`2<int32[],class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32>>>>::.ctor()
    IL_0029:  stloc.1
//000085: 
//000086:             ' Static partitioning using the Partitioner.Create overload requires static partitioner support,
//000087:             ' which Parallel.ForEach does not provide.
//000088:             If usingPLINQ Then
    IL_002a:  ldloc.2
    IL_002b:  stloc.s    VB$CG$t_bool$S0
//000089:                 partitioningMethods.Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))("Static", Function(e) partitioner.Create(e, False)))
//000090:             End If
//000091: 
//000092:             ' Add a bunch of partitioning approaches that work with both PLINQ and Parallel.ForEach.
//000093:             With partitioningMethods
//000094:                 .Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))("Load Balance", Function(e) partitioner.Create(e, True)))
//000095:                 .Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))("Dynamic(1)", Function(e) ChunkPartitioner.Create(e, 1)))
//000096:                 .Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))("Dynamic(16)", Function(e) ChunkPartitioner.Create(e, 16)))
//000097:                 .Add(Tuple.Create(Of String,  _
//000098:                 Func(Of Integer(), Partitioner(Of Integer)))("Guided", Function(e) ChunkPartitioner.Create(e, Function(prev)
//000099:                                                                                                                   If prev <= 0 Then
//000100:                                                                                                                       Return If(e.Length <= 1, 1,
//000101:                                                                                                                                 CType(e.Length /
//000102:                                                                                                                                     (Environment.ProcessorCount * 3), Integer))
//000103:                                                                                                                   End If
//000104:                                                                                                                   Dim [next] = CType(prev / 2, Integer)
//000105:                                                                                                                   Return If([next] <= 0, prev, [next])
//000106:                                                                                                               End Function)))
//000107:                 .Add(Tuple.Create(Of String,  _
//000108:                                         Func(Of Integer(),  _
//000109:                                              Partitioner(Of Integer)))("Grow Exponential", Function(e) ChunkPartitioner.Create(e, Function(prev) If(prev <= 0, 1, prev * 2))))
//000110:                 .Add(Tuple.Create(Of String,  _
//000111:                                         Func(Of Integer(), Partitioner(Of Integer)))("Random", Function(e) ChunkPartitioner.Create(e, Function(prev) _localRandom.Value.[Next](e.Length))))
//000112: 
//000113:             End With
//000114: 
//000115:             ' Special-case some PLINQ-only hashing.
//000116:             If usingPLINQ Then
//000117:                 ' The actual enabling of these partitioning schemes is done later, as they can't 
//000118:                 ' be encoded in a partitioner but rather are based on what operators are used in the PLINQ query.
//000119:                 partitioningMethods.Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))(PartitioningStripe, Function(e) partitioner.Create(e)))
//000120:                 partitioningMethods.Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))(PartitioningHash, Function(e) partitioner.Create(e)))
//000121:             End If
//000122: 
//000123:             ' Dump the partitioners into the list view.
//000124:             For Each method In partitioningMethods
//000125:                 lvPartitioningMethods.Items.Add(New ListViewItem(method.Item1) With {.Tag = method})
//000126:             Next
//000127:             lvPartitioningMethods.Items(0).Selected = True
//000128:         End Sub
//000129: 
//000130:         ''' <summary>Visualize the partitioning.</summary>
//000131:         Private Sub btnVisualize_Click(ByVal sender As Object, ByVal e As EventArgs) Handles btnVisualize.Click
//000132:             Dim numProcs = tbCores.Value
//000133:             Dim width = pbPartitionedImage.Width
//000134:             Dim height = pbPartitionedImage.Height
//000135:             Dim useParallelFor = rbParallelFor.Checked
//000136:             Dim useParallelForEach = rbParallelForEach.Checked
//000137:             _workFactor = tbWorkFactor.Value
//000138: 
//000139:             ' If we're using Parallel.ForEach or PLINQ, ensure a partitioning scheme was selected and use it.
//000140:             Dim selectedMethod As Tuple(Of String, Func(Of Integer(), Partitioner(Of Integer))) = Nothing
//000141:             If Not useParallelFor Then
//000142:                 If lvPartitioningMethods.SelectedIndices.Count = 0 Then
//000143:                     Exit Sub
//000144:                 Else
//000145:                     selectedMethod = DirectCast(lvPartitioningMethods.SelectedItems(0).Tag, Tuple(Of String, Func(Of Integer(), Partitioner(Of Integer))))
//000146:                 End If
//000147:             End If
//000148: 
//000149:             ' Make sure a workload was selected and use it.
//000150:             If lvWorkloads.SelectedItems.Count = 0 Then
//000151:                 Exit Sub
//000152:             End If
//000153: 
//000154:             Dim selectedWorkload = DirectCast(lvWorkloads.SelectedItems(0).Tag, Tuple(Of String, Func(Of Integer, Integer, Integer)))
//000155: 
//000156:             ' Create a new Bitmap to store the rendered output
//000157:             Dim bmp = New Bitmap(width, height)
//000158: 
//000159:             ' Disable the start button and kick off the background work.
//000160:             btnVisualize.Enabled = False
//000161:             ' Assign each thread a unique id.
//000162:             ' Get faster access to the Bitmap's contents.
//000163:             ' Time the operation.
//000164:             ' Create the partitioner to be used.
//000165:             ' Run the work with Parallel.ForEach
//000166:             ' PLINQ.
//000167:             ' Run the work with PLINQ. If a special partitioning method was selected, use relevant query operators
//000168:             ' to get PLINQ to use that partitioning approach.
//000169:             ' Return the total time from the task
//000170:             ' When the work completes, run the following on the UI thread.
//000171: 
//000172:             Task.Factory.StartNew(Function()
//000173:                                       Dim nextId = -1
//000174:                                       Dim threadId = New ThreadLocal(Of Integer)(Function() Interlocked.Increment(nextId))
//000175:                                       Using fastBmp As New FastBitmap(bmp)
//000176:                                           Dim sw = Stopwatch.StartNew()
//000177:                                           If useParallelFor Then
//000178:                                               If fastBmp Is Nothing Then
//000179:                                                   MsgBox("FastBmp Disposed")
//000180:                                               End If
//000181:                                               Parallel.[For](0, height, New ParallelOptions(), Sub(i)
//000182:                                                                                                    Dim id = threadId.Value
//000183:                                                                                                    DoWork(selectedWorkload.Item2(height, i))
//000184: 
//000185:                                                                                                    For j = 0 To width - 1
//000186:                                                                                                        fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000187:                                                                                                    Next
//000188:                                                                                                End Sub)
//000189:                                           Else
//000190:                                               Dim partitioner = selectedMethod.Item2(Enumerable.Range(0, height).ToArray())
//000191:                                               If useParallelForEach Then
//000192:                                                   Parallel.ForEach(partitioner, New ParallelOptions(), Sub(i)
//000193:                                                                                                            Dim id = threadId.Value
//000194:                                                                                                            DoWork(selectedWorkload.Item2(height, i))
//000195:                                                                                                            For j = 0 To width - 1
//000196:                                                                                                                fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000197:                                                                                                            Next
//000198:                                                                                                        End Sub)
//000199:                                               Else
//000200:                                                   Dim source = partitioner.AsParallel().WithDegreeOfParallelism(numProcs)
//000201:                                                   If selectedMethod.Item1 = PartitioningStripe Then
//000202:                                                       source = source.TakeWhile(Function(elem) True)
//000203:                                                   ElseIf selectedMethod.Item1 = PartitioningHash Then
//000204:                                                       source = source.Join(Enumerable.Range(0, height).AsParallel(), Function(i) i, Function(i) i, Function(i, ignore) i)
//000205:                                                   End If
//000206:                                                   source.ForAll(Sub(i)
//000207:                                                                     Dim id = threadId.Value
//000208:                                                                     DoWork(selectedWorkload.Item2(height, i))
//000209:                                                                     For j = 0 To width - 1
//000210:                                                                         fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000211:                                                                     Next
//000212:                                                                 End Sub)
//000213:                                               End If
//000214:                                           End If
//000215:                                           Return sw.Elapsed
//000216:                                       End Using
//000217:                                   End Function).ContinueWith(Sub(t)
//000218:                                                                  ' Dispose of the old image (if there was one) and display the new one.
//000219:                                                                  Dim old = pbPartitionedImage.Image
//000220:                                                                  pbPartitionedImage.Image = bmp
//000221:                                                                  If old IsNot Nothing Then
//000222:                                                                      old.Dispose()
//000223:                                                                  End If
//000224: 
//000225:                                                                  ' Re-enable controls on the form and display the elapsed time.
//000226:                                                                  btnVisualize.Enabled = True
//000227:                                                                  lblTime.Text = "Time: " & t.Result.ToString()
//000228:                                                              End Sub, TaskScheduler.FromCurrentSynchronizationContext())
//000229:         End Sub
//000230: 
//000231:         ''' <summary>Does an amount of work relative to the amount requested.</summary>
//000232:         ''' <param name="workAmount">The amount of work to perform.</param>
//000233:         <MethodImpl(MethodImplOptions.NoOptimization Or MethodImplOptions.NoInlining)>
//000234:         Private Shared Function DoWork(ByVal workAmount As Integer) As Integer
//000235:             Try
//000236:                 Dim value = 1
//000237:                 For i = 0 To workAmount - 1
//000238:                     value = value * workAmount
//000239:                 Next i
//000240:                 Return value
//000241:             Catch
//000242:                 Return 0
//000243:             End Try
//000244:         End Function
//000245: 
//000246:         ''' <summary>Update relevant portions of the form when the API radio buttons are checked.</summary>
//000247:         ''' <param name="sender">The radio button.</param>
//000248:         ''' <param name="e">The event args.</param>
//000249:         Private Sub rbAPI_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles rbParallelForEach.CheckedChanged,
//000250:             rbPLINQ.CheckedChanged, rbParallelFor.CheckedChanged
//000251:             lvPartitioningMethods.Enabled = Not rbParallelFor.Checked
//000252:             lvPartitioningMethods.HideSelection = Not lvPartitioningMethods.Enabled
//000253: 
//000254:             ' Recreate partitioning methods every time a radio button is checked,
//000255:             ' as which API is selected determines which partitioning methods are available.
//000256:             InitializePartitioningMethods()
//000257:         End Sub
//000258: 
//000259:         Private Sub tbCores_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbCores.ValueChanged
//000260:             toolTip1.SetToolTip(tbCores, tbCores.Value.ToString())
//000261:             InitializeColorPalette()
//000262:             Dim worker As Integer
//000263:             Dim io As Integer
//000264:             ThreadPool.GetMinThreads(worker, io)
//000265:             ThreadPool.SetMinThreads(tbCores.Value, io)
//000266:         End Sub
//000267: 
//000268:         Private Sub tbWorkFactor_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbWorkFactor.ValueChanged
//000269:             toolTip1.SetToolTip(tbWorkFactor, tbWorkFactor.Value.ToString())
//000270:         End Sub
//000271:     End Class
//000272: End Namespace
    IL_002d:  ldloc.s    VB$CG$t_bool$S0
    IL_002f:  brfalse.s  IL_004e

//000089:                 partitioningMethods.Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))("Static", Function(e) partitioner.Create(e, False)))
    IL_0031:  ldloc.1
    IL_0032:  ldstr      "Static"
    IL_0037:  ldnull
    IL_0038:  ldftn      class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32> VisualizePartitioning.MainForm::_Lambda$__7(int32[])
    IL_003e:  newobj     instance void class [mscorlib]System.Func`2<int32[],class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32>>::.ctor(object,
                                                                                                                                                        native int)
    IL_0043:  call       class [mscorlib]System.Tuple`2<!!0,!!1> [mscorlib]System.Tuple::Create<string,class [mscorlib]System.Func`2<int32[],class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32>>>(!!0,
                                                                                                                                                                                                                  !!1)
    IL_0048:  callvirt   instance void class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.Tuple`2<string,class [mscorlib]System.Func`2<int32[],class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32>>>>::Add(!0)
    IL_004d:  nop
//000090:             End If
    IL_004e:  nop
//000091: 
//000092:             ' Add a bunch of partitioning approaches that work with both PLINQ and Parallel.ForEach.
//000093:             With partitioningMethods
    IL_004f:  ldloc.1
    IL_0050:  stloc.s    VB$t_ref$L0
//000094:                 .Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))("Load Balance", Function(e) partitioner.Create(e, True)))
    IL_0052:  ldloc.s    VB$t_ref$L0
    IL_0054:  ldstr      "Load Balance"
    IL_0059:  ldnull
    IL_005a:  ldftn      class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32> VisualizePartitioning.MainForm::_Lambda$__8(int32[])
    IL_0060:  newobj     instance void class [mscorlib]System.Func`2<int32[],class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32>>::.ctor(object,
                                                                                                                                                        native int)
    IL_0065:  call       class [mscorlib]System.Tuple`2<!!0,!!1> [mscorlib]System.Tuple::Create<string,class [mscorlib]System.Func`2<int32[],class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32>>>(!!0,
                                                                                                                                                                                                                  !!1)
    IL_006a:  callvirt   instance void class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.Tuple`2<string,class [mscorlib]System.Func`2<int32[],class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32>>>>::Add(!0)
    IL_006f:  nop
//000095:                 .Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))("Dynamic(1)", Function(e) ChunkPartitioner.Create(e, 1)))
    IL_0070:  ldloc.s    VB$t_ref$L0
    IL_0072:  ldstr      "Dynamic(1)"
    IL_0077:  ldnull
    IL_0078:  ldftn      class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32> VisualizePartitioning.MainForm::_Lambda$__9(int32[])
    IL_007e:  newobj     instance void class [mscorlib]System.Func`2<int32[],class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32>>::.ctor(object,
                                                                                                                                                        native int)
    IL_0083:  call       class [mscorlib]System.Tuple`2<!!0,!!1> [mscorlib]System.Tuple::Create<string,class [mscorlib]System.Func`2<int32[],class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32>>>(!!0,
                                                                                                                                                                                                                  !!1)
    IL_0088:  callvirt   instance void class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.Tuple`2<string,class [mscorlib]System.Func`2<int32[],class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32>>>>::Add(!0)
    IL_008d:  nop
//000096:                 .Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))("Dynamic(16)", Function(e) ChunkPartitioner.Create(e, 16)))
    IL_008e:  ldloc.s    VB$t_ref$L0
    IL_0090:  ldstr      "Dynamic(16)"
    IL_0095:  ldnull
    IL_0096:  ldftn      class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32> VisualizePartitioning.MainForm::_Lambda$__10(int32[])
    IL_009c:  newobj     instance void class [mscorlib]System.Func`2<int32[],class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32>>::.ctor(object,
                                                                                                                                                        native int)
    IL_00a1:  call       class [mscorlib]System.Tuple`2<!!0,!!1> [mscorlib]System.Tuple::Create<string,class [mscorlib]System.Func`2<int32[],class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32>>>(!!0,
                                                                                                                                                                                                                  !!1)
    IL_00a6:  callvirt   instance void class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.Tuple`2<string,class [mscorlib]System.Func`2<int32[],class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32>>>>::Add(!0)
    IL_00ab:  nop
//000097:                 .Add(Tuple.Create(Of String,  _
    IL_00ac:  ldloc.s    VB$t_ref$L0
    IL_00ae:  ldstr      "Guided"
    IL_00b3:  ldloc.0
    IL_00b4:  dup
    IL_00b5:  ldvirtftn  instance class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32> VisualizePartitioning.MainForm/_Closure$__2::_Lambda$__11(int32[])
    IL_00bb:  newobj     instance void class [mscorlib]System.Func`2<int32[],class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32>>::.ctor(object,
                                                                                                                                                        native int)
    IL_00c0:  call       class [mscorlib]System.Tuple`2<!!0,!!1> [mscorlib]System.Tuple::Create<string,class [mscorlib]System.Func`2<int32[],class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32>>>(!!0,
                                                                                                                                                                                                                  !!1)
    IL_00c5:  callvirt   instance void class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.Tuple`2<string,class [mscorlib]System.Func`2<int32[],class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32>>>>::Add(!0)
    IL_00ca:  nop
//000098:                 Func(Of Integer(), Partitioner(Of Integer)))("Guided", Function(e) ChunkPartitioner.Create(e, Function(prev)
//000099:                                                                                                                   If prev <= 0 Then
//000100:                                                                                                                       Return If(e.Length <= 1, 1,
//000101:                                                                                                                                 CType(e.Length /
//000102:                                                                                                                                     (Environment.ProcessorCount * 3), Integer))
//000103:                                                                                                                   End If
//000104:                                                                                                                   Dim [next] = CType(prev / 2, Integer)
//000105:                                                                                                                   Return If([next] <= 0, prev, [next])
//000106:                                                                                                               End Function)))
//000107:                 .Add(Tuple.Create(Of String,  _
    IL_00cb:  ldloc.s    VB$t_ref$L0
    IL_00cd:  ldstr      "Grow Exponential"
    IL_00d2:  ldnull
    IL_00d3:  ldftn      class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32> VisualizePartitioning.MainForm::_Lambda$__13(int32[])
    IL_00d9:  newobj     instance void class [mscorlib]System.Func`2<int32[],class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32>>::.ctor(object,
                                                                                                                                                        native int)
    IL_00de:  call       class [mscorlib]System.Tuple`2<!!0,!!1> [mscorlib]System.Tuple::Create<string,class [mscorlib]System.Func`2<int32[],class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32>>>(!!0,
                                                                                                                                                                                                                  !!1)
    IL_00e3:  callvirt   instance void class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.Tuple`2<string,class [mscorlib]System.Func`2<int32[],class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32>>>>::Add(!0)
    IL_00e8:  nop
//000108:                                         Func(Of Integer(),  _
//000109:                                              Partitioner(Of Integer)))("Grow Exponential", Function(e) ChunkPartitioner.Create(e, Function(prev) If(prev <= 0, 1, prev * 2))))
//000110:                 .Add(Tuple.Create(Of String,  _
    IL_00e9:  ldloc.s    VB$t_ref$L0
    IL_00eb:  ldstr      "Random"
    IL_00f0:  ldloc.0
    IL_00f1:  dup
    IL_00f2:  ldvirtftn  instance class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32> VisualizePartitioning.MainForm/_Closure$__2::_Lambda$__15(int32[])
    IL_00f8:  newobj     instance void class [mscorlib]System.Func`2<int32[],class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32>>::.ctor(object,
                                                                                                                                                        native int)
    IL_00fd:  call       class [mscorlib]System.Tuple`2<!!0,!!1> [mscorlib]System.Tuple::Create<string,class [mscorlib]System.Func`2<int32[],class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32>>>(!!0,
                                                                                                                                                                                                                  !!1)
    IL_0102:  callvirt   instance void class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.Tuple`2<string,class [mscorlib]System.Func`2<int32[],class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32>>>>::Add(!0)
    IL_0107:  nop
//000111:                                         Func(Of Integer(), Partitioner(Of Integer)))("Random", Function(e) ChunkPartitioner.Create(e, Function(prev) _localRandom.Value.[Next](e.Length))))
//000112: 
//000113:             End With
    IL_0108:  ldnull
    IL_0109:  stloc.s    VB$t_ref$L0
//000114: 
//000115:             ' Special-case some PLINQ-only hashing.
//000116:             If usingPLINQ Then
    IL_010b:  ldloc.2
    IL_010c:  stloc.s    VB$CG$t_bool$S0
//000117:                 ' The actual enabling of these partitioning schemes is done later, as they can't 
//000118:                 ' be encoded in a partitioner but rather are based on what operators are used in the PLINQ query.
//000119:                 partitioningMethods.Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))(PartitioningStripe, Function(e) partitioner.Create(e)))
//000120:                 partitioningMethods.Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))(PartitioningHash, Function(e) partitioner.Create(e)))
//000121:             End If
//000122: 
//000123:             ' Dump the partitioners into the list view.
//000124:             For Each method In partitioningMethods
//000125:                 lvPartitioningMethods.Items.Add(New ListViewItem(method.Item1) With {.Tag = method})
//000126:             Next
//000127:             lvPartitioningMethods.Items(0).Selected = True
//000128:         End Sub
//000129: 
//000130:         ''' <summary>Visualize the partitioning.</summary>
//000131:         Private Sub btnVisualize_Click(ByVal sender As Object, ByVal e As EventArgs) Handles btnVisualize.Click
//000132:             Dim numProcs = tbCores.Value
//000133:             Dim width = pbPartitionedImage.Width
//000134:             Dim height = pbPartitionedImage.Height
//000135:             Dim useParallelFor = rbParallelFor.Checked
//000136:             Dim useParallelForEach = rbParallelForEach.Checked
//000137:             _workFactor = tbWorkFactor.Value
//000138: 
//000139:             ' If we're using Parallel.ForEach or PLINQ, ensure a partitioning scheme was selected and use it.
//000140:             Dim selectedMethod As Tuple(Of String, Func(Of Integer(), Partitioner(Of Integer))) = Nothing
//000141:             If Not useParallelFor Then
//000142:                 If lvPartitioningMethods.SelectedIndices.Count = 0 Then
//000143:                     Exit Sub
//000144:                 Else
//000145:                     selectedMethod = DirectCast(lvPartitioningMethods.SelectedItems(0).Tag, Tuple(Of String, Func(Of Integer(), Partitioner(Of Integer))))
//000146:                 End If
//000147:             End If
//000148: 
//000149:             ' Make sure a workload was selected and use it.
//000150:             If lvWorkloads.SelectedItems.Count = 0 Then
//000151:                 Exit Sub
//000152:             End If
//000153: 
//000154:             Dim selectedWorkload = DirectCast(lvWorkloads.SelectedItems(0).Tag, Tuple(Of String, Func(Of Integer, Integer, Integer)))
//000155: 
//000156:             ' Create a new Bitmap to store the rendered output
//000157:             Dim bmp = New Bitmap(width, height)
//000158: 
//000159:             ' Disable the start button and kick off the background work.
//000160:             btnVisualize.Enabled = False
//000161:             ' Assign each thread a unique id.
//000162:             ' Get faster access to the Bitmap's contents.
//000163:             ' Time the operation.
//000164:             ' Create the partitioner to be used.
//000165:             ' Run the work with Parallel.ForEach
//000166:             ' PLINQ.
//000167:             ' Run the work with PLINQ. If a special partitioning method was selected, use relevant query operators
//000168:             ' to get PLINQ to use that partitioning approach.
//000169:             ' Return the total time from the task
//000170:             ' When the work completes, run the following on the UI thread.
//000171: 
//000172:             Task.Factory.StartNew(Function()
//000173:                                       Dim nextId = -1
//000174:                                       Dim threadId = New ThreadLocal(Of Integer)(Function() Interlocked.Increment(nextId))
//000175:                                       Using fastBmp As New FastBitmap(bmp)
//000176:                                           Dim sw = Stopwatch.StartNew()
//000177:                                           If useParallelFor Then
//000178:                                               If fastBmp Is Nothing Then
//000179:                                                   MsgBox("FastBmp Disposed")
//000180:                                               End If
//000181:                                               Parallel.[For](0, height, New ParallelOptions(), Sub(i)
//000182:                                                                                                    Dim id = threadId.Value
//000183:                                                                                                    DoWork(selectedWorkload.Item2(height, i))
//000184: 
//000185:                                                                                                    For j = 0 To width - 1
//000186:                                                                                                        fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000187:                                                                                                    Next
//000188:                                                                                                End Sub)
//000189:                                           Else
//000190:                                               Dim partitioner = selectedMethod.Item2(Enumerable.Range(0, height).ToArray())
//000191:                                               If useParallelForEach Then
//000192:                                                   Parallel.ForEach(partitioner, New ParallelOptions(), Sub(i)
//000193:                                                                                                            Dim id = threadId.Value
//000194:                                                                                                            DoWork(selectedWorkload.Item2(height, i))
//000195:                                                                                                            For j = 0 To width - 1
//000196:                                                                                                                fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000197:                                                                                                            Next
//000198:                                                                                                        End Sub)
//000199:                                               Else
//000200:                                                   Dim source = partitioner.AsParallel().WithDegreeOfParallelism(numProcs)
//000201:                                                   If selectedMethod.Item1 = PartitioningStripe Then
//000202:                                                       source = source.TakeWhile(Function(elem) True)
//000203:                                                   ElseIf selectedMethod.Item1 = PartitioningHash Then
//000204:                                                       source = source.Join(Enumerable.Range(0, height).AsParallel(), Function(i) i, Function(i) i, Function(i, ignore) i)
//000205:                                                   End If
//000206:                                                   source.ForAll(Sub(i)
//000207:                                                                     Dim id = threadId.Value
//000208:                                                                     DoWork(selectedWorkload.Item2(height, i))
//000209:                                                                     For j = 0 To width - 1
//000210:                                                                         fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000211:                                                                     Next
//000212:                                                                 End Sub)
//000213:                                               End If
//000214:                                           End If
//000215:                                           Return sw.Elapsed
//000216:                                       End Using
//000217:                                   End Function).ContinueWith(Sub(t)
//000218:                                                                  ' Dispose of the old image (if there was one) and display the new one.
//000219:                                                                  Dim old = pbPartitionedImage.Image
//000220:                                                                  pbPartitionedImage.Image = bmp
//000221:                                                                  If old IsNot Nothing Then
//000222:                                                                      old.Dispose()
//000223:                                                                  End If
//000224: 
//000225:                                                                  ' Re-enable controls on the form and display the elapsed time.
//000226:                                                                  btnVisualize.Enabled = True
//000227:                                                                  lblTime.Text = "Time: " & t.Result.ToString()
//000228:                                                              End Sub, TaskScheduler.FromCurrentSynchronizationContext())
//000229:         End Sub
//000230: 
//000231:         ''' <summary>Does an amount of work relative to the amount requested.</summary>
//000232:         ''' <param name="workAmount">The amount of work to perform.</param>
//000233:         <MethodImpl(MethodImplOptions.NoOptimization Or MethodImplOptions.NoInlining)>
//000234:         Private Shared Function DoWork(ByVal workAmount As Integer) As Integer
//000235:             Try
//000236:                 Dim value = 1
//000237:                 For i = 0 To workAmount - 1
//000238:                     value = value * workAmount
//000239:                 Next i
//000240:                 Return value
//000241:             Catch
//000242:                 Return 0
//000243:             End Try
//000244:         End Function
//000245: 
//000246:         ''' <summary>Update relevant portions of the form when the API radio buttons are checked.</summary>
//000247:         ''' <param name="sender">The radio button.</param>
//000248:         ''' <param name="e">The event args.</param>
//000249:         Private Sub rbAPI_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles rbParallelForEach.CheckedChanged,
//000250:             rbPLINQ.CheckedChanged, rbParallelFor.CheckedChanged
//000251:             lvPartitioningMethods.Enabled = Not rbParallelFor.Checked
//000252:             lvPartitioningMethods.HideSelection = Not lvPartitioningMethods.Enabled
//000253: 
//000254:             ' Recreate partitioning methods every time a radio button is checked,
//000255:             ' as which API is selected determines which partitioning methods are available.
//000256:             InitializePartitioningMethods()
//000257:         End Sub
//000258: 
//000259:         Private Sub tbCores_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbCores.ValueChanged
//000260:             toolTip1.SetToolTip(tbCores, tbCores.Value.ToString())
//000261:             InitializeColorPalette()
//000262:             Dim worker As Integer
//000263:             Dim io As Integer
//000264:             ThreadPool.GetMinThreads(worker, io)
//000265:             ThreadPool.SetMinThreads(tbCores.Value, io)
//000266:         End Sub
//000267: 
//000268:         Private Sub tbWorkFactor_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbWorkFactor.ValueChanged
//000269:             toolTip1.SetToolTip(tbWorkFactor, tbWorkFactor.Value.ToString())
//000270:         End Sub
//000271:     End Class
//000272: End Namespace
    IL_010e:  ldloc.s    VB$CG$t_bool$S0
    IL_0110:  brfalse.s  IL_014c

//000119:                 partitioningMethods.Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))(PartitioningStripe, Function(e) partitioner.Create(e)))
    IL_0112:  ldloc.1
    IL_0113:  ldstr      "Stripe"
    IL_0118:  ldnull
    IL_0119:  ldftn      class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32> VisualizePartitioning.MainForm::_Lambda$__17(int32[])
    IL_011f:  newobj     instance void class [mscorlib]System.Func`2<int32[],class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32>>::.ctor(object,
                                                                                                                                                        native int)
    IL_0124:  call       class [mscorlib]System.Tuple`2<!!0,!!1> [mscorlib]System.Tuple::Create<string,class [mscorlib]System.Func`2<int32[],class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32>>>(!!0,
                                                                                                                                                                                                                  !!1)
    IL_0129:  callvirt   instance void class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.Tuple`2<string,class [mscorlib]System.Func`2<int32[],class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32>>>>::Add(!0)
    IL_012e:  nop
//000120:                 partitioningMethods.Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))(PartitioningHash, Function(e) partitioner.Create(e)))
    IL_012f:  ldloc.1
    IL_0130:  ldstr      "Hash"
    IL_0135:  ldnull
    IL_0136:  ldftn      class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32> VisualizePartitioning.MainForm::_Lambda$__18(int32[])
    IL_013c:  newobj     instance void class [mscorlib]System.Func`2<int32[],class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32>>::.ctor(object,
                                                                                                                                                        native int)
    IL_0141:  call       class [mscorlib]System.Tuple`2<!!0,!!1> [mscorlib]System.Tuple::Create<string,class [mscorlib]System.Func`2<int32[],class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32>>>(!!0,
                                                                                                                                                                                                                  !!1)
    IL_0146:  callvirt   instance void class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.Tuple`2<string,class [mscorlib]System.Func`2<int32[],class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32>>>>::Add(!0)
    IL_014b:  nop
//000121:             End If
    IL_014c:  nop
//000122: 
//000123:             ' Dump the partitioners into the list view.
//000124:             For Each method In partitioningMethods
//000125:                 lvPartitioningMethods.Items.Add(New ListViewItem(method.Item1) With {.Tag = method})
//000126:             Next
//000127:             lvPartitioningMethods.Items(0).Selected = True
//000128:         End Sub
//000129: 
//000130:         ''' <summary>Visualize the partitioning.</summary>
//000131:         Private Sub btnVisualize_Click(ByVal sender As Object, ByVal e As EventArgs) Handles btnVisualize.Click
//000132:             Dim numProcs = tbCores.Value
//000133:             Dim width = pbPartitionedImage.Width
//000134:             Dim height = pbPartitionedImage.Height
//000135:             Dim useParallelFor = rbParallelFor.Checked
//000136:             Dim useParallelForEach = rbParallelForEach.Checked
//000137:             _workFactor = tbWorkFactor.Value
//000138: 
//000139:             ' If we're using Parallel.ForEach or PLINQ, ensure a partitioning scheme was selected and use it.
//000140:             Dim selectedMethod As Tuple(Of String, Func(Of Integer(), Partitioner(Of Integer))) = Nothing
//000141:             If Not useParallelFor Then
//000142:                 If lvPartitioningMethods.SelectedIndices.Count = 0 Then
//000143:                     Exit Sub
//000144:                 Else
//000145:                     selectedMethod = DirectCast(lvPartitioningMethods.SelectedItems(0).Tag, Tuple(Of String, Func(Of Integer(), Partitioner(Of Integer))))
//000146:                 End If
//000147:             End If
//000148: 
//000149:             ' Make sure a workload was selected and use it.
//000150:             If lvWorkloads.SelectedItems.Count = 0 Then
//000151:                 Exit Sub
//000152:             End If
//000153: 
//000154:             Dim selectedWorkload = DirectCast(lvWorkloads.SelectedItems(0).Tag, Tuple(Of String, Func(Of Integer, Integer, Integer)))
//000155: 
//000156:             ' Create a new Bitmap to store the rendered output
//000157:             Dim bmp = New Bitmap(width, height)
//000158: 
//000159:             ' Disable the start button and kick off the background work.
//000160:             btnVisualize.Enabled = False
//000161:             ' Assign each thread a unique id.
//000162:             ' Get faster access to the Bitmap's contents.
//000163:             ' Time the operation.
//000164:             ' Create the partitioner to be used.
//000165:             ' Run the work with Parallel.ForEach
//000166:             ' PLINQ.
//000167:             ' Run the work with PLINQ. If a special partitioning method was selected, use relevant query operators
//000168:             ' to get PLINQ to use that partitioning approach.
//000169:             ' Return the total time from the task
//000170:             ' When the work completes, run the following on the UI thread.
//000171: 
//000172:             Task.Factory.StartNew(Function()
//000173:                                       Dim nextId = -1
//000174:                                       Dim threadId = New ThreadLocal(Of Integer)(Function() Interlocked.Increment(nextId))
//000175:                                       Using fastBmp As New FastBitmap(bmp)
//000176:                                           Dim sw = Stopwatch.StartNew()
//000177:                                           If useParallelFor Then
//000178:                                               If fastBmp Is Nothing Then
//000179:                                                   MsgBox("FastBmp Disposed")
//000180:                                               End If
//000181:                                               Parallel.[For](0, height, New ParallelOptions(), Sub(i)
//000182:                                                                                                    Dim id = threadId.Value
//000183:                                                                                                    DoWork(selectedWorkload.Item2(height, i))
//000184: 
//000185:                                                                                                    For j = 0 To width - 1
//000186:                                                                                                        fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000187:                                                                                                    Next
//000188:                                                                                                End Sub)
//000189:                                           Else
//000190:                                               Dim partitioner = selectedMethod.Item2(Enumerable.Range(0, height).ToArray())
//000191:                                               If useParallelForEach Then
//000192:                                                   Parallel.ForEach(partitioner, New ParallelOptions(), Sub(i)
//000193:                                                                                                            Dim id = threadId.Value
//000194:                                                                                                            DoWork(selectedWorkload.Item2(height, i))
//000195:                                                                                                            For j = 0 To width - 1
//000196:                                                                                                                fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000197:                                                                                                            Next
//000198:                                                                                                        End Sub)
//000199:                                               Else
//000200:                                                   Dim source = partitioner.AsParallel().WithDegreeOfParallelism(numProcs)
//000201:                                                   If selectedMethod.Item1 = PartitioningStripe Then
//000202:                                                       source = source.TakeWhile(Function(elem) True)
//000203:                                                   ElseIf selectedMethod.Item1 = PartitioningHash Then
//000204:                                                       source = source.Join(Enumerable.Range(0, height).AsParallel(), Function(i) i, Function(i) i, Function(i, ignore) i)
//000205:                                                   End If
//000206:                                                   source.ForAll(Sub(i)
//000207:                                                                     Dim id = threadId.Value
//000208:                                                                     DoWork(selectedWorkload.Item2(height, i))
//000209:                                                                     For j = 0 To width - 1
//000210:                                                                         fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000211:                                                                     Next
//000212:                                                                 End Sub)
//000213:                                               End If
//000214:                                           End If
//000215:                                           Return sw.Elapsed
//000216:                                       End Using
//000217:                                   End Function).ContinueWith(Sub(t)
//000218:                                                                  ' Dispose of the old image (if there was one) and display the new one.
//000219:                                                                  Dim old = pbPartitionedImage.Image
//000220:                                                                  pbPartitionedImage.Image = bmp
//000221:                                                                  If old IsNot Nothing Then
//000222:                                                                      old.Dispose()
//000223:                                                                  End If
//000224: 
//000225:                                                                  ' Re-enable controls on the form and display the elapsed time.
//000226:                                                                  btnVisualize.Enabled = True
//000227:                                                                  lblTime.Text = "Time: " & t.Result.ToString()
//000228:                                                              End Sub, TaskScheduler.FromCurrentSynchronizationContext())
//000229:         End Sub
//000230: 
//000231:         ''' <summary>Does an amount of work relative to the amount requested.</summary>
//000232:         ''' <param name="workAmount">The amount of work to perform.</param>
//000233:         <MethodImpl(MethodImplOptions.NoOptimization Or MethodImplOptions.NoInlining)>
//000234:         Private Shared Function DoWork(ByVal workAmount As Integer) As Integer
//000235:             Try
//000236:                 Dim value = 1
//000237:                 For i = 0 To workAmount - 1
//000238:                     value = value * workAmount
//000239:                 Next i
//000240:                 Return value
//000241:             Catch
//000242:                 Return 0
//000243:             End Try
//000244:         End Function
//000245: 
//000246:         ''' <summary>Update relevant portions of the form when the API radio buttons are checked.</summary>
//000247:         ''' <param name="sender">The radio button.</param>
//000248:         ''' <param name="e">The event args.</param>
//000249:         Private Sub rbAPI_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles rbParallelForEach.CheckedChanged,
//000250:             rbPLINQ.CheckedChanged, rbParallelFor.CheckedChanged
//000251:             lvPartitioningMethods.Enabled = Not rbParallelFor.Checked
//000252:             lvPartitioningMethods.HideSelection = Not lvPartitioningMethods.Enabled
//000253: 
//000254:             ' Recreate partitioning methods every time a radio button is checked,
//000255:             ' as which API is selected determines which partitioning methods are available.
//000256:             InitializePartitioningMethods()
//000257:         End Sub
//000258: 
//000259:         Private Sub tbCores_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbCores.ValueChanged
//000260:             toolTip1.SetToolTip(tbCores, tbCores.Value.ToString())
//000261:             InitializeColorPalette()
//000262:             Dim worker As Integer
//000263:             Dim io As Integer
//000264:             ThreadPool.GetMinThreads(worker, io)
//000265:             ThreadPool.SetMinThreads(tbCores.Value, io)
//000266:         End Sub
//000267: 
//000268:         Private Sub tbWorkFactor_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbWorkFactor.ValueChanged
//000269:             toolTip1.SetToolTip(tbWorkFactor, tbWorkFactor.Value.ToString())
//000270:         End Sub
//000271:     End Class
//000272: End Namespace
    IL_014d:  nop
//000124:             For Each method In partitioningMethods
    .try
    {
      IL_014e:  ldloc.1
      IL_014f:  callvirt   instance valuetype [mscorlib]System.Collections.Generic.List`1/Enumerator<!0> class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.Tuple`2<string,class [mscorlib]System.Func`2<int32[],class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32>>>>::GetEnumerator()
      IL_0154:  stloc.s    VB$t_struct$L0
      IL_0156:  br.s       IL_018a

//000125:                 lvPartitioningMethods.Items.Add(New ListViewItem(method.Item1) With {.Tag = method})
//000126:             Next
//000127:             lvPartitioningMethods.Items(0).Selected = True
//000128:         End Sub
//000129: 
//000130:         ''' <summary>Visualize the partitioning.</summary>
//000131:         Private Sub btnVisualize_Click(ByVal sender As Object, ByVal e As EventArgs) Handles btnVisualize.Click
//000132:             Dim numProcs = tbCores.Value
//000133:             Dim width = pbPartitionedImage.Width
//000134:             Dim height = pbPartitionedImage.Height
//000135:             Dim useParallelFor = rbParallelFor.Checked
//000136:             Dim useParallelForEach = rbParallelForEach.Checked
//000137:             _workFactor = tbWorkFactor.Value
//000138: 
//000139:             ' If we're using Parallel.ForEach or PLINQ, ensure a partitioning scheme was selected and use it.
//000140:             Dim selectedMethod As Tuple(Of String, Func(Of Integer(), Partitioner(Of Integer))) = Nothing
//000141:             If Not useParallelFor Then
//000142:                 If lvPartitioningMethods.SelectedIndices.Count = 0 Then
//000143:                     Exit Sub
//000144:                 Else
//000145:                     selectedMethod = DirectCast(lvPartitioningMethods.SelectedItems(0).Tag, Tuple(Of String, Func(Of Integer(), Partitioner(Of Integer))))
//000146:                 End If
//000147:             End If
//000148: 
//000149:             ' Make sure a workload was selected and use it.
//000150:             If lvWorkloads.SelectedItems.Count = 0 Then
//000151:                 Exit Sub
//000152:             End If
//000153: 
//000154:             Dim selectedWorkload = DirectCast(lvWorkloads.SelectedItems(0).Tag, Tuple(Of String, Func(Of Integer, Integer, Integer)))
//000155: 
//000156:             ' Create a new Bitmap to store the rendered output
//000157:             Dim bmp = New Bitmap(width, height)
//000158: 
//000159:             ' Disable the start button and kick off the background work.
//000160:             btnVisualize.Enabled = False
//000161:             ' Assign each thread a unique id.
//000162:             ' Get faster access to the Bitmap's contents.
//000163:             ' Time the operation.
//000164:             ' Create the partitioner to be used.
//000165:             ' Run the work with Parallel.ForEach
//000166:             ' PLINQ.
//000167:             ' Run the work with PLINQ. If a special partitioning method was selected, use relevant query operators
//000168:             ' to get PLINQ to use that partitioning approach.
//000169:             ' Return the total time from the task
//000170:             ' When the work completes, run the following on the UI thread.
//000171: 
//000172:             Task.Factory.StartNew(Function()
//000173:                                       Dim nextId = -1
//000174:                                       Dim threadId = New ThreadLocal(Of Integer)(Function() Interlocked.Increment(nextId))
//000175:                                       Using fastBmp As New FastBitmap(bmp)
//000176:                                           Dim sw = Stopwatch.StartNew()
//000177:                                           If useParallelFor Then
//000178:                                               If fastBmp Is Nothing Then
//000179:                                                   MsgBox("FastBmp Disposed")
//000180:                                               End If
//000181:                                               Parallel.[For](0, height, New ParallelOptions(), Sub(i)
//000182:                                                                                                    Dim id = threadId.Value
//000183:                                                                                                    DoWork(selectedWorkload.Item2(height, i))
//000184: 
//000185:                                                                                                    For j = 0 To width - 1
//000186:                                                                                                        fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000187:                                                                                                    Next
//000188:                                                                                                End Sub)
//000189:                                           Else
//000190:                                               Dim partitioner = selectedMethod.Item2(Enumerable.Range(0, height).ToArray())
//000191:                                               If useParallelForEach Then
//000192:                                                   Parallel.ForEach(partitioner, New ParallelOptions(), Sub(i)
//000193:                                                                                                            Dim id = threadId.Value
//000194:                                                                                                            DoWork(selectedWorkload.Item2(height, i))
//000195:                                                                                                            For j = 0 To width - 1
//000196:                                                                                                                fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000197:                                                                                                            Next
//000198:                                                                                                        End Sub)
//000199:                                               Else
//000200:                                                   Dim source = partitioner.AsParallel().WithDegreeOfParallelism(numProcs)
//000201:                                                   If selectedMethod.Item1 = PartitioningStripe Then
//000202:                                                       source = source.TakeWhile(Function(elem) True)
//000203:                                                   ElseIf selectedMethod.Item1 = PartitioningHash Then
//000204:                                                       source = source.Join(Enumerable.Range(0, height).AsParallel(), Function(i) i, Function(i) i, Function(i, ignore) i)
//000205:                                                   End If
//000206:                                                   source.ForAll(Sub(i)
//000207:                                                                     Dim id = threadId.Value
//000208:                                                                     DoWork(selectedWorkload.Item2(height, i))
//000209:                                                                     For j = 0 To width - 1
//000210:                                                                         fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000211:                                                                     Next
//000212:                                                                 End Sub)
//000213:                                               End If
//000214:                                           End If
//000215:                                           Return sw.Elapsed
//000216:                                       End Using
//000217:                                   End Function).ContinueWith(Sub(t)
//000218:                                                                  ' Dispose of the old image (if there was one) and display the new one.
//000219:                                                                  Dim old = pbPartitionedImage.Image
//000220:                                                                  pbPartitionedImage.Image = bmp
//000221:                                                                  If old IsNot Nothing Then
//000222:                                                                      old.Dispose()
//000223:                                                                  End If
//000224: 
//000225:                                                                  ' Re-enable controls on the form and display the elapsed time.
//000226:                                                                  btnVisualize.Enabled = True
//000227:                                                                  lblTime.Text = "Time: " & t.Result.ToString()
//000228:                                                              End Sub, TaskScheduler.FromCurrentSynchronizationContext())
//000229:         End Sub
//000230: 
//000231:         ''' <summary>Does an amount of work relative to the amount requested.</summary>
//000232:         ''' <param name="workAmount">The amount of work to perform.</param>
//000233:         <MethodImpl(MethodImplOptions.NoOptimization Or MethodImplOptions.NoInlining)>
//000234:         Private Shared Function DoWork(ByVal workAmount As Integer) As Integer
//000235:             Try
//000236:                 Dim value = 1
//000237:                 For i = 0 To workAmount - 1
//000238:                     value = value * workAmount
//000239:                 Next i
//000240:                 Return value
//000241:             Catch
//000242:                 Return 0
//000243:             End Try
//000244:         End Function
//000245: 
//000246:         ''' <summary>Update relevant portions of the form when the API radio buttons are checked.</summary>
//000247:         ''' <param name="sender">The radio button.</param>
//000248:         ''' <param name="e">The event args.</param>
//000249:         Private Sub rbAPI_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles rbParallelForEach.CheckedChanged,
//000250:             rbPLINQ.CheckedChanged, rbParallelFor.CheckedChanged
//000251:             lvPartitioningMethods.Enabled = Not rbParallelFor.Checked
//000252:             lvPartitioningMethods.HideSelection = Not lvPartitioningMethods.Enabled
//000253: 
//000254:             ' Recreate partitioning methods every time a radio button is checked,
//000255:             ' as which API is selected determines which partitioning methods are available.
//000256:             InitializePartitioningMethods()
//000257:         End Sub
//000258: 
//000259:         Private Sub tbCores_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbCores.ValueChanged
//000260:             toolTip1.SetToolTip(tbCores, tbCores.Value.ToString())
//000261:             InitializeColorPalette()
//000262:             Dim worker As Integer
//000263:             Dim io As Integer
//000264:             ThreadPool.GetMinThreads(worker, io)
//000265:             ThreadPool.SetMinThreads(tbCores.Value, io)
//000266:         End Sub
//000267: 
//000268:         Private Sub tbWorkFactor_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbWorkFactor.ValueChanged
//000269:             toolTip1.SetToolTip(tbWorkFactor, tbWorkFactor.Value.ToString())
//000270:         End Sub
//000271:     End Class
//000272: End Namespace
      IL_0158:  ldloca.s   VB$t_struct$L0
      IL_015a:  call       instance !0 valuetype [mscorlib]System.Collections.Generic.List`1/Enumerator<class [mscorlib]System.Tuple`2<string,class [mscorlib]System.Func`2<int32[],class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32>>>>::get_Current()
      IL_015f:  stloc.3
//000125:                 lvPartitioningMethods.Items.Add(New ListViewItem(method.Item1) With {.Tag = method})
      IL_0160:  ldarg.0
      IL_0161:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ListView VisualizePartitioning.MainForm::lvPartitioningMethods
      IL_0166:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.ListView/ListViewItemCollection [System.Windows.Forms]System.Windows.Forms.ListView::get_Items()
      IL_016b:  ldloc.3
      IL_016c:  callvirt   instance !0 class [mscorlib]System.Tuple`2<string,class [mscorlib]System.Func`2<int32[],class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32>>>::get_Item1()
      IL_0171:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.ListViewItem::.ctor(string)
      IL_0176:  stloc.s    VB$t_ref$S1
      IL_0178:  ldloc.s    VB$t_ref$S1
      IL_017a:  ldloc.3
      IL_017b:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ListViewItem::set_Tag(object)
      IL_0180:  nop
      IL_0181:  ldloc.s    VB$t_ref$S1
      IL_0183:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.ListViewItem [System.Windows.Forms]System.Windows.Forms.ListView/ListViewItemCollection::Add(class [System.Windows.Forms]System.Windows.Forms.ListViewItem)
      IL_0188:  pop
//000126:             Next
      IL_0189:  nop
//000127:             lvPartitioningMethods.Items(0).Selected = True
//000128:         End Sub
//000129: 
//000130:         ''' <summary>Visualize the partitioning.</summary>
//000131:         Private Sub btnVisualize_Click(ByVal sender As Object, ByVal e As EventArgs) Handles btnVisualize.Click
//000132:             Dim numProcs = tbCores.Value
//000133:             Dim width = pbPartitionedImage.Width
//000134:             Dim height = pbPartitionedImage.Height
//000135:             Dim useParallelFor = rbParallelFor.Checked
//000136:             Dim useParallelForEach = rbParallelForEach.Checked
//000137:             _workFactor = tbWorkFactor.Value
//000138: 
//000139:             ' If we're using Parallel.ForEach or PLINQ, ensure a partitioning scheme was selected and use it.
//000140:             Dim selectedMethod As Tuple(Of String, Func(Of Integer(), Partitioner(Of Integer))) = Nothing
//000141:             If Not useParallelFor Then
//000142:                 If lvPartitioningMethods.SelectedIndices.Count = 0 Then
//000143:                     Exit Sub
//000144:                 Else
//000145:                     selectedMethod = DirectCast(lvPartitioningMethods.SelectedItems(0).Tag, Tuple(Of String, Func(Of Integer(), Partitioner(Of Integer))))
//000146:                 End If
//000147:             End If
//000148: 
//000149:             ' Make sure a workload was selected and use it.
//000150:             If lvWorkloads.SelectedItems.Count = 0 Then
//000151:                 Exit Sub
//000152:             End If
//000153: 
//000154:             Dim selectedWorkload = DirectCast(lvWorkloads.SelectedItems(0).Tag, Tuple(Of String, Func(Of Integer, Integer, Integer)))
//000155: 
//000156:             ' Create a new Bitmap to store the rendered output
//000157:             Dim bmp = New Bitmap(width, height)
//000158: 
//000159:             ' Disable the start button and kick off the background work.
//000160:             btnVisualize.Enabled = False
//000161:             ' Assign each thread a unique id.
//000162:             ' Get faster access to the Bitmap's contents.
//000163:             ' Time the operation.
//000164:             ' Create the partitioner to be used.
//000165:             ' Run the work with Parallel.ForEach
//000166:             ' PLINQ.
//000167:             ' Run the work with PLINQ. If a special partitioning method was selected, use relevant query operators
//000168:             ' to get PLINQ to use that partitioning approach.
//000169:             ' Return the total time from the task
//000170:             ' When the work completes, run the following on the UI thread.
//000171: 
//000172:             Task.Factory.StartNew(Function()
//000173:                                       Dim nextId = -1
//000174:                                       Dim threadId = New ThreadLocal(Of Integer)(Function() Interlocked.Increment(nextId))
//000175:                                       Using fastBmp As New FastBitmap(bmp)
//000176:                                           Dim sw = Stopwatch.StartNew()
//000177:                                           If useParallelFor Then
//000178:                                               If fastBmp Is Nothing Then
//000179:                                                   MsgBox("FastBmp Disposed")
//000180:                                               End If
//000181:                                               Parallel.[For](0, height, New ParallelOptions(), Sub(i)
//000182:                                                                                                    Dim id = threadId.Value
//000183:                                                                                                    DoWork(selectedWorkload.Item2(height, i))
//000184: 
//000185:                                                                                                    For j = 0 To width - 1
//000186:                                                                                                        fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000187:                                                                                                    Next
//000188:                                                                                                End Sub)
//000189:                                           Else
//000190:                                               Dim partitioner = selectedMethod.Item2(Enumerable.Range(0, height).ToArray())
//000191:                                               If useParallelForEach Then
//000192:                                                   Parallel.ForEach(partitioner, New ParallelOptions(), Sub(i)
//000193:                                                                                                            Dim id = threadId.Value
//000194:                                                                                                            DoWork(selectedWorkload.Item2(height, i))
//000195:                                                                                                            For j = 0 To width - 1
//000196:                                                                                                                fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000197:                                                                                                            Next
//000198:                                                                                                        End Sub)
//000199:                                               Else
//000200:                                                   Dim source = partitioner.AsParallel().WithDegreeOfParallelism(numProcs)
//000201:                                                   If selectedMethod.Item1 = PartitioningStripe Then
//000202:                                                       source = source.TakeWhile(Function(elem) True)
//000203:                                                   ElseIf selectedMethod.Item1 = PartitioningHash Then
//000204:                                                       source = source.Join(Enumerable.Range(0, height).AsParallel(), Function(i) i, Function(i) i, Function(i, ignore) i)
//000205:                                                   End If
//000206:                                                   source.ForAll(Sub(i)
//000207:                                                                     Dim id = threadId.Value
//000208:                                                                     DoWork(selectedWorkload.Item2(height, i))
//000209:                                                                     For j = 0 To width - 1
//000210:                                                                         fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000211:                                                                     Next
//000212:                                                                 End Sub)
//000213:                                               End If
//000214:                                           End If
//000215:                                           Return sw.Elapsed
//000216:                                       End Using
//000217:                                   End Function).ContinueWith(Sub(t)
//000218:                                                                  ' Dispose of the old image (if there was one) and display the new one.
//000219:                                                                  Dim old = pbPartitionedImage.Image
//000220:                                                                  pbPartitionedImage.Image = bmp
//000221:                                                                  If old IsNot Nothing Then
//000222:                                                                      old.Dispose()
//000223:                                                                  End If
//000224: 
//000225:                                                                  ' Re-enable controls on the form and display the elapsed time.
//000226:                                                                  btnVisualize.Enabled = True
//000227:                                                                  lblTime.Text = "Time: " & t.Result.ToString()
//000228:                                                              End Sub, TaskScheduler.FromCurrentSynchronizationContext())
//000229:         End Sub
//000230: 
//000231:         ''' <summary>Does an amount of work relative to the amount requested.</summary>
//000232:         ''' <param name="workAmount">The amount of work to perform.</param>
//000233:         <MethodImpl(MethodImplOptions.NoOptimization Or MethodImplOptions.NoInlining)>
//000234:         Private Shared Function DoWork(ByVal workAmount As Integer) As Integer
//000235:             Try
//000236:                 Dim value = 1
//000237:                 For i = 0 To workAmount - 1
//000238:                     value = value * workAmount
//000239:                 Next i
//000240:                 Return value
//000241:             Catch
//000242:                 Return 0
//000243:             End Try
//000244:         End Function
//000245: 
//000246:         ''' <summary>Update relevant portions of the form when the API radio buttons are checked.</summary>
//000247:         ''' <param name="sender">The radio button.</param>
//000248:         ''' <param name="e">The event args.</param>
//000249:         Private Sub rbAPI_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles rbParallelForEach.CheckedChanged,
//000250:             rbPLINQ.CheckedChanged, rbParallelFor.CheckedChanged
//000251:             lvPartitioningMethods.Enabled = Not rbParallelFor.Checked
//000252:             lvPartitioningMethods.HideSelection = Not lvPartitioningMethods.Enabled
//000253: 
//000254:             ' Recreate partitioning methods every time a radio button is checked,
//000255:             ' as which API is selected determines which partitioning methods are available.
//000256:             InitializePartitioningMethods()
//000257:         End Sub
//000258: 
//000259:         Private Sub tbCores_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbCores.ValueChanged
//000260:             toolTip1.SetToolTip(tbCores, tbCores.Value.ToString())
//000261:             InitializeColorPalette()
//000262:             Dim worker As Integer
//000263:             Dim io As Integer
//000264:             ThreadPool.GetMinThreads(worker, io)
//000265:             ThreadPool.SetMinThreads(tbCores.Value, io)
//000266:         End Sub
//000267: 
//000268:         Private Sub tbWorkFactor_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbWorkFactor.ValueChanged
//000269:             toolTip1.SetToolTip(tbWorkFactor, tbWorkFactor.Value.ToString())
//000270:         End Sub
//000271:     End Class
//000272: End Namespace
      IL_018a:  ldloca.s   VB$t_struct$L0
      IL_018c:  call       instance bool valuetype [mscorlib]System.Collections.Generic.List`1/Enumerator<class [mscorlib]System.Tuple`2<string,class [mscorlib]System.Func`2<int32[],class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32>>>>::MoveNext()
      IL_0191:  stloc.s    VB$CG$t_bool$S0
      IL_0193:  ldloc.s    VB$CG$t_bool$S0
      IL_0195:  brtrue.s   IL_0158

      IL_0197:  nop
      IL_0198:  leave.s    IL_01a9

    }  // end .try
    finally
    {
      IL_019a:  ldloca.s   VB$t_struct$L0
      IL_019c:  constrained. valuetype [mscorlib]System.Collections.Generic.List`1/Enumerator<class [mscorlib]System.Tuple`2<string,class [mscorlib]System.Func`2<int32[],class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32>>>>
      IL_01a2:  callvirt   instance void [mscorlib]System.IDisposable::Dispose()
      IL_01a7:  nop
      IL_01a8:  endfinally
//000127:             lvPartitioningMethods.Items(0).Selected = True
    }  // end handler
    IL_01a9:  ldarg.0
    IL_01aa:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ListView VisualizePartitioning.MainForm::lvPartitioningMethods
    IL_01af:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.ListView/ListViewItemCollection [System.Windows.Forms]System.Windows.Forms.ListView::get_Items()
    IL_01b4:  ldc.i4.0
    IL_01b5:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.ListViewItem [System.Windows.Forms]System.Windows.Forms.ListView/ListViewItemCollection::get_Item(int32)
    IL_01ba:  ldc.i4.1
    IL_01bb:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ListViewItem::set_Selected(bool)
    IL_01c0:  nop
//000128:         End Sub
    IL_01c1:  nop
    IL_01c2:  ret
  } // end of method MainForm::InitializePartitioningMethods

  .method private instance void  btnVisualize_Click(object sender,
                                                    class [mscorlib]System.EventArgs e) cil managed
  {
    // Code size       348 (0x15c)
    .maxstack  3
    .locals init ([0] class VisualizePartitioning.MainForm/_Closure$__5 $VB$Closure_ClosureVariable_82_6F,
             [1] bool VB$CG$t_bool$S0,
             [2] bool VB$CG$t_bool$S1)
//000129: 
//000130:         ''' <summary>Visualize the partitioning.</summary>
//000131:         Private Sub btnVisualize_Click(ByVal sender As Object, ByVal e As EventArgs) Handles btnVisualize.Click
    IL_0000:  nop
//000132:             Dim numProcs = tbCores.Value
//000133:             Dim width = pbPartitionedImage.Width
//000134:             Dim height = pbPartitionedImage.Height
//000135:             Dim useParallelFor = rbParallelFor.Checked
//000136:             Dim useParallelForEach = rbParallelForEach.Checked
//000137:             _workFactor = tbWorkFactor.Value
//000138: 
//000139:             ' If we're using Parallel.ForEach or PLINQ, ensure a partitioning scheme was selected and use it.
//000140:             Dim selectedMethod As Tuple(Of String, Func(Of Integer(), Partitioner(Of Integer))) = Nothing
//000141:             If Not useParallelFor Then
//000142:                 If lvPartitioningMethods.SelectedIndices.Count = 0 Then
//000143:                     Exit Sub
//000144:                 Else
//000145:                     selectedMethod = DirectCast(lvPartitioningMethods.SelectedItems(0).Tag, Tuple(Of String, Func(Of Integer(), Partitioner(Of Integer))))
//000146:                 End If
//000147:             End If
//000148: 
//000149:             ' Make sure a workload was selected and use it.
//000150:             If lvWorkloads.SelectedItems.Count = 0 Then
//000151:                 Exit Sub
//000152:             End If
//000153: 
//000154:             Dim selectedWorkload = DirectCast(lvWorkloads.SelectedItems(0).Tag, Tuple(Of String, Func(Of Integer, Integer, Integer)))
//000155: 
//000156:             ' Create a new Bitmap to store the rendered output
//000157:             Dim bmp = New Bitmap(width, height)
//000158: 
//000159:             ' Disable the start button and kick off the background work.
//000160:             btnVisualize.Enabled = False
//000161:             ' Assign each thread a unique id.
//000162:             ' Get faster access to the Bitmap's contents.
//000163:             ' Time the operation.
//000164:             ' Create the partitioner to be used.
//000165:             ' Run the work with Parallel.ForEach
//000166:             ' PLINQ.
//000167:             ' Run the work with PLINQ. If a special partitioning method was selected, use relevant query operators
//000168:             ' to get PLINQ to use that partitioning approach.
//000169:             ' Return the total time from the task
//000170:             ' When the work completes, run the following on the UI thread.
//000171: 
//000172:             Task.Factory.StartNew(Function()
//000173:                                       Dim nextId = -1
//000174:                                       Dim threadId = New ThreadLocal(Of Integer)(Function() Interlocked.Increment(nextId))
//000175:                                       Using fastBmp As New FastBitmap(bmp)
//000176:                                           Dim sw = Stopwatch.StartNew()
//000177:                                           If useParallelFor Then
//000178:                                               If fastBmp Is Nothing Then
//000179:                                                   MsgBox("FastBmp Disposed")
//000180:                                               End If
//000181:                                               Parallel.[For](0, height, New ParallelOptions(), Sub(i)
//000182:                                                                                                    Dim id = threadId.Value
//000183:                                                                                                    DoWork(selectedWorkload.Item2(height, i))
//000184: 
//000185:                                                                                                    For j = 0 To width - 1
//000186:                                                                                                        fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000187:                                                                                                    Next
//000188:                                                                                                End Sub)
//000189:                                           Else
//000190:                                               Dim partitioner = selectedMethod.Item2(Enumerable.Range(0, height).ToArray())
//000191:                                               If useParallelForEach Then
//000192:                                                   Parallel.ForEach(partitioner, New ParallelOptions(), Sub(i)
//000193:                                                                                                            Dim id = threadId.Value
//000194:                                                                                                            DoWork(selectedWorkload.Item2(height, i))
//000195:                                                                                                            For j = 0 To width - 1
//000196:                                                                                                                fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000197:                                                                                                            Next
//000198:                                                                                                        End Sub)
//000199:                                               Else
//000200:                                                   Dim source = partitioner.AsParallel().WithDegreeOfParallelism(numProcs)
//000201:                                                   If selectedMethod.Item1 = PartitioningStripe Then
//000202:                                                       source = source.TakeWhile(Function(elem) True)
//000203:                                                   ElseIf selectedMethod.Item1 = PartitioningHash Then
//000204:                                                       source = source.Join(Enumerable.Range(0, height).AsParallel(), Function(i) i, Function(i) i, Function(i, ignore) i)
//000205:                                                   End If
//000206:                                                   source.ForAll(Sub(i)
//000207:                                                                     Dim id = threadId.Value
//000208:                                                                     DoWork(selectedWorkload.Item2(height, i))
//000209:                                                                     For j = 0 To width - 1
//000210:                                                                         fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000211:                                                                     Next
//000212:                                                                 End Sub)
//000213:                                               End If
//000214:                                           End If
//000215:                                           Return sw.Elapsed
//000216:                                       End Using
//000217:                                   End Function).ContinueWith(Sub(t)
//000218:                                                                  ' Dispose of the old image (if there was one) and display the new one.
//000219:                                                                  Dim old = pbPartitionedImage.Image
//000220:                                                                  pbPartitionedImage.Image = bmp
//000221:                                                                  If old IsNot Nothing Then
//000222:                                                                      old.Dispose()
//000223:                                                                  End If
//000224: 
//000225:                                                                  ' Re-enable controls on the form and display the elapsed time.
//000226:                                                                  btnVisualize.Enabled = True
//000227:                                                                  lblTime.Text = "Time: " & t.Result.ToString()
//000228:                                                              End Sub, TaskScheduler.FromCurrentSynchronizationContext())
//000229:         End Sub
//000230: 
//000231:         ''' <summary>Does an amount of work relative to the amount requested.</summary>
//000232:         ''' <param name="workAmount">The amount of work to perform.</param>
//000233:         <MethodImpl(MethodImplOptions.NoOptimization Or MethodImplOptions.NoInlining)>
//000234:         Private Shared Function DoWork(ByVal workAmount As Integer) As Integer
//000235:             Try
//000236:                 Dim value = 1
//000237:                 For i = 0 To workAmount - 1
//000238:                     value = value * workAmount
//000239:                 Next i
//000240:                 Return value
//000241:             Catch
//000242:                 Return 0
//000243:             End Try
//000244:         End Function
//000245: 
//000246:         ''' <summary>Update relevant portions of the form when the API radio buttons are checked.</summary>
//000247:         ''' <param name="sender">The radio button.</param>
//000248:         ''' <param name="e">The event args.</param>
//000249:         Private Sub rbAPI_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles rbParallelForEach.CheckedChanged,
//000250:             rbPLINQ.CheckedChanged, rbParallelFor.CheckedChanged
//000251:             lvPartitioningMethods.Enabled = Not rbParallelFor.Checked
//000252:             lvPartitioningMethods.HideSelection = Not lvPartitioningMethods.Enabled
//000253: 
//000254:             ' Recreate partitioning methods every time a radio button is checked,
//000255:             ' as which API is selected determines which partitioning methods are available.
//000256:             InitializePartitioningMethods()
//000257:         End Sub
//000258: 
//000259:         Private Sub tbCores_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbCores.ValueChanged
//000260:             toolTip1.SetToolTip(tbCores, tbCores.Value.ToString())
//000261:             InitializeColorPalette()
//000262:             Dim worker As Integer
//000263:             Dim io As Integer
//000264:             ThreadPool.GetMinThreads(worker, io)
//000265:             ThreadPool.SetMinThreads(tbCores.Value, io)
//000266:         End Sub
//000267: 
//000268:         Private Sub tbWorkFactor_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbWorkFactor.ValueChanged
//000269:             toolTip1.SetToolTip(tbWorkFactor, tbWorkFactor.Value.ToString())
//000270:         End Sub
//000271:     End Class
//000272: End Namespace
    IL_0001:  newobj     instance void VisualizePartitioning.MainForm/_Closure$__5::.ctor()
    IL_0006:  stloc.0
    IL_0007:  ldloc.0
    IL_0008:  ldarg.0
    IL_0009:  stfld      class VisualizePartitioning.MainForm VisualizePartitioning.MainForm/_Closure$__5::$VB$Me
//000132:             Dim numProcs = tbCores.Value
    IL_000e:  ldloc.0
    IL_000f:  ldarg.0
    IL_0010:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.TrackBar VisualizePartitioning.MainForm::get_tbCores()
    IL_0015:  callvirt   instance int32 [System.Windows.Forms]System.Windows.Forms.TrackBar::get_Value()
    IL_001a:  stfld      int32 VisualizePartitioning.MainForm/_Closure$__5::$VB$Local_numProcs
//000133:             Dim width = pbPartitionedImage.Width
    IL_001f:  ldloc.0
    IL_0020:  ldarg.0
    IL_0021:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox VisualizePartitioning.MainForm::pbPartitionedImage
    IL_0026:  callvirt   instance int32 [System.Windows.Forms]System.Windows.Forms.Control::get_Width()
    IL_002b:  stfld      int32 VisualizePartitioning.MainForm/_Closure$__5::$VB$Local_width
//000134:             Dim height = pbPartitionedImage.Height
    IL_0030:  ldloc.0
    IL_0031:  ldarg.0
    IL_0032:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox VisualizePartitioning.MainForm::pbPartitionedImage
    IL_0037:  callvirt   instance int32 [System.Windows.Forms]System.Windows.Forms.Control::get_Height()
    IL_003c:  stfld      int32 VisualizePartitioning.MainForm/_Closure$__5::$VB$Local_height
//000135:             Dim useParallelFor = rbParallelFor.Checked
    IL_0041:  ldloc.0
    IL_0042:  ldarg.0
    IL_0043:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.RadioButton VisualizePartitioning.MainForm::get_rbParallelFor()
    IL_0048:  callvirt   instance bool [System.Windows.Forms]System.Windows.Forms.RadioButton::get_Checked()
    IL_004d:  stfld      bool VisualizePartitioning.MainForm/_Closure$__5::$VB$Local_useParallelFor
//000136:             Dim useParallelForEach = rbParallelForEach.Checked
    IL_0052:  ldloc.0
    IL_0053:  ldarg.0
    IL_0054:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.RadioButton VisualizePartitioning.MainForm::get_rbParallelForEach()
    IL_0059:  callvirt   instance bool [System.Windows.Forms]System.Windows.Forms.RadioButton::get_Checked()
    IL_005e:  stfld      bool VisualizePartitioning.MainForm/_Closure$__5::$VB$Local_useParallelForEach
//000137:             _workFactor = tbWorkFactor.Value
    IL_0063:  ldarg.0
    IL_0064:  ldarg.0
    IL_0065:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.TrackBar VisualizePartitioning.MainForm::get_tbWorkFactor()
    IL_006a:  callvirt   instance int32 [System.Windows.Forms]System.Windows.Forms.TrackBar::get_Value()
    IL_006f:  stfld      int32 VisualizePartitioning.MainForm::_workFactor
//000138: 
//000139:             ' If we're using Parallel.ForEach or PLINQ, ensure a partitioning scheme was selected and use it.
//000140:             Dim selectedMethod As Tuple(Of String, Func(Of Integer(), Partitioner(Of Integer))) = Nothing
    IL_0074:  ldloc.0
    IL_0075:  ldnull
    IL_0076:  stfld      class [mscorlib]System.Tuple`2<string,class [mscorlib]System.Func`2<int32[],class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32>>> VisualizePartitioning.MainForm/_Closure$__5::$VB$Local_selectedMethod
//000141:             If Not useParallelFor Then
    IL_007b:  ldloc.0
    IL_007c:  ldfld      bool VisualizePartitioning.MainForm/_Closure$__5::$VB$Local_useParallelFor
    IL_0081:  ldc.i4.0
    IL_0082:  ceq
    IL_0084:  stloc.1
//000142:                 If lvPartitioningMethods.SelectedIndices.Count = 0 Then
//000143:                     Exit Sub
//000144:                 Else
//000145:                     selectedMethod = DirectCast(lvPartitioningMethods.SelectedItems(0).Tag, Tuple(Of String, Func(Of Integer(), Partitioner(Of Integer))))
//000146:                 End If
//000147:             End If
//000148: 
//000149:             ' Make sure a workload was selected and use it.
//000150:             If lvWorkloads.SelectedItems.Count = 0 Then
//000151:                 Exit Sub
//000152:             End If
//000153: 
//000154:             Dim selectedWorkload = DirectCast(lvWorkloads.SelectedItems(0).Tag, Tuple(Of String, Func(Of Integer, Integer, Integer)))
//000155: 
//000156:             ' Create a new Bitmap to store the rendered output
//000157:             Dim bmp = New Bitmap(width, height)
//000158: 
//000159:             ' Disable the start button and kick off the background work.
//000160:             btnVisualize.Enabled = False
//000161:             ' Assign each thread a unique id.
//000162:             ' Get faster access to the Bitmap's contents.
//000163:             ' Time the operation.
//000164:             ' Create the partitioner to be used.
//000165:             ' Run the work with Parallel.ForEach
//000166:             ' PLINQ.
//000167:             ' Run the work with PLINQ. If a special partitioning method was selected, use relevant query operators
//000168:             ' to get PLINQ to use that partitioning approach.
//000169:             ' Return the total time from the task
//000170:             ' When the work completes, run the following on the UI thread.
//000171: 
//000172:             Task.Factory.StartNew(Function()
//000173:                                       Dim nextId = -1
//000174:                                       Dim threadId = New ThreadLocal(Of Integer)(Function() Interlocked.Increment(nextId))
//000175:                                       Using fastBmp As New FastBitmap(bmp)
//000176:                                           Dim sw = Stopwatch.StartNew()
//000177:                                           If useParallelFor Then
//000178:                                               If fastBmp Is Nothing Then
//000179:                                                   MsgBox("FastBmp Disposed")
//000180:                                               End If
//000181:                                               Parallel.[For](0, height, New ParallelOptions(), Sub(i)
//000182:                                                                                                    Dim id = threadId.Value
//000183:                                                                                                    DoWork(selectedWorkload.Item2(height, i))
//000184: 
//000185:                                                                                                    For j = 0 To width - 1
//000186:                                                                                                        fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000187:                                                                                                    Next
//000188:                                                                                                End Sub)
//000189:                                           Else
//000190:                                               Dim partitioner = selectedMethod.Item2(Enumerable.Range(0, height).ToArray())
//000191:                                               If useParallelForEach Then
//000192:                                                   Parallel.ForEach(partitioner, New ParallelOptions(), Sub(i)
//000193:                                                                                                            Dim id = threadId.Value
//000194:                                                                                                            DoWork(selectedWorkload.Item2(height, i))
//000195:                                                                                                            For j = 0 To width - 1
//000196:                                                                                                                fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000197:                                                                                                            Next
//000198:                                                                                                        End Sub)
//000199:                                               Else
//000200:                                                   Dim source = partitioner.AsParallel().WithDegreeOfParallelism(numProcs)
//000201:                                                   If selectedMethod.Item1 = PartitioningStripe Then
//000202:                                                       source = source.TakeWhile(Function(elem) True)
//000203:                                                   ElseIf selectedMethod.Item1 = PartitioningHash Then
//000204:                                                       source = source.Join(Enumerable.Range(0, height).AsParallel(), Function(i) i, Function(i) i, Function(i, ignore) i)
//000205:                                                   End If
//000206:                                                   source.ForAll(Sub(i)
//000207:                                                                     Dim id = threadId.Value
//000208:                                                                     DoWork(selectedWorkload.Item2(height, i))
//000209:                                                                     For j = 0 To width - 1
//000210:                                                                         fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000211:                                                                     Next
//000212:                                                                 End Sub)
//000213:                                               End If
//000214:                                           End If
//000215:                                           Return sw.Elapsed
//000216:                                       End Using
//000217:                                   End Function).ContinueWith(Sub(t)
//000218:                                                                  ' Dispose of the old image (if there was one) and display the new one.
//000219:                                                                  Dim old = pbPartitionedImage.Image
//000220:                                                                  pbPartitionedImage.Image = bmp
//000221:                                                                  If old IsNot Nothing Then
//000222:                                                                      old.Dispose()
//000223:                                                                  End If
//000224: 
//000225:                                                                  ' Re-enable controls on the form and display the elapsed time.
//000226:                                                                  btnVisualize.Enabled = True
//000227:                                                                  lblTime.Text = "Time: " & t.Result.ToString()
//000228:                                                              End Sub, TaskScheduler.FromCurrentSynchronizationContext())
//000229:         End Sub
//000230: 
//000231:         ''' <summary>Does an amount of work relative to the amount requested.</summary>
//000232:         ''' <param name="workAmount">The amount of work to perform.</param>
//000233:         <MethodImpl(MethodImplOptions.NoOptimization Or MethodImplOptions.NoInlining)>
//000234:         Private Shared Function DoWork(ByVal workAmount As Integer) As Integer
//000235:             Try
//000236:                 Dim value = 1
//000237:                 For i = 0 To workAmount - 1
//000238:                     value = value * workAmount
//000239:                 Next i
//000240:                 Return value
//000241:             Catch
//000242:                 Return 0
//000243:             End Try
//000244:         End Function
//000245: 
//000246:         ''' <summary>Update relevant portions of the form when the API radio buttons are checked.</summary>
//000247:         ''' <param name="sender">The radio button.</param>
//000248:         ''' <param name="e">The event args.</param>
//000249:         Private Sub rbAPI_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles rbParallelForEach.CheckedChanged,
//000250:             rbPLINQ.CheckedChanged, rbParallelFor.CheckedChanged
//000251:             lvPartitioningMethods.Enabled = Not rbParallelFor.Checked
//000252:             lvPartitioningMethods.HideSelection = Not lvPartitioningMethods.Enabled
//000253: 
//000254:             ' Recreate partitioning methods every time a radio button is checked,
//000255:             ' as which API is selected determines which partitioning methods are available.
//000256:             InitializePartitioningMethods()
//000257:         End Sub
//000258: 
//000259:         Private Sub tbCores_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbCores.ValueChanged
//000260:             toolTip1.SetToolTip(tbCores, tbCores.Value.ToString())
//000261:             InitializeColorPalette()
//000262:             Dim worker As Integer
//000263:             Dim io As Integer
//000264:             ThreadPool.GetMinThreads(worker, io)
//000265:             ThreadPool.SetMinThreads(tbCores.Value, io)
//000266:         End Sub
//000267: 
//000268:         Private Sub tbWorkFactor_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbWorkFactor.ValueChanged
//000269:             toolTip1.SetToolTip(tbWorkFactor, tbWorkFactor.Value.ToString())
//000270:         End Sub
//000271:     End Class
//000272: End Namespace
    IL_0085:  ldloc.1
    IL_0086:  brfalse.s  IL_00ca

//000142:                 If lvPartitioningMethods.SelectedIndices.Count = 0 Then
    IL_0088:  ldarg.0
    IL_0089:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ListView VisualizePartitioning.MainForm::lvPartitioningMethods
    IL_008e:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.ListView/SelectedIndexCollection [System.Windows.Forms]System.Windows.Forms.ListView::get_SelectedIndices()
    IL_0093:  callvirt   instance int32 [System.Windows.Forms]System.Windows.Forms.ListView/SelectedIndexCollection::get_Count()
    IL_0098:  ldc.i4.0
    IL_0099:  ceq
    IL_009b:  stloc.2
//000143:                     Exit Sub
//000144:                 Else
//000145:                     selectedMethod = DirectCast(lvPartitioningMethods.SelectedItems(0).Tag, Tuple(Of String, Func(Of Integer(), Partitioner(Of Integer))))
//000146:                 End If
//000147:             End If
//000148: 
//000149:             ' Make sure a workload was selected and use it.
//000150:             If lvWorkloads.SelectedItems.Count = 0 Then
//000151:                 Exit Sub
//000152:             End If
//000153: 
//000154:             Dim selectedWorkload = DirectCast(lvWorkloads.SelectedItems(0).Tag, Tuple(Of String, Func(Of Integer, Integer, Integer)))
//000155: 
//000156:             ' Create a new Bitmap to store the rendered output
//000157:             Dim bmp = New Bitmap(width, height)
//000158: 
//000159:             ' Disable the start button and kick off the background work.
//000160:             btnVisualize.Enabled = False
//000161:             ' Assign each thread a unique id.
//000162:             ' Get faster access to the Bitmap's contents.
//000163:             ' Time the operation.
//000164:             ' Create the partitioner to be used.
//000165:             ' Run the work with Parallel.ForEach
//000166:             ' PLINQ.
//000167:             ' Run the work with PLINQ. If a special partitioning method was selected, use relevant query operators
//000168:             ' to get PLINQ to use that partitioning approach.
//000169:             ' Return the total time from the task
//000170:             ' When the work completes, run the following on the UI thread.
//000171: 
//000172:             Task.Factory.StartNew(Function()
//000173:                                       Dim nextId = -1
//000174:                                       Dim threadId = New ThreadLocal(Of Integer)(Function() Interlocked.Increment(nextId))
//000175:                                       Using fastBmp As New FastBitmap(bmp)
//000176:                                           Dim sw = Stopwatch.StartNew()
//000177:                                           If useParallelFor Then
//000178:                                               If fastBmp Is Nothing Then
//000179:                                                   MsgBox("FastBmp Disposed")
//000180:                                               End If
//000181:                                               Parallel.[For](0, height, New ParallelOptions(), Sub(i)
//000182:                                                                                                    Dim id = threadId.Value
//000183:                                                                                                    DoWork(selectedWorkload.Item2(height, i))
//000184: 
//000185:                                                                                                    For j = 0 To width - 1
//000186:                                                                                                        fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000187:                                                                                                    Next
//000188:                                                                                                End Sub)
//000189:                                           Else
//000190:                                               Dim partitioner = selectedMethod.Item2(Enumerable.Range(0, height).ToArray())
//000191:                                               If useParallelForEach Then
//000192:                                                   Parallel.ForEach(partitioner, New ParallelOptions(), Sub(i)
//000193:                                                                                                            Dim id = threadId.Value
//000194:                                                                                                            DoWork(selectedWorkload.Item2(height, i))
//000195:                                                                                                            For j = 0 To width - 1
//000196:                                                                                                                fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000197:                                                                                                            Next
//000198:                                                                                                        End Sub)
//000199:                                               Else
//000200:                                                   Dim source = partitioner.AsParallel().WithDegreeOfParallelism(numProcs)
//000201:                                                   If selectedMethod.Item1 = PartitioningStripe Then
//000202:                                                       source = source.TakeWhile(Function(elem) True)
//000203:                                                   ElseIf selectedMethod.Item1 = PartitioningHash Then
//000204:                                                       source = source.Join(Enumerable.Range(0, height).AsParallel(), Function(i) i, Function(i) i, Function(i, ignore) i)
//000205:                                                   End If
//000206:                                                   source.ForAll(Sub(i)
//000207:                                                                     Dim id = threadId.Value
//000208:                                                                     DoWork(selectedWorkload.Item2(height, i))
//000209:                                                                     For j = 0 To width - 1
//000210:                                                                         fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000211:                                                                     Next
//000212:                                                                 End Sub)
//000213:                                               End If
//000214:                                           End If
//000215:                                           Return sw.Elapsed
//000216:                                       End Using
//000217:                                   End Function).ContinueWith(Sub(t)
//000218:                                                                  ' Dispose of the old image (if there was one) and display the new one.
//000219:                                                                  Dim old = pbPartitionedImage.Image
//000220:                                                                  pbPartitionedImage.Image = bmp
//000221:                                                                  If old IsNot Nothing Then
//000222:                                                                      old.Dispose()
//000223:                                                                  End If
//000224: 
//000225:                                                                  ' Re-enable controls on the form and display the elapsed time.
//000226:                                                                  btnVisualize.Enabled = True
//000227:                                                                  lblTime.Text = "Time: " & t.Result.ToString()
//000228:                                                              End Sub, TaskScheduler.FromCurrentSynchronizationContext())
//000229:         End Sub
//000230: 
//000231:         ''' <summary>Does an amount of work relative to the amount requested.</summary>
//000232:         ''' <param name="workAmount">The amount of work to perform.</param>
//000233:         <MethodImpl(MethodImplOptions.NoOptimization Or MethodImplOptions.NoInlining)>
//000234:         Private Shared Function DoWork(ByVal workAmount As Integer) As Integer
//000235:             Try
//000236:                 Dim value = 1
//000237:                 For i = 0 To workAmount - 1
//000238:                     value = value * workAmount
//000239:                 Next i
//000240:                 Return value
//000241:             Catch
//000242:                 Return 0
//000243:             End Try
//000244:         End Function
//000245: 
//000246:         ''' <summary>Update relevant portions of the form when the API radio buttons are checked.</summary>
//000247:         ''' <param name="sender">The radio button.</param>
//000248:         ''' <param name="e">The event args.</param>
//000249:         Private Sub rbAPI_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles rbParallelForEach.CheckedChanged,
//000250:             rbPLINQ.CheckedChanged, rbParallelFor.CheckedChanged
//000251:             lvPartitioningMethods.Enabled = Not rbParallelFor.Checked
//000252:             lvPartitioningMethods.HideSelection = Not lvPartitioningMethods.Enabled
//000253: 
//000254:             ' Recreate partitioning methods every time a radio button is checked,
//000255:             ' as which API is selected determines which partitioning methods are available.
//000256:             InitializePartitioningMethods()
//000257:         End Sub
//000258: 
//000259:         Private Sub tbCores_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbCores.ValueChanged
//000260:             toolTip1.SetToolTip(tbCores, tbCores.Value.ToString())
//000261:             InitializeColorPalette()
//000262:             Dim worker As Integer
//000263:             Dim io As Integer
//000264:             ThreadPool.GetMinThreads(worker, io)
//000265:             ThreadPool.SetMinThreads(tbCores.Value, io)
//000266:         End Sub
//000267: 
//000268:         Private Sub tbWorkFactor_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbWorkFactor.ValueChanged
//000269:             toolTip1.SetToolTip(tbWorkFactor, tbWorkFactor.Value.ToString())
//000270:         End Sub
//000271:     End Class
//000272: End Namespace
    IL_009c:  ldloc.2
    IL_009d:  brfalse.s  IL_00a7

//000143:                     Exit Sub
    IL_009f:  nop
    IL_00a0:  br         IL_015a

    IL_00a5:  br.s       IL_00c9

//000144:                 Else
    IL_00a7:  nop
//000145:                     selectedMethod = DirectCast(lvPartitioningMethods.SelectedItems(0).Tag, Tuple(Of String, Func(Of Integer(), Partitioner(Of Integer))))
    IL_00a8:  ldloc.0
    IL_00a9:  ldarg.0
    IL_00aa:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ListView VisualizePartitioning.MainForm::lvPartitioningMethods
    IL_00af:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.ListView/SelectedListViewItemCollection [System.Windows.Forms]System.Windows.Forms.ListView::get_SelectedItems()
    IL_00b4:  ldc.i4.0
    IL_00b5:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.ListViewItem [System.Windows.Forms]System.Windows.Forms.ListView/SelectedListViewItemCollection::get_Item(int32)
    IL_00ba:  callvirt   instance object [System.Windows.Forms]System.Windows.Forms.ListViewItem::get_Tag()
    IL_00bf:  castclass  class [mscorlib]System.Tuple`2<string,class [mscorlib]System.Func`2<int32[],class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32>>>
    IL_00c4:  stfld      class [mscorlib]System.Tuple`2<string,class [mscorlib]System.Func`2<int32[],class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32>>> VisualizePartitioning.MainForm/_Closure$__5::$VB$Local_selectedMethod
//000146:                 End If
    IL_00c9:  nop
//000147:             End If
    IL_00ca:  nop
//000148: 
//000149:             ' Make sure a workload was selected and use it.
//000150:             If lvWorkloads.SelectedItems.Count = 0 Then
    IL_00cb:  ldarg.0
    IL_00cc:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ListView VisualizePartitioning.MainForm::lvWorkloads
    IL_00d1:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.ListView/SelectedListViewItemCollection [System.Windows.Forms]System.Windows.Forms.ListView::get_SelectedItems()
    IL_00d6:  callvirt   instance int32 [System.Windows.Forms]System.Windows.Forms.ListView/SelectedListViewItemCollection::get_Count()
    IL_00db:  ldc.i4.0
    IL_00dc:  ceq
    IL_00de:  stloc.2
//000151:                 Exit Sub
//000152:             End If
//000153: 
//000154:             Dim selectedWorkload = DirectCast(lvWorkloads.SelectedItems(0).Tag, Tuple(Of String, Func(Of Integer, Integer, Integer)))
//000155: 
//000156:             ' Create a new Bitmap to store the rendered output
//000157:             Dim bmp = New Bitmap(width, height)
//000158: 
//000159:             ' Disable the start button and kick off the background work.
//000160:             btnVisualize.Enabled = False
//000161:             ' Assign each thread a unique id.
//000162:             ' Get faster access to the Bitmap's contents.
//000163:             ' Time the operation.
//000164:             ' Create the partitioner to be used.
//000165:             ' Run the work with Parallel.ForEach
//000166:             ' PLINQ.
//000167:             ' Run the work with PLINQ. If a special partitioning method was selected, use relevant query operators
//000168:             ' to get PLINQ to use that partitioning approach.
//000169:             ' Return the total time from the task
//000170:             ' When the work completes, run the following on the UI thread.
//000171: 
//000172:             Task.Factory.StartNew(Function()
//000173:                                       Dim nextId = -1
//000174:                                       Dim threadId = New ThreadLocal(Of Integer)(Function() Interlocked.Increment(nextId))
//000175:                                       Using fastBmp As New FastBitmap(bmp)
//000176:                                           Dim sw = Stopwatch.StartNew()
//000177:                                           If useParallelFor Then
//000178:                                               If fastBmp Is Nothing Then
//000179:                                                   MsgBox("FastBmp Disposed")
//000180:                                               End If
//000181:                                               Parallel.[For](0, height, New ParallelOptions(), Sub(i)
//000182:                                                                                                    Dim id = threadId.Value
//000183:                                                                                                    DoWork(selectedWorkload.Item2(height, i))
//000184: 
//000185:                                                                                                    For j = 0 To width - 1
//000186:                                                                                                        fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000187:                                                                                                    Next
//000188:                                                                                                End Sub)
//000189:                                           Else
//000190:                                               Dim partitioner = selectedMethod.Item2(Enumerable.Range(0, height).ToArray())
//000191:                                               If useParallelForEach Then
//000192:                                                   Parallel.ForEach(partitioner, New ParallelOptions(), Sub(i)
//000193:                                                                                                            Dim id = threadId.Value
//000194:                                                                                                            DoWork(selectedWorkload.Item2(height, i))
//000195:                                                                                                            For j = 0 To width - 1
//000196:                                                                                                                fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000197:                                                                                                            Next
//000198:                                                                                                        End Sub)
//000199:                                               Else
//000200:                                                   Dim source = partitioner.AsParallel().WithDegreeOfParallelism(numProcs)
//000201:                                                   If selectedMethod.Item1 = PartitioningStripe Then
//000202:                                                       source = source.TakeWhile(Function(elem) True)
//000203:                                                   ElseIf selectedMethod.Item1 = PartitioningHash Then
//000204:                                                       source = source.Join(Enumerable.Range(0, height).AsParallel(), Function(i) i, Function(i) i, Function(i, ignore) i)
//000205:                                                   End If
//000206:                                                   source.ForAll(Sub(i)
//000207:                                                                     Dim id = threadId.Value
//000208:                                                                     DoWork(selectedWorkload.Item2(height, i))
//000209:                                                                     For j = 0 To width - 1
//000210:                                                                         fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000211:                                                                     Next
//000212:                                                                 End Sub)
//000213:                                               End If
//000214:                                           End If
//000215:                                           Return sw.Elapsed
//000216:                                       End Using
//000217:                                   End Function).ContinueWith(Sub(t)
//000218:                                                                  ' Dispose of the old image (if there was one) and display the new one.
//000219:                                                                  Dim old = pbPartitionedImage.Image
//000220:                                                                  pbPartitionedImage.Image = bmp
//000221:                                                                  If old IsNot Nothing Then
//000222:                                                                      old.Dispose()
//000223:                                                                  End If
//000224: 
//000225:                                                                  ' Re-enable controls on the form and display the elapsed time.
//000226:                                                                  btnVisualize.Enabled = True
//000227:                                                                  lblTime.Text = "Time: " & t.Result.ToString()
//000228:                                                              End Sub, TaskScheduler.FromCurrentSynchronizationContext())
//000229:         End Sub
//000230: 
//000231:         ''' <summary>Does an amount of work relative to the amount requested.</summary>
//000232:         ''' <param name="workAmount">The amount of work to perform.</param>
//000233:         <MethodImpl(MethodImplOptions.NoOptimization Or MethodImplOptions.NoInlining)>
//000234:         Private Shared Function DoWork(ByVal workAmount As Integer) As Integer
//000235:             Try
//000236:                 Dim value = 1
//000237:                 For i = 0 To workAmount - 1
//000238:                     value = value * workAmount
//000239:                 Next i
//000240:                 Return value
//000241:             Catch
//000242:                 Return 0
//000243:             End Try
//000244:         End Function
//000245: 
//000246:         ''' <summary>Update relevant portions of the form when the API radio buttons are checked.</summary>
//000247:         ''' <param name="sender">The radio button.</param>
//000248:         ''' <param name="e">The event args.</param>
//000249:         Private Sub rbAPI_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles rbParallelForEach.CheckedChanged,
//000250:             rbPLINQ.CheckedChanged, rbParallelFor.CheckedChanged
//000251:             lvPartitioningMethods.Enabled = Not rbParallelFor.Checked
//000252:             lvPartitioningMethods.HideSelection = Not lvPartitioningMethods.Enabled
//000253: 
//000254:             ' Recreate partitioning methods every time a radio button is checked,
//000255:             ' as which API is selected determines which partitioning methods are available.
//000256:             InitializePartitioningMethods()
//000257:         End Sub
//000258: 
//000259:         Private Sub tbCores_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbCores.ValueChanged
//000260:             toolTip1.SetToolTip(tbCores, tbCores.Value.ToString())
//000261:             InitializeColorPalette()
//000262:             Dim worker As Integer
//000263:             Dim io As Integer
//000264:             ThreadPool.GetMinThreads(worker, io)
//000265:             ThreadPool.SetMinThreads(tbCores.Value, io)
//000266:         End Sub
//000267: 
//000268:         Private Sub tbWorkFactor_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbWorkFactor.ValueChanged
//000269:             toolTip1.SetToolTip(tbWorkFactor, tbWorkFactor.Value.ToString())
//000270:         End Sub
//000271:     End Class
//000272: End Namespace
    IL_00df:  ldloc.2
    IL_00e0:  brfalse.s  IL_00e5

//000151:                 Exit Sub
    IL_00e2:  nop
    IL_00e3:  br.s       IL_015a

//000152:             End If
    IL_00e5:  nop
//000153: 
//000154:             Dim selectedWorkload = DirectCast(lvWorkloads.SelectedItems(0).Tag, Tuple(Of String, Func(Of Integer, Integer, Integer)))
    IL_00e6:  ldloc.0
    IL_00e7:  ldarg.0
    IL_00e8:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ListView VisualizePartitioning.MainForm::lvWorkloads
    IL_00ed:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.ListView/SelectedListViewItemCollection [System.Windows.Forms]System.Windows.Forms.ListView::get_SelectedItems()
    IL_00f2:  ldc.i4.0
    IL_00f3:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.ListViewItem [System.Windows.Forms]System.Windows.Forms.ListView/SelectedListViewItemCollection::get_Item(int32)
    IL_00f8:  callvirt   instance object [System.Windows.Forms]System.Windows.Forms.ListViewItem::get_Tag()
    IL_00fd:  castclass  class [mscorlib]System.Tuple`2<string,class [mscorlib]System.Func`3<int32,int32,int32>>
    IL_0102:  stfld      class [mscorlib]System.Tuple`2<string,class [mscorlib]System.Func`3<int32,int32,int32>> VisualizePartitioning.MainForm/_Closure$__5::$VB$Local_selectedWorkload
//000155: 
//000156:             ' Create a new Bitmap to store the rendered output
//000157:             Dim bmp = New Bitmap(width, height)
    IL_0107:  ldloc.0
    IL_0108:  ldloc.0
    IL_0109:  ldfld      int32 VisualizePartitioning.MainForm/_Closure$__5::$VB$Local_width
    IL_010e:  ldloc.0
    IL_010f:  ldfld      int32 VisualizePartitioning.MainForm/_Closure$__5::$VB$Local_height
    IL_0114:  newobj     instance void [System.Drawing]System.Drawing.Bitmap::.ctor(int32,
                                                                                    int32)
    IL_0119:  stfld      class [System.Drawing]System.Drawing.Bitmap VisualizePartitioning.MainForm/_Closure$__5::$VB$Local_bmp
//000158: 
//000159:             ' Disable the start button and kick off the background work.
//000160:             btnVisualize.Enabled = False
    IL_011e:  ldarg.0
    IL_011f:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Button VisualizePartitioning.MainForm::get_btnVisualize()
    IL_0124:  ldc.i4.0
    IL_0125:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Enabled(bool)
    IL_012a:  nop
//000161:             ' Assign each thread a unique id.
//000162:             ' Get faster access to the Bitmap's contents.
//000163:             ' Time the operation.
//000164:             ' Create the partitioner to be used.
//000165:             ' Run the work with Parallel.ForEach
//000166:             ' PLINQ.
//000167:             ' Run the work with PLINQ. If a special partitioning method was selected, use relevant query operators
//000168:             ' to get PLINQ to use that partitioning approach.
//000169:             ' Return the total time from the task
//000170:             ' When the work completes, run the following on the UI thread.
//000171: 
//000172:             Task.Factory.StartNew(Function()
    IL_012b:  call       class [mscorlib]System.Threading.Tasks.TaskFactory [mscorlib]System.Threading.Tasks.Task::get_Factory()
    IL_0130:  ldloc.0
    IL_0131:  dup
    IL_0132:  ldvirtftn  instance valuetype [mscorlib]System.TimeSpan VisualizePartitioning.MainForm/_Closure$__5::_Lambda$__20()
    IL_0138:  newobj     instance void class [mscorlib]System.Func`1<valuetype [mscorlib]System.TimeSpan>::.ctor(object,
                                                                                                                 native int)
    IL_013d:  callvirt   instance class [mscorlib]System.Threading.Tasks.Task`1<!!0> [mscorlib]System.Threading.Tasks.TaskFactory::StartNew<valuetype [mscorlib]System.TimeSpan>(class [mscorlib]System.Func`1<!!0>)
    IL_0142:  ldloc.0
    IL_0143:  dup
    IL_0144:  ldvirtftn  instance void VisualizePartitioning.MainForm/_Closure$__5::_Lambda$__19(class [mscorlib]System.Threading.Tasks.Task`1<valuetype [mscorlib]System.TimeSpan>)
    IL_014a:  newobj     instance void class [mscorlib]System.Action`1<class [mscorlib]System.Threading.Tasks.Task`1<valuetype [mscorlib]System.TimeSpan>>::.ctor(object,
                                                                                                                                                                  native int)
    IL_014f:  call       class [mscorlib]System.Threading.Tasks.TaskScheduler [mscorlib]System.Threading.Tasks.TaskScheduler::FromCurrentSynchronizationContext()
    IL_0154:  callvirt   instance class [mscorlib]System.Threading.Tasks.Task class [mscorlib]System.Threading.Tasks.Task`1<valuetype [mscorlib]System.TimeSpan>::ContinueWith(class [mscorlib]System.Action`1<class [mscorlib]System.Threading.Tasks.Task`1<!0>>,
                                                                                                                                                                               class [mscorlib]System.Threading.Tasks.TaskScheduler)
    IL_0159:  pop
//000173:                                       Dim nextId = -1
//000174:                                       Dim threadId = New ThreadLocal(Of Integer)(Function() Interlocked.Increment(nextId))
//000175:                                       Using fastBmp As New FastBitmap(bmp)
//000176:                                           Dim sw = Stopwatch.StartNew()
//000177:                                           If useParallelFor Then
//000178:                                               If fastBmp Is Nothing Then
//000179:                                                   MsgBox("FastBmp Disposed")
//000180:                                               End If
//000181:                                               Parallel.[For](0, height, New ParallelOptions(), Sub(i)
//000182:                                                                                                    Dim id = threadId.Value
//000183:                                                                                                    DoWork(selectedWorkload.Item2(height, i))
//000184: 
//000185:                                                                                                    For j = 0 To width - 1
//000186:                                                                                                        fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000187:                                                                                                    Next
//000188:                                                                                                End Sub)
//000189:                                           Else
//000190:                                               Dim partitioner = selectedMethod.Item2(Enumerable.Range(0, height).ToArray())
//000191:                                               If useParallelForEach Then
//000192:                                                   Parallel.ForEach(partitioner, New ParallelOptions(), Sub(i)
//000193:                                                                                                            Dim id = threadId.Value
//000194:                                                                                                            DoWork(selectedWorkload.Item2(height, i))
//000195:                                                                                                            For j = 0 To width - 1
//000196:                                                                                                                fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000197:                                                                                                            Next
//000198:                                                                                                        End Sub)
//000199:                                               Else
//000200:                                                   Dim source = partitioner.AsParallel().WithDegreeOfParallelism(numProcs)
//000201:                                                   If selectedMethod.Item1 = PartitioningStripe Then
//000202:                                                       source = source.TakeWhile(Function(elem) True)
//000203:                                                   ElseIf selectedMethod.Item1 = PartitioningHash Then
//000204:                                                       source = source.Join(Enumerable.Range(0, height).AsParallel(), Function(i) i, Function(i) i, Function(i, ignore) i)
//000205:                                                   End If
//000206:                                                   source.ForAll(Sub(i)
//000207:                                                                     Dim id = threadId.Value
//000208:                                                                     DoWork(selectedWorkload.Item2(height, i))
//000209:                                                                     For j = 0 To width - 1
//000210:                                                                         fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000211:                                                                     Next
//000212:                                                                 End Sub)
//000213:                                               End If
//000214:                                           End If
//000215:                                           Return sw.Elapsed
//000216:                                       End Using
//000217:                                   End Function).ContinueWith(Sub(t)
//000218:                                                                  ' Dispose of the old image (if there was one) and display the new one.
//000219:                                                                  Dim old = pbPartitionedImage.Image
//000220:                                                                  pbPartitionedImage.Image = bmp
//000221:                                                                  If old IsNot Nothing Then
//000222:                                                                      old.Dispose()
//000223:                                                                  End If
//000224: 
//000225:                                                                  ' Re-enable controls on the form and display the elapsed time.
//000226:                                                                  btnVisualize.Enabled = True
//000227:                                                                  lblTime.Text = "Time: " & t.Result.ToString()
//000228:                                                              End Sub, TaskScheduler.FromCurrentSynchronizationContext())
//000229:         End Sub
    IL_015a:  nop
    IL_015b:  ret
  } // end of method MainForm::btnVisualize_Click

  .method private static int32  DoWork(int32 workAmount) cil managed noinlining nooptimization
  {
    // Code size       60 (0x3c)
    .maxstack  3
    .locals init ([0] int32 DoWork,
             [1] int32 'value',
             [2] int32 i,
             [3] int32 VB$t_i4$L0,
             [4] int32 VB$CG$t_i4$S0)
//000230: 
//000231:         ''' <summary>Does an amount of work relative to the amount requested.</summary>
//000232:         ''' <param name="workAmount">The amount of work to perform.</param>
//000233:         <MethodImpl(MethodImplOptions.NoOptimization Or MethodImplOptions.NoInlining)>
//000234:         Private Shared Function DoWork(ByVal workAmount As Integer) As Integer
    IL_0000:  nop
//000235:             Try
    IL_0001:  nop
//000236:                 Dim value = 1
    .try
    {
      IL_0002:  ldc.i4.1
      IL_0003:  stloc.1
//000237:                 For i = 0 To workAmount - 1
      IL_0004:  ldc.i4.0
      IL_0005:  ldarg.0
      IL_0006:  ldc.i4.1
      IL_0007:  sub.ovf
      IL_0008:  stloc.3
      IL_0009:  stloc.2
      IL_000a:  br.s       IL_0015

//000238:                     value = value * workAmount
      IL_000c:  ldloc.1
      IL_000d:  ldarg.0
      IL_000e:  mul.ovf
      IL_000f:  stloc.1
//000239:                 Next i
      IL_0010:  nop
      IL_0011:  ldloc.2
      IL_0012:  ldc.i4.1
      IL_0013:  add.ovf
      IL_0014:  stloc.2
//000240:                 Return value
//000241:             Catch
//000242:                 Return 0
//000243:             End Try
//000244:         End Function
//000245: 
//000246:         ''' <summary>Update relevant portions of the form when the API radio buttons are checked.</summary>
//000247:         ''' <param name="sender">The radio button.</param>
//000248:         ''' <param name="e">The event args.</param>
//000249:         Private Sub rbAPI_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles rbParallelForEach.CheckedChanged,
//000250:             rbPLINQ.CheckedChanged, rbParallelFor.CheckedChanged
//000251:             lvPartitioningMethods.Enabled = Not rbParallelFor.Checked
//000252:             lvPartitioningMethods.HideSelection = Not lvPartitioningMethods.Enabled
//000253: 
//000254:             ' Recreate partitioning methods every time a radio button is checked,
//000255:             ' as which API is selected determines which partitioning methods are available.
//000256:             InitializePartitioningMethods()
//000257:         End Sub
//000258: 
//000259:         Private Sub tbCores_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbCores.ValueChanged
//000260:             toolTip1.SetToolTip(tbCores, tbCores.Value.ToString())
//000261:             InitializeColorPalette()
//000262:             Dim worker As Integer
//000263:             Dim io As Integer
//000264:             ThreadPool.GetMinThreads(worker, io)
//000265:             ThreadPool.SetMinThreads(tbCores.Value, io)
//000266:         End Sub
//000267: 
//000268:         Private Sub tbWorkFactor_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbWorkFactor.ValueChanged
//000269:             toolTip1.SetToolTip(tbWorkFactor, tbWorkFactor.Value.ToString())
//000270:         End Sub
//000271:     End Class
//000272: End Namespace
      IL_0015:  ldloc.2
      IL_0016:  ldloc.3
      IL_0017:  stloc.s    VB$CG$t_i4$S0
      IL_0019:  ldloc.s    VB$CG$t_i4$S0
      IL_001b:  ble.s      IL_000c

//000240:                 Return value
      IL_001d:  ldloc.1
      IL_001e:  stloc.0
//000241:             Catch
//000242:                 Return 0
//000243:             End Try
//000244:         End Function
//000245: 
//000246:         ''' <summary>Update relevant portions of the form when the API radio buttons are checked.</summary>
//000247:         ''' <param name="sender">The radio button.</param>
//000248:         ''' <param name="e">The event args.</param>
//000249:         Private Sub rbAPI_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles rbParallelForEach.CheckedChanged,
//000250:             rbPLINQ.CheckedChanged, rbParallelFor.CheckedChanged
//000251:             lvPartitioningMethods.Enabled = Not rbParallelFor.Checked
//000252:             lvPartitioningMethods.HideSelection = Not lvPartitioningMethods.Enabled
//000253: 
//000254:             ' Recreate partitioning methods every time a radio button is checked,
//000255:             ' as which API is selected determines which partitioning methods are available.
//000256:             InitializePartitioningMethods()
//000257:         End Sub
//000258: 
//000259:         Private Sub tbCores_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbCores.ValueChanged
//000260:             toolTip1.SetToolTip(tbCores, tbCores.Value.ToString())
//000261:             InitializeColorPalette()
//000262:             Dim worker As Integer
//000263:             Dim io As Integer
//000264:             ThreadPool.GetMinThreads(worker, io)
//000265:             ThreadPool.SetMinThreads(tbCores.Value, io)
//000266:         End Sub
//000267: 
//000268:         Private Sub tbWorkFactor_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbWorkFactor.ValueChanged
//000269:             toolTip1.SetToolTip(tbWorkFactor, tbWorkFactor.Value.ToString())
//000270:         End Sub
//000271:     End Class
//000272: End Namespace
      IL_001f:  leave.s    IL_003a

      IL_0021:  leave.s    IL_0039

    }  // end .try
    catch [mscorlib]System.Exception 
    {
      IL_0023:  call       void [Microsoft.VisualBasic]Microsoft.VisualBasic.CompilerServices.ProjectData::SetProjectError(class [mscorlib]System.Exception)
//000241:             Catch
      IL_0028:  nop
//000242:                 Return 0
      IL_0029:  ldc.i4.0
      IL_002a:  stloc.0
      IL_002b:  call       void [Microsoft.VisualBasic]Microsoft.VisualBasic.CompilerServices.ProjectData::ClearProjectError()
//000243:             End Try
//000244:         End Function
//000245: 
//000246:         ''' <summary>Update relevant portions of the form when the API radio buttons are checked.</summary>
//000247:         ''' <param name="sender">The radio button.</param>
//000248:         ''' <param name="e">The event args.</param>
//000249:         Private Sub rbAPI_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles rbParallelForEach.CheckedChanged,
//000250:             rbPLINQ.CheckedChanged, rbParallelFor.CheckedChanged
//000251:             lvPartitioningMethods.Enabled = Not rbParallelFor.Checked
//000252:             lvPartitioningMethods.HideSelection = Not lvPartitioningMethods.Enabled
//000253: 
//000254:             ' Recreate partitioning methods every time a radio button is checked,
//000255:             ' as which API is selected determines which partitioning methods are available.
//000256:             InitializePartitioningMethods()
//000257:         End Sub
//000258: 
//000259:         Private Sub tbCores_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbCores.ValueChanged
//000260:             toolTip1.SetToolTip(tbCores, tbCores.Value.ToString())
//000261:             InitializeColorPalette()
//000262:             Dim worker As Integer
//000263:             Dim io As Integer
//000264:             ThreadPool.GetMinThreads(worker, io)
//000265:             ThreadPool.SetMinThreads(tbCores.Value, io)
//000266:         End Sub
//000267: 
//000268:         Private Sub tbWorkFactor_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbWorkFactor.ValueChanged
//000269:             toolTip1.SetToolTip(tbWorkFactor, tbWorkFactor.Value.ToString())
//000270:         End Sub
//000271:     End Class
//000272: End Namespace
      IL_0030:  leave.s    IL_003a

      IL_0032:  call       void [Microsoft.VisualBasic]Microsoft.VisualBasic.CompilerServices.ProjectData::ClearProjectError()
      IL_0037:  leave.s    IL_0039

//000243:             End Try
    }  // end handler
    IL_0039:  nop
//000244:         End Function
    IL_003a:  ldloc.0
    IL_003b:  ret
  } // end of method MainForm::DoWork

  .method private instance void  rbAPI_CheckedChanged(object sender,
                                                      class [mscorlib]System.EventArgs e) cil managed
  {
    // Code size       62 (0x3e)
    .maxstack  8
//000245: 
//000246:         ''' <summary>Update relevant portions of the form when the API radio buttons are checked.</summary>
//000247:         ''' <param name="sender">The radio button.</param>
//000248:         ''' <param name="e">The event args.</param>
//000249:         Private Sub rbAPI_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles rbParallelForEach.CheckedChanged,
    IL_0000:  nop
//000250:             rbPLINQ.CheckedChanged, rbParallelFor.CheckedChanged
//000251:             lvPartitioningMethods.Enabled = Not rbParallelFor.Checked
    IL_0001:  ldarg.0
    IL_0002:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ListView VisualizePartitioning.MainForm::lvPartitioningMethods
    IL_0007:  ldarg.0
    IL_0008:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.RadioButton VisualizePartitioning.MainForm::get_rbParallelFor()
    IL_000d:  callvirt   instance bool [System.Windows.Forms]System.Windows.Forms.RadioButton::get_Checked()
    IL_0012:  ldc.i4.0
    IL_0013:  ceq
    IL_0015:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Enabled(bool)
    IL_001a:  nop
//000252:             lvPartitioningMethods.HideSelection = Not lvPartitioningMethods.Enabled
    IL_001b:  ldarg.0
    IL_001c:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ListView VisualizePartitioning.MainForm::lvPartitioningMethods
    IL_0021:  ldarg.0
    IL_0022:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ListView VisualizePartitioning.MainForm::lvPartitioningMethods
    IL_0027:  callvirt   instance bool [System.Windows.Forms]System.Windows.Forms.Control::get_Enabled()
    IL_002c:  ldc.i4.0
    IL_002d:  ceq
    IL_002f:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ListView::set_HideSelection(bool)
    IL_0034:  nop
//000253: 
//000254:             ' Recreate partitioning methods every time a radio button is checked,
//000255:             ' as which API is selected determines which partitioning methods are available.
//000256:             InitializePartitioningMethods()
    IL_0035:  ldarg.0
    IL_0036:  callvirt   instance void VisualizePartitioning.MainForm::InitializePartitioningMethods()
    IL_003b:  nop
//000257:         End Sub
    IL_003c:  nop
    IL_003d:  ret
  } // end of method MainForm::rbAPI_CheckedChanged

  .method private instance void  tbCores_ValueChanged(object sender,
                                                      class [mscorlib]System.EventArgs e) cil managed
  {
    // Code size       75 (0x4b)
    .maxstack  3
    .locals init ([0] int32 io,
             [1] int32 worker,
             [2] int32 VB$t_i4$S0)
//000258: 
//000259:         Private Sub tbCores_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbCores.ValueChanged
    IL_0000:  nop
//000260:             toolTip1.SetToolTip(tbCores, tbCores.Value.ToString())
    IL_0001:  ldarg.0
    IL_0002:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ToolTip VisualizePartitioning.MainForm::toolTip1
    IL_0007:  ldarg.0
    IL_0008:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.TrackBar VisualizePartitioning.MainForm::get_tbCores()
    IL_000d:  ldarg.0
    IL_000e:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.TrackBar VisualizePartitioning.MainForm::get_tbCores()
    IL_0013:  callvirt   instance int32 [System.Windows.Forms]System.Windows.Forms.TrackBar::get_Value()
    IL_0018:  stloc.2
    IL_0019:  ldloca.s   VB$t_i4$S0
    IL_001b:  call       instance string [mscorlib]System.Int32::ToString()
    IL_0020:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ToolTip::SetToolTip(class [System.Windows.Forms]System.Windows.Forms.Control,
                                                                                                      string)
    IL_0025:  nop
//000261:             InitializeColorPalette()
    IL_0026:  ldarg.0
    IL_0027:  callvirt   instance void VisualizePartitioning.MainForm::InitializeColorPalette()
    IL_002c:  nop
//000262:             Dim worker As Integer
//000263:             Dim io As Integer
//000264:             ThreadPool.GetMinThreads(worker, io)
    IL_002d:  ldloca.s   worker
    IL_002f:  ldloca.s   io
    IL_0031:  call       void [mscorlib]System.Threading.ThreadPool::GetMinThreads(int32&,
                                                                                   int32&)
    IL_0036:  nop
//000265:             ThreadPool.SetMinThreads(tbCores.Value, io)
    IL_0037:  ldarg.0
    IL_0038:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.TrackBar VisualizePartitioning.MainForm::get_tbCores()
    IL_003d:  callvirt   instance int32 [System.Windows.Forms]System.Windows.Forms.TrackBar::get_Value()
    IL_0042:  ldloc.0
    IL_0043:  call       bool [mscorlib]System.Threading.ThreadPool::SetMinThreads(int32,
                                                                                   int32)
    IL_0048:  pop
//000266:         End Sub
    IL_0049:  nop
    IL_004a:  ret
  } // end of method MainForm::tbCores_ValueChanged

  .method private instance void  tbWorkFactor_ValueChanged(object sender,
                                                           class [mscorlib]System.EventArgs e) cil managed
  {
    // Code size       40 (0x28)
    .maxstack  3
    .locals init ([0] int32 VB$t_i4$S0)
//000267: 
//000268:         Private Sub tbWorkFactor_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbWorkFactor.ValueChanged
    IL_0000:  nop
//000269:             toolTip1.SetToolTip(tbWorkFactor, tbWorkFactor.Value.ToString())
    IL_0001:  ldarg.0
    IL_0002:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ToolTip VisualizePartitioning.MainForm::toolTip1
    IL_0007:  ldarg.0
    IL_0008:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.TrackBar VisualizePartitioning.MainForm::get_tbWorkFactor()
    IL_000d:  ldarg.0
    IL_000e:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.TrackBar VisualizePartitioning.MainForm::get_tbWorkFactor()
    IL_0013:  callvirt   instance int32 [System.Windows.Forms]System.Windows.Forms.TrackBar::get_Value()
    IL_0018:  stloc.0
    IL_0019:  ldloca.s   VB$t_i4$S0
    IL_001b:  call       instance string [mscorlib]System.Int32::ToString()
    IL_0020:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ToolTip::SetToolTip(class [System.Windows.Forms]System.Windows.Forms.Control,
                                                                                                      string)
    IL_0025:  nop
//000270:         End Sub
    IL_0026:  nop
    IL_0027:  ret
  } // end of method MainForm::tbWorkFactor_ValueChanged

  .method private specialname static class [mscorlib]System.Random 
          _Lambda$__1() cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       57 (0x39)
    .maxstack  2
    .locals init ([0] class [mscorlib]System.Random _Lambda$__1,
             [1] class [mscorlib]System.Random VB$t_ref$L0,
             [2] bool VB$t_bool$L0,
             [3] bool VB$CG$t_bool$S0)
//000031:         Private Shared _localRandom As New ThreadLocal(Of Random)(Function()
    IL_0000:  nop
//000032:                                                                       SyncLock _randomnessSeed
    IL_0001:  nop
    IL_0002:  ldsfld     class [mscorlib]System.Random VisualizePartitioning.MainForm::_randomnessSeed
    IL_0007:  stloc.1
    IL_0008:  ldc.i4.0
    IL_0009:  stloc.2
    IL_000a:  nop
    .try
    {
      IL_000b:  ldloc.1
      IL_000c:  ldloca.s   VB$t_bool$L0
      IL_000e:  call       void [mscorlib]System.Threading.Monitor::Enter(object,
                                                                          bool&)
      IL_0013:  nop
//000033:                                                                           Return New Random(_randomnessSeed.[Next]())
      IL_0014:  ldsfld     class [mscorlib]System.Random VisualizePartitioning.MainForm::_randomnessSeed
      IL_0019:  callvirt   instance int32 [mscorlib]System.Random::Next()
      IL_001e:  newobj     instance void [mscorlib]System.Random::.ctor(int32)
      IL_0023:  stloc.0
//000034:                                                                       End SyncLock
//000035:                                                                   End Function)
//000036: 
//000037:         Public Sub New()
//000038:             InitializeComponent()
//000039: 
//000040:             ' Configure the workloads and the color palette. The partitioning methods initialization will be done
//000041:             ' when the radio button is changed to Parallel.ForEach or PLINQ. The color palette will be
//000042:             ' initialized when the cores trackbar changes value.
//000043:             InitializeWorkloads()
//000044: 
//000045:             ' Configure number of cores.
//000046:             With tbCores
//000047:                 .Minimum = 1
//000048:                 .Maximum = Environment.ProcessorCount * 2
//000049:                 .Value = Environment.ProcessorCount
//000050:             End With
//000051:            
//000052:         End Sub
//000053: 
//000054:         ''' <summary>Initializes the color palette to use when rendering threads.</summary>
//000055:         Private Sub InitializeColorPalette()
//000056:             Dim random As New Random(8)
//000057:             ' Change seed value to change the palette used.
//000058:             _colors = (From i In Enumerable.Range(0, tbCores.Value)
//000059:                 Select Color.FromArgb(random.[Next](128) + 127, random.[Next](128) + 127, random.[Next](128) + 127)).ToArray()
//000060:         End Sub
//000061: 
//000062:         ''' <summary>Initializes the workloads list view.</summary>
//000063:         Private Sub InitializeWorkloads()
//000064:             lvWorkloads.Items.Clear()
//000065:             Dim workloads = New List(Of Tuple(Of String, Func(Of Integer, Integer, Integer)))()
//000066:             ' NOTE: To add a new workload, simply add a new entry below with a name and corresponding function.
//000067:             With workloads
//000068:                 .Add(Tuple.Create(Of String, Func(Of Integer, Integer, Integer))("Constant", Function(size, current) 1000 * _workFactor))
//000069:                 .Add(Tuple.Create(Of String, Func(Of Integer, Integer, Integer))("Increasing Linear", Function(size, current) 200 * current * _workFactor))
//000070:                 .Add(Tuple.Create(Of String, Func(Of Integer, Integer, Integer))("Decreasing Linear", Function(size, current) 200 * (size - current) * _workFactor))
//000071:                 .Add(Tuple.Create(Of String, Func(Of Integer, Integer, Integer))("Random", Function(size, current) _localRandom.Value.[Next](100, 10000) * _workFactor))
//000072:             End With
//000073: 
//000074:             For Each workload In workloads
//000075:                 lvWorkloads.Items.Add(New ListViewItem(workload.Item1) With {.Tag = workload})
//000076:             Next
//000077:             lvWorkloads.Items(0).Selected = True
//000078:         End Sub
//000079: 
//000080:         ''' <summary>Initializes the partitioning methods list view.</summary>
//000081:         Private Sub InitializePartitioningMethods()
//000082:             lvPartitioningMethods.Items.Clear()
//000083:             Dim usingPLINQ As Boolean = rbPLINQ.Checked
//000084:             Dim partitioningMethods = New List(Of Tuple(Of String, Func(Of Integer(), Partitioner(Of Integer))))()
//000085: 
//000086:             ' Static partitioning using the Partitioner.Create overload requires static partitioner support,
//000087:             ' which Parallel.ForEach does not provide.
//000088:             If usingPLINQ Then
//000089:                 partitioningMethods.Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))("Static", Function(e) partitioner.Create(e, False)))
//000090:             End If
//000091: 
//000092:             ' Add a bunch of partitioning approaches that work with both PLINQ and Parallel.ForEach.
//000093:             With partitioningMethods
//000094:                 .Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))("Load Balance", Function(e) partitioner.Create(e, True)))
//000095:                 .Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))("Dynamic(1)", Function(e) ChunkPartitioner.Create(e, 1)))
//000096:                 .Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))("Dynamic(16)", Function(e) ChunkPartitioner.Create(e, 16)))
//000097:                 .Add(Tuple.Create(Of String,  _
//000098:                 Func(Of Integer(), Partitioner(Of Integer)))("Guided", Function(e) ChunkPartitioner.Create(e, Function(prev)
//000099:                                                                                                                   If prev <= 0 Then
//000100:                                                                                                                       Return If(e.Length <= 1, 1,
//000101:                                                                                                                                 CType(e.Length /
//000102:                                                                                                                                     (Environment.ProcessorCount * 3), Integer))
//000103:                                                                                                                   End If
//000104:                                                                                                                   Dim [next] = CType(prev / 2, Integer)
//000105:                                                                                                                   Return If([next] <= 0, prev, [next])
//000106:                                                                                                               End Function)))
//000107:                 .Add(Tuple.Create(Of String,  _
//000108:                                         Func(Of Integer(),  _
//000109:                                              Partitioner(Of Integer)))("Grow Exponential", Function(e) ChunkPartitioner.Create(e, Function(prev) If(prev <= 0, 1, prev * 2))))
//000110:                 .Add(Tuple.Create(Of String,  _
//000111:                                         Func(Of Integer(), Partitioner(Of Integer)))("Random", Function(e) ChunkPartitioner.Create(e, Function(prev) _localRandom.Value.[Next](e.Length))))
//000112: 
//000113:             End With
//000114: 
//000115:             ' Special-case some PLINQ-only hashing.
//000116:             If usingPLINQ Then
//000117:                 ' The actual enabling of these partitioning schemes is done later, as they can't 
//000118:                 ' be encoded in a partitioner but rather are based on what operators are used in the PLINQ query.
//000119:                 partitioningMethods.Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))(PartitioningStripe, Function(e) partitioner.Create(e)))
//000120:                 partitioningMethods.Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))(PartitioningHash, Function(e) partitioner.Create(e)))
//000121:             End If
//000122: 
//000123:             ' Dump the partitioners into the list view.
//000124:             For Each method In partitioningMethods
//000125:                 lvPartitioningMethods.Items.Add(New ListViewItem(method.Item1) With {.Tag = method})
//000126:             Next
//000127:             lvPartitioningMethods.Items(0).Selected = True
//000128:         End Sub
//000129: 
//000130:         ''' <summary>Visualize the partitioning.</summary>
//000131:         Private Sub btnVisualize_Click(ByVal sender As Object, ByVal e As EventArgs) Handles btnVisualize.Click
//000132:             Dim numProcs = tbCores.Value
//000133:             Dim width = pbPartitionedImage.Width
//000134:             Dim height = pbPartitionedImage.Height
//000135:             Dim useParallelFor = rbParallelFor.Checked
//000136:             Dim useParallelForEach = rbParallelForEach.Checked
//000137:             _workFactor = tbWorkFactor.Value
//000138: 
//000139:             ' If we're using Parallel.ForEach or PLINQ, ensure a partitioning scheme was selected and use it.
//000140:             Dim selectedMethod As Tuple(Of String, Func(Of Integer(), Partitioner(Of Integer))) = Nothing
//000141:             If Not useParallelFor Then
//000142:                 If lvPartitioningMethods.SelectedIndices.Count = 0 Then
//000143:                     Exit Sub
//000144:                 Else
//000145:                     selectedMethod = DirectCast(lvPartitioningMethods.SelectedItems(0).Tag, Tuple(Of String, Func(Of Integer(), Partitioner(Of Integer))))
//000146:                 End If
//000147:             End If
//000148: 
//000149:             ' Make sure a workload was selected and use it.
//000150:             If lvWorkloads.SelectedItems.Count = 0 Then
//000151:                 Exit Sub
//000152:             End If
//000153: 
//000154:             Dim selectedWorkload = DirectCast(lvWorkloads.SelectedItems(0).Tag, Tuple(Of String, Func(Of Integer, Integer, Integer)))
//000155: 
//000156:             ' Create a new Bitmap to store the rendered output
//000157:             Dim bmp = New Bitmap(width, height)
//000158: 
//000159:             ' Disable the start button and kick off the background work.
//000160:             btnVisualize.Enabled = False
//000161:             ' Assign each thread a unique id.
//000162:             ' Get faster access to the Bitmap's contents.
//000163:             ' Time the operation.
//000164:             ' Create the partitioner to be used.
//000165:             ' Run the work with Parallel.ForEach
//000166:             ' PLINQ.
//000167:             ' Run the work with PLINQ. If a special partitioning method was selected, use relevant query operators
//000168:             ' to get PLINQ to use that partitioning approach.
//000169:             ' Return the total time from the task
//000170:             ' When the work completes, run the following on the UI thread.
//000171: 
//000172:             Task.Factory.StartNew(Function()
//000173:                                       Dim nextId = -1
//000174:                                       Dim threadId = New ThreadLocal(Of Integer)(Function() Interlocked.Increment(nextId))
//000175:                                       Using fastBmp As New FastBitmap(bmp)
//000176:                                           Dim sw = Stopwatch.StartNew()
//000177:                                           If useParallelFor Then
//000178:                                               If fastBmp Is Nothing Then
//000179:                                                   MsgBox("FastBmp Disposed")
//000180:                                               End If
//000181:                                               Parallel.[For](0, height, New ParallelOptions(), Sub(i)
//000182:                                                                                                    Dim id = threadId.Value
//000183:                                                                                                    DoWork(selectedWorkload.Item2(height, i))
//000184: 
//000185:                                                                                                    For j = 0 To width - 1
//000186:                                                                                                        fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000187:                                                                                                    Next
//000188:                                                                                                End Sub)
//000189:                                           Else
//000190:                                               Dim partitioner = selectedMethod.Item2(Enumerable.Range(0, height).ToArray())
//000191:                                               If useParallelForEach Then
//000192:                                                   Parallel.ForEach(partitioner, New ParallelOptions(), Sub(i)
//000193:                                                                                                            Dim id = threadId.Value
//000194:                                                                                                            DoWork(selectedWorkload.Item2(height, i))
//000195:                                                                                                            For j = 0 To width - 1
//000196:                                                                                                                fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000197:                                                                                                            Next
//000198:                                                                                                        End Sub)
//000199:                                               Else
//000200:                                                   Dim source = partitioner.AsParallel().WithDegreeOfParallelism(numProcs)
//000201:                                                   If selectedMethod.Item1 = PartitioningStripe Then
//000202:                                                       source = source.TakeWhile(Function(elem) True)
//000203:                                                   ElseIf selectedMethod.Item1 = PartitioningHash Then
//000204:                                                       source = source.Join(Enumerable.Range(0, height).AsParallel(), Function(i) i, Function(i) i, Function(i, ignore) i)
//000205:                                                   End If
//000206:                                                   source.ForAll(Sub(i)
//000207:                                                                     Dim id = threadId.Value
//000208:                                                                     DoWork(selectedWorkload.Item2(height, i))
//000209:                                                                     For j = 0 To width - 1
//000210:                                                                         fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000211:                                                                     Next
//000212:                                                                 End Sub)
//000213:                                               End If
//000214:                                           End If
//000215:                                           Return sw.Elapsed
//000216:                                       End Using
//000217:                                   End Function).ContinueWith(Sub(t)
//000218:                                                                  ' Dispose of the old image (if there was one) and display the new one.
//000219:                                                                  Dim old = pbPartitionedImage.Image
//000220:                                                                  pbPartitionedImage.Image = bmp
//000221:                                                                  If old IsNot Nothing Then
//000222:                                                                      old.Dispose()
//000223:                                                                  End If
//000224: 
//000225:                                                                  ' Re-enable controls on the form and display the elapsed time.
//000226:                                                                  btnVisualize.Enabled = True
//000227:                                                                  lblTime.Text = "Time: " & t.Result.ToString()
//000228:                                                              End Sub, TaskScheduler.FromCurrentSynchronizationContext())
//000229:         End Sub
//000230: 
//000231:         ''' <summary>Does an amount of work relative to the amount requested.</summary>
//000232:         ''' <param name="workAmount">The amount of work to perform.</param>
//000233:         <MethodImpl(MethodImplOptions.NoOptimization Or MethodImplOptions.NoInlining)>
//000234:         Private Shared Function DoWork(ByVal workAmount As Integer) As Integer
//000235:             Try
//000236:                 Dim value = 1
//000237:                 For i = 0 To workAmount - 1
//000238:                     value = value * workAmount
//000239:                 Next i
//000240:                 Return value
//000241:             Catch
//000242:                 Return 0
//000243:             End Try
//000244:         End Function
//000245: 
//000246:         ''' <summary>Update relevant portions of the form when the API radio buttons are checked.</summary>
//000247:         ''' <param name="sender">The radio button.</param>
//000248:         ''' <param name="e">The event args.</param>
//000249:         Private Sub rbAPI_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles rbParallelForEach.CheckedChanged,
//000250:             rbPLINQ.CheckedChanged, rbParallelFor.CheckedChanged
//000251:             lvPartitioningMethods.Enabled = Not rbParallelFor.Checked
//000252:             lvPartitioningMethods.HideSelection = Not lvPartitioningMethods.Enabled
//000253: 
//000254:             ' Recreate partitioning methods every time a radio button is checked,
//000255:             ' as which API is selected determines which partitioning methods are available.
//000256:             InitializePartitioningMethods()
//000257:         End Sub
//000258: 
//000259:         Private Sub tbCores_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbCores.ValueChanged
//000260:             toolTip1.SetToolTip(tbCores, tbCores.Value.ToString())
//000261:             InitializeColorPalette()
//000262:             Dim worker As Integer
//000263:             Dim io As Integer
//000264:             ThreadPool.GetMinThreads(worker, io)
//000265:             ThreadPool.SetMinThreads(tbCores.Value, io)
//000266:         End Sub
//000267: 
//000268:         Private Sub tbWorkFactor_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbWorkFactor.ValueChanged
//000269:             toolTip1.SetToolTip(tbWorkFactor, tbWorkFactor.Value.ToString())
//000270:         End Sub
//000271:     End Class
//000272: End Namespace
      IL_0024:  leave.s    IL_0037

//000034:                                                                       End SyncLock
      IL_0026:  nop
      IL_0027:  leave.s    IL_0037

    }  // end .try
    finally
    {
      IL_0029:  ldloc.2
      IL_002a:  stloc.3
      IL_002b:  ldloc.3
      IL_002c:  brfalse.s  IL_0035

      IL_002e:  ldloc.1
      IL_002f:  call       void [mscorlib]System.Threading.Monitor::Exit(object)
      IL_0034:  nop
      IL_0035:  nop
//000035:                                                                   End Function)
//000036: 
//000037:         Public Sub New()
//000038:             InitializeComponent()
//000039: 
//000040:             ' Configure the workloads and the color palette. The partitioning methods initialization will be done
//000041:             ' when the radio button is changed to Parallel.ForEach or PLINQ. The color palette will be
//000042:             ' initialized when the cores trackbar changes value.
//000043:             InitializeWorkloads()
//000044: 
//000045:             ' Configure number of cores.
//000046:             With tbCores
//000047:                 .Minimum = 1
//000048:                 .Maximum = Environment.ProcessorCount * 2
//000049:                 .Value = Environment.ProcessorCount
//000050:             End With
//000051:            
//000052:         End Sub
//000053: 
//000054:         ''' <summary>Initializes the color palette to use when rendering threads.</summary>
//000055:         Private Sub InitializeColorPalette()
//000056:             Dim random As New Random(8)
//000057:             ' Change seed value to change the palette used.
//000058:             _colors = (From i In Enumerable.Range(0, tbCores.Value)
//000059:                 Select Color.FromArgb(random.[Next](128) + 127, random.[Next](128) + 127, random.[Next](128) + 127)).ToArray()
//000060:         End Sub
//000061: 
//000062:         ''' <summary>Initializes the workloads list view.</summary>
//000063:         Private Sub InitializeWorkloads()
//000064:             lvWorkloads.Items.Clear()
//000065:             Dim workloads = New List(Of Tuple(Of String, Func(Of Integer, Integer, Integer)))()
//000066:             ' NOTE: To add a new workload, simply add a new entry below with a name and corresponding function.
//000067:             With workloads
//000068:                 .Add(Tuple.Create(Of String, Func(Of Integer, Integer, Integer))("Constant", Function(size, current) 1000 * _workFactor))
//000069:                 .Add(Tuple.Create(Of String, Func(Of Integer, Integer, Integer))("Increasing Linear", Function(size, current) 200 * current * _workFactor))
//000070:                 .Add(Tuple.Create(Of String, Func(Of Integer, Integer, Integer))("Decreasing Linear", Function(size, current) 200 * (size - current) * _workFactor))
//000071:                 .Add(Tuple.Create(Of String, Func(Of Integer, Integer, Integer))("Random", Function(size, current) _localRandom.Value.[Next](100, 10000) * _workFactor))
//000072:             End With
//000073: 
//000074:             For Each workload In workloads
//000075:                 lvWorkloads.Items.Add(New ListViewItem(workload.Item1) With {.Tag = workload})
//000076:             Next
//000077:             lvWorkloads.Items(0).Selected = True
//000078:         End Sub
//000079: 
//000080:         ''' <summary>Initializes the partitioning methods list view.</summary>
//000081:         Private Sub InitializePartitioningMethods()
//000082:             lvPartitioningMethods.Items.Clear()
//000083:             Dim usingPLINQ As Boolean = rbPLINQ.Checked
//000084:             Dim partitioningMethods = New List(Of Tuple(Of String, Func(Of Integer(), Partitioner(Of Integer))))()
//000085: 
//000086:             ' Static partitioning using the Partitioner.Create overload requires static partitioner support,
//000087:             ' which Parallel.ForEach does not provide.
//000088:             If usingPLINQ Then
//000089:                 partitioningMethods.Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))("Static", Function(e) partitioner.Create(e, False)))
//000090:             End If
//000091: 
//000092:             ' Add a bunch of partitioning approaches that work with both PLINQ and Parallel.ForEach.
//000093:             With partitioningMethods
//000094:                 .Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))("Load Balance", Function(e) partitioner.Create(e, True)))
//000095:                 .Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))("Dynamic(1)", Function(e) ChunkPartitioner.Create(e, 1)))
//000096:                 .Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))("Dynamic(16)", Function(e) ChunkPartitioner.Create(e, 16)))
//000097:                 .Add(Tuple.Create(Of String,  _
//000098:                 Func(Of Integer(), Partitioner(Of Integer)))("Guided", Function(e) ChunkPartitioner.Create(e, Function(prev)
//000099:                                                                                                                   If prev <= 0 Then
//000100:                                                                                                                       Return If(e.Length <= 1, 1,
//000101:                                                                                                                                 CType(e.Length /
//000102:                                                                                                                                     (Environment.ProcessorCount * 3), Integer))
//000103:                                                                                                                   End If
//000104:                                                                                                                   Dim [next] = CType(prev / 2, Integer)
//000105:                                                                                                                   Return If([next] <= 0, prev, [next])
//000106:                                                                                                               End Function)))
//000107:                 .Add(Tuple.Create(Of String,  _
//000108:                                         Func(Of Integer(),  _
//000109:                                              Partitioner(Of Integer)))("Grow Exponential", Function(e) ChunkPartitioner.Create(e, Function(prev) If(prev <= 0, 1, prev * 2))))
//000110:                 .Add(Tuple.Create(Of String,  _
//000111:                                         Func(Of Integer(), Partitioner(Of Integer)))("Random", Function(e) ChunkPartitioner.Create(e, Function(prev) _localRandom.Value.[Next](e.Length))))
//000112: 
//000113:             End With
//000114: 
//000115:             ' Special-case some PLINQ-only hashing.
//000116:             If usingPLINQ Then
//000117:                 ' The actual enabling of these partitioning schemes is done later, as they can't 
//000118:                 ' be encoded in a partitioner but rather are based on what operators are used in the PLINQ query.
//000119:                 partitioningMethods.Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))(PartitioningStripe, Function(e) partitioner.Create(e)))
//000120:                 partitioningMethods.Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))(PartitioningHash, Function(e) partitioner.Create(e)))
//000121:             End If
//000122: 
//000123:             ' Dump the partitioners into the list view.
//000124:             For Each method In partitioningMethods
//000125:                 lvPartitioningMethods.Items.Add(New ListViewItem(method.Item1) With {.Tag = method})
//000126:             Next
//000127:             lvPartitioningMethods.Items(0).Selected = True
//000128:         End Sub
//000129: 
//000130:         ''' <summary>Visualize the partitioning.</summary>
//000131:         Private Sub btnVisualize_Click(ByVal sender As Object, ByVal e As EventArgs) Handles btnVisualize.Click
//000132:             Dim numProcs = tbCores.Value
//000133:             Dim width = pbPartitionedImage.Width
//000134:             Dim height = pbPartitionedImage.Height
//000135:             Dim useParallelFor = rbParallelFor.Checked
//000136:             Dim useParallelForEach = rbParallelForEach.Checked
//000137:             _workFactor = tbWorkFactor.Value
//000138: 
//000139:             ' If we're using Parallel.ForEach or PLINQ, ensure a partitioning scheme was selected and use it.
//000140:             Dim selectedMethod As Tuple(Of String, Func(Of Integer(), Partitioner(Of Integer))) = Nothing
//000141:             If Not useParallelFor Then
//000142:                 If lvPartitioningMethods.SelectedIndices.Count = 0 Then
//000143:                     Exit Sub
//000144:                 Else
//000145:                     selectedMethod = DirectCast(lvPartitioningMethods.SelectedItems(0).Tag, Tuple(Of String, Func(Of Integer(), Partitioner(Of Integer))))
//000146:                 End If
//000147:             End If
//000148: 
//000149:             ' Make sure a workload was selected and use it.
//000150:             If lvWorkloads.SelectedItems.Count = 0 Then
//000151:                 Exit Sub
//000152:             End If
//000153: 
//000154:             Dim selectedWorkload = DirectCast(lvWorkloads.SelectedItems(0).Tag, Tuple(Of String, Func(Of Integer, Integer, Integer)))
//000155: 
//000156:             ' Create a new Bitmap to store the rendered output
//000157:             Dim bmp = New Bitmap(width, height)
//000158: 
//000159:             ' Disable the start button and kick off the background work.
//000160:             btnVisualize.Enabled = False
//000161:             ' Assign each thread a unique id.
//000162:             ' Get faster access to the Bitmap's contents.
//000163:             ' Time the operation.
//000164:             ' Create the partitioner to be used.
//000165:             ' Run the work with Parallel.ForEach
//000166:             ' PLINQ.
//000167:             ' Run the work with PLINQ. If a special partitioning method was selected, use relevant query operators
//000168:             ' to get PLINQ to use that partitioning approach.
//000169:             ' Return the total time from the task
//000170:             ' When the work completes, run the following on the UI thread.
//000171: 
//000172:             Task.Factory.StartNew(Function()
//000173:                                       Dim nextId = -1
//000174:                                       Dim threadId = New ThreadLocal(Of Integer)(Function() Interlocked.Increment(nextId))
//000175:                                       Using fastBmp As New FastBitmap(bmp)
//000176:                                           Dim sw = Stopwatch.StartNew()
//000177:                                           If useParallelFor Then
//000178:                                               If fastBmp Is Nothing Then
//000179:                                                   MsgBox("FastBmp Disposed")
//000180:                                               End If
//000181:                                               Parallel.[For](0, height, New ParallelOptions(), Sub(i)
//000182:                                                                                                    Dim id = threadId.Value
//000183:                                                                                                    DoWork(selectedWorkload.Item2(height, i))
//000184: 
//000185:                                                                                                    For j = 0 To width - 1
//000186:                                                                                                        fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000187:                                                                                                    Next
//000188:                                                                                                End Sub)
//000189:                                           Else
//000190:                                               Dim partitioner = selectedMethod.Item2(Enumerable.Range(0, height).ToArray())
//000191:                                               If useParallelForEach Then
//000192:                                                   Parallel.ForEach(partitioner, New ParallelOptions(), Sub(i)
//000193:                                                                                                            Dim id = threadId.Value
//000194:                                                                                                            DoWork(selectedWorkload.Item2(height, i))
//000195:                                                                                                            For j = 0 To width - 1
//000196:                                                                                                                fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000197:                                                                                                            Next
//000198:                                                                                                        End Sub)
//000199:                                               Else
//000200:                                                   Dim source = partitioner.AsParallel().WithDegreeOfParallelism(numProcs)
//000201:                                                   If selectedMethod.Item1 = PartitioningStripe Then
//000202:                                                       source = source.TakeWhile(Function(elem) True)
//000203:                                                   ElseIf selectedMethod.Item1 = PartitioningHash Then
//000204:                                                       source = source.Join(Enumerable.Range(0, height).AsParallel(), Function(i) i, Function(i) i, Function(i, ignore) i)
//000205:                                                   End If
//000206:                                                   source.ForAll(Sub(i)
//000207:                                                                     Dim id = threadId.Value
//000208:                                                                     DoWork(selectedWorkload.Item2(height, i))
//000209:                                                                     For j = 0 To width - 1
//000210:                                                                         fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000211:                                                                     Next
//000212:                                                                 End Sub)
//000213:                                               End If
//000214:                                           End If
//000215:                                           Return sw.Elapsed
//000216:                                       End Using
//000217:                                   End Function).ContinueWith(Sub(t)
//000218:                                                                  ' Dispose of the old image (if there was one) and display the new one.
//000219:                                                                  Dim old = pbPartitionedImage.Image
//000220:                                                                  pbPartitionedImage.Image = bmp
//000221:                                                                  If old IsNot Nothing Then
//000222:                                                                      old.Dispose()
//000223:                                                                  End If
//000224: 
//000225:                                                                  ' Re-enable controls on the form and display the elapsed time.
//000226:                                                                  btnVisualize.Enabled = True
//000227:                                                                  lblTime.Text = "Time: " & t.Result.ToString()
//000228:                                                              End Sub, TaskScheduler.FromCurrentSynchronizationContext())
//000229:         End Sub
//000230: 
//000231:         ''' <summary>Does an amount of work relative to the amount requested.</summary>
//000232:         ''' <param name="workAmount">The amount of work to perform.</param>
//000233:         <MethodImpl(MethodImplOptions.NoOptimization Or MethodImplOptions.NoInlining)>
//000234:         Private Shared Function DoWork(ByVal workAmount As Integer) As Integer
//000235:             Try
//000236:                 Dim value = 1
//000237:                 For i = 0 To workAmount - 1
//000238:                     value = value * workAmount
//000239:                 Next i
//000240:                 Return value
//000241:             Catch
//000242:                 Return 0
//000243:             End Try
//000244:         End Function
//000245: 
//000246:         ''' <summary>Update relevant portions of the form when the API radio buttons are checked.</summary>
//000247:         ''' <param name="sender">The radio button.</param>
//000248:         ''' <param name="e">The event args.</param>
//000249:         Private Sub rbAPI_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles rbParallelForEach.CheckedChanged,
//000250:             rbPLINQ.CheckedChanged, rbParallelFor.CheckedChanged
//000251:             lvPartitioningMethods.Enabled = Not rbParallelFor.Checked
//000252:             lvPartitioningMethods.HideSelection = Not lvPartitioningMethods.Enabled
//000253: 
//000254:             ' Recreate partitioning methods every time a radio button is checked,
//000255:             ' as which API is selected determines which partitioning methods are available.
//000256:             InitializePartitioningMethods()
//000257:         End Sub
//000258: 
//000259:         Private Sub tbCores_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbCores.ValueChanged
//000260:             toolTip1.SetToolTip(tbCores, tbCores.Value.ToString())
//000261:             InitializeColorPalette()
//000262:             Dim worker As Integer
//000263:             Dim io As Integer
//000264:             ThreadPool.GetMinThreads(worker, io)
//000265:             ThreadPool.SetMinThreads(tbCores.Value, io)
//000266:         End Sub
//000267: 
//000268:         Private Sub tbWorkFactor_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbWorkFactor.ValueChanged
//000269:             toolTip1.SetToolTip(tbWorkFactor, tbWorkFactor.Value.ToString())
//000270:         End Sub
//000271:     End Class
//000272: End Namespace
      IL_0036:  endfinally
//000035:                                                                   End Function)
    }  // end handler
    IL_0037:  ldloc.0
    IL_0038:  ret
  } // end of method MainForm::_Lambda$__1

  .method private specialname instance int32 
          _Lambda$__3(int32 size,
                      int32 current) cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       17 (0x11)
    .maxstack  2
    .locals init ([0] int32 _Lambda$__3)
//000036: 
//000037:         Public Sub New()
//000038:             InitializeComponent()
//000039: 
//000040:             ' Configure the workloads and the color palette. The partitioning methods initialization will be done
//000041:             ' when the radio button is changed to Parallel.ForEach or PLINQ. The color palette will be
//000042:             ' initialized when the cores trackbar changes value.
//000043:             InitializeWorkloads()
//000044: 
//000045:             ' Configure number of cores.
//000046:             With tbCores
//000047:                 .Minimum = 1
//000048:                 .Maximum = Environment.ProcessorCount * 2
//000049:                 .Value = Environment.ProcessorCount
//000050:             End With
//000051:            
//000052:         End Sub
//000053: 
//000054:         ''' <summary>Initializes the color palette to use when rendering threads.</summary>
//000055:         Private Sub InitializeColorPalette()
//000056:             Dim random As New Random(8)
//000057:             ' Change seed value to change the palette used.
//000058:             _colors = (From i In Enumerable.Range(0, tbCores.Value)
//000059:                 Select Color.FromArgb(random.[Next](128) + 127, random.[Next](128) + 127, random.[Next](128) + 127)).ToArray()
//000060:         End Sub
//000061: 
//000062:         ''' <summary>Initializes the workloads list view.</summary>
//000063:         Private Sub InitializeWorkloads()
//000064:             lvWorkloads.Items.Clear()
//000065:             Dim workloads = New List(Of Tuple(Of String, Func(Of Integer, Integer, Integer)))()
//000066:             ' NOTE: To add a new workload, simply add a new entry below with a name and corresponding function.
//000067:             With workloads
//000068:                 .Add(Tuple.Create(Of String, Func(Of Integer, Integer, Integer))("Constant", Function(size, current) 1000 * _workFactor))
    IL_0000:  ldc.i4     0x3e8
    IL_0005:  ldarg.0
    IL_0006:  ldfld      int32 VisualizePartitioning.MainForm::_workFactor
    IL_000b:  mul.ovf
    IL_000c:  stloc.0
    IL_000d:  br.s       IL_000f

    IL_000f:  ldloc.0
    IL_0010:  ret
  } // end of method MainForm::_Lambda$__3

  .method private specialname instance int32 
          _Lambda$__4(int32 size,
                      int32 current) cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       19 (0x13)
    .maxstack  2
    .locals init ([0] int32 _Lambda$__4)
//000069:                 .Add(Tuple.Create(Of String, Func(Of Integer, Integer, Integer))("Increasing Linear", Function(size, current) 200 * current * _workFactor))
    IL_0000:  ldc.i4     0xc8
    IL_0005:  ldarg.2
    IL_0006:  mul.ovf
    IL_0007:  ldarg.0
    IL_0008:  ldfld      int32 VisualizePartitioning.MainForm::_workFactor
    IL_000d:  mul.ovf
    IL_000e:  stloc.0
    IL_000f:  br.s       IL_0011

    IL_0011:  ldloc.0
    IL_0012:  ret
  } // end of method MainForm::_Lambda$__4

  .method private specialname instance int32 
          _Lambda$__5(int32 size,
                      int32 current) cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       21 (0x15)
    .maxstack  3
    .locals init ([0] int32 _Lambda$__5)
//000070:                 .Add(Tuple.Create(Of String, Func(Of Integer, Integer, Integer))("Decreasing Linear", Function(size, current) 200 * (size - current) * _workFactor))
    IL_0000:  ldc.i4     0xc8
    IL_0005:  ldarg.1
    IL_0006:  ldarg.2
    IL_0007:  sub.ovf
    IL_0008:  mul.ovf
    IL_0009:  ldarg.0
    IL_000a:  ldfld      int32 VisualizePartitioning.MainForm::_workFactor
    IL_000f:  mul.ovf
    IL_0010:  stloc.0
    IL_0011:  br.s       IL_0013

    IL_0013:  ldloc.0
    IL_0014:  ret
  } // end of method MainForm::_Lambda$__5

  .method private specialname instance int32 
          _Lambda$__6(int32 size,
                      int32 current) cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       34 (0x22)
    .maxstack  3
    .locals init ([0] int32 _Lambda$__6)
//000071:                 .Add(Tuple.Create(Of String, Func(Of Integer, Integer, Integer))("Random", Function(size, current) _localRandom.Value.[Next](100, 10000) * _workFactor))
    IL_0000:  ldsfld     class [mscorlib]System.Threading.ThreadLocal`1<class [mscorlib]System.Random> VisualizePartitioning.MainForm::_localRandom
    IL_0005:  callvirt   instance !0 class [mscorlib]System.Threading.ThreadLocal`1<class [mscorlib]System.Random>::get_Value()
    IL_000a:  ldc.i4.s   100
    IL_000c:  ldc.i4     0x2710
    IL_0011:  callvirt   instance int32 [mscorlib]System.Random::Next(int32,
                                                                      int32)
    IL_0016:  ldarg.0
    IL_0017:  ldfld      int32 VisualizePartitioning.MainForm::_workFactor
    IL_001c:  mul.ovf
    IL_001d:  stloc.0
    IL_001e:  br.s       IL_0020

    IL_0020:  ldloc.0
    IL_0021:  ret
  } // end of method MainForm::_Lambda$__6

  .method private specialname static class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32> 
          _Lambda$__7(int32[] e) cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       12 (0xc)
    .maxstack  2
    .locals init ([0] class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32> _Lambda$__7)
//000072:             End With
//000073: 
//000074:             For Each workload In workloads
//000075:                 lvWorkloads.Items.Add(New ListViewItem(workload.Item1) With {.Tag = workload})
//000076:             Next
//000077:             lvWorkloads.Items(0).Selected = True
//000078:         End Sub
//000079: 
//000080:         ''' <summary>Initializes the partitioning methods list view.</summary>
//000081:         Private Sub InitializePartitioningMethods()
//000082:             lvPartitioningMethods.Items.Clear()
//000083:             Dim usingPLINQ As Boolean = rbPLINQ.Checked
//000084:             Dim partitioningMethods = New List(Of Tuple(Of String, Func(Of Integer(), Partitioner(Of Integer))))()
//000085: 
//000086:             ' Static partitioning using the Partitioner.Create overload requires static partitioner support,
//000087:             ' which Parallel.ForEach does not provide.
//000088:             If usingPLINQ Then
//000089:                 partitioningMethods.Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))("Static", Function(e) partitioner.Create(e, False)))
    IL_0000:  ldarg.0
    IL_0001:  ldc.i4.0
    IL_0002:  call       class [mscorlib]System.Collections.Concurrent.OrderablePartitioner`1<!!0> [mscorlib]System.Collections.Concurrent.Partitioner::Create<int32>(!!0[],
                                                                                                                                                                      bool)
    IL_0007:  stloc.0
    IL_0008:  br.s       IL_000a

    IL_000a:  ldloc.0
    IL_000b:  ret
  } // end of method MainForm::_Lambda$__7

  .method private specialname static class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32> 
          _Lambda$__8(int32[] e) cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       12 (0xc)
    .maxstack  2
    .locals init ([0] class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32> _Lambda$__8)
//000090:             End If
//000091: 
//000092:             ' Add a bunch of partitioning approaches that work with both PLINQ and Parallel.ForEach.
//000093:             With partitioningMethods
//000094:                 .Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))("Load Balance", Function(e) partitioner.Create(e, True)))
    IL_0000:  ldarg.0
    IL_0001:  ldc.i4.1
    IL_0002:  call       class [mscorlib]System.Collections.Concurrent.OrderablePartitioner`1<!!0> [mscorlib]System.Collections.Concurrent.Partitioner::Create<int32>(!!0[],
                                                                                                                                                                      bool)
    IL_0007:  stloc.0
    IL_0008:  br.s       IL_000a

    IL_000a:  ldloc.0
    IL_000b:  ret
  } // end of method MainForm::_Lambda$__8

  .method private specialname static class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32> 
          _Lambda$__9(int32[] e) cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       12 (0xc)
    .maxstack  2
    .locals init ([0] class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32> _Lambda$__9)
//000095:                 .Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))("Dynamic(1)", Function(e) ChunkPartitioner.Create(e, 1)))
    IL_0000:  ldarg.0
    IL_0001:  ldc.i4.1
    IL_0002:  call       class [mscorlib]System.Collections.Concurrent.OrderablePartitioner`1<!!0> [ParallelExtensionsExtras]System.Collections.Concurrent.Partitioners.ChunkPartitioner::Create<int32>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>,
                                                                                                                                                                                                        int32)
    IL_0007:  stloc.0
    IL_0008:  br.s       IL_000a

    IL_000a:  ldloc.0
    IL_000b:  ret
  } // end of method MainForm::_Lambda$__9

  .method private specialname static class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32> 
          _Lambda$__10(int32[] e) cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       13 (0xd)
    .maxstack  2
    .locals init ([0] class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32> _Lambda$__10)
//000096:                 .Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))("Dynamic(16)", Function(e) ChunkPartitioner.Create(e, 16)))
    IL_0000:  ldarg.0
    IL_0001:  ldc.i4.s   16
    IL_0003:  call       class [mscorlib]System.Collections.Concurrent.OrderablePartitioner`1<!!0> [ParallelExtensionsExtras]System.Collections.Concurrent.Partitioners.ChunkPartitioner::Create<int32>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>,
                                                                                                                                                                                                        int32)
    IL_0008:  stloc.0
    IL_0009:  br.s       IL_000b

    IL_000b:  ldloc.0
    IL_000c:  ret
  } // end of method MainForm::_Lambda$__10

  .method private specialname static class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32> 
          _Lambda$__13(int32[] e) cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       23 (0x17)
    .maxstack  3
    .locals init ([0] class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32> _Lambda$__13)
//000097:                 .Add(Tuple.Create(Of String,  _
//000098:                 Func(Of Integer(), Partitioner(Of Integer)))("Guided", Function(e) ChunkPartitioner.Create(e, Function(prev)
//000099:                                                                                                                   If prev <= 0 Then
//000100:                                                                                                                       Return If(e.Length <= 1, 1,
//000101:                                                                                                                                 CType(e.Length /
//000102:                                                                                                                                     (Environment.ProcessorCount * 3), Integer))
//000103:                                                                                                                   End If
//000104:                                                                                                                   Dim [next] = CType(prev / 2, Integer)
//000105:                                                                                                                   Return If([next] <= 0, prev, [next])
//000106:                                                                                                               End Function)))
//000107:                 .Add(Tuple.Create(Of String,  _
//000108:                                         Func(Of Integer(),  _
//000109:                                              Partitioner(Of Integer)))("Grow Exponential", Function(e) ChunkPartitioner.Create(e, Function(prev) If(prev <= 0, 1, prev * 2))))
    IL_0000:  ldarg.0
    IL_0001:  ldnull
    IL_0002:  ldftn      int32 VisualizePartitioning.MainForm::_Lambda$__14(int32)
    IL_0008:  newobj     instance void class [mscorlib]System.Func`2<int32,int32>::.ctor(object,
                                                                                         native int)
    IL_000d:  call       class [mscorlib]System.Collections.Concurrent.OrderablePartitioner`1<!!0> [ParallelExtensionsExtras]System.Collections.Concurrent.Partitioners.ChunkPartitioner::Create<int32>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>,
                                                                                                                                                                                                        class [mscorlib]System.Func`2<int32,int32>)
    IL_0012:  stloc.0
    IL_0013:  br.s       IL_0015

    IL_0015:  ldloc.0
    IL_0016:  ret
  } // end of method MainForm::_Lambda$__13

  .method private specialname static int32 
          _Lambda$__14(int32 prev) cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       15 (0xf)
    .maxstack  2
    .locals init ([0] int32 _Lambda$__14)
    IL_0000:  ldarg.0
    IL_0001:  ldc.i4.0
    IL_0002:  ble.s      IL_0009

    IL_0004:  ldarg.0
    IL_0005:  ldc.i4.2
    IL_0006:  mul.ovf
    IL_0007:  br.s       IL_000a

    IL_0009:  ldc.i4.1
    IL_000a:  stloc.0
    IL_000b:  br.s       IL_000d

    IL_000d:  ldloc.0
    IL_000e:  ret
  } // end of method MainForm::_Lambda$__14

  .method private specialname static class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32> 
          _Lambda$__17(int32[] e) cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       11 (0xb)
    .maxstack  1
    .locals init ([0] class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32> _Lambda$__17)
//000110:                 .Add(Tuple.Create(Of String,  _
//000111:                                         Func(Of Integer(), Partitioner(Of Integer)))("Random", Function(e) ChunkPartitioner.Create(e, Function(prev) _localRandom.Value.[Next](e.Length))))
//000112: 
//000113:             End With
//000114: 
//000115:             ' Special-case some PLINQ-only hashing.
//000116:             If usingPLINQ Then
//000117:                 ' The actual enabling of these partitioning schemes is done later, as they can't 
//000118:                 ' be encoded in a partitioner but rather are based on what operators are used in the PLINQ query.
//000119:                 partitioningMethods.Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))(PartitioningStripe, Function(e) partitioner.Create(e)))
    IL_0000:  ldarg.0
    IL_0001:  call       class [mscorlib]System.Collections.Concurrent.OrderablePartitioner`1<!!0> [mscorlib]System.Collections.Concurrent.Partitioner::Create<int32>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>)
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method MainForm::_Lambda$__17

  .method private specialname static class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32> 
          _Lambda$__18(int32[] e) cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       11 (0xb)
    .maxstack  1
    .locals init ([0] class [mscorlib]System.Collections.Concurrent.Partitioner`1<int32> _Lambda$__18)
//000120:                 partitioningMethods.Add(Tuple.Create(Of String, Func(Of Integer(), Partitioner(Of Integer)))(PartitioningHash, Function(e) partitioner.Create(e)))
    IL_0000:  ldarg.0
    IL_0001:  call       class [mscorlib]System.Collections.Concurrent.OrderablePartitioner`1<!!0> [mscorlib]System.Collections.Concurrent.Partitioner::Create<int32>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>)
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method MainForm::_Lambda$__18

  .method private specialname static bool 
          _Lambda$__24(int32 elem) cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       6 (0x6)
    .maxstack  1
    .locals init ([0] bool _Lambda$__24)
//000121:             End If
//000122: 
//000123:             ' Dump the partitioners into the list view.
//000124:             For Each method In partitioningMethods
//000125:                 lvPartitioningMethods.Items.Add(New ListViewItem(method.Item1) With {.Tag = method})
//000126:             Next
//000127:             lvPartitioningMethods.Items(0).Selected = True
//000128:         End Sub
//000129: 
//000130:         ''' <summary>Visualize the partitioning.</summary>
//000131:         Private Sub btnVisualize_Click(ByVal sender As Object, ByVal e As EventArgs) Handles btnVisualize.Click
//000132:             Dim numProcs = tbCores.Value
//000133:             Dim width = pbPartitionedImage.Width
//000134:             Dim height = pbPartitionedImage.Height
//000135:             Dim useParallelFor = rbParallelFor.Checked
//000136:             Dim useParallelForEach = rbParallelForEach.Checked
//000137:             _workFactor = tbWorkFactor.Value
//000138: 
//000139:             ' If we're using Parallel.ForEach or PLINQ, ensure a partitioning scheme was selected and use it.
//000140:             Dim selectedMethod As Tuple(Of String, Func(Of Integer(), Partitioner(Of Integer))) = Nothing
//000141:             If Not useParallelFor Then
//000142:                 If lvPartitioningMethods.SelectedIndices.Count = 0 Then
//000143:                     Exit Sub
//000144:                 Else
//000145:                     selectedMethod = DirectCast(lvPartitioningMethods.SelectedItems(0).Tag, Tuple(Of String, Func(Of Integer(), Partitioner(Of Integer))))
//000146:                 End If
//000147:             End If
//000148: 
//000149:             ' Make sure a workload was selected and use it.
//000150:             If lvWorkloads.SelectedItems.Count = 0 Then
//000151:                 Exit Sub
//000152:             End If
//000153: 
//000154:             Dim selectedWorkload = DirectCast(lvWorkloads.SelectedItems(0).Tag, Tuple(Of String, Func(Of Integer, Integer, Integer)))
//000155: 
//000156:             ' Create a new Bitmap to store the rendered output
//000157:             Dim bmp = New Bitmap(width, height)
//000158: 
//000159:             ' Disable the start button and kick off the background work.
//000160:             btnVisualize.Enabled = False
//000161:             ' Assign each thread a unique id.
//000162:             ' Get faster access to the Bitmap's contents.
//000163:             ' Time the operation.
//000164:             ' Create the partitioner to be used.
//000165:             ' Run the work with Parallel.ForEach
//000166:             ' PLINQ.
//000167:             ' Run the work with PLINQ. If a special partitioning method was selected, use relevant query operators
//000168:             ' to get PLINQ to use that partitioning approach.
//000169:             ' Return the total time from the task
//000170:             ' When the work completes, run the following on the UI thread.
//000171: 
//000172:             Task.Factory.StartNew(Function()
//000173:                                       Dim nextId = -1
//000174:                                       Dim threadId = New ThreadLocal(Of Integer)(Function() Interlocked.Increment(nextId))
//000175:                                       Using fastBmp As New FastBitmap(bmp)
//000176:                                           Dim sw = Stopwatch.StartNew()
//000177:                                           If useParallelFor Then
//000178:                                               If fastBmp Is Nothing Then
//000179:                                                   MsgBox("FastBmp Disposed")
//000180:                                               End If
//000181:                                               Parallel.[For](0, height, New ParallelOptions(), Sub(i)
//000182:                                                                                                    Dim id = threadId.Value
//000183:                                                                                                    DoWork(selectedWorkload.Item2(height, i))
//000184: 
//000185:                                                                                                    For j = 0 To width - 1
//000186:                                                                                                        fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000187:                                                                                                    Next
//000188:                                                                                                End Sub)
//000189:                                           Else
//000190:                                               Dim partitioner = selectedMethod.Item2(Enumerable.Range(0, height).ToArray())
//000191:                                               If useParallelForEach Then
//000192:                                                   Parallel.ForEach(partitioner, New ParallelOptions(), Sub(i)
//000193:                                                                                                            Dim id = threadId.Value
//000194:                                                                                                            DoWork(selectedWorkload.Item2(height, i))
//000195:                                                                                                            For j = 0 To width - 1
//000196:                                                                                                                fastBmp.SetColor(j, i, _colors(id Mod _colors.Length))
//000197:                                                                                                            Next
//000198:                                                                                                        End Sub)
//000199:                                               Else
//000200:                                                   Dim source = partitioner.AsParallel().WithDegreeOfParallelism(numProcs)
//000201:                                                   If selectedMethod.Item1 = PartitioningStripe Then
//000202:                                                       source = source.TakeWhile(Function(elem) True)
    IL_0000:  ldc.i4.1
    IL_0001:  stloc.0
    IL_0002:  br.s       IL_0004

    IL_0004:  ldloc.0
    IL_0005:  ret
  } // end of method MainForm::_Lambda$__24

  .method private specialname static int32 
          _Lambda$__25(int32 i) cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       6 (0x6)
    .maxstack  1
    .locals init ([0] int32 _Lambda$__25)
//000203:                                                   ElseIf selectedMethod.Item1 = PartitioningHash Then
//000204:                                                       source = source.Join(Enumerable.Range(0, height).AsParallel(), Function(i) i, Function(i) i, Function(i, ignore) i)
    IL_0000:  ldarg.0
    IL_0001:  stloc.0
    IL_0002:  br.s       IL_0004

    IL_0004:  ldloc.0
    IL_0005:  ret
  } // end of method MainForm::_Lambda$__25

  .method private specialname static int32 
          _Lambda$__26(int32 i) cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       6 (0x6)
    .maxstack  1
    .locals init ([0] int32 _Lambda$__26)
    IL_0000:  ldarg.0
    IL_0001:  stloc.0
    IL_0002:  br.s       IL_0004

    IL_0004:  ldloc.0
    IL_0005:  ret
  } // end of method MainForm::_Lambda$__26

  .method private specialname static int32 
          _Lambda$__27(int32 i,
                       int32 ignore) cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       6 (0x6)
    .maxstack  1
    .locals init ([0] int32 _Lambda$__27)
    IL_0000:  ldarg.0
    IL_0001:  stloc.0
    IL_0002:  br.s       IL_0004

    IL_0004:  ldloc.0
    IL_0005:  ret
  } // end of method MainForm::_Lambda$__27

  .property instance class [System.Windows.Forms]System.Windows.Forms.Button
          btnVisualize()
  {
    .get instance class [System.Windows.Forms]System.Windows.Forms.Button VisualizePartitioning.MainForm::get_btnVisualize()
    .set instance void VisualizePartitioning.MainForm::set_btnVisualize(class [System.Windows.Forms]System.Windows.Forms.Button)
  } // end of property MainForm::btnVisualize
  .property instance class [System.Windows.Forms]System.Windows.Forms.TrackBar
          tbWorkFactor()
  {
    .get instance class [System.Windows.Forms]System.Windows.Forms.TrackBar VisualizePartitioning.MainForm::get_tbWorkFactor()
    .set instance void VisualizePartitioning.MainForm::set_tbWorkFactor(class [System.Windows.Forms]System.Windows.Forms.TrackBar)
  } // end of property MainForm::tbWorkFactor
  .property instance class [System.Windows.Forms]System.Windows.Forms.RadioButton
          rbParallelFor()
  {
    .set instance void VisualizePartitioning.MainForm::set_rbParallelFor(class [System.Windows.Forms]System.Windows.Forms.RadioButton)
    .get instance class [System.Windows.Forms]System.Windows.Forms.RadioButton VisualizePartitioning.MainForm::get_rbParallelFor()
  } // end of property MainForm::rbParallelFor
  .property instance class [System.Windows.Forms]System.Windows.Forms.RadioButton
          rbParallelForEach()
  {
    .set instance void VisualizePartitioning.MainForm::set_rbParallelForEach(class [System.Windows.Forms]System.Windows.Forms.RadioButton)
    .get instance class [System.Windows.Forms]System.Windows.Forms.RadioButton VisualizePartitioning.MainForm::get_rbParallelForEach()
  } // end of property MainForm::rbParallelForEach
  .property instance class [System.Windows.Forms]System.Windows.Forms.RadioButton
          rbPLINQ()
  {
    .get instance class [System.Windows.Forms]System.Windows.Forms.RadioButton VisualizePartitioning.MainForm::get_rbPLINQ()
    .set instance void VisualizePartitioning.MainForm::set_rbPLINQ(class [System.Windows.Forms]System.Windows.Forms.RadioButton)
  } // end of property MainForm::rbPLINQ
  .property instance class [System.Windows.Forms]System.Windows.Forms.TrackBar
          tbCores()
  {
    .get instance class [System.Windows.Forms]System.Windows.Forms.TrackBar VisualizePartitioning.MainForm::get_tbCores()
    .set instance void VisualizePartitioning.MainForm::set_tbCores(class [System.Windows.Forms]System.Windows.Forms.TrackBar)
  } // end of property MainForm::tbCores
} // end of class VisualizePartitioning.MainForm

.class private auto ansi sealed VisualizePartitioning.Module1
       extends [mscorlib]System.Object
{
  .custom instance void [Microsoft.VisualBasic]Microsoft.VisualBasic.CompilerServices.StandardModuleAttribute::.ctor() = ( 01 00 00 00 ) 
  .method public static void  Main() cil managed
  {
    .entrypoint
    .custom instance void [mscorlib]System.STAThreadAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       27 (0x1b)
    .maxstack  8
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\VisualizePartitioning\VisualizePartitioning_VisualBasic\Module1.vb' 
//000007:         Sub Main()
    IL_0000:  nop
//000008:             Application.EnableVisualStyles()
    IL_0001:  call       void [System.Windows.Forms]System.Windows.Forms.Application::EnableVisualStyles()
    IL_0006:  nop
//000009:             Application.SetCompatibleTextRenderingDefault(False)
    IL_0007:  ldc.i4.0
    IL_0008:  call       void [System.Windows.Forms]System.Windows.Forms.Application::SetCompatibleTextRenderingDefault(bool)
    IL_000d:  nop
//000010:             Application.Run(New MainForm())
    IL_000e:  newobj     instance void VisualizePartitioning.MainForm::.ctor()
    IL_0013:  call       void [System.Windows.Forms]System.Windows.Forms.Application::Run(class [System.Windows.Forms]System.Windows.Forms.Form)
    IL_0018:  nop
//000011:         End Sub
    IL_0019:  nop
    IL_001a:  ret
  } // end of method Module1::Main

} // end of class VisualizePartitioning.Module1

.class private auto ansi sealed My.Resources.Resources
       extends [mscorlib]System.Object
{
  .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
  .custom instance void [System]System.CodeDom.Compiler.GeneratedCodeAttribute::.ctor(string,
                                                                                      string) = ( 01 00 33 53 79 73 74 65 6D 2E 52 65 73 6F 75 72   // ..3System.Resour
                                                                                                  63 65 73 2E 54 6F 6F 6C 73 2E 53 74 72 6F 6E 67   // ces.Tools.Strong
                                                                                                  6C 79 54 79 70 65 64 52 65 73 6F 75 72 63 65 42   // lyTypedResourceB
                                                                                                  75 69 6C 64 65 72 07 34 2E 30 2E 30 2E 30 00 00 ) // uilder.4.0.0.0..
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
  .custom instance void [Microsoft.VisualBasic]Microsoft.VisualBasic.CompilerServices.StandardModuleAttribute::.ctor() = ( 01 00 00 00 ) 
  .custom instance void [Microsoft.VisualBasic]Microsoft.VisualBasic.HideModuleNameAttribute::.ctor() = ( 01 00 00 00 ) 
  .field private static class [mscorlib]System.Resources.ResourceManager resourceMan
  .field private static class [mscorlib]System.Globalization.CultureInfo resourceCulture
  .method assembly specialname static class [mscorlib]System.Resources.ResourceManager 
          get_ResourceManager() cil managed
  {
    // Code size       56 (0x38)
    .maxstack  2
    .locals init ([0] class [mscorlib]System.Resources.ResourceManager ResourceManager,
             [1] class [mscorlib]System.Resources.ResourceManager temp,
             [2] bool VB$CG$t_bool$S0)
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\VisualizePartitioning\VisualizePartitioning_VisualBasic\My Project\Resources.Designer.vb' 
//000038: 			Get
    IL_0000:  nop
//000039: 				If (resourceMan Is Nothing) Then
    IL_0001:  ldsfld     class [mscorlib]System.Resources.ResourceManager My.Resources.Resources::resourceMan
    IL_0006:  ldnull
    IL_0007:  ceq
    IL_0009:  stloc.2
//000040: 					Dim temp As New Global.System.Resources.ResourceManager("Resources", GetType(Resources).Assembly)
//000041: 					resourceMan = temp
//000042: 				End If
//000043: 				Return resourceMan
//000044: 			End Get
//000045: 		End Property
//000046: 
//000047: 		''' <summary>
//000048: 		'''   Overrides the current thread's CurrentUICulture property for all
//000049: 		'''   resource lookups using this strongly typed resource class.
//000050: 		''' </summary>
//000051: 		<Global.System.ComponentModel.EditorBrowsableAttribute(Global.System.ComponentModel.EditorBrowsableState.Advanced)>
//000052: 		Friend Property Culture() As Global.System.Globalization.CultureInfo
//000053: 			Get
//000054: 				Return resourceCulture
//000055: 			End Get
//000056: 			Set(ByVal value As System.Globalization.CultureInfo)
//000057: 				resourceCulture = value
//000058: 			End Set
//000059: 		End Property
//000060: 	End Module
//000061: End Namespace
    IL_000a:  ldloc.2
    IL_000b:  brfalse.s  IL_002d

//000040: 					Dim temp As New Global.System.Resources.ResourceManager("Resources", GetType(Resources).Assembly)
    IL_000d:  ldstr      "Resources"
    IL_0012:  ldtoken    My.Resources.Resources
    IL_0017:  call       class [mscorlib]System.Type [mscorlib]System.Type::GetTypeFromHandle(valuetype [mscorlib]System.RuntimeTypeHandle)
    IL_001c:  callvirt   instance class [mscorlib]System.Reflection.Assembly [mscorlib]System.Type::get_Assembly()
    IL_0021:  newobj     instance void [mscorlib]System.Resources.ResourceManager::.ctor(string,
                                                                                         class [mscorlib]System.Reflection.Assembly)
    IL_0026:  stloc.1
//000041: 					resourceMan = temp
    IL_0027:  ldloc.1
    IL_0028:  stsfld     class [mscorlib]System.Resources.ResourceManager My.Resources.Resources::resourceMan
//000042: 				End If
    IL_002d:  nop
//000043: 				Return resourceMan
    IL_002e:  ldsfld     class [mscorlib]System.Resources.ResourceManager My.Resources.Resources::resourceMan
    IL_0033:  stloc.0
    IL_0034:  br.s       IL_0036

//000044: 			End Get
    IL_0036:  ldloc.0
    IL_0037:  ret
  } // end of method Resources::get_ResourceManager

  .method assembly specialname static class [mscorlib]System.Globalization.CultureInfo 
          get_Culture() cil managed
  {
    // Code size       11 (0xb)
    .maxstack  1
    .locals init ([0] class [mscorlib]System.Globalization.CultureInfo Culture)
//000045: 		End Property
//000046: 
//000047: 		''' <summary>
//000048: 		'''   Overrides the current thread's CurrentUICulture property for all
//000049: 		'''   resource lookups using this strongly typed resource class.
//000050: 		''' </summary>
//000051: 		<Global.System.ComponentModel.EditorBrowsableAttribute(Global.System.ComponentModel.EditorBrowsableState.Advanced)>
//000052: 		Friend Property Culture() As Global.System.Globalization.CultureInfo
//000053: 			Get
    IL_0000:  nop
//000054: 				Return resourceCulture
    IL_0001:  ldsfld     class [mscorlib]System.Globalization.CultureInfo My.Resources.Resources::resourceCulture
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

//000055: 			End Get
    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method Resources::get_Culture

  .method assembly specialname static void 
          set_Culture(class [mscorlib]System.Globalization.CultureInfo 'value') cil managed
  {
    // Code size       9 (0x9)
    .maxstack  8
//000056: 			Set(ByVal value As System.Globalization.CultureInfo)
    IL_0000:  nop
//000057: 				resourceCulture = value
    IL_0001:  ldarg.0
    IL_0002:  stsfld     class [mscorlib]System.Globalization.CultureInfo My.Resources.Resources::resourceCulture
//000058: 			End Set
    IL_0007:  nop
    IL_0008:  ret
  } // end of method Resources::set_Culture

  .property class [mscorlib]System.Resources.ResourceManager
          ResourceManager()
  {
    .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 02 00 00 00 00 00 ) 
    .get class [mscorlib]System.Resources.ResourceManager My.Resources.Resources::get_ResourceManager()
  } // end of property Resources::ResourceManager
  .property class [mscorlib]System.Globalization.CultureInfo
          Culture()
  {
    .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 02 00 00 00 00 00 ) 
    .get class [mscorlib]System.Globalization.CultureInfo My.Resources.Resources::get_Culture()
    .set void My.Resources.Resources::set_Culture(class [mscorlib]System.Globalization.CultureInfo)
  } // end of property Resources::Culture
} // end of class My.Resources.Resources

.class private auto ansi sealed beforefieldinit My.Settings
       extends [System]System.Configuration.ApplicationSettingsBase
{
  .custom instance void [System]System.CodeDom.Compiler.GeneratedCodeAttribute::.ctor(string,
                                                                                      string) = ( 01 00 4B 4D 69 63 72 6F 73 6F 66 74 2E 56 69 73   // ..KMicrosoft.Vis
                                                                                                  75 61 6C 53 74 75 64 69 6F 2E 45 64 69 74 6F 72   // ualStudio.Editor
                                                                                                  73 2E 53 65 74 74 69 6E 67 73 44 65 73 69 67 6E   // s.SettingsDesign
                                                                                                  65 72 2E 53 65 74 74 69 6E 67 73 53 69 6E 67 6C   // er.SettingsSingl
                                                                                                  65 46 69 6C 65 47 65 6E 65 72 61 74 6F 72 08 31   // eFileGenerator.1
                                                                                                  30 2E 30 2E 30 2E 30 00 00 )                      // 0.0.0.0..
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
  .field private static class My.Settings defaultInstance
  .method private specialname rtspecialname static 
          void  .cctor() cil managed
  {
    // Code size       22 (0x16)
    .maxstack  8
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\VisualizePartitioning\VisualizePartitioning_VisualBasic\My Project\Settings.Designer.vb' 
//000019:         Private Shared defaultInstance As Settings = (CType(Global.System.Configuration.ApplicationSettingsBase.Synchronized(New Settings()), Settings))
    IL_0000:  newobj     instance void My.Settings::.ctor()
    IL_0005:  call       class [System]System.Configuration.SettingsBase [System]System.Configuration.SettingsBase::Synchronized(class [System]System.Configuration.SettingsBase)
    IL_000a:  castclass  My.Settings
    IL_000f:  stsfld     class My.Settings My.Settings::defaultInstance
    IL_0014:  nop
    IL_0015:  ret
  } // end of method Settings::.cctor

  .method public specialname rtspecialname 
          instance void  .ctor() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       9 (0x9)
    .maxstack  8
    IL_0000:  ldarg.0
    IL_0001:  call       instance void [System]System.Configuration.ApplicationSettingsBase::.ctor()
    IL_0006:  nop
    IL_0007:  nop
    IL_0008:  ret
  } // end of method Settings::.ctor

  .method public specialname static class My.Settings 
          get_Default() cil managed
  {
    // Code size       11 (0xb)
    .maxstack  1
    .locals init ([0] class My.Settings Default)
//000020: 
//000021:         Public Shared ReadOnly Property [Default]() As Settings
//000022:             Get
    IL_0000:  nop
//000023:                 Return defaultInstance
    IL_0001:  ldsfld     class My.Settings My.Settings::defaultInstance
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

//000024:             End Get
    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method Settings::get_Default

  .property class My.Settings Default()
  {
    .get class My.Settings My.Settings::get_Default()
  } // end of property Settings::Default
} // end of class My.Settings


// =============================================================

// *********** DISASSEMBLY COMPLETE ***********************
