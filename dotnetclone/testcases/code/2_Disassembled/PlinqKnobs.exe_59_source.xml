<project><name></name><description></description><prog_language></prog_language><source_elements>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\PlinqKnobs\PlinqKnobs_CSharp\Program.cs" startline="18" endline="25"><![CDATA[
     {
         // ... Uncomment each of the below four lines one-by-one to test the relevant PLINQ "knob" ...
 
         AsOrdered();
         //WithMergeOptions();
         //WithCancellation();
         //WithDegreeOfParallelism();
     }
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\PlinqKnobs\PlinqKnobs_CSharp\Program.cs" startline="26" endline="70"><![CDATA[
 
     private static void AsOrdered()
     {
         #region Sequential
         var items = Enumerable.Range(1, 100);
         var q = from e in items
                 where (e % 2 == 0) // is even
                 select e;
 
         foreach (var e in q)
         {
             Console.WriteLine(e);
         }
         Console.Write("Complete
         Console.ReadLine();
         #endregion
 
         #region Parallel
         var items2 = ParallelEnumerable.Range(1, 100);
         q = from e in items2
             where (e % 2 == 0) // is even
             select e;
 
         foreach (var e in q)
         {
             Console.WriteLine(e);
         }
         Console.Write("Complete
         Console.ReadLine();
         #endregion
 
         #region Parallel with Ordering
         q = from e in items2.AsOrdered()
             where (e % 2 == 0) // is even
             select e;
 
         foreach (var e in q)
         {
             Console.WriteLine(e);
         }
 
         Console.Write("Complete
         Console.ReadLine();
         #endregion
     }
 
     private static void WithMergeOptions()
     {
         #region Define the query
         var items = ParallelEnumerable.Range(1, 1000);
         var q = from e in items
                 select DoWork(e);
         #endregion
 
         #region Auto Buffered
         foreach (var e in q)
         {
             Console.WriteLine(e);
         }
 
         Console.Write("Complete
         Console.ReadLine();
         #endregion
 
         #region Fully Buffered
         foreach (var e in q.WithMergeOptions(ParallelMergeOptions.FullyBuffered))
         {
             Console.WriteLine(e);
         }
 
         Console.Write("Complete
         Console.ReadLine();
         #endregion
 
         #region Not buffered
         foreach (var e in q.WithMergeOptions(ParallelMergeOptions.NotBuffered))
         {
             Console.WriteLine(e);
         }
 
         Console.Write("Complete
         Console.ReadLine();
         #endregion
     }
 
     private static void WithCancellation()
     {
         #region Define the query
         var items = ParallelEnumerable.Range(1, 1000);
         var q = from e in items.WithMergeOptions(ParallelMergeOptions.NotBuffered)
                 select DoWork(e);
 
         var cts = new CancellationTokenSource();
 
         #endregion
 
         #region Kick off the asynchronous cancellation
         Task.Factory.StartNew(() =>
         {
             Thread.Sleep(300);
             cts.Cancel();
         });
         #endregion
 
         #region Enumerate the query
         try
         {
             foreach (var e in q.WithCancellation(cts.Token))
             {
                 Console.WriteLine(e);
             }
         }
         catch (OperationCanceledException)
         {
             Console.WriteLine("Cancelled!");
         }
         Console.ReadLine();
         #endregion
     }
 
     private static void WithDegreeOfParallelism()
     {
         var items = ParallelEnumerable.Range(1, 200);
 
         #region Default DOP
         var sw = new Stopwatch();
         sw.Start();
         Console.Write("Default DOP
 
         items.Average(e => DoWork2(e));
 
         sw.Stop();
         Console.WriteLine(sw.ElapsedMilliseconds);
         Console.WriteLine("Complete
         #endregion
 
         #region DOP = 2
         sw.Reset();
         sw.Start();
         Console.Write("DOP = 2
 
         items.WithDegreeOfParallelism(2)
              .Average(e => DoWork2(e));
 
         sw.Stop();
         Console.WriteLine(sw.ElapsedMilliseconds);
         Console.Write("Complete
         Console.ReadLine();
         #endregion
     }
 
     #region Helper functions
     private static int DoWork(int input)
     {
         Thread.Sleep(20);
         return input * 2;
     }
 
     private static int DoWork2(int input)
     {
         Thread.SpinWait(5000000);
         return input * 2;
     }
     #endregion
 }
         foreach (var e in q)
         {
             Console.WriteLine(e);
         }
         foreach (var e in q)
         {
             Console.WriteLine(e);
         }
         Console.Write("Complete
         Console.ReadLine();
         #endregion
 
         #region Parallel
         var items2 = ParallelEnumerable.Range(1, 100);
         q = from e in items2
             where (e % 2 == 0) // is even
             select e;
 
         foreach (var e in q)
         {
             Console.WriteLine(e);
         }
         Console.Write("Complete
         Console.ReadLine();
         #endregion
 
         #region Parallel with Ordering
         q = from e in items2.AsOrdered()
             where (e % 2 == 0) // is even
             select e;
 
         foreach (var e in q)
         {
             Console.WriteLine(e);
         }
 
         Console.Write("Complete
         Console.ReadLine();
         #endregion
     }
 
     private static void WithMergeOptions()
     {
         #region Define the query
         var items = ParallelEnumerable.Range(1, 1000);
         var q = from e in items
                 select DoWork(e);
         #endregion
 
         #region Auto Buffered
         foreach (var e in q)
         {
             Console.WriteLine(e);
         }
 
         Console.Write("Complete
         Console.ReadLine();
         #endregion
 
         #region Fully Buffered
         foreach (var e in q.WithMergeOptions(ParallelMergeOptions.FullyBuffered))
         {
             Console.WriteLine(e);
         }
 
         Console.Write("Complete
         Console.ReadLine();
         #endregion
 
         #region Not buffered
         foreach (var e in q.WithMergeOptions(ParallelMergeOptions.NotBuffered))
         {
             Console.WriteLine(e);
         }
 
         Console.Write("Complete
         Console.ReadLine();
         #endregion
     }
 
     private static void WithCancellation()
     {
         #region Define the query
         var items = ParallelEnumerable.Range(1, 1000);
         var q = from e in items.WithMergeOptions(ParallelMergeOptions.NotBuffered)
                 select DoWork(e);
 
         var cts = new CancellationTokenSource();
 
         #endregion
 
         #region Kick off the asynchronous cancellation
         Task.Factory.StartNew(() =>
         {
             Thread.Sleep(300);
             cts.Cancel();
         });
         #endregion
 
         #region Enumerate the query
         try
         {
             foreach (var e in q.WithCancellation(cts.Token))
             {
                 Console.WriteLine(e);
             }
         }
         catch (OperationCanceledException)
         {
             Console.WriteLine("Cancelled!");
         }
         Console.ReadLine();
         #endregion
     }
 
     private static void WithDegreeOfParallelism()
     {
         var items = ParallelEnumerable.Range(1, 200);
 
         #region Default DOP
         var sw = new Stopwatch();
         sw.Start();
         Console.Write("Default DOP
 
         items.Average(e => DoWork2(e));
 
         sw.Stop();
         Console.WriteLine(sw.ElapsedMilliseconds);
         Console.WriteLine("Complete
         #endregion
 
         #region DOP = 2
         sw.Reset();
         sw.Start();
         Console.Write("DOP = 2
 
         items.WithDegreeOfParallelism(2)
              .Average(e => DoWork2(e));
 
         sw.Stop();
         Console.WriteLine(sw.ElapsedMilliseconds);
         Console.Write("Complete
         Console.ReadLine();
         #endregion
     }
 
     #region Helper functions
     private static int DoWork(int input)
     {
         Thread.Sleep(20);
         return input * 2;
     }
 
     private static int DoWork2(int input)
     {
         Thread.SpinWait(5000000);
         return input * 2;
     }
     #endregion
 }
         Console.Write("Complete
         Console.ReadLine();
         #endregion
 
         #region Parallel
         var items2 = ParallelEnumerable.Range(1, 100);
         q = from e in items2
             where (e % 2 == 0) // is even
             select e;
 
         foreach (var e in q)
         {
             Console.WriteLine(e);
         }
         Console.Write("Complete
         Console.ReadLine();
         #endregion
 
         #region Parallel with Ordering
         q = from e in items2.AsOrdered()
             where (e % 2 == 0) // is even
             select e;
 
         foreach (var e in q)
         {
             Console.WriteLine(e);
         }
 
         Console.Write("Complete
         Console.ReadLine();
         #endregion
     }
 
     private static void WithMergeOptions()
     {
         #region Define the query
         var items = ParallelEnumerable.Range(1, 1000);
         var q = from e in items
                 select DoWork(e);
         #endregion
 
         #region Auto Buffered
         foreach (var e in q)
         {
             Console.WriteLine(e);
         }
 
         Console.Write("Complete
         Console.ReadLine();
         #endregion
 
         #region Fully Buffered
         foreach (var e in q.WithMergeOptions(ParallelMergeOptions.FullyBuffered))
         {
             Console.WriteLine(e);
         }
 
         Console.Write("Complete
         Console.ReadLine();
         #endregion
 
         #region Not buffered
         foreach (var e in q.WithMergeOptions(ParallelMergeOptions.NotBuffered))
         {
             Console.WriteLine(e);
         }
 
         Console.Write("Complete
         Console.ReadLine();
         #endregion
     }
 
     private static void WithCancellation()
     {
         #region Define the query
         var items = ParallelEnumerable.Range(1, 1000);
         var q = from e in items.WithMergeOptions(ParallelMergeOptions.NotBuffered)
                 select DoWork(e);
 
         var cts = new CancellationTokenSource();
 
         #endregion
 
         #region Kick off the asynchronous cancellation
         Task.Factory.StartNew(() =>
         {
             Thread.Sleep(300);
             cts.Cancel();
         });
         #endregion
 
         #region Enumerate the query
         try
         {
             foreach (var e in q.WithCancellation(cts.Token))
             {
                 Console.WriteLine(e);
             }
         }
         catch (OperationCanceledException)
         {
             Console.WriteLine("Cancelled!");
         }
         Console.ReadLine();
         #endregion
     }
 
     private static void WithDegreeOfParallelism()
     {
         var items = ParallelEnumerable.Range(1, 200);
 
         #region Default DOP
         var sw = new Stopwatch();
         sw.Start();
         Console.Write("Default DOP
 
         items.Average(e => DoWork2(e));
 
         sw.Stop();
         Console.WriteLine(sw.ElapsedMilliseconds);
         Console.WriteLine("Complete
         #endregion
 
         #region DOP = 2
         sw.Reset();
         sw.Start();
         Console.Write("DOP = 2
 
         items.WithDegreeOfParallelism(2)
              .Average(e => DoWork2(e));
 
         sw.Stop();
         Console.WriteLine(sw.ElapsedMilliseconds);
         Console.Write("Complete
         Console.ReadLine();
         #endregion
     }
 
     #region Helper functions
     private static int DoWork(int input)
     {
         Thread.Sleep(20);
         return input * 2;
     }
 
     private static int DoWork2(int input)
     {
         Thread.SpinWait(5000000);
         return input * 2;
     }
     #endregion
 }
         foreach (var e in q)
         {
             Console.WriteLine(e);
         }
         foreach (var e in q)
         {
             Console.WriteLine(e);
         }
         Console.Write("Complete
         Console.ReadLine();
         #endregion
 
         #region Parallel with Ordering
         q = from e in items2.AsOrdered()
             where (e % 2 == 0) // is even
             select e;
 
         foreach (var e in q)
         {
             Console.WriteLine(e);
         }
 
         Console.Write("Complete
         Console.ReadLine();
         #endregion
     }
 
     private static void WithMergeOptions()
     {
         #region Define the query
         var items = ParallelEnumerable.Range(1, 1000);
         var q = from e in items
                 select DoWork(e);
         #endregion
 
         #region Auto Buffered
         foreach (var e in q)
         {
             Console.WriteLine(e);
         }
 
         Console.Write("Complete
         Console.ReadLine();
         #endregion
 
         #region Fully Buffered
         foreach (var e in q.WithMergeOptions(ParallelMergeOptions.FullyBuffered))
         {
             Console.WriteLine(e);
         }
 
         Console.Write("Complete
         Console.ReadLine();
         #endregion
 
         #region Not buffered
         foreach (var e in q.WithMergeOptions(ParallelMergeOptions.NotBuffered))
         {
             Console.WriteLine(e);
         }
 
         Console.Write("Complete
         Console.ReadLine();
         #endregion
     }
 
     private static void WithCancellation()
     {
         #region Define the query
         var items = ParallelEnumerable.Range(1, 1000);
         var q = from e in items.WithMergeOptions(ParallelMergeOptions.NotBuffered)
                 select DoWork(e);
 
         var cts = new CancellationTokenSource();
 
         #endregion
 
         #region Kick off the asynchronous cancellation
         Task.Factory.StartNew(() =>
         {
             Thread.Sleep(300);
             cts.Cancel();
         });
         #endregion
 
         #region Enumerate the query
         try
         {
             foreach (var e in q.WithCancellation(cts.Token))
             {
                 Console.WriteLine(e);
             }
         }
         catch (OperationCanceledException)
         {
             Console.WriteLine("Cancelled!");
         }
         Console.ReadLine();
         #endregion
     }
 
     private static void WithDegreeOfParallelism()
     {
         var items = ParallelEnumerable.Range(1, 200);
 
         #region Default DOP
         var sw = new Stopwatch();
         sw.Start();
         Console.Write("Default DOP
 
         items.Average(e => DoWork2(e));
 
         sw.Stop();
         Console.WriteLine(sw.ElapsedMilliseconds);
         Console.WriteLine("Complete
         #endregion
 
         #region DOP = 2
         sw.Reset();
         sw.Start();
         Console.Write("DOP = 2
 
         items.WithDegreeOfParallelism(2)
              .Average(e => DoWork2(e));
 
         sw.Stop();
         Console.WriteLine(sw.ElapsedMilliseconds);
         Console.Write("Complete
         Console.ReadLine();
         #endregion
     }
 
     #region Helper functions
     private static int DoWork(int input)
     {
         Thread.Sleep(20);
         return input * 2;
     }
 
     private static int DoWork2(int input)
     {
         Thread.SpinWait(5000000);
         return input * 2;
     }
     #endregion
 }
         Console.Write("Complete
         Console.ReadLine();
         #endregion
 
         #region Parallel with Ordering
         q = from e in items2.AsOrdered()
             where (e % 2 == 0) // is even
             select e;
 
         foreach (var e in q)
         {
             Console.WriteLine(e);
         }
 
         Console.Write("Complete
         Console.ReadLine();
         #endregion
     }
 
     private static void WithMergeOptions()
     {
         #region Define the query
         var items = ParallelEnumerable.Range(1, 1000);
         var q = from e in items
                 select DoWork(e);
         #endregion
 
         #region Auto Buffered
         foreach (var e in q)
         {
             Console.WriteLine(e);
         }
 
         Console.Write("Complete
         Console.ReadLine();
         #endregion
 
         #region Fully Buffered
         foreach (var e in q.WithMergeOptions(ParallelMergeOptions.FullyBuffered))
         {
             Console.WriteLine(e);
         }
 
         Console.Write("Complete
         Console.ReadLine();
         #endregion
 
         #region Not buffered
         foreach (var e in q.WithMergeOptions(ParallelMergeOptions.NotBuffered))
         {
             Console.WriteLine(e);
         }
 
         Console.Write("Complete
         Console.ReadLine();
         #endregion
     }
 
     private static void WithCancellation()
     {
         #region Define the query
         var items = ParallelEnumerable.Range(1, 1000);
         var q = from e in items.WithMergeOptions(ParallelMergeOptions.NotBuffered)
                 select DoWork(e);
 
         var cts = new CancellationTokenSource();
 
         #endregion
 
         #region Kick off the asynchronous cancellation
         Task.Factory.StartNew(() =>
         {
             Thread.Sleep(300);
             cts.Cancel();
         });
         #endregion
 
         #region Enumerate the query
         try
         {
             foreach (var e in q.WithCancellation(cts.Token))
             {
                 Console.WriteLine(e);
             }
         }
         catch (OperationCanceledException)
         {
             Console.WriteLine("Cancelled!");
         }
         Console.ReadLine();
         #endregion
     }
 
     private static void WithDegreeOfParallelism()
     {
         var items = ParallelEnumerable.Range(1, 200);
 
         #region Default DOP
         var sw = new Stopwatch();
         sw.Start();
         Console.Write("Default DOP
 
         items.Average(e => DoWork2(e));
 
         sw.Stop();
         Console.WriteLine(sw.ElapsedMilliseconds);
         Console.WriteLine("Complete
         #endregion
 
         #region DOP = 2
         sw.Reset();
         sw.Start();
         Console.Write("DOP = 2
 
         items.WithDegreeOfParallelism(2)
              .Average(e => DoWork2(e));
 
         sw.Stop();
         Console.WriteLine(sw.ElapsedMilliseconds);
         Console.Write("Complete
         Console.ReadLine();
         #endregion
     }
 
     #region Helper functions
     private static int DoWork(int input)
     {
         Thread.Sleep(20);
         return input * 2;
     }
 
     private static int DoWork2(int input)
     {
         Thread.SpinWait(5000000);
         return input * 2;
     }
     #endregion
 }
         foreach (var e in q)
         {
             Console.WriteLine(e);
         }
         foreach (var e in q)
         {
             Console.WriteLine(e);
         }
 
         Console.Write("Complete
         Console.ReadLine();
         #endregion
     }
 
     private static void WithMergeOptions()
     {
         #region Define the query
         var items = ParallelEnumerable.Range(1, 1000);
         var q = from e in items
                 select DoWork(e);
         #endregion
 
         #region Auto Buffered
         foreach (var e in q)
         {
             Console.WriteLine(e);
         }
 
         Console.Write("Complete
         Console.ReadLine();
         #endregion
 
         #region Fully Buffered
         foreach (var e in q.WithMergeOptions(ParallelMergeOptions.FullyBuffered))
         {
             Console.WriteLine(e);
         }
 
         Console.Write("Complete
         Console.ReadLine();
         #endregion
 
         #region Not buffered
         foreach (var e in q.WithMergeOptions(ParallelMergeOptions.NotBuffered))
         {
             Console.WriteLine(e);
         }
 
         Console.Write("Complete
         Console.ReadLine();
         #endregion
     }
 
     private static void WithCancellation()
     {
         #region Define the query
         var items = ParallelEnumerable.Range(1, 1000);
         var q = from e in items.WithMergeOptions(ParallelMergeOptions.NotBuffered)
                 select DoWork(e);
 
         var cts = new CancellationTokenSource();
 
         #endregion
 
         #region Kick off the asynchronous cancellation
         Task.Factory.StartNew(() =>
         {
             Thread.Sleep(300);
             cts.Cancel();
         });
         #endregion
 
         #region Enumerate the query
         try
         {
             foreach (var e in q.WithCancellation(cts.Token))
             {
                 Console.WriteLine(e);
             }
         }
         catch (OperationCanceledException)
         {
             Console.WriteLine("Cancelled!");
         }
         Console.ReadLine();
         #endregion
     }
 
     private static void WithDegreeOfParallelism()
     {
         var items = ParallelEnumerable.Range(1, 200);
 
         #region Default DOP
         var sw = new Stopwatch();
         sw.Start();
         Console.Write("Default DOP
 
         items.Average(e => DoWork2(e));
 
         sw.Stop();
         Console.WriteLine(sw.ElapsedMilliseconds);
         Console.WriteLine("Complete
         #endregion
 
         #region DOP = 2
         sw.Reset();
         sw.Start();
         Console.Write("DOP = 2
 
         items.WithDegreeOfParallelism(2)
              .Average(e => DoWork2(e));
 
         sw.Stop();
         Console.WriteLine(sw.ElapsedMilliseconds);
         Console.Write("Complete
         Console.ReadLine();
         #endregion
     }
 
     #region Helper functions
     private static int DoWork(int input)
     {
         Thread.Sleep(20);
         return input * 2;
     }
 
     private static int DoWork2(int input)
     {
         Thread.SpinWait(5000000);
         return input * 2;
     }
     #endregion
 }
         Console.Write("Complete
         Console.ReadLine();
         #endregion
     }
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\PlinqKnobs\PlinqKnobs_CSharp\Program.cs" startline="71" endline="109"><![CDATA[
 
     private static void WithMergeOptions()
     {
         #region Define the query
         var items = ParallelEnumerable.Range(1, 1000);
         var q = from e in items
                 select DoWork(e);
         #endregion
 
         #region Auto Buffered
         foreach (var e in q)
         {
             Console.WriteLine(e);
         }
 
         Console.Write("Complete
         Console.ReadLine();
         #endregion
 
         #region Fully Buffered
         foreach (var e in q.WithMergeOptions(ParallelMergeOptions.FullyBuffered))
         {
             Console.WriteLine(e);
         }
 
         Console.Write("Complete
         Console.ReadLine();
         #endregion
 
         #region Not buffered
         foreach (var e in q.WithMergeOptions(ParallelMergeOptions.NotBuffered))
         {
             Console.WriteLine(e);
         }
 
         Console.Write("Complete
         Console.ReadLine();
         #endregion
     }
 
     private static void WithCancellation()
     {
         #region Define the query
         var items = ParallelEnumerable.Range(1, 1000);
         var q = from e in items.WithMergeOptions(ParallelMergeOptions.NotBuffered)
                 select DoWork(e);
 
         var cts = new CancellationTokenSource();
 
         #endregion
 
         #region Kick off the asynchronous cancellation
         Task.Factory.StartNew(() =>
         {
             Thread.Sleep(300);
             cts.Cancel();
         });
         #endregion
 
         #region Enumerate the query
         try
         {
             foreach (var e in q.WithCancellation(cts.Token))
             {
                 Console.WriteLine(e);
             }
         }
         catch (OperationCanceledException)
         {
             Console.WriteLine("Cancelled!");
         }
         Console.ReadLine();
         #endregion
     }
 
     private static void WithDegreeOfParallelism()
     {
         var items = ParallelEnumerable.Range(1, 200);
 
         #region Default DOP
         var sw = new Stopwatch();
         sw.Start();
         Console.Write("Default DOP
 
         items.Average(e => DoWork2(e));
 
         sw.Stop();
         Console.WriteLine(sw.ElapsedMilliseconds);
         Console.WriteLine("Complete
         #endregion
 
         #region DOP = 2
         sw.Reset();
         sw.Start();
         Console.Write("DOP = 2
 
         items.WithDegreeOfParallelism(2)
              .Average(e => DoWork2(e));
 
         sw.Stop();
         Console.WriteLine(sw.ElapsedMilliseconds);
         Console.Write("Complete
         Console.ReadLine();
         #endregion
     }
 
     #region Helper functions
     private static int DoWork(int input)
     {
         Thread.Sleep(20);
         return input * 2;
     }
 
     private static int DoWork2(int input)
     {
         Thread.SpinWait(5000000);
         return input * 2;
     }
     #endregion
 }
         foreach (var e in q)
         {
             Console.WriteLine(e);
         }
         foreach (var e in q)
         {
             Console.WriteLine(e);
         }
 
         Console.Write("Complete
         Console.ReadLine();
         #endregion
 
         #region Fully Buffered
         foreach (var e in q.WithMergeOptions(ParallelMergeOptions.FullyBuffered))
         {
             Console.WriteLine(e);
         }
 
         Console.Write("Complete
         Console.ReadLine();
         #endregion
 
         #region Not buffered
         foreach (var e in q.WithMergeOptions(ParallelMergeOptions.NotBuffered))
         {
             Console.WriteLine(e);
         }
 
         Console.Write("Complete
         Console.ReadLine();
         #endregion
     }
 
     private static void WithCancellation()
     {
         #region Define the query
         var items = ParallelEnumerable.Range(1, 1000);
         var q = from e in items.WithMergeOptions(ParallelMergeOptions.NotBuffered)
                 select DoWork(e);
 
         var cts = new CancellationTokenSource();
 
         #endregion
 
         #region Kick off the asynchronous cancellation
         Task.Factory.StartNew(() =>
         {
             Thread.Sleep(300);
             cts.Cancel();
         });
         #endregion
 
         #region Enumerate the query
         try
         {
             foreach (var e in q.WithCancellation(cts.Token))
             {
                 Console.WriteLine(e);
             }
         }
         catch (OperationCanceledException)
         {
             Console.WriteLine("Cancelled!");
         }
         Console.ReadLine();
         #endregion
     }
 
     private static void WithDegreeOfParallelism()
     {
         var items = ParallelEnumerable.Range(1, 200);
 
         #region Default DOP
         var sw = new Stopwatch();
         sw.Start();
         Console.Write("Default DOP
 
         items.Average(e => DoWork2(e));
 
         sw.Stop();
         Console.WriteLine(sw.ElapsedMilliseconds);
         Console.WriteLine("Complete
         #endregion
 
         #region DOP = 2
         sw.Reset();
         sw.Start();
         Console.Write("DOP = 2
 
         items.WithDegreeOfParallelism(2)
              .Average(e => DoWork2(e));
 
         sw.Stop();
         Console.WriteLine(sw.ElapsedMilliseconds);
         Console.Write("Complete
         Console.ReadLine();
         #endregion
     }
 
     #region Helper functions
     private static int DoWork(int input)
     {
         Thread.Sleep(20);
         return input * 2;
     }
 
     private static int DoWork2(int input)
     {
         Thread.SpinWait(5000000);
         return input * 2;
     }
     #endregion
 }
         Console.Write("Complete
         Console.ReadLine();
         #endregion
 
         #region Fully Buffered
         foreach (var e in q.WithMergeOptions(ParallelMergeOptions.FullyBuffered))
         {
             Console.WriteLine(e);
         }
 
         Console.Write("Complete
         Console.ReadLine();
         #endregion
 
         #region Not buffered
         foreach (var e in q.WithMergeOptions(ParallelMergeOptions.NotBuffered))
         {
             Console.WriteLine(e);
         }
 
         Console.Write("Complete
         Console.ReadLine();
         #endregion
     }
 
     private static void WithCancellation()
     {
         #region Define the query
         var items = ParallelEnumerable.Range(1, 1000);
         var q = from e in items.WithMergeOptions(ParallelMergeOptions.NotBuffered)
                 select DoWork(e);
 
         var cts = new CancellationTokenSource();
 
         #endregion
 
         #region Kick off the asynchronous cancellation
         Task.Factory.StartNew(() =>
         {
             Thread.Sleep(300);
             cts.Cancel();
         });
         #endregion
 
         #region Enumerate the query
         try
         {
             foreach (var e in q.WithCancellation(cts.Token))
             {
                 Console.WriteLine(e);
             }
         }
         catch (OperationCanceledException)
         {
             Console.WriteLine("Cancelled!");
         }
         Console.ReadLine();
         #endregion
     }
 
     private static void WithDegreeOfParallelism()
     {
         var items = ParallelEnumerable.Range(1, 200);
 
         #region Default DOP
         var sw = new Stopwatch();
         sw.Start();
         Console.Write("Default DOP
 
         items.Average(e => DoWork2(e));
 
         sw.Stop();
         Console.WriteLine(sw.ElapsedMilliseconds);
         Console.WriteLine("Complete
         #endregion
 
         #region DOP = 2
         sw.Reset();
         sw.Start();
         Console.Write("DOP = 2
 
         items.WithDegreeOfParallelism(2)
              .Average(e => DoWork2(e));
 
         sw.Stop();
         Console.WriteLine(sw.ElapsedMilliseconds);
         Console.Write("Complete
         Console.ReadLine();
         #endregion
     }
 
     #region Helper functions
     private static int DoWork(int input)
     {
         Thread.Sleep(20);
         return input * 2;
     }
 
     private static int DoWork2(int input)
     {
         Thread.SpinWait(5000000);
         return input * 2;
     }
     #endregion
 }
         foreach (var e in q.WithMergeOptions(ParallelMergeOptions.FullyBuffered))
         {
             Console.WriteLine(e);
         }
         foreach (var e in q.WithMergeOptions(ParallelMergeOptions.FullyBuffered))
         {
             Console.WriteLine(e);
         }
 
         Console.Write("Complete
         Console.ReadLine();
         #endregion
 
         #region Not buffered
         foreach (var e in q.WithMergeOptions(ParallelMergeOptions.NotBuffered))
         {
             Console.WriteLine(e);
         }
 
         Console.Write("Complete
         Console.ReadLine();
         #endregion
     }
 
     private static void WithCancellation()
     {
         #region Define the query
         var items = ParallelEnumerable.Range(1, 1000);
         var q = from e in items.WithMergeOptions(ParallelMergeOptions.NotBuffered)
                 select DoWork(e);
 
         var cts = new CancellationTokenSource();
 
         #endregion
 
         #region Kick off the asynchronous cancellation
         Task.Factory.StartNew(() =>
         {
             Thread.Sleep(300);
             cts.Cancel();
         });
         #endregion
 
         #region Enumerate the query
         try
         {
             foreach (var e in q.WithCancellation(cts.Token))
             {
                 Console.WriteLine(e);
             }
         }
         catch (OperationCanceledException)
         {
             Console.WriteLine("Cancelled!");
         }
         Console.ReadLine();
         #endregion
     }
 
     private static void WithDegreeOfParallelism()
     {
         var items = ParallelEnumerable.Range(1, 200);
 
         #region Default DOP
         var sw = new Stopwatch();
         sw.Start();
         Console.Write("Default DOP
 
         items.Average(e => DoWork2(e));
 
         sw.Stop();
         Console.WriteLine(sw.ElapsedMilliseconds);
         Console.WriteLine("Complete
         #endregion
 
         #region DOP = 2
         sw.Reset();
         sw.Start();
         Console.Write("DOP = 2
 
         items.WithDegreeOfParallelism(2)
              .Average(e => DoWork2(e));
 
         sw.Stop();
         Console.WriteLine(sw.ElapsedMilliseconds);
         Console.Write("Complete
         Console.ReadLine();
         #endregion
     }
 
     #region Helper functions
     private static int DoWork(int input)
     {
         Thread.Sleep(20);
         return input * 2;
     }
 
     private static int DoWork2(int input)
     {
         Thread.SpinWait(5000000);
         return input * 2;
     }
     #endregion
 }
         Console.Write("Complete
         Console.ReadLine();
         #endregion
 
         #region Not buffered
         foreach (var e in q.WithMergeOptions(ParallelMergeOptions.NotBuffered))
         {
             Console.WriteLine(e);
         }
 
         Console.Write("Complete
         Console.ReadLine();
         #endregion
     }
 
     private static void WithCancellation()
     {
         #region Define the query
         var items = ParallelEnumerable.Range(1, 1000);
         var q = from e in items.WithMergeOptions(ParallelMergeOptions.NotBuffered)
                 select DoWork(e);
 
         var cts = new CancellationTokenSource();
 
         #endregion
 
         #region Kick off the asynchronous cancellation
         Task.Factory.StartNew(() =>
         {
             Thread.Sleep(300);
             cts.Cancel();
         });
         #endregion
 
         #region Enumerate the query
         try
         {
             foreach (var e in q.WithCancellation(cts.Token))
             {
                 Console.WriteLine(e);
             }
         }
         catch (OperationCanceledException)
         {
             Console.WriteLine("Cancelled!");
         }
         Console.ReadLine();
         #endregion
     }
 
     private static void WithDegreeOfParallelism()
     {
         var items = ParallelEnumerable.Range(1, 200);
 
         #region Default DOP
         var sw = new Stopwatch();
         sw.Start();
         Console.Write("Default DOP
 
         items.Average(e => DoWork2(e));
 
         sw.Stop();
         Console.WriteLine(sw.ElapsedMilliseconds);
         Console.WriteLine("Complete
         #endregion
 
         #region DOP = 2
         sw.Reset();
         sw.Start();
         Console.Write("DOP = 2
 
         items.WithDegreeOfParallelism(2)
              .Average(e => DoWork2(e));
 
         sw.Stop();
         Console.WriteLine(sw.ElapsedMilliseconds);
         Console.Write("Complete
         Console.ReadLine();
         #endregion
     }
 
     #region Helper functions
     private static int DoWork(int input)
     {
         Thread.Sleep(20);
         return input * 2;
     }
 
     private static int DoWork2(int input)
     {
         Thread.SpinWait(5000000);
         return input * 2;
     }
     #endregion
 }
         foreach (var e in q.WithMergeOptions(ParallelMergeOptions.NotBuffered))
         {
             Console.WriteLine(e);
         }
         foreach (var e in q.WithMergeOptions(ParallelMergeOptions.NotBuffered))
         {
             Console.WriteLine(e);
         }
 
         Console.Write("Complete
         Console.ReadLine();
         #endregion
     }
 
     private static void WithCancellation()
     {
         #region Define the query
         var items = ParallelEnumerable.Range(1, 1000);
         var q = from e in items.WithMergeOptions(ParallelMergeOptions.NotBuffered)
                 select DoWork(e);
 
         var cts = new CancellationTokenSource();
 
         #endregion
 
         #region Kick off the asynchronous cancellation
         Task.Factory.StartNew(() =>
         {
             Thread.Sleep(300);
             cts.Cancel();
         });
         #endregion
 
         #region Enumerate the query
         try
         {
             foreach (var e in q.WithCancellation(cts.Token))
             {
                 Console.WriteLine(e);
             }
         }
         catch (OperationCanceledException)
         {
             Console.WriteLine("Cancelled!");
         }
         Console.ReadLine();
         #endregion
     }
 
     private static void WithDegreeOfParallelism()
     {
         var items = ParallelEnumerable.Range(1, 200);
 
         #region Default DOP
         var sw = new Stopwatch();
         sw.Start();
         Console.Write("Default DOP
 
         items.Average(e => DoWork2(e));
 
         sw.Stop();
         Console.WriteLine(sw.ElapsedMilliseconds);
         Console.WriteLine("Complete
         #endregion
 
         #region DOP = 2
         sw.Reset();
         sw.Start();
         Console.Write("DOP = 2
 
         items.WithDegreeOfParallelism(2)
              .Average(e => DoWork2(e));
 
         sw.Stop();
         Console.WriteLine(sw.ElapsedMilliseconds);
         Console.Write("Complete
         Console.ReadLine();
         #endregion
     }
 
     #region Helper functions
     private static int DoWork(int input)
     {
         Thread.Sleep(20);
         return input * 2;
     }
 
     private static int DoWork2(int input)
     {
         Thread.SpinWait(5000000);
         return input * 2;
     }
     #endregion
 }
         Console.Write("Complete
         Console.ReadLine();
         #endregion
     }
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\PlinqKnobs\PlinqKnobs_CSharp\Program.cs" startline="110" endline="144"><![CDATA[
 
     private static void WithCancellation()
     {
         #region Define the query
         var items = ParallelEnumerable.Range(1, 1000);
         var q = from e in items.WithMergeOptions(ParallelMergeOptions.NotBuffered)
                 select DoWork(e);
 
         var cts = new CancellationTokenSource();
 
         #endregion
 
         #region Kick off the asynchronous cancellation
         Task.Factory.StartNew(() =>
         {
             Thread.Sleep(300);
             cts.Cancel();
         });
         #endregion
 
         #region Enumerate the query
         try
         {
             foreach (var e in q.WithCancellation(cts.Token))
             {
                 Console.WriteLine(e);
             }
         }
         catch (OperationCanceledException)
         {
             Console.WriteLine("Cancelled!");
         }
         Console.ReadLine();
         #endregion
     }
 
     private static void WithDegreeOfParallelism()
     {
         var items = ParallelEnumerable.Range(1, 200);
 
         #region Default DOP
         var sw = new Stopwatch();
         sw.Start();
         Console.Write("Default DOP
 
         items.Average(e => DoWork2(e));
 
         sw.Stop();
         Console.WriteLine(sw.ElapsedMilliseconds);
         Console.WriteLine("Complete
         #endregion
 
         #region DOP = 2
         sw.Reset();
         sw.Start();
         Console.Write("DOP = 2
 
         items.WithDegreeOfParallelism(2)
              .Average(e => DoWork2(e));
 
         sw.Stop();
         Console.WriteLine(sw.ElapsedMilliseconds);
         Console.Write("Complete
         Console.ReadLine();
         #endregion
     }
 
     #region Helper functions
     private static int DoWork(int input)
     {
         Thread.Sleep(20);
         return input * 2;
     }
 
     private static int DoWork2(int input)
     {
         Thread.SpinWait(5000000);
         return input * 2;
     }
     #endregion
 }
     {
         #region Define the query
         var items = ParallelEnumerable.Range(1, 1000);
         var q = from e in items.WithMergeOptions(ParallelMergeOptions.NotBuffered)
                 select DoWork(e);
 
         var cts = new CancellationTokenSource();
 
         #endregion
 
         #region Kick off the asynchronous cancellation
         Task.Factory.StartNew(() =>
         {
             Thread.Sleep(300);
             cts.Cancel();
         });
         #endregion
 
         #region Enumerate the query
         try
         {
             foreach (var e in q.WithCancellation(cts.Token))
             {
                 Console.WriteLine(e);
             }
         }
         catch (OperationCanceledException)
         {
             Console.WriteLine("Cancelled!");
         }
         Console.ReadLine();
         #endregion
     }
 
     private static void WithDegreeOfParallelism()
     {
         var items = ParallelEnumerable.Range(1, 200);
 
         #region Default DOP
         var sw = new Stopwatch();
         sw.Start();
         Console.Write("Default DOP
 
         items.Average(e => DoWork2(e));
 
         sw.Stop();
         Console.WriteLine(sw.ElapsedMilliseconds);
         Console.WriteLine("Complete
         #endregion
 
         #region DOP = 2
         sw.Reset();
         sw.Start();
         Console.Write("DOP = 2
 
         items.WithDegreeOfParallelism(2)
              .Average(e => DoWork2(e));
 
         sw.Stop();
         Console.WriteLine(sw.ElapsedMilliseconds);
         Console.Write("Complete
         Console.ReadLine();
         #endregion
     }
 
     #region Helper functions
     private static int DoWork(int input)
     {
         Thread.Sleep(20);
         return input * 2;
     }
 
     private static int DoWork2(int input)
     {
         Thread.SpinWait(5000000);
         return input * 2;
     }
     #endregion
 }
             foreach (var e in q.WithCancellation(cts.Token))
             {
                 Console.WriteLine(e);
             }
             foreach (var e in q.WithCancellation(cts.Token))
             {
                 Console.WriteLine(e);
             }
         }
         catch (OperationCanceledException)
         {
             Console.WriteLine("Cancelled!");
         }
         Console.ReadLine();
         #endregion
     }
 
     private static void WithDegreeOfParallelism()
     {
         var items = ParallelEnumerable.Range(1, 200);
 
         #region Default DOP
         var sw = new Stopwatch();
         sw.Start();
         Console.Write("Default DOP
 
         items.Average(e => DoWork2(e));
 
         sw.Stop();
         Console.WriteLine(sw.ElapsedMilliseconds);
         Console.WriteLine("Complete
         #endregion
 
         #region DOP = 2
         sw.Reset();
         sw.Start();
         Console.Write("DOP = 2
 
         items.WithDegreeOfParallelism(2)
              .Average(e => DoWork2(e));
 
         sw.Stop();
         Console.WriteLine(sw.ElapsedMilliseconds);
         Console.Write("Complete
         Console.ReadLine();
         #endregion
     }
 
     #region Helper functions
     private static int DoWork(int input)
     {
         Thread.Sleep(20);
         return input * 2;
     }
 
     private static int DoWork2(int input)
     {
         Thread.SpinWait(5000000);
         return input * 2;
     }
     #endregion
 }
         }
         catch (OperationCanceledException)
         {
             Console.WriteLine("Cancelled!");
         }
         Console.ReadLine();
         #endregion
     }
 
     private static void WithDegreeOfParallelism()
     {
         var items = ParallelEnumerable.Range(1, 200);
 
         #region Default DOP
         var sw = new Stopwatch();
         sw.Start();
         Console.Write("Default DOP
 
         items.Average(e => DoWork2(e));
 
         sw.Stop();
         Console.WriteLine(sw.ElapsedMilliseconds);
         Console.WriteLine("Complete
         #endregion
 
         #region DOP = 2
         sw.Reset();
         sw.Start();
         Console.Write("DOP = 2
 
         items.WithDegreeOfParallelism(2)
              .Average(e => DoWork2(e));
 
         sw.Stop();
         Console.WriteLine(sw.ElapsedMilliseconds);
         Console.Write("Complete
         Console.ReadLine();
         #endregion
     }
 
     #region Helper functions
     private static int DoWork(int input)
     {
         Thread.Sleep(20);
         return input * 2;
     }
 
     private static int DoWork2(int input)
     {
         Thread.SpinWait(5000000);
         return input * 2;
     }
     #endregion
 }
         catch (OperationCanceledException)
         {
             Console.WriteLine("Cancelled!");
         }
         Console.ReadLine();
         #endregion
     }
 
     private static void WithDegreeOfParallelism()
     {
         var items = ParallelEnumerable.Range(1, 200);
 
         #region Default DOP
         var sw = new Stopwatch();
         sw.Start();
         Console.Write("Default DOP
 
         items.Average(e => DoWork2(e));
 
         sw.Stop();
         Console.WriteLine(sw.ElapsedMilliseconds);
         Console.WriteLine("Complete
         #endregion
 
         #region DOP = 2
         sw.Reset();
         sw.Start();
         Console.Write("DOP = 2
 
         items.WithDegreeOfParallelism(2)
              .Average(e => DoWork2(e));
 
         sw.Stop();
         Console.WriteLine(sw.ElapsedMilliseconds);
         Console.Write("Complete
         Console.ReadLine();
         #endregion
     }
 
     #region Helper functions
     private static int DoWork(int input)
     {
         Thread.Sleep(20);
         return input * 2;
     }
 
     private static int DoWork2(int input)
     {
         Thread.SpinWait(5000000);
         return input * 2;
     }
     #endregion
 }
         Console.ReadLine();
         #endregion
     }
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\PlinqKnobs\PlinqKnobs_CSharp\Program.cs" startline="145" endline="175"><![CDATA[
 
     private static void WithDegreeOfParallelism()
     {
         var items = ParallelEnumerable.Range(1, 200);
 
         #region Default DOP
         var sw = new Stopwatch();
         sw.Start();
         Console.Write("Default DOP
 
         items.Average(e => DoWork2(e));
 
         sw.Stop();
         Console.WriteLine(sw.ElapsedMilliseconds);
         Console.WriteLine("Complete
         #endregion
 
         #region DOP = 2
         sw.Reset();
         sw.Start();
         Console.Write("DOP = 2
 
         items.WithDegreeOfParallelism(2)
              .Average(e => DoWork2(e));
 
         sw.Stop();
         Console.WriteLine(sw.ElapsedMilliseconds);
         Console.Write("Complete
         Console.ReadLine();
         #endregion
     }
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\PlinqKnobs\PlinqKnobs_CSharp\Program.cs" startline="176" endline="182"><![CDATA[
 
     #region Helper functions
     private static int DoWork(int input)
     {
         Thread.Sleep(20);
         return input * 2;
     }
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\PlinqKnobs\PlinqKnobs_CSharp\Program.cs" startline="183" endline="188"><![CDATA[
 
     private static int DoWork2(int input)
     {
         Thread.SpinWait(5000000);
         return input * 2;
     }
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\PlinqKnobs\PlinqKnobs_CSharp\Program.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\PlinqKnobs\PlinqKnobs_CSharp\Program.cs" startline="32" endline="190"><![CDATA[
                 where (e % 2 == 0) // is even
                 select e;
 
         foreach (var e in q)
         {
             Console.WriteLine(e);
         }
         Console.Write("Complete
         Console.ReadLine();
         #endregion
 
         #region Parallel
         var items2 = ParallelEnumerable.Range(1, 100);
         q = from e in items2
             where (e % 2 == 0) // is even
             select e;
 
         foreach (var e in q)
         {
             Console.WriteLine(e);
         }
         Console.Write("Complete
         Console.ReadLine();
         #endregion
 
         #region Parallel with Ordering
         q = from e in items2.AsOrdered()
             where (e % 2 == 0) // is even
             select e;
 
         foreach (var e in q)
         {
             Console.WriteLine(e);
         }
 
         Console.Write("Complete
         Console.ReadLine();
         #endregion
     }
 
     private static void WithMergeOptions()
     {
         #region Define the query
         var items = ParallelEnumerable.Range(1, 1000);
         var q = from e in items
                 select DoWork(e);
         #endregion
 
         #region Auto Buffered
         foreach (var e in q)
         {
             Console.WriteLine(e);
         }
 
         Console.Write("Complete
         Console.ReadLine();
         #endregion
 
         #region Fully Buffered
         foreach (var e in q.WithMergeOptions(ParallelMergeOptions.FullyBuffered))
         {
             Console.WriteLine(e);
         }
 
         Console.Write("Complete
         Console.ReadLine();
         #endregion
 
         #region Not buffered
         foreach (var e in q.WithMergeOptions(ParallelMergeOptions.NotBuffered))
         {
             Console.WriteLine(e);
         }
 
         Console.Write("Complete
         Console.ReadLine();
         #endregion
     }
 
     private static void WithCancellation()
     {
         #region Define the query
         var items = ParallelEnumerable.Range(1, 1000);
         var q = from e in items.WithMergeOptions(ParallelMergeOptions.NotBuffered)
                 select DoWork(e);
 
         var cts = new CancellationTokenSource();
 
         #endregion
 
         #region Kick off the asynchronous cancellation
         Task.Factory.StartNew(() =>
         {
             Thread.Sleep(300);
             cts.Cancel();
         });
         #endregion
 
         #region Enumerate the query
         try
         {
             foreach (var e in q.WithCancellation(cts.Token))
             {
                 Console.WriteLine(e);
             }
         }
         catch (OperationCanceledException)
         {
             Console.WriteLine("Cancelled!");
         }
         Console.ReadLine();
         #endregion
     }
 
     private static void WithDegreeOfParallelism()
     {
         var items = ParallelEnumerable.Range(1, 200);
 
         #region Default DOP
         var sw = new Stopwatch();
         sw.Start();
         Console.Write("Default DOP
 
         items.Average(e => DoWork2(e));
 
         sw.Stop();
         Console.WriteLine(sw.ElapsedMilliseconds);
         Console.WriteLine("Complete
         #endregion
 
         #region DOP = 2
         sw.Reset();
         sw.Start();
         Console.Write("DOP = 2
 
         items.WithDegreeOfParallelism(2)
              .Average(e => DoWork2(e));
 
         sw.Stop();
         Console.WriteLine(sw.ElapsedMilliseconds);
         Console.Write("Complete
         Console.ReadLine();
         #endregion
     }
 
     #region Helper functions
     private static int DoWork(int input)
     {
         Thread.Sleep(20);
         return input * 2;
     }
 
     private static int DoWork2(int input)
     {
         Thread.SpinWait(5000000);
         return input * 2;
     }
     #endregion
 }
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\PlinqKnobs\PlinqKnobs_CSharp\Program.cs" startline="46" endline="190"><![CDATA[
             where (e % 2 == 0) // is even
             select e;
 
         foreach (var e in q)
         {
             Console.WriteLine(e);
         }
         Console.Write("Complete
         Console.ReadLine();
         #endregion
 
         #region Parallel with Ordering
         q = from e in items2.AsOrdered()
             where (e % 2 == 0) // is even
             select e;
 
         foreach (var e in q)
         {
             Console.WriteLine(e);
         }
 
         Console.Write("Complete
         Console.ReadLine();
         #endregion
     }
 
     private static void WithMergeOptions()
     {
         #region Define the query
         var items = ParallelEnumerable.Range(1, 1000);
         var q = from e in items
                 select DoWork(e);
         #endregion
 
         #region Auto Buffered
         foreach (var e in q)
         {
             Console.WriteLine(e);
         }
 
         Console.Write("Complete
         Console.ReadLine();
         #endregion
 
         #region Fully Buffered
         foreach (var e in q.WithMergeOptions(ParallelMergeOptions.FullyBuffered))
         {
             Console.WriteLine(e);
         }
 
         Console.Write("Complete
         Console.ReadLine();
         #endregion
 
         #region Not buffered
         foreach (var e in q.WithMergeOptions(ParallelMergeOptions.NotBuffered))
         {
             Console.WriteLine(e);
         }
 
         Console.Write("Complete
         Console.ReadLine();
         #endregion
     }
 
     private static void WithCancellation()
     {
         #region Define the query
         var items = ParallelEnumerable.Range(1, 1000);
         var q = from e in items.WithMergeOptions(ParallelMergeOptions.NotBuffered)
                 select DoWork(e);
 
         var cts = new CancellationTokenSource();
 
         #endregion
 
         #region Kick off the asynchronous cancellation
         Task.Factory.StartNew(() =>
         {
             Thread.Sleep(300);
             cts.Cancel();
         });
         #endregion
 
         #region Enumerate the query
         try
         {
             foreach (var e in q.WithCancellation(cts.Token))
             {
                 Console.WriteLine(e);
             }
         }
         catch (OperationCanceledException)
         {
             Console.WriteLine("Cancelled!");
         }
         Console.ReadLine();
         #endregion
     }
 
     private static void WithDegreeOfParallelism()
     {
         var items = ParallelEnumerable.Range(1, 200);
 
         #region Default DOP
         var sw = new Stopwatch();
         sw.Start();
         Console.Write("Default DOP
 
         items.Average(e => DoWork2(e));
 
         sw.Stop();
         Console.WriteLine(sw.ElapsedMilliseconds);
         Console.WriteLine("Complete
         #endregion
 
         #region DOP = 2
         sw.Reset();
         sw.Start();
         Console.Write("DOP = 2
 
         items.WithDegreeOfParallelism(2)
              .Average(e => DoWork2(e));
 
         sw.Stop();
         Console.WriteLine(sw.ElapsedMilliseconds);
         Console.Write("Complete
         Console.ReadLine();
         #endregion
     }
 
     #region Helper functions
     private static int DoWork(int input)
     {
         Thread.Sleep(20);
         return input * 2;
     }
 
     private static int DoWork2(int input)
     {
         Thread.SpinWait(5000000);
         return input * 2;
     }
     #endregion
 }
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\PlinqKnobs\PlinqKnobs_CSharp\Program.cs" startline="59" endline="190"><![CDATA[
             where (e % 2 == 0) // is even
             select e;
 
         foreach (var e in q)
         {
             Console.WriteLine(e);
         }
 
         Console.Write("Complete
         Console.ReadLine();
         #endregion
     }
 
     private static void WithMergeOptions()
     {
         #region Define the query
         var items = ParallelEnumerable.Range(1, 1000);
         var q = from e in items
                 select DoWork(e);
         #endregion
 
         #region Auto Buffered
         foreach (var e in q)
         {
             Console.WriteLine(e);
         }
 
         Console.Write("Complete
         Console.ReadLine();
         #endregion
 
         #region Fully Buffered
         foreach (var e in q.WithMergeOptions(ParallelMergeOptions.FullyBuffered))
         {
             Console.WriteLine(e);
         }
 
         Console.Write("Complete
         Console.ReadLine();
         #endregion
 
         #region Not buffered
         foreach (var e in q.WithMergeOptions(ParallelMergeOptions.NotBuffered))
         {
             Console.WriteLine(e);
         }
 
         Console.Write("Complete
         Console.ReadLine();
         #endregion
     }
 
     private static void WithCancellation()
     {
         #region Define the query
         var items = ParallelEnumerable.Range(1, 1000);
         var q = from e in items.WithMergeOptions(ParallelMergeOptions.NotBuffered)
                 select DoWork(e);
 
         var cts = new CancellationTokenSource();
 
         #endregion
 
         #region Kick off the asynchronous cancellation
         Task.Factory.StartNew(() =>
         {
             Thread.Sleep(300);
             cts.Cancel();
         });
         #endregion
 
         #region Enumerate the query
         try
         {
             foreach (var e in q.WithCancellation(cts.Token))
             {
                 Console.WriteLine(e);
             }
         }
         catch (OperationCanceledException)
         {
             Console.WriteLine("Cancelled!");
         }
         Console.ReadLine();
         #endregion
     }
 
     private static void WithDegreeOfParallelism()
     {
         var items = ParallelEnumerable.Range(1, 200);
 
         #region Default DOP
         var sw = new Stopwatch();
         sw.Start();
         Console.Write("Default DOP
 
         items.Average(e => DoWork2(e));
 
         sw.Stop();
         Console.WriteLine(sw.ElapsedMilliseconds);
         Console.WriteLine("Complete
         #endregion
 
         #region DOP = 2
         sw.Reset();
         sw.Start();
         Console.Write("DOP = 2
 
         items.WithDegreeOfParallelism(2)
              .Average(e => DoWork2(e));
 
         sw.Stop();
         Console.WriteLine(sw.ElapsedMilliseconds);
         Console.Write("Complete
         Console.ReadLine();
         #endregion
     }
 
     #region Helper functions
     private static int DoWork(int input)
     {
         Thread.Sleep(20);
         return input * 2;
     }
 
     private static int DoWork2(int input)
     {
         Thread.SpinWait(5000000);
         return input * 2;
     }
     #endregion
 }
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\PlinqKnobs\PlinqKnobs_CSharp\Program.cs" startline="77" endline="190"><![CDATA[
                 select DoWork(e);
         #endregion
 
         #region Auto Buffered
         foreach (var e in q)
         {
             Console.WriteLine(e);
         }
 
         Console.Write("Complete
         Console.ReadLine();
         #endregion
 
         #region Fully Buffered
         foreach (var e in q.WithMergeOptions(ParallelMergeOptions.FullyBuffered))
         {
             Console.WriteLine(e);
         }
 
         Console.Write("Complete
         Console.ReadLine();
         #endregion
 
         #region Not buffered
         foreach (var e in q.WithMergeOptions(ParallelMergeOptions.NotBuffered))
         {
             Console.WriteLine(e);
         }
 
         Console.Write("Complete
         Console.ReadLine();
         #endregion
     }
 
     private static void WithCancellation()
     {
         #region Define the query
         var items = ParallelEnumerable.Range(1, 1000);
         var q = from e in items.WithMergeOptions(ParallelMergeOptions.NotBuffered)
                 select DoWork(e);
 
         var cts = new CancellationTokenSource();
 
         #endregion
 
         #region Kick off the asynchronous cancellation
         Task.Factory.StartNew(() =>
         {
             Thread.Sleep(300);
             cts.Cancel();
         });
         #endregion
 
         #region Enumerate the query
         try
         {
             foreach (var e in q.WithCancellation(cts.Token))
             {
                 Console.WriteLine(e);
             }
         }
         catch (OperationCanceledException)
         {
             Console.WriteLine("Cancelled!");
         }
         Console.ReadLine();
         #endregion
     }
 
     private static void WithDegreeOfParallelism()
     {
         var items = ParallelEnumerable.Range(1, 200);
 
         #region Default DOP
         var sw = new Stopwatch();
         sw.Start();
         Console.Write("Default DOP
 
         items.Average(e => DoWork2(e));
 
         sw.Stop();
         Console.WriteLine(sw.ElapsedMilliseconds);
         Console.WriteLine("Complete
         #endregion
 
         #region DOP = 2
         sw.Reset();
         sw.Start();
         Console.Write("DOP = 2
 
         items.WithDegreeOfParallelism(2)
              .Average(e => DoWork2(e));
 
         sw.Stop();
         Console.WriteLine(sw.ElapsedMilliseconds);
         Console.Write("Complete
         Console.ReadLine();
         #endregion
     }
 
     #region Helper functions
     private static int DoWork(int input)
     {
         Thread.Sleep(20);
         return input * 2;
     }
 
     private static int DoWork2(int input)
     {
         Thread.SpinWait(5000000);
         return input * 2;
     }
     #endregion
 }
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\PlinqKnobs\PlinqKnobs_CSharp\Program.cs" startline="116" endline="190"><![CDATA[
                 select DoWork(e);
 
         var cts = new CancellationTokenSource();
 
         #endregion
 
         #region Kick off the asynchronous cancellation
         Task.Factory.StartNew(() =>
         {
             Thread.Sleep(300);
             cts.Cancel();
         });
         #endregion
 
         #region Enumerate the query
         try
         {
             foreach (var e in q.WithCancellation(cts.Token))
             {
                 Console.WriteLine(e);
             }
         }
         catch (OperationCanceledException)
         {
             Console.WriteLine("Cancelled!");
         }
         Console.ReadLine();
         #endregion
     }
 
     private static void WithDegreeOfParallelism()
     {
         var items = ParallelEnumerable.Range(1, 200);
 
         #region Default DOP
         var sw = new Stopwatch();
         sw.Start();
         Console.Write("Default DOP
 
         items.Average(e => DoWork2(e));
 
         sw.Stop();
         Console.WriteLine(sw.ElapsedMilliseconds);
         Console.WriteLine("Complete
         #endregion
 
         #region DOP = 2
         sw.Reset();
         sw.Start();
         Console.Write("DOP = 2
 
         items.WithDegreeOfParallelism(2)
              .Average(e => DoWork2(e));
 
         sw.Stop();
         Console.WriteLine(sw.ElapsedMilliseconds);
         Console.Write("Complete
         Console.ReadLine();
         #endregion
     }
 
     #region Helper functions
     private static int DoWork(int input)
     {
         Thread.Sleep(20);
         return input * 2;
     }
 
     private static int DoWork2(int input)
     {
         Thread.SpinWait(5000000);
         return input * 2;
     }
     #endregion
 }
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\PlinqKnobs\PlinqKnobs_CSharp\Program.cs" startline="155" endline="190"><![CDATA[
         items.Average(e => DoWork2(e));
 
         sw.Stop();
         Console.WriteLine(sw.ElapsedMilliseconds);
         Console.WriteLine("Complete
         #endregion
 
         #region DOP = 2
         sw.Reset();
         sw.Start();
         Console.Write("DOP = 2
 
         items.WithDegreeOfParallelism(2)
              .Average(e => DoWork2(e));
 
         sw.Stop();
         Console.WriteLine(sw.ElapsedMilliseconds);
         Console.Write("Complete
         Console.ReadLine();
         #endregion
     }
 
     #region Helper functions
     private static int DoWork(int input)
     {
         Thread.Sleep(20);
         return input * 2;
     }
 
     private static int DoWork2(int input)
     {
         Thread.SpinWait(5000000);
         return input * 2;
     }
     #endregion
 }
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\PlinqKnobs\PlinqKnobs_CSharp\Program.cs" startline="168" endline="190"><![CDATA[
              .Average(e => DoWork2(e));
 
         sw.Stop();
         Console.WriteLine(sw.ElapsedMilliseconds);
         Console.Write("Complete
         Console.ReadLine();
         #endregion
     }
 
     #region Helper functions
     private static int DoWork(int input)
     {
         Thread.Sleep(20);
         return input * 2;
     }
 
     private static int DoWork2(int input)
     {
         Thread.SpinWait(5000000);
         return input * 2;
     }
     #endregion
 }
]]></source>
</source_elements></project>
