
//  Microsoft (R) .NET Framework IL Disassembler.  Version 4.0.30319.1
//  Copyright (c) Microsoft Corporation.  All rights reserved.



// Metadata version: v4.0.30319
.assembly extern mscorlib
{
  .publickeytoken = (B7 7A 5C 56 19 34 E0 89 )                         // .z\V.4..
  .ver 4:0:0:0
}
.assembly extern Microsoft.VisualBasic
{
  .publickeytoken = (B0 3F 5F 7F 11 D5 0A 3A )                         // .?_....:
  .ver 10:0:0:0
}
.assembly extern System.Xml.Linq
{
  .publickeytoken = (B7 7A 5C 56 19 34 E0 89 )                         // .z\V.4..
  .ver 4:0:0:0
}
.assembly extern PresentationFramework
{
  .publickeytoken = (31 BF 38 56 AD 36 4E 35 )                         // 1.8V.6N5
  .ver 4:0:0:0
}
.assembly extern System
{
  .publickeytoken = (B7 7A 5C 56 19 34 E0 89 )                         // .z\V.4..
  .ver 4:0:0:0
}
.assembly extern System.Xaml
{
  .publickeytoken = (B7 7A 5C 56 19 34 E0 89 )                         // .z\V.4..
  .ver 4:0:0:0
}
.assembly extern PresentationCore
{
  .publickeytoken = (31 BF 38 56 AD 36 4E 35 )                         // 1.8V.6N5
  .ver 4:0:0:0
}
.assembly extern System.Core
{
  .publickeytoken = (B7 7A 5C 56 19 34 E0 89 )                         // .z\V.4..
  .ver 4:0:0:0
}
.assembly extern ParallelExtensionsExtras
{
  .ver 1:2:0:0
}
.assembly SpellChecker
{
  .custom instance void [mscorlib]System.Reflection.AssemblyCompanyAttribute::.ctor(string) = ( 01 00 15 4D 69 63 72 6F 73 6F 66 74 20 43 6F 72   // ...Microsoft Cor
                                                                                                70 6F 72 61 74 69 6F 6E 00 00 )                   // poration..
  .custom instance void [mscorlib]System.Reflection.AssemblyProductAttribute::.ctor(string) = ( 01 00 0C 53 70 65 6C 6C 43 68 65 63 6B 65 72 00   // ...SpellChecker.
                                                                                                00 ) 
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilationRelaxationsAttribute::.ctor(int32) = ( 01 00 08 00 00 00 00 00 ) 
  .custom instance void [mscorlib]System.Runtime.CompilerServices.RuntimeCompatibilityAttribute::.ctor() = ( 01 00 01 00 54 02 16 57 72 61 70 4E 6F 6E 45 78   // ....T..WrapNonEx
                                                                                                             63 65 70 74 69 6F 6E 54 68 72 6F 77 73 01 )       // ceptionThrows.
  .custom instance void [mscorlib]System.Reflection.AssemblyCopyrightAttribute::.ctor(string) = ( 01 00 39 43 6F 70 79 72 69 67 68 74 20 C2 A9 20   // ..9Copyright .. 
                                                                                                  4D 69 63 72 6F 73 6F 66 74 20 43 6F 72 70 6F 72   // Microsoft Corpor
                                                                                                  61 74 69 6F 6E 2E 20 20 41 6C 6C 20 72 69 67 68   // ation.  All righ
                                                                                                  74 73 20 72 65 73 65 72 76 65 64 2E 00 00 )       // ts reserved...
  .custom instance void [mscorlib]System.Reflection.AssemblyDescriptionAttribute::.ctor(string) = ( 01 00 00 00 00 ) 
  .custom instance void [mscorlib]System.Reflection.AssemblyTitleAttribute::.ctor(string) = ( 01 00 0C 53 70 65 6C 6C 43 68 65 63 6B 65 72 00   // ...SpellChecker.
                                                                                              00 ) 

  // --- The following custom attribute is added automatically, do not uncomment -------
  //  .custom instance void [mscorlib]System.Diagnostics.DebuggableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggableAttribute/DebuggingModes) = ( 01 00 07 01 00 00 00 00 ) 

  .custom instance void [mscorlib]System.Reflection.AssemblyConfigurationAttribute::.ctor(string) = ( 01 00 00 00 00 ) 
  .custom instance void [mscorlib]System.Runtime.Versioning.TargetFrameworkAttribute::.ctor(string) = ( 01 00 1A 2E 4E 45 54 46 72 61 6D 65 77 6F 72 6B   // ....NETFramework
                                                                                                        2C 56 65 72 73 69 6F 6E 3D 76 34 2E 30 01 00 54   // ,Version=v4.0..T
                                                                                                        0E 14 46 72 61 6D 65 77 6F 72 6B 44 69 73 70 6C   // ..FrameworkDispl
                                                                                                        61 79 4E 61 6D 65 10 2E 4E 45 54 20 46 72 61 6D   // ayName..NET Fram
                                                                                                        65 77 6F 72 6B 20 34 )                            // ework 4
  .custom instance void [mscorlib]System.Reflection.AssemblyFileVersionAttribute::.ctor(string) = ( 01 00 07 31 2E 30 2E 30 2E 30 00 00 )             // ...1.0.0.0..
  .custom instance void [PresentationFramework]System.Windows.ThemeInfoAttribute::.ctor(valuetype [PresentationFramework]System.Windows.ResourceDictionaryLocation,
                                                                                        valuetype [PresentationFramework]System.Windows.ResourceDictionaryLocation) = ( 01 00 00 00 00 00 01 00 00 00 00 00 ) 
  .custom instance void [mscorlib]System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = ( 01 00 00 00 00 ) 
  .custom instance void [mscorlib]System.Reflection.AssemblyTrademarkAttribute::.ctor(string) = ( 01 00 00 00 00 ) 
  .hash algorithm 0x00008004
  .ver 1:0:0:0
}
.mresource public SpellChecker.g.resources
{
  // Offset: 0x00000000 Length: 0x000007E1
}
.mresource public Resources.resources
{
  // Offset: 0x000007E5 Length: 0x000000B4
}
.module SpellChecker.exe
// MVID: {C1237C9C-6ECD-41AD-891A-1A8309B2EBCB}
.imagebase 0x00400000
.file alignment 0x00000200
.stackreserve 0x00100000
.subsystem 0x0002       // WINDOWS_GUI
.corflags 0x00000001    //  ILONLY
// Image base: 0x01200000


// =============== CLASS MEMBERS DECLARATION ===================

.class private auto ansi My.MyApplication
       extends [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.ApplicationBase
{
  .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
  .custom instance void [System]System.CodeDom.Compiler.GeneratedCodeAttribute::.ctor(string,
                                                                                      string) = ( 01 00 0A 4D 79 54 65 6D 70 6C 61 74 65 08 31 30   // ...MyTemplate.10
                                                                                                  2E 30 2E 30 2E 30 00 00 )                         // .0.0.0..
  .method public specialname rtspecialname 
          instance void  .ctor() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       9 (0x9)
    .maxstack  8
    IL_0000:  ldarg.0
    IL_0001:  call       instance void [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.ApplicationBase::.ctor()
    IL_0006:  nop
    IL_0007:  nop
    IL_0008:  ret
  } // end of method MyApplication::.ctor

} // end of class My.MyApplication

.class private auto ansi My.MyComputer
       extends [Microsoft.VisualBasic]Microsoft.VisualBasic.Devices.Computer
{
  .custom instance void [System]System.CodeDom.Compiler.GeneratedCodeAttribute::.ctor(string,
                                                                                      string) = ( 01 00 0A 4D 79 54 65 6D 70 6C 61 74 65 08 31 30   // ...MyTemplate.10
                                                                                                  2E 30 2E 30 2E 30 00 00 )                         // .0.0.0..
  .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
  .method public specialname rtspecialname 
          instance void  .ctor() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
    // Code size       10 (0xa)
    .maxstack  8
    .language '{3A12D0B8-C26C-11D0-B442-00A0244A1DD2}', '{994B45C4-E6E9-11D2-903F-00C04FA302A1}', '{5A869D0B-6611-11D3-BD2A-0000F80849BD}'
// Source File '17d14f5c-a337-4978-8281-53493378c1071.vb' not found
    IL_0000:  nop
    IL_0001:  ldarg.0
    IL_0002:  call       instance void [Microsoft.VisualBasic]Microsoft.VisualBasic.Devices.Computer::.ctor()
    IL_0007:  nop
    IL_0008:  nop
    IL_0009:  ret
  } // end of method MyComputer::.ctor

} // end of class My.MyComputer

.class private auto ansi sealed beforefieldinit My.MyProject
       extends [mscorlib]System.Object
{
  .custom instance void [System]System.CodeDom.Compiler.GeneratedCodeAttribute::.ctor(string,
                                                                                      string) = ( 01 00 0A 4D 79 54 65 6D 70 6C 61 74 65 08 31 30   // ...MyTemplate.10
                                                                                                  2E 30 2E 30 2E 30 00 00 )                         // .0.0.0..
  .custom instance void [Microsoft.VisualBasic]Microsoft.VisualBasic.HideModuleNameAttribute::.ctor() = ( 01 00 00 00 ) 
  .custom instance void [Microsoft.VisualBasic]Microsoft.VisualBasic.CompilerServices.StandardModuleAttribute::.ctor() = ( 01 00 00 00 ) 
  .class auto ansi sealed nested assembly MyWebServices
         extends [mscorlib]System.Object
  {
    .custom instance void [Microsoft.VisualBasic]Microsoft.VisualBasic.MyGroupCollectionAttribute::.ctor(string,
                                                                                                         string,
                                                                                                         string,
                                                                                                         string) = ( 01 00 34 53 79 73 74 65 6D 2E 57 65 62 2E 53 65   // ..4System.Web.Se
                                                                                                                     72 76 69 63 65 73 2E 50 72 6F 74 6F 63 6F 6C 73   // rvices.Protocols
                                                                                                                     2E 53 6F 61 70 48 74 74 70 43 6C 69 65 6E 74 50   // .SoapHttpClientP
                                                                                                                     72 6F 74 6F 63 6F 6C 12 43 72 65 61 74 65 5F 5F   // rotocol.Create__
                                                                                                                     49 6E 73 74 61 6E 63 65 5F 5F 13 44 69 73 70 6F   // Instance__.Dispo
                                                                                                                     73 65 5F 5F 49 6E 73 74 61 6E 63 65 5F 5F 00 00   // se__Instance__..
                                                                                                                     00 ) 
    .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
    .method public strict virtual instance bool 
            Equals(object o) cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
      // Code size       18 (0x12)
      .maxstack  2
      .locals init ([0] bool Equals)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldarg.1
      IL_0003:  call       object [mscorlib]System.Runtime.CompilerServices.RuntimeHelpers::GetObjectValue(object)
      IL_0008:  call       instance bool [mscorlib]System.Object::Equals(object)
      IL_000d:  stloc.0
      IL_000e:  br.s       IL_0010

      IL_0010:  ldloc.0
      IL_0011:  ret
    } // end of method MyWebServices::Equals

    .method public strict virtual instance int32 
            GetHashCode() cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
      // Code size       12 (0xc)
      .maxstack  1
      .locals init ([0] int32 GetHashCode)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  call       instance int32 [mscorlib]System.Object::GetHashCode()
      IL_0007:  stloc.0
      IL_0008:  br.s       IL_000a

      IL_000a:  ldloc.0
      IL_000b:  ret
    } // end of method MyWebServices::GetHashCode

    .method assembly hidebysig instance class [mscorlib]System.Type 
            GetType() cil managed
    {
      .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       16 (0x10)
      .maxstack  1
      .locals init ([0] class [mscorlib]System.Type GetType)
      IL_0000:  nop
      IL_0001:  ldtoken    My.MyProject/MyWebServices
      IL_0006:  call       class [mscorlib]System.Type [mscorlib]System.Type::GetTypeFromHandle(valuetype [mscorlib]System.RuntimeTypeHandle)
      IL_000b:  stloc.0
      IL_000c:  br.s       IL_000e

      IL_000e:  ldloc.0
      IL_000f:  ret
    } // end of method MyWebServices::GetType

    .method public strict virtual instance string 
            ToString() cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
      // Code size       12 (0xc)
      .maxstack  1
      .locals init ([0] string ToString)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  call       instance string [mscorlib]System.Object::ToString()
      IL_0007:  stloc.0
      IL_0008:  br.s       IL_000a

      IL_000a:  ldloc.0
      IL_000b:  ret
    } // end of method MyWebServices::ToString

    .method private static !!T  Create__Instance__<.ctor T>(!!T 'instance') cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       32 (0x20)
      .maxstack  2
      .locals init ([0] !!T Create__Instance__,
               [1] bool VB$CG$t_bool$S0)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  box        !!T
      IL_0007:  ldnull
      IL_0008:  ceq
      IL_000a:  stloc.1
      IL_000b:  ldloc.1
      IL_000c:  brfalse.s  IL_0018

      IL_000e:  call       !!0 [mscorlib]System.Activator::CreateInstance<!!0>()
      IL_0013:  stloc.0
      IL_0014:  br.s       IL_001e

      IL_0016:  br.s       IL_001d

      IL_0018:  nop
      IL_0019:  ldarg.0
      IL_001a:  stloc.0
      IL_001b:  br.s       IL_001e

      IL_001d:  nop
      IL_001e:  ldloc.0
      IL_001f:  ret
    } // end of method MyWebServices::Create__Instance__

    .method private instance void  Dispose__Instance__<T>(!!T& 'instance') cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       18 (0x12)
      .maxstack  2
      .locals init ([0] !!T VB$t_generic$S0)
      IL_0000:  nop
      IL_0001:  ldarg.1
      IL_0002:  ldloca.s   VB$t_generic$S0
      IL_0004:  initobj    !!T
      IL_000a:  ldloc.0
      IL_000b:  stobj      !!T
      IL_0010:  nop
      IL_0011:  ret
    } // end of method MyWebServices::Dispose__Instance__

    .method public specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       10 (0xa)
      .maxstack  8
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0007:  nop
      IL_0008:  nop
      IL_0009:  ret
    } // end of method MyWebServices::.ctor

  } // end of class MyWebServices

  .class auto ansi sealed nested assembly ThreadSafeObjectProvider`1<.ctor T>
         extends [mscorlib]System.Object
  {
    .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
    .custom instance void [mscorlib]System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = ( 01 00 00 00 00 ) 
    .field private static !T m_ThreadStaticValue
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [mscorlib]System.ThreadStaticAttribute::.ctor() = ( 01 00 00 00 ) 
    .method assembly specialname instance !T 
            get_GetInstance() cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       38 (0x26)
      .maxstack  2
      .locals init ([0] !T GetInstance,
               [1] bool VB$CG$t_bool$S0)
      IL_0000:  nop
      IL_0001:  ldsfld     !0 class My.MyProject/ThreadSafeObjectProvider`1<!T>::m_ThreadStaticValue
      IL_0006:  box        !T
      IL_000b:  ldnull
      IL_000c:  ceq
      IL_000e:  stloc.1
      IL_000f:  ldloc.1
      IL_0010:  brfalse.s  IL_001c

      IL_0012:  call       !!0 [mscorlib]System.Activator::CreateInstance<!T>()
      IL_0017:  stsfld     !0 class My.MyProject/ThreadSafeObjectProvider`1<!T>::m_ThreadStaticValue
      IL_001c:  ldsfld     !0 class My.MyProject/ThreadSafeObjectProvider`1<!T>::m_ThreadStaticValue
      IL_0021:  stloc.0
      IL_0022:  br.s       IL_0024

      IL_0024:  ldloc.0
      IL_0025:  ret
    } // end of method ThreadSafeObjectProvider`1::get_GetInstance

    .method public specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
      // Code size       10 (0xa)
      .maxstack  8
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0007:  nop
      IL_0008:  nop
      IL_0009:  ret
    } // end of method ThreadSafeObjectProvider`1::.ctor

    .property instance !T GetInstance()
    {
      .get instance !T My.MyProject/ThreadSafeObjectProvider`1::get_GetInstance()
    } // end of property ThreadSafeObjectProvider`1::GetInstance
  } // end of class ThreadSafeObjectProvider`1

  .field private static initonly class My.MyProject/ThreadSafeObjectProvider`1<class My.MyComputer> m_ComputerObjectProvider
  .field private static initonly class My.MyProject/ThreadSafeObjectProvider`1<class My.MyApplication> m_AppObjectProvider
  .field private static initonly class My.MyProject/ThreadSafeObjectProvider`1<class [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.User> m_UserObjectProvider
  .field private static initonly class My.MyProject/ThreadSafeObjectProvider`1<class My.MyProject/MyWebServices> m_MyWebServicesObjectProvider
  .method private specialname rtspecialname static 
          void  .cctor() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       42 (0x2a)
    .maxstack  8
    IL_0000:  newobj     instance void class My.MyProject/ThreadSafeObjectProvider`1<class My.MyComputer>::.ctor()
    IL_0005:  stsfld     class My.MyProject/ThreadSafeObjectProvider`1<class My.MyComputer> My.MyProject::m_ComputerObjectProvider
    IL_000a:  newobj     instance void class My.MyProject/ThreadSafeObjectProvider`1<class My.MyApplication>::.ctor()
    IL_000f:  stsfld     class My.MyProject/ThreadSafeObjectProvider`1<class My.MyApplication> My.MyProject::m_AppObjectProvider
    IL_0014:  newobj     instance void class My.MyProject/ThreadSafeObjectProvider`1<class [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.User>::.ctor()
    IL_0019:  stsfld     class My.MyProject/ThreadSafeObjectProvider`1<class [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.User> My.MyProject::m_UserObjectProvider
    IL_001e:  newobj     instance void class My.MyProject/ThreadSafeObjectProvider`1<class My.MyProject/MyWebServices>::.ctor()
    IL_0023:  stsfld     class My.MyProject/ThreadSafeObjectProvider`1<class My.MyProject/MyWebServices> My.MyProject::m_MyWebServicesObjectProvider
    IL_0028:  nop
    IL_0029:  ret
  } // end of method MyProject::.cctor

  .method assembly specialname static class My.MyComputer 
          get_Computer() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       16 (0x10)
    .maxstack  1
    .locals init ([0] class My.MyComputer Computer)
    IL_0000:  nop
    IL_0001:  ldsfld     class My.MyProject/ThreadSafeObjectProvider`1<class My.MyComputer> My.MyProject::m_ComputerObjectProvider
    IL_0006:  callvirt   instance !0 class My.MyProject/ThreadSafeObjectProvider`1<class My.MyComputer>::get_GetInstance()
    IL_000b:  stloc.0
    IL_000c:  br.s       IL_000e

    IL_000e:  ldloc.0
    IL_000f:  ret
  } // end of method MyProject::get_Computer

  .method assembly specialname static class My.MyApplication 
          get_Application() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       16 (0x10)
    .maxstack  1
    .locals init ([0] class My.MyApplication Application)
    IL_0000:  nop
    IL_0001:  ldsfld     class My.MyProject/ThreadSafeObjectProvider`1<class My.MyApplication> My.MyProject::m_AppObjectProvider
    IL_0006:  callvirt   instance !0 class My.MyProject/ThreadSafeObjectProvider`1<class My.MyApplication>::get_GetInstance()
    IL_000b:  stloc.0
    IL_000c:  br.s       IL_000e

    IL_000e:  ldloc.0
    IL_000f:  ret
  } // end of method MyProject::get_Application

  .method assembly specialname static class [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.User 
          get_User() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       16 (0x10)
    .maxstack  1
    .locals init ([0] class [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.User User)
    IL_0000:  nop
    IL_0001:  ldsfld     class My.MyProject/ThreadSafeObjectProvider`1<class [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.User> My.MyProject::m_UserObjectProvider
    IL_0006:  callvirt   instance !0 class My.MyProject/ThreadSafeObjectProvider`1<class [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.User>::get_GetInstance()
    IL_000b:  stloc.0
    IL_000c:  br.s       IL_000e

    IL_000e:  ldloc.0
    IL_000f:  ret
  } // end of method MyProject::get_User

  .method assembly specialname static class My.MyProject/MyWebServices 
          get_WebServices() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       16 (0x10)
    .maxstack  1
    .locals init ([0] class My.MyProject/MyWebServices WebServices)
    IL_0000:  nop
    IL_0001:  ldsfld     class My.MyProject/ThreadSafeObjectProvider`1<class My.MyProject/MyWebServices> My.MyProject::m_MyWebServicesObjectProvider
    IL_0006:  callvirt   instance !0 class My.MyProject/ThreadSafeObjectProvider`1<class My.MyProject/MyWebServices>::get_GetInstance()
    IL_000b:  stloc.0
    IL_000c:  br.s       IL_000e

    IL_000e:  ldloc.0
    IL_000f:  ret
  } // end of method MyProject::get_WebServices

  .property class My.MyComputer Computer()
  {
    .custom instance void [System]System.ComponentModel.Design.HelpKeywordAttribute::.ctor(string) = ( 01 00 0B 4D 79 2E 43 6F 6D 70 75 74 65 72 00 00 ) // ...My.Computer..
    .get class My.MyComputer My.MyProject::get_Computer()
  } // end of property MyProject::Computer
  .property class My.MyApplication Application()
  {
    .custom instance void [System]System.ComponentModel.Design.HelpKeywordAttribute::.ctor(string) = ( 01 00 0E 4D 79 2E 41 70 70 6C 69 63 61 74 69 6F   // ...My.Applicatio
                                                                                                       6E 00 00 )                                        // n..
    .get class My.MyApplication My.MyProject::get_Application()
  } // end of property MyProject::Application
  .property class [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.User
          User()
  {
    .custom instance void [System]System.ComponentModel.Design.HelpKeywordAttribute::.ctor(string) = ( 01 00 07 4D 79 2E 55 73 65 72 00 00 )             // ...My.User..
    .get class [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.User My.MyProject::get_User()
  } // end of property MyProject::User
  .property class My.MyProject/MyWebServices
          WebServices()
  {
    .custom instance void [System]System.ComponentModel.Design.HelpKeywordAttribute::.ctor(string) = ( 01 00 0E 4D 79 2E 57 65 62 53 65 72 76 69 63 65   // ...My.WebService
                                                                                                       73 00 00 )                                        // s..
    .get class My.MyProject/MyWebServices My.MyProject::get_WebServices()
  } // end of property MyProject::WebServices
} // end of class My.MyProject

.class private auto ansi sealed My.InternalXmlHelper
       extends [mscorlib]System.Object
{
  .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
  .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
  .class auto ansi sealed nested private RemoveNamespaceAttributesClosure
         extends [mscorlib]System.Object
  {
    .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .field private initonly string[] m_inScopePrefixes
    .field private initonly class [System.Xml.Linq]System.Xml.Linq.XNamespace[] m_inScopeNs
    .field private initonly class [mscorlib]System.Collections.Generic.List`1<class [System.Xml.Linq]System.Xml.Linq.XAttribute> m_attributes
    .method assembly specialname rtspecialname 
            instance void  .ctor(string[] inScopePrefixes,
                                 class [System.Xml.Linq]System.Xml.Linq.XNamespace[] inScopeNs,
                                 class [mscorlib]System.Collections.Generic.List`1<class [System.Xml.Linq]System.Xml.Linq.XAttribute> attributes) cil managed
    {
      .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
      // Code size       31 (0x1f)
      .maxstack  8
// Source File '17d14f5c-a337-4978-8281-53493378c1072.vb' not found
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0007:  nop
      IL_0008:  ldarg.0
      IL_0009:  ldarg.1
      IL_000a:  stfld      string[] My.InternalXmlHelper/RemoveNamespaceAttributesClosure::m_inScopePrefixes
      IL_000f:  ldarg.0
      IL_0010:  ldarg.2
      IL_0011:  stfld      class [System.Xml.Linq]System.Xml.Linq.XNamespace[] My.InternalXmlHelper/RemoveNamespaceAttributesClosure::m_inScopeNs
      IL_0016:  ldarg.0
      IL_0017:  ldarg.3
      IL_0018:  stfld      class [mscorlib]System.Collections.Generic.List`1<class [System.Xml.Linq]System.Xml.Linq.XAttribute> My.InternalXmlHelper/RemoveNamespaceAttributesClosure::m_attributes
      IL_001d:  nop
      IL_001e:  ret
    } // end of method RemoveNamespaceAttributesClosure::.ctor

    .method assembly instance class [System.Xml.Linq]System.Xml.Linq.XElement 
            ProcessXElement(class [System.Xml.Linq]System.Xml.Linq.XElement elem) cil managed
    {
      .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
      // Code size       30 (0x1e)
      .maxstack  4
      .locals init ([0] class [System.Xml.Linq]System.Xml.Linq.XElement ProcessXElement)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldfld      string[] My.InternalXmlHelper/RemoveNamespaceAttributesClosure::m_inScopePrefixes
      IL_0007:  ldarg.0
      IL_0008:  ldfld      class [System.Xml.Linq]System.Xml.Linq.XNamespace[] My.InternalXmlHelper/RemoveNamespaceAttributesClosure::m_inScopeNs
      IL_000d:  ldarg.0
      IL_000e:  ldfld      class [mscorlib]System.Collections.Generic.List`1<class [System.Xml.Linq]System.Xml.Linq.XAttribute> My.InternalXmlHelper/RemoveNamespaceAttributesClosure::m_attributes
      IL_0013:  ldarg.1
      IL_0014:  call       class [System.Xml.Linq]System.Xml.Linq.XElement My.InternalXmlHelper::RemoveNamespaceAttributes(string[],
                                                                                                                           class [System.Xml.Linq]System.Xml.Linq.XNamespace[],
                                                                                                                           class [mscorlib]System.Collections.Generic.List`1<class [System.Xml.Linq]System.Xml.Linq.XAttribute>,
                                                                                                                           class [System.Xml.Linq]System.Xml.Linq.XElement)
      IL_0019:  stloc.0
      IL_001a:  br.s       IL_001c

      IL_001c:  ldloc.0
      IL_001d:  ret
    } // end of method RemoveNamespaceAttributesClosure::ProcessXElement

    .method assembly instance object  ProcessObject(object obj) cil managed
    {
      .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
      // Code size       56 (0x38)
      .maxstack  4
      .locals init ([0] class [System.Xml.Linq]System.Xml.Linq.XElement elem,
               [1] object ProcessObject,
               [2] bool VB$CG$t_bool$S0)
      IL_0000:  nop
      IL_0001:  ldarg.1
      IL_0002:  isinst     [System.Xml.Linq]System.Xml.Linq.XElement
      IL_0007:  stloc.0
      IL_0008:  ldloc.0
      IL_0009:  ldnull
      IL_000a:  ceq
      IL_000c:  ldc.i4.0
      IL_000d:  ceq
      IL_000f:  stloc.2
      IL_0010:  ldloc.2
      IL_0011:  brfalse.s  IL_0030

      IL_0013:  ldarg.0
      IL_0014:  ldfld      string[] My.InternalXmlHelper/RemoveNamespaceAttributesClosure::m_inScopePrefixes
      IL_0019:  ldarg.0
      IL_001a:  ldfld      class [System.Xml.Linq]System.Xml.Linq.XNamespace[] My.InternalXmlHelper/RemoveNamespaceAttributesClosure::m_inScopeNs
      IL_001f:  ldarg.0
      IL_0020:  ldfld      class [mscorlib]System.Collections.Generic.List`1<class [System.Xml.Linq]System.Xml.Linq.XAttribute> My.InternalXmlHelper/RemoveNamespaceAttributesClosure::m_attributes
      IL_0025:  ldloc.0
      IL_0026:  call       class [System.Xml.Linq]System.Xml.Linq.XElement My.InternalXmlHelper::RemoveNamespaceAttributes(string[],
                                                                                                                           class [System.Xml.Linq]System.Xml.Linq.XNamespace[],
                                                                                                                           class [mscorlib]System.Collections.Generic.List`1<class [System.Xml.Linq]System.Xml.Linq.XAttribute>,
                                                                                                                           class [System.Xml.Linq]System.Xml.Linq.XElement)
      IL_002b:  stloc.1
      IL_002c:  br.s       IL_0036

      IL_002e:  br.s       IL_0035

      IL_0030:  nop
      IL_0031:  ldarg.1
      IL_0032:  stloc.1
      IL_0033:  br.s       IL_0036

      IL_0035:  nop
      IL_0036:  ldloc.1
      IL_0037:  ret
    } // end of method RemoveNamespaceAttributesClosure::ProcessObject

  } // end of class RemoveNamespaceAttributesClosure

  .method private specialname rtspecialname 
          instance void  .ctor() cil managed
  {
    .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
    // Code size       10 (0xa)
    .maxstack  8
    IL_0000:  nop
    IL_0001:  ldarg.0
    IL_0002:  call       instance void [mscorlib]System.Object::.ctor()
    IL_0007:  nop
    IL_0008:  nop
    IL_0009:  ret
  } // end of method InternalXmlHelper::.ctor

  .method public specialname static string 
          get_Value(class [mscorlib]System.Collections.Generic.IEnumerable`1<class [System.Xml.Linq]System.Xml.Linq.XElement> source) cil managed
  {
    // Code size       67 (0x43)
    .maxstack  2
    .locals init ([0] string Value,
             [1] class [System.Xml.Linq]System.Xml.Linq.XElement item,
             [2] class [mscorlib]System.Collections.Generic.IEnumerator`1<class [System.Xml.Linq]System.Xml.Linq.XElement> VB$t_ref$L0,
             [3] bool VB$CG$t_bool$S0)
    IL_0000:  nop
    IL_0001:  nop
    .try
    {
      IL_0002:  ldarg.0
      IL_0003:  callvirt   instance class [mscorlib]System.Collections.Generic.IEnumerator`1<!0> class [mscorlib]System.Collections.Generic.IEnumerable`1<class [System.Xml.Linq]System.Xml.Linq.XElement>::GetEnumerator()
      IL_0008:  stloc.2
      IL_0009:  br.s       IL_001c

      IL_000b:  ldloc.2
      IL_000c:  callvirt   instance !0 class [mscorlib]System.Collections.Generic.IEnumerator`1<class [System.Xml.Linq]System.Xml.Linq.XElement>::get_Current()
      IL_0011:  stloc.1
      IL_0012:  ldloc.1
      IL_0013:  callvirt   instance string [System.Xml.Linq]System.Xml.Linq.XElement::get_Value()
      IL_0018:  stloc.0
      IL_0019:  leave.s    IL_0041

      IL_001b:  nop
      IL_001c:  ldloc.2
      IL_001d:  callvirt   instance bool [mscorlib]System.Collections.IEnumerator::MoveNext()
      IL_0022:  stloc.3
      IL_0023:  ldloc.3
      IL_0024:  brtrue.s   IL_000b

      IL_0026:  nop
      IL_0027:  leave.s    IL_003d

    }  // end .try
    finally
    {
      IL_0029:  ldloc.2
      IL_002a:  ldnull
      IL_002b:  ceq
      IL_002d:  ldc.i4.0
      IL_002e:  ceq
      IL_0030:  stloc.3
      IL_0031:  ldloc.3
      IL_0032:  brfalse.s  IL_003b

      IL_0034:  ldloc.2
      IL_0035:  callvirt   instance void [mscorlib]System.IDisposable::Dispose()
      IL_003a:  nop
      IL_003b:  nop
      IL_003c:  endfinally
    }  // end handler
    IL_003d:  ldnull
    IL_003e:  stloc.0
    IL_003f:  br.s       IL_0041

    IL_0041:  ldloc.0
    IL_0042:  ret
  } // end of method InternalXmlHelper::get_Value

  .method public specialname static void 
          set_Value(class [mscorlib]System.Collections.Generic.IEnumerable`1<class [System.Xml.Linq]System.Xml.Linq.XElement> source,
                    string 'value') cil managed
  {
    // Code size       65 (0x41)
    .maxstack  2
    .locals init ([0] class [System.Xml.Linq]System.Xml.Linq.XElement item,
             [1] class [mscorlib]System.Collections.Generic.IEnumerator`1<class [System.Xml.Linq]System.Xml.Linq.XElement> VB$t_ref$L0,
             [2] bool VB$CG$t_bool$S0)
    IL_0000:  nop
    IL_0001:  nop
    .try
    {
      IL_0002:  ldarg.0
      IL_0003:  callvirt   instance class [mscorlib]System.Collections.Generic.IEnumerator`1<!0> class [mscorlib]System.Collections.Generic.IEnumerable`1<class [System.Xml.Linq]System.Xml.Linq.XElement>::GetEnumerator()
      IL_0008:  stloc.1
      IL_0009:  br.s       IL_001e

      IL_000b:  ldloc.1
      IL_000c:  callvirt   instance !0 class [mscorlib]System.Collections.Generic.IEnumerator`1<class [System.Xml.Linq]System.Xml.Linq.XElement>::get_Current()
      IL_0011:  stloc.0
      IL_0012:  ldloc.0
      IL_0013:  ldarg.1
      IL_0014:  callvirt   instance void [System.Xml.Linq]System.Xml.Linq.XElement::set_Value(string)
      IL_0019:  nop
      IL_001a:  nop
      IL_001b:  br.s       IL_0028

      IL_001d:  nop
      IL_001e:  ldloc.1
      IL_001f:  callvirt   instance bool [mscorlib]System.Collections.IEnumerator::MoveNext()
      IL_0024:  stloc.2
      IL_0025:  ldloc.2
      IL_0026:  brtrue.s   IL_000b

      IL_0028:  nop
      IL_0029:  leave.s    IL_003f

    }  // end .try
    finally
    {
      IL_002b:  ldloc.1
      IL_002c:  ldnull
      IL_002d:  ceq
      IL_002f:  ldc.i4.0
      IL_0030:  ceq
      IL_0032:  stloc.2
      IL_0033:  ldloc.2
      IL_0034:  brfalse.s  IL_003d

      IL_0036:  ldloc.1
      IL_0037:  callvirt   instance void [mscorlib]System.IDisposable::Dispose()
      IL_003c:  nop
      IL_003d:  nop
      IL_003e:  endfinally
    }  // end handler
    IL_003f:  nop
    IL_0040:  ret
  } // end of method InternalXmlHelper::set_Value

  .method public specialname static string 
          get_AttributeValue(class [mscorlib]System.Collections.Generic.IEnumerable`1<class [System.Xml.Linq]System.Xml.Linq.XElement> source,
                             class [System.Xml.Linq]System.Xml.Linq.XName name) cil managed
  {
    // Code size       73 (0x49)
    .maxstack  2
    .locals init ([0] string AttributeValue,
             [1] class [System.Xml.Linq]System.Xml.Linq.XElement item,
             [2] class [mscorlib]System.Collections.Generic.IEnumerator`1<class [System.Xml.Linq]System.Xml.Linq.XElement> VB$t_ref$L0,
             [3] bool VB$CG$t_bool$S0)
    IL_0000:  nop
    IL_0001:  nop
    .try
    {
      IL_0002:  ldarg.0
      IL_0003:  callvirt   instance class [mscorlib]System.Collections.Generic.IEnumerator`1<!0> class [mscorlib]System.Collections.Generic.IEnumerable`1<class [System.Xml.Linq]System.Xml.Linq.XElement>::GetEnumerator()
      IL_0008:  stloc.2
      IL_0009:  br.s       IL_0022

      IL_000b:  ldloc.2
      IL_000c:  callvirt   instance !0 class [mscorlib]System.Collections.Generic.IEnumerator`1<class [System.Xml.Linq]System.Xml.Linq.XElement>::get_Current()
      IL_0011:  stloc.1
      IL_0012:  ldloc.1
      IL_0013:  ldarg.1
      IL_0014:  callvirt   instance class [System.Xml.Linq]System.Xml.Linq.XAttribute [System.Xml.Linq]System.Xml.Linq.XElement::Attribute(class [System.Xml.Linq]System.Xml.Linq.XName)
      IL_0019:  call       string [System.Xml.Linq]System.Xml.Linq.XAttribute::op_Explicit(class [System.Xml.Linq]System.Xml.Linq.XAttribute)
      IL_001e:  stloc.0
      IL_001f:  leave.s    IL_0047

      IL_0021:  nop
      IL_0022:  ldloc.2
      IL_0023:  callvirt   instance bool [mscorlib]System.Collections.IEnumerator::MoveNext()
      IL_0028:  stloc.3
      IL_0029:  ldloc.3
      IL_002a:  brtrue.s   IL_000b

      IL_002c:  nop
      IL_002d:  leave.s    IL_0043

    }  // end .try
    finally
    {
      IL_002f:  ldloc.2
      IL_0030:  ldnull
      IL_0031:  ceq
      IL_0033:  ldc.i4.0
      IL_0034:  ceq
      IL_0036:  stloc.3
      IL_0037:  ldloc.3
      IL_0038:  brfalse.s  IL_0041

      IL_003a:  ldloc.2
      IL_003b:  callvirt   instance void [mscorlib]System.IDisposable::Dispose()
      IL_0040:  nop
      IL_0041:  nop
      IL_0042:  endfinally
    }  // end handler
    IL_0043:  ldnull
    IL_0044:  stloc.0
    IL_0045:  br.s       IL_0047

    IL_0047:  ldloc.0
    IL_0048:  ret
  } // end of method InternalXmlHelper::get_AttributeValue

  .method public specialname static void 
          set_AttributeValue(class [mscorlib]System.Collections.Generic.IEnumerable`1<class [System.Xml.Linq]System.Xml.Linq.XElement> source,
                             class [System.Xml.Linq]System.Xml.Linq.XName name,
                             string 'value') cil managed
  {
    // Code size       66 (0x42)
    .maxstack  3
    .locals init ([0] class [System.Xml.Linq]System.Xml.Linq.XElement item,
             [1] class [mscorlib]System.Collections.Generic.IEnumerator`1<class [System.Xml.Linq]System.Xml.Linq.XElement> VB$t_ref$L0,
             [2] bool VB$CG$t_bool$S0)
    IL_0000:  nop
    IL_0001:  nop
    .try
    {
      IL_0002:  ldarg.0
      IL_0003:  callvirt   instance class [mscorlib]System.Collections.Generic.IEnumerator`1<!0> class [mscorlib]System.Collections.Generic.IEnumerable`1<class [System.Xml.Linq]System.Xml.Linq.XElement>::GetEnumerator()
      IL_0008:  stloc.1
      IL_0009:  br.s       IL_001f

      IL_000b:  ldloc.1
      IL_000c:  callvirt   instance !0 class [mscorlib]System.Collections.Generic.IEnumerator`1<class [System.Xml.Linq]System.Xml.Linq.XElement>::get_Current()
      IL_0011:  stloc.0
      IL_0012:  ldloc.0
      IL_0013:  ldarg.1
      IL_0014:  ldarg.2
      IL_0015:  callvirt   instance void [System.Xml.Linq]System.Xml.Linq.XElement::SetAttributeValue(class [System.Xml.Linq]System.Xml.Linq.XName,
                                                                                                      object)
      IL_001a:  nop
      IL_001b:  nop
      IL_001c:  br.s       IL_0029

      IL_001e:  nop
      IL_001f:  ldloc.1
      IL_0020:  callvirt   instance bool [mscorlib]System.Collections.IEnumerator::MoveNext()
      IL_0025:  stloc.2
      IL_0026:  ldloc.2
      IL_0027:  brtrue.s   IL_000b

      IL_0029:  nop
      IL_002a:  leave.s    IL_0040

    }  // end .try
    finally
    {
      IL_002c:  ldloc.1
      IL_002d:  ldnull
      IL_002e:  ceq
      IL_0030:  ldc.i4.0
      IL_0031:  ceq
      IL_0033:  stloc.2
      IL_0034:  ldloc.2
      IL_0035:  brfalse.s  IL_003e

      IL_0037:  ldloc.1
      IL_0038:  callvirt   instance void [mscorlib]System.IDisposable::Dispose()
      IL_003d:  nop
      IL_003e:  nop
      IL_003f:  endfinally
    }  // end handler
    IL_0040:  nop
    IL_0041:  ret
  } // end of method InternalXmlHelper::set_AttributeValue

  .method public specialname static string 
          get_AttributeValue(class [System.Xml.Linq]System.Xml.Linq.XElement source,
                             class [System.Xml.Linq]System.Xml.Linq.XName name) cil managed
  {
    // Code size       18 (0x12)
    .maxstack  2
    .locals init ([0] string AttributeValue)
    IL_0000:  nop
    IL_0001:  ldarg.0
    IL_0002:  ldarg.1
    IL_0003:  callvirt   instance class [System.Xml.Linq]System.Xml.Linq.XAttribute [System.Xml.Linq]System.Xml.Linq.XElement::Attribute(class [System.Xml.Linq]System.Xml.Linq.XName)
    IL_0008:  call       string [System.Xml.Linq]System.Xml.Linq.XAttribute::op_Explicit(class [System.Xml.Linq]System.Xml.Linq.XAttribute)
    IL_000d:  stloc.0
    IL_000e:  br.s       IL_0010

    IL_0010:  ldloc.0
    IL_0011:  ret
  } // end of method InternalXmlHelper::get_AttributeValue

  .method public specialname static void 
          set_AttributeValue(class [System.Xml.Linq]System.Xml.Linq.XElement source,
                             class [System.Xml.Linq]System.Xml.Linq.XName name,
                             string 'value') cil managed
  {
    // Code size       12 (0xc)
    .maxstack  8
    IL_0000:  nop
    IL_0001:  ldarg.0
    IL_0002:  ldarg.1
    IL_0003:  ldarg.2
    IL_0004:  callvirt   instance void [System.Xml.Linq]System.Xml.Linq.XElement::SetAttributeValue(class [System.Xml.Linq]System.Xml.Linq.XName,
                                                                                                    object)
    IL_0009:  nop
    IL_000a:  nop
    IL_000b:  ret
  } // end of method InternalXmlHelper::set_AttributeValue

  .method public static class [System.Xml.Linq]System.Xml.Linq.XAttribute 
          CreateAttribute(class [System.Xml.Linq]System.Xml.Linq.XName name,
                          object 'value') cil managed
  {
    .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
    // Code size       31 (0x1f)
    .maxstack  2
    .locals init ([0] class [System.Xml.Linq]System.Xml.Linq.XAttribute CreateAttribute,
             [1] bool VB$CG$t_bool$S0)
    IL_0000:  nop
    IL_0001:  ldarg.1
    IL_0002:  ldnull
    IL_0003:  ceq
    IL_0005:  stloc.1
    IL_0006:  ldloc.1
    IL_0007:  brfalse.s  IL_000d

    IL_0009:  ldnull
    IL_000a:  stloc.0
    IL_000b:  br.s       IL_001d

    IL_000d:  nop
    IL_000e:  ldarg.0
    IL_000f:  ldarg.1
    IL_0010:  call       object [mscorlib]System.Runtime.CompilerServices.RuntimeHelpers::GetObjectValue(object)
    IL_0015:  newobj     instance void [System.Xml.Linq]System.Xml.Linq.XAttribute::.ctor(class [System.Xml.Linq]System.Xml.Linq.XName,
                                                                                          object)
    IL_001a:  stloc.0
    IL_001b:  br.s       IL_001d

    IL_001d:  ldloc.0
    IL_001e:  ret
  } // end of method InternalXmlHelper::CreateAttribute

  .method public static class [System.Xml.Linq]System.Xml.Linq.XAttribute 
          CreateNamespaceAttribute(class [System.Xml.Linq]System.Xml.Linq.XName name,
                                   class [System.Xml.Linq]System.Xml.Linq.XNamespace ns) cil managed
  {
    .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
    // Code size       28 (0x1c)
    .maxstack  2
    .locals init ([0] class [System.Xml.Linq]System.Xml.Linq.XAttribute a,
             [1] class [System.Xml.Linq]System.Xml.Linq.XAttribute CreateNamespaceAttribute)
    IL_0000:  nop
    IL_0001:  ldarg.0
    IL_0002:  ldarg.1
    IL_0003:  callvirt   instance string [System.Xml.Linq]System.Xml.Linq.XNamespace::get_NamespaceName()
    IL_0008:  newobj     instance void [System.Xml.Linq]System.Xml.Linq.XAttribute::.ctor(class [System.Xml.Linq]System.Xml.Linq.XName,
                                                                                          object)
    IL_000d:  stloc.0
    IL_000e:  ldloc.0
    IL_000f:  ldarg.1
    IL_0010:  callvirt   instance void [System.Xml.Linq]System.Xml.Linq.XObject::AddAnnotation(object)
    IL_0015:  nop
    IL_0016:  ldloc.0
    IL_0017:  stloc.1
    IL_0018:  br.s       IL_001a

    IL_001a:  ldloc.1
    IL_001b:  ret
  } // end of method InternalXmlHelper::CreateNamespaceAttribute

  .method public static object  RemoveNamespaceAttributes(string[] inScopePrefixes,
                                                          class [System.Xml.Linq]System.Xml.Linq.XNamespace[] inScopeNs,
                                                          class [mscorlib]System.Collections.Generic.List`1<class [System.Xml.Linq]System.Xml.Linq.XAttribute> attributes,
                                                          object obj) cil managed
  {
    .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
    // Code size       84 (0x54)
    .maxstack  4
    .locals init ([0] object RemoveNamespaceAttributes,
             [1] class [System.Xml.Linq]System.Xml.Linq.XElement elem,
             [2] class [mscorlib]System.Collections.IEnumerable elems,
             [3] bool VB$CG$t_bool$S0)
    IL_0000:  nop
    IL_0001:  ldarg.3
    IL_0002:  ldnull
    IL_0003:  ceq
    IL_0005:  ldc.i4.0
    IL_0006:  ceq
    IL_0008:  stloc.3
    IL_0009:  ldloc.3
    IL_000a:  brfalse.s  IL_004d

    IL_000c:  ldarg.3
    IL_000d:  isinst     [System.Xml.Linq]System.Xml.Linq.XElement
    IL_0012:  stloc.1
    IL_0013:  ldloc.1
    IL_0014:  ldnull
    IL_0015:  ceq
    IL_0017:  ldc.i4.0
    IL_0018:  ceq
    IL_001a:  stloc.3
    IL_001b:  ldloc.3
    IL_001c:  brfalse.s  IL_002c

    IL_001e:  ldarg.0
    IL_001f:  ldarg.1
    IL_0020:  ldarg.2
    IL_0021:  ldloc.1
    IL_0022:  call       class [System.Xml.Linq]System.Xml.Linq.XElement My.InternalXmlHelper::RemoveNamespaceAttributes(string[],
                                                                                                                         class [System.Xml.Linq]System.Xml.Linq.XNamespace[],
                                                                                                                         class [mscorlib]System.Collections.Generic.List`1<class [System.Xml.Linq]System.Xml.Linq.XAttribute>,
                                                                                                                         class [System.Xml.Linq]System.Xml.Linq.XElement)
    IL_0027:  stloc.0
    IL_0028:  br.s       IL_0052

    IL_002a:  br.s       IL_004c

    IL_002c:  nop
    IL_002d:  ldarg.3
    IL_002e:  isinst     [mscorlib]System.Collections.IEnumerable
    IL_0033:  stloc.2
    IL_0034:  ldloc.2
    IL_0035:  ldnull
    IL_0036:  ceq
    IL_0038:  ldc.i4.0
    IL_0039:  ceq
    IL_003b:  stloc.3
    IL_003c:  ldloc.3
    IL_003d:  brfalse.s  IL_004b

    IL_003f:  ldarg.0
    IL_0040:  ldarg.1
    IL_0041:  ldarg.2
    IL_0042:  ldloc.2
    IL_0043:  call       class [mscorlib]System.Collections.IEnumerable My.InternalXmlHelper::RemoveNamespaceAttributes(string[],
                                                                                                                        class [System.Xml.Linq]System.Xml.Linq.XNamespace[],
                                                                                                                        class [mscorlib]System.Collections.Generic.List`1<class [System.Xml.Linq]System.Xml.Linq.XAttribute>,
                                                                                                                        class [mscorlib]System.Collections.IEnumerable)
    IL_0048:  stloc.0
    IL_0049:  br.s       IL_0052

    IL_004b:  nop
    IL_004c:  nop
    IL_004d:  nop
    IL_004e:  ldarg.3
    IL_004f:  stloc.0
    IL_0050:  br.s       IL_0052

    IL_0052:  ldloc.0
    IL_0053:  ret
  } // end of method InternalXmlHelper::RemoveNamespaceAttributes

  .method public static class [mscorlib]System.Collections.IEnumerable 
          RemoveNamespaceAttributes(string[] inScopePrefixes,
                                    class [System.Xml.Linq]System.Xml.Linq.XNamespace[] inScopeNs,
                                    class [mscorlib]System.Collections.Generic.List`1<class [System.Xml.Linq]System.Xml.Linq.XAttribute> attributes,
                                    class [mscorlib]System.Collections.IEnumerable obj) cil managed
  {
    .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
    // Code size       104 (0x68)
    .maxstack  4
    .locals init ([0] class [mscorlib]System.Collections.IEnumerable RemoveNamespaceAttributes,
             [1] class [mscorlib]System.Collections.Generic.IEnumerable`1<class [System.Xml.Linq]System.Xml.Linq.XElement> elems,
             [2] bool VB$CG$t_bool$S0)
    IL_0000:  nop
    IL_0001:  ldarg.3
    IL_0002:  ldnull
    IL_0003:  ceq
    IL_0005:  ldc.i4.0
    IL_0006:  ceq
    IL_0008:  stloc.2
    IL_0009:  ldloc.2
    IL_000a:  brfalse.s  IL_0061

    IL_000c:  ldarg.3
    IL_000d:  isinst     class [mscorlib]System.Collections.Generic.IEnumerable`1<class [System.Xml.Linq]System.Xml.Linq.XElement>
    IL_0012:  stloc.1
    IL_0013:  ldloc.1
    IL_0014:  ldnull
    IL_0015:  ceq
    IL_0017:  ldc.i4.0
    IL_0018:  ceq
    IL_001a:  stloc.2
    IL_001b:  ldloc.2
    IL_001c:  brfalse.s  IL_003d

    IL_001e:  ldloc.1
    IL_001f:  ldarg.0
    IL_0020:  ldarg.1
    IL_0021:  ldarg.2
    IL_0022:  newobj     instance void My.InternalXmlHelper/RemoveNamespaceAttributesClosure::.ctor(string[],
                                                                                                    class [System.Xml.Linq]System.Xml.Linq.XNamespace[],
                                                                                                    class [mscorlib]System.Collections.Generic.List`1<class [System.Xml.Linq]System.Xml.Linq.XAttribute>)
    IL_0027:  dup
    IL_0028:  ldvirtftn  instance class [System.Xml.Linq]System.Xml.Linq.XElement My.InternalXmlHelper/RemoveNamespaceAttributesClosure::ProcessXElement(class [System.Xml.Linq]System.Xml.Linq.XElement)
    IL_002e:  newobj     instance void class [mscorlib]System.Func`2<class [System.Xml.Linq]System.Xml.Linq.XElement,class [System.Xml.Linq]System.Xml.Linq.XElement>::.ctor(object,
                                                                                                                                                                             native int)
    IL_0033:  call       class [mscorlib]System.Collections.Generic.IEnumerable`1<!!1> [System.Core]System.Linq.Enumerable::Select<class [System.Xml.Linq]System.Xml.Linq.XElement,class [System.Xml.Linq]System.Xml.Linq.XElement>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>,
                                                                                                                                                                                                                                    class [mscorlib]System.Func`2<!!0,!!1>)
    IL_0038:  stloc.0
    IL_0039:  br.s       IL_0066

    IL_003b:  br.s       IL_0060

    IL_003d:  nop
    IL_003e:  ldarg.3
    IL_003f:  call       class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0> [System.Core]System.Linq.Enumerable::Cast<object>(class [mscorlib]System.Collections.IEnumerable)
    IL_0044:  ldarg.0
    IL_0045:  ldarg.1
    IL_0046:  ldarg.2
    IL_0047:  newobj     instance void My.InternalXmlHelper/RemoveNamespaceAttributesClosure::.ctor(string[],
                                                                                                    class [System.Xml.Linq]System.Xml.Linq.XNamespace[],
                                                                                                    class [mscorlib]System.Collections.Generic.List`1<class [System.Xml.Linq]System.Xml.Linq.XAttribute>)
    IL_004c:  dup
    IL_004d:  ldvirtftn  instance object My.InternalXmlHelper/RemoveNamespaceAttributesClosure::ProcessObject(object)
    IL_0053:  newobj     instance void class [mscorlib]System.Func`2<object,object>::.ctor(object,
                                                                                           native int)
    IL_0058:  call       class [mscorlib]System.Collections.Generic.IEnumerable`1<!!1> [System.Core]System.Linq.Enumerable::Select<object,object>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>,
                                                                                                                                                  class [mscorlib]System.Func`2<!!0,!!1>)
    IL_005d:  stloc.0
    IL_005e:  br.s       IL_0066

    IL_0060:  nop
    IL_0061:  nop
    IL_0062:  ldarg.3
    IL_0063:  stloc.0
    IL_0064:  br.s       IL_0066

    IL_0066:  ldloc.0
    IL_0067:  ret
  } // end of method InternalXmlHelper::RemoveNamespaceAttributes

  .method public static class [System.Xml.Linq]System.Xml.Linq.XElement 
          RemoveNamespaceAttributes(string[] inScopePrefixes,
                                    class [System.Xml.Linq]System.Xml.Linq.XNamespace[] inScopeNs,
                                    class [mscorlib]System.Collections.Generic.List`1<class [System.Xml.Linq]System.Xml.Linq.XAttribute> attributes,
                                    class [System.Xml.Linq]System.Xml.Linq.XElement e) cil managed
  {
    .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
    // Code size       407 (0x197)
    .maxstack  2
    .locals init ([0] class [System.Xml.Linq]System.Xml.Linq.XElement RemoveNamespaceAttributes,
             [1] class [System.Xml.Linq]System.Xml.Linq.XAttribute a,
             [2] class [System.Xml.Linq]System.Xml.Linq.XAttribute nextA,
             [3] class [System.Xml.Linq]System.Xml.Linq.XNamespace ns,
             [4] string prefix,
             [5] int32 lastIndex,
             [6] class [System.Xml.Linq]System.Xml.Linq.XNamespace currentInScopeNs,
             [7] string currentInScopePrefix,
             [8] int32 i,
             [9] int32 V_9,
             [10] class [System.Xml.Linq]System.Xml.Linq.XAttribute currentA,
             [11] class [System.Xml.Linq]System.Xml.Linq.XNamespace V_11,
             [12] string V_12,
             [13] int32 V_13,
             [14] int32 VB$t_i4$L0,
             [15] int32 VB$t_i4$L1,
             [16] bool VB$CG$t_bool$S0,
             [17] bool VB$CG$t_bool$S1,
             [18] int32 VB$CG$t_i4$S0,
             [19] bool VB$CG$t_bool$S2)
    IL_0000:  nop
    IL_0001:  ldarg.3
    IL_0002:  ldnull
    IL_0003:  ceq
    IL_0005:  ldc.i4.0
    IL_0006:  ceq
    IL_0008:  stloc.s    VB$CG$t_bool$S0
    IL_000a:  ldloc.s    VB$CG$t_bool$S0
    IL_000c:  brfalse    IL_0190

    IL_0011:  ldarg.3
    IL_0012:  callvirt   instance class [System.Xml.Linq]System.Xml.Linq.XAttribute [System.Xml.Linq]System.Xml.Linq.XElement::get_FirstAttribute()
    IL_0017:  stloc.1
    IL_0018:  br         IL_0180

    IL_001d:  ldloc.1
    IL_001e:  callvirt   instance class [System.Xml.Linq]System.Xml.Linq.XAttribute [System.Xml.Linq]System.Xml.Linq.XAttribute::get_NextAttribute()
    IL_0023:  stloc.2
    IL_0024:  ldloc.1
    IL_0025:  callvirt   instance bool [System.Xml.Linq]System.Xml.Linq.XAttribute::get_IsNamespaceDeclaration()
    IL_002a:  stloc.s    VB$CG$t_bool$S0
    IL_002c:  ldloc.s    VB$CG$t_bool$S0
    IL_002e:  brfalse    IL_017c

    IL_0033:  ldloc.1
    IL_0034:  callvirt   instance !!0 [System.Xml.Linq]System.Xml.Linq.XObject::Annotation<class [System.Xml.Linq]System.Xml.Linq.XNamespace>()
    IL_0039:  stloc.3
    IL_003a:  ldloc.1
    IL_003b:  callvirt   instance class [System.Xml.Linq]System.Xml.Linq.XName [System.Xml.Linq]System.Xml.Linq.XAttribute::get_Name()
    IL_0040:  callvirt   instance string [System.Xml.Linq]System.Xml.Linq.XName::get_LocalName()
    IL_0045:  stloc.s    prefix
    IL_0047:  ldloc.3
    IL_0048:  ldnull
    IL_0049:  ceq
    IL_004b:  ldc.i4.0
    IL_004c:  ceq
    IL_004e:  stloc.s    VB$CG$t_bool$S0
    IL_0050:  ldloc.s    VB$CG$t_bool$S0
    IL_0052:  brfalse    IL_017b

    IL_0057:  ldarg.0
    IL_0058:  brfalse.s  IL_005d

    IL_005a:  ldarg.1
    IL_005b:  brtrue.s   IL_0060

    IL_005d:  ldc.i4.0
    IL_005e:  br.s       IL_0061

    IL_0060:  ldc.i4.1
    IL_0061:  stloc.s    VB$CG$t_bool$S1
    IL_0063:  ldloc.s    VB$CG$t_bool$S1
    IL_0065:  brfalse.s  IL_00bf

    IL_0067:  ldarg.0
    IL_0068:  ldlen
    IL_0069:  conv.ovf.i4
    IL_006a:  ldc.i4.1
    IL_006b:  sub.ovf
    IL_006c:  stloc.s    lastIndex
    IL_006e:  ldc.i4.0
    IL_006f:  ldloc.s    lastIndex
    IL_0071:  stloc.s    VB$t_i4$L0
    IL_0073:  stloc.s    i
    IL_0075:  br.s       IL_00b5

    IL_0077:  ldarg.0
    IL_0078:  ldloc.s    i
    IL_007a:  ldelem.ref
    IL_007b:  stloc.s    currentInScopePrefix
    IL_007d:  ldarg.1
    IL_007e:  ldloc.s    i
    IL_0080:  ldelem.ref
    IL_0081:  stloc.s    currentInScopeNs
    IL_0083:  ldloc.s    prefix
    IL_0085:  ldloc.s    currentInScopePrefix
    IL_0087:  callvirt   instance bool [mscorlib]System.String::Equals(string)
    IL_008c:  stloc.s    VB$CG$t_bool$S1
    IL_008e:  ldloc.s    VB$CG$t_bool$S1
    IL_0090:  brfalse.s  IL_00ad

    IL_0092:  ldloc.3
    IL_0093:  ldloc.s    currentInScopeNs
    IL_0095:  call       bool [System.Xml.Linq]System.Xml.Linq.XNamespace::op_Equality(class [System.Xml.Linq]System.Xml.Linq.XNamespace,
                                                                                       class [System.Xml.Linq]System.Xml.Linq.XNamespace)
    IL_009a:  stloc.s    VB$CG$t_bool$S0
    IL_009c:  ldloc.s    VB$CG$t_bool$S0
    IL_009e:  brfalse.s  IL_00a7

    IL_00a0:  ldloc.1
    IL_00a1:  callvirt   instance void [System.Xml.Linq]System.Xml.Linq.XAttribute::Remove()
    IL_00a6:  nop
    IL_00a7:  nop
    IL_00a8:  ldnull
    IL_00a9:  stloc.1
    IL_00aa:  nop
    IL_00ab:  br.s       IL_00bf

    IL_00ad:  nop
    IL_00ae:  nop
    IL_00af:  ldloc.s    i
    IL_00b1:  ldc.i4.1
    IL_00b2:  add.ovf
    IL_00b3:  stloc.s    i
    IL_00b5:  ldloc.s    i
    IL_00b7:  ldloc.s    VB$t_i4$L0
    IL_00b9:  stloc.s    VB$CG$t_i4$S0
    IL_00bb:  ldloc.s    VB$CG$t_i4$S0
    IL_00bd:  ble.s      IL_0077

    IL_00bf:  nop
    IL_00c0:  ldloc.1
    IL_00c1:  ldnull
    IL_00c2:  ceq
    IL_00c4:  ldc.i4.0
    IL_00c5:  ceq
    IL_00c7:  stloc.s    VB$CG$t_bool$S1
    IL_00c9:  ldloc.s    VB$CG$t_bool$S1
    IL_00cb:  brfalse    IL_017a

    IL_00d0:  ldarg.2
    IL_00d1:  ldnull
    IL_00d2:  ceq
    IL_00d4:  ldc.i4.0
    IL_00d5:  ceq
    IL_00d7:  stloc.s    VB$CG$t_bool$S0
    IL_00d9:  ldloc.s    VB$CG$t_bool$S0
    IL_00db:  brfalse.s  IL_015c

    IL_00dd:  ldarg.2
    IL_00de:  callvirt   instance int32 class [mscorlib]System.Collections.Generic.List`1<class [System.Xml.Linq]System.Xml.Linq.XAttribute>::get_Count()
    IL_00e3:  ldc.i4.1
    IL_00e4:  sub.ovf
    IL_00e5:  stloc.s    V_9
    IL_00e7:  ldc.i4.0
    IL_00e8:  ldloc.s    V_9
    IL_00ea:  stloc.s    VB$t_i4$L1
    IL_00ec:  stloc.s    V_13
    IL_00ee:  br.s       IL_0152

    IL_00f0:  ldarg.2
    IL_00f1:  ldloc.s    V_13
    IL_00f3:  callvirt   instance !0 class [mscorlib]System.Collections.Generic.List`1<class [System.Xml.Linq]System.Xml.Linq.XAttribute>::get_Item(int32)
    IL_00f8:  stloc.s    currentA
    IL_00fa:  ldloc.s    currentA
    IL_00fc:  callvirt   instance class [System.Xml.Linq]System.Xml.Linq.XName [System.Xml.Linq]System.Xml.Linq.XAttribute::get_Name()
    IL_0101:  callvirt   instance string [System.Xml.Linq]System.Xml.Linq.XName::get_LocalName()
    IL_0106:  stloc.s    V_12
    IL_0108:  ldloc.s    currentA
    IL_010a:  callvirt   instance !!0 [System.Xml.Linq]System.Xml.Linq.XObject::Annotation<class [System.Xml.Linq]System.Xml.Linq.XNamespace>()
    IL_010f:  stloc.s    V_11
    IL_0111:  ldloc.s    V_11
    IL_0113:  ldnull
    IL_0114:  ceq
    IL_0116:  ldc.i4.0
    IL_0117:  ceq
    IL_0119:  stloc.s    VB$CG$t_bool$S1
    IL_011b:  ldloc.s    VB$CG$t_bool$S1
    IL_011d:  brfalse.s  IL_014a

    IL_011f:  ldloc.s    prefix
    IL_0121:  ldloc.s    V_12
    IL_0123:  callvirt   instance bool [mscorlib]System.String::Equals(string)
    IL_0128:  stloc.s    VB$CG$t_bool$S0
    IL_012a:  ldloc.s    VB$CG$t_bool$S0
    IL_012c:  brfalse.s  IL_0149

    IL_012e:  ldloc.3
    IL_012f:  ldloc.s    V_11
    IL_0131:  call       bool [System.Xml.Linq]System.Xml.Linq.XNamespace::op_Equality(class [System.Xml.Linq]System.Xml.Linq.XNamespace,
                                                                                       class [System.Xml.Linq]System.Xml.Linq.XNamespace)
    IL_0136:  stloc.s    VB$CG$t_bool$S2
    IL_0138:  ldloc.s    VB$CG$t_bool$S2
    IL_013a:  brfalse.s  IL_0143

    IL_013c:  ldloc.1
    IL_013d:  callvirt   instance void [System.Xml.Linq]System.Xml.Linq.XAttribute::Remove()
    IL_0142:  nop
    IL_0143:  nop
    IL_0144:  ldnull
    IL_0145:  stloc.1
    IL_0146:  nop
    IL_0147:  br.s       IL_015c

    IL_0149:  nop
    IL_014a:  nop
    IL_014b:  nop
    IL_014c:  ldloc.s    V_13
    IL_014e:  ldc.i4.1
    IL_014f:  add.ovf
    IL_0150:  stloc.s    V_13
    IL_0152:  ldloc.s    V_13
    IL_0154:  ldloc.s    VB$t_i4$L1
    IL_0156:  stloc.s    VB$CG$t_i4$S0
    IL_0158:  ldloc.s    VB$CG$t_i4$S0
    IL_015a:  ble.s      IL_00f0

    IL_015c:  nop
    IL_015d:  ldloc.1
    IL_015e:  ldnull
    IL_015f:  ceq
    IL_0161:  ldc.i4.0
    IL_0162:  ceq
    IL_0164:  stloc.s    VB$CG$t_bool$S2
    IL_0166:  ldloc.s    VB$CG$t_bool$S2
    IL_0168:  brfalse.s  IL_0179

    IL_016a:  ldloc.1
    IL_016b:  callvirt   instance void [System.Xml.Linq]System.Xml.Linq.XAttribute::Remove()
    IL_0170:  nop
    IL_0171:  ldarg.2
    IL_0172:  ldloc.1
    IL_0173:  callvirt   instance void class [mscorlib]System.Collections.Generic.List`1<class [System.Xml.Linq]System.Xml.Linq.XAttribute>::Add(!0)
    IL_0178:  nop
    IL_0179:  nop
    IL_017a:  nop
    IL_017b:  nop
    IL_017c:  nop
    IL_017d:  ldloc.2
    IL_017e:  stloc.1
    IL_017f:  nop
    IL_0180:  ldloc.1
    IL_0181:  ldnull
    IL_0182:  ceq
    IL_0184:  ldc.i4.0
    IL_0185:  ceq
    IL_0187:  stloc.s    VB$CG$t_bool$S2
    IL_0189:  ldloc.s    VB$CG$t_bool$S2
    IL_018b:  brtrue     IL_001d

    IL_0190:  nop
    IL_0191:  ldarg.3
    IL_0192:  stloc.0
    IL_0193:  br.s       IL_0195

    IL_0195:  ldloc.0
    IL_0196:  ret
  } // end of method InternalXmlHelper::RemoveNamespaceAttributes

  .property string Value(class [mscorlib]System.Collections.Generic.IEnumerable`1<class [System.Xml.Linq]System.Xml.Linq.XElement>)
  {
    .custom instance void [System.Core]System.Runtime.CompilerServices.ExtensionAttribute::.ctor() = ( 01 00 00 00 ) 
    .get string My.InternalXmlHelper::get_Value(class [mscorlib]System.Collections.Generic.IEnumerable`1<class [System.Xml.Linq]System.Xml.Linq.XElement>)
    .set void My.InternalXmlHelper::set_Value(class [mscorlib]System.Collections.Generic.IEnumerable`1<class [System.Xml.Linq]System.Xml.Linq.XElement>,
                                              string)
  } // end of property InternalXmlHelper::Value
  .property string AttributeValue(class [mscorlib]System.Collections.Generic.IEnumerable`1<class [System.Xml.Linq]System.Xml.Linq.XElement>,
                                  class [System.Xml.Linq]System.Xml.Linq.XName)
  {
    .custom instance void [System.Core]System.Runtime.CompilerServices.ExtensionAttribute::.ctor() = ( 01 00 00 00 ) 
    .get string My.InternalXmlHelper::get_AttributeValue(class [mscorlib]System.Collections.Generic.IEnumerable`1<class [System.Xml.Linq]System.Xml.Linq.XElement>,
                                                         class [System.Xml.Linq]System.Xml.Linq.XName)
    .set void My.InternalXmlHelper::set_AttributeValue(class [mscorlib]System.Collections.Generic.IEnumerable`1<class [System.Xml.Linq]System.Xml.Linq.XElement>,
                                                       class [System.Xml.Linq]System.Xml.Linq.XName,
                                                       string)
  } // end of property InternalXmlHelper::AttributeValue
  .property string AttributeValue(class [System.Xml.Linq]System.Xml.Linq.XElement,
                                  class [System.Xml.Linq]System.Xml.Linq.XName)
  {
    .custom instance void [System.Core]System.Runtime.CompilerServices.ExtensionAttribute::.ctor() = ( 01 00 00 00 ) 
    .get string My.InternalXmlHelper::get_AttributeValue(class [System.Xml.Linq]System.Xml.Linq.XElement,
                                                         class [System.Xml.Linq]System.Xml.Linq.XName)
    .set void My.InternalXmlHelper::set_AttributeValue(class [System.Xml.Linq]System.Xml.Linq.XElement,
                                                       class [System.Xml.Linq]System.Xml.Linq.XName,
                                                       string)
  } // end of property InternalXmlHelper::AttributeValue
} // end of class My.InternalXmlHelper

.class public auto ansi beforefieldinit SpellChecker.App
       extends [PresentationFramework]System.Windows.Application
{
  .custom instance void [System]System.CodeDom.Compiler.GeneratedCodeAttribute::.ctor(string,
                                                                                      string) = ( 01 00 16 50 72 65 73 65 6E 74 61 74 69 6F 6E 42   // ...PresentationB
                                                                                                  75 69 6C 64 54 61 73 6B 73 07 34 2E 30 2E 30 2E   // uildTasks.4.0.0.
                                                                                                  30 00 00 )                                        // 0..
  .field private static class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> __ENCList
  .method private specialname rtspecialname static 
          void  .cctor() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       12 (0xc)
    .maxstack  8
    IL_0000:  newobj     instance void class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::.ctor()
    IL_0005:  stsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> SpellChecker.App::__ENCList
    IL_000a:  nop
    IL_000b:  ret
  } // end of method App::.cctor

  .method public specialname rtspecialname 
          instance void  .ctor() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       16 (0x10)
    .maxstack  8
    IL_0000:  ldarg.0
    IL_0001:  call       instance void [PresentationFramework]System.Windows.Application::.ctor()
    IL_0006:  nop
    IL_0007:  ldarg.0
    IL_0008:  call       void SpellChecker.App::__ENCAddToList(object)
    IL_000d:  nop
    IL_000e:  nop
    IL_000f:  ret
  } // end of method App::.ctor

  .method private static void  __ENCAddToList(object 'value') cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       243 (0xf3)
    .maxstack  4
    .locals init (int32 V_0,
             int32 V_1,
             class [mscorlib]System.WeakReference V_2,
             class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> V_3,
             bool V_4,
             int32 V_5,
             bool V_6,
             bool V_7,
             int32 V_8)
    IL_0000:  nop
    IL_0001:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> SpellChecker.App::__ENCList
    IL_0006:  stloc.3
    IL_0007:  ldc.i4.0
    IL_0008:  stloc.s    V_4
    IL_000a:  nop
    .try
    {
      IL_000b:  ldloc.3
      IL_000c:  ldloca.s   V_4
      IL_000e:  call       void [mscorlib]System.Threading.Monitor::Enter(object,
                                                                          bool&)
      IL_0013:  nop
      IL_0014:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> SpellChecker.App::__ENCList
      IL_0019:  callvirt   instance int32 class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::get_Count()
      IL_001e:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> SpellChecker.App::__ENCList
      IL_0023:  callvirt   instance int32 class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::get_Capacity()
      IL_0028:  ceq
      IL_002a:  stloc.s    V_6
      IL_002c:  ldloc.s    V_6
      IL_002e:  brfalse    IL_00c4

      IL_0033:  ldc.i4.0
      IL_0034:  stloc.0
      IL_0035:  ldc.i4.0
      IL_0036:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> SpellChecker.App::__ENCList
      IL_003b:  callvirt   instance int32 class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::get_Count()
      IL_0040:  ldc.i4.1
      IL_0041:  sub.ovf
      IL_0042:  stloc.s    V_5
      IL_0044:  stloc.1
      IL_0045:  br.s       IL_008e

      IL_0047:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> SpellChecker.App::__ENCList
      IL_004c:  ldloc.1
      IL_004d:  callvirt   instance !0 class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::get_Item(int32)
      IL_0052:  stloc.2
      IL_0053:  ldloc.2
      IL_0054:  callvirt   instance bool [mscorlib]System.WeakReference::get_IsAlive()
      IL_0059:  stloc.s    V_6
      IL_005b:  ldloc.s    V_6
      IL_005d:  brfalse.s  IL_0088

      IL_005f:  ldloc.1
      IL_0060:  ldloc.0
      IL_0061:  ceq
      IL_0063:  ldc.i4.0
      IL_0064:  ceq
      IL_0066:  stloc.s    V_7
      IL_0068:  ldloc.s    V_7
      IL_006a:  brfalse.s  IL_0083

      IL_006c:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> SpellChecker.App::__ENCList
      IL_0071:  ldloc.0
      IL_0072:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> SpellChecker.App::__ENCList
      IL_0077:  ldloc.1
      IL_0078:  callvirt   instance !0 class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::get_Item(int32)
      IL_007d:  callvirt   instance void class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::set_Item(int32,
                                                                                                                                           !0)
      IL_0082:  nop
      IL_0083:  nop
      IL_0084:  ldloc.0
      IL_0085:  ldc.i4.1
      IL_0086:  add.ovf
      IL_0087:  stloc.0
      IL_0088:  nop
      IL_0089:  nop
      IL_008a:  ldloc.1
      IL_008b:  ldc.i4.1
      IL_008c:  add.ovf
      IL_008d:  stloc.1
      IL_008e:  ldloc.1
      IL_008f:  ldloc.s    V_5
      IL_0091:  stloc.s    V_8
      IL_0093:  ldloc.s    V_8
      IL_0095:  ble.s      IL_0047

      IL_0097:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> SpellChecker.App::__ENCList
      IL_009c:  ldloc.0
      IL_009d:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> SpellChecker.App::__ENCList
      IL_00a2:  callvirt   instance int32 class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::get_Count()
      IL_00a7:  ldloc.0
      IL_00a8:  sub.ovf
      IL_00a9:  callvirt   instance void class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::RemoveRange(int32,
                                                                                                                                              int32)
      IL_00ae:  nop
      IL_00af:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> SpellChecker.App::__ENCList
      IL_00b4:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> SpellChecker.App::__ENCList
      IL_00b9:  callvirt   instance int32 class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::get_Count()
      IL_00be:  callvirt   instance void class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::set_Capacity(int32)
      IL_00c3:  nop
      IL_00c4:  nop
      IL_00c5:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> SpellChecker.App::__ENCList
      IL_00ca:  ldarg.0
      IL_00cb:  call       object [mscorlib]System.Runtime.CompilerServices.RuntimeHelpers::GetObjectValue(object)
      IL_00d0:  newobj     instance void [mscorlib]System.WeakReference::.ctor(object)
      IL_00d5:  callvirt   instance void class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::Add(!0)
      IL_00da:  nop
      IL_00db:  nop
      IL_00dc:  leave.s    IL_00f0

    }  // end .try
    finally
    {
      IL_00de:  nop
      IL_00df:  ldloc.s    V_4
      IL_00e1:  stloc.s    V_7
      IL_00e3:  ldloc.s    V_7
      IL_00e5:  brfalse.s  IL_00ee

      IL_00e7:  ldloc.3
      IL_00e8:  call       void [mscorlib]System.Threading.Monitor::Exit(object)
      IL_00ed:  nop
      IL_00ee:  nop
      IL_00ef:  endfinally
    }  // end handler
    IL_00f0:  nop
    IL_00f1:  nop
    IL_00f2:  ret
  } // end of method App::__ENCAddToList

  .method public instance void  InitializeComponent() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       21 (0x15)
    .maxstack  8
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\obj\Debug\Application.g.vb' 
//000049:         Public Sub InitializeComponent()
    IL_0000:  nop
//000050:             
//000051:             #ExternalSource("..\..\Application.xaml",4)
//000052:             Me.StartupUri = New System.Uri("Window1.xaml", System.UriKind.Relative)
    IL_0001:  ldarg.0
    IL_0002:  ldstr      "Window1.xaml"
    IL_0007:  ldc.i4.2
    IL_0008:  newobj     instance void [System]System.Uri::.ctor(string,
                                                                 valuetype [System]System.UriKind)
    IL_000d:  callvirt   instance void [PresentationFramework]System.Windows.Application::set_StartupUri(class [System]System.Uri)
    IL_0012:  nop
//000053:             
//000054:             #End ExternalSource
//000055:         End Sub
    IL_0013:  nop
    IL_0014:  ret
  } // end of method App::InitializeComponent

  .method public static void  Main() cil managed
  {
    .entrypoint
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [mscorlib]System.STAThreadAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       23 (0x17)
    .maxstack  1
    .locals init ([0] class SpellChecker.App app)
//000056:         
//000057:         '''<summary>
//000058:         '''Application Entry Point.
//000059:         '''</summary>
//000060:         <System.STAThreadAttribute(),  _
//000061:          System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
//000062:         Public Shared Sub Main()
    IL_0000:  nop
//000063:             Dim app As SpellChecker.App = New SpellChecker.App()
    IL_0001:  newobj     instance void SpellChecker.App::.ctor()
    IL_0006:  stloc.0
//000064:             app.InitializeComponent
    IL_0007:  ldloc.0
    IL_0008:  callvirt   instance void SpellChecker.App::InitializeComponent()
    IL_000d:  nop
//000065:             app.Run
    IL_000e:  ldloc.0
    IL_000f:  callvirt   instance int32 [PresentationFramework]System.Windows.Application::Run()
    IL_0014:  pop
//000066:         End Sub
    IL_0015:  nop
    IL_0016:  ret
  } // end of method App::Main

} // end of class SpellChecker.App

.class private auto ansi sealed My.Resources.Resources
       extends [mscorlib]System.Object
{
  .custom instance void [System]System.CodeDom.Compiler.GeneratedCodeAttribute::.ctor(string,
                                                                                      string) = ( 01 00 33 53 79 73 74 65 6D 2E 52 65 73 6F 75 72   // ..3System.Resour
                                                                                                  63 65 73 2E 54 6F 6F 6C 73 2E 53 74 72 6F 6E 67   // ces.Tools.Strong
                                                                                                  6C 79 54 79 70 65 64 52 65 73 6F 75 72 63 65 42   // lyTypedResourceB
                                                                                                  75 69 6C 64 65 72 07 34 2E 30 2E 30 2E 30 00 00 ) // uilder.4.0.0.0..
  .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
  .custom instance void [Microsoft.VisualBasic]Microsoft.VisualBasic.CompilerServices.StandardModuleAttribute::.ctor() = ( 01 00 00 00 ) 
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
  .custom instance void [Microsoft.VisualBasic]Microsoft.VisualBasic.HideModuleNameAttribute::.ctor() = ( 01 00 00 00 ) 
  .field private static class [mscorlib]System.Resources.ResourceManager resourceMan
  .field private static class [mscorlib]System.Globalization.CultureInfo resourceCulture
  .method assembly specialname static class [mscorlib]System.Resources.ResourceManager 
          get_ResourceManager() cil managed
  {
    // Code size       59 (0x3b)
    .maxstack  2
    .locals init ([0] class [mscorlib]System.Resources.ResourceManager ResourceManager,
             [1] class [mscorlib]System.Resources.ResourceManager temp,
             [2] bool VB$CG$t_bool$S0)
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\My Project\Resources.Designer.vb' 
//000041:             Get
    IL_0000:  nop
//000042:                 If Object.ReferenceEquals(resourceMan, Nothing) Then
    IL_0001:  ldsfld     class [mscorlib]System.Resources.ResourceManager My.Resources.Resources::resourceMan
    IL_0006:  ldnull
    IL_0007:  call       bool [mscorlib]System.Object::ReferenceEquals(object,
                                                                       object)
    IL_000c:  stloc.2
//000043:                     Dim temp As New Global.System.Resources.ResourceManager("Resources", GetType(Resources).Assembly)
//000044:                     resourceMan = temp
//000045:                 End If
//000046:                 Return resourceMan
//000047:             End Get
//000048:         End Property
//000049: 
//000050:         ''' <summary>
//000051:         '''   Overrides the current thread's CurrentUICulture property for all
//000052:         '''   resource lookups using this strongly typed resource class.
//000053:         ''' </summary>
//000054:         <Global.System.ComponentModel.EditorBrowsableAttribute(Global.System.ComponentModel.EditorBrowsableState.Advanced)>
//000055:         Friend Property Culture() As Global.System.Globalization.CultureInfo
//000056:             Get
//000057:                 Return resourceCulture
//000058:             End Get
//000059:             Set(ByVal value As System.Globalization.CultureInfo)
//000060:                 resourceCulture = value
//000061:             End Set
//000062:         End Property
//000063:     End Module
//000064: End Namespace
    IL_000d:  ldloc.2
    IL_000e:  brfalse.s  IL_0030

//000043:                     Dim temp As New Global.System.Resources.ResourceManager("Resources", GetType(Resources).Assembly)
    IL_0010:  ldstr      "Resources"
    IL_0015:  ldtoken    My.Resources.Resources
    IL_001a:  call       class [mscorlib]System.Type [mscorlib]System.Type::GetTypeFromHandle(valuetype [mscorlib]System.RuntimeTypeHandle)
    IL_001f:  callvirt   instance class [mscorlib]System.Reflection.Assembly [mscorlib]System.Type::get_Assembly()
    IL_0024:  newobj     instance void [mscorlib]System.Resources.ResourceManager::.ctor(string,
                                                                                         class [mscorlib]System.Reflection.Assembly)
    IL_0029:  stloc.1
//000044:                     resourceMan = temp
    IL_002a:  ldloc.1
    IL_002b:  stsfld     class [mscorlib]System.Resources.ResourceManager My.Resources.Resources::resourceMan
//000045:                 End If
    IL_0030:  nop
//000046:                 Return resourceMan
    IL_0031:  ldsfld     class [mscorlib]System.Resources.ResourceManager My.Resources.Resources::resourceMan
    IL_0036:  stloc.0
    IL_0037:  br.s       IL_0039

//000047:             End Get
    IL_0039:  ldloc.0
    IL_003a:  ret
  } // end of method Resources::get_ResourceManager

  .method assembly specialname static class [mscorlib]System.Globalization.CultureInfo 
          get_Culture() cil managed
  {
    // Code size       11 (0xb)
    .maxstack  1
    .locals init ([0] class [mscorlib]System.Globalization.CultureInfo Culture)
//000048:         End Property
//000049: 
//000050:         ''' <summary>
//000051:         '''   Overrides the current thread's CurrentUICulture property for all
//000052:         '''   resource lookups using this strongly typed resource class.
//000053:         ''' </summary>
//000054:         <Global.System.ComponentModel.EditorBrowsableAttribute(Global.System.ComponentModel.EditorBrowsableState.Advanced)>
//000055:         Friend Property Culture() As Global.System.Globalization.CultureInfo
//000056:             Get
    IL_0000:  nop
//000057:                 Return resourceCulture
    IL_0001:  ldsfld     class [mscorlib]System.Globalization.CultureInfo My.Resources.Resources::resourceCulture
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

//000058:             End Get
    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method Resources::get_Culture

  .method assembly specialname static void 
          set_Culture(class [mscorlib]System.Globalization.CultureInfo 'value') cil managed
  {
    // Code size       9 (0x9)
    .maxstack  8
//000059:             Set(ByVal value As System.Globalization.CultureInfo)
    IL_0000:  nop
//000060:                 resourceCulture = value
    IL_0001:  ldarg.0
    IL_0002:  stsfld     class [mscorlib]System.Globalization.CultureInfo My.Resources.Resources::resourceCulture
//000061:             End Set
    IL_0007:  nop
    IL_0008:  ret
  } // end of method Resources::set_Culture

  .property class [mscorlib]System.Resources.ResourceManager
          ResourceManager()
  {
    .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 02 00 00 00 00 00 ) 
    .get class [mscorlib]System.Resources.ResourceManager My.Resources.Resources::get_ResourceManager()
  } // end of property Resources::ResourceManager
  .property class [mscorlib]System.Globalization.CultureInfo
          Culture()
  {
    .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 02 00 00 00 00 00 ) 
    .get class [mscorlib]System.Globalization.CultureInfo My.Resources.Resources::get_Culture()
    .set void My.Resources.Resources::set_Culture(class [mscorlib]System.Globalization.CultureInfo)
  } // end of property Resources::Culture
} // end of class My.Resources.Resources

.class private auto ansi sealed beforefieldinit My.Settings
       extends [System]System.Configuration.ApplicationSettingsBase
{
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
  .custom instance void [System]System.CodeDom.Compiler.GeneratedCodeAttribute::.ctor(string,
                                                                                      string) = ( 01 00 4B 4D 69 63 72 6F 73 6F 66 74 2E 56 69 73   // ..KMicrosoft.Vis
                                                                                                  75 61 6C 53 74 75 64 69 6F 2E 45 64 69 74 6F 72   // ualStudio.Editor
                                                                                                  73 2E 53 65 74 74 69 6E 67 73 44 65 73 69 67 6E   // s.SettingsDesign
                                                                                                  65 72 2E 53 65 74 74 69 6E 67 73 53 69 6E 67 6C   // er.SettingsSingl
                                                                                                  65 46 69 6C 65 47 65 6E 65 72 61 74 6F 72 08 31   // eFileGenerator.1
                                                                                                  30 2E 30 2E 30 2E 30 00 00 )                      // 0.0.0.0..
  .field private static class My.Settings defaultInstance
  .method private specialname rtspecialname static 
          void  .cctor() cil managed
  {
    // Code size       22 (0x16)
    .maxstack  8
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\My Project\Settings.Designer.vb' 
//000017:         Private Shared defaultInstance As Settings = (CType(Global.System.Configuration.ApplicationSettingsBase.Synchronized(New Settings()), Settings))
    IL_0000:  newobj     instance void My.Settings::.ctor()
    IL_0005:  call       class [System]System.Configuration.SettingsBase [System]System.Configuration.SettingsBase::Synchronized(class [System]System.Configuration.SettingsBase)
    IL_000a:  castclass  My.Settings
    IL_000f:  stsfld     class My.Settings My.Settings::defaultInstance
    IL_0014:  nop
    IL_0015:  ret
  } // end of method Settings::.cctor

  .method public specialname rtspecialname 
          instance void  .ctor() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       9 (0x9)
    .maxstack  8
    IL_0000:  ldarg.0
    IL_0001:  call       instance void [System]System.Configuration.ApplicationSettingsBase::.ctor()
    IL_0006:  nop
    IL_0007:  nop
    IL_0008:  ret
  } // end of method Settings::.ctor

  .method public specialname static class My.Settings 
          get_Default() cil managed
  {
    // Code size       11 (0xb)
    .maxstack  1
    .locals init ([0] class My.Settings Default)
//000018: 
//000019: 		Public Shared ReadOnly Property [Default]() As Settings
//000020: 			Get
    IL_0000:  nop
//000021: 				Return defaultInstance
    IL_0001:  ldsfld     class My.Settings My.Settings::defaultInstance
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

//000022: 			End Get
    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method Settings::get_Default

  .property class My.Settings Default()
  {
    .get class My.Settings My.Settings::get_Default()
  } // end of property Settings::Default
} // end of class My.Settings

.class public auto ansi beforefieldinit SpellChecker.Window1
       extends [PresentationFramework]System.Windows.Window
       implements [System.Xaml]System.Windows.Markup.IComponentConnector
{
  .custom instance void [System]System.CodeDom.Compiler.GeneratedCodeAttribute::.ctor(string,
                                                                                      string) = ( 01 00 16 50 72 65 73 65 6E 74 61 74 69 6F 6E 42   // ...PresentationB
                                                                                                  75 69 6C 64 54 61 73 6B 73 07 34 2E 30 2E 30 2E   // uildTasks.4.0.0.
                                                                                                  30 00 00 )                                        // 0..
  .custom instance void [Microsoft.VisualBasic]Microsoft.VisualBasic.CompilerServices.DesignerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
  .class auto ansi nested assembly _Closure$__1
         extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .field public class [PresentationFramework]Microsoft.Win32.OpenFileDialog $VB$Local_ofd
    .field public class SpellChecker.Window1 $VB$Me
    .method public specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       9 (0x9)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  nop
      IL_0007:  nop
      IL_0008:  ret
    } // end of method _Closure$__1::.ctor

    .method public specialname rtspecialname 
            instance void  .ctor(class SpellChecker.Window1/_Closure$__1 other) cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       45 (0x2d)
      .maxstack  2
      .locals init (bool V_0)
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  nop
      IL_0007:  ldarg.1
      IL_0008:  ldnull
      IL_0009:  ceq
      IL_000b:  ldc.i4.0
      IL_000c:  ceq
      IL_000e:  stloc.0
      IL_000f:  ldloc.0
      IL_0010:  brfalse.s  IL_002a

      IL_0012:  ldarg.0
      IL_0013:  ldarg.1
      IL_0014:  ldfld      class [PresentationFramework]Microsoft.Win32.OpenFileDialog SpellChecker.Window1/_Closure$__1::$VB$Local_ofd
      IL_0019:  stfld      class [PresentationFramework]Microsoft.Win32.OpenFileDialog SpellChecker.Window1/_Closure$__1::$VB$Local_ofd
      IL_001e:  ldarg.0
      IL_001f:  ldarg.1
      IL_0020:  ldfld      class SpellChecker.Window1 SpellChecker.Window1/_Closure$__1::$VB$Me
      IL_0025:  stfld      class SpellChecker.Window1 SpellChecker.Window1/_Closure$__1::$VB$Me
      IL_002a:  nop
      IL_002b:  nop
      IL_002c:  ret
    } // end of method _Closure$__1::.ctor

    .method public specialname instance void 
            _Lambda$__2() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       179 (0xb3)
      .maxstack  2
      .locals init ([0] class [mscorlib]System.IO.StreamReader reader,
               [1] string line,
               [2] string word,
               [3] bool VB$CG$t_bool$S0)
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\Window1.xaml.vb' 
//000038:                 Task.Factory.StartNew(Sub()
      IL_0000:  nop
//000039:                                           _words = New List(Of String)(200000)
      IL_0001:  ldarg.0
      IL_0002:  ldfld      class SpellChecker.Window1 SpellChecker.Window1/_Closure$__1::$VB$Me
      IL_0007:  ldc.i4     0x30d40
      IL_000c:  newobj     instance void class [mscorlib]System.Collections.Generic.List`1<string>::.ctor(int32)
      IL_0011:  stfld      class [mscorlib]System.Collections.Generic.List`1<string> SpellChecker.Window1::_words
//000040:                                           Using reader As New StreamReader(ofd.FileName)
      IL_0016:  nop
      IL_0017:  ldarg.0
      IL_0018:  ldfld      class [PresentationFramework]Microsoft.Win32.OpenFileDialog SpellChecker.Window1/_Closure$__1::$VB$Local_ofd
      IL_001d:  callvirt   instance string [PresentationFramework]Microsoft.Win32.FileDialog::get_FileName()
      IL_0022:  newobj     instance void [mscorlib]System.IO.StreamReader::.ctor(string)
      IL_0027:  stloc.0
//000041:                                               Dim line As String
//000042:                                               line = reader.ReadLine()
//000043:                                               Do While line IsNot Nothing
//000044:                                                   Dim word = line.Trim().ToLower()
//000045:                                                   If Not String.IsNullOrEmpty(word) Then
//000046:                                                       _words.Add(word)
//000047:                                                       If word.Length > _maxWordLength Then
//000048:                                                           _maxWordLength = word.Length
//000049:                                                       End If
//000050:                                                   End If
//000051:                                                   line = reader.ReadLine()
//000052:                                               Loop
//000053:                                           End Using
//000054:                                       End Sub).
//000055:                                   ContinueWith(Sub(t)
//000056:                                                    txtInput.IsEnabled = True
//000057:                                                    chkParallel.IsEnabled = True
//000058:                                                    If t.IsFaulted Then
//000059:                                                        MsgBox(t.Exception.ToString())
//000060:                                                    Else
//000061:                                                        MakeSuggestions()
//000062:                                                    End If
//000063:                                                End Sub, TaskScheduler.FromCurrentSynchronizationContext())
//000064:             
//000065:             End If
//000066: 
//000067: 		End Sub
//000068: 
//000069: 		''' <summary>Redo the suggestions when the text changes.</summary>
//000070: 		Private Sub txtInput_TextChanged(ByVal sender As Object, ByVal e As TextChangedEventArgs)
//000071: 			MakeSuggestions()
//000072: 		End Sub
//000073: 
//000074: 		''' <summary>Redo the suggestions when parallel vs non-parallel changes.</summary>
//000075: 		Private Sub chkParallel_CheckedChanged(ByVal sender As Object, ByVal e As RoutedEventArgs)
//000076: 			MakeSuggestions()
//000077: 		End Sub
//000078: 
//000079:         '' <summary>Asynchronous make suggestions for correct spellings of the provided word.</summary>
//000080: 
//000081:         Private Sub MakeSuggestions()
//000082:             ' Limit the number of suggestions.
//000083:             Const NUM_SUGGESTIONS = 25
//000084: 
//000085:             ' Run serially or in parallel.
//000086:             Dim sequential = Not (chkParallel.IsChecked.HasValue AndAlso chkParallel.IsChecked.Value)
//000087:             Dim text = txtInput.Text
//000088: 
//000089:             ' If there's no text to evaluate, just bail.
//000090:             If String.IsNullOrEmpty(text) Then
//000091:                 listBox1.ItemsSource = Nothing
//000092:                 Return
//000093:             End If
//000094: 
//000095:             ' Every time the text is changed, we want to cancel the previous operation.
//000096:             If _cancellation IsNot Nothing Then
//000097:                 _cancellation.Cancel()
//000098:             End If
//000099:             _cancellation = New CancellationTokenSource()
//000100:             Dim token = _cancellation.Token
//000101: 
//000102:             ' Time the operation and kick it off.
//000103:             Dim sw = Stopwatch.StartNew()
//000104: 
//000105:             Task.Factory.StartNew(Function()
//000106:                                       ' Return both the spelling suggestions and the elapsed time
//000107:                                       Dim results As List(Of String) = Nothing
//000108:                                       If sequential Then
//000109:                                           Dim distanceMatrix = New Integer(_maxWordLength, _maxWordLength) {}
//000110:                                           results = _words.
//000111:                                               Select(Function(word) New With {Key .Word = word, Key .Distance = LevenshteinDistance(word, text, distanceMatrix)}).
//000112:                                               OrderBy(Function(p) p.Distance).
//000113:                                               Take(NUM_SUGGESTIONS).
//000114:                                               Select(Function(p) p.Word).
//000115:                                               ToList()
//000116:                                       Else
//000117:                                           Using distanceMatrix = New ThreadLocal(Of Integer(,))(Function() New Integer(_maxWordLength, _maxWordLength) {})
//000118:                                               results = _words.AsParallel().WithCancellation(token).
//000119:                                                   Select(Function(word) New With {Key .Word = word, .Distance = LevenshteinDistance(word, text, distanceMatrix.Value)}).
//000120:                                                   TakeTop(Function(p) p.Distance, NUM_SUGGESTIONS).
//000121:                                                   Select(Function(p) p.Word).
//000122:                                                   ToList()
//000123:                                           End Using
//000124:                                       End If
//000125:                                       sw.Stop()
//000126:                                       Return New With {.Results = results, .Time = sw.Elapsed}
//000127:                                   End Function, token).ContinueWith(Sub(t)
//000128:                                                                         listBox1.ItemsSource =
//000129:                                                                             t.Result.Results.[Select](Function(str, i) String.Format("{0,2}. {1}", i + 1, str))
//000130:                                                                         lblTime.Content = Convert.ToString("Sec: ") & Convert.ToString(t.Result.Time)
//000131:                                                                     End Sub, CancellationToken.None, TaskContinuationOptions.NotOnCanceled,
//000132:                                                                     TaskScheduler.FromCurrentSynchronizationContext)
//000133:         End Sub
//000134: 
//000135:         
//000136:         ''' <summary>Computes the Levenshtein Edit Distance between two enumerables.</summary>
//000137:         ''' <param name="str1">The first string.</param>
//000138:         ''' <param name="str2">The second string.</param>
//000139:         ''' <param name="scratchDistanceMatrix">Scratch space to use for the computation.</param>
//000140:         ''' <returns>The computed edit distance.</returns>
//000141:         Private Shared Function LevenshteinDistance(ByVal str1 As String, ByVal str2 As String, ByVal scratchDistanceMatrix(,) As Integer) As Integer
//000142:             ' Distance matrix contains one extra row and column for the seed values.            
//000143:             For i = 0 To str1.Length
//000144:                 scratchDistanceMatrix(i, 0) = i
//000145:             Next i
//000146:             For j = 0 To str2.Length
//000147:                 scratchDistanceMatrix(0, j) = j
//000148:             Next j
//000149: 
//000150:             For i = 1 To str1.Length
//000151:                 Dim str1Index = i - 1
//000152:                 For j = 1 To str2.Length
//000153:                     Dim str2Index = j - 1
//000154:                     Dim cost = If((str1.Chars(str1Index) = str2.Chars(str2Index)), 0, 1)
//000155: 
//000156:                     Dim deletion = If((i = 0), 1, scratchDistanceMatrix(i - 1, j) + 1)
//000157:                     Dim insertion = If((j = 0), 1, scratchDistanceMatrix(i, j - 1) + 1)
//000158:                     Dim substitution = If((i = 0 OrElse j = 0), cost, scratchDistanceMatrix(i - 1, j - 1) + cost)
//000159: 
//000160:                     scratchDistanceMatrix(i, j) = Math.Min(Math.Min(deletion, insertion), substitution)
//000161: 
//000162:                     ' Check for Transposition.
//000163:                     If i > 1 AndAlso j > 1 AndAlso (str1.Chars(str1Index) = str2.Chars(str2Index - 1)) AndAlso (str1.Chars(str1Index - 1) = str2.Chars(str2Index)) Then
//000164:                         scratchDistanceMatrix(i, j) = Math.Min(scratchDistanceMatrix(i, j), scratchDistanceMatrix(i - 2, j - 2) + cost)
//000165:                     End If
//000166:                 Next j
//000167:             Next i
//000168: 
//000169:             ' Levenshtein distance is the bottom right element.
//000170:             Return scratchDistanceMatrix(str1.Length, str2.Length)
//000171:         End Function
//000172:     End Class
//000173: End Namespace
      IL_0028:  nop
//000042:                                               line = reader.ReadLine()
      .try
      {
        IL_0029:  ldloc.0
        IL_002a:  callvirt   instance string [mscorlib]System.IO.StreamReader::ReadLine()
        IL_002f:  stloc.1
//000043:                                               Do While line IsNot Nothing
//000044:                                                   Dim word = line.Trim().ToLower()
//000045:                                                   If Not String.IsNullOrEmpty(word) Then
//000046:                                                       _words.Add(word)
//000047:                                                       If word.Length > _maxWordLength Then
//000048:                                                           _maxWordLength = word.Length
//000049:                                                       End If
//000050:                                                   End If
//000051:                                                   line = reader.ReadLine()
//000052:                                               Loop
//000053:                                           End Using
//000054:                                       End Sub).
//000055:                                   ContinueWith(Sub(t)
//000056:                                                    txtInput.IsEnabled = True
//000057:                                                    chkParallel.IsEnabled = True
//000058:                                                    If t.IsFaulted Then
//000059:                                                        MsgBox(t.Exception.ToString())
//000060:                                                    Else
//000061:                                                        MakeSuggestions()
//000062:                                                    End If
//000063:                                                End Sub, TaskScheduler.FromCurrentSynchronizationContext())
//000064:             
//000065:             End If
//000066: 
//000067: 		End Sub
//000068: 
//000069: 		''' <summary>Redo the suggestions when the text changes.</summary>
//000070: 		Private Sub txtInput_TextChanged(ByVal sender As Object, ByVal e As TextChangedEventArgs)
//000071: 			MakeSuggestions()
//000072: 		End Sub
//000073: 
//000074: 		''' <summary>Redo the suggestions when parallel vs non-parallel changes.</summary>
//000075: 		Private Sub chkParallel_CheckedChanged(ByVal sender As Object, ByVal e As RoutedEventArgs)
//000076: 			MakeSuggestions()
//000077: 		End Sub
//000078: 
//000079:         '' <summary>Asynchronous make suggestions for correct spellings of the provided word.</summary>
//000080: 
//000081:         Private Sub MakeSuggestions()
//000082:             ' Limit the number of suggestions.
//000083:             Const NUM_SUGGESTIONS = 25
//000084: 
//000085:             ' Run serially or in parallel.
//000086:             Dim sequential = Not (chkParallel.IsChecked.HasValue AndAlso chkParallel.IsChecked.Value)
//000087:             Dim text = txtInput.Text
//000088: 
//000089:             ' If there's no text to evaluate, just bail.
//000090:             If String.IsNullOrEmpty(text) Then
//000091:                 listBox1.ItemsSource = Nothing
//000092:                 Return
//000093:             End If
//000094: 
//000095:             ' Every time the text is changed, we want to cancel the previous operation.
//000096:             If _cancellation IsNot Nothing Then
//000097:                 _cancellation.Cancel()
//000098:             End If
//000099:             _cancellation = New CancellationTokenSource()
//000100:             Dim token = _cancellation.Token
//000101: 
//000102:             ' Time the operation and kick it off.
//000103:             Dim sw = Stopwatch.StartNew()
//000104: 
//000105:             Task.Factory.StartNew(Function()
//000106:                                       ' Return both the spelling suggestions and the elapsed time
//000107:                                       Dim results As List(Of String) = Nothing
//000108:                                       If sequential Then
//000109:                                           Dim distanceMatrix = New Integer(_maxWordLength, _maxWordLength) {}
//000110:                                           results = _words.
//000111:                                               Select(Function(word) New With {Key .Word = word, Key .Distance = LevenshteinDistance(word, text, distanceMatrix)}).
//000112:                                               OrderBy(Function(p) p.Distance).
//000113:                                               Take(NUM_SUGGESTIONS).
//000114:                                               Select(Function(p) p.Word).
//000115:                                               ToList()
//000116:                                       Else
//000117:                                           Using distanceMatrix = New ThreadLocal(Of Integer(,))(Function() New Integer(_maxWordLength, _maxWordLength) {})
//000118:                                               results = _words.AsParallel().WithCancellation(token).
//000119:                                                   Select(Function(word) New With {Key .Word = word, .Distance = LevenshteinDistance(word, text, distanceMatrix.Value)}).
//000120:                                                   TakeTop(Function(p) p.Distance, NUM_SUGGESTIONS).
//000121:                                                   Select(Function(p) p.Word).
//000122:                                                   ToList()
//000123:                                           End Using
//000124:                                       End If
//000125:                                       sw.Stop()
//000126:                                       Return New With {.Results = results, .Time = sw.Elapsed}
//000127:                                   End Function, token).ContinueWith(Sub(t)
//000128:                                                                         listBox1.ItemsSource =
//000129:                                                                             t.Result.Results.[Select](Function(str, i) String.Format("{0,2}. {1}", i + 1, str))
//000130:                                                                         lblTime.Content = Convert.ToString("Sec: ") & Convert.ToString(t.Result.Time)
//000131:                                                                     End Sub, CancellationToken.None, TaskContinuationOptions.NotOnCanceled,
//000132:                                                                     TaskScheduler.FromCurrentSynchronizationContext)
//000133:         End Sub
//000134: 
//000135:         
//000136:         ''' <summary>Computes the Levenshtein Edit Distance between two enumerables.</summary>
//000137:         ''' <param name="str1">The first string.</param>
//000138:         ''' <param name="str2">The second string.</param>
//000139:         ''' <param name="scratchDistanceMatrix">Scratch space to use for the computation.</param>
//000140:         ''' <returns>The computed edit distance.</returns>
//000141:         Private Shared Function LevenshteinDistance(ByVal str1 As String, ByVal str2 As String, ByVal scratchDistanceMatrix(,) As Integer) As Integer
//000142:             ' Distance matrix contains one extra row and column for the seed values.            
//000143:             For i = 0 To str1.Length
//000144:                 scratchDistanceMatrix(i, 0) = i
//000145:             Next i
//000146:             For j = 0 To str2.Length
//000147:                 scratchDistanceMatrix(0, j) = j
//000148:             Next j
//000149: 
//000150:             For i = 1 To str1.Length
//000151:                 Dim str1Index = i - 1
//000152:                 For j = 1 To str2.Length
//000153:                     Dim str2Index = j - 1
//000154:                     Dim cost = If((str1.Chars(str1Index) = str2.Chars(str2Index)), 0, 1)
//000155: 
//000156:                     Dim deletion = If((i = 0), 1, scratchDistanceMatrix(i - 1, j) + 1)
//000157:                     Dim insertion = If((j = 0), 1, scratchDistanceMatrix(i, j - 1) + 1)
//000158:                     Dim substitution = If((i = 0 OrElse j = 0), cost, scratchDistanceMatrix(i - 1, j - 1) + cost)
//000159: 
//000160:                     scratchDistanceMatrix(i, j) = Math.Min(Math.Min(deletion, insertion), substitution)
//000161: 
//000162:                     ' Check for Transposition.
//000163:                     If i > 1 AndAlso j > 1 AndAlso (str1.Chars(str1Index) = str2.Chars(str2Index - 1)) AndAlso (str1.Chars(str1Index - 1) = str2.Chars(str2Index)) Then
//000164:                         scratchDistanceMatrix(i, j) = Math.Min(scratchDistanceMatrix(i, j), scratchDistanceMatrix(i - 2, j - 2) + cost)
//000165:                     End If
//000166:                 Next j
//000167:             Next i
//000168: 
//000169:             ' Levenshtein distance is the bottom right element.
//000170:             Return scratchDistanceMatrix(str1.Length, str2.Length)
//000171:         End Function
//000172:     End Class
//000173: End Namespace
        IL_0030:  br.s       IL_008f

//000044:                                                   Dim word = line.Trim().ToLower()
        IL_0032:  ldloc.1
        IL_0033:  callvirt   instance string [mscorlib]System.String::Trim()
        IL_0038:  callvirt   instance string [mscorlib]System.String::ToLower()
        IL_003d:  stloc.2
//000045:                                                   If Not String.IsNullOrEmpty(word) Then
        IL_003e:  ldloc.2
        IL_003f:  call       bool [mscorlib]System.String::IsNullOrEmpty(string)
        IL_0044:  ldc.i4.0
        IL_0045:  ceq
        IL_0047:  stloc.3
//000046:                                                       _words.Add(word)
//000047:                                                       If word.Length > _maxWordLength Then
//000048:                                                           _maxWordLength = word.Length
//000049:                                                       End If
//000050:                                                   End If
//000051:                                                   line = reader.ReadLine()
//000052:                                               Loop
//000053:                                           End Using
//000054:                                       End Sub).
//000055:                                   ContinueWith(Sub(t)
//000056:                                                    txtInput.IsEnabled = True
//000057:                                                    chkParallel.IsEnabled = True
//000058:                                                    If t.IsFaulted Then
//000059:                                                        MsgBox(t.Exception.ToString())
//000060:                                                    Else
//000061:                                                        MakeSuggestions()
//000062:                                                    End If
//000063:                                                End Sub, TaskScheduler.FromCurrentSynchronizationContext())
//000064:             
//000065:             End If
//000066: 
//000067: 		End Sub
//000068: 
//000069: 		''' <summary>Redo the suggestions when the text changes.</summary>
//000070: 		Private Sub txtInput_TextChanged(ByVal sender As Object, ByVal e As TextChangedEventArgs)
//000071: 			MakeSuggestions()
//000072: 		End Sub
//000073: 
//000074: 		''' <summary>Redo the suggestions when parallel vs non-parallel changes.</summary>
//000075: 		Private Sub chkParallel_CheckedChanged(ByVal sender As Object, ByVal e As RoutedEventArgs)
//000076: 			MakeSuggestions()
//000077: 		End Sub
//000078: 
//000079:         '' <summary>Asynchronous make suggestions for correct spellings of the provided word.</summary>
//000080: 
//000081:         Private Sub MakeSuggestions()
//000082:             ' Limit the number of suggestions.
//000083:             Const NUM_SUGGESTIONS = 25
//000084: 
//000085:             ' Run serially or in parallel.
//000086:             Dim sequential = Not (chkParallel.IsChecked.HasValue AndAlso chkParallel.IsChecked.Value)
//000087:             Dim text = txtInput.Text
//000088: 
//000089:             ' If there's no text to evaluate, just bail.
//000090:             If String.IsNullOrEmpty(text) Then
//000091:                 listBox1.ItemsSource = Nothing
//000092:                 Return
//000093:             End If
//000094: 
//000095:             ' Every time the text is changed, we want to cancel the previous operation.
//000096:             If _cancellation IsNot Nothing Then
//000097:                 _cancellation.Cancel()
//000098:             End If
//000099:             _cancellation = New CancellationTokenSource()
//000100:             Dim token = _cancellation.Token
//000101: 
//000102:             ' Time the operation and kick it off.
//000103:             Dim sw = Stopwatch.StartNew()
//000104: 
//000105:             Task.Factory.StartNew(Function()
//000106:                                       ' Return both the spelling suggestions and the elapsed time
//000107:                                       Dim results As List(Of String) = Nothing
//000108:                                       If sequential Then
//000109:                                           Dim distanceMatrix = New Integer(_maxWordLength, _maxWordLength) {}
//000110:                                           results = _words.
//000111:                                               Select(Function(word) New With {Key .Word = word, Key .Distance = LevenshteinDistance(word, text, distanceMatrix)}).
//000112:                                               OrderBy(Function(p) p.Distance).
//000113:                                               Take(NUM_SUGGESTIONS).
//000114:                                               Select(Function(p) p.Word).
//000115:                                               ToList()
//000116:                                       Else
//000117:                                           Using distanceMatrix = New ThreadLocal(Of Integer(,))(Function() New Integer(_maxWordLength, _maxWordLength) {})
//000118:                                               results = _words.AsParallel().WithCancellation(token).
//000119:                                                   Select(Function(word) New With {Key .Word = word, .Distance = LevenshteinDistance(word, text, distanceMatrix.Value)}).
//000120:                                                   TakeTop(Function(p) p.Distance, NUM_SUGGESTIONS).
//000121:                                                   Select(Function(p) p.Word).
//000122:                                                   ToList()
//000123:                                           End Using
//000124:                                       End If
//000125:                                       sw.Stop()
//000126:                                       Return New With {.Results = results, .Time = sw.Elapsed}
//000127:                                   End Function, token).ContinueWith(Sub(t)
//000128:                                                                         listBox1.ItemsSource =
//000129:                                                                             t.Result.Results.[Select](Function(str, i) String.Format("{0,2}. {1}", i + 1, str))
//000130:                                                                         lblTime.Content = Convert.ToString("Sec: ") & Convert.ToString(t.Result.Time)
//000131:                                                                     End Sub, CancellationToken.None, TaskContinuationOptions.NotOnCanceled,
//000132:                                                                     TaskScheduler.FromCurrentSynchronizationContext)
//000133:         End Sub
//000134: 
//000135:         
//000136:         ''' <summary>Computes the Levenshtein Edit Distance between two enumerables.</summary>
//000137:         ''' <param name="str1">The first string.</param>
//000138:         ''' <param name="str2">The second string.</param>
//000139:         ''' <param name="scratchDistanceMatrix">Scratch space to use for the computation.</param>
//000140:         ''' <returns>The computed edit distance.</returns>
//000141:         Private Shared Function LevenshteinDistance(ByVal str1 As String, ByVal str2 As String, ByVal scratchDistanceMatrix(,) As Integer) As Integer
//000142:             ' Distance matrix contains one extra row and column for the seed values.            
//000143:             For i = 0 To str1.Length
//000144:                 scratchDistanceMatrix(i, 0) = i
//000145:             Next i
//000146:             For j = 0 To str2.Length
//000147:                 scratchDistanceMatrix(0, j) = j
//000148:             Next j
//000149: 
//000150:             For i = 1 To str1.Length
//000151:                 Dim str1Index = i - 1
//000152:                 For j = 1 To str2.Length
//000153:                     Dim str2Index = j - 1
//000154:                     Dim cost = If((str1.Chars(str1Index) = str2.Chars(str2Index)), 0, 1)
//000155: 
//000156:                     Dim deletion = If((i = 0), 1, scratchDistanceMatrix(i - 1, j) + 1)
//000157:                     Dim insertion = If((j = 0), 1, scratchDistanceMatrix(i, j - 1) + 1)
//000158:                     Dim substitution = If((i = 0 OrElse j = 0), cost, scratchDistanceMatrix(i - 1, j - 1) + cost)
//000159: 
//000160:                     scratchDistanceMatrix(i, j) = Math.Min(Math.Min(deletion, insertion), substitution)
//000161: 
//000162:                     ' Check for Transposition.
//000163:                     If i > 1 AndAlso j > 1 AndAlso (str1.Chars(str1Index) = str2.Chars(str2Index - 1)) AndAlso (str1.Chars(str1Index - 1) = str2.Chars(str2Index)) Then
//000164:                         scratchDistanceMatrix(i, j) = Math.Min(scratchDistanceMatrix(i, j), scratchDistanceMatrix(i - 2, j - 2) + cost)
//000165:                     End If
//000166:                 Next j
//000167:             Next i
//000168: 
//000169:             ' Levenshtein distance is the bottom right element.
//000170:             Return scratchDistanceMatrix(str1.Length, str2.Length)
//000171:         End Function
//000172:     End Class
//000173: End Namespace
        IL_0048:  ldloc.3
        IL_0049:  brfalse.s  IL_0086

//000046:                                                       _words.Add(word)
        IL_004b:  ldarg.0
        IL_004c:  ldfld      class SpellChecker.Window1 SpellChecker.Window1/_Closure$__1::$VB$Me
        IL_0051:  ldfld      class [mscorlib]System.Collections.Generic.List`1<string> SpellChecker.Window1::_words
        IL_0056:  ldloc.2
        IL_0057:  callvirt   instance void class [mscorlib]System.Collections.Generic.List`1<string>::Add(!0)
        IL_005c:  nop
//000047:                                                       If word.Length > _maxWordLength Then
        IL_005d:  ldloc.2
        IL_005e:  callvirt   instance int32 [mscorlib]System.String::get_Length()
        IL_0063:  ldarg.0
        IL_0064:  ldfld      class SpellChecker.Window1 SpellChecker.Window1/_Closure$__1::$VB$Me
        IL_0069:  ldfld      int32 SpellChecker.Window1::_maxWordLength
        IL_006e:  cgt
        IL_0070:  stloc.3
//000048:                                                           _maxWordLength = word.Length
//000049:                                                       End If
//000050:                                                   End If
//000051:                                                   line = reader.ReadLine()
//000052:                                               Loop
//000053:                                           End Using
//000054:                                       End Sub).
//000055:                                   ContinueWith(Sub(t)
//000056:                                                    txtInput.IsEnabled = True
//000057:                                                    chkParallel.IsEnabled = True
//000058:                                                    If t.IsFaulted Then
//000059:                                                        MsgBox(t.Exception.ToString())
//000060:                                                    Else
//000061:                                                        MakeSuggestions()
//000062:                                                    End If
//000063:                                                End Sub, TaskScheduler.FromCurrentSynchronizationContext())
//000064:             
//000065:             End If
//000066: 
//000067: 		End Sub
//000068: 
//000069: 		''' <summary>Redo the suggestions when the text changes.</summary>
//000070: 		Private Sub txtInput_TextChanged(ByVal sender As Object, ByVal e As TextChangedEventArgs)
//000071: 			MakeSuggestions()
//000072: 		End Sub
//000073: 
//000074: 		''' <summary>Redo the suggestions when parallel vs non-parallel changes.</summary>
//000075: 		Private Sub chkParallel_CheckedChanged(ByVal sender As Object, ByVal e As RoutedEventArgs)
//000076: 			MakeSuggestions()
//000077: 		End Sub
//000078: 
//000079:         '' <summary>Asynchronous make suggestions for correct spellings of the provided word.</summary>
//000080: 
//000081:         Private Sub MakeSuggestions()
//000082:             ' Limit the number of suggestions.
//000083:             Const NUM_SUGGESTIONS = 25
//000084: 
//000085:             ' Run serially or in parallel.
//000086:             Dim sequential = Not (chkParallel.IsChecked.HasValue AndAlso chkParallel.IsChecked.Value)
//000087:             Dim text = txtInput.Text
//000088: 
//000089:             ' If there's no text to evaluate, just bail.
//000090:             If String.IsNullOrEmpty(text) Then
//000091:                 listBox1.ItemsSource = Nothing
//000092:                 Return
//000093:             End If
//000094: 
//000095:             ' Every time the text is changed, we want to cancel the previous operation.
//000096:             If _cancellation IsNot Nothing Then
//000097:                 _cancellation.Cancel()
//000098:             End If
//000099:             _cancellation = New CancellationTokenSource()
//000100:             Dim token = _cancellation.Token
//000101: 
//000102:             ' Time the operation and kick it off.
//000103:             Dim sw = Stopwatch.StartNew()
//000104: 
//000105:             Task.Factory.StartNew(Function()
//000106:                                       ' Return both the spelling suggestions and the elapsed time
//000107:                                       Dim results As List(Of String) = Nothing
//000108:                                       If sequential Then
//000109:                                           Dim distanceMatrix = New Integer(_maxWordLength, _maxWordLength) {}
//000110:                                           results = _words.
//000111:                                               Select(Function(word) New With {Key .Word = word, Key .Distance = LevenshteinDistance(word, text, distanceMatrix)}).
//000112:                                               OrderBy(Function(p) p.Distance).
//000113:                                               Take(NUM_SUGGESTIONS).
//000114:                                               Select(Function(p) p.Word).
//000115:                                               ToList()
//000116:                                       Else
//000117:                                           Using distanceMatrix = New ThreadLocal(Of Integer(,))(Function() New Integer(_maxWordLength, _maxWordLength) {})
//000118:                                               results = _words.AsParallel().WithCancellation(token).
//000119:                                                   Select(Function(word) New With {Key .Word = word, .Distance = LevenshteinDistance(word, text, distanceMatrix.Value)}).
//000120:                                                   TakeTop(Function(p) p.Distance, NUM_SUGGESTIONS).
//000121:                                                   Select(Function(p) p.Word).
//000122:                                                   ToList()
//000123:                                           End Using
//000124:                                       End If
//000125:                                       sw.Stop()
//000126:                                       Return New With {.Results = results, .Time = sw.Elapsed}
//000127:                                   End Function, token).ContinueWith(Sub(t)
//000128:                                                                         listBox1.ItemsSource =
//000129:                                                                             t.Result.Results.[Select](Function(str, i) String.Format("{0,2}. {1}", i + 1, str))
//000130:                                                                         lblTime.Content = Convert.ToString("Sec: ") & Convert.ToString(t.Result.Time)
//000131:                                                                     End Sub, CancellationToken.None, TaskContinuationOptions.NotOnCanceled,
//000132:                                                                     TaskScheduler.FromCurrentSynchronizationContext)
//000133:         End Sub
//000134: 
//000135:         
//000136:         ''' <summary>Computes the Levenshtein Edit Distance between two enumerables.</summary>
//000137:         ''' <param name="str1">The first string.</param>
//000138:         ''' <param name="str2">The second string.</param>
//000139:         ''' <param name="scratchDistanceMatrix">Scratch space to use for the computation.</param>
//000140:         ''' <returns>The computed edit distance.</returns>
//000141:         Private Shared Function LevenshteinDistance(ByVal str1 As String, ByVal str2 As String, ByVal scratchDistanceMatrix(,) As Integer) As Integer
//000142:             ' Distance matrix contains one extra row and column for the seed values.            
//000143:             For i = 0 To str1.Length
//000144:                 scratchDistanceMatrix(i, 0) = i
//000145:             Next i
//000146:             For j = 0 To str2.Length
//000147:                 scratchDistanceMatrix(0, j) = j
//000148:             Next j
//000149: 
//000150:             For i = 1 To str1.Length
//000151:                 Dim str1Index = i - 1
//000152:                 For j = 1 To str2.Length
//000153:                     Dim str2Index = j - 1
//000154:                     Dim cost = If((str1.Chars(str1Index) = str2.Chars(str2Index)), 0, 1)
//000155: 
//000156:                     Dim deletion = If((i = 0), 1, scratchDistanceMatrix(i - 1, j) + 1)
//000157:                     Dim insertion = If((j = 0), 1, scratchDistanceMatrix(i, j - 1) + 1)
//000158:                     Dim substitution = If((i = 0 OrElse j = 0), cost, scratchDistanceMatrix(i - 1, j - 1) + cost)
//000159: 
//000160:                     scratchDistanceMatrix(i, j) = Math.Min(Math.Min(deletion, insertion), substitution)
//000161: 
//000162:                     ' Check for Transposition.
//000163:                     If i > 1 AndAlso j > 1 AndAlso (str1.Chars(str1Index) = str2.Chars(str2Index - 1)) AndAlso (str1.Chars(str1Index - 1) = str2.Chars(str2Index)) Then
//000164:                         scratchDistanceMatrix(i, j) = Math.Min(scratchDistanceMatrix(i, j), scratchDistanceMatrix(i - 2, j - 2) + cost)
//000165:                     End If
//000166:                 Next j
//000167:             Next i
//000168: 
//000169:             ' Levenshtein distance is the bottom right element.
//000170:             Return scratchDistanceMatrix(str1.Length, str2.Length)
//000171:         End Function
//000172:     End Class
//000173: End Namespace
        IL_0071:  ldloc.3
        IL_0072:  brfalse.s  IL_0085

//000048:                                                           _maxWordLength = word.Length
        IL_0074:  ldarg.0
        IL_0075:  ldfld      class SpellChecker.Window1 SpellChecker.Window1/_Closure$__1::$VB$Me
        IL_007a:  ldloc.2
        IL_007b:  callvirt   instance int32 [mscorlib]System.String::get_Length()
        IL_0080:  stfld      int32 SpellChecker.Window1::_maxWordLength
//000049:                                                       End If
        IL_0085:  nop
//000050:                                                   End If
        IL_0086:  nop
//000051:                                                   line = reader.ReadLine()
        IL_0087:  ldloc.0
        IL_0088:  callvirt   instance string [mscorlib]System.IO.StreamReader::ReadLine()
        IL_008d:  stloc.1
//000052:                                               Loop
        IL_008e:  nop
//000043:                                               Do While line IsNot Nothing
        IL_008f:  ldloc.1
        IL_0090:  ldnull
        IL_0091:  ceq
        IL_0093:  ldc.i4.0
        IL_0094:  ceq
        IL_0096:  stloc.3
//000044:                                                   Dim word = line.Trim().ToLower()
//000045:                                                   If Not String.IsNullOrEmpty(word) Then
//000046:                                                       _words.Add(word)
//000047:                                                       If word.Length > _maxWordLength Then
//000048:                                                           _maxWordLength = word.Length
//000049:                                                       End If
//000050:                                                   End If
//000051:                                                   line = reader.ReadLine()
//000052:                                               Loop
//000053:                                           End Using
//000054:                                       End Sub).
//000055:                                   ContinueWith(Sub(t)
//000056:                                                    txtInput.IsEnabled = True
//000057:                                                    chkParallel.IsEnabled = True
//000058:                                                    If t.IsFaulted Then
//000059:                                                        MsgBox(t.Exception.ToString())
//000060:                                                    Else
//000061:                                                        MakeSuggestions()
//000062:                                                    End If
//000063:                                                End Sub, TaskScheduler.FromCurrentSynchronizationContext())
//000064:             
//000065:             End If
//000066: 
//000067: 		End Sub
//000068: 
//000069: 		''' <summary>Redo the suggestions when the text changes.</summary>
//000070: 		Private Sub txtInput_TextChanged(ByVal sender As Object, ByVal e As TextChangedEventArgs)
//000071: 			MakeSuggestions()
//000072: 		End Sub
//000073: 
//000074: 		''' <summary>Redo the suggestions when parallel vs non-parallel changes.</summary>
//000075: 		Private Sub chkParallel_CheckedChanged(ByVal sender As Object, ByVal e As RoutedEventArgs)
//000076: 			MakeSuggestions()
//000077: 		End Sub
//000078: 
//000079:         '' <summary>Asynchronous make suggestions for correct spellings of the provided word.</summary>
//000080: 
//000081:         Private Sub MakeSuggestions()
//000082:             ' Limit the number of suggestions.
//000083:             Const NUM_SUGGESTIONS = 25
//000084: 
//000085:             ' Run serially or in parallel.
//000086:             Dim sequential = Not (chkParallel.IsChecked.HasValue AndAlso chkParallel.IsChecked.Value)
//000087:             Dim text = txtInput.Text
//000088: 
//000089:             ' If there's no text to evaluate, just bail.
//000090:             If String.IsNullOrEmpty(text) Then
//000091:                 listBox1.ItemsSource = Nothing
//000092:                 Return
//000093:             End If
//000094: 
//000095:             ' Every time the text is changed, we want to cancel the previous operation.
//000096:             If _cancellation IsNot Nothing Then
//000097:                 _cancellation.Cancel()
//000098:             End If
//000099:             _cancellation = New CancellationTokenSource()
//000100:             Dim token = _cancellation.Token
//000101: 
//000102:             ' Time the operation and kick it off.
//000103:             Dim sw = Stopwatch.StartNew()
//000104: 
//000105:             Task.Factory.StartNew(Function()
//000106:                                       ' Return both the spelling suggestions and the elapsed time
//000107:                                       Dim results As List(Of String) = Nothing
//000108:                                       If sequential Then
//000109:                                           Dim distanceMatrix = New Integer(_maxWordLength, _maxWordLength) {}
//000110:                                           results = _words.
//000111:                                               Select(Function(word) New With {Key .Word = word, Key .Distance = LevenshteinDistance(word, text, distanceMatrix)}).
//000112:                                               OrderBy(Function(p) p.Distance).
//000113:                                               Take(NUM_SUGGESTIONS).
//000114:                                               Select(Function(p) p.Word).
//000115:                                               ToList()
//000116:                                       Else
//000117:                                           Using distanceMatrix = New ThreadLocal(Of Integer(,))(Function() New Integer(_maxWordLength, _maxWordLength) {})
//000118:                                               results = _words.AsParallel().WithCancellation(token).
//000119:                                                   Select(Function(word) New With {Key .Word = word, .Distance = LevenshteinDistance(word, text, distanceMatrix.Value)}).
//000120:                                                   TakeTop(Function(p) p.Distance, NUM_SUGGESTIONS).
//000121:                                                   Select(Function(p) p.Word).
//000122:                                                   ToList()
//000123:                                           End Using
//000124:                                       End If
//000125:                                       sw.Stop()
//000126:                                       Return New With {.Results = results, .Time = sw.Elapsed}
//000127:                                   End Function, token).ContinueWith(Sub(t)
//000128:                                                                         listBox1.ItemsSource =
//000129:                                                                             t.Result.Results.[Select](Function(str, i) String.Format("{0,2}. {1}", i + 1, str))
//000130:                                                                         lblTime.Content = Convert.ToString("Sec: ") & Convert.ToString(t.Result.Time)
//000131:                                                                     End Sub, CancellationToken.None, TaskContinuationOptions.NotOnCanceled,
//000132:                                                                     TaskScheduler.FromCurrentSynchronizationContext)
//000133:         End Sub
//000134: 
//000135:         
//000136:         ''' <summary>Computes the Levenshtein Edit Distance between two enumerables.</summary>
//000137:         ''' <param name="str1">The first string.</param>
//000138:         ''' <param name="str2">The second string.</param>
//000139:         ''' <param name="scratchDistanceMatrix">Scratch space to use for the computation.</param>
//000140:         ''' <returns>The computed edit distance.</returns>
//000141:         Private Shared Function LevenshteinDistance(ByVal str1 As String, ByVal str2 As String, ByVal scratchDistanceMatrix(,) As Integer) As Integer
//000142:             ' Distance matrix contains one extra row and column for the seed values.            
//000143:             For i = 0 To str1.Length
//000144:                 scratchDistanceMatrix(i, 0) = i
//000145:             Next i
//000146:             For j = 0 To str2.Length
//000147:                 scratchDistanceMatrix(0, j) = j
//000148:             Next j
//000149: 
//000150:             For i = 1 To str1.Length
//000151:                 Dim str1Index = i - 1
//000152:                 For j = 1 To str2.Length
//000153:                     Dim str2Index = j - 1
//000154:                     Dim cost = If((str1.Chars(str1Index) = str2.Chars(str2Index)), 0, 1)
//000155: 
//000156:                     Dim deletion = If((i = 0), 1, scratchDistanceMatrix(i - 1, j) + 1)
//000157:                     Dim insertion = If((j = 0), 1, scratchDistanceMatrix(i, j - 1) + 1)
//000158:                     Dim substitution = If((i = 0 OrElse j = 0), cost, scratchDistanceMatrix(i - 1, j - 1) + cost)
//000159: 
//000160:                     scratchDistanceMatrix(i, j) = Math.Min(Math.Min(deletion, insertion), substitution)
//000161: 
//000162:                     ' Check for Transposition.
//000163:                     If i > 1 AndAlso j > 1 AndAlso (str1.Chars(str1Index) = str2.Chars(str2Index - 1)) AndAlso (str1.Chars(str1Index - 1) = str2.Chars(str2Index)) Then
//000164:                         scratchDistanceMatrix(i, j) = Math.Min(scratchDistanceMatrix(i, j), scratchDistanceMatrix(i - 2, j - 2) + cost)
//000165:                     End If
//000166:                 Next j
//000167:             Next i
//000168: 
//000169:             ' Levenshtein distance is the bottom right element.
//000170:             Return scratchDistanceMatrix(str1.Length, str2.Length)
//000171:         End Function
//000172:     End Class
//000173: End Namespace
        IL_0097:  ldloc.3
        IL_0098:  brtrue.s   IL_0032

//000053:                                           End Using
        IL_009a:  nop
//000054:                                       End Sub).
//000055:                                   ContinueWith(Sub(t)
//000056:                                                    txtInput.IsEnabled = True
//000057:                                                    chkParallel.IsEnabled = True
//000058:                                                    If t.IsFaulted Then
//000059:                                                        MsgBox(t.Exception.ToString())
//000060:                                                    Else
//000061:                                                        MakeSuggestions()
//000062:                                                    End If
//000063:                                                End Sub, TaskScheduler.FromCurrentSynchronizationContext())
//000064:             
//000065:             End If
//000066: 
//000067: 		End Sub
//000068: 
//000069: 		''' <summary>Redo the suggestions when the text changes.</summary>
//000070: 		Private Sub txtInput_TextChanged(ByVal sender As Object, ByVal e As TextChangedEventArgs)
//000071: 			MakeSuggestions()
//000072: 		End Sub
//000073: 
//000074: 		''' <summary>Redo the suggestions when parallel vs non-parallel changes.</summary>
//000075: 		Private Sub chkParallel_CheckedChanged(ByVal sender As Object, ByVal e As RoutedEventArgs)
//000076: 			MakeSuggestions()
//000077: 		End Sub
//000078: 
//000079:         '' <summary>Asynchronous make suggestions for correct spellings of the provided word.</summary>
//000080: 
//000081:         Private Sub MakeSuggestions()
//000082:             ' Limit the number of suggestions.
//000083:             Const NUM_SUGGESTIONS = 25
//000084: 
//000085:             ' Run serially or in parallel.
//000086:             Dim sequential = Not (chkParallel.IsChecked.HasValue AndAlso chkParallel.IsChecked.Value)
//000087:             Dim text = txtInput.Text
//000088: 
//000089:             ' If there's no text to evaluate, just bail.
//000090:             If String.IsNullOrEmpty(text) Then
//000091:                 listBox1.ItemsSource = Nothing
//000092:                 Return
//000093:             End If
//000094: 
//000095:             ' Every time the text is changed, we want to cancel the previous operation.
//000096:             If _cancellation IsNot Nothing Then
//000097:                 _cancellation.Cancel()
//000098:             End If
//000099:             _cancellation = New CancellationTokenSource()
//000100:             Dim token = _cancellation.Token
//000101: 
//000102:             ' Time the operation and kick it off.
//000103:             Dim sw = Stopwatch.StartNew()
//000104: 
//000105:             Task.Factory.StartNew(Function()
//000106:                                       ' Return both the spelling suggestions and the elapsed time
//000107:                                       Dim results As List(Of String) = Nothing
//000108:                                       If sequential Then
//000109:                                           Dim distanceMatrix = New Integer(_maxWordLength, _maxWordLength) {}
//000110:                                           results = _words.
//000111:                                               Select(Function(word) New With {Key .Word = word, Key .Distance = LevenshteinDistance(word, text, distanceMatrix)}).
//000112:                                               OrderBy(Function(p) p.Distance).
//000113:                                               Take(NUM_SUGGESTIONS).
//000114:                                               Select(Function(p) p.Word).
//000115:                                               ToList()
//000116:                                       Else
//000117:                                           Using distanceMatrix = New ThreadLocal(Of Integer(,))(Function() New Integer(_maxWordLength, _maxWordLength) {})
//000118:                                               results = _words.AsParallel().WithCancellation(token).
//000119:                                                   Select(Function(word) New With {Key .Word = word, .Distance = LevenshteinDistance(word, text, distanceMatrix.Value)}).
//000120:                                                   TakeTop(Function(p) p.Distance, NUM_SUGGESTIONS).
//000121:                                                   Select(Function(p) p.Word).
//000122:                                                   ToList()
//000123:                                           End Using
//000124:                                       End If
//000125:                                       sw.Stop()
//000126:                                       Return New With {.Results = results, .Time = sw.Elapsed}
//000127:                                   End Function, token).ContinueWith(Sub(t)
//000128:                                                                         listBox1.ItemsSource =
//000129:                                                                             t.Result.Results.[Select](Function(str, i) String.Format("{0,2}. {1}", i + 1, str))
//000130:                                                                         lblTime.Content = Convert.ToString("Sec: ") & Convert.ToString(t.Result.Time)
//000131:                                                                     End Sub, CancellationToken.None, TaskContinuationOptions.NotOnCanceled,
//000132:                                                                     TaskScheduler.FromCurrentSynchronizationContext)
//000133:         End Sub
//000134: 
//000135:         
//000136:         ''' <summary>Computes the Levenshtein Edit Distance between two enumerables.</summary>
//000137:         ''' <param name="str1">The first string.</param>
//000138:         ''' <param name="str2">The second string.</param>
//000139:         ''' <param name="scratchDistanceMatrix">Scratch space to use for the computation.</param>
//000140:         ''' <returns>The computed edit distance.</returns>
//000141:         Private Shared Function LevenshteinDistance(ByVal str1 As String, ByVal str2 As String, ByVal scratchDistanceMatrix(,) As Integer) As Integer
//000142:             ' Distance matrix contains one extra row and column for the seed values.            
//000143:             For i = 0 To str1.Length
//000144:                 scratchDistanceMatrix(i, 0) = i
//000145:             Next i
//000146:             For j = 0 To str2.Length
//000147:                 scratchDistanceMatrix(0, j) = j
//000148:             Next j
//000149: 
//000150:             For i = 1 To str1.Length
//000151:                 Dim str1Index = i - 1
//000152:                 For j = 1 To str2.Length
//000153:                     Dim str2Index = j - 1
//000154:                     Dim cost = If((str1.Chars(str1Index) = str2.Chars(str2Index)), 0, 1)
//000155: 
//000156:                     Dim deletion = If((i = 0), 1, scratchDistanceMatrix(i - 1, j) + 1)
//000157:                     Dim insertion = If((j = 0), 1, scratchDistanceMatrix(i, j - 1) + 1)
//000158:                     Dim substitution = If((i = 0 OrElse j = 0), cost, scratchDistanceMatrix(i - 1, j - 1) + cost)
//000159: 
//000160:                     scratchDistanceMatrix(i, j) = Math.Min(Math.Min(deletion, insertion), substitution)
//000161: 
//000162:                     ' Check for Transposition.
//000163:                     If i > 1 AndAlso j > 1 AndAlso (str1.Chars(str1Index) = str2.Chars(str2Index - 1)) AndAlso (str1.Chars(str1Index - 1) = str2.Chars(str2Index)) Then
//000164:                         scratchDistanceMatrix(i, j) = Math.Min(scratchDistanceMatrix(i, j), scratchDistanceMatrix(i - 2, j - 2) + cost)
//000165:                     End If
//000166:                 Next j
//000167:             Next i
//000168: 
//000169:             ' Levenshtein distance is the bottom right element.
//000170:             Return scratchDistanceMatrix(str1.Length, str2.Length)
//000171:         End Function
//000172:     End Class
//000173: End Namespace
        IL_009b:  leave.s    IL_00b1

      }  // end .try
      finally
      {
        IL_009d:  ldloc.0
        IL_009e:  ldnull
        IL_009f:  ceq
        IL_00a1:  ldc.i4.0
        IL_00a2:  ceq
        IL_00a4:  stloc.3
        IL_00a5:  ldloc.3
        IL_00a6:  brfalse.s  IL_00af

        IL_00a8:  ldloc.0
        IL_00a9:  callvirt   instance void [mscorlib]System.IDisposable::Dispose()
        IL_00ae:  nop
        IL_00af:  nop
        IL_00b0:  endfinally
//000054:                                       End Sub).
      }  // end handler
      IL_00b1:  nop
      IL_00b2:  ret
    } // end of method _Closure$__1::_Lambda$__2

  } // end of class _Closure$__1

  .class auto ansi nested assembly _Closure$__2
         extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .class auto ansi nested assembly _Closure$__3
           extends [mscorlib]System.Object
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .field public int32[0...,0...] $VB$Local_distanceMatrix
      .field public class SpellChecker.Window1/_Closure$__2 $VB$NonLocal__Closure$__2
      .method public specialname rtspecialname 
              instance void  .ctor() cil managed
      {
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       9 (0x9)
        .maxstack  8
        IL_0000:  ldarg.0
        IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
        IL_0006:  nop
        IL_0007:  nop
        IL_0008:  ret
      } // end of method _Closure$__3::.ctor

      .method public specialname rtspecialname 
              instance void  .ctor(class SpellChecker.Window1/_Closure$__2/_Closure$__3 other) cil managed
      {
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       45 (0x2d)
        .maxstack  2
        .locals init (bool V_0)
        IL_0000:  ldarg.0
        IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
        IL_0006:  nop
        IL_0007:  ldarg.1
        IL_0008:  ldnull
        IL_0009:  ceq
        IL_000b:  ldc.i4.0
        IL_000c:  ceq
        IL_000e:  stloc.0
        IL_000f:  ldloc.0
        IL_0010:  brfalse.s  IL_002a

        IL_0012:  ldarg.0
        IL_0013:  ldarg.1
        IL_0014:  ldfld      class SpellChecker.Window1/_Closure$__2 SpellChecker.Window1/_Closure$__2/_Closure$__3::$VB$NonLocal__Closure$__2
        IL_0019:  stfld      class SpellChecker.Window1/_Closure$__2 SpellChecker.Window1/_Closure$__2/_Closure$__3::$VB$NonLocal__Closure$__2
        IL_001e:  ldarg.0
        IL_001f:  ldarg.1
        IL_0020:  ldfld      int32[0...,0...] SpellChecker.Window1/_Closure$__2/_Closure$__3::$VB$Local_distanceMatrix
        IL_0025:  stfld      int32[0...,0...] SpellChecker.Window1/_Closure$__2/_Closure$__3::$VB$Local_distanceMatrix
        IL_002a:  nop
        IL_002b:  nop
        IL_002c:  ret
      } // end of method _Closure$__3::.ctor

      .method public specialname instance class VB$AnonymousType_0`2<string,int32> 
              _Lambda$__6(string word) cil managed
      {
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       34 (0x22)
        .maxstack  4
        .locals init ([0] class VB$AnonymousType_0`2<string,int32> _Lambda$__6,
                 [1] class VB$AnonymousType_0`2<string,int32> VB$t_ref$S0)
//000055:                                   ContinueWith(Sub(t)
//000056:                                                    txtInput.IsEnabled = True
//000057:                                                    chkParallel.IsEnabled = True
//000058:                                                    If t.IsFaulted Then
//000059:                                                        MsgBox(t.Exception.ToString())
//000060:                                                    Else
//000061:                                                        MakeSuggestions()
//000062:                                                    End If
//000063:                                                End Sub, TaskScheduler.FromCurrentSynchronizationContext())
//000064:             
//000065:             End If
//000066: 
//000067: 		End Sub
//000068: 
//000069: 		''' <summary>Redo the suggestions when the text changes.</summary>
//000070: 		Private Sub txtInput_TextChanged(ByVal sender As Object, ByVal e As TextChangedEventArgs)
//000071: 			MakeSuggestions()
//000072: 		End Sub
//000073: 
//000074: 		''' <summary>Redo the suggestions when parallel vs non-parallel changes.</summary>
//000075: 		Private Sub chkParallel_CheckedChanged(ByVal sender As Object, ByVal e As RoutedEventArgs)
//000076: 			MakeSuggestions()
//000077: 		End Sub
//000078: 
//000079:         '' <summary>Asynchronous make suggestions for correct spellings of the provided word.</summary>
//000080: 
//000081:         Private Sub MakeSuggestions()
//000082:             ' Limit the number of suggestions.
//000083:             Const NUM_SUGGESTIONS = 25
//000084: 
//000085:             ' Run serially or in parallel.
//000086:             Dim sequential = Not (chkParallel.IsChecked.HasValue AndAlso chkParallel.IsChecked.Value)
//000087:             Dim text = txtInput.Text
//000088: 
//000089:             ' If there's no text to evaluate, just bail.
//000090:             If String.IsNullOrEmpty(text) Then
//000091:                 listBox1.ItemsSource = Nothing
//000092:                 Return
//000093:             End If
//000094: 
//000095:             ' Every time the text is changed, we want to cancel the previous operation.
//000096:             If _cancellation IsNot Nothing Then
//000097:                 _cancellation.Cancel()
//000098:             End If
//000099:             _cancellation = New CancellationTokenSource()
//000100:             Dim token = _cancellation.Token
//000101: 
//000102:             ' Time the operation and kick it off.
//000103:             Dim sw = Stopwatch.StartNew()
//000104: 
//000105:             Task.Factory.StartNew(Function()
//000106:                                       ' Return both the spelling suggestions and the elapsed time
//000107:                                       Dim results As List(Of String) = Nothing
//000108:                                       If sequential Then
//000109:                                           Dim distanceMatrix = New Integer(_maxWordLength, _maxWordLength) {}
//000110:                                           results = _words.
//000111:                                               Select(Function(word) New With {Key .Word = word, Key .Distance = LevenshteinDistance(word, text, distanceMatrix)}).
        IL_0000:  ldarg.1
        IL_0001:  ldarg.1
        IL_0002:  ldarg.0
        IL_0003:  ldfld      class SpellChecker.Window1/_Closure$__2 SpellChecker.Window1/_Closure$__2/_Closure$__3::$VB$NonLocal__Closure$__2
        IL_0008:  ldfld      string SpellChecker.Window1/_Closure$__2::$VB$Local_text
        IL_000d:  ldarg.0
        IL_000e:  ldfld      int32[0...,0...] SpellChecker.Window1/_Closure$__2/_Closure$__3::$VB$Local_distanceMatrix
        IL_0013:  call       int32 SpellChecker.Window1::LevenshteinDistance(string,
                                                                             string,
                                                                             int32[0...,0...])
        IL_0018:  newobj     instance void class VB$AnonymousType_0`2<string,int32>::.ctor(!0,
                                                                                           !1)
        IL_001d:  stloc.0
        IL_001e:  br.s       IL_0020

        IL_0020:  ldloc.0
        IL_0021:  ret
      } // end of method _Closure$__3::_Lambda$__6

    } // end of class _Closure$__3

    .class auto ansi nested assembly _Closure$__4
           extends [mscorlib]System.Object
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      .field public class [mscorlib]System.Threading.ThreadLocal`1<int32[0...,0...]> $VB$Local_distanceMatrix
      .field public class SpellChecker.Window1/_Closure$__2 $VB$NonLocal__Closure$__2
      .method public specialname rtspecialname 
              instance void  .ctor() cil managed
      {
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       9 (0x9)
        .maxstack  8
        IL_0000:  ldarg.0
        IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
        IL_0006:  nop
        IL_0007:  nop
        IL_0008:  ret
      } // end of method _Closure$__4::.ctor

      .method public specialname rtspecialname 
              instance void  .ctor(class SpellChecker.Window1/_Closure$__2/_Closure$__4 other) cil managed
      {
        .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       45 (0x2d)
        .maxstack  2
        .locals init (bool V_0)
        IL_0000:  ldarg.0
        IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
        IL_0006:  nop
        IL_0007:  ldarg.1
        IL_0008:  ldnull
        IL_0009:  ceq
        IL_000b:  ldc.i4.0
        IL_000c:  ceq
        IL_000e:  stloc.0
        IL_000f:  ldloc.0
        IL_0010:  brfalse.s  IL_002a

        IL_0012:  ldarg.0
        IL_0013:  ldarg.1
        IL_0014:  ldfld      class [mscorlib]System.Threading.ThreadLocal`1<int32[0...,0...]> SpellChecker.Window1/_Closure$__2/_Closure$__4::$VB$Local_distanceMatrix
        IL_0019:  stfld      class [mscorlib]System.Threading.ThreadLocal`1<int32[0...,0...]> SpellChecker.Window1/_Closure$__2/_Closure$__4::$VB$Local_distanceMatrix
        IL_001e:  ldarg.0
        IL_001f:  ldarg.1
        IL_0020:  ldfld      class SpellChecker.Window1/_Closure$__2 SpellChecker.Window1/_Closure$__2/_Closure$__4::$VB$NonLocal__Closure$__2
        IL_0025:  stfld      class SpellChecker.Window1/_Closure$__2 SpellChecker.Window1/_Closure$__2/_Closure$__4::$VB$NonLocal__Closure$__2
        IL_002a:  nop
        IL_002b:  nop
        IL_002c:  ret
      } // end of method _Closure$__4::.ctor

      .method public specialname instance class VB$AnonymousType_1`2<string,int32> 
              _Lambda$__10(string word) cil managed
      {
        .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
        // Code size       39 (0x27)
        .maxstack  4
        .locals init ([0] class VB$AnonymousType_1`2<string,int32> _Lambda$__10,
                 [1] class VB$AnonymousType_1`2<string,int32> VB$t_ref$S0)
//000112:                                               OrderBy(Function(p) p.Distance).
//000113:                                               Take(NUM_SUGGESTIONS).
//000114:                                               Select(Function(p) p.Word).
//000115:                                               ToList()
//000116:                                       Else
//000117:                                           Using distanceMatrix = New ThreadLocal(Of Integer(,))(Function() New Integer(_maxWordLength, _maxWordLength) {})
//000118:                                               results = _words.AsParallel().WithCancellation(token).
//000119:                                                   Select(Function(word) New With {Key .Word = word, .Distance = LevenshteinDistance(word, text, distanceMatrix.Value)}).
        IL_0000:  ldarg.1
        IL_0001:  ldarg.1
        IL_0002:  ldarg.0
        IL_0003:  ldfld      class SpellChecker.Window1/_Closure$__2 SpellChecker.Window1/_Closure$__2/_Closure$__4::$VB$NonLocal__Closure$__2
        IL_0008:  ldfld      string SpellChecker.Window1/_Closure$__2::$VB$Local_text
        IL_000d:  ldarg.0
        IL_000e:  ldfld      class [mscorlib]System.Threading.ThreadLocal`1<int32[0...,0...]> SpellChecker.Window1/_Closure$__2/_Closure$__4::$VB$Local_distanceMatrix
        IL_0013:  callvirt   instance !0 class [mscorlib]System.Threading.ThreadLocal`1<int32[0...,0...]>::get_Value()
        IL_0018:  call       int32 SpellChecker.Window1::LevenshteinDistance(string,
                                                                             string,
                                                                             int32[0...,0...])
        IL_001d:  newobj     instance void class VB$AnonymousType_1`2<string,int32>::.ctor(!0,
                                                                                           !1)
        IL_0022:  stloc.0
        IL_0023:  br.s       IL_0025

        IL_0025:  ldloc.0
        IL_0026:  ret
      } // end of method _Closure$__4::_Lambda$__10

    } // end of class _Closure$__4

    .field public bool $VB$Local_sequential
    .field public class [System]System.Diagnostics.Stopwatch $VB$Local_sw
    .field public string $VB$Local_text
    .field public valuetype [mscorlib]System.Threading.CancellationToken $VB$Local_token
    .field public class SpellChecker.Window1 $VB$Me
    .method public specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       9 (0x9)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  nop
      IL_0007:  nop
      IL_0008:  ret
    } // end of method _Closure$__2::.ctor

    .method public specialname rtspecialname 
            instance void  .ctor(class SpellChecker.Window1/_Closure$__2 other) cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       81 (0x51)
      .maxstack  2
      .locals init (bool V_0)
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  nop
      IL_0007:  ldarg.1
      IL_0008:  ldnull
      IL_0009:  ceq
      IL_000b:  ldc.i4.0
      IL_000c:  ceq
      IL_000e:  stloc.0
      IL_000f:  ldloc.0
      IL_0010:  brfalse.s  IL_004e

      IL_0012:  ldarg.0
      IL_0013:  ldarg.1
      IL_0014:  ldfld      string SpellChecker.Window1/_Closure$__2::$VB$Local_text
      IL_0019:  stfld      string SpellChecker.Window1/_Closure$__2::$VB$Local_text
      IL_001e:  ldarg.0
      IL_001f:  ldarg.1
      IL_0020:  ldfld      class [System]System.Diagnostics.Stopwatch SpellChecker.Window1/_Closure$__2::$VB$Local_sw
      IL_0025:  stfld      class [System]System.Diagnostics.Stopwatch SpellChecker.Window1/_Closure$__2::$VB$Local_sw
      IL_002a:  ldarg.0
      IL_002b:  ldarg.1
      IL_002c:  ldfld      class SpellChecker.Window1 SpellChecker.Window1/_Closure$__2::$VB$Me
      IL_0031:  stfld      class SpellChecker.Window1 SpellChecker.Window1/_Closure$__2::$VB$Me
      IL_0036:  ldarg.0
      IL_0037:  ldarg.1
      IL_0038:  ldfld      bool SpellChecker.Window1/_Closure$__2::$VB$Local_sequential
      IL_003d:  stfld      bool SpellChecker.Window1/_Closure$__2::$VB$Local_sequential
      IL_0042:  ldarg.0
      IL_0043:  ldarg.1
      IL_0044:  ldfld      valuetype [mscorlib]System.Threading.CancellationToken SpellChecker.Window1/_Closure$__2::$VB$Local_token
      IL_0049:  stfld      valuetype [mscorlib]System.Threading.CancellationToken SpellChecker.Window1/_Closure$__2::$VB$Local_token
      IL_004e:  nop
      IL_004f:  nop
      IL_0050:  ret
    } // end of method _Closure$__2::.ctor

    .method public specialname instance class VB$AnonymousType_2`2<class [mscorlib]System.Collections.Generic.List`1<string>,valuetype [mscorlib]System.TimeSpan> 
            _Lambda$__5() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       351 (0x15f)
      .maxstack  4
      .locals init ([0] class VB$AnonymousType_2`2<class [mscorlib]System.Collections.Generic.List`1<string>,valuetype [mscorlib]System.TimeSpan> _Lambda$__5,
               [1] class [mscorlib]System.Collections.Generic.List`1<string> results,
               [2] class SpellChecker.Window1/_Closure$__2/_Closure$__3 $VB$Closure_ClosureVariable_6B_26,
               [3] class SpellChecker.Window1/_Closure$__2/_Closure$__4 $VB$Closure_ClosureVariable_74_2A,
               [4] class VB$AnonymousType_2`2<class [mscorlib]System.Collections.Generic.List`1<string>,valuetype [mscorlib]System.TimeSpan> VB$t_ref$S0,
               [5] bool VB$CG$t_bool$S0)
//000105:             Task.Factory.StartNew(Function()
      IL_0000:  nop
//000106:                                       ' Return both the spelling suggestions and the elapsed time
//000107:                                       Dim results As List(Of String) = Nothing
      IL_0001:  ldnull
      IL_0002:  stloc.1
//000108:                                       If sequential Then
      IL_0003:  ldarg.0
      IL_0004:  ldfld      bool SpellChecker.Window1/_Closure$__2::$VB$Local_sequential
      IL_0009:  stloc.s    VB$CG$t_bool$S0
//000109:                                           Dim distanceMatrix = New Integer(_maxWordLength, _maxWordLength) {}
//000110:                                           results = _words.
//000111:                                               Select(Function(word) New With {Key .Word = word, Key .Distance = LevenshteinDistance(word, text, distanceMatrix)}).
//000112:                                               OrderBy(Function(p) p.Distance).
//000113:                                               Take(NUM_SUGGESTIONS).
//000114:                                               Select(Function(p) p.Word).
//000115:                                               ToList()
//000116:                                       Else
//000117:                                           Using distanceMatrix = New ThreadLocal(Of Integer(,))(Function() New Integer(_maxWordLength, _maxWordLength) {})
//000118:                                               results = _words.AsParallel().WithCancellation(token).
//000119:                                                   Select(Function(word) New With {Key .Word = word, .Distance = LevenshteinDistance(word, text, distanceMatrix.Value)}).
//000120:                                                   TakeTop(Function(p) p.Distance, NUM_SUGGESTIONS).
//000121:                                                   Select(Function(p) p.Word).
//000122:                                                   ToList()
//000123:                                           End Using
//000124:                                       End If
//000125:                                       sw.Stop()
//000126:                                       Return New With {.Results = results, .Time = sw.Elapsed}
//000127:                                   End Function, token).ContinueWith(Sub(t)
//000128:                                                                         listBox1.ItemsSource =
//000129:                                                                             t.Result.Results.[Select](Function(str, i) String.Format("{0,2}. {1}", i + 1, str))
//000130:                                                                         lblTime.Content = Convert.ToString("Sec: ") & Convert.ToString(t.Result.Time)
//000131:                                                                     End Sub, CancellationToken.None, TaskContinuationOptions.NotOnCanceled,
//000132:                                                                     TaskScheduler.FromCurrentSynchronizationContext)
//000133:         End Sub
//000134: 
//000135:         
//000136:         ''' <summary>Computes the Levenshtein Edit Distance between two enumerables.</summary>
//000137:         ''' <param name="str1">The first string.</param>
//000138:         ''' <param name="str2">The second string.</param>
//000139:         ''' <param name="scratchDistanceMatrix">Scratch space to use for the computation.</param>
//000140:         ''' <returns>The computed edit distance.</returns>
//000141:         Private Shared Function LevenshteinDistance(ByVal str1 As String, ByVal str2 As String, ByVal scratchDistanceMatrix(,) As Integer) As Integer
//000142:             ' Distance matrix contains one extra row and column for the seed values.            
//000143:             For i = 0 To str1.Length
//000144:                 scratchDistanceMatrix(i, 0) = i
//000145:             Next i
//000146:             For j = 0 To str2.Length
//000147:                 scratchDistanceMatrix(0, j) = j
//000148:             Next j
//000149: 
//000150:             For i = 1 To str1.Length
//000151:                 Dim str1Index = i - 1
//000152:                 For j = 1 To str2.Length
//000153:                     Dim str2Index = j - 1
//000154:                     Dim cost = If((str1.Chars(str1Index) = str2.Chars(str2Index)), 0, 1)
//000155: 
//000156:                     Dim deletion = If((i = 0), 1, scratchDistanceMatrix(i - 1, j) + 1)
//000157:                     Dim insertion = If((j = 0), 1, scratchDistanceMatrix(i, j - 1) + 1)
//000158:                     Dim substitution = If((i = 0 OrElse j = 0), cost, scratchDistanceMatrix(i - 1, j - 1) + cost)
//000159: 
//000160:                     scratchDistanceMatrix(i, j) = Math.Min(Math.Min(deletion, insertion), substitution)
//000161: 
//000162:                     ' Check for Transposition.
//000163:                     If i > 1 AndAlso j > 1 AndAlso (str1.Chars(str1Index) = str2.Chars(str2Index - 1)) AndAlso (str1.Chars(str1Index - 1) = str2.Chars(str2Index)) Then
//000164:                         scratchDistanceMatrix(i, j) = Math.Min(scratchDistanceMatrix(i, j), scratchDistanceMatrix(i - 2, j - 2) + cost)
//000165:                     End If
//000166:                 Next j
//000167:             Next i
//000168: 
//000169:             ' Levenshtein distance is the bottom right element.
//000170:             Return scratchDistanceMatrix(str1.Length, str2.Length)
//000171:         End Function
//000172:     End Class
//000173: End Namespace
      IL_000b:  ldloc.s    VB$CG$t_bool$S0
      IL_000d:  brfalse    IL_0095

      IL_0012:  newobj     instance void SpellChecker.Window1/_Closure$__2/_Closure$__3::.ctor()
      IL_0017:  stloc.2
      IL_0018:  ldloc.2
      IL_0019:  ldarg.0
      IL_001a:  stfld      class SpellChecker.Window1/_Closure$__2 SpellChecker.Window1/_Closure$__2/_Closure$__3::$VB$NonLocal__Closure$__2
//000109:                                           Dim distanceMatrix = New Integer(_maxWordLength, _maxWordLength) {}
      IL_001f:  ldloc.2
      IL_0020:  ldarg.0
      IL_0021:  ldfld      class SpellChecker.Window1 SpellChecker.Window1/_Closure$__2::$VB$Me
      IL_0026:  ldfld      int32 SpellChecker.Window1::_maxWordLength
      IL_002b:  ldc.i4.1
      IL_002c:  add.ovf
      IL_002d:  ldarg.0
      IL_002e:  ldfld      class SpellChecker.Window1 SpellChecker.Window1/_Closure$__2::$VB$Me
      IL_0033:  ldfld      int32 SpellChecker.Window1::_maxWordLength
      IL_0038:  ldc.i4.1
      IL_0039:  add.ovf
      IL_003a:  newobj     instance void int32[0...,0...]::.ctor(int32,
                                                                 int32)
      IL_003f:  stfld      int32[0...,0...] SpellChecker.Window1/_Closure$__2/_Closure$__3::$VB$Local_distanceMatrix
//000110:                                           results = _words.
      IL_0044:  ldarg.0
      IL_0045:  ldfld      class SpellChecker.Window1 SpellChecker.Window1/_Closure$__2::$VB$Me
      IL_004a:  ldfld      class [mscorlib]System.Collections.Generic.List`1<string> SpellChecker.Window1::_words
      IL_004f:  ldloc.2
      IL_0050:  dup
      IL_0051:  ldvirtftn  instance class VB$AnonymousType_0`2<string,int32> SpellChecker.Window1/_Closure$__2/_Closure$__3::_Lambda$__6(string)
      IL_0057:  newobj     instance void class [mscorlib]System.Func`2<string,class VB$AnonymousType_0`2<string,int32>>::.ctor(object,
                                                                                                                               native int)
      IL_005c:  call       class [mscorlib]System.Collections.Generic.IEnumerable`1<!!1> [System.Core]System.Linq.Enumerable::Select<string,class VB$AnonymousType_0`2<string,int32>>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>,
                                                                                                                                                                                      class [mscorlib]System.Func`2<!!0,!!1>)
      IL_0061:  ldnull
      IL_0062:  ldftn      int32 SpellChecker.Window1::_Lambda$__7(class VB$AnonymousType_0`2<string,int32>)
      IL_0068:  newobj     instance void class [mscorlib]System.Func`2<class VB$AnonymousType_0`2<string,int32>,int32>::.ctor(object,
                                                                                                                              native int)
      IL_006d:  call       class [System.Core]System.Linq.IOrderedEnumerable`1<!!0> [System.Core]System.Linq.Enumerable::OrderBy<class VB$AnonymousType_0`2<string,int32>,int32>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>,
                                                                                                                                                                                 class [mscorlib]System.Func`2<!!0,!!1>)
      IL_0072:  ldc.i4.s   25
      IL_0074:  call       class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0> [System.Core]System.Linq.Enumerable::Take<class VB$AnonymousType_0`2<string,int32>>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>,
                                                                                                                                                                             int32)
      IL_0079:  ldnull
      IL_007a:  ldftn      string SpellChecker.Window1::_Lambda$__8(class VB$AnonymousType_0`2<string,int32>)
      IL_0080:  newobj     instance void class [mscorlib]System.Func`2<class VB$AnonymousType_0`2<string,int32>,string>::.ctor(object,
                                                                                                                               native int)
      IL_0085:  call       class [mscorlib]System.Collections.Generic.IEnumerable`1<!!1> [System.Core]System.Linq.Enumerable::Select<class VB$AnonymousType_0`2<string,int32>,string>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>,
                                                                                                                                                                                      class [mscorlib]System.Func`2<!!0,!!1>)
      IL_008a:  call       class [mscorlib]System.Collections.Generic.List`1<!!0> [System.Core]System.Linq.Enumerable::ToList<string>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>)
      IL_008f:  stloc.1
      IL_0090:  br         IL_013c

//000111:                                               Select(Function(word) New With {Key .Word = word, Key .Distance = LevenshteinDistance(word, text, distanceMatrix)}).
//000112:                                               OrderBy(Function(p) p.Distance).
//000113:                                               Take(NUM_SUGGESTIONS).
//000114:                                               Select(Function(p) p.Word).
//000115:                                               ToList()
//000116:                                       Else
      IL_0095:  nop
//000117:                                           Using distanceMatrix = New ThreadLocal(Of Integer(,))(Function() New Integer(_maxWordLength, _maxWordLength) {})
      IL_0096:  nop
//000118:                                               results = _words.AsParallel().WithCancellation(token).
//000119:                                                   Select(Function(word) New With {Key .Word = word, .Distance = LevenshteinDistance(word, text, distanceMatrix.Value)}).
//000120:                                                   TakeTop(Function(p) p.Distance, NUM_SUGGESTIONS).
//000121:                                                   Select(Function(p) p.Word).
//000122:                                                   ToList()
//000123:                                           End Using
//000124:                                       End If
//000125:                                       sw.Stop()
//000126:                                       Return New With {.Results = results, .Time = sw.Elapsed}
//000127:                                   End Function, token).ContinueWith(Sub(t)
//000128:                                                                         listBox1.ItemsSource =
//000129:                                                                             t.Result.Results.[Select](Function(str, i) String.Format("{0,2}. {1}", i + 1, str))
//000130:                                                                         lblTime.Content = Convert.ToString("Sec: ") & Convert.ToString(t.Result.Time)
//000131:                                                                     End Sub, CancellationToken.None, TaskContinuationOptions.NotOnCanceled,
//000132:                                                                     TaskScheduler.FromCurrentSynchronizationContext)
//000133:         End Sub
//000134: 
//000135:         
//000136:         ''' <summary>Computes the Levenshtein Edit Distance between two enumerables.</summary>
//000137:         ''' <param name="str1">The first string.</param>
//000138:         ''' <param name="str2">The second string.</param>
//000139:         ''' <param name="scratchDistanceMatrix">Scratch space to use for the computation.</param>
//000140:         ''' <returns>The computed edit distance.</returns>
//000141:         Private Shared Function LevenshteinDistance(ByVal str1 As String, ByVal str2 As String, ByVal scratchDistanceMatrix(,) As Integer) As Integer
//000142:             ' Distance matrix contains one extra row and column for the seed values.            
//000143:             For i = 0 To str1.Length
//000144:                 scratchDistanceMatrix(i, 0) = i
//000145:             Next i
//000146:             For j = 0 To str2.Length
//000147:                 scratchDistanceMatrix(0, j) = j
//000148:             Next j
//000149: 
//000150:             For i = 1 To str1.Length
//000151:                 Dim str1Index = i - 1
//000152:                 For j = 1 To str2.Length
//000153:                     Dim str2Index = j - 1
//000154:                     Dim cost = If((str1.Chars(str1Index) = str2.Chars(str2Index)), 0, 1)
//000155: 
//000156:                     Dim deletion = If((i = 0), 1, scratchDistanceMatrix(i - 1, j) + 1)
//000157:                     Dim insertion = If((j = 0), 1, scratchDistanceMatrix(i, j - 1) + 1)
//000158:                     Dim substitution = If((i = 0 OrElse j = 0), cost, scratchDistanceMatrix(i - 1, j - 1) + cost)
//000159: 
//000160:                     scratchDistanceMatrix(i, j) = Math.Min(Math.Min(deletion, insertion), substitution)
//000161: 
//000162:                     ' Check for Transposition.
//000163:                     If i > 1 AndAlso j > 1 AndAlso (str1.Chars(str1Index) = str2.Chars(str2Index - 1)) AndAlso (str1.Chars(str1Index - 1) = str2.Chars(str2Index)) Then
//000164:                         scratchDistanceMatrix(i, j) = Math.Min(scratchDistanceMatrix(i, j), scratchDistanceMatrix(i - 2, j - 2) + cost)
//000165:                     End If
//000166:                 Next j
//000167:             Next i
//000168: 
//000169:             ' Levenshtein distance is the bottom right element.
//000170:             Return scratchDistanceMatrix(str1.Length, str2.Length)
//000171:         End Function
//000172:     End Class
//000173: End Namespace
      IL_0097:  newobj     instance void SpellChecker.Window1/_Closure$__2/_Closure$__4::.ctor()
      IL_009c:  stloc.3
      IL_009d:  ldloc.3
      IL_009e:  ldarg.0
      IL_009f:  stfld      class SpellChecker.Window1/_Closure$__2 SpellChecker.Window1/_Closure$__2/_Closure$__4::$VB$NonLocal__Closure$__2
//000117:                                           Using distanceMatrix = New ThreadLocal(Of Integer(,))(Function() New Integer(_maxWordLength, _maxWordLength) {})
      IL_00a4:  ldloc.3
      IL_00a5:  ldarg.0
      IL_00a6:  ldfld      class SpellChecker.Window1 SpellChecker.Window1/_Closure$__2::$VB$Me
      IL_00ab:  dup
      IL_00ac:  ldvirtftn  instance int32[0...,0...] SpellChecker.Window1::_Lambda$__9()
      IL_00b2:  newobj     instance void class [mscorlib]System.Func`1<int32[0...,0...]>::.ctor(object,
                                                                                                native int)
      IL_00b7:  newobj     instance void class [mscorlib]System.Threading.ThreadLocal`1<int32[0...,0...]>::.ctor(class [mscorlib]System.Func`1<!0>)
      IL_00bc:  stfld      class [mscorlib]System.Threading.ThreadLocal`1<int32[0...,0...]> SpellChecker.Window1/_Closure$__2/_Closure$__4::$VB$Local_distanceMatrix
//000118:                                               results = _words.AsParallel().WithCancellation(token).
//000119:                                                   Select(Function(word) New With {Key .Word = word, .Distance = LevenshteinDistance(word, text, distanceMatrix.Value)}).
//000120:                                                   TakeTop(Function(p) p.Distance, NUM_SUGGESTIONS).
//000121:                                                   Select(Function(p) p.Word).
//000122:                                                   ToList()
//000123:                                           End Using
//000124:                                       End If
//000125:                                       sw.Stop()
//000126:                                       Return New With {.Results = results, .Time = sw.Elapsed}
//000127:                                   End Function, token).ContinueWith(Sub(t)
//000128:                                                                         listBox1.ItemsSource =
//000129:                                                                             t.Result.Results.[Select](Function(str, i) String.Format("{0,2}. {1}", i + 1, str))
//000130:                                                                         lblTime.Content = Convert.ToString("Sec: ") & Convert.ToString(t.Result.Time)
//000131:                                                                     End Sub, CancellationToken.None, TaskContinuationOptions.NotOnCanceled,
//000132:                                                                     TaskScheduler.FromCurrentSynchronizationContext)
//000133:         End Sub
//000134: 
//000135:         
//000136:         ''' <summary>Computes the Levenshtein Edit Distance between two enumerables.</summary>
//000137:         ''' <param name="str1">The first string.</param>
//000138:         ''' <param name="str2">The second string.</param>
//000139:         ''' <param name="scratchDistanceMatrix">Scratch space to use for the computation.</param>
//000140:         ''' <returns>The computed edit distance.</returns>
//000141:         Private Shared Function LevenshteinDistance(ByVal str1 As String, ByVal str2 As String, ByVal scratchDistanceMatrix(,) As Integer) As Integer
//000142:             ' Distance matrix contains one extra row and column for the seed values.            
//000143:             For i = 0 To str1.Length
//000144:                 scratchDistanceMatrix(i, 0) = i
//000145:             Next i
//000146:             For j = 0 To str2.Length
//000147:                 scratchDistanceMatrix(0, j) = j
//000148:             Next j
//000149: 
//000150:             For i = 1 To str1.Length
//000151:                 Dim str1Index = i - 1
//000152:                 For j = 1 To str2.Length
//000153:                     Dim str2Index = j - 1
//000154:                     Dim cost = If((str1.Chars(str1Index) = str2.Chars(str2Index)), 0, 1)
//000155: 
//000156:                     Dim deletion = If((i = 0), 1, scratchDistanceMatrix(i - 1, j) + 1)
//000157:                     Dim insertion = If((j = 0), 1, scratchDistanceMatrix(i, j - 1) + 1)
//000158:                     Dim substitution = If((i = 0 OrElse j = 0), cost, scratchDistanceMatrix(i - 1, j - 1) + cost)
//000159: 
//000160:                     scratchDistanceMatrix(i, j) = Math.Min(Math.Min(deletion, insertion), substitution)
//000161: 
//000162:                     ' Check for Transposition.
//000163:                     If i > 1 AndAlso j > 1 AndAlso (str1.Chars(str1Index) = str2.Chars(str2Index - 1)) AndAlso (str1.Chars(str1Index - 1) = str2.Chars(str2Index)) Then
//000164:                         scratchDistanceMatrix(i, j) = Math.Min(scratchDistanceMatrix(i, j), scratchDistanceMatrix(i - 2, j - 2) + cost)
//000165:                     End If
//000166:                 Next j
//000167:             Next i
//000168: 
//000169:             ' Levenshtein distance is the bottom right element.
//000170:             Return scratchDistanceMatrix(str1.Length, str2.Length)
//000171:         End Function
//000172:     End Class
//000173: End Namespace
      IL_00c1:  nop
//000118:                                               results = _words.AsParallel().WithCancellation(token).
      .try
      {
        IL_00c2:  ldarg.0
        IL_00c3:  ldfld      class SpellChecker.Window1 SpellChecker.Window1/_Closure$__2::$VB$Me
        IL_00c8:  ldfld      class [mscorlib]System.Collections.Generic.List`1<string> SpellChecker.Window1::_words
        IL_00cd:  call       class [System.Core]System.Linq.ParallelQuery`1<!!0> [System.Core]System.Linq.ParallelEnumerable::AsParallel<string>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>)
        IL_00d2:  ldarg.0
        IL_00d3:  ldfld      valuetype [mscorlib]System.Threading.CancellationToken SpellChecker.Window1/_Closure$__2::$VB$Local_token
        IL_00d8:  call       class [System.Core]System.Linq.ParallelQuery`1<!!0> [System.Core]System.Linq.ParallelEnumerable::WithCancellation<string>(class [System.Core]System.Linq.ParallelQuery`1<!!0>,
                                                                                                                                                       valuetype [mscorlib]System.Threading.CancellationToken)
        IL_00dd:  ldloc.3
        IL_00de:  dup
        IL_00df:  ldvirtftn  instance class VB$AnonymousType_1`2<string,int32> SpellChecker.Window1/_Closure$__2/_Closure$__4::_Lambda$__10(string)
        IL_00e5:  newobj     instance void class [mscorlib]System.Func`2<string,class VB$AnonymousType_1`2<string,int32>>::.ctor(object,
                                                                                                                                 native int)
        IL_00ea:  call       class [System.Core]System.Linq.ParallelQuery`1<!!1> [System.Core]System.Linq.ParallelEnumerable::Select<string,class VB$AnonymousType_1`2<string,int32>>(class [System.Core]System.Linq.ParallelQuery`1<!!0>,
                                                                                                                                                                                      class [mscorlib]System.Func`2<!!0,!!1>)
        IL_00ef:  ldnull
        IL_00f0:  ldftn      int32 SpellChecker.Window1::_Lambda$__11(class VB$AnonymousType_1`2<string,int32>)
        IL_00f6:  newobj     instance void class [mscorlib]System.Func`2<class VB$AnonymousType_1`2<string,int32>,int32>::.ctor(object,
                                                                                                                                native int)
        IL_00fb:  ldc.i4.s   25
        IL_00fd:  call       class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0> [ParallelExtensionsExtras]System.Linq.ParallelLinqExtensions::TakeTop<class VB$AnonymousType_1`2<string,int32>,int32>(class [System.Core]System.Linq.ParallelQuery`1<!!0>,
                                                                                                                                                                                                                 class [mscorlib]System.Func`2<!!0,!!1>,
                                                                                                                                                                                                                 int32)
        IL_0102:  ldnull
        IL_0103:  ldftn      string SpellChecker.Window1::_Lambda$__12(class VB$AnonymousType_1`2<string,int32>)
        IL_0109:  newobj     instance void class [mscorlib]System.Func`2<class VB$AnonymousType_1`2<string,int32>,string>::.ctor(object,
                                                                                                                                 native int)
        IL_010e:  call       class [mscorlib]System.Collections.Generic.IEnumerable`1<!!1> [System.Core]System.Linq.Enumerable::Select<class VB$AnonymousType_1`2<string,int32>,string>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>,
                                                                                                                                                                                        class [mscorlib]System.Func`2<!!0,!!1>)
        IL_0113:  call       class [mscorlib]System.Collections.Generic.List`1<!!0> [System.Core]System.Linq.Enumerable::ToList<string>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>)
        IL_0118:  stloc.1
//000119:                                                   Select(Function(word) New With {Key .Word = word, .Distance = LevenshteinDistance(word, text, distanceMatrix.Value)}).
//000120:                                                   TakeTop(Function(p) p.Distance, NUM_SUGGESTIONS).
//000121:                                                   Select(Function(p) p.Word).
//000122:                                                   ToList()
//000123:                                           End Using
        IL_0119:  nop
//000124:                                       End If
//000125:                                       sw.Stop()
//000126:                                       Return New With {.Results = results, .Time = sw.Elapsed}
//000127:                                   End Function, token).ContinueWith(Sub(t)
//000128:                                                                         listBox1.ItemsSource =
//000129:                                                                             t.Result.Results.[Select](Function(str, i) String.Format("{0,2}. {1}", i + 1, str))
//000130:                                                                         lblTime.Content = Convert.ToString("Sec: ") & Convert.ToString(t.Result.Time)
//000131:                                                                     End Sub, CancellationToken.None, TaskContinuationOptions.NotOnCanceled,
//000132:                                                                     TaskScheduler.FromCurrentSynchronizationContext)
//000133:         End Sub
//000134: 
//000135:         
//000136:         ''' <summary>Computes the Levenshtein Edit Distance between two enumerables.</summary>
//000137:         ''' <param name="str1">The first string.</param>
//000138:         ''' <param name="str2">The second string.</param>
//000139:         ''' <param name="scratchDistanceMatrix">Scratch space to use for the computation.</param>
//000140:         ''' <returns>The computed edit distance.</returns>
//000141:         Private Shared Function LevenshteinDistance(ByVal str1 As String, ByVal str2 As String, ByVal scratchDistanceMatrix(,) As Integer) As Integer
//000142:             ' Distance matrix contains one extra row and column for the seed values.            
//000143:             For i = 0 To str1.Length
//000144:                 scratchDistanceMatrix(i, 0) = i
//000145:             Next i
//000146:             For j = 0 To str2.Length
//000147:                 scratchDistanceMatrix(0, j) = j
//000148:             Next j
//000149: 
//000150:             For i = 1 To str1.Length
//000151:                 Dim str1Index = i - 1
//000152:                 For j = 1 To str2.Length
//000153:                     Dim str2Index = j - 1
//000154:                     Dim cost = If((str1.Chars(str1Index) = str2.Chars(str2Index)), 0, 1)
//000155: 
//000156:                     Dim deletion = If((i = 0), 1, scratchDistanceMatrix(i - 1, j) + 1)
//000157:                     Dim insertion = If((j = 0), 1, scratchDistanceMatrix(i, j - 1) + 1)
//000158:                     Dim substitution = If((i = 0 OrElse j = 0), cost, scratchDistanceMatrix(i - 1, j - 1) + cost)
//000159: 
//000160:                     scratchDistanceMatrix(i, j) = Math.Min(Math.Min(deletion, insertion), substitution)
//000161: 
//000162:                     ' Check for Transposition.
//000163:                     If i > 1 AndAlso j > 1 AndAlso (str1.Chars(str1Index) = str2.Chars(str2Index - 1)) AndAlso (str1.Chars(str1Index - 1) = str2.Chars(str2Index)) Then
//000164:                         scratchDistanceMatrix(i, j) = Math.Min(scratchDistanceMatrix(i, j), scratchDistanceMatrix(i - 2, j - 2) + cost)
//000165:                     End If
//000166:                 Next j
//000167:             Next i
//000168: 
//000169:             ' Levenshtein distance is the bottom right element.
//000170:             Return scratchDistanceMatrix(str1.Length, str2.Length)
//000171:         End Function
//000172:     End Class
//000173: End Namespace
        IL_011a:  leave.s    IL_013c

      }  // end .try
      finally
      {
        IL_011c:  ldloc.3
        IL_011d:  ldfld      class [mscorlib]System.Threading.ThreadLocal`1<int32[0...,0...]> SpellChecker.Window1/_Closure$__2/_Closure$__4::$VB$Local_distanceMatrix
        IL_0122:  ldnull
        IL_0123:  ceq
        IL_0125:  ldc.i4.0
        IL_0126:  ceq
        IL_0128:  stloc.s    VB$CG$t_bool$S0
        IL_012a:  ldloc.s    VB$CG$t_bool$S0
        IL_012c:  brfalse.s  IL_013a

        IL_012e:  ldloc.3
        IL_012f:  ldfld      class [mscorlib]System.Threading.ThreadLocal`1<int32[0...,0...]> SpellChecker.Window1/_Closure$__2/_Closure$__4::$VB$Local_distanceMatrix
        IL_0134:  callvirt   instance void [mscorlib]System.IDisposable::Dispose()
        IL_0139:  nop
        IL_013a:  nop
        IL_013b:  endfinally
//000124:                                       End If
      }  // end handler
      IL_013c:  nop
//000125:                                       sw.Stop()
      IL_013d:  ldarg.0
      IL_013e:  ldfld      class [System]System.Diagnostics.Stopwatch SpellChecker.Window1/_Closure$__2::$VB$Local_sw
      IL_0143:  callvirt   instance void [System]System.Diagnostics.Stopwatch::Stop()
      IL_0148:  nop
//000126:                                       Return New With {.Results = results, .Time = sw.Elapsed}
      IL_0149:  ldloc.1
      IL_014a:  ldarg.0
      IL_014b:  ldfld      class [System]System.Diagnostics.Stopwatch SpellChecker.Window1/_Closure$__2::$VB$Local_sw
      IL_0150:  callvirt   instance valuetype [mscorlib]System.TimeSpan [System]System.Diagnostics.Stopwatch::get_Elapsed()
      IL_0155:  newobj     instance void class VB$AnonymousType_2`2<class [mscorlib]System.Collections.Generic.List`1<string>,valuetype [mscorlib]System.TimeSpan>::.ctor(!0,
                                                                                                                                                                          !1)
      IL_015a:  stloc.0
      IL_015b:  br.s       IL_015d

//000127:                                   End Function, token).ContinueWith(Sub(t)
      IL_015d:  ldloc.0
      IL_015e:  ret
    } // end of method _Closure$__2::_Lambda$__5

  } // end of class _Closure$__2

  .field private static class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> __ENCList
  .field private class [mscorlib]System.Collections.Generic.List`1<string> _words
  .field private int32 _maxWordLength
  .field private class [mscorlib]System.Threading.CancellationTokenSource _cancellation
  .field private class [PresentationFramework]System.Windows.Controls.ListBox _listBox1
  .custom instance void [mscorlib]System.Runtime.CompilerServices.AccessedThroughPropertyAttribute::.ctor(string) = ( 01 00 08 6C 69 73 74 42 6F 78 31 00 00 )          // ...listBox1..
  .field private class [PresentationFramework]System.Windows.Controls.TextBox _txtInput
  .custom instance void [mscorlib]System.Runtime.CompilerServices.AccessedThroughPropertyAttribute::.ctor(string) = ( 01 00 08 74 78 74 49 6E 70 75 74 00 00 )          // ...txtInput..
  .field private class [PresentationFramework]System.Windows.Controls.Label _lblTime
  .custom instance void [mscorlib]System.Runtime.CompilerServices.AccessedThroughPropertyAttribute::.ctor(string) = ( 01 00 07 6C 62 6C 54 69 6D 65 00 00 )             // ...lblTime..
  .field private class [PresentationFramework]System.Windows.Controls.CheckBox _chkParallel
  .custom instance void [mscorlib]System.Runtime.CompilerServices.AccessedThroughPropertyAttribute::.ctor(string) = ( 01 00 0B 63 68 6B 50 61 72 61 6C 6C 65 6C 00 00 ) // ...chkParallel..
  .field private class [PresentationFramework]System.Windows.Controls.Button _btnLoad
  .custom instance void [mscorlib]System.Runtime.CompilerServices.AccessedThroughPropertyAttribute::.ctor(string) = ( 01 00 07 62 74 6E 4C 6F 61 64 00 00 )             // ...btnLoad..
  .field private bool _contentLoaded
  .method private specialname rtspecialname static 
          void  .cctor() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       12 (0xc)
    .maxstack  8
    IL_0000:  newobj     instance void class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::.ctor()
    IL_0005:  stsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> SpellChecker.Window1::__ENCList
    IL_000a:  nop
    IL_000b:  ret
  } // end of method Window1::.cctor

  .method private static void  __ENCAddToList(object 'value') cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       243 (0xf3)
    .maxstack  4
    .locals init (int32 V_0,
             int32 V_1,
             class [mscorlib]System.WeakReference V_2,
             class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> V_3,
             bool V_4,
             int32 V_5,
             bool V_6,
             bool V_7,
             int32 V_8)
    IL_0000:  nop
    IL_0001:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> SpellChecker.Window1::__ENCList
    IL_0006:  stloc.3
    IL_0007:  ldc.i4.0
    IL_0008:  stloc.s    V_4
    IL_000a:  nop
    .try
    {
      IL_000b:  ldloc.3
      IL_000c:  ldloca.s   V_4
      IL_000e:  call       void [mscorlib]System.Threading.Monitor::Enter(object,
                                                                          bool&)
      IL_0013:  nop
      IL_0014:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> SpellChecker.Window1::__ENCList
      IL_0019:  callvirt   instance int32 class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::get_Count()
      IL_001e:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> SpellChecker.Window1::__ENCList
      IL_0023:  callvirt   instance int32 class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::get_Capacity()
      IL_0028:  ceq
      IL_002a:  stloc.s    V_6
      IL_002c:  ldloc.s    V_6
      IL_002e:  brfalse    IL_00c4

      IL_0033:  ldc.i4.0
      IL_0034:  stloc.0
      IL_0035:  ldc.i4.0
      IL_0036:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> SpellChecker.Window1::__ENCList
      IL_003b:  callvirt   instance int32 class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::get_Count()
      IL_0040:  ldc.i4.1
      IL_0041:  sub.ovf
      IL_0042:  stloc.s    V_5
      IL_0044:  stloc.1
      IL_0045:  br.s       IL_008e

      IL_0047:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> SpellChecker.Window1::__ENCList
      IL_004c:  ldloc.1
      IL_004d:  callvirt   instance !0 class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::get_Item(int32)
      IL_0052:  stloc.2
      IL_0053:  ldloc.2
      IL_0054:  callvirt   instance bool [mscorlib]System.WeakReference::get_IsAlive()
      IL_0059:  stloc.s    V_6
      IL_005b:  ldloc.s    V_6
      IL_005d:  brfalse.s  IL_0088

      IL_005f:  ldloc.1
      IL_0060:  ldloc.0
      IL_0061:  ceq
      IL_0063:  ldc.i4.0
      IL_0064:  ceq
      IL_0066:  stloc.s    V_7
      IL_0068:  ldloc.s    V_7
      IL_006a:  brfalse.s  IL_0083

      IL_006c:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> SpellChecker.Window1::__ENCList
      IL_0071:  ldloc.0
      IL_0072:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> SpellChecker.Window1::__ENCList
      IL_0077:  ldloc.1
      IL_0078:  callvirt   instance !0 class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::get_Item(int32)
      IL_007d:  callvirt   instance void class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::set_Item(int32,
                                                                                                                                           !0)
      IL_0082:  nop
      IL_0083:  nop
      IL_0084:  ldloc.0
      IL_0085:  ldc.i4.1
      IL_0086:  add.ovf
      IL_0087:  stloc.0
      IL_0088:  nop
      IL_0089:  nop
      IL_008a:  ldloc.1
      IL_008b:  ldc.i4.1
      IL_008c:  add.ovf
      IL_008d:  stloc.1
      IL_008e:  ldloc.1
      IL_008f:  ldloc.s    V_5
      IL_0091:  stloc.s    V_8
      IL_0093:  ldloc.s    V_8
      IL_0095:  ble.s      IL_0047

      IL_0097:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> SpellChecker.Window1::__ENCList
      IL_009c:  ldloc.0
      IL_009d:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> SpellChecker.Window1::__ENCList
      IL_00a2:  callvirt   instance int32 class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::get_Count()
      IL_00a7:  ldloc.0
      IL_00a8:  sub.ovf
      IL_00a9:  callvirt   instance void class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::RemoveRange(int32,
                                                                                                                                              int32)
      IL_00ae:  nop
      IL_00af:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> SpellChecker.Window1::__ENCList
      IL_00b4:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> SpellChecker.Window1::__ENCList
      IL_00b9:  callvirt   instance int32 class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::get_Count()
      IL_00be:  callvirt   instance void class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::set_Capacity(int32)
      IL_00c3:  nop
      IL_00c4:  nop
      IL_00c5:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> SpellChecker.Window1::__ENCList
      IL_00ca:  ldarg.0
      IL_00cb:  call       object [mscorlib]System.Runtime.CompilerServices.RuntimeHelpers::GetObjectValue(object)
      IL_00d0:  newobj     instance void [mscorlib]System.WeakReference::.ctor(object)
      IL_00d5:  callvirt   instance void class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::Add(!0)
      IL_00da:  nop
      IL_00db:  nop
      IL_00dc:  leave.s    IL_00f0

    }  // end .try
    finally
    {
      IL_00de:  nop
      IL_00df:  ldloc.s    V_4
      IL_00e1:  stloc.s    V_7
      IL_00e3:  ldloc.s    V_7
      IL_00e5:  brfalse.s  IL_00ee

      IL_00e7:  ldloc.3
      IL_00e8:  call       void [mscorlib]System.Threading.Monitor::Exit(object)
      IL_00ed:  nop
      IL_00ee:  nop
      IL_00ef:  endfinally
    }  // end handler
    IL_00f0:  nop
    IL_00f1:  nop
    IL_00f2:  ret
  } // end of method Window1::__ENCAddToList

  .method public specialname rtspecialname 
          instance void  .ctor() cil managed
  {
    // Code size       24 (0x18)
    .maxstack  8
//000022: 		Public Sub New()
    IL_0000:  nop
//000023: 			InitializeComponent()
//000024: 		End Sub
//000025: 
//000026: 		Private Sub btnLoad_Click(ByVal sender As Object, ByVal e As RoutedEventArgs)
//000027: 			listBox1.ItemsSource = Nothing
//000028: 			txtInput.IsEnabled = False
//000029: 			chkParallel.IsEnabled = False
//000030: 
//000031:             ' Ask the user for a file containing a word list, one word per line.
//000032: 			Dim ofd As New OpenFileDialog()
//000033: 			ofd.Multiselect = False
//000034: 			If ofd.ShowDialog(Me) = True Then
//000035:                 ' If a file was provided, try to load it.
//000036:                 ' Read in all of the words.
//000037:                 ' When we're done, enable the UI.
//000038:                 Task.Factory.StartNew(Sub()
//000039:                                           _words = New List(Of String)(200000)
//000040:                                           Using reader As New StreamReader(ofd.FileName)
//000041:                                               Dim line As String
//000042:                                               line = reader.ReadLine()
//000043:                                               Do While line IsNot Nothing
//000044:                                                   Dim word = line.Trim().ToLower()
//000045:                                                   If Not String.IsNullOrEmpty(word) Then
//000046:                                                       _words.Add(word)
//000047:                                                       If word.Length > _maxWordLength Then
//000048:                                                           _maxWordLength = word.Length
//000049:                                                       End If
//000050:                                                   End If
//000051:                                                   line = reader.ReadLine()
//000052:                                               Loop
//000053:                                           End Using
//000054:                                       End Sub).
//000055:                                   ContinueWith(Sub(t)
//000056:                                                    txtInput.IsEnabled = True
//000057:                                                    chkParallel.IsEnabled = True
//000058:                                                    If t.IsFaulted Then
//000059:                                                        MsgBox(t.Exception.ToString())
//000060:                                                    Else
//000061:                                                        MakeSuggestions()
//000062:                                                    End If
//000063:                                                End Sub, TaskScheduler.FromCurrentSynchronizationContext())
//000064:             
//000065:             End If
//000066: 
//000067: 		End Sub
//000068: 
//000069: 		''' <summary>Redo the suggestions when the text changes.</summary>
//000070: 		Private Sub txtInput_TextChanged(ByVal sender As Object, ByVal e As TextChangedEventArgs)
//000071: 			MakeSuggestions()
//000072: 		End Sub
//000073: 
//000074: 		''' <summary>Redo the suggestions when parallel vs non-parallel changes.</summary>
//000075: 		Private Sub chkParallel_CheckedChanged(ByVal sender As Object, ByVal e As RoutedEventArgs)
//000076: 			MakeSuggestions()
//000077: 		End Sub
//000078: 
//000079:         '' <summary>Asynchronous make suggestions for correct spellings of the provided word.</summary>
//000080: 
//000081:         Private Sub MakeSuggestions()
//000082:             ' Limit the number of suggestions.
//000083:             Const NUM_SUGGESTIONS = 25
//000084: 
//000085:             ' Run serially or in parallel.
//000086:             Dim sequential = Not (chkParallel.IsChecked.HasValue AndAlso chkParallel.IsChecked.Value)
//000087:             Dim text = txtInput.Text
//000088: 
//000089:             ' If there's no text to evaluate, just bail.
//000090:             If String.IsNullOrEmpty(text) Then
//000091:                 listBox1.ItemsSource = Nothing
//000092:                 Return
//000093:             End If
//000094: 
//000095:             ' Every time the text is changed, we want to cancel the previous operation.
//000096:             If _cancellation IsNot Nothing Then
//000097:                 _cancellation.Cancel()
//000098:             End If
//000099:             _cancellation = New CancellationTokenSource()
//000100:             Dim token = _cancellation.Token
//000101: 
//000102:             ' Time the operation and kick it off.
//000103:             Dim sw = Stopwatch.StartNew()
//000104: 
//000105:             Task.Factory.StartNew(Function()
//000106:                                       ' Return both the spelling suggestions and the elapsed time
//000107:                                       Dim results As List(Of String) = Nothing
//000108:                                       If sequential Then
//000109:                                           Dim distanceMatrix = New Integer(_maxWordLength, _maxWordLength) {}
//000110:                                           results = _words.
//000111:                                               Select(Function(word) New With {Key .Word = word, Key .Distance = LevenshteinDistance(word, text, distanceMatrix)}).
//000112:                                               OrderBy(Function(p) p.Distance).
//000113:                                               Take(NUM_SUGGESTIONS).
//000114:                                               Select(Function(p) p.Word).
//000115:                                               ToList()
//000116:                                       Else
//000117:                                           Using distanceMatrix = New ThreadLocal(Of Integer(,))(Function() New Integer(_maxWordLength, _maxWordLength) {})
//000118:                                               results = _words.AsParallel().WithCancellation(token).
//000119:                                                   Select(Function(word) New With {Key .Word = word, .Distance = LevenshteinDistance(word, text, distanceMatrix.Value)}).
//000120:                                                   TakeTop(Function(p) p.Distance, NUM_SUGGESTIONS).
//000121:                                                   Select(Function(p) p.Word).
//000122:                                                   ToList()
//000123:                                           End Using
//000124:                                       End If
//000125:                                       sw.Stop()
//000126:                                       Return New With {.Results = results, .Time = sw.Elapsed}
//000127:                                   End Function, token).ContinueWith(Sub(t)
//000128:                                                                         listBox1.ItemsSource =
//000129:                                                                             t.Result.Results.[Select](Function(str, i) String.Format("{0,2}. {1}", i + 1, str))
//000130:                                                                         lblTime.Content = Convert.ToString("Sec: ") & Convert.ToString(t.Result.Time)
//000131:                                                                     End Sub, CancellationToken.None, TaskContinuationOptions.NotOnCanceled,
//000132:                                                                     TaskScheduler.FromCurrentSynchronizationContext)
//000133:         End Sub
//000134: 
//000135:         
//000136:         ''' <summary>Computes the Levenshtein Edit Distance between two enumerables.</summary>
//000137:         ''' <param name="str1">The first string.</param>
//000138:         ''' <param name="str2">The second string.</param>
//000139:         ''' <param name="scratchDistanceMatrix">Scratch space to use for the computation.</param>
//000140:         ''' <returns>The computed edit distance.</returns>
//000141:         Private Shared Function LevenshteinDistance(ByVal str1 As String, ByVal str2 As String, ByVal scratchDistanceMatrix(,) As Integer) As Integer
//000142:             ' Distance matrix contains one extra row and column for the seed values.            
//000143:             For i = 0 To str1.Length
//000144:                 scratchDistanceMatrix(i, 0) = i
//000145:             Next i
//000146:             For j = 0 To str2.Length
//000147:                 scratchDistanceMatrix(0, j) = j
//000148:             Next j
//000149: 
//000150:             For i = 1 To str1.Length
//000151:                 Dim str1Index = i - 1
//000152:                 For j = 1 To str2.Length
//000153:                     Dim str2Index = j - 1
//000154:                     Dim cost = If((str1.Chars(str1Index) = str2.Chars(str2Index)), 0, 1)
//000155: 
//000156:                     Dim deletion = If((i = 0), 1, scratchDistanceMatrix(i - 1, j) + 1)
//000157:                     Dim insertion = If((j = 0), 1, scratchDistanceMatrix(i, j - 1) + 1)
//000158:                     Dim substitution = If((i = 0 OrElse j = 0), cost, scratchDistanceMatrix(i - 1, j - 1) + cost)
//000159: 
//000160:                     scratchDistanceMatrix(i, j) = Math.Min(Math.Min(deletion, insertion), substitution)
//000161: 
//000162:                     ' Check for Transposition.
//000163:                     If i > 1 AndAlso j > 1 AndAlso (str1.Chars(str1Index) = str2.Chars(str2Index - 1)) AndAlso (str1.Chars(str1Index - 1) = str2.Chars(str2Index)) Then
//000164:                         scratchDistanceMatrix(i, j) = Math.Min(scratchDistanceMatrix(i, j), scratchDistanceMatrix(i - 2, j - 2) + cost)
//000165:                     End If
//000166:                 Next j
//000167:             Next i
//000168: 
//000169:             ' Levenshtein distance is the bottom right element.
//000170:             Return scratchDistanceMatrix(str1.Length, str2.Length)
//000171:         End Function
//000172:     End Class
//000173: End Namespace
    IL_0001:  ldarg.0
    IL_0002:  call       instance void [PresentationFramework]System.Windows.Window::.ctor()
    IL_0007:  nop
    IL_0008:  ldarg.0
    IL_0009:  call       void SpellChecker.Window1::__ENCAddToList(object)
    IL_000e:  nop
//000023: 			InitializeComponent()
    IL_000f:  ldarg.0
    IL_0010:  callvirt   instance void SpellChecker.Window1::InitializeComponent()
    IL_0015:  nop
//000024: 		End Sub
    IL_0016:  nop
    IL_0017:  ret
  } // end of method Window1::.ctor

  .method private instance void  btnLoad_Click(object sender,
                                               class [PresentationCore]System.Windows.RoutedEventArgs e) cil managed
  {
    // Code size       197 (0xc5)
    .maxstack  3
    .locals init ([0] class SpellChecker.Window1/_Closure$__1 $VB$Closure_ClosureVariable_19_4F,
             [1] valuetype [mscorlib]System.Nullable`1<bool> VB$LW$t_struct$S0,
             [2] valuetype [mscorlib]System.Nullable`1<bool> VB$LW$t_struct$S1,
             [3] bool VB$LW$t_bool$S0,
             [4] valuetype [mscorlib]System.Nullable`1<bool> VB$LW$t_struct$N2,
             [5] valuetype [mscorlib]System.Nullable`1<bool> VB$LW$t_struct$S3,
             [6] bool VB$CG$t_bool$S0)
//000025: 
//000026: 		Private Sub btnLoad_Click(ByVal sender As Object, ByVal e As RoutedEventArgs)
    IL_0000:  nop
//000027: 			listBox1.ItemsSource = Nothing
//000028: 			txtInput.IsEnabled = False
//000029: 			chkParallel.IsEnabled = False
//000030: 
//000031:             ' Ask the user for a file containing a word list, one word per line.
//000032: 			Dim ofd As New OpenFileDialog()
//000033: 			ofd.Multiselect = False
//000034: 			If ofd.ShowDialog(Me) = True Then
//000035:                 ' If a file was provided, try to load it.
//000036:                 ' Read in all of the words.
//000037:                 ' When we're done, enable the UI.
//000038:                 Task.Factory.StartNew(Sub()
//000039:                                           _words = New List(Of String)(200000)
//000040:                                           Using reader As New StreamReader(ofd.FileName)
//000041:                                               Dim line As String
//000042:                                               line = reader.ReadLine()
//000043:                                               Do While line IsNot Nothing
//000044:                                                   Dim word = line.Trim().ToLower()
//000045:                                                   If Not String.IsNullOrEmpty(word) Then
//000046:                                                       _words.Add(word)
//000047:                                                       If word.Length > _maxWordLength Then
//000048:                                                           _maxWordLength = word.Length
//000049:                                                       End If
//000050:                                                   End If
//000051:                                                   line = reader.ReadLine()
//000052:                                               Loop
//000053:                                           End Using
//000054:                                       End Sub).
//000055:                                   ContinueWith(Sub(t)
//000056:                                                    txtInput.IsEnabled = True
//000057:                                                    chkParallel.IsEnabled = True
//000058:                                                    If t.IsFaulted Then
//000059:                                                        MsgBox(t.Exception.ToString())
//000060:                                                    Else
//000061:                                                        MakeSuggestions()
//000062:                                                    End If
//000063:                                                End Sub, TaskScheduler.FromCurrentSynchronizationContext())
//000064:             
//000065:             End If
//000066: 
//000067: 		End Sub
//000068: 
//000069: 		''' <summary>Redo the suggestions when the text changes.</summary>
//000070: 		Private Sub txtInput_TextChanged(ByVal sender As Object, ByVal e As TextChangedEventArgs)
//000071: 			MakeSuggestions()
//000072: 		End Sub
//000073: 
//000074: 		''' <summary>Redo the suggestions when parallel vs non-parallel changes.</summary>
//000075: 		Private Sub chkParallel_CheckedChanged(ByVal sender As Object, ByVal e As RoutedEventArgs)
//000076: 			MakeSuggestions()
//000077: 		End Sub
//000078: 
//000079:         '' <summary>Asynchronous make suggestions for correct spellings of the provided word.</summary>
//000080: 
//000081:         Private Sub MakeSuggestions()
//000082:             ' Limit the number of suggestions.
//000083:             Const NUM_SUGGESTIONS = 25
//000084: 
//000085:             ' Run serially or in parallel.
//000086:             Dim sequential = Not (chkParallel.IsChecked.HasValue AndAlso chkParallel.IsChecked.Value)
//000087:             Dim text = txtInput.Text
//000088: 
//000089:             ' If there's no text to evaluate, just bail.
//000090:             If String.IsNullOrEmpty(text) Then
//000091:                 listBox1.ItemsSource = Nothing
//000092:                 Return
//000093:             End If
//000094: 
//000095:             ' Every time the text is changed, we want to cancel the previous operation.
//000096:             If _cancellation IsNot Nothing Then
//000097:                 _cancellation.Cancel()
//000098:             End If
//000099:             _cancellation = New CancellationTokenSource()
//000100:             Dim token = _cancellation.Token
//000101: 
//000102:             ' Time the operation and kick it off.
//000103:             Dim sw = Stopwatch.StartNew()
//000104: 
//000105:             Task.Factory.StartNew(Function()
//000106:                                       ' Return both the spelling suggestions and the elapsed time
//000107:                                       Dim results As List(Of String) = Nothing
//000108:                                       If sequential Then
//000109:                                           Dim distanceMatrix = New Integer(_maxWordLength, _maxWordLength) {}
//000110:                                           results = _words.
//000111:                                               Select(Function(word) New With {Key .Word = word, Key .Distance = LevenshteinDistance(word, text, distanceMatrix)}).
//000112:                                               OrderBy(Function(p) p.Distance).
//000113:                                               Take(NUM_SUGGESTIONS).
//000114:                                               Select(Function(p) p.Word).
//000115:                                               ToList()
//000116:                                       Else
//000117:                                           Using distanceMatrix = New ThreadLocal(Of Integer(,))(Function() New Integer(_maxWordLength, _maxWordLength) {})
//000118:                                               results = _words.AsParallel().WithCancellation(token).
//000119:                                                   Select(Function(word) New With {Key .Word = word, .Distance = LevenshteinDistance(word, text, distanceMatrix.Value)}).
//000120:                                                   TakeTop(Function(p) p.Distance, NUM_SUGGESTIONS).
//000121:                                                   Select(Function(p) p.Word).
//000122:                                                   ToList()
//000123:                                           End Using
//000124:                                       End If
//000125:                                       sw.Stop()
//000126:                                       Return New With {.Results = results, .Time = sw.Elapsed}
//000127:                                   End Function, token).ContinueWith(Sub(t)
//000128:                                                                         listBox1.ItemsSource =
//000129:                                                                             t.Result.Results.[Select](Function(str, i) String.Format("{0,2}. {1}", i + 1, str))
//000130:                                                                         lblTime.Content = Convert.ToString("Sec: ") & Convert.ToString(t.Result.Time)
//000131:                                                                     End Sub, CancellationToken.None, TaskContinuationOptions.NotOnCanceled,
//000132:                                                                     TaskScheduler.FromCurrentSynchronizationContext)
//000133:         End Sub
//000134: 
//000135:         
//000136:         ''' <summary>Computes the Levenshtein Edit Distance between two enumerables.</summary>
//000137:         ''' <param name="str1">The first string.</param>
//000138:         ''' <param name="str2">The second string.</param>
//000139:         ''' <param name="scratchDistanceMatrix">Scratch space to use for the computation.</param>
//000140:         ''' <returns>The computed edit distance.</returns>
//000141:         Private Shared Function LevenshteinDistance(ByVal str1 As String, ByVal str2 As String, ByVal scratchDistanceMatrix(,) As Integer) As Integer
//000142:             ' Distance matrix contains one extra row and column for the seed values.            
//000143:             For i = 0 To str1.Length
//000144:                 scratchDistanceMatrix(i, 0) = i
//000145:             Next i
//000146:             For j = 0 To str2.Length
//000147:                 scratchDistanceMatrix(0, j) = j
//000148:             Next j
//000149: 
//000150:             For i = 1 To str1.Length
//000151:                 Dim str1Index = i - 1
//000152:                 For j = 1 To str2.Length
//000153:                     Dim str2Index = j - 1
//000154:                     Dim cost = If((str1.Chars(str1Index) = str2.Chars(str2Index)), 0, 1)
//000155: 
//000156:                     Dim deletion = If((i = 0), 1, scratchDistanceMatrix(i - 1, j) + 1)
//000157:                     Dim insertion = If((j = 0), 1, scratchDistanceMatrix(i, j - 1) + 1)
//000158:                     Dim substitution = If((i = 0 OrElse j = 0), cost, scratchDistanceMatrix(i - 1, j - 1) + cost)
//000159: 
//000160:                     scratchDistanceMatrix(i, j) = Math.Min(Math.Min(deletion, insertion), substitution)
//000161: 
//000162:                     ' Check for Transposition.
//000163:                     If i > 1 AndAlso j > 1 AndAlso (str1.Chars(str1Index) = str2.Chars(str2Index - 1)) AndAlso (str1.Chars(str1Index - 1) = str2.Chars(str2Index)) Then
//000164:                         scratchDistanceMatrix(i, j) = Math.Min(scratchDistanceMatrix(i, j), scratchDistanceMatrix(i - 2, j - 2) + cost)
//000165:                     End If
//000166:                 Next j
//000167:             Next i
//000168: 
//000169:             ' Levenshtein distance is the bottom right element.
//000170:             Return scratchDistanceMatrix(str1.Length, str2.Length)
//000171:         End Function
//000172:     End Class
//000173: End Namespace
    IL_0001:  newobj     instance void SpellChecker.Window1/_Closure$__1::.ctor()
    IL_0006:  stloc.0
    IL_0007:  ldloc.0
    IL_0008:  ldarg.0
    IL_0009:  stfld      class SpellChecker.Window1 SpellChecker.Window1/_Closure$__1::$VB$Me
//000027: 			listBox1.ItemsSource = Nothing
    IL_000e:  ldarg.0
    IL_000f:  callvirt   instance class [PresentationFramework]System.Windows.Controls.ListBox SpellChecker.Window1::get_listBox1()
    IL_0014:  ldnull
    IL_0015:  callvirt   instance void [PresentationFramework]System.Windows.Controls.ItemsControl::set_ItemsSource(class [mscorlib]System.Collections.IEnumerable)
    IL_001a:  nop
//000028: 			txtInput.IsEnabled = False
    IL_001b:  ldarg.0
    IL_001c:  callvirt   instance class [PresentationFramework]System.Windows.Controls.TextBox SpellChecker.Window1::get_txtInput()
    IL_0021:  ldc.i4.0
    IL_0022:  callvirt   instance void [PresentationCore]System.Windows.UIElement::set_IsEnabled(bool)
    IL_0027:  nop
//000029: 			chkParallel.IsEnabled = False
    IL_0028:  ldarg.0
    IL_0029:  callvirt   instance class [PresentationFramework]System.Windows.Controls.CheckBox SpellChecker.Window1::get_chkParallel()
    IL_002e:  ldc.i4.0
    IL_002f:  callvirt   instance void [PresentationCore]System.Windows.UIElement::set_IsEnabled(bool)
    IL_0034:  nop
//000030: 
//000031:             ' Ask the user for a file containing a word list, one word per line.
//000032: 			Dim ofd As New OpenFileDialog()
    IL_0035:  ldloc.0
    IL_0036:  newobj     instance void [PresentationFramework]Microsoft.Win32.OpenFileDialog::.ctor()
    IL_003b:  stfld      class [PresentationFramework]Microsoft.Win32.OpenFileDialog SpellChecker.Window1/_Closure$__1::$VB$Local_ofd
//000033: 			ofd.Multiselect = False
    IL_0040:  ldloc.0
    IL_0041:  ldfld      class [PresentationFramework]Microsoft.Win32.OpenFileDialog SpellChecker.Window1/_Closure$__1::$VB$Local_ofd
    IL_0046:  ldc.i4.0
    IL_0047:  callvirt   instance void [PresentationFramework]Microsoft.Win32.OpenFileDialog::set_Multiselect(bool)
    IL_004c:  nop
//000034: 			If ofd.ShowDialog(Me) = True Then
    IL_004d:  ldc.i4.1
    IL_004e:  stloc.3
    IL_004f:  ldloc.0
    IL_0050:  ldfld      class [PresentationFramework]Microsoft.Win32.OpenFileDialog SpellChecker.Window1/_Closure$__1::$VB$Local_ofd
    IL_0055:  ldarg.0
    IL_0056:  callvirt   instance valuetype [mscorlib]System.Nullable`1<bool> [PresentationFramework]Microsoft.Win32.CommonDialog::ShowDialog(class [PresentationFramework]System.Windows.Window)
    IL_005b:  stloc.2
    IL_005c:  ldloca.s   VB$LW$t_struct$S1
    IL_005e:  call       instance bool valuetype [mscorlib]System.Nullable`1<bool>::get_HasValue()
    IL_0063:  brtrue.s   IL_0071

    IL_0065:  ldloca.s   VB$LW$t_struct$N2
    IL_0067:  initobj    valuetype [mscorlib]System.Nullable`1<bool>
    IL_006d:  ldloc.s    VB$LW$t_struct$N2
    IL_006f:  br.s       IL_0085

    IL_0071:  ldloca.s   VB$LW$t_struct$S3
    IL_0073:  ldloca.s   VB$LW$t_struct$S1
    IL_0075:  call       instance !0 valuetype [mscorlib]System.Nullable`1<bool>::GetValueOrDefault()
    IL_007a:  ldloc.3
    IL_007b:  ceq
    IL_007d:  call       instance void valuetype [mscorlib]System.Nullable`1<bool>::.ctor(!0)
    IL_0082:  nop
    IL_0083:  ldloc.s    VB$LW$t_struct$S3
    IL_0085:  stloc.1
    IL_0086:  ldloca.s   VB$LW$t_struct$S0
    IL_0088:  call       instance !0 valuetype [mscorlib]System.Nullable`1<bool>::GetValueOrDefault()
    IL_008d:  stloc.s    VB$CG$t_bool$S0
//000035:                 ' If a file was provided, try to load it.
//000036:                 ' Read in all of the words.
//000037:                 ' When we're done, enable the UI.
//000038:                 Task.Factory.StartNew(Sub()
//000039:                                           _words = New List(Of String)(200000)
//000040:                                           Using reader As New StreamReader(ofd.FileName)
//000041:                                               Dim line As String
//000042:                                               line = reader.ReadLine()
//000043:                                               Do While line IsNot Nothing
//000044:                                                   Dim word = line.Trim().ToLower()
//000045:                                                   If Not String.IsNullOrEmpty(word) Then
//000046:                                                       _words.Add(word)
//000047:                                                       If word.Length > _maxWordLength Then
//000048:                                                           _maxWordLength = word.Length
//000049:                                                       End If
//000050:                                                   End If
//000051:                                                   line = reader.ReadLine()
//000052:                                               Loop
//000053:                                           End Using
//000054:                                       End Sub).
//000055:                                   ContinueWith(Sub(t)
//000056:                                                    txtInput.IsEnabled = True
//000057:                                                    chkParallel.IsEnabled = True
//000058:                                                    If t.IsFaulted Then
//000059:                                                        MsgBox(t.Exception.ToString())
//000060:                                                    Else
//000061:                                                        MakeSuggestions()
//000062:                                                    End If
//000063:                                                End Sub, TaskScheduler.FromCurrentSynchronizationContext())
//000064:             
//000065:             End If
//000066: 
//000067: 		End Sub
//000068: 
//000069: 		''' <summary>Redo the suggestions when the text changes.</summary>
//000070: 		Private Sub txtInput_TextChanged(ByVal sender As Object, ByVal e As TextChangedEventArgs)
//000071: 			MakeSuggestions()
//000072: 		End Sub
//000073: 
//000074: 		''' <summary>Redo the suggestions when parallel vs non-parallel changes.</summary>
//000075: 		Private Sub chkParallel_CheckedChanged(ByVal sender As Object, ByVal e As RoutedEventArgs)
//000076: 			MakeSuggestions()
//000077: 		End Sub
//000078: 
//000079:         '' <summary>Asynchronous make suggestions for correct spellings of the provided word.</summary>
//000080: 
//000081:         Private Sub MakeSuggestions()
//000082:             ' Limit the number of suggestions.
//000083:             Const NUM_SUGGESTIONS = 25
//000084: 
//000085:             ' Run serially or in parallel.
//000086:             Dim sequential = Not (chkParallel.IsChecked.HasValue AndAlso chkParallel.IsChecked.Value)
//000087:             Dim text = txtInput.Text
//000088: 
//000089:             ' If there's no text to evaluate, just bail.
//000090:             If String.IsNullOrEmpty(text) Then
//000091:                 listBox1.ItemsSource = Nothing
//000092:                 Return
//000093:             End If
//000094: 
//000095:             ' Every time the text is changed, we want to cancel the previous operation.
//000096:             If _cancellation IsNot Nothing Then
//000097:                 _cancellation.Cancel()
//000098:             End If
//000099:             _cancellation = New CancellationTokenSource()
//000100:             Dim token = _cancellation.Token
//000101: 
//000102:             ' Time the operation and kick it off.
//000103:             Dim sw = Stopwatch.StartNew()
//000104: 
//000105:             Task.Factory.StartNew(Function()
//000106:                                       ' Return both the spelling suggestions and the elapsed time
//000107:                                       Dim results As List(Of String) = Nothing
//000108:                                       If sequential Then
//000109:                                           Dim distanceMatrix = New Integer(_maxWordLength, _maxWordLength) {}
//000110:                                           results = _words.
//000111:                                               Select(Function(word) New With {Key .Word = word, Key .Distance = LevenshteinDistance(word, text, distanceMatrix)}).
//000112:                                               OrderBy(Function(p) p.Distance).
//000113:                                               Take(NUM_SUGGESTIONS).
//000114:                                               Select(Function(p) p.Word).
//000115:                                               ToList()
//000116:                                       Else
//000117:                                           Using distanceMatrix = New ThreadLocal(Of Integer(,))(Function() New Integer(_maxWordLength, _maxWordLength) {})
//000118:                                               results = _words.AsParallel().WithCancellation(token).
//000119:                                                   Select(Function(word) New With {Key .Word = word, .Distance = LevenshteinDistance(word, text, distanceMatrix.Value)}).
//000120:                                                   TakeTop(Function(p) p.Distance, NUM_SUGGESTIONS).
//000121:                                                   Select(Function(p) p.Word).
//000122:                                                   ToList()
//000123:                                           End Using
//000124:                                       End If
//000125:                                       sw.Stop()
//000126:                                       Return New With {.Results = results, .Time = sw.Elapsed}
//000127:                                   End Function, token).ContinueWith(Sub(t)
//000128:                                                                         listBox1.ItemsSource =
//000129:                                                                             t.Result.Results.[Select](Function(str, i) String.Format("{0,2}. {1}", i + 1, str))
//000130:                                                                         lblTime.Content = Convert.ToString("Sec: ") & Convert.ToString(t.Result.Time)
//000131:                                                                     End Sub, CancellationToken.None, TaskContinuationOptions.NotOnCanceled,
//000132:                                                                     TaskScheduler.FromCurrentSynchronizationContext)
//000133:         End Sub
//000134: 
//000135:         
//000136:         ''' <summary>Computes the Levenshtein Edit Distance between two enumerables.</summary>
//000137:         ''' <param name="str1">The first string.</param>
//000138:         ''' <param name="str2">The second string.</param>
//000139:         ''' <param name="scratchDistanceMatrix">Scratch space to use for the computation.</param>
//000140:         ''' <returns>The computed edit distance.</returns>
//000141:         Private Shared Function LevenshteinDistance(ByVal str1 As String, ByVal str2 As String, ByVal scratchDistanceMatrix(,) As Integer) As Integer
//000142:             ' Distance matrix contains one extra row and column for the seed values.            
//000143:             For i = 0 To str1.Length
//000144:                 scratchDistanceMatrix(i, 0) = i
//000145:             Next i
//000146:             For j = 0 To str2.Length
//000147:                 scratchDistanceMatrix(0, j) = j
//000148:             Next j
//000149: 
//000150:             For i = 1 To str1.Length
//000151:                 Dim str1Index = i - 1
//000152:                 For j = 1 To str2.Length
//000153:                     Dim str2Index = j - 1
//000154:                     Dim cost = If((str1.Chars(str1Index) = str2.Chars(str2Index)), 0, 1)
//000155: 
//000156:                     Dim deletion = If((i = 0), 1, scratchDistanceMatrix(i - 1, j) + 1)
//000157:                     Dim insertion = If((j = 0), 1, scratchDistanceMatrix(i, j - 1) + 1)
//000158:                     Dim substitution = If((i = 0 OrElse j = 0), cost, scratchDistanceMatrix(i - 1, j - 1) + cost)
//000159: 
//000160:                     scratchDistanceMatrix(i, j) = Math.Min(Math.Min(deletion, insertion), substitution)
//000161: 
//000162:                     ' Check for Transposition.
//000163:                     If i > 1 AndAlso j > 1 AndAlso (str1.Chars(str1Index) = str2.Chars(str2Index - 1)) AndAlso (str1.Chars(str1Index - 1) = str2.Chars(str2Index)) Then
//000164:                         scratchDistanceMatrix(i, j) = Math.Min(scratchDistanceMatrix(i, j), scratchDistanceMatrix(i - 2, j - 2) + cost)
//000165:                     End If
//000166:                 Next j
//000167:             Next i
//000168: 
//000169:             ' Levenshtein distance is the bottom right element.
//000170:             Return scratchDistanceMatrix(str1.Length, str2.Length)
//000171:         End Function
//000172:     End Class
//000173: End Namespace
    IL_008f:  ldloc.s    VB$CG$t_bool$S0
    IL_0091:  brfalse.s  IL_00c2

//000038:                 Task.Factory.StartNew(Sub()
    IL_0093:  call       class [mscorlib]System.Threading.Tasks.TaskFactory [mscorlib]System.Threading.Tasks.Task::get_Factory()
    IL_0098:  ldloc.0
    IL_0099:  dup
    IL_009a:  ldvirtftn  instance void SpellChecker.Window1/_Closure$__1::_Lambda$__2()
    IL_00a0:  newobj     instance void [mscorlib]System.Action::.ctor(object,
                                                                      native int)
    IL_00a5:  callvirt   instance class [mscorlib]System.Threading.Tasks.Task [mscorlib]System.Threading.Tasks.TaskFactory::StartNew(class [mscorlib]System.Action)
    IL_00aa:  ldarg.0
    IL_00ab:  dup
    IL_00ac:  ldvirtftn  instance void SpellChecker.Window1::_Lambda$__1(class [mscorlib]System.Threading.Tasks.Task)
    IL_00b2:  newobj     instance void class [mscorlib]System.Action`1<class [mscorlib]System.Threading.Tasks.Task>::.ctor(object,
                                                                                                                           native int)
    IL_00b7:  call       class [mscorlib]System.Threading.Tasks.TaskScheduler [mscorlib]System.Threading.Tasks.TaskScheduler::FromCurrentSynchronizationContext()
    IL_00bc:  callvirt   instance class [mscorlib]System.Threading.Tasks.Task [mscorlib]System.Threading.Tasks.Task::ContinueWith(class [mscorlib]System.Action`1<class [mscorlib]System.Threading.Tasks.Task>,
                                                                                                                                  class [mscorlib]System.Threading.Tasks.TaskScheduler)
    IL_00c1:  pop
//000039:                                           _words = New List(Of String)(200000)
//000040:                                           Using reader As New StreamReader(ofd.FileName)
//000041:                                               Dim line As String
//000042:                                               line = reader.ReadLine()
//000043:                                               Do While line IsNot Nothing
//000044:                                                   Dim word = line.Trim().ToLower()
//000045:                                                   If Not String.IsNullOrEmpty(word) Then
//000046:                                                       _words.Add(word)
//000047:                                                       If word.Length > _maxWordLength Then
//000048:                                                           _maxWordLength = word.Length
//000049:                                                       End If
//000050:                                                   End If
//000051:                                                   line = reader.ReadLine()
//000052:                                               Loop
//000053:                                           End Using
//000054:                                       End Sub).
//000055:                                   ContinueWith(Sub(t)
//000056:                                                    txtInput.IsEnabled = True
//000057:                                                    chkParallel.IsEnabled = True
//000058:                                                    If t.IsFaulted Then
//000059:                                                        MsgBox(t.Exception.ToString())
//000060:                                                    Else
//000061:                                                        MakeSuggestions()
//000062:                                                    End If
//000063:                                                End Sub, TaskScheduler.FromCurrentSynchronizationContext())
//000064:             
//000065:             End If
    IL_00c2:  nop
//000066: 
//000067: 		End Sub
    IL_00c3:  nop
    IL_00c4:  ret
  } // end of method Window1::btnLoad_Click

  .method private instance void  txtInput_TextChanged(object sender,
                                                      class [PresentationFramework]System.Windows.Controls.TextChangedEventArgs e) cil managed
  {
    // Code size       10 (0xa)
    .maxstack  8
//000068: 
//000069: 		''' <summary>Redo the suggestions when the text changes.</summary>
//000070: 		Private Sub txtInput_TextChanged(ByVal sender As Object, ByVal e As TextChangedEventArgs)
    IL_0000:  nop
//000071: 			MakeSuggestions()
    IL_0001:  ldarg.0
    IL_0002:  callvirt   instance void SpellChecker.Window1::MakeSuggestions()
    IL_0007:  nop
//000072: 		End Sub
    IL_0008:  nop
    IL_0009:  ret
  } // end of method Window1::txtInput_TextChanged

  .method private instance void  chkParallel_CheckedChanged(object sender,
                                                            class [PresentationCore]System.Windows.RoutedEventArgs e) cil managed
  {
    // Code size       10 (0xa)
    .maxstack  8
//000073: 
//000074: 		''' <summary>Redo the suggestions when parallel vs non-parallel changes.</summary>
//000075: 		Private Sub chkParallel_CheckedChanged(ByVal sender As Object, ByVal e As RoutedEventArgs)
    IL_0000:  nop
//000076: 			MakeSuggestions()
    IL_0001:  ldarg.0
    IL_0002:  callvirt   instance void SpellChecker.Window1::MakeSuggestions()
    IL_0007:  nop
//000077: 		End Sub
    IL_0008:  nop
    IL_0009:  ret
  } // end of method Window1::chkParallel_CheckedChanged

  .method private instance void  MakeSuggestions() cil managed
  {
    // Code size       251 (0xfb)
    .maxstack  5
    .locals init ([0] class SpellChecker.Window1/_Closure$__2 $VB$Closure_ClosureVariable_50_25,
             [1] valuetype [mscorlib]System.Nullable`1<bool> VB$t_struct$S0,
             [2] valuetype [mscorlib]System.Nullable`1<bool> VB$t_struct$S1,
             [3] bool VB$CG$t_bool$S0)
//000078: 
//000079:         '' <summary>Asynchronous make suggestions for correct spellings of the provided word.</summary>
//000080: 
//000081:         Private Sub MakeSuggestions()
    IL_0000:  nop
//000082:             ' Limit the number of suggestions.
//000083:             Const NUM_SUGGESTIONS = 25
//000084: 
//000085:             ' Run serially or in parallel.
//000086:             Dim sequential = Not (chkParallel.IsChecked.HasValue AndAlso chkParallel.IsChecked.Value)
//000087:             Dim text = txtInput.Text
//000088: 
//000089:             ' If there's no text to evaluate, just bail.
//000090:             If String.IsNullOrEmpty(text) Then
//000091:                 listBox1.ItemsSource = Nothing
//000092:                 Return
//000093:             End If
//000094: 
//000095:             ' Every time the text is changed, we want to cancel the previous operation.
//000096:             If _cancellation IsNot Nothing Then
//000097:                 _cancellation.Cancel()
//000098:             End If
//000099:             _cancellation = New CancellationTokenSource()
//000100:             Dim token = _cancellation.Token
//000101: 
//000102:             ' Time the operation and kick it off.
//000103:             Dim sw = Stopwatch.StartNew()
//000104: 
//000105:             Task.Factory.StartNew(Function()
//000106:                                       ' Return both the spelling suggestions and the elapsed time
//000107:                                       Dim results As List(Of String) = Nothing
//000108:                                       If sequential Then
//000109:                                           Dim distanceMatrix = New Integer(_maxWordLength, _maxWordLength) {}
//000110:                                           results = _words.
//000111:                                               Select(Function(word) New With {Key .Word = word, Key .Distance = LevenshteinDistance(word, text, distanceMatrix)}).
//000112:                                               OrderBy(Function(p) p.Distance).
//000113:                                               Take(NUM_SUGGESTIONS).
//000114:                                               Select(Function(p) p.Word).
//000115:                                               ToList()
//000116:                                       Else
//000117:                                           Using distanceMatrix = New ThreadLocal(Of Integer(,))(Function() New Integer(_maxWordLength, _maxWordLength) {})
//000118:                                               results = _words.AsParallel().WithCancellation(token).
//000119:                                                   Select(Function(word) New With {Key .Word = word, .Distance = LevenshteinDistance(word, text, distanceMatrix.Value)}).
//000120:                                                   TakeTop(Function(p) p.Distance, NUM_SUGGESTIONS).
//000121:                                                   Select(Function(p) p.Word).
//000122:                                                   ToList()
//000123:                                           End Using
//000124:                                       End If
//000125:                                       sw.Stop()
//000126:                                       Return New With {.Results = results, .Time = sw.Elapsed}
//000127:                                   End Function, token).ContinueWith(Sub(t)
//000128:                                                                         listBox1.ItemsSource =
//000129:                                                                             t.Result.Results.[Select](Function(str, i) String.Format("{0,2}. {1}", i + 1, str))
//000130:                                                                         lblTime.Content = Convert.ToString("Sec: ") & Convert.ToString(t.Result.Time)
//000131:                                                                     End Sub, CancellationToken.None, TaskContinuationOptions.NotOnCanceled,
//000132:                                                                     TaskScheduler.FromCurrentSynchronizationContext)
//000133:         End Sub
//000134: 
//000135:         
//000136:         ''' <summary>Computes the Levenshtein Edit Distance between two enumerables.</summary>
//000137:         ''' <param name="str1">The first string.</param>
//000138:         ''' <param name="str2">The second string.</param>
//000139:         ''' <param name="scratchDistanceMatrix">Scratch space to use for the computation.</param>
//000140:         ''' <returns>The computed edit distance.</returns>
//000141:         Private Shared Function LevenshteinDistance(ByVal str1 As String, ByVal str2 As String, ByVal scratchDistanceMatrix(,) As Integer) As Integer
//000142:             ' Distance matrix contains one extra row and column for the seed values.            
//000143:             For i = 0 To str1.Length
//000144:                 scratchDistanceMatrix(i, 0) = i
//000145:             Next i
//000146:             For j = 0 To str2.Length
//000147:                 scratchDistanceMatrix(0, j) = j
//000148:             Next j
//000149: 
//000150:             For i = 1 To str1.Length
//000151:                 Dim str1Index = i - 1
//000152:                 For j = 1 To str2.Length
//000153:                     Dim str2Index = j - 1
//000154:                     Dim cost = If((str1.Chars(str1Index) = str2.Chars(str2Index)), 0, 1)
//000155: 
//000156:                     Dim deletion = If((i = 0), 1, scratchDistanceMatrix(i - 1, j) + 1)
//000157:                     Dim insertion = If((j = 0), 1, scratchDistanceMatrix(i, j - 1) + 1)
//000158:                     Dim substitution = If((i = 0 OrElse j = 0), cost, scratchDistanceMatrix(i - 1, j - 1) + cost)
//000159: 
//000160:                     scratchDistanceMatrix(i, j) = Math.Min(Math.Min(deletion, insertion), substitution)
//000161: 
//000162:                     ' Check for Transposition.
//000163:                     If i > 1 AndAlso j > 1 AndAlso (str1.Chars(str1Index) = str2.Chars(str2Index - 1)) AndAlso (str1.Chars(str1Index - 1) = str2.Chars(str2Index)) Then
//000164:                         scratchDistanceMatrix(i, j) = Math.Min(scratchDistanceMatrix(i, j), scratchDistanceMatrix(i - 2, j - 2) + cost)
//000165:                     End If
//000166:                 Next j
//000167:             Next i
//000168: 
//000169:             ' Levenshtein distance is the bottom right element.
//000170:             Return scratchDistanceMatrix(str1.Length, str2.Length)
//000171:         End Function
//000172:     End Class
//000173: End Namespace
    IL_0001:  newobj     instance void SpellChecker.Window1/_Closure$__2::.ctor()
    IL_0006:  stloc.0
    IL_0007:  ldloc.0
    IL_0008:  ldarg.0
    IL_0009:  stfld      class SpellChecker.Window1 SpellChecker.Window1/_Closure$__2::$VB$Me
//000086:             Dim sequential = Not (chkParallel.IsChecked.HasValue AndAlso chkParallel.IsChecked.Value)
    IL_000e:  ldloc.0
    IL_000f:  ldarg.0
    IL_0010:  callvirt   instance class [PresentationFramework]System.Windows.Controls.CheckBox SpellChecker.Window1::get_chkParallel()
    IL_0015:  callvirt   instance valuetype [mscorlib]System.Nullable`1<bool> [PresentationFramework]System.Windows.Controls.Primitives.ToggleButton::get_IsChecked()
    IL_001a:  stloc.1
    IL_001b:  ldloca.s   VB$t_struct$S0
    IL_001d:  call       instance bool valuetype [mscorlib]System.Nullable`1<bool>::get_HasValue()
    IL_0022:  brfalse.s  IL_003c

    IL_0024:  ldarg.0
    IL_0025:  callvirt   instance class [PresentationFramework]System.Windows.Controls.CheckBox SpellChecker.Window1::get_chkParallel()
    IL_002a:  callvirt   instance valuetype [mscorlib]System.Nullable`1<bool> [PresentationFramework]System.Windows.Controls.Primitives.ToggleButton::get_IsChecked()
    IL_002f:  stloc.2
    IL_0030:  ldloca.s   VB$t_struct$S1
    IL_0032:  call       instance !0 valuetype [mscorlib]System.Nullable`1<bool>::get_Value()
    IL_0037:  brfalse.s  IL_003c

    IL_0039:  ldc.i4.0
    IL_003a:  br.s       IL_003d

    IL_003c:  ldc.i4.1
    IL_003d:  stfld      bool SpellChecker.Window1/_Closure$__2::$VB$Local_sequential
//000087:             Dim text = txtInput.Text
    IL_0042:  ldloc.0
    IL_0043:  ldarg.0
    IL_0044:  callvirt   instance class [PresentationFramework]System.Windows.Controls.TextBox SpellChecker.Window1::get_txtInput()
    IL_0049:  callvirt   instance string [PresentationFramework]System.Windows.Controls.TextBox::get_Text()
    IL_004e:  stfld      string SpellChecker.Window1/_Closure$__2::$VB$Local_text
//000088: 
//000089:             ' If there's no text to evaluate, just bail.
//000090:             If String.IsNullOrEmpty(text) Then
    IL_0053:  ldloc.0
    IL_0054:  ldfld      string SpellChecker.Window1/_Closure$__2::$VB$Local_text
    IL_0059:  call       bool [mscorlib]System.String::IsNullOrEmpty(string)
    IL_005e:  stloc.3
//000091:                 listBox1.ItemsSource = Nothing
//000092:                 Return
//000093:             End If
//000094: 
//000095:             ' Every time the text is changed, we want to cancel the previous operation.
//000096:             If _cancellation IsNot Nothing Then
//000097:                 _cancellation.Cancel()
//000098:             End If
//000099:             _cancellation = New CancellationTokenSource()
//000100:             Dim token = _cancellation.Token
//000101: 
//000102:             ' Time the operation and kick it off.
//000103:             Dim sw = Stopwatch.StartNew()
//000104: 
//000105:             Task.Factory.StartNew(Function()
//000106:                                       ' Return both the spelling suggestions and the elapsed time
//000107:                                       Dim results As List(Of String) = Nothing
//000108:                                       If sequential Then
//000109:                                           Dim distanceMatrix = New Integer(_maxWordLength, _maxWordLength) {}
//000110:                                           results = _words.
//000111:                                               Select(Function(word) New With {Key .Word = word, Key .Distance = LevenshteinDistance(word, text, distanceMatrix)}).
//000112:                                               OrderBy(Function(p) p.Distance).
//000113:                                               Take(NUM_SUGGESTIONS).
//000114:                                               Select(Function(p) p.Word).
//000115:                                               ToList()
//000116:                                       Else
//000117:                                           Using distanceMatrix = New ThreadLocal(Of Integer(,))(Function() New Integer(_maxWordLength, _maxWordLength) {})
//000118:                                               results = _words.AsParallel().WithCancellation(token).
//000119:                                                   Select(Function(word) New With {Key .Word = word, .Distance = LevenshteinDistance(word, text, distanceMatrix.Value)}).
//000120:                                                   TakeTop(Function(p) p.Distance, NUM_SUGGESTIONS).
//000121:                                                   Select(Function(p) p.Word).
//000122:                                                   ToList()
//000123:                                           End Using
//000124:                                       End If
//000125:                                       sw.Stop()
//000126:                                       Return New With {.Results = results, .Time = sw.Elapsed}
//000127:                                   End Function, token).ContinueWith(Sub(t)
//000128:                                                                         listBox1.ItemsSource =
//000129:                                                                             t.Result.Results.[Select](Function(str, i) String.Format("{0,2}. {1}", i + 1, str))
//000130:                                                                         lblTime.Content = Convert.ToString("Sec: ") & Convert.ToString(t.Result.Time)
//000131:                                                                     End Sub, CancellationToken.None, TaskContinuationOptions.NotOnCanceled,
//000132:                                                                     TaskScheduler.FromCurrentSynchronizationContext)
//000133:         End Sub
//000134: 
//000135:         
//000136:         ''' <summary>Computes the Levenshtein Edit Distance between two enumerables.</summary>
//000137:         ''' <param name="str1">The first string.</param>
//000138:         ''' <param name="str2">The second string.</param>
//000139:         ''' <param name="scratchDistanceMatrix">Scratch space to use for the computation.</param>
//000140:         ''' <returns>The computed edit distance.</returns>
//000141:         Private Shared Function LevenshteinDistance(ByVal str1 As String, ByVal str2 As String, ByVal scratchDistanceMatrix(,) As Integer) As Integer
//000142:             ' Distance matrix contains one extra row and column for the seed values.            
//000143:             For i = 0 To str1.Length
//000144:                 scratchDistanceMatrix(i, 0) = i
//000145:             Next i
//000146:             For j = 0 To str2.Length
//000147:                 scratchDistanceMatrix(0, j) = j
//000148:             Next j
//000149: 
//000150:             For i = 1 To str1.Length
//000151:                 Dim str1Index = i - 1
//000152:                 For j = 1 To str2.Length
//000153:                     Dim str2Index = j - 1
//000154:                     Dim cost = If((str1.Chars(str1Index) = str2.Chars(str2Index)), 0, 1)
//000155: 
//000156:                     Dim deletion = If((i = 0), 1, scratchDistanceMatrix(i - 1, j) + 1)
//000157:                     Dim insertion = If((j = 0), 1, scratchDistanceMatrix(i, j - 1) + 1)
//000158:                     Dim substitution = If((i = 0 OrElse j = 0), cost, scratchDistanceMatrix(i - 1, j - 1) + cost)
//000159: 
//000160:                     scratchDistanceMatrix(i, j) = Math.Min(Math.Min(deletion, insertion), substitution)
//000161: 
//000162:                     ' Check for Transposition.
//000163:                     If i > 1 AndAlso j > 1 AndAlso (str1.Chars(str1Index) = str2.Chars(str2Index - 1)) AndAlso (str1.Chars(str1Index - 1) = str2.Chars(str2Index)) Then
//000164:                         scratchDistanceMatrix(i, j) = Math.Min(scratchDistanceMatrix(i, j), scratchDistanceMatrix(i - 2, j - 2) + cost)
//000165:                     End If
//000166:                 Next j
//000167:             Next i
//000168: 
//000169:             ' Levenshtein distance is the bottom right element.
//000170:             Return scratchDistanceMatrix(str1.Length, str2.Length)
//000171:         End Function
//000172:     End Class
//000173: End Namespace
    IL_005f:  ldloc.3
    IL_0060:  brfalse.s  IL_0075

//000091:                 listBox1.ItemsSource = Nothing
    IL_0062:  ldarg.0
    IL_0063:  callvirt   instance class [PresentationFramework]System.Windows.Controls.ListBox SpellChecker.Window1::get_listBox1()
    IL_0068:  ldnull
    IL_0069:  callvirt   instance void [PresentationFramework]System.Windows.Controls.ItemsControl::set_ItemsSource(class [mscorlib]System.Collections.IEnumerable)
    IL_006e:  nop
//000092:                 Return
    IL_006f:  nop
    IL_0070:  br         IL_00f9

//000093:             End If
    IL_0075:  nop
//000094: 
//000095:             ' Every time the text is changed, we want to cancel the previous operation.
//000096:             If _cancellation IsNot Nothing Then
    IL_0076:  ldarg.0
    IL_0077:  ldfld      class [mscorlib]System.Threading.CancellationTokenSource SpellChecker.Window1::_cancellation
    IL_007c:  ldnull
    IL_007d:  ceq
    IL_007f:  ldc.i4.0
    IL_0080:  ceq
    IL_0082:  stloc.3
//000097:                 _cancellation.Cancel()
//000098:             End If
//000099:             _cancellation = New CancellationTokenSource()
//000100:             Dim token = _cancellation.Token
//000101: 
//000102:             ' Time the operation and kick it off.
//000103:             Dim sw = Stopwatch.StartNew()
//000104: 
//000105:             Task.Factory.StartNew(Function()
//000106:                                       ' Return both the spelling suggestions and the elapsed time
//000107:                                       Dim results As List(Of String) = Nothing
//000108:                                       If sequential Then
//000109:                                           Dim distanceMatrix = New Integer(_maxWordLength, _maxWordLength) {}
//000110:                                           results = _words.
//000111:                                               Select(Function(word) New With {Key .Word = word, Key .Distance = LevenshteinDistance(word, text, distanceMatrix)}).
//000112:                                               OrderBy(Function(p) p.Distance).
//000113:                                               Take(NUM_SUGGESTIONS).
//000114:                                               Select(Function(p) p.Word).
//000115:                                               ToList()
//000116:                                       Else
//000117:                                           Using distanceMatrix = New ThreadLocal(Of Integer(,))(Function() New Integer(_maxWordLength, _maxWordLength) {})
//000118:                                               results = _words.AsParallel().WithCancellation(token).
//000119:                                                   Select(Function(word) New With {Key .Word = word, .Distance = LevenshteinDistance(word, text, distanceMatrix.Value)}).
//000120:                                                   TakeTop(Function(p) p.Distance, NUM_SUGGESTIONS).
//000121:                                                   Select(Function(p) p.Word).
//000122:                                                   ToList()
//000123:                                           End Using
//000124:                                       End If
//000125:                                       sw.Stop()
//000126:                                       Return New With {.Results = results, .Time = sw.Elapsed}
//000127:                                   End Function, token).ContinueWith(Sub(t)
//000128:                                                                         listBox1.ItemsSource =
//000129:                                                                             t.Result.Results.[Select](Function(str, i) String.Format("{0,2}. {1}", i + 1, str))
//000130:                                                                         lblTime.Content = Convert.ToString("Sec: ") & Convert.ToString(t.Result.Time)
//000131:                                                                     End Sub, CancellationToken.None, TaskContinuationOptions.NotOnCanceled,
//000132:                                                                     TaskScheduler.FromCurrentSynchronizationContext)
//000133:         End Sub
//000134: 
//000135:         
//000136:         ''' <summary>Computes the Levenshtein Edit Distance between two enumerables.</summary>
//000137:         ''' <param name="str1">The first string.</param>
//000138:         ''' <param name="str2">The second string.</param>
//000139:         ''' <param name="scratchDistanceMatrix">Scratch space to use for the computation.</param>
//000140:         ''' <returns>The computed edit distance.</returns>
//000141:         Private Shared Function LevenshteinDistance(ByVal str1 As String, ByVal str2 As String, ByVal scratchDistanceMatrix(,) As Integer) As Integer
//000142:             ' Distance matrix contains one extra row and column for the seed values.            
//000143:             For i = 0 To str1.Length
//000144:                 scratchDistanceMatrix(i, 0) = i
//000145:             Next i
//000146:             For j = 0 To str2.Length
//000147:                 scratchDistanceMatrix(0, j) = j
//000148:             Next j
//000149: 
//000150:             For i = 1 To str1.Length
//000151:                 Dim str1Index = i - 1
//000152:                 For j = 1 To str2.Length
//000153:                     Dim str2Index = j - 1
//000154:                     Dim cost = If((str1.Chars(str1Index) = str2.Chars(str2Index)), 0, 1)
//000155: 
//000156:                     Dim deletion = If((i = 0), 1, scratchDistanceMatrix(i - 1, j) + 1)
//000157:                     Dim insertion = If((j = 0), 1, scratchDistanceMatrix(i, j - 1) + 1)
//000158:                     Dim substitution = If((i = 0 OrElse j = 0), cost, scratchDistanceMatrix(i - 1, j - 1) + cost)
//000159: 
//000160:                     scratchDistanceMatrix(i, j) = Math.Min(Math.Min(deletion, insertion), substitution)
//000161: 
//000162:                     ' Check for Transposition.
//000163:                     If i > 1 AndAlso j > 1 AndAlso (str1.Chars(str1Index) = str2.Chars(str2Index - 1)) AndAlso (str1.Chars(str1Index - 1) = str2.Chars(str2Index)) Then
//000164:                         scratchDistanceMatrix(i, j) = Math.Min(scratchDistanceMatrix(i, j), scratchDistanceMatrix(i - 2, j - 2) + cost)
//000165:                     End If
//000166:                 Next j
//000167:             Next i
//000168: 
//000169:             ' Levenshtein distance is the bottom right element.
//000170:             Return scratchDistanceMatrix(str1.Length, str2.Length)
//000171:         End Function
//000172:     End Class
//000173: End Namespace
    IL_0083:  ldloc.3
    IL_0084:  brfalse.s  IL_0092

//000097:                 _cancellation.Cancel()
    IL_0086:  ldarg.0
    IL_0087:  ldfld      class [mscorlib]System.Threading.CancellationTokenSource SpellChecker.Window1::_cancellation
    IL_008c:  callvirt   instance void [mscorlib]System.Threading.CancellationTokenSource::Cancel()
    IL_0091:  nop
//000098:             End If
    IL_0092:  nop
//000099:             _cancellation = New CancellationTokenSource()
    IL_0093:  ldarg.0
    IL_0094:  newobj     instance void [mscorlib]System.Threading.CancellationTokenSource::.ctor()
    IL_0099:  stfld      class [mscorlib]System.Threading.CancellationTokenSource SpellChecker.Window1::_cancellation
//000100:             Dim token = _cancellation.Token
    IL_009e:  ldloc.0
    IL_009f:  ldarg.0
    IL_00a0:  ldfld      class [mscorlib]System.Threading.CancellationTokenSource SpellChecker.Window1::_cancellation
    IL_00a5:  callvirt   instance valuetype [mscorlib]System.Threading.CancellationToken [mscorlib]System.Threading.CancellationTokenSource::get_Token()
    IL_00aa:  stfld      valuetype [mscorlib]System.Threading.CancellationToken SpellChecker.Window1/_Closure$__2::$VB$Local_token
//000101: 
//000102:             ' Time the operation and kick it off.
//000103:             Dim sw = Stopwatch.StartNew()
    IL_00af:  ldloc.0
    IL_00b0:  call       class [System]System.Diagnostics.Stopwatch [System]System.Diagnostics.Stopwatch::StartNew()
    IL_00b5:  stfld      class [System]System.Diagnostics.Stopwatch SpellChecker.Window1/_Closure$__2::$VB$Local_sw
//000104: 
//000105:             Task.Factory.StartNew(Function()
    IL_00ba:  call       class [mscorlib]System.Threading.Tasks.TaskFactory [mscorlib]System.Threading.Tasks.Task::get_Factory()
    IL_00bf:  ldloc.0
    IL_00c0:  dup
    IL_00c1:  ldvirtftn  instance class VB$AnonymousType_2`2<class [mscorlib]System.Collections.Generic.List`1<string>,valuetype [mscorlib]System.TimeSpan> SpellChecker.Window1/_Closure$__2::_Lambda$__5()
    IL_00c7:  newobj     instance void class [mscorlib]System.Func`1<class VB$AnonymousType_2`2<class [mscorlib]System.Collections.Generic.List`1<string>,valuetype [mscorlib]System.TimeSpan>>::.ctor(object,
                                                                                                                                                                                                       native int)
    IL_00cc:  ldloc.0
    IL_00cd:  ldfld      valuetype [mscorlib]System.Threading.CancellationToken SpellChecker.Window1/_Closure$__2::$VB$Local_token
    IL_00d2:  callvirt   instance class [mscorlib]System.Threading.Tasks.Task`1<!!0> [mscorlib]System.Threading.Tasks.TaskFactory::StartNew<class VB$AnonymousType_2`2<class [mscorlib]System.Collections.Generic.List`1<string>,valuetype [mscorlib]System.TimeSpan>>(class [mscorlib]System.Func`1<!!0>,
                                                                                                                                                                                                                                                                       valuetype [mscorlib]System.Threading.CancellationToken)
    IL_00d7:  ldarg.0
    IL_00d8:  dup
    IL_00d9:  ldvirtftn  instance void SpellChecker.Window1::_Lambda$__3(class [mscorlib]System.Threading.Tasks.Task`1<class VB$AnonymousType_2`2<class [mscorlib]System.Collections.Generic.List`1<string>,valuetype [mscorlib]System.TimeSpan>>)
    IL_00df:  newobj     instance void class [mscorlib]System.Action`1<class [mscorlib]System.Threading.Tasks.Task`1<class VB$AnonymousType_2`2<class [mscorlib]System.Collections.Generic.List`1<string>,valuetype [mscorlib]System.TimeSpan>>>::.ctor(object,
                                                                                                                                                                                                                                                        native int)
    IL_00e4:  call       valuetype [mscorlib]System.Threading.CancellationToken [mscorlib]System.Threading.CancellationToken::get_None()
    IL_00e9:  ldc.i4     0x40000
    IL_00ee:  call       class [mscorlib]System.Threading.Tasks.TaskScheduler [mscorlib]System.Threading.Tasks.TaskScheduler::FromCurrentSynchronizationContext()
    IL_00f3:  callvirt   instance class [mscorlib]System.Threading.Tasks.Task class [mscorlib]System.Threading.Tasks.Task`1<class VB$AnonymousType_2`2<class [mscorlib]System.Collections.Generic.List`1<string>,valuetype [mscorlib]System.TimeSpan>>::ContinueWith(class [mscorlib]System.Action`1<class [mscorlib]System.Threading.Tasks.Task`1<!0>>,
                                                                                                                                                                                                                                                                     valuetype [mscorlib]System.Threading.CancellationToken,
                                                                                                                                                                                                                                                                     valuetype [mscorlib]System.Threading.Tasks.TaskContinuationOptions,
                                                                                                                                                                                                                                                                     class [mscorlib]System.Threading.Tasks.TaskScheduler)
    IL_00f8:  pop
//000106:                                       ' Return both the spelling suggestions and the elapsed time
//000107:                                       Dim results As List(Of String) = Nothing
//000108:                                       If sequential Then
//000109:                                           Dim distanceMatrix = New Integer(_maxWordLength, _maxWordLength) {}
//000110:                                           results = _words.
//000111:                                               Select(Function(word) New With {Key .Word = word, Key .Distance = LevenshteinDistance(word, text, distanceMatrix)}).
//000112:                                               OrderBy(Function(p) p.Distance).
//000113:                                               Take(NUM_SUGGESTIONS).
//000114:                                               Select(Function(p) p.Word).
//000115:                                               ToList()
//000116:                                       Else
//000117:                                           Using distanceMatrix = New ThreadLocal(Of Integer(,))(Function() New Integer(_maxWordLength, _maxWordLength) {})
//000118:                                               results = _words.AsParallel().WithCancellation(token).
//000119:                                                   Select(Function(word) New With {Key .Word = word, .Distance = LevenshteinDistance(word, text, distanceMatrix.Value)}).
//000120:                                                   TakeTop(Function(p) p.Distance, NUM_SUGGESTIONS).
//000121:                                                   Select(Function(p) p.Word).
//000122:                                                   ToList()
//000123:                                           End Using
//000124:                                       End If
//000125:                                       sw.Stop()
//000126:                                       Return New With {.Results = results, .Time = sw.Elapsed}
//000127:                                   End Function, token).ContinueWith(Sub(t)
//000128:                                                                         listBox1.ItemsSource =
//000129:                                                                             t.Result.Results.[Select](Function(str, i) String.Format("{0,2}. {1}", i + 1, str))
//000130:                                                                         lblTime.Content = Convert.ToString("Sec: ") & Convert.ToString(t.Result.Time)
//000131:                                                                     End Sub, CancellationToken.None, TaskContinuationOptions.NotOnCanceled,
//000132:                                                                     TaskScheduler.FromCurrentSynchronizationContext)
//000133:         End Sub
    IL_00f9:  nop
    IL_00fa:  ret
  } // end of method Window1::MakeSuggestions

  .method private static int32  LevenshteinDistance(string str1,
                                                    string str2,
                                                    int32[0...,0...] scratchDistanceMatrix) cil managed
  {
    // Code size       397 (0x18d)
    .maxstack  8
    .locals init ([0] int32 LevenshteinDistance,
             [1] int32 i,
             [2] int32 j,
             [3] int32 V_3,
             [4] int32 str1Index,
             [5] int32 cost,
             [6] int32 deletion,
             [7] int32 insertion,
             [8] int32 V_8,
             [9] int32 str2Index,
             [10] int32 substitution,
             [11] int32 VB$t_i4$L0,
             [12] int32 VB$t_i4$L1,
             [13] int32 VB$t_i4$L2,
             [14] int32 VB$t_i4$L3,
             [15] int32 VB$CG$t_i4$S0,
             [16] bool VB$CG$t_bool$S0)
//000134: 
//000135:         
//000136:         ''' <summary>Computes the Levenshtein Edit Distance between two enumerables.</summary>
//000137:         ''' <param name="str1">The first string.</param>
//000138:         ''' <param name="str2">The second string.</param>
//000139:         ''' <param name="scratchDistanceMatrix">Scratch space to use for the computation.</param>
//000140:         ''' <returns>The computed edit distance.</returns>
//000141:         Private Shared Function LevenshteinDistance(ByVal str1 As String, ByVal str2 As String, ByVal scratchDistanceMatrix(,) As Integer) As Integer
    IL_0000:  nop
//000142:             ' Distance matrix contains one extra row and column for the seed values.            
//000143:             For i = 0 To str1.Length
    IL_0001:  ldc.i4.0
    IL_0002:  ldarg.0
    IL_0003:  callvirt   instance int32 [mscorlib]System.String::get_Length()
    IL_0008:  stloc.s    VB$t_i4$L0
    IL_000a:  stloc.1
    IL_000b:  br.s       IL_001b

//000144:                 scratchDistanceMatrix(i, 0) = i
    IL_000d:  ldarg.2
    IL_000e:  ldloc.1
    IL_000f:  ldc.i4.0
    IL_0010:  ldloc.1
    IL_0011:  callvirt   instance void int32[0...,0...]::Set(int32,
                                                             int32,
                                                             int32)
//000145:             Next i
    IL_0016:  nop
    IL_0017:  ldloc.1
    IL_0018:  ldc.i4.1
    IL_0019:  add.ovf
    IL_001a:  stloc.1
//000146:             For j = 0 To str2.Length
//000147:                 scratchDistanceMatrix(0, j) = j
//000148:             Next j
//000149: 
//000150:             For i = 1 To str1.Length
//000151:                 Dim str1Index = i - 1
//000152:                 For j = 1 To str2.Length
//000153:                     Dim str2Index = j - 1
//000154:                     Dim cost = If((str1.Chars(str1Index) = str2.Chars(str2Index)), 0, 1)
//000155: 
//000156:                     Dim deletion = If((i = 0), 1, scratchDistanceMatrix(i - 1, j) + 1)
//000157:                     Dim insertion = If((j = 0), 1, scratchDistanceMatrix(i, j - 1) + 1)
//000158:                     Dim substitution = If((i = 0 OrElse j = 0), cost, scratchDistanceMatrix(i - 1, j - 1) + cost)
//000159: 
//000160:                     scratchDistanceMatrix(i, j) = Math.Min(Math.Min(deletion, insertion), substitution)
//000161: 
//000162:                     ' Check for Transposition.
//000163:                     If i > 1 AndAlso j > 1 AndAlso (str1.Chars(str1Index) = str2.Chars(str2Index - 1)) AndAlso (str1.Chars(str1Index - 1) = str2.Chars(str2Index)) Then
//000164:                         scratchDistanceMatrix(i, j) = Math.Min(scratchDistanceMatrix(i, j), scratchDistanceMatrix(i - 2, j - 2) + cost)
//000165:                     End If
//000166:                 Next j
//000167:             Next i
//000168: 
//000169:             ' Levenshtein distance is the bottom right element.
//000170:             Return scratchDistanceMatrix(str1.Length, str2.Length)
//000171:         End Function
//000172:     End Class
//000173: End Namespace
    IL_001b:  ldloc.1
    IL_001c:  ldloc.s    VB$t_i4$L0
    IL_001e:  stloc.s    VB$CG$t_i4$S0
    IL_0020:  ldloc.s    VB$CG$t_i4$S0
    IL_0022:  ble.s      IL_000d

//000146:             For j = 0 To str2.Length
    IL_0024:  ldc.i4.0
    IL_0025:  ldarg.1
    IL_0026:  callvirt   instance int32 [mscorlib]System.String::get_Length()
    IL_002b:  stloc.s    VB$t_i4$L1
    IL_002d:  stloc.2
    IL_002e:  br.s       IL_003e

//000147:                 scratchDistanceMatrix(0, j) = j
    IL_0030:  ldarg.2
    IL_0031:  ldc.i4.0
    IL_0032:  ldloc.2
    IL_0033:  ldloc.2
    IL_0034:  callvirt   instance void int32[0...,0...]::Set(int32,
                                                             int32,
                                                             int32)
//000148:             Next j
    IL_0039:  nop
    IL_003a:  ldloc.2
    IL_003b:  ldc.i4.1
    IL_003c:  add.ovf
    IL_003d:  stloc.2
//000149: 
//000150:             For i = 1 To str1.Length
//000151:                 Dim str1Index = i - 1
//000152:                 For j = 1 To str2.Length
//000153:                     Dim str2Index = j - 1
//000154:                     Dim cost = If((str1.Chars(str1Index) = str2.Chars(str2Index)), 0, 1)
//000155: 
//000156:                     Dim deletion = If((i = 0), 1, scratchDistanceMatrix(i - 1, j) + 1)
//000157:                     Dim insertion = If((j = 0), 1, scratchDistanceMatrix(i, j - 1) + 1)
//000158:                     Dim substitution = If((i = 0 OrElse j = 0), cost, scratchDistanceMatrix(i - 1, j - 1) + cost)
//000159: 
//000160:                     scratchDistanceMatrix(i, j) = Math.Min(Math.Min(deletion, insertion), substitution)
//000161: 
//000162:                     ' Check for Transposition.
//000163:                     If i > 1 AndAlso j > 1 AndAlso (str1.Chars(str1Index) = str2.Chars(str2Index - 1)) AndAlso (str1.Chars(str1Index - 1) = str2.Chars(str2Index)) Then
//000164:                         scratchDistanceMatrix(i, j) = Math.Min(scratchDistanceMatrix(i, j), scratchDistanceMatrix(i - 2, j - 2) + cost)
//000165:                     End If
//000166:                 Next j
//000167:             Next i
//000168: 
//000169:             ' Levenshtein distance is the bottom right element.
//000170:             Return scratchDistanceMatrix(str1.Length, str2.Length)
//000171:         End Function
//000172:     End Class
//000173: End Namespace
    IL_003e:  ldloc.2
    IL_003f:  ldloc.s    VB$t_i4$L1
    IL_0041:  stloc.s    VB$CG$t_i4$S0
    IL_0043:  ldloc.s    VB$CG$t_i4$S0
    IL_0045:  ble.s      IL_0030

//000150:             For i = 1 To str1.Length
    IL_0047:  ldc.i4.1
    IL_0048:  ldarg.0
    IL_0049:  callvirt   instance int32 [mscorlib]System.String::get_Length()
    IL_004e:  stloc.s    VB$t_i4$L2
    IL_0050:  stloc.3
    IL_0051:  br         IL_016a

//000151:                 Dim str1Index = i - 1
    IL_0056:  ldloc.3
    IL_0057:  ldc.i4.1
    IL_0058:  sub.ovf
    IL_0059:  stloc.s    str1Index
//000152:                 For j = 1 To str2.Length
    IL_005b:  ldc.i4.1
    IL_005c:  ldarg.1
    IL_005d:  callvirt   instance int32 [mscorlib]System.String::get_Length()
    IL_0062:  stloc.s    VB$t_i4$L3
    IL_0064:  stloc.s    V_8
    IL_0066:  br         IL_0158

//000153:                     Dim str2Index = j - 1
    IL_006b:  ldloc.s    V_8
    IL_006d:  ldc.i4.1
    IL_006e:  sub.ovf
    IL_006f:  stloc.s    str2Index
//000154:                     Dim cost = If((str1.Chars(str1Index) = str2.Chars(str2Index)), 0, 1)
    IL_0071:  ldarg.0
    IL_0072:  ldloc.s    str1Index
    IL_0074:  callvirt   instance char [mscorlib]System.String::get_Chars(int32)
    IL_0079:  ldarg.1
    IL_007a:  ldloc.s    str2Index
    IL_007c:  callvirt   instance char [mscorlib]System.String::get_Chars(int32)
    IL_0081:  beq.s      IL_0086

    IL_0083:  ldc.i4.1
    IL_0084:  br.s       IL_0087

    IL_0086:  ldc.i4.0
    IL_0087:  stloc.s    cost
//000155: 
//000156:                     Dim deletion = If((i = 0), 1, scratchDistanceMatrix(i - 1, j) + 1)
    IL_0089:  ldloc.3
    IL_008a:  ldc.i4.0
    IL_008b:  beq.s      IL_009c

    IL_008d:  ldarg.2
    IL_008e:  ldloc.3
    IL_008f:  ldc.i4.1
    IL_0090:  sub.ovf
    IL_0091:  ldloc.s    V_8
    IL_0093:  callvirt   instance int32 int32[0...,0...]::Get(int32,
                                                              int32)
    IL_0098:  ldc.i4.1
    IL_0099:  add.ovf
    IL_009a:  br.s       IL_009d

    IL_009c:  ldc.i4.1
    IL_009d:  stloc.s    deletion
//000157:                     Dim insertion = If((j = 0), 1, scratchDistanceMatrix(i, j - 1) + 1)
    IL_009f:  ldloc.s    V_8
    IL_00a1:  ldc.i4.0
    IL_00a2:  beq.s      IL_00b3

    IL_00a4:  ldarg.2
    IL_00a5:  ldloc.3
    IL_00a6:  ldloc.s    V_8
    IL_00a8:  ldc.i4.1
    IL_00a9:  sub.ovf
    IL_00aa:  callvirt   instance int32 int32[0...,0...]::Get(int32,
                                                              int32)
    IL_00af:  ldc.i4.1
    IL_00b0:  add.ovf
    IL_00b1:  br.s       IL_00b4

    IL_00b3:  ldc.i4.1
    IL_00b4:  stloc.s    insertion
//000158:                     Dim substitution = If((i = 0 OrElse j = 0), cost, scratchDistanceMatrix(i - 1, j - 1) + cost)
    IL_00b6:  ldloc.3
    IL_00b7:  ldc.i4.0
    IL_00b8:  beq.s      IL_00d1

    IL_00ba:  ldloc.s    V_8
    IL_00bc:  ldc.i4.0
    IL_00bd:  beq.s      IL_00d1

    IL_00bf:  ldarg.2
    IL_00c0:  ldloc.3
    IL_00c1:  ldc.i4.1
    IL_00c2:  sub.ovf
    IL_00c3:  ldloc.s    V_8
    IL_00c5:  ldc.i4.1
    IL_00c6:  sub.ovf
    IL_00c7:  callvirt   instance int32 int32[0...,0...]::Get(int32,
                                                              int32)
    IL_00cc:  ldloc.s    cost
    IL_00ce:  add.ovf
    IL_00cf:  br.s       IL_00d3

    IL_00d1:  ldloc.s    cost
    IL_00d3:  stloc.s    substitution
//000159: 
//000160:                     scratchDistanceMatrix(i, j) = Math.Min(Math.Min(deletion, insertion), substitution)
    IL_00d5:  ldarg.2
    IL_00d6:  ldloc.3
    IL_00d7:  ldloc.s    V_8
    IL_00d9:  ldloc.s    deletion
    IL_00db:  ldloc.s    insertion
    IL_00dd:  call       int32 [mscorlib]System.Math::Min(int32,
                                                          int32)
    IL_00e2:  ldloc.s    substitution
    IL_00e4:  call       int32 [mscorlib]System.Math::Min(int32,
                                                          int32)
    IL_00e9:  callvirt   instance void int32[0...,0...]::Set(int32,
                                                             int32,
                                                             int32)
//000161: 
//000162:                     ' Check for Transposition.
//000163:                     If i > 1 AndAlso j > 1 AndAlso (str1.Chars(str1Index) = str2.Chars(str2Index - 1)) AndAlso (str1.Chars(str1Index - 1) = str2.Chars(str2Index)) Then
    IL_00ee:  ldloc.3
    IL_00ef:  ldc.i4.1
    IL_00f0:  ble.s      IL_011f

    IL_00f2:  ldloc.s    V_8
    IL_00f4:  ldc.i4.1
    IL_00f5:  ble.s      IL_011f

    IL_00f7:  ldarg.0
    IL_00f8:  ldloc.s    str1Index
    IL_00fa:  callvirt   instance char [mscorlib]System.String::get_Chars(int32)
    IL_00ff:  ldarg.1
    IL_0100:  ldloc.s    str2Index
    IL_0102:  ldc.i4.1
    IL_0103:  sub.ovf
    IL_0104:  callvirt   instance char [mscorlib]System.String::get_Chars(int32)
    IL_0109:  bne.un.s   IL_011f

    IL_010b:  ldarg.0
    IL_010c:  ldloc.s    str1Index
    IL_010e:  ldc.i4.1
    IL_010f:  sub.ovf
    IL_0110:  callvirt   instance char [mscorlib]System.String::get_Chars(int32)
    IL_0115:  ldarg.1
    IL_0116:  ldloc.s    str2Index
    IL_0118:  callvirt   instance char [mscorlib]System.String::get_Chars(int32)
    IL_011d:  beq.s      IL_0122

    IL_011f:  ldc.i4.0
    IL_0120:  br.s       IL_0123

    IL_0122:  ldc.i4.1
    IL_0123:  stloc.s    VB$CG$t_bool$S0
//000164:                         scratchDistanceMatrix(i, j) = Math.Min(scratchDistanceMatrix(i, j), scratchDistanceMatrix(i - 2, j - 2) + cost)
//000165:                     End If
//000166:                 Next j
//000167:             Next i
//000168: 
//000169:             ' Levenshtein distance is the bottom right element.
//000170:             Return scratchDistanceMatrix(str1.Length, str2.Length)
//000171:         End Function
//000172:     End Class
//000173: End Namespace
    IL_0125:  ldloc.s    VB$CG$t_bool$S0
    IL_0127:  brfalse.s  IL_0150

//000164:                         scratchDistanceMatrix(i, j) = Math.Min(scratchDistanceMatrix(i, j), scratchDistanceMatrix(i - 2, j - 2) + cost)
    IL_0129:  ldarg.2
    IL_012a:  ldloc.3
    IL_012b:  ldloc.s    V_8
    IL_012d:  ldarg.2
    IL_012e:  ldloc.3
    IL_012f:  ldloc.s    V_8
    IL_0131:  callvirt   instance int32 int32[0...,0...]::Get(int32,
                                                              int32)
    IL_0136:  ldarg.2
    IL_0137:  ldloc.3
    IL_0138:  ldc.i4.2
    IL_0139:  sub.ovf
    IL_013a:  ldloc.s    V_8
    IL_013c:  ldc.i4.2
    IL_013d:  sub.ovf
    IL_013e:  callvirt   instance int32 int32[0...,0...]::Get(int32,
                                                              int32)
    IL_0143:  ldloc.s    cost
    IL_0145:  add.ovf
    IL_0146:  call       int32 [mscorlib]System.Math::Min(int32,
                                                          int32)
    IL_014b:  callvirt   instance void int32[0...,0...]::Set(int32,
                                                             int32,
                                                             int32)
//000165:                     End If
    IL_0150:  nop
//000166:                 Next j
    IL_0151:  nop
    IL_0152:  ldloc.s    V_8
    IL_0154:  ldc.i4.1
    IL_0155:  add.ovf
    IL_0156:  stloc.s    V_8
//000167:             Next i
//000168: 
//000169:             ' Levenshtein distance is the bottom right element.
//000170:             Return scratchDistanceMatrix(str1.Length, str2.Length)
//000171:         End Function
//000172:     End Class
//000173: End Namespace
    IL_0158:  ldloc.s    V_8
    IL_015a:  ldloc.s    VB$t_i4$L3
    IL_015c:  stloc.s    VB$CG$t_i4$S0
    IL_015e:  ldloc.s    VB$CG$t_i4$S0
    IL_0160:  ble        IL_006b

//000167:             Next i
    IL_0165:  nop
    IL_0166:  ldloc.3
    IL_0167:  ldc.i4.1
    IL_0168:  add.ovf
    IL_0169:  stloc.3
//000168: 
//000169:             ' Levenshtein distance is the bottom right element.
//000170:             Return scratchDistanceMatrix(str1.Length, str2.Length)
//000171:         End Function
//000172:     End Class
//000173: End Namespace
    IL_016a:  ldloc.3
    IL_016b:  ldloc.s    VB$t_i4$L2
    IL_016d:  stloc.s    VB$CG$t_i4$S0
    IL_016f:  ldloc.s    VB$CG$t_i4$S0
    IL_0171:  ble        IL_0056

//000170:             Return scratchDistanceMatrix(str1.Length, str2.Length)
    IL_0176:  ldarg.2
    IL_0177:  ldarg.0
    IL_0178:  callvirt   instance int32 [mscorlib]System.String::get_Length()
    IL_017d:  ldarg.1
    IL_017e:  callvirt   instance int32 [mscorlib]System.String::get_Length()
    IL_0183:  callvirt   instance int32 int32[0...,0...]::Get(int32,
                                                              int32)
    IL_0188:  stloc.0
    IL_0189:  br.s       IL_018b

//000171:         End Function
    IL_018b:  ldloc.0
    IL_018c:  ret
  } // end of method Window1::LevenshteinDistance

  .method assembly newslot specialname strict virtual 
          instance class [PresentationFramework]System.Windows.Controls.ListBox 
          get_listBox1() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       11 (0xb)
    .maxstack  1
    .locals init (class [PresentationFramework]System.Windows.Controls.ListBox V_0)
    IL_0000:  ldarg.0
    IL_0001:  ldfld      class [PresentationFramework]System.Windows.Controls.ListBox SpellChecker.Window1::_listBox1
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method Window1::get_listBox1

  .method assembly newslot specialname strict virtual 
          instance void  set_listBox1(class [PresentationFramework]System.Windows.Controls.ListBox WithEventsValue) cil managed synchronized
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       9 (0x9)
    .maxstack  8
    IL_0000:  ldarg.0
    IL_0001:  ldarg.1
    IL_0002:  stfld      class [PresentationFramework]System.Windows.Controls.ListBox SpellChecker.Window1::_listBox1
    IL_0007:  nop
    IL_0008:  ret
  } // end of method Window1::set_listBox1

  .method assembly newslot specialname strict virtual 
          instance class [PresentationFramework]System.Windows.Controls.TextBox 
          get_txtInput() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       11 (0xb)
    .maxstack  1
    .locals init (class [PresentationFramework]System.Windows.Controls.TextBox V_0)
    IL_0000:  ldarg.0
    IL_0001:  ldfld      class [PresentationFramework]System.Windows.Controls.TextBox SpellChecker.Window1::_txtInput
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method Window1::get_txtInput

  .method assembly newslot specialname strict virtual 
          instance void  set_txtInput(class [PresentationFramework]System.Windows.Controls.TextBox WithEventsValue) cil managed synchronized
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       9 (0x9)
    .maxstack  8
    IL_0000:  ldarg.0
    IL_0001:  ldarg.1
    IL_0002:  stfld      class [PresentationFramework]System.Windows.Controls.TextBox SpellChecker.Window1::_txtInput
    IL_0007:  nop
    IL_0008:  ret
  } // end of method Window1::set_txtInput

  .method assembly newslot specialname strict virtual 
          instance class [PresentationFramework]System.Windows.Controls.Label 
          get_lblTime() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       11 (0xb)
    .maxstack  1
    .locals init (class [PresentationFramework]System.Windows.Controls.Label V_0)
    IL_0000:  ldarg.0
    IL_0001:  ldfld      class [PresentationFramework]System.Windows.Controls.Label SpellChecker.Window1::_lblTime
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method Window1::get_lblTime

  .method assembly newslot specialname strict virtual 
          instance void  set_lblTime(class [PresentationFramework]System.Windows.Controls.Label WithEventsValue) cil managed synchronized
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       9 (0x9)
    .maxstack  8
    IL_0000:  ldarg.0
    IL_0001:  ldarg.1
    IL_0002:  stfld      class [PresentationFramework]System.Windows.Controls.Label SpellChecker.Window1::_lblTime
    IL_0007:  nop
    IL_0008:  ret
  } // end of method Window1::set_lblTime

  .method assembly newslot specialname strict virtual 
          instance class [PresentationFramework]System.Windows.Controls.CheckBox 
          get_chkParallel() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       11 (0xb)
    .maxstack  1
    .locals init (class [PresentationFramework]System.Windows.Controls.CheckBox V_0)
    IL_0000:  ldarg.0
    IL_0001:  ldfld      class [PresentationFramework]System.Windows.Controls.CheckBox SpellChecker.Window1::_chkParallel
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method Window1::get_chkParallel

  .method assembly newslot specialname strict virtual 
          instance void  set_chkParallel(class [PresentationFramework]System.Windows.Controls.CheckBox WithEventsValue) cil managed synchronized
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       9 (0x9)
    .maxstack  8
    IL_0000:  ldarg.0
    IL_0001:  ldarg.1
    IL_0002:  stfld      class [PresentationFramework]System.Windows.Controls.CheckBox SpellChecker.Window1::_chkParallel
    IL_0007:  nop
    IL_0008:  ret
  } // end of method Window1::set_chkParallel

  .method assembly newslot specialname strict virtual 
          instance class [PresentationFramework]System.Windows.Controls.Button 
          get_btnLoad() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       11 (0xb)
    .maxstack  1
    .locals init (class [PresentationFramework]System.Windows.Controls.Button V_0)
    IL_0000:  ldarg.0
    IL_0001:  ldfld      class [PresentationFramework]System.Windows.Controls.Button SpellChecker.Window1::_btnLoad
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method Window1::get_btnLoad

  .method assembly newslot specialname strict virtual 
          instance void  set_btnLoad(class [PresentationFramework]System.Windows.Controls.Button WithEventsValue) cil managed synchronized
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       9 (0x9)
    .maxstack  8
    IL_0000:  ldarg.0
    IL_0001:  ldarg.1
    IL_0002:  stfld      class [PresentationFramework]System.Windows.Controls.Button SpellChecker.Window1::_btnLoad
    IL_0007:  nop
    IL_0008:  ret
  } // end of method Window1::set_btnLoad

  .method public newslot strict virtual final 
          instance void  InitializeComponent() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    .override [System.Xaml]System.Windows.Markup.IComponentConnector::InitializeComponent
    // Code size       44 (0x2c)
    .maxstack  2
    .locals init ([0] class [System]System.Uri resourceLocater,
             [1] bool VB$CG$t_bool$S0)
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\obj\Debug\Window1.g.vb' 
//000088:         Public Sub InitializeComponent() Implements System.Windows.Markup.IComponentConnector.InitializeComponent
    IL_0000:  nop
//000089:             If _contentLoaded Then
    IL_0001:  ldarg.0
    IL_0002:  ldfld      bool SpellChecker.Window1::_contentLoaded
    IL_0007:  stloc.1
//000090:                 Return
//000091:             End If
//000092:             _contentLoaded = true
//000093:             Dim resourceLocater As System.Uri = New System.Uri("/SpellChecker;component/window1.xaml", System.UriKind.Relative)
//000094:             
//000095:             #ExternalSource("..\..\Window1.xaml",1)
//000096:             System.Windows.Application.LoadComponent(Me, resourceLocater)
//000097:             
//000098:             #End ExternalSource
//000099:         End Sub
//000100:         
//000101:         <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
//000102:          System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never),  _
//000103:          System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes"),  _
//000104:          System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity"),  _
//000105:          System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")>  _
//000106:         Sub System_Windows_Markup_IComponentConnector_Connect(ByVal connectionId As Integer, ByVal target As Object) Implements System.Windows.Markup.IComponentConnector.Connect
//000107:             If (connectionId = 1) Then
//000108:                 Me.listBox1 = CType(target,System.Windows.Controls.ListBox)
//000109:                 Return
//000110:             End If
//000111:             If (connectionId = 2) Then
//000112:                 Me.txtInput = CType(target,System.Windows.Controls.TextBox)
//000113:                 
//000114:                 #ExternalSource("..\..\Window1.xaml",7)
//000115:                 AddHandler Me.txtInput.TextChanged, New System.Windows.Controls.TextChangedEventHandler(AddressOf Me.txtInput_TextChanged)
//000116:                 
//000117:                 #End ExternalSource
//000118:                 Return
//000119:             End If
//000120:             If (connectionId = 3) Then
//000121:                 Me.lblTime = CType(target,System.Windows.Controls.Label)
//000122:                 Return
//000123:             End If
//000124:             If (connectionId = 4) Then
//000125:                 Me.chkParallel = CType(target,System.Windows.Controls.CheckBox)
//000126:                 
//000127:                 #ExternalSource("..\..\Window1.xaml",9)
//000128:                 AddHandler Me.chkParallel.Checked, New System.Windows.RoutedEventHandler(AddressOf Me.chkParallel_CheckedChanged)
//000129:                 
//000130:                 #End ExternalSource
//000131:                 
//000132:                 #ExternalSource("..\..\Window1.xaml",9)
//000133:                 AddHandler Me.chkParallel.Unchecked, New System.Windows.RoutedEventHandler(AddressOf Me.chkParallel_CheckedChanged)
//000134:                 
//000135:                 #End ExternalSource
//000136:                 Return
//000137:             End If
//000138:             If (connectionId = 5) Then
//000139:                 Me.btnLoad = CType(target,System.Windows.Controls.Button)
//000140:                 
//000141:                 #ExternalSource("..\..\Window1.xaml",10)
//000142:                 AddHandler Me.btnLoad.Click, New System.Windows.RoutedEventHandler(AddressOf Me.btnLoad_Click)
//000143:                 
//000144:                 #End ExternalSource
//000145:                 Return
//000146:             End If
//000147:             Me._contentLoaded = true
//000148:         End Sub
//000149:     End Class
//000150: End Namespace
//000151: 
    IL_0008:  ldloc.1
    IL_0009:  brfalse.s  IL_000e

//000090:                 Return
    IL_000b:  nop
    IL_000c:  br.s       IL_002a

//000091:             End If
    IL_000e:  nop
//000092:             _contentLoaded = true
    IL_000f:  ldarg.0
    IL_0010:  ldc.i4.1
    IL_0011:  stfld      bool SpellChecker.Window1::_contentLoaded
//000093:             Dim resourceLocater As System.Uri = New System.Uri("/SpellChecker;component/window1.xaml", System.UriKind.Relative)
    IL_0016:  ldstr      "/SpellChecker;component/window1.xaml"
    IL_001b:  ldc.i4.2
    IL_001c:  newobj     instance void [System]System.Uri::.ctor(string,
                                                                 valuetype [System]System.UriKind)
    IL_0021:  stloc.0
//000094:             
//000095:             #ExternalSource("..\..\Window1.xaml",1)
//000096:             System.Windows.Application.LoadComponent(Me, resourceLocater)
    IL_0022:  ldarg.0
    IL_0023:  ldloc.0
    IL_0024:  call       void [PresentationFramework]System.Windows.Application::LoadComponent(object,
                                                                                               class [System]System.Uri)
    IL_0029:  nop
//000097:             
//000098:             #End ExternalSource
//000099:         End Sub
    IL_002a:  nop
    IL_002b:  ret
  } // end of method Window1::InitializeComponent

  .method public newslot strict virtual final 
          instance void  System_Windows_Markup_IComponentConnector_Connect(int32 connectionId,
                                                                           object target) cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
    .override [System.Xaml]System.Windows.Markup.IComponentConnector::Connect
    // Code size       244 (0xf4)
    .maxstack  3
    .locals init ([0] bool VB$CG$t_bool$S0)
//000100:         
//000101:         <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
//000102:          System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never),  _
//000103:          System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes"),  _
//000104:          System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity"),  _
//000105:          System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")>  _
//000106:         Sub System_Windows_Markup_IComponentConnector_Connect(ByVal connectionId As Integer, ByVal target As Object) Implements System.Windows.Markup.IComponentConnector.Connect
    IL_0000:  nop
//000107:             If (connectionId = 1) Then
    IL_0001:  ldarg.1
    IL_0002:  ldc.i4.1
    IL_0003:  ceq
    IL_0005:  stloc.0
//000108:                 Me.listBox1 = CType(target,System.Windows.Controls.ListBox)
//000109:                 Return
//000110:             End If
//000111:             If (connectionId = 2) Then
//000112:                 Me.txtInput = CType(target,System.Windows.Controls.TextBox)
//000113:                 
//000114:                 #ExternalSource("..\..\Window1.xaml",7)
//000115:                 AddHandler Me.txtInput.TextChanged, New System.Windows.Controls.TextChangedEventHandler(AddressOf Me.txtInput_TextChanged)
//000116:                 
//000117:                 #End ExternalSource
//000118:                 Return
//000119:             End If
//000120:             If (connectionId = 3) Then
//000121:                 Me.lblTime = CType(target,System.Windows.Controls.Label)
//000122:                 Return
//000123:             End If
//000124:             If (connectionId = 4) Then
//000125:                 Me.chkParallel = CType(target,System.Windows.Controls.CheckBox)
//000126:                 
//000127:                 #ExternalSource("..\..\Window1.xaml",9)
//000128:                 AddHandler Me.chkParallel.Checked, New System.Windows.RoutedEventHandler(AddressOf Me.chkParallel_CheckedChanged)
//000129:                 
//000130:                 #End ExternalSource
//000131:                 
//000132:                 #ExternalSource("..\..\Window1.xaml",9)
//000133:                 AddHandler Me.chkParallel.Unchecked, New System.Windows.RoutedEventHandler(AddressOf Me.chkParallel_CheckedChanged)
//000134:                 
//000135:                 #End ExternalSource
//000136:                 Return
//000137:             End If
//000138:             If (connectionId = 5) Then
//000139:                 Me.btnLoad = CType(target,System.Windows.Controls.Button)
//000140:                 
//000141:                 #ExternalSource("..\..\Window1.xaml",10)
//000142:                 AddHandler Me.btnLoad.Click, New System.Windows.RoutedEventHandler(AddressOf Me.btnLoad_Click)
//000143:                 
//000144:                 #End ExternalSource
//000145:                 Return
//000146:             End If
//000147:             Me._contentLoaded = true
//000148:         End Sub
//000149:     End Class
//000150: End Namespace
//000151: 
    IL_0006:  ldloc.0
    IL_0007:  brfalse.s  IL_001c

//000108:                 Me.listBox1 = CType(target,System.Windows.Controls.ListBox)
    IL_0009:  ldarg.0
    IL_000a:  ldarg.2
    IL_000b:  castclass  [PresentationFramework]System.Windows.Controls.ListBox
    IL_0010:  callvirt   instance void SpellChecker.Window1::set_listBox1(class [PresentationFramework]System.Windows.Controls.ListBox)
    IL_0015:  nop
//000109:                 Return
    IL_0016:  nop
    IL_0017:  br         IL_00f2

//000110:             End If
    IL_001c:  nop
//000111:             If (connectionId = 2) Then
    IL_001d:  ldarg.1
    IL_001e:  ldc.i4.2
    IL_001f:  ceq
    IL_0021:  stloc.0
//000112:                 Me.txtInput = CType(target,System.Windows.Controls.TextBox)
//000113:                 
//000114:                 #ExternalSource("..\..\Window1.xaml",7)
//000115:                 AddHandler Me.txtInput.TextChanged, New System.Windows.Controls.TextChangedEventHandler(AddressOf Me.txtInput_TextChanged)
//000116:                 
//000117:                 #End ExternalSource
//000118:                 Return
//000119:             End If
//000120:             If (connectionId = 3) Then
//000121:                 Me.lblTime = CType(target,System.Windows.Controls.Label)
//000122:                 Return
//000123:             End If
//000124:             If (connectionId = 4) Then
//000125:                 Me.chkParallel = CType(target,System.Windows.Controls.CheckBox)
//000126:                 
//000127:                 #ExternalSource("..\..\Window1.xaml",9)
//000128:                 AddHandler Me.chkParallel.Checked, New System.Windows.RoutedEventHandler(AddressOf Me.chkParallel_CheckedChanged)
//000129:                 
//000130:                 #End ExternalSource
//000131:                 
//000132:                 #ExternalSource("..\..\Window1.xaml",9)
//000133:                 AddHandler Me.chkParallel.Unchecked, New System.Windows.RoutedEventHandler(AddressOf Me.chkParallel_CheckedChanged)
//000134:                 
//000135:                 #End ExternalSource
//000136:                 Return
//000137:             End If
//000138:             If (connectionId = 5) Then
//000139:                 Me.btnLoad = CType(target,System.Windows.Controls.Button)
//000140:                 
//000141:                 #ExternalSource("..\..\Window1.xaml",10)
//000142:                 AddHandler Me.btnLoad.Click, New System.Windows.RoutedEventHandler(AddressOf Me.btnLoad_Click)
//000143:                 
//000144:                 #End ExternalSource
//000145:                 Return
//000146:             End If
//000147:             Me._contentLoaded = true
//000148:         End Sub
//000149:     End Class
//000150: End Namespace
//000151: 
    IL_0022:  ldloc.0
    IL_0023:  brfalse.s  IL_0051

//000112:                 Me.txtInput = CType(target,System.Windows.Controls.TextBox)
    IL_0025:  ldarg.0
    IL_0026:  ldarg.2
    IL_0027:  castclass  [PresentationFramework]System.Windows.Controls.TextBox
    IL_002c:  callvirt   instance void SpellChecker.Window1::set_txtInput(class [PresentationFramework]System.Windows.Controls.TextBox)
    IL_0031:  nop
//000113:                 
//000114:                 #ExternalSource("..\..\Window1.xaml",7)
//000115:                 AddHandler Me.txtInput.TextChanged, New System.Windows.Controls.TextChangedEventHandler(AddressOf Me.txtInput_TextChanged)
    IL_0032:  ldarg.0
    IL_0033:  callvirt   instance class [PresentationFramework]System.Windows.Controls.TextBox SpellChecker.Window1::get_txtInput()
    IL_0038:  ldarg.0
    IL_0039:  dup
    IL_003a:  ldvirtftn  instance void SpellChecker.Window1::txtInput_TextChanged(object,
                                                                                  class [PresentationFramework]System.Windows.Controls.TextChangedEventArgs)
    IL_0040:  newobj     instance void [PresentationFramework]System.Windows.Controls.TextChangedEventHandler::.ctor(object,
                                                                                                                     native int)
    IL_0045:  callvirt   instance void [PresentationFramework]System.Windows.Controls.Primitives.TextBoxBase::add_TextChanged(class [PresentationFramework]System.Windows.Controls.TextChangedEventHandler)
    IL_004a:  nop
//000116:                 
//000117:                 #End ExternalSource
//000118:                 Return
    IL_004b:  nop
    IL_004c:  br         IL_00f2

//000119:             End If
    IL_0051:  nop
//000120:             If (connectionId = 3) Then
    IL_0052:  ldarg.1
    IL_0053:  ldc.i4.3
    IL_0054:  ceq
    IL_0056:  stloc.0
//000121:                 Me.lblTime = CType(target,System.Windows.Controls.Label)
//000122:                 Return
//000123:             End If
//000124:             If (connectionId = 4) Then
//000125:                 Me.chkParallel = CType(target,System.Windows.Controls.CheckBox)
//000126:                 
//000127:                 #ExternalSource("..\..\Window1.xaml",9)
//000128:                 AddHandler Me.chkParallel.Checked, New System.Windows.RoutedEventHandler(AddressOf Me.chkParallel_CheckedChanged)
//000129:                 
//000130:                 #End ExternalSource
//000131:                 
//000132:                 #ExternalSource("..\..\Window1.xaml",9)
//000133:                 AddHandler Me.chkParallel.Unchecked, New System.Windows.RoutedEventHandler(AddressOf Me.chkParallel_CheckedChanged)
//000134:                 
//000135:                 #End ExternalSource
//000136:                 Return
//000137:             End If
//000138:             If (connectionId = 5) Then
//000139:                 Me.btnLoad = CType(target,System.Windows.Controls.Button)
//000140:                 
//000141:                 #ExternalSource("..\..\Window1.xaml",10)
//000142:                 AddHandler Me.btnLoad.Click, New System.Windows.RoutedEventHandler(AddressOf Me.btnLoad_Click)
//000143:                 
//000144:                 #End ExternalSource
//000145:                 Return
//000146:             End If
//000147:             Me._contentLoaded = true
//000148:         End Sub
//000149:     End Class
//000150: End Namespace
//000151: 
    IL_0057:  ldloc.0
    IL_0058:  brfalse.s  IL_006d

//000121:                 Me.lblTime = CType(target,System.Windows.Controls.Label)
    IL_005a:  ldarg.0
    IL_005b:  ldarg.2
    IL_005c:  castclass  [PresentationFramework]System.Windows.Controls.Label
    IL_0061:  callvirt   instance void SpellChecker.Window1::set_lblTime(class [PresentationFramework]System.Windows.Controls.Label)
    IL_0066:  nop
//000122:                 Return
    IL_0067:  nop
    IL_0068:  br         IL_00f2

//000123:             End If
    IL_006d:  nop
//000124:             If (connectionId = 4) Then
    IL_006e:  ldarg.1
    IL_006f:  ldc.i4.4
    IL_0070:  ceq
    IL_0072:  stloc.0
//000125:                 Me.chkParallel = CType(target,System.Windows.Controls.CheckBox)
//000126:                 
//000127:                 #ExternalSource("..\..\Window1.xaml",9)
//000128:                 AddHandler Me.chkParallel.Checked, New System.Windows.RoutedEventHandler(AddressOf Me.chkParallel_CheckedChanged)
//000129:                 
//000130:                 #End ExternalSource
//000131:                 
//000132:                 #ExternalSource("..\..\Window1.xaml",9)
//000133:                 AddHandler Me.chkParallel.Unchecked, New System.Windows.RoutedEventHandler(AddressOf Me.chkParallel_CheckedChanged)
//000134:                 
//000135:                 #End ExternalSource
//000136:                 Return
//000137:             End If
//000138:             If (connectionId = 5) Then
//000139:                 Me.btnLoad = CType(target,System.Windows.Controls.Button)
//000140:                 
//000141:                 #ExternalSource("..\..\Window1.xaml",10)
//000142:                 AddHandler Me.btnLoad.Click, New System.Windows.RoutedEventHandler(AddressOf Me.btnLoad_Click)
//000143:                 
//000144:                 #End ExternalSource
//000145:                 Return
//000146:             End If
//000147:             Me._contentLoaded = true
//000148:         End Sub
//000149:     End Class
//000150: End Namespace
//000151: 
    IL_0073:  ldloc.0
    IL_0074:  brfalse.s  IL_00b8

//000125:                 Me.chkParallel = CType(target,System.Windows.Controls.CheckBox)
    IL_0076:  ldarg.0
    IL_0077:  ldarg.2
    IL_0078:  castclass  [PresentationFramework]System.Windows.Controls.CheckBox
    IL_007d:  callvirt   instance void SpellChecker.Window1::set_chkParallel(class [PresentationFramework]System.Windows.Controls.CheckBox)
    IL_0082:  nop
//000126:                 
//000127:                 #ExternalSource("..\..\Window1.xaml",9)
//000128:                 AddHandler Me.chkParallel.Checked, New System.Windows.RoutedEventHandler(AddressOf Me.chkParallel_CheckedChanged)
    IL_0083:  ldarg.0
    IL_0084:  callvirt   instance class [PresentationFramework]System.Windows.Controls.CheckBox SpellChecker.Window1::get_chkParallel()
    IL_0089:  ldarg.0
    IL_008a:  dup
    IL_008b:  ldvirtftn  instance void SpellChecker.Window1::chkParallel_CheckedChanged(object,
                                                                                        class [PresentationCore]System.Windows.RoutedEventArgs)
    IL_0091:  newobj     instance void [PresentationCore]System.Windows.RoutedEventHandler::.ctor(object,
                                                                                                  native int)
    IL_0096:  callvirt   instance void [PresentationFramework]System.Windows.Controls.Primitives.ToggleButton::add_Checked(class [PresentationCore]System.Windows.RoutedEventHandler)
    IL_009b:  nop
//000129:                 
//000130:                 #End ExternalSource
//000131:                 
//000132:                 #ExternalSource("..\..\Window1.xaml",9)
//000133:                 AddHandler Me.chkParallel.Unchecked, New System.Windows.RoutedEventHandler(AddressOf Me.chkParallel_CheckedChanged)
    IL_009c:  ldarg.0
    IL_009d:  callvirt   instance class [PresentationFramework]System.Windows.Controls.CheckBox SpellChecker.Window1::get_chkParallel()
    IL_00a2:  ldarg.0
    IL_00a3:  dup
    IL_00a4:  ldvirtftn  instance void SpellChecker.Window1::chkParallel_CheckedChanged(object,
                                                                                        class [PresentationCore]System.Windows.RoutedEventArgs)
    IL_00aa:  newobj     instance void [PresentationCore]System.Windows.RoutedEventHandler::.ctor(object,
                                                                                                  native int)
    IL_00af:  callvirt   instance void [PresentationFramework]System.Windows.Controls.Primitives.ToggleButton::add_Unchecked(class [PresentationCore]System.Windows.RoutedEventHandler)
    IL_00b4:  nop
//000134:                 
//000135:                 #End ExternalSource
//000136:                 Return
    IL_00b5:  nop
    IL_00b6:  br.s       IL_00f2

//000137:             End If
    IL_00b8:  nop
//000138:             If (connectionId = 5) Then
    IL_00b9:  ldarg.1
    IL_00ba:  ldc.i4.5
    IL_00bb:  ceq
    IL_00bd:  stloc.0
//000139:                 Me.btnLoad = CType(target,System.Windows.Controls.Button)
//000140:                 
//000141:                 #ExternalSource("..\..\Window1.xaml",10)
//000142:                 AddHandler Me.btnLoad.Click, New System.Windows.RoutedEventHandler(AddressOf Me.btnLoad_Click)
//000143:                 
//000144:                 #End ExternalSource
//000145:                 Return
//000146:             End If
//000147:             Me._contentLoaded = true
//000148:         End Sub
//000149:     End Class
//000150: End Namespace
//000151: 
    IL_00be:  ldloc.0
    IL_00bf:  brfalse.s  IL_00ea

//000139:                 Me.btnLoad = CType(target,System.Windows.Controls.Button)
    IL_00c1:  ldarg.0
    IL_00c2:  ldarg.2
    IL_00c3:  castclass  [PresentationFramework]System.Windows.Controls.Button
    IL_00c8:  callvirt   instance void SpellChecker.Window1::set_btnLoad(class [PresentationFramework]System.Windows.Controls.Button)
    IL_00cd:  nop
//000140:                 
//000141:                 #ExternalSource("..\..\Window1.xaml",10)
//000142:                 AddHandler Me.btnLoad.Click, New System.Windows.RoutedEventHandler(AddressOf Me.btnLoad_Click)
    IL_00ce:  ldarg.0
    IL_00cf:  callvirt   instance class [PresentationFramework]System.Windows.Controls.Button SpellChecker.Window1::get_btnLoad()
    IL_00d4:  ldarg.0
    IL_00d5:  dup
    IL_00d6:  ldvirtftn  instance void SpellChecker.Window1::btnLoad_Click(object,
                                                                           class [PresentationCore]System.Windows.RoutedEventArgs)
    IL_00dc:  newobj     instance void [PresentationCore]System.Windows.RoutedEventHandler::.ctor(object,
                                                                                                  native int)
    IL_00e1:  callvirt   instance void [PresentationFramework]System.Windows.Controls.Primitives.ButtonBase::add_Click(class [PresentationCore]System.Windows.RoutedEventHandler)
    IL_00e6:  nop
//000143:                 
//000144:                 #End ExternalSource
//000145:                 Return
    IL_00e7:  nop
    IL_00e8:  br.s       IL_00f2

//000146:             End If
    IL_00ea:  nop
//000147:             Me._contentLoaded = true
    IL_00eb:  ldarg.0
    IL_00ec:  ldc.i4.1
    IL_00ed:  stfld      bool SpellChecker.Window1::_contentLoaded
//000148:         End Sub
    IL_00f2:  nop
    IL_00f3:  ret
  } // end of method Window1::System_Windows_Markup_IComponentConnector_Connect

  .method private specialname instance void 
          _Lambda$__1(class [mscorlib]System.Threading.Tasks.Task t) cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       69 (0x45)
    .maxstack  3
    .locals init ([0] bool VB$CG$t_bool$S0)
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\SpellChecker\SpellChecker_VisualBasic\Window1.xaml.vb' 
//000055:                                   ContinueWith(Sub(t)
    IL_0000:  nop
//000056:                                                    txtInput.IsEnabled = True
    IL_0001:  ldarg.0
    IL_0002:  callvirt   instance class [PresentationFramework]System.Windows.Controls.TextBox SpellChecker.Window1::get_txtInput()
    IL_0007:  ldc.i4.1
    IL_0008:  callvirt   instance void [PresentationCore]System.Windows.UIElement::set_IsEnabled(bool)
    IL_000d:  nop
//000057:                                                    chkParallel.IsEnabled = True
    IL_000e:  ldarg.0
    IL_000f:  callvirt   instance class [PresentationFramework]System.Windows.Controls.CheckBox SpellChecker.Window1::get_chkParallel()
    IL_0014:  ldc.i4.1
    IL_0015:  callvirt   instance void [PresentationCore]System.Windows.UIElement::set_IsEnabled(bool)
    IL_001a:  nop
//000058:                                                    If t.IsFaulted Then
    IL_001b:  ldarg.1
    IL_001c:  callvirt   instance bool [mscorlib]System.Threading.Tasks.Task::get_IsFaulted()
    IL_0021:  stloc.0
//000059:                                                        MsgBox(t.Exception.ToString())
//000060:                                                    Else
//000061:                                                        MakeSuggestions()
//000062:                                                    End If
//000063:                                                End Sub, TaskScheduler.FromCurrentSynchronizationContext())
//000064:             
//000065:             End If
//000066: 
//000067: 		End Sub
//000068: 
//000069: 		''' <summary>Redo the suggestions when the text changes.</summary>
//000070: 		Private Sub txtInput_TextChanged(ByVal sender As Object, ByVal e As TextChangedEventArgs)
//000071: 			MakeSuggestions()
//000072: 		End Sub
//000073: 
//000074: 		''' <summary>Redo the suggestions when parallel vs non-parallel changes.</summary>
//000075: 		Private Sub chkParallel_CheckedChanged(ByVal sender As Object, ByVal e As RoutedEventArgs)
//000076: 			MakeSuggestions()
//000077: 		End Sub
//000078: 
//000079:         '' <summary>Asynchronous make suggestions for correct spellings of the provided word.</summary>
//000080: 
//000081:         Private Sub MakeSuggestions()
//000082:             ' Limit the number of suggestions.
//000083:             Const NUM_SUGGESTIONS = 25
//000084: 
//000085:             ' Run serially or in parallel.
//000086:             Dim sequential = Not (chkParallel.IsChecked.HasValue AndAlso chkParallel.IsChecked.Value)
//000087:             Dim text = txtInput.Text
//000088: 
//000089:             ' If there's no text to evaluate, just bail.
//000090:             If String.IsNullOrEmpty(text) Then
//000091:                 listBox1.ItemsSource = Nothing
//000092:                 Return
//000093:             End If
//000094: 
//000095:             ' Every time the text is changed, we want to cancel the previous operation.
//000096:             If _cancellation IsNot Nothing Then
//000097:                 _cancellation.Cancel()
//000098:             End If
//000099:             _cancellation = New CancellationTokenSource()
//000100:             Dim token = _cancellation.Token
//000101: 
//000102:             ' Time the operation and kick it off.
//000103:             Dim sw = Stopwatch.StartNew()
//000104: 
//000105:             Task.Factory.StartNew(Function()
//000106:                                       ' Return both the spelling suggestions and the elapsed time
//000107:                                       Dim results As List(Of String) = Nothing
//000108:                                       If sequential Then
//000109:                                           Dim distanceMatrix = New Integer(_maxWordLength, _maxWordLength) {}
//000110:                                           results = _words.
//000111:                                               Select(Function(word) New With {Key .Word = word, Key .Distance = LevenshteinDistance(word, text, distanceMatrix)}).
//000112:                                               OrderBy(Function(p) p.Distance).
//000113:                                               Take(NUM_SUGGESTIONS).
//000114:                                               Select(Function(p) p.Word).
//000115:                                               ToList()
//000116:                                       Else
//000117:                                           Using distanceMatrix = New ThreadLocal(Of Integer(,))(Function() New Integer(_maxWordLength, _maxWordLength) {})
//000118:                                               results = _words.AsParallel().WithCancellation(token).
//000119:                                                   Select(Function(word) New With {Key .Word = word, .Distance = LevenshteinDistance(word, text, distanceMatrix.Value)}).
//000120:                                                   TakeTop(Function(p) p.Distance, NUM_SUGGESTIONS).
//000121:                                                   Select(Function(p) p.Word).
//000122:                                                   ToList()
//000123:                                           End Using
//000124:                                       End If
//000125:                                       sw.Stop()
//000126:                                       Return New With {.Results = results, .Time = sw.Elapsed}
//000127:                                   End Function, token).ContinueWith(Sub(t)
//000128:                                                                         listBox1.ItemsSource =
//000129:                                                                             t.Result.Results.[Select](Function(str, i) String.Format("{0,2}. {1}", i + 1, str))
//000130:                                                                         lblTime.Content = Convert.ToString("Sec: ") & Convert.ToString(t.Result.Time)
//000131:                                                                     End Sub, CancellationToken.None, TaskContinuationOptions.NotOnCanceled,
//000132:                                                                     TaskScheduler.FromCurrentSynchronizationContext)
//000133:         End Sub
//000134: 
//000135:         
//000136:         ''' <summary>Computes the Levenshtein Edit Distance between two enumerables.</summary>
//000137:         ''' <param name="str1">The first string.</param>
//000138:         ''' <param name="str2">The second string.</param>
//000139:         ''' <param name="scratchDistanceMatrix">Scratch space to use for the computation.</param>
//000140:         ''' <returns>The computed edit distance.</returns>
//000141:         Private Shared Function LevenshteinDistance(ByVal str1 As String, ByVal str2 As String, ByVal scratchDistanceMatrix(,) As Integer) As Integer
//000142:             ' Distance matrix contains one extra row and column for the seed values.            
//000143:             For i = 0 To str1.Length
//000144:                 scratchDistanceMatrix(i, 0) = i
//000145:             Next i
//000146:             For j = 0 To str2.Length
//000147:                 scratchDistanceMatrix(0, j) = j
//000148:             Next j
//000149: 
//000150:             For i = 1 To str1.Length
//000151:                 Dim str1Index = i - 1
//000152:                 For j = 1 To str2.Length
//000153:                     Dim str2Index = j - 1
//000154:                     Dim cost = If((str1.Chars(str1Index) = str2.Chars(str2Index)), 0, 1)
//000155: 
//000156:                     Dim deletion = If((i = 0), 1, scratchDistanceMatrix(i - 1, j) + 1)
//000157:                     Dim insertion = If((j = 0), 1, scratchDistanceMatrix(i, j - 1) + 1)
//000158:                     Dim substitution = If((i = 0 OrElse j = 0), cost, scratchDistanceMatrix(i - 1, j - 1) + cost)
//000159: 
//000160:                     scratchDistanceMatrix(i, j) = Math.Min(Math.Min(deletion, insertion), substitution)
//000161: 
//000162:                     ' Check for Transposition.
//000163:                     If i > 1 AndAlso j > 1 AndAlso (str1.Chars(str1Index) = str2.Chars(str2Index - 1)) AndAlso (str1.Chars(str1Index - 1) = str2.Chars(str2Index)) Then
//000164:                         scratchDistanceMatrix(i, j) = Math.Min(scratchDistanceMatrix(i, j), scratchDistanceMatrix(i - 2, j - 2) + cost)
//000165:                     End If
//000166:                 Next j
//000167:             Next i
//000168: 
//000169:             ' Levenshtein distance is the bottom right element.
//000170:             Return scratchDistanceMatrix(str1.Length, str2.Length)
//000171:         End Function
//000172:     End Class
//000173: End Namespace
    IL_0022:  ldloc.0
    IL_0023:  brfalse.s  IL_003a

//000059:                                                        MsgBox(t.Exception.ToString())
    IL_0025:  ldarg.1
    IL_0026:  callvirt   instance class [mscorlib]System.AggregateException [mscorlib]System.Threading.Tasks.Task::get_Exception()
    IL_002b:  callvirt   instance string [mscorlib]System.AggregateException::ToString()
    IL_0030:  ldc.i4.0
    IL_0031:  ldnull
    IL_0032:  call       valuetype [Microsoft.VisualBasic]Microsoft.VisualBasic.MsgBoxResult [Microsoft.VisualBasic]Microsoft.VisualBasic.Interaction::MsgBox(object,
                                                                                                                                                              valuetype [Microsoft.VisualBasic]Microsoft.VisualBasic.MsgBoxStyle,
                                                                                                                                                              object)
    IL_0037:  pop
    IL_0038:  br.s       IL_0042

//000060:                                                    Else
    IL_003a:  nop
//000061:                                                        MakeSuggestions()
    IL_003b:  ldarg.0
    IL_003c:  callvirt   instance void SpellChecker.Window1::MakeSuggestions()
    IL_0041:  nop
//000062:                                                    End If
    IL_0042:  nop
//000063:                                                End Sub, TaskScheduler.FromCurrentSynchronizationContext())
    IL_0043:  nop
    IL_0044:  ret
  } // end of method Window1::_Lambda$__1

  .method private specialname instance void 
          _Lambda$__3(class [mscorlib]System.Threading.Tasks.Task`1<class VB$AnonymousType_2`2<class [mscorlib]System.Collections.Generic.List`1<string>,valuetype [mscorlib]System.TimeSpan>> t) cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       91 (0x5b)
    .maxstack  4
//000064:             
//000065:             End If
//000066: 
//000067: 		End Sub
//000068: 
//000069: 		''' <summary>Redo the suggestions when the text changes.</summary>
//000070: 		Private Sub txtInput_TextChanged(ByVal sender As Object, ByVal e As TextChangedEventArgs)
//000071: 			MakeSuggestions()
//000072: 		End Sub
//000073: 
//000074: 		''' <summary>Redo the suggestions when parallel vs non-parallel changes.</summary>
//000075: 		Private Sub chkParallel_CheckedChanged(ByVal sender As Object, ByVal e As RoutedEventArgs)
//000076: 			MakeSuggestions()
//000077: 		End Sub
//000078: 
//000079:         '' <summary>Asynchronous make suggestions for correct spellings of the provided word.</summary>
//000080: 
//000081:         Private Sub MakeSuggestions()
//000082:             ' Limit the number of suggestions.
//000083:             Const NUM_SUGGESTIONS = 25
//000084: 
//000085:             ' Run serially or in parallel.
//000086:             Dim sequential = Not (chkParallel.IsChecked.HasValue AndAlso chkParallel.IsChecked.Value)
//000087:             Dim text = txtInput.Text
//000088: 
//000089:             ' If there's no text to evaluate, just bail.
//000090:             If String.IsNullOrEmpty(text) Then
//000091:                 listBox1.ItemsSource = Nothing
//000092:                 Return
//000093:             End If
//000094: 
//000095:             ' Every time the text is changed, we want to cancel the previous operation.
//000096:             If _cancellation IsNot Nothing Then
//000097:                 _cancellation.Cancel()
//000098:             End If
//000099:             _cancellation = New CancellationTokenSource()
//000100:             Dim token = _cancellation.Token
//000101: 
//000102:             ' Time the operation and kick it off.
//000103:             Dim sw = Stopwatch.StartNew()
//000104: 
//000105:             Task.Factory.StartNew(Function()
//000106:                                       ' Return both the spelling suggestions and the elapsed time
//000107:                                       Dim results As List(Of String) = Nothing
//000108:                                       If sequential Then
//000109:                                           Dim distanceMatrix = New Integer(_maxWordLength, _maxWordLength) {}
//000110:                                           results = _words.
//000111:                                               Select(Function(word) New With {Key .Word = word, Key .Distance = LevenshteinDistance(word, text, distanceMatrix)}).
//000112:                                               OrderBy(Function(p) p.Distance).
//000113:                                               Take(NUM_SUGGESTIONS).
//000114:                                               Select(Function(p) p.Word).
//000115:                                               ToList()
//000116:                                       Else
//000117:                                           Using distanceMatrix = New ThreadLocal(Of Integer(,))(Function() New Integer(_maxWordLength, _maxWordLength) {})
//000118:                                               results = _words.AsParallel().WithCancellation(token).
//000119:                                                   Select(Function(word) New With {Key .Word = word, .Distance = LevenshteinDistance(word, text, distanceMatrix.Value)}).
//000120:                                                   TakeTop(Function(p) p.Distance, NUM_SUGGESTIONS).
//000121:                                                   Select(Function(p) p.Word).
//000122:                                                   ToList()
//000123:                                           End Using
//000124:                                       End If
//000125:                                       sw.Stop()
//000126:                                       Return New With {.Results = results, .Time = sw.Elapsed}
//000127:                                   End Function, token).ContinueWith(Sub(t)
    IL_0000:  nop
//000128:                                                                         listBox1.ItemsSource =
    IL_0001:  ldarg.0
    IL_0002:  callvirt   instance class [PresentationFramework]System.Windows.Controls.ListBox SpellChecker.Window1::get_listBox1()
    IL_0007:  ldarg.1
    IL_0008:  callvirt   instance !0 class [mscorlib]System.Threading.Tasks.Task`1<class VB$AnonymousType_2`2<class [mscorlib]System.Collections.Generic.List`1<string>,valuetype [mscorlib]System.TimeSpan>>::get_Result()
    IL_000d:  callvirt   instance !0 class VB$AnonymousType_2`2<class [mscorlib]System.Collections.Generic.List`1<string>,valuetype [mscorlib]System.TimeSpan>::get_Results()
    IL_0012:  ldnull
    IL_0013:  ldftn      string SpellChecker.Window1::_Lambda$__4(string,
                                                                  int32)
    IL_0019:  newobj     instance void class [mscorlib]System.Func`3<string,int32,string>::.ctor(object,
                                                                                                 native int)
    IL_001e:  call       class [mscorlib]System.Collections.Generic.IEnumerable`1<!!1> [System.Core]System.Linq.Enumerable::Select<string,string>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>,
                                                                                                                                                  class [mscorlib]System.Func`3<!!0,int32,!!1>)
    IL_0023:  callvirt   instance void [PresentationFramework]System.Windows.Controls.ItemsControl::set_ItemsSource(class [mscorlib]System.Collections.IEnumerable)
    IL_0028:  nop
//000129:                                                                             t.Result.Results.[Select](Function(str, i) String.Format("{0,2}. {1}", i + 1, str))
//000130:                                                                         lblTime.Content = Convert.ToString("Sec: ") & Convert.ToString(t.Result.Time)
    IL_0029:  ldarg.0
    IL_002a:  callvirt   instance class [PresentationFramework]System.Windows.Controls.Label SpellChecker.Window1::get_lblTime()
    IL_002f:  ldstr      "Sec: "
    IL_0034:  call       string [mscorlib]System.Convert::ToString(string)
    IL_0039:  ldarg.1
    IL_003a:  callvirt   instance !0 class [mscorlib]System.Threading.Tasks.Task`1<class VB$AnonymousType_2`2<class [mscorlib]System.Collections.Generic.List`1<string>,valuetype [mscorlib]System.TimeSpan>>::get_Result()
    IL_003f:  callvirt   instance !1 class VB$AnonymousType_2`2<class [mscorlib]System.Collections.Generic.List`1<string>,valuetype [mscorlib]System.TimeSpan>::get_Time()
    IL_0044:  box        [mscorlib]System.TimeSpan
    IL_0049:  call       string [mscorlib]System.Convert::ToString(object)
    IL_004e:  call       string [mscorlib]System.String::Concat(string,
                                                                string)
    IL_0053:  callvirt   instance void [PresentationFramework]System.Windows.Controls.ContentControl::set_Content(object)
    IL_0058:  nop
//000131:                                                                     End Sub, CancellationToken.None, TaskContinuationOptions.NotOnCanceled,
    IL_0059:  nop
    IL_005a:  ret
  } // end of method Window1::_Lambda$__3

  .method private specialname static string 
          _Lambda$__4(string str,
                      int32 i) cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       24 (0x18)
    .maxstack  3
    .locals init ([0] string _Lambda$__4)
//000129:                                                                             t.Result.Results.[Select](Function(str, i) String.Format("{0,2}. {1}", i + 1, str))
    IL_0000:  ldstr      "{0,2}. {1}"
    IL_0005:  ldarg.1
    IL_0006:  ldc.i4.1
    IL_0007:  add.ovf
    IL_0008:  box        [mscorlib]System.Int32
    IL_000d:  ldarg.0
    IL_000e:  call       string [mscorlib]System.String::Format(string,
                                                                object,
                                                                object)
    IL_0013:  stloc.0
    IL_0014:  br.s       IL_0016

    IL_0016:  ldloc.0
    IL_0017:  ret
  } // end of method Window1::_Lambda$__4

  .method private specialname static int32 
          _Lambda$__7(class VB$AnonymousType_0`2<string,int32> p) cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       11 (0xb)
    .maxstack  1
    .locals init ([0] int32 _Lambda$__7)
//000112:                                               OrderBy(Function(p) p.Distance).
    IL_0000:  ldarg.0
    IL_0001:  callvirt   instance !1 class VB$AnonymousType_0`2<string,int32>::get_Distance()
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method Window1::_Lambda$__7

  .method private specialname static string 
          _Lambda$__8(class VB$AnonymousType_0`2<string,int32> p) cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       11 (0xb)
    .maxstack  1
    .locals init ([0] string _Lambda$__8)
//000113:                                               Take(NUM_SUGGESTIONS).
//000114:                                               Select(Function(p) p.Word).
    IL_0000:  ldarg.0
    IL_0001:  callvirt   instance !0 class VB$AnonymousType_0`2<string,int32>::get_Word()
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method Window1::_Lambda$__8

  .method private specialname instance int32[0...,0...] 
          _Lambda$__9() cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       26 (0x1a)
    .maxstack  3
    .locals init ([0] int32[0...,0...] _Lambda$__9)
//000115:                                               ToList()
//000116:                                       Else
//000117:                                           Using distanceMatrix = New ThreadLocal(Of Integer(,))(Function() New Integer(_maxWordLength, _maxWordLength) {})
    IL_0000:  ldarg.0
    IL_0001:  ldfld      int32 SpellChecker.Window1::_maxWordLength
    IL_0006:  ldc.i4.1
    IL_0007:  add.ovf
    IL_0008:  ldarg.0
    IL_0009:  ldfld      int32 SpellChecker.Window1::_maxWordLength
    IL_000e:  ldc.i4.1
    IL_000f:  add.ovf
    IL_0010:  newobj     instance void int32[0...,0...]::.ctor(int32,
                                                               int32)
    IL_0015:  stloc.0
    IL_0016:  br.s       IL_0018

    IL_0018:  ldloc.0
    IL_0019:  ret
  } // end of method Window1::_Lambda$__9

  .method private specialname static int32 
          _Lambda$__11(class VB$AnonymousType_1`2<string,int32> p) cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       11 (0xb)
    .maxstack  1
    .locals init ([0] int32 _Lambda$__11)
//000118:                                               results = _words.AsParallel().WithCancellation(token).
//000119:                                                   Select(Function(word) New With {Key .Word = word, .Distance = LevenshteinDistance(word, text, distanceMatrix.Value)}).
//000120:                                                   TakeTop(Function(p) p.Distance, NUM_SUGGESTIONS).
    IL_0000:  ldarg.0
    IL_0001:  callvirt   instance !1 class VB$AnonymousType_1`2<string,int32>::get_Distance()
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method Window1::_Lambda$__11

  .method private specialname static string 
          _Lambda$__12(class VB$AnonymousType_1`2<string,int32> p) cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       11 (0xb)
    .maxstack  1
    .locals init ([0] string _Lambda$__12)
//000121:                                                   Select(Function(p) p.Word).
    IL_0000:  ldarg.0
    IL_0001:  callvirt   instance !0 class VB$AnonymousType_1`2<string,int32>::get_Word()
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method Window1::_Lambda$__12

  .property instance class [PresentationFramework]System.Windows.Controls.ListBox
          listBox1()
  {
    .set instance void SpellChecker.Window1::set_listBox1(class [PresentationFramework]System.Windows.Controls.ListBox)
    .get instance class [PresentationFramework]System.Windows.Controls.ListBox SpellChecker.Window1::get_listBox1()
  } // end of property Window1::listBox1
  .property instance class [PresentationFramework]System.Windows.Controls.TextBox
          txtInput()
  {
    .get instance class [PresentationFramework]System.Windows.Controls.TextBox SpellChecker.Window1::get_txtInput()
    .set instance void SpellChecker.Window1::set_txtInput(class [PresentationFramework]System.Windows.Controls.TextBox)
  } // end of property Window1::txtInput
  .property instance class [PresentationFramework]System.Windows.Controls.Label
          lblTime()
  {
    .get instance class [PresentationFramework]System.Windows.Controls.Label SpellChecker.Window1::get_lblTime()
    .set instance void SpellChecker.Window1::set_lblTime(class [PresentationFramework]System.Windows.Controls.Label)
  } // end of property Window1::lblTime
  .property instance class [PresentationFramework]System.Windows.Controls.CheckBox
          chkParallel()
  {
    .get instance class [PresentationFramework]System.Windows.Controls.CheckBox SpellChecker.Window1::get_chkParallel()
    .set instance void SpellChecker.Window1::set_chkParallel(class [PresentationFramework]System.Windows.Controls.CheckBox)
  } // end of property Window1::chkParallel
  .property instance class [PresentationFramework]System.Windows.Controls.Button
          btnLoad()
  {
    .set instance void SpellChecker.Window1::set_btnLoad(class [PresentationFramework]System.Windows.Controls.Button)
    .get instance class [PresentationFramework]System.Windows.Controls.Button SpellChecker.Window1::get_btnLoad()
  } // end of property Window1::btnLoad
} // end of class SpellChecker.Window1

.class private auto ansi sealed VB$AnonymousDelegate_0
       extends [mscorlib]System.MulticastDelegate
{
  .custom instance void [mscorlib]System.Diagnostics.DebuggerDisplayAttribute::.ctor(string) = ( 01 00 12 3C 67 65 6E 65 72 61 74 65 64 20 6D 65   // ...<generated me
                                                                                                 74 68 6F 64 3E 01 00 54 0E 04 54 79 70 65 12 3C   // thod>..T..Type.<
                                                                                                 67 65 6E 65 72 61 74 65 64 20 6D 65 74 68 6F 64   // generated method
                                                                                                 3E )                                              // >
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
  .method public specialname rtspecialname 
          instance void  .ctor(object TargetObject,
                               native int TargetMethod) runtime managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
  } // end of method VB$AnonymousDelegate_0::.ctor

  .method public newslot strict virtual instance class [mscorlib]System.IAsyncResult 
          BeginInvoke(class [mscorlib]System.AsyncCallback DelegateCallback,
                      object DelegateAsyncState) runtime managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
  } // end of method VB$AnonymousDelegate_0::BeginInvoke

  .method public newslot strict virtual instance void 
          EndInvoke(class [mscorlib]System.IAsyncResult DelegateAsyncResult) runtime managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
  } // end of method VB$AnonymousDelegate_0::EndInvoke

  .method public newslot strict virtual instance void 
          Invoke() runtime managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
  } // end of method VB$AnonymousDelegate_0::Invoke

} // end of class VB$AnonymousDelegate_0

.class private auto ansi sealed VB$AnonymousType_0`2<T0,T1>
       extends [mscorlib]System.Object
       implements class [mscorlib]System.IEquatable`1<class VB$AnonymousType_0`2<!T0,!T1>>
{
  .custom instance void [mscorlib]System.Diagnostics.DebuggerDisplayAttribute::.ctor(string) = ( 01 00 20 57 6F 72 64 3D 7B 57 6F 72 64 7D 2C 20   // .. Word={Word}, 
                                                                                                 44 69 73 74 61 6E 63 65 3D 7B 44 69 73 74 61 6E   // Distance={Distan
                                                                                                 63 65 7D 00 00 )                                  // ce}..
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
  .field private initonly !T0 $Word
  .field private initonly !T1 $Distance
  .method public specialname rtspecialname 
          instance void  .ctor(!T0 Word,
                               !T1 Distance) cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       23 (0x17)
    .maxstack  8
    IL_0000:  ldarg.0
    IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
    IL_0006:  nop
    IL_0007:  ldarg.0
    IL_0008:  ldarg.1
    IL_0009:  stfld      !0 class VB$AnonymousType_0`2<!T0,!T1>::$Word
    IL_000e:  ldarg.0
    IL_000f:  ldarg.2
    IL_0010:  stfld      !1 class VB$AnonymousType_0`2<!T0,!T1>::$Distance
    IL_0015:  nop
    IL_0016:  ret
  } // end of method VB$AnonymousType_0`2::.ctor

  .method public hidebysig strict virtual 
          instance bool  Equals(object obj) cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       17 (0x11)
    .maxstack  2
    .locals init (bool V_0)
    IL_0000:  ldarg.0
    IL_0001:  ldarg.1
    IL_0002:  isinst     class VB$AnonymousType_0`2<!T0,!T1>
    IL_0007:  callvirt   instance bool class VB$AnonymousType_0`2<!T0,!T1>::Equals(class VB$AnonymousType_0`2<!0,!1>)
    IL_000c:  stloc.0
    IL_000d:  br.s       IL_000f

    IL_000f:  ldloc.0
    IL_0010:  ret
  } // end of method VB$AnonymousType_0`2::Equals

  .method public hidebysig newslot strict virtual final 
          instance bool  Equals(class VB$AnonymousType_0`2<!T0,!T1> val) cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    .override  method instance bool class [mscorlib]System.IEquatable`1<class VB$AnonymousType_0`2<!T0,!T1>>::Equals(!0)
    // Code size       304 (0x130)
    .maxstack  2
    .locals init (bool V_0,
             class VB$AnonymousType_0`2<!T0,!T1> V_1,
             bool V_2,
             bool V_3)
    IL_0000:  ldc.i4.1
    IL_0001:  stloc.0
    IL_0002:  ldarg.1
    IL_0003:  ldnull
    IL_0004:  ceq
    IL_0006:  stloc.2
    IL_0007:  ldloc.2
    IL_0008:  brfalse.s  IL_0011

    IL_000a:  ldc.i4.0
    IL_000b:  stloc.0
    IL_000c:  br         IL_012e

    IL_0011:  ldarg.1
    IL_0012:  stloc.1
    IL_0013:  ldarg.0
    IL_0014:  ldfld      !0 class VB$AnonymousType_0`2<!T0,!T1>::$Word
    IL_0019:  box        !T0
    IL_001e:  ldnull
    IL_001f:  ceq
    IL_0021:  stloc.2
    IL_0022:  ldloc.2
    IL_0023:  brfalse.s  IL_0043

    IL_0025:  ldloc.1
    IL_0026:  ldfld      !0 class VB$AnonymousType_0`2<!T0,!T1>::$Word
    IL_002b:  box        !T0
    IL_0030:  ldnull
    IL_0031:  ceq
    IL_0033:  ldc.i4.0
    IL_0034:  ceq
    IL_0036:  stloc.3
    IL_0037:  ldloc.3
    IL_0038:  brfalse.s  IL_0041

    IL_003a:  ldc.i4.0
    IL_003b:  stloc.0
    IL_003c:  br         IL_012e

    IL_0041:  br.s       IL_005d

    IL_0043:  nop
    IL_0044:  ldloc.1
    IL_0045:  ldfld      !0 class VB$AnonymousType_0`2<!T0,!T1>::$Word
    IL_004a:  box        !T0
    IL_004f:  ldnull
    IL_0050:  ceq
    IL_0052:  stloc.3
    IL_0053:  ldloc.3
    IL_0054:  brfalse.s  IL_005d

    IL_0056:  ldc.i4.0
    IL_0057:  stloc.0
    IL_0058:  br         IL_012e

    IL_005d:  nop
    IL_005e:  ldarg.0
    IL_005f:  ldfld      !0 class VB$AnonymousType_0`2<!T0,!T1>::$Word
    IL_0064:  box        !T0
    IL_0069:  brfalse.s  IL_0095

    IL_006b:  ldloc.1
    IL_006c:  ldfld      !0 class VB$AnonymousType_0`2<!T0,!T1>::$Word
    IL_0071:  box        !T0
    IL_0076:  brfalse.s  IL_0095

    IL_0078:  ldarg.0
    IL_0079:  ldfld      !0 class VB$AnonymousType_0`2<!T0,!T1>::$Word
    IL_007e:  box        !T0
    IL_0083:  ldloc.1
    IL_0084:  ldfld      !0 class VB$AnonymousType_0`2<!T0,!T1>::$Word
    IL_0089:  box        !T0
    IL_008e:  callvirt   instance bool [mscorlib]System.Object::Equals(object)
    IL_0093:  brfalse.s  IL_0098

    IL_0095:  ldc.i4.0
    IL_0096:  br.s       IL_0099

    IL_0098:  ldc.i4.1
    IL_0099:  stloc.3
    IL_009a:  ldloc.3
    IL_009b:  brfalse.s  IL_00a4

    IL_009d:  ldc.i4.0
    IL_009e:  stloc.0
    IL_009f:  br         IL_012e

    IL_00a4:  ldarg.0
    IL_00a5:  ldfld      !1 class VB$AnonymousType_0`2<!T0,!T1>::$Distance
    IL_00aa:  box        !T1
    IL_00af:  ldnull
    IL_00b0:  ceq
    IL_00b2:  stloc.3
    IL_00b3:  ldloc.3
    IL_00b4:  brfalse.s  IL_00d1

    IL_00b6:  ldloc.1
    IL_00b7:  ldfld      !1 class VB$AnonymousType_0`2<!T0,!T1>::$Distance
    IL_00bc:  box        !T1
    IL_00c1:  ldnull
    IL_00c2:  ceq
    IL_00c4:  ldc.i4.0
    IL_00c5:  ceq
    IL_00c7:  stloc.2
    IL_00c8:  ldloc.2
    IL_00c9:  brfalse.s  IL_00cf

    IL_00cb:  ldc.i4.0
    IL_00cc:  stloc.0
    IL_00cd:  br.s       IL_012e

    IL_00cf:  br.s       IL_00e8

    IL_00d1:  nop
    IL_00d2:  ldloc.1
    IL_00d3:  ldfld      !1 class VB$AnonymousType_0`2<!T0,!T1>::$Distance
    IL_00d8:  box        !T1
    IL_00dd:  ldnull
    IL_00de:  ceq
    IL_00e0:  stloc.3
    IL_00e1:  ldloc.3
    IL_00e2:  brfalse.s  IL_00e8

    IL_00e4:  ldc.i4.0
    IL_00e5:  stloc.0
    IL_00e6:  br.s       IL_012e

    IL_00e8:  nop
    IL_00e9:  ldarg.0
    IL_00ea:  ldfld      !1 class VB$AnonymousType_0`2<!T0,!T1>::$Distance
    IL_00ef:  box        !T1
    IL_00f4:  brfalse.s  IL_0120

    IL_00f6:  ldloc.1
    IL_00f7:  ldfld      !1 class VB$AnonymousType_0`2<!T0,!T1>::$Distance
    IL_00fc:  box        !T1
    IL_0101:  brfalse.s  IL_0120

    IL_0103:  ldarg.0
    IL_0104:  ldfld      !1 class VB$AnonymousType_0`2<!T0,!T1>::$Distance
    IL_0109:  box        !T1
    IL_010e:  ldloc.1
    IL_010f:  ldfld      !1 class VB$AnonymousType_0`2<!T0,!T1>::$Distance
    IL_0114:  box        !T1
    IL_0119:  callvirt   instance bool [mscorlib]System.Object::Equals(object)
    IL_011e:  brfalse.s  IL_0123

    IL_0120:  ldc.i4.0
    IL_0121:  br.s       IL_0124

    IL_0123:  ldc.i4.1
    IL_0124:  stloc.3
    IL_0125:  ldloc.3
    IL_0126:  brfalse.s  IL_012c

    IL_0128:  ldc.i4.0
    IL_0129:  stloc.0
    IL_012a:  br.s       IL_012e

    IL_012c:  ldnull
    IL_012d:  stloc.1
    IL_012e:  ldloc.0
    IL_012f:  ret
  } // end of method VB$AnonymousType_0`2::Equals

  .method public strict virtual instance int32 
          GetHashCode() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       112 (0x70)
    .maxstack  2
    .locals init (int32 V_0,
             !T0 V_1,
             !T1 V_2,
             bool V_3)
    IL_0000:  ldc.i4     0xc1482c73
    IL_0005:  stloc.0
    IL_0006:  ldloc.0
    IL_0007:  ldc.i4     0xa5555529
    IL_000c:  mul
    IL_000d:  stloc.0
    IL_000e:  ldarg.0
    IL_000f:  ldfld      !0 class VB$AnonymousType_0`2<!T0,!T1>::$Word
    IL_0014:  box        !T0
    IL_0019:  ldnull
    IL_001a:  ceq
    IL_001c:  ldc.i4.0
    IL_001d:  ceq
    IL_001f:  stloc.3
    IL_0020:  ldloc.3
    IL_0021:  brfalse.s  IL_003a

    IL_0023:  ldloc.0
    IL_0024:  ldarg.0
    IL_0025:  ldfld      !0 class VB$AnonymousType_0`2<!T0,!T1>::$Word
    IL_002a:  stloc.1
    IL_002b:  ldloca.s   V_1
    IL_002d:  constrained. !T0
    IL_0033:  callvirt   instance int32 [mscorlib]System.Object::GetHashCode()
    IL_0038:  add
    IL_0039:  stloc.0
    IL_003a:  ldloc.0
    IL_003b:  ldc.i4     0xa5555529
    IL_0040:  mul
    IL_0041:  stloc.0
    IL_0042:  ldarg.0
    IL_0043:  ldfld      !1 class VB$AnonymousType_0`2<!T0,!T1>::$Distance
    IL_0048:  box        !T1
    IL_004d:  ldnull
    IL_004e:  ceq
    IL_0050:  ldc.i4.0
    IL_0051:  ceq
    IL_0053:  stloc.3
    IL_0054:  ldloc.3
    IL_0055:  brfalse.s  IL_006e

    IL_0057:  ldloc.0
    IL_0058:  ldarg.0
    IL_0059:  ldfld      !1 class VB$AnonymousType_0`2<!T0,!T1>::$Distance
    IL_005e:  stloc.2
    IL_005f:  ldloca.s   V_2
    IL_0061:  constrained. !T1
    IL_0067:  callvirt   instance int32 [mscorlib]System.Object::GetHashCode()
    IL_006c:  add
    IL_006d:  stloc.0
    IL_006e:  ldloc.0
    IL_006f:  ret
  } // end of method VB$AnonymousType_0`2::GetHashCode

  .method public strict virtual instance string 
          ToString() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       97 (0x61)
    .maxstack  4
    .locals init (class [mscorlib]System.Text.StringBuilder V_0,
             string V_1)
    IL_0000:  newobj     instance void [mscorlib]System.Text.StringBuilder::.ctor()
    IL_0005:  stloc.0
    IL_0006:  ldloc.0
    IL_0007:  ldstr      "{ "
    IL_000c:  callvirt   instance class [mscorlib]System.Text.StringBuilder [mscorlib]System.Text.StringBuilder::Append(string)
    IL_0011:  pop
    IL_0012:  ldloc.0
    IL_0013:  ldstr      "{0} = {1}, "
    IL_0018:  ldstr      "Word"
    IL_001d:  ldarg.0
    IL_001e:  ldfld      !0 class VB$AnonymousType_0`2<!T0,!T1>::$Word
    IL_0023:  box        !T0
    IL_0028:  callvirt   instance class [mscorlib]System.Text.StringBuilder [mscorlib]System.Text.StringBuilder::AppendFormat(string,
                                                                                                                              object,
                                                                                                                              object)
    IL_002d:  pop
    IL_002e:  ldloc.0
    IL_002f:  ldstr      "{0} = {1} "
    IL_0034:  ldstr      "Distance"
    IL_0039:  ldarg.0
    IL_003a:  ldfld      !1 class VB$AnonymousType_0`2<!T0,!T1>::$Distance
    IL_003f:  box        !T1
    IL_0044:  callvirt   instance class [mscorlib]System.Text.StringBuilder [mscorlib]System.Text.StringBuilder::AppendFormat(string,
                                                                                                                              object,
                                                                                                                              object)
    IL_0049:  pop
    IL_004a:  ldloc.0
    IL_004b:  ldstr      "}"
    IL_0050:  callvirt   instance class [mscorlib]System.Text.StringBuilder [mscorlib]System.Text.StringBuilder::Append(string)
    IL_0055:  pop
    IL_0056:  ldloc.0
    IL_0057:  callvirt   instance string [mscorlib]System.Text.StringBuilder::ToString()
    IL_005c:  stloc.1
    IL_005d:  br.s       IL_005f

    IL_005f:  ldloc.1
    IL_0060:  ret
  } // end of method VB$AnonymousType_0`2::ToString

  .method public specialname instance !T0 
          get_Word() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       11 (0xb)
    .maxstack  1
    .locals init (!T0 V_0)
    IL_0000:  ldarg.0
    IL_0001:  ldfld      !0 class VB$AnonymousType_0`2<!T0,!T1>::$Word
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method VB$AnonymousType_0`2::get_Word

  .method public specialname instance !T1 
          get_Distance() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       11 (0xb)
    .maxstack  1
    .locals init (!T1 V_0)
    IL_0000:  ldarg.0
    IL_0001:  ldfld      !1 class VB$AnonymousType_0`2<!T0,!T1>::$Distance
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method VB$AnonymousType_0`2::get_Distance

  .property instance !T0 Word()
  {
    .get instance !T0 VB$AnonymousType_0`2::get_Word()
  } // end of property VB$AnonymousType_0`2::Word
  .property instance !T1 Distance()
  {
    .get instance !T1 VB$AnonymousType_0`2::get_Distance()
  } // end of property VB$AnonymousType_0`2::Distance
} // end of class VB$AnonymousType_0`2

.class private auto ansi sealed VB$AnonymousType_1`2<T0,T1>
       extends [mscorlib]System.Object
       implements class [mscorlib]System.IEquatable`1<class VB$AnonymousType_1`2<!T0,!T1>>
{
  .custom instance void [mscorlib]System.Diagnostics.DebuggerDisplayAttribute::.ctor(string) = ( 01 00 20 57 6F 72 64 3D 7B 57 6F 72 64 7D 2C 20   // .. Word={Word}, 
                                                                                                 44 69 73 74 61 6E 63 65 3D 7B 44 69 73 74 61 6E   // Distance={Distan
                                                                                                 63 65 7D 00 00 )                                  // ce}..
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
  .field private initonly !T0 $Word
  .field private !T1 $Distance
  .method public specialname rtspecialname 
          instance void  .ctor(!T0 Word,
                               !T1 Distance) cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       23 (0x17)
    .maxstack  8
    IL_0000:  ldarg.0
    IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
    IL_0006:  nop
    IL_0007:  ldarg.0
    IL_0008:  ldarg.1
    IL_0009:  stfld      !0 class VB$AnonymousType_1`2<!T0,!T1>::$Word
    IL_000e:  ldarg.0
    IL_000f:  ldarg.2
    IL_0010:  stfld      !1 class VB$AnonymousType_1`2<!T0,!T1>::$Distance
    IL_0015:  nop
    IL_0016:  ret
  } // end of method VB$AnonymousType_1`2::.ctor

  .method public hidebysig newslot strict virtual final 
          instance bool  Equals(class VB$AnonymousType_1`2<!T0,!T1> val) cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    .override  method instance bool class [mscorlib]System.IEquatable`1<class VB$AnonymousType_1`2<!T0,!T1>>::Equals(!0)
    // Code size       159 (0x9f)
    .maxstack  2
    .locals init (bool V_0,
             class VB$AnonymousType_1`2<!T0,!T1> V_1,
             bool V_2,
             bool V_3)
    IL_0000:  ldc.i4.1
    IL_0001:  stloc.0
    IL_0002:  ldarg.1
    IL_0003:  ldnull
    IL_0004:  ceq
    IL_0006:  stloc.2
    IL_0007:  ldloc.2
    IL_0008:  brfalse.s  IL_0011

    IL_000a:  ldc.i4.0
    IL_000b:  stloc.0
    IL_000c:  br         IL_009d

    IL_0011:  ldarg.1
    IL_0012:  stloc.1
    IL_0013:  ldarg.0
    IL_0014:  ldfld      !0 class VB$AnonymousType_1`2<!T0,!T1>::$Word
    IL_0019:  box        !T0
    IL_001e:  ldnull
    IL_001f:  ceq
    IL_0021:  stloc.2
    IL_0022:  ldloc.2
    IL_0023:  brfalse.s  IL_0040

    IL_0025:  ldloc.1
    IL_0026:  ldfld      !0 class VB$AnonymousType_1`2<!T0,!T1>::$Word
    IL_002b:  box        !T0
    IL_0030:  ldnull
    IL_0031:  ceq
    IL_0033:  ldc.i4.0
    IL_0034:  ceq
    IL_0036:  stloc.3
    IL_0037:  ldloc.3
    IL_0038:  brfalse.s  IL_003e

    IL_003a:  ldc.i4.0
    IL_003b:  stloc.0
    IL_003c:  br.s       IL_009d

    IL_003e:  br.s       IL_0057

    IL_0040:  nop
    IL_0041:  ldloc.1
    IL_0042:  ldfld      !0 class VB$AnonymousType_1`2<!T0,!T1>::$Word
    IL_0047:  box        !T0
    IL_004c:  ldnull
    IL_004d:  ceq
    IL_004f:  stloc.3
    IL_0050:  ldloc.3
    IL_0051:  brfalse.s  IL_0057

    IL_0053:  ldc.i4.0
    IL_0054:  stloc.0
    IL_0055:  br.s       IL_009d

    IL_0057:  nop
    IL_0058:  ldarg.0
    IL_0059:  ldfld      !0 class VB$AnonymousType_1`2<!T0,!T1>::$Word
    IL_005e:  box        !T0
    IL_0063:  brfalse.s  IL_008f

    IL_0065:  ldloc.1
    IL_0066:  ldfld      !0 class VB$AnonymousType_1`2<!T0,!T1>::$Word
    IL_006b:  box        !T0
    IL_0070:  brfalse.s  IL_008f

    IL_0072:  ldarg.0
    IL_0073:  ldfld      !0 class VB$AnonymousType_1`2<!T0,!T1>::$Word
    IL_0078:  box        !T0
    IL_007d:  ldloc.1
    IL_007e:  ldfld      !0 class VB$AnonymousType_1`2<!T0,!T1>::$Word
    IL_0083:  box        !T0
    IL_0088:  callvirt   instance bool [mscorlib]System.Object::Equals(object)
    IL_008d:  brfalse.s  IL_0092

    IL_008f:  ldc.i4.0
    IL_0090:  br.s       IL_0093

    IL_0092:  ldc.i4.1
    IL_0093:  stloc.3
    IL_0094:  ldloc.3
    IL_0095:  brfalse.s  IL_009b

    IL_0097:  ldc.i4.0
    IL_0098:  stloc.0
    IL_0099:  br.s       IL_009d

    IL_009b:  ldnull
    IL_009c:  stloc.1
    IL_009d:  ldloc.0
    IL_009e:  ret
  } // end of method VB$AnonymousType_1`2::Equals

  .method public hidebysig strict virtual 
          instance bool  Equals(object obj) cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       17 (0x11)
    .maxstack  2
    .locals init (bool V_0)
    IL_0000:  ldarg.0
    IL_0001:  ldarg.1
    IL_0002:  isinst     class VB$AnonymousType_1`2<!T0,!T1>
    IL_0007:  callvirt   instance bool class VB$AnonymousType_1`2<!T0,!T1>::Equals(class VB$AnonymousType_1`2<!0,!1>)
    IL_000c:  stloc.0
    IL_000d:  br.s       IL_000f

    IL_000f:  ldloc.0
    IL_0010:  ret
  } // end of method VB$AnonymousType_1`2::Equals

  .method public strict virtual instance int32 
          GetHashCode() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       60 (0x3c)
    .maxstack  2
    .locals init (int32 V_0,
             !T0 V_1,
             bool V_2)
    IL_0000:  ldc.i4     0xc1482c73
    IL_0005:  stloc.0
    IL_0006:  ldloc.0
    IL_0007:  ldc.i4     0xa5555529
    IL_000c:  mul
    IL_000d:  stloc.0
    IL_000e:  ldarg.0
    IL_000f:  ldfld      !0 class VB$AnonymousType_1`2<!T0,!T1>::$Word
    IL_0014:  box        !T0
    IL_0019:  ldnull
    IL_001a:  ceq
    IL_001c:  ldc.i4.0
    IL_001d:  ceq
    IL_001f:  stloc.2
    IL_0020:  ldloc.2
    IL_0021:  brfalse.s  IL_003a

    IL_0023:  ldloc.0
    IL_0024:  ldarg.0
    IL_0025:  ldfld      !0 class VB$AnonymousType_1`2<!T0,!T1>::$Word
    IL_002a:  stloc.1
    IL_002b:  ldloca.s   V_1
    IL_002d:  constrained. !T0
    IL_0033:  callvirt   instance int32 [mscorlib]System.Object::GetHashCode()
    IL_0038:  add
    IL_0039:  stloc.0
    IL_003a:  ldloc.0
    IL_003b:  ret
  } // end of method VB$AnonymousType_1`2::GetHashCode

  .method public strict virtual instance string 
          ToString() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       97 (0x61)
    .maxstack  4
    .locals init (class [mscorlib]System.Text.StringBuilder V_0,
             string V_1)
    IL_0000:  newobj     instance void [mscorlib]System.Text.StringBuilder::.ctor()
    IL_0005:  stloc.0
    IL_0006:  ldloc.0
    IL_0007:  ldstr      "{ "
    IL_000c:  callvirt   instance class [mscorlib]System.Text.StringBuilder [mscorlib]System.Text.StringBuilder::Append(string)
    IL_0011:  pop
    IL_0012:  ldloc.0
    IL_0013:  ldstr      "{0} = {1}, "
    IL_0018:  ldstr      "Word"
    IL_001d:  ldarg.0
    IL_001e:  ldfld      !0 class VB$AnonymousType_1`2<!T0,!T1>::$Word
    IL_0023:  box        !T0
    IL_0028:  callvirt   instance class [mscorlib]System.Text.StringBuilder [mscorlib]System.Text.StringBuilder::AppendFormat(string,
                                                                                                                              object,
                                                                                                                              object)
    IL_002d:  pop
    IL_002e:  ldloc.0
    IL_002f:  ldstr      "{0} = {1} "
    IL_0034:  ldstr      "Distance"
    IL_0039:  ldarg.0
    IL_003a:  ldfld      !1 class VB$AnonymousType_1`2<!T0,!T1>::$Distance
    IL_003f:  box        !T1
    IL_0044:  callvirt   instance class [mscorlib]System.Text.StringBuilder [mscorlib]System.Text.StringBuilder::AppendFormat(string,
                                                                                                                              object,
                                                                                                                              object)
    IL_0049:  pop
    IL_004a:  ldloc.0
    IL_004b:  ldstr      "}"
    IL_0050:  callvirt   instance class [mscorlib]System.Text.StringBuilder [mscorlib]System.Text.StringBuilder::Append(string)
    IL_0055:  pop
    IL_0056:  ldloc.0
    IL_0057:  callvirt   instance string [mscorlib]System.Text.StringBuilder::ToString()
    IL_005c:  stloc.1
    IL_005d:  br.s       IL_005f

    IL_005f:  ldloc.1
    IL_0060:  ret
  } // end of method VB$AnonymousType_1`2::ToString

  .method public specialname instance !T0 
          get_Word() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       11 (0xb)
    .maxstack  1
    .locals init (!T0 V_0)
    IL_0000:  ldarg.0
    IL_0001:  ldfld      !0 class VB$AnonymousType_1`2<!T0,!T1>::$Word
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method VB$AnonymousType_1`2::get_Word

  .method public specialname instance !T1 
          get_Distance() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       11 (0xb)
    .maxstack  1
    .locals init (!T1 V_0)
    IL_0000:  ldarg.0
    IL_0001:  ldfld      !1 class VB$AnonymousType_1`2<!T0,!T1>::$Distance
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method VB$AnonymousType_1`2::get_Distance

  .method public specialname instance void 
          set_Distance(!T1 Value) cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       9 (0x9)
    .maxstack  8
    IL_0000:  ldarg.0
    IL_0001:  ldarg.1
    IL_0002:  stfld      !1 class VB$AnonymousType_1`2<!T0,!T1>::$Distance
    IL_0007:  nop
    IL_0008:  ret
  } // end of method VB$AnonymousType_1`2::set_Distance

  .property instance !T0 Word()
  {
    .get instance !T0 VB$AnonymousType_1`2::get_Word()
  } // end of property VB$AnonymousType_1`2::Word
  .property instance !T1 Distance()
  {
    .get instance !T1 VB$AnonymousType_1`2::get_Distance()
    .set instance void VB$AnonymousType_1`2::set_Distance(!T1)
  } // end of property VB$AnonymousType_1`2::Distance
} // end of class VB$AnonymousType_1`2

.class private auto ansi sealed VB$AnonymousType_2`2<T0,T1>
       extends [mscorlib]System.Object
{
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
  .custom instance void [mscorlib]System.Diagnostics.DebuggerDisplayAttribute::.ctor(string) = ( 01 00 1E 52 65 73 75 6C 74 73 3D 7B 52 65 73 75   // ...Results={Resu
                                                                                                 6C 74 73 7D 2C 20 54 69 6D 65 3D 7B 54 69 6D 65   // lts}, Time={Time
                                                                                                 7D 00 00 )                                        // }..
  .field private !T0 $Results
  .field private !T1 $Time
  .method public specialname rtspecialname 
          instance void  .ctor(!T0 Results,
                               !T1 Time) cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       23 (0x17)
    .maxstack  8
    IL_0000:  ldarg.0
    IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
    IL_0006:  nop
    IL_0007:  ldarg.0
    IL_0008:  ldarg.1
    IL_0009:  stfld      !0 class VB$AnonymousType_2`2<!T0,!T1>::$Results
    IL_000e:  ldarg.0
    IL_000f:  ldarg.2
    IL_0010:  stfld      !1 class VB$AnonymousType_2`2<!T0,!T1>::$Time
    IL_0015:  nop
    IL_0016:  ret
  } // end of method VB$AnonymousType_2`2::.ctor

  .method public strict virtual instance string 
          ToString() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       97 (0x61)
    .maxstack  4
    .locals init (class [mscorlib]System.Text.StringBuilder V_0,
             string V_1)
    IL_0000:  newobj     instance void [mscorlib]System.Text.StringBuilder::.ctor()
    IL_0005:  stloc.0
    IL_0006:  ldloc.0
    IL_0007:  ldstr      "{ "
    IL_000c:  callvirt   instance class [mscorlib]System.Text.StringBuilder [mscorlib]System.Text.StringBuilder::Append(string)
    IL_0011:  pop
    IL_0012:  ldloc.0
    IL_0013:  ldstr      "{0} = {1}, "
    IL_0018:  ldstr      "Results"
    IL_001d:  ldarg.0
    IL_001e:  ldfld      !0 class VB$AnonymousType_2`2<!T0,!T1>::$Results
    IL_0023:  box        !T0
    IL_0028:  callvirt   instance class [mscorlib]System.Text.StringBuilder [mscorlib]System.Text.StringBuilder::AppendFormat(string,
                                                                                                                              object,
                                                                                                                              object)
    IL_002d:  pop
    IL_002e:  ldloc.0
    IL_002f:  ldstr      "{0} = {1} "
    IL_0034:  ldstr      "Time"
    IL_0039:  ldarg.0
    IL_003a:  ldfld      !1 class VB$AnonymousType_2`2<!T0,!T1>::$Time
    IL_003f:  box        !T1
    IL_0044:  callvirt   instance class [mscorlib]System.Text.StringBuilder [mscorlib]System.Text.StringBuilder::AppendFormat(string,
                                                                                                                              object,
                                                                                                                              object)
    IL_0049:  pop
    IL_004a:  ldloc.0
    IL_004b:  ldstr      "}"
    IL_0050:  callvirt   instance class [mscorlib]System.Text.StringBuilder [mscorlib]System.Text.StringBuilder::Append(string)
    IL_0055:  pop
    IL_0056:  ldloc.0
    IL_0057:  callvirt   instance string [mscorlib]System.Text.StringBuilder::ToString()
    IL_005c:  stloc.1
    IL_005d:  br.s       IL_005f

    IL_005f:  ldloc.1
    IL_0060:  ret
  } // end of method VB$AnonymousType_2`2::ToString

  .method public specialname instance !T0 
          get_Results() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       11 (0xb)
    .maxstack  1
    .locals init (!T0 V_0)
    IL_0000:  ldarg.0
    IL_0001:  ldfld      !0 class VB$AnonymousType_2`2<!T0,!T1>::$Results
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method VB$AnonymousType_2`2::get_Results

  .method public specialname instance void 
          set_Results(!T0 Value) cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       9 (0x9)
    .maxstack  8
    IL_0000:  ldarg.0
    IL_0001:  ldarg.1
    IL_0002:  stfld      !0 class VB$AnonymousType_2`2<!T0,!T1>::$Results
    IL_0007:  nop
    IL_0008:  ret
  } // end of method VB$AnonymousType_2`2::set_Results

  .method public specialname instance !T1 
          get_Time() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       11 (0xb)
    .maxstack  1
    .locals init (!T1 V_0)
    IL_0000:  ldarg.0
    IL_0001:  ldfld      !1 class VB$AnonymousType_2`2<!T0,!T1>::$Time
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method VB$AnonymousType_2`2::get_Time

  .method public specialname instance void 
          set_Time(!T1 Value) cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       9 (0x9)
    .maxstack  8
    IL_0000:  ldarg.0
    IL_0001:  ldarg.1
    IL_0002:  stfld      !1 class VB$AnonymousType_2`2<!T0,!T1>::$Time
    IL_0007:  nop
    IL_0008:  ret
  } // end of method VB$AnonymousType_2`2::set_Time

  .property instance !T0 Results()
  {
    .set instance void VB$AnonymousType_2`2::set_Results(!T0)
    .get instance !T0 VB$AnonymousType_2`2::get_Results()
  } // end of property VB$AnonymousType_2`2::Results
  .property instance !T1 Time()
  {
    .get instance !T1 VB$AnonymousType_2`2::get_Time()
    .set instance void VB$AnonymousType_2`2::set_Time(!T1)
  } // end of property VB$AnonymousType_2`2::Time
} // end of class VB$AnonymousType_2`2


// =============================================================

// *********** DISASSEMBLY COMPLETE ***********************
