
//  Microsoft (R) .NET Framework IL Disassembler.  Version 4.0.30319.1
//  Copyright (c) Microsoft Corporation.  All rights reserved.



// Metadata version: v4.0.30319
.assembly extern System.Windows.Forms
{
  .publickeytoken = (B7 7A 5C 56 19 34 E0 89 )                         // .z\V.4..
  .ver 4:0:0:0
}
.assembly extern mscorlib
{
  .publickeytoken = (B7 7A 5C 56 19 34 E0 89 )                         // .z\V.4..
  .ver 4:0:0:0
}
.assembly extern System
{
  .publickeytoken = (B7 7A 5C 56 19 34 E0 89 )                         // .z\V.4..
  .ver 4:0:0:0
}
.assembly extern System.Windows.Forms.DataVisualization
{
  .publickeytoken = (31 BF 38 56 AD 36 4E 35 )                         // 1.8V.6N5
  .ver 4:0:0:0
}
.assembly extern System.Drawing
{
  .publickeytoken = (B0 3F 5F 7F 11 D5 0A 3A )                         // .?_....:
  .ver 4:0:0:0
}
.assembly extern System.Core
{
  .publickeytoken = (B7 7A 5C 56 19 34 E0 89 )                         // .z\V.4..
  .ver 4:0:0:0
}
.assembly Strassens
{
  .custom instance void [mscorlib]System.Runtime.CompilerServices.RuntimeCompatibilityAttribute::.ctor() = ( 01 00 01 00 54 02 16 57 72 61 70 4E 6F 6E 45 78   // ....T..WrapNonEx
                                                                                                             63 65 70 74 69 6F 6E 54 68 72 6F 77 73 01 )       // ceptionThrows.
  .custom instance void [mscorlib]System.Runtime.Versioning.TargetFrameworkAttribute::.ctor(string) = ( 01 00 1A 2E 4E 45 54 46 72 61 6D 65 77 6F 72 6B   // ....NETFramework
                                                                                                        2C 56 65 72 73 69 6F 6E 3D 76 34 2E 30 01 00 54   // ,Version=v4.0..T
                                                                                                        0E 14 46 72 61 6D 65 77 6F 72 6B 44 69 73 70 6C   // ..FrameworkDispl
                                                                                                        61 79 4E 61 6D 65 10 2E 4E 45 54 20 46 72 61 6D   // ayName..NET Fram
                                                                                                        65 77 6F 72 6B 20 34 )                            // ework 4
  .custom instance void [mscorlib]System.Reflection.AssemblyTitleAttribute::.ctor(string) = ( 01 00 09 53 74 72 61 73 73 65 6E 73 00 00 )       // ...Strassens..
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilationRelaxationsAttribute::.ctor(int32) = ( 01 00 08 00 00 00 00 00 ) 
  .custom instance void [mscorlib]System.Reflection.AssemblyCopyrightAttribute::.ctor(string) = ( 01 00 39 43 6F 70 79 72 69 67 68 74 20 C2 A9 20   // ..9Copyright .. 
                                                                                                  4D 69 63 72 6F 73 6F 66 74 20 43 6F 72 70 6F 72   // Microsoft Corpor
                                                                                                  61 74 69 6F 6E 2E 20 20 41 6C 6C 20 72 69 67 68   // ation.  All righ
                                                                                                  74 73 20 72 65 73 65 72 76 65 64 2E 00 00 )       // ts reserved...

  // --- The following custom attribute is added automatically, do not uncomment -------
  //  .custom instance void [mscorlib]System.Diagnostics.DebuggableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggableAttribute/DebuggingModes) = ( 01 00 07 01 00 00 00 00 ) 

  .custom instance void [mscorlib]System.Reflection.AssemblyConfigurationAttribute::.ctor(string) = ( 01 00 00 00 00 ) 
  .custom instance void [mscorlib]System.Reflection.AssemblyCompanyAttribute::.ctor(string) = ( 01 00 15 4D 69 63 72 6F 73 6F 66 74 20 43 6F 72   // ...Microsoft Cor
                                                                                                70 6F 72 61 74 69 6F 6E 00 00 )                   // poration..
  .custom instance void [mscorlib]System.Reflection.AssemblyProductAttribute::.ctor(string) = ( 01 00 09 53 74 72 61 73 73 65 6E 73 00 00 )       // ...Strassens..
  .custom instance void [mscorlib]System.Reflection.AssemblyDescriptionAttribute::.ctor(string) = ( 01 00 00 00 00 ) 
  .custom instance void [mscorlib]System.Reflection.AssemblyTrademarkAttribute::.ctor(string) = ( 01 00 00 00 00 ) 
  .custom instance void [mscorlib]System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = ( 01 00 00 00 00 ) 
  .custom instance void [mscorlib]System.Runtime.InteropServices.GuidAttribute::.ctor(string) = ( 01 00 24 33 39 37 35 30 64 39 66 2D 66 38 63 35   // ..$39750d9f-f8c5
                                                                                                  2D 34 39 36 31 2D 39 35 39 64 2D 35 36 34 62 30   // -4961-959d-564b0
                                                                                                  31 65 37 65 61 31 61 00 00 )                      // 1e7ea1a..
  .custom instance void [mscorlib]System.Reflection.AssemblyFileVersionAttribute::.ctor(string) = ( 01 00 07 31 2E 30 2E 30 2E 30 00 00 )             // ...1.0.0.0..
  .permissionset reqmin
             = {[mscorlib]System.Security.Permissions.SecurityPermissionAttribute = {property bool 'SkipVerification' = bool(true)}}
  .hash algorithm 0x00008004
  .ver 1:0:0:0
}
.mresource public Strassens.Properties.Resources.resources
{
  // Offset: 0x00000000 Length: 0x000000B4
}
.mresource public Strassens.MainForm.resources
{
  // Offset: 0x000000B8 Length: 0x000000B4
}
.module Strassens.exe
// MVID: {39DB849E-4637-4782-9601-905307264E9E}
.custom instance void [mscorlib]System.Security.UnverifiableCodeAttribute::.ctor() = ( 01 00 00 00 ) 
.imagebase 0x00400000
.file alignment 0x00000200
.stackreserve 0x00100000
.subsystem 0x0002       // WINDOWS_GUI
.corflags 0x00000001    //  ILONLY
// Image base: 0x00490000


// =============== CLASS MEMBERS DECLARATION ===================

.class public auto ansi beforefieldinit Strassens.MainForm
       extends [System.Windows.Forms]System.Windows.Forms.Form
{
  .class auto ansi sealed nested private beforefieldinit '<>c__DisplayClass7'
         extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .class auto ansi sealed nested private beforefieldinit '<>c__DisplayClass9'
           extends [mscorlib]System.Object
    {
      .field public class Matrix matA
      .method public hidebysig specialname rtspecialname 
              instance void  .ctor() cil managed
      {
        // Code size       7 (0x7)
        .maxstack  8
        IL_0000:  ldarg.0
        IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
        IL_0006:  ret
      } // end of method '<>c__DisplayClass9'::.ctor

    } // end of class '<>c__DisplayClass9'

    .class auto ansi sealed nested private beforefieldinit '<>c__DisplayClassb'
           extends [mscorlib]System.Object
    {
      .field public class Matrix matB
      .method public hidebysig specialname rtspecialname 
              instance void  .ctor() cil managed
      {
        // Code size       7 (0x7)
        .maxstack  8
        IL_0000:  ldarg.0
        IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
        IL_0006:  ret
      } // end of method '<>c__DisplayClassb'::.ctor

    } // end of class '<>c__DisplayClassb'

    .class auto ansi sealed nested private beforefieldinit '<>c__DisplayClass11'
           extends [mscorlib]System.Object
    {
      .field public class Strassens.MainForm/'<>c__DisplayClass7'/'<>c__DisplayClassb' 'CS$<>8__localsc'
      .field public class Strassens.MainForm/'<>c__DisplayClass7'/'<>c__DisplayClass9' 'CS$<>8__localsa'
      .field public class Strassens.MainForm/'<>c__DisplayClass7' 'CS$<>8__locals8'
      .field public class Matrix matC
      .method public hidebysig specialname rtspecialname 
              instance void  .ctor() cil managed
      {
        // Code size       7 (0x7)
        .maxstack  8
        IL_0000:  ldarg.0
        IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
        IL_0006:  ret
      } // end of method '<>c__DisplayClass11'::.ctor

      .method public hidebysig instance void 
              '<btnCompute_Click>b__2'() cil managed
      {
        // Code size       46 (0x2e)
        .maxstack  8
        .language '{3F5162F8-07C6-11D3-9053-00C04FA302A1}', '{994B45C4-E6E9-11D2-903F-00C04FA302A1}', '{5A869D0B-6611-11D3-BD2A-0000F80849BD}'
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Strassens\Strassens_CSharp\MainForm.cs' 
//000086:                         elapsed = Time(() => Matrix.Multiply(token, matA, matB, matC));
        IL_0000:  ldarg.0
        IL_0001:  ldfld      class Strassens.MainForm/'<>c__DisplayClass7' Strassens.MainForm/'<>c__DisplayClass7'/'<>c__DisplayClass11'::'CS$<>8__locals8'
        IL_0006:  ldfld      valuetype [mscorlib]System.Threading.CancellationToken Strassens.MainForm/'<>c__DisplayClass7'::token
        IL_000b:  ldarg.0
        IL_000c:  ldfld      class Strassens.MainForm/'<>c__DisplayClass7'/'<>c__DisplayClass9' Strassens.MainForm/'<>c__DisplayClass7'/'<>c__DisplayClass11'::'CS$<>8__localsa'
        IL_0011:  ldfld      class Matrix Strassens.MainForm/'<>c__DisplayClass7'/'<>c__DisplayClass9'::matA
        IL_0016:  ldarg.0
        IL_0017:  ldfld      class Strassens.MainForm/'<>c__DisplayClass7'/'<>c__DisplayClassb' Strassens.MainForm/'<>c__DisplayClass7'/'<>c__DisplayClass11'::'CS$<>8__localsc'
        IL_001c:  ldfld      class Matrix Strassens.MainForm/'<>c__DisplayClass7'/'<>c__DisplayClassb'::matB
        IL_0021:  ldarg.0
        IL_0022:  ldfld      class Matrix Strassens.MainForm/'<>c__DisplayClass7'/'<>c__DisplayClass11'::matC
        IL_0027:  call       void Matrix::Multiply(valuetype [mscorlib]System.Threading.CancellationToken,
                                                   class Matrix,
                                                   class Matrix,
                                                   class Matrix)
        IL_002c:  nop
//000087:                         SetPoint(_naive, elapsed.TotalSeconds);
//000088: 
//000089:                         elapsed = Time(() => Matrix.MultiplyParallel(token, matA, matB, matC));
//000090:                         SetPoint(_naiveParallel, elapsed.TotalSeconds);
//000091: 
//000092:                         elapsed = Time(() => Matrix.MultiplyStrassens(token, matA, matB, matC));
//000093:                         SetPoint(_strassens, elapsed.TotalSeconds);
//000094: 
//000095:                         elapsed = Time(() => Matrix.MultiplyStrassensParallel(token, matA, matB, matC));
//000096:                         SetPoint(_strassensParallel, elapsed.TotalSeconds);
//000097:                     }
//000098:                 }, token).ContinueWith(t =>
//000099:                 {
//000100:                     _cancellation = null;
//000101:                     btnCompute.Text = "Compute";
//000102:                     progressBar1.Visible = false;
//000103:                     if (t.IsFaulted) MessageBox.Show(t.Exception.ToString());
//000104:                 }, _uiScheduler);
//000105:             }
//000106:             else _cancellation.Cancel();
//000107:         }
//000108: 
//000109:         private void SetPoint(DataPoint point, double seconds)
//000110:         {
//000111:             Task.Factory.StartNew(() =>
//000112:             {
//000113:                 if (seconds > _max)
//000114:                 {
//000115:                     _max = seconds;
//000116:                     chart1.ChartAreas[0].AxisY.Maximum = _max * 1.1;
//000117:                 }
//000118:                 point.SetValueY(seconds);
//000119:                 point.ToolTip = seconds.ToString("F2");
//000120:                 point.Label = string.Format("{0:F2} secs  ({1:F2}x)", seconds, (_max / seconds));
//000121:                 chart1.Invalidate();
//000122:             }, CancellationToken.None, TaskCreationOptions.None, _uiScheduler);
//000123:         }
//000124: 
//000125:         static TimeSpan Time(Action action)
//000126:         {
//000127:             var sw = Stopwatch.StartNew();
//000128:             action();
//000129:             return sw.Elapsed;
//000130:         }
//000131:     }
//000132: }
        IL_002d:  ret
      } // end of method '<>c__DisplayClass11'::'<btnCompute_Click>b__2'

      .method public hidebysig instance void 
              '<btnCompute_Click>b__3'() cil managed
      {
        // Code size       46 (0x2e)
        .maxstack  8
//000089:                         elapsed = Time(() => Matrix.MultiplyParallel(token, matA, matB, matC));
        IL_0000:  ldarg.0
        IL_0001:  ldfld      class Strassens.MainForm/'<>c__DisplayClass7' Strassens.MainForm/'<>c__DisplayClass7'/'<>c__DisplayClass11'::'CS$<>8__locals8'
        IL_0006:  ldfld      valuetype [mscorlib]System.Threading.CancellationToken Strassens.MainForm/'<>c__DisplayClass7'::token
        IL_000b:  ldarg.0
        IL_000c:  ldfld      class Strassens.MainForm/'<>c__DisplayClass7'/'<>c__DisplayClass9' Strassens.MainForm/'<>c__DisplayClass7'/'<>c__DisplayClass11'::'CS$<>8__localsa'
        IL_0011:  ldfld      class Matrix Strassens.MainForm/'<>c__DisplayClass7'/'<>c__DisplayClass9'::matA
        IL_0016:  ldarg.0
        IL_0017:  ldfld      class Strassens.MainForm/'<>c__DisplayClass7'/'<>c__DisplayClassb' Strassens.MainForm/'<>c__DisplayClass7'/'<>c__DisplayClass11'::'CS$<>8__localsc'
        IL_001c:  ldfld      class Matrix Strassens.MainForm/'<>c__DisplayClass7'/'<>c__DisplayClassb'::matB
        IL_0021:  ldarg.0
        IL_0022:  ldfld      class Matrix Strassens.MainForm/'<>c__DisplayClass7'/'<>c__DisplayClass11'::matC
        IL_0027:  call       void Matrix::MultiplyParallel(valuetype [mscorlib]System.Threading.CancellationToken,
                                                           class Matrix,
                                                           class Matrix,
                                                           class Matrix)
        IL_002c:  nop
//000090:                         SetPoint(_naiveParallel, elapsed.TotalSeconds);
//000091: 
//000092:                         elapsed = Time(() => Matrix.MultiplyStrassens(token, matA, matB, matC));
//000093:                         SetPoint(_strassens, elapsed.TotalSeconds);
//000094: 
//000095:                         elapsed = Time(() => Matrix.MultiplyStrassensParallel(token, matA, matB, matC));
//000096:                         SetPoint(_strassensParallel, elapsed.TotalSeconds);
//000097:                     }
//000098:                 }, token).ContinueWith(t =>
//000099:                 {
//000100:                     _cancellation = null;
//000101:                     btnCompute.Text = "Compute";
//000102:                     progressBar1.Visible = false;
//000103:                     if (t.IsFaulted) MessageBox.Show(t.Exception.ToString());
//000104:                 }, _uiScheduler);
//000105:             }
//000106:             else _cancellation.Cancel();
//000107:         }
//000108: 
//000109:         private void SetPoint(DataPoint point, double seconds)
//000110:         {
//000111:             Task.Factory.StartNew(() =>
//000112:             {
//000113:                 if (seconds > _max)
//000114:                 {
//000115:                     _max = seconds;
//000116:                     chart1.ChartAreas[0].AxisY.Maximum = _max * 1.1;
//000117:                 }
//000118:                 point.SetValueY(seconds);
//000119:                 point.ToolTip = seconds.ToString("F2");
//000120:                 point.Label = string.Format("{0:F2} secs  ({1:F2}x)", seconds, (_max / seconds));
//000121:                 chart1.Invalidate();
//000122:             }, CancellationToken.None, TaskCreationOptions.None, _uiScheduler);
//000123:         }
//000124: 
//000125:         static TimeSpan Time(Action action)
//000126:         {
//000127:             var sw = Stopwatch.StartNew();
//000128:             action();
//000129:             return sw.Elapsed;
//000130:         }
//000131:     }
//000132: }
        IL_002d:  ret
      } // end of method '<>c__DisplayClass11'::'<btnCompute_Click>b__3'

      .method public hidebysig instance void 
              '<btnCompute_Click>b__4'() cil managed
      {
        // Code size       46 (0x2e)
        .maxstack  8
//000092:                         elapsed = Time(() => Matrix.MultiplyStrassens(token, matA, matB, matC));
        IL_0000:  ldarg.0
        IL_0001:  ldfld      class Strassens.MainForm/'<>c__DisplayClass7' Strassens.MainForm/'<>c__DisplayClass7'/'<>c__DisplayClass11'::'CS$<>8__locals8'
        IL_0006:  ldfld      valuetype [mscorlib]System.Threading.CancellationToken Strassens.MainForm/'<>c__DisplayClass7'::token
        IL_000b:  ldarg.0
        IL_000c:  ldfld      class Strassens.MainForm/'<>c__DisplayClass7'/'<>c__DisplayClass9' Strassens.MainForm/'<>c__DisplayClass7'/'<>c__DisplayClass11'::'CS$<>8__localsa'
        IL_0011:  ldfld      class Matrix Strassens.MainForm/'<>c__DisplayClass7'/'<>c__DisplayClass9'::matA
        IL_0016:  ldarg.0
        IL_0017:  ldfld      class Strassens.MainForm/'<>c__DisplayClass7'/'<>c__DisplayClassb' Strassens.MainForm/'<>c__DisplayClass7'/'<>c__DisplayClass11'::'CS$<>8__localsc'
        IL_001c:  ldfld      class Matrix Strassens.MainForm/'<>c__DisplayClass7'/'<>c__DisplayClassb'::matB
        IL_0021:  ldarg.0
        IL_0022:  ldfld      class Matrix Strassens.MainForm/'<>c__DisplayClass7'/'<>c__DisplayClass11'::matC
        IL_0027:  call       void Matrix::MultiplyStrassens(valuetype [mscorlib]System.Threading.CancellationToken,
                                                            class Matrix,
                                                            class Matrix,
                                                            class Matrix)
        IL_002c:  nop
//000093:                         SetPoint(_strassens, elapsed.TotalSeconds);
//000094: 
//000095:                         elapsed = Time(() => Matrix.MultiplyStrassensParallel(token, matA, matB, matC));
//000096:                         SetPoint(_strassensParallel, elapsed.TotalSeconds);
//000097:                     }
//000098:                 }, token).ContinueWith(t =>
//000099:                 {
//000100:                     _cancellation = null;
//000101:                     btnCompute.Text = "Compute";
//000102:                     progressBar1.Visible = false;
//000103:                     if (t.IsFaulted) MessageBox.Show(t.Exception.ToString());
//000104:                 }, _uiScheduler);
//000105:             }
//000106:             else _cancellation.Cancel();
//000107:         }
//000108: 
//000109:         private void SetPoint(DataPoint point, double seconds)
//000110:         {
//000111:             Task.Factory.StartNew(() =>
//000112:             {
//000113:                 if (seconds > _max)
//000114:                 {
//000115:                     _max = seconds;
//000116:                     chart1.ChartAreas[0].AxisY.Maximum = _max * 1.1;
//000117:                 }
//000118:                 point.SetValueY(seconds);
//000119:                 point.ToolTip = seconds.ToString("F2");
//000120:                 point.Label = string.Format("{0:F2} secs  ({1:F2}x)", seconds, (_max / seconds));
//000121:                 chart1.Invalidate();
//000122:             }, CancellationToken.None, TaskCreationOptions.None, _uiScheduler);
//000123:         }
//000124: 
//000125:         static TimeSpan Time(Action action)
//000126:         {
//000127:             var sw = Stopwatch.StartNew();
//000128:             action();
//000129:             return sw.Elapsed;
//000130:         }
//000131:     }
//000132: }
        IL_002d:  ret
      } // end of method '<>c__DisplayClass11'::'<btnCompute_Click>b__4'

      .method public hidebysig instance void 
              '<btnCompute_Click>b__5'() cil managed
      {
        // Code size       46 (0x2e)
        .maxstack  8
//000095:                         elapsed = Time(() => Matrix.MultiplyStrassensParallel(token, matA, matB, matC));
        IL_0000:  ldarg.0
        IL_0001:  ldfld      class Strassens.MainForm/'<>c__DisplayClass7' Strassens.MainForm/'<>c__DisplayClass7'/'<>c__DisplayClass11'::'CS$<>8__locals8'
        IL_0006:  ldfld      valuetype [mscorlib]System.Threading.CancellationToken Strassens.MainForm/'<>c__DisplayClass7'::token
        IL_000b:  ldarg.0
        IL_000c:  ldfld      class Strassens.MainForm/'<>c__DisplayClass7'/'<>c__DisplayClass9' Strassens.MainForm/'<>c__DisplayClass7'/'<>c__DisplayClass11'::'CS$<>8__localsa'
        IL_0011:  ldfld      class Matrix Strassens.MainForm/'<>c__DisplayClass7'/'<>c__DisplayClass9'::matA
        IL_0016:  ldarg.0
        IL_0017:  ldfld      class Strassens.MainForm/'<>c__DisplayClass7'/'<>c__DisplayClassb' Strassens.MainForm/'<>c__DisplayClass7'/'<>c__DisplayClass11'::'CS$<>8__localsc'
        IL_001c:  ldfld      class Matrix Strassens.MainForm/'<>c__DisplayClass7'/'<>c__DisplayClassb'::matB
        IL_0021:  ldarg.0
        IL_0022:  ldfld      class Matrix Strassens.MainForm/'<>c__DisplayClass7'/'<>c__DisplayClass11'::matC
        IL_0027:  call       void Matrix::MultiplyStrassensParallel(valuetype [mscorlib]System.Threading.CancellationToken,
                                                                    class Matrix,
                                                                    class Matrix,
                                                                    class Matrix)
        IL_002c:  nop
//000096:                         SetPoint(_strassensParallel, elapsed.TotalSeconds);
//000097:                     }
//000098:                 }, token).ContinueWith(t =>
//000099:                 {
//000100:                     _cancellation = null;
//000101:                     btnCompute.Text = "Compute";
//000102:                     progressBar1.Visible = false;
//000103:                     if (t.IsFaulted) MessageBox.Show(t.Exception.ToString());
//000104:                 }, _uiScheduler);
//000105:             }
//000106:             else _cancellation.Cancel();
//000107:         }
//000108: 
//000109:         private void SetPoint(DataPoint point, double seconds)
//000110:         {
//000111:             Task.Factory.StartNew(() =>
//000112:             {
//000113:                 if (seconds > _max)
//000114:                 {
//000115:                     _max = seconds;
//000116:                     chart1.ChartAreas[0].AxisY.Maximum = _max * 1.1;
//000117:                 }
//000118:                 point.SetValueY(seconds);
//000119:                 point.ToolTip = seconds.ToString("F2");
//000120:                 point.Label = string.Format("{0:F2} secs  ({1:F2}x)", seconds, (_max / seconds));
//000121:                 chart1.Invalidate();
//000122:             }, CancellationToken.None, TaskCreationOptions.None, _uiScheduler);
//000123:         }
//000124: 
//000125:         static TimeSpan Time(Action action)
//000126:         {
//000127:             var sw = Stopwatch.StartNew();
//000128:             action();
//000129:             return sw.Elapsed;
//000130:         }
//000131:     }
//000132: }
        IL_002d:  ret
      } // end of method '<>c__DisplayClass11'::'<btnCompute_Click>b__5'

    } // end of class '<>c__DisplayClass11'

    .field public int32 matrixSize
    .field public valuetype [mscorlib]System.Threading.CancellationToken token
    .field public class Strassens.MainForm '<>4__this'
    .method public hidebysig specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      // Code size       7 (0x7)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ret
    } // end of method '<>c__DisplayClass7'::.ctor

    .method public hidebysig instance void 
            '<btnCompute_Click>b__1'() cil managed
    {
      // Code size       440 (0x1b8)
      .maxstack  3
      .locals init ([0] valuetype [mscorlib]System.TimeSpan elapsed,
               [1] class [mscorlib]System.Action 'CS$<>9__CachedAnonymousMethodDelegated',
               [2] class [mscorlib]System.Action 'CS$<>9__CachedAnonymousMethodDelegatee',
               [3] class [mscorlib]System.Action 'CS$<>9__CachedAnonymousMethodDelegatef',
               [4] class [mscorlib]System.Action 'CS$<>9__CachedAnonymousMethodDelegate10',
               [5] class Strassens.MainForm/'<>c__DisplayClass7'/'<>c__DisplayClass11' 'CS$<>8__locals12',
               [6] class Strassens.MainForm/'<>c__DisplayClass7'/'<>c__DisplayClassb' 'CS$<>8__localsc',
               [7] class Strassens.MainForm/'<>c__DisplayClass7'/'<>c__DisplayClass9' 'CS$<>8__localsa',
               [8] bool CS$4$0000)
//000079:                 {
      IL_0000:  nop
//000080:                     using (Matrix matA = new Matrix(matrixSize))
//000081:                     using (Matrix matB = new Matrix(matrixSize))
//000082:                     using (Matrix matC = new Matrix(matrixSize))
//000083:                     {
//000084:                         TimeSpan elapsed;
//000085: 
//000086:                         elapsed = Time(() => Matrix.Multiply(token, matA, matB, matC));
//000087:                         SetPoint(_naive, elapsed.TotalSeconds);
//000088: 
//000089:                         elapsed = Time(() => Matrix.MultiplyParallel(token, matA, matB, matC));
//000090:                         SetPoint(_naiveParallel, elapsed.TotalSeconds);
//000091: 
//000092:                         elapsed = Time(() => Matrix.MultiplyStrassens(token, matA, matB, matC));
//000093:                         SetPoint(_strassens, elapsed.TotalSeconds);
//000094: 
//000095:                         elapsed = Time(() => Matrix.MultiplyStrassensParallel(token, matA, matB, matC));
//000096:                         SetPoint(_strassensParallel, elapsed.TotalSeconds);
//000097:                     }
//000098:                 }, token).ContinueWith(t =>
//000099:                 {
//000100:                     _cancellation = null;
//000101:                     btnCompute.Text = "Compute";
//000102:                     progressBar1.Visible = false;
//000103:                     if (t.IsFaulted) MessageBox.Show(t.Exception.ToString());
//000104:                 }, _uiScheduler);
//000105:             }
//000106:             else _cancellation.Cancel();
//000107:         }
//000108: 
//000109:         private void SetPoint(DataPoint point, double seconds)
//000110:         {
//000111:             Task.Factory.StartNew(() =>
//000112:             {
//000113:                 if (seconds > _max)
//000114:                 {
//000115:                     _max = seconds;
//000116:                     chart1.ChartAreas[0].AxisY.Maximum = _max * 1.1;
//000117:                 }
//000118:                 point.SetValueY(seconds);
//000119:                 point.ToolTip = seconds.ToString("F2");
//000120:                 point.Label = string.Format("{0:F2} secs  ({1:F2}x)", seconds, (_max / seconds));
//000121:                 chart1.Invalidate();
//000122:             }, CancellationToken.None, TaskCreationOptions.None, _uiScheduler);
//000123:         }
//000124: 
//000125:         static TimeSpan Time(Action action)
//000126:         {
//000127:             var sw = Stopwatch.StartNew();
//000128:             action();
//000129:             return sw.Elapsed;
//000130:         }
//000131:     }
//000132: }
      IL_0001:  newobj     instance void Strassens.MainForm/'<>c__DisplayClass7'/'<>c__DisplayClass9'::.ctor()
      IL_0006:  stloc.s    'CS$<>8__localsa'
//000080:                     using (Matrix matA = new Matrix(matrixSize))
      IL_0008:  ldloc.s    'CS$<>8__localsa'
      IL_000a:  ldarg.0
      IL_000b:  ldfld      int32 Strassens.MainForm/'<>c__DisplayClass7'::matrixSize
      IL_0010:  newobj     instance void Matrix::.ctor(int32)
      IL_0015:  stfld      class Matrix Strassens.MainForm/'<>c__DisplayClass7'/'<>c__DisplayClass9'::matA
//000081:                     using (Matrix matB = new Matrix(matrixSize))
//000082:                     using (Matrix matC = new Matrix(matrixSize))
//000083:                     {
//000084:                         TimeSpan elapsed;
//000085: 
//000086:                         elapsed = Time(() => Matrix.Multiply(token, matA, matB, matC));
//000087:                         SetPoint(_naive, elapsed.TotalSeconds);
//000088: 
//000089:                         elapsed = Time(() => Matrix.MultiplyParallel(token, matA, matB, matC));
//000090:                         SetPoint(_naiveParallel, elapsed.TotalSeconds);
//000091: 
//000092:                         elapsed = Time(() => Matrix.MultiplyStrassens(token, matA, matB, matC));
//000093:                         SetPoint(_strassens, elapsed.TotalSeconds);
//000094: 
//000095:                         elapsed = Time(() => Matrix.MultiplyStrassensParallel(token, matA, matB, matC));
//000096:                         SetPoint(_strassensParallel, elapsed.TotalSeconds);
//000097:                     }
//000098:                 }, token).ContinueWith(t =>
//000099:                 {
//000100:                     _cancellation = null;
//000101:                     btnCompute.Text = "Compute";
//000102:                     progressBar1.Visible = false;
//000103:                     if (t.IsFaulted) MessageBox.Show(t.Exception.ToString());
//000104:                 }, _uiScheduler);
//000105:             }
//000106:             else _cancellation.Cancel();
//000107:         }
//000108: 
//000109:         private void SetPoint(DataPoint point, double seconds)
//000110:         {
//000111:             Task.Factory.StartNew(() =>
//000112:             {
//000113:                 if (seconds > _max)
//000114:                 {
//000115:                     _max = seconds;
//000116:                     chart1.ChartAreas[0].AxisY.Maximum = _max * 1.1;
//000117:                 }
//000118:                 point.SetValueY(seconds);
//000119:                 point.ToolTip = seconds.ToString("F2");
//000120:                 point.Label = string.Format("{0:F2} secs  ({1:F2}x)", seconds, (_max / seconds));
//000121:                 chart1.Invalidate();
//000122:             }, CancellationToken.None, TaskCreationOptions.None, _uiScheduler);
//000123:         }
//000124: 
//000125:         static TimeSpan Time(Action action)
//000126:         {
//000127:             var sw = Stopwatch.StartNew();
//000128:             action();
//000129:             return sw.Elapsed;
//000130:         }
//000131:     }
//000132: }
      .try
      {
        IL_001a:  newobj     instance void Strassens.MainForm/'<>c__DisplayClass7'/'<>c__DisplayClassb'::.ctor()
        IL_001f:  stloc.s    'CS$<>8__localsc'
//000081:                     using (Matrix matB = new Matrix(matrixSize))
        IL_0021:  ldloc.s    'CS$<>8__localsc'
        IL_0023:  ldarg.0
        IL_0024:  ldfld      int32 Strassens.MainForm/'<>c__DisplayClass7'::matrixSize
        IL_0029:  newobj     instance void Matrix::.ctor(int32)
        IL_002e:  stfld      class Matrix Strassens.MainForm/'<>c__DisplayClass7'/'<>c__DisplayClassb'::matB
//000082:                     using (Matrix matC = new Matrix(matrixSize))
//000083:                     {
//000084:                         TimeSpan elapsed;
//000085: 
//000086:                         elapsed = Time(() => Matrix.Multiply(token, matA, matB, matC));
//000087:                         SetPoint(_naive, elapsed.TotalSeconds);
//000088: 
//000089:                         elapsed = Time(() => Matrix.MultiplyParallel(token, matA, matB, matC));
//000090:                         SetPoint(_naiveParallel, elapsed.TotalSeconds);
//000091: 
//000092:                         elapsed = Time(() => Matrix.MultiplyStrassens(token, matA, matB, matC));
//000093:                         SetPoint(_strassens, elapsed.TotalSeconds);
//000094: 
//000095:                         elapsed = Time(() => Matrix.MultiplyStrassensParallel(token, matA, matB, matC));
//000096:                         SetPoint(_strassensParallel, elapsed.TotalSeconds);
//000097:                     }
//000098:                 }, token).ContinueWith(t =>
//000099:                 {
//000100:                     _cancellation = null;
//000101:                     btnCompute.Text = "Compute";
//000102:                     progressBar1.Visible = false;
//000103:                     if (t.IsFaulted) MessageBox.Show(t.Exception.ToString());
//000104:                 }, _uiScheduler);
//000105:             }
//000106:             else _cancellation.Cancel();
//000107:         }
//000108: 
//000109:         private void SetPoint(DataPoint point, double seconds)
//000110:         {
//000111:             Task.Factory.StartNew(() =>
//000112:             {
//000113:                 if (seconds > _max)
//000114:                 {
//000115:                     _max = seconds;
//000116:                     chart1.ChartAreas[0].AxisY.Maximum = _max * 1.1;
//000117:                 }
//000118:                 point.SetValueY(seconds);
//000119:                 point.ToolTip = seconds.ToString("F2");
//000120:                 point.Label = string.Format("{0:F2} secs  ({1:F2}x)", seconds, (_max / seconds));
//000121:                 chart1.Invalidate();
//000122:             }, CancellationToken.None, TaskCreationOptions.None, _uiScheduler);
//000123:         }
//000124: 
//000125:         static TimeSpan Time(Action action)
//000126:         {
//000127:             var sw = Stopwatch.StartNew();
//000128:             action();
//000129:             return sw.Elapsed;
//000130:         }
//000131:     }
//000132: }
        .try
        {
          IL_0033:  ldnull
          IL_0034:  stloc.1
          IL_0035:  ldnull
          IL_0036:  stloc.2
          IL_0037:  ldnull
          IL_0038:  stloc.3
          IL_0039:  ldnull
          IL_003a:  stloc.s    'CS$<>9__CachedAnonymousMethodDelegate10'
          IL_003c:  newobj     instance void Strassens.MainForm/'<>c__DisplayClass7'/'<>c__DisplayClass11'::.ctor()
          IL_0041:  stloc.s    'CS$<>8__locals12'
          IL_0043:  ldloc.s    'CS$<>8__locals12'
          IL_0045:  ldloc.s    'CS$<>8__localsc'
          IL_0047:  stfld      class Strassens.MainForm/'<>c__DisplayClass7'/'<>c__DisplayClassb' Strassens.MainForm/'<>c__DisplayClass7'/'<>c__DisplayClass11'::'CS$<>8__localsc'
          IL_004c:  ldloc.s    'CS$<>8__locals12'
          IL_004e:  ldloc.s    'CS$<>8__localsa'
          IL_0050:  stfld      class Strassens.MainForm/'<>c__DisplayClass7'/'<>c__DisplayClass9' Strassens.MainForm/'<>c__DisplayClass7'/'<>c__DisplayClass11'::'CS$<>8__localsa'
          IL_0055:  ldloc.s    'CS$<>8__locals12'
          IL_0057:  ldarg.0
          IL_0058:  stfld      class Strassens.MainForm/'<>c__DisplayClass7' Strassens.MainForm/'<>c__DisplayClass7'/'<>c__DisplayClass11'::'CS$<>8__locals8'
//000082:                     using (Matrix matC = new Matrix(matrixSize))
          IL_005d:  ldloc.s    'CS$<>8__locals12'
          IL_005f:  ldarg.0
          IL_0060:  ldfld      int32 Strassens.MainForm/'<>c__DisplayClass7'::matrixSize
          IL_0065:  newobj     instance void Matrix::.ctor(int32)
          IL_006a:  stfld      class Matrix Strassens.MainForm/'<>c__DisplayClass7'/'<>c__DisplayClass11'::matC
//000083:                     {
          .try
          {
            IL_006f:  nop
//000084:                         TimeSpan elapsed;
//000085: 
//000086:                         elapsed = Time(() => Matrix.Multiply(token, matA, matB, matC));
            IL_0070:  ldloc.1
            IL_0071:  brtrue.s   IL_0083

            IL_0073:  ldloc.s    'CS$<>8__locals12'
            IL_0075:  ldftn      instance void Strassens.MainForm/'<>c__DisplayClass7'/'<>c__DisplayClass11'::'<btnCompute_Click>b__2'()
            IL_007b:  newobj     instance void [mscorlib]System.Action::.ctor(object,
                                                                              native int)
            IL_0080:  stloc.1
            IL_0081:  br.s       IL_0083

            IL_0083:  ldloc.1
            IL_0084:  call       valuetype [mscorlib]System.TimeSpan Strassens.MainForm::Time(class [mscorlib]System.Action)
            IL_0089:  stloc.0
//000087:                         SetPoint(_naive, elapsed.TotalSeconds);
            IL_008a:  ldarg.0
            IL_008b:  ldfld      class Strassens.MainForm Strassens.MainForm/'<>c__DisplayClass7'::'<>4__this'
            IL_0090:  ldarg.0
            IL_0091:  ldfld      class Strassens.MainForm Strassens.MainForm/'<>c__DisplayClass7'::'<>4__this'
            IL_0096:  ldfld      class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.DataPoint Strassens.MainForm::_naive
            IL_009b:  ldloca.s   elapsed
            IL_009d:  call       instance float64 [mscorlib]System.TimeSpan::get_TotalSeconds()
            IL_00a2:  call       instance void Strassens.MainForm::SetPoint(class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.DataPoint,
                                                                            float64)
            IL_00a7:  nop
//000088: 
//000089:                         elapsed = Time(() => Matrix.MultiplyParallel(token, matA, matB, matC));
            IL_00a8:  ldloc.2
            IL_00a9:  brtrue.s   IL_00bb

            IL_00ab:  ldloc.s    'CS$<>8__locals12'
            IL_00ad:  ldftn      instance void Strassens.MainForm/'<>c__DisplayClass7'/'<>c__DisplayClass11'::'<btnCompute_Click>b__3'()
            IL_00b3:  newobj     instance void [mscorlib]System.Action::.ctor(object,
                                                                              native int)
            IL_00b8:  stloc.2
            IL_00b9:  br.s       IL_00bb

            IL_00bb:  ldloc.2
            IL_00bc:  call       valuetype [mscorlib]System.TimeSpan Strassens.MainForm::Time(class [mscorlib]System.Action)
            IL_00c1:  stloc.0
//000090:                         SetPoint(_naiveParallel, elapsed.TotalSeconds);
            IL_00c2:  ldarg.0
            IL_00c3:  ldfld      class Strassens.MainForm Strassens.MainForm/'<>c__DisplayClass7'::'<>4__this'
            IL_00c8:  ldarg.0
            IL_00c9:  ldfld      class Strassens.MainForm Strassens.MainForm/'<>c__DisplayClass7'::'<>4__this'
            IL_00ce:  ldfld      class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.DataPoint Strassens.MainForm::_naiveParallel
            IL_00d3:  ldloca.s   elapsed
            IL_00d5:  call       instance float64 [mscorlib]System.TimeSpan::get_TotalSeconds()
            IL_00da:  call       instance void Strassens.MainForm::SetPoint(class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.DataPoint,
                                                                            float64)
            IL_00df:  nop
//000091: 
//000092:                         elapsed = Time(() => Matrix.MultiplyStrassens(token, matA, matB, matC));
            IL_00e0:  ldloc.3
            IL_00e1:  brtrue.s   IL_00f3

            IL_00e3:  ldloc.s    'CS$<>8__locals12'
            IL_00e5:  ldftn      instance void Strassens.MainForm/'<>c__DisplayClass7'/'<>c__DisplayClass11'::'<btnCompute_Click>b__4'()
            IL_00eb:  newobj     instance void [mscorlib]System.Action::.ctor(object,
                                                                              native int)
            IL_00f0:  stloc.3
            IL_00f1:  br.s       IL_00f3

            IL_00f3:  ldloc.3
            IL_00f4:  call       valuetype [mscorlib]System.TimeSpan Strassens.MainForm::Time(class [mscorlib]System.Action)
            IL_00f9:  stloc.0
//000093:                         SetPoint(_strassens, elapsed.TotalSeconds);
            IL_00fa:  ldarg.0
            IL_00fb:  ldfld      class Strassens.MainForm Strassens.MainForm/'<>c__DisplayClass7'::'<>4__this'
            IL_0100:  ldarg.0
            IL_0101:  ldfld      class Strassens.MainForm Strassens.MainForm/'<>c__DisplayClass7'::'<>4__this'
            IL_0106:  ldfld      class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.DataPoint Strassens.MainForm::_strassens
            IL_010b:  ldloca.s   elapsed
            IL_010d:  call       instance float64 [mscorlib]System.TimeSpan::get_TotalSeconds()
            IL_0112:  call       instance void Strassens.MainForm::SetPoint(class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.DataPoint,
                                                                            float64)
            IL_0117:  nop
//000094: 
//000095:                         elapsed = Time(() => Matrix.MultiplyStrassensParallel(token, matA, matB, matC));
            IL_0118:  ldloc.s    'CS$<>9__CachedAnonymousMethodDelegate10'
            IL_011a:  brtrue.s   IL_012d

            IL_011c:  ldloc.s    'CS$<>8__locals12'
            IL_011e:  ldftn      instance void Strassens.MainForm/'<>c__DisplayClass7'/'<>c__DisplayClass11'::'<btnCompute_Click>b__5'()
            IL_0124:  newobj     instance void [mscorlib]System.Action::.ctor(object,
                                                                              native int)
            IL_0129:  stloc.s    'CS$<>9__CachedAnonymousMethodDelegate10'
            IL_012b:  br.s       IL_012d

            IL_012d:  ldloc.s    'CS$<>9__CachedAnonymousMethodDelegate10'
            IL_012f:  call       valuetype [mscorlib]System.TimeSpan Strassens.MainForm::Time(class [mscorlib]System.Action)
            IL_0134:  stloc.0
//000096:                         SetPoint(_strassensParallel, elapsed.TotalSeconds);
            IL_0135:  ldarg.0
            IL_0136:  ldfld      class Strassens.MainForm Strassens.MainForm/'<>c__DisplayClass7'::'<>4__this'
            IL_013b:  ldarg.0
            IL_013c:  ldfld      class Strassens.MainForm Strassens.MainForm/'<>c__DisplayClass7'::'<>4__this'
            IL_0141:  ldfld      class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.DataPoint Strassens.MainForm::_strassensParallel
            IL_0146:  ldloca.s   elapsed
            IL_0148:  call       instance float64 [mscorlib]System.TimeSpan::get_TotalSeconds()
            IL_014d:  call       instance void Strassens.MainForm::SetPoint(class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.DataPoint,
                                                                            float64)
            IL_0152:  nop
//000097:                     }
            IL_0153:  nop
//000098:                 }, token).ContinueWith(t =>
//000099:                 {
//000100:                     _cancellation = null;
//000101:                     btnCompute.Text = "Compute";
//000102:                     progressBar1.Visible = false;
//000103:                     if (t.IsFaulted) MessageBox.Show(t.Exception.ToString());
//000104:                 }, _uiScheduler);
//000105:             }
//000106:             else _cancellation.Cancel();
//000107:         }
//000108: 
//000109:         private void SetPoint(DataPoint point, double seconds)
//000110:         {
//000111:             Task.Factory.StartNew(() =>
//000112:             {
//000113:                 if (seconds > _max)
//000114:                 {
//000115:                     _max = seconds;
//000116:                     chart1.ChartAreas[0].AxisY.Maximum = _max * 1.1;
//000117:                 }
//000118:                 point.SetValueY(seconds);
//000119:                 point.ToolTip = seconds.ToString("F2");
//000120:                 point.Label = string.Format("{0:F2} secs  ({1:F2}x)", seconds, (_max / seconds));
//000121:                 chart1.Invalidate();
//000122:             }, CancellationToken.None, TaskCreationOptions.None, _uiScheduler);
//000123:         }
//000124: 
//000125:         static TimeSpan Time(Action action)
//000126:         {
//000127:             var sw = Stopwatch.StartNew();
//000128:             action();
//000129:             return sw.Elapsed;
//000130:         }
//000131:     }
//000132: }
            IL_0154:  leave.s    IL_0174

          }  // end .try
          finally
          {
            IL_0156:  ldloc.s    'CS$<>8__locals12'
            IL_0158:  ldfld      class Matrix Strassens.MainForm/'<>c__DisplayClass7'/'<>c__DisplayClass11'::matC
            IL_015d:  ldnull
            IL_015e:  ceq
            IL_0160:  stloc.s    CS$4$0000
            IL_0162:  ldloc.s    CS$4$0000
            IL_0164:  brtrue.s   IL_0173

            IL_0166:  ldloc.s    'CS$<>8__locals12'
            IL_0168:  ldfld      class Matrix Strassens.MainForm/'<>c__DisplayClass7'/'<>c__DisplayClass11'::matC
            IL_016d:  callvirt   instance void [mscorlib]System.IDisposable::Dispose()
            IL_0172:  nop
            IL_0173:  endfinally
          }  // end handler
          IL_0174:  nop
          IL_0175:  leave.s    IL_0195

        }  // end .try
        finally
        {
          IL_0177:  ldloc.s    'CS$<>8__localsc'
          IL_0179:  ldfld      class Matrix Strassens.MainForm/'<>c__DisplayClass7'/'<>c__DisplayClassb'::matB
          IL_017e:  ldnull
          IL_017f:  ceq
          IL_0181:  stloc.s    CS$4$0000
          IL_0183:  ldloc.s    CS$4$0000
          IL_0185:  brtrue.s   IL_0194

          IL_0187:  ldloc.s    'CS$<>8__localsc'
          IL_0189:  ldfld      class Matrix Strassens.MainForm/'<>c__DisplayClass7'/'<>c__DisplayClassb'::matB
          IL_018e:  callvirt   instance void [mscorlib]System.IDisposable::Dispose()
          IL_0193:  nop
          IL_0194:  endfinally
        }  // end handler
        IL_0195:  nop
        IL_0196:  leave.s    IL_01b6

      }  // end .try
      finally
      {
        IL_0198:  ldloc.s    'CS$<>8__localsa'
        IL_019a:  ldfld      class Matrix Strassens.MainForm/'<>c__DisplayClass7'/'<>c__DisplayClass9'::matA
        IL_019f:  ldnull
        IL_01a0:  ceq
        IL_01a2:  stloc.s    CS$4$0000
        IL_01a4:  ldloc.s    CS$4$0000
        IL_01a6:  brtrue.s   IL_01b5

        IL_01a8:  ldloc.s    'CS$<>8__localsa'
        IL_01aa:  ldfld      class Matrix Strassens.MainForm/'<>c__DisplayClass7'/'<>c__DisplayClass9'::matA
        IL_01af:  callvirt   instance void [mscorlib]System.IDisposable::Dispose()
        IL_01b4:  nop
        IL_01b5:  endfinally
      }  // end handler
      IL_01b6:  nop
      IL_01b7:  ret
    } // end of method '<>c__DisplayClass7'::'<btnCompute_Click>b__1'

  } // end of class '<>c__DisplayClass7'

  .class auto ansi sealed nested private beforefieldinit '<>c__DisplayClass14'
         extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .field public class Strassens.MainForm '<>4__this'
    .field public class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.DataPoint point
    .field public float64 seconds
    .method public hidebysig specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      // Code size       7 (0x7)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ret
    } // end of method '<>c__DisplayClass14'::.ctor

    .method public hidebysig instance void 
            '<SetPoint>b__13'() cil managed
    {
      // Code size       236 (0xec)
      .maxstack  5
      .locals init ([0] bool CS$4$0000,
               [1] object[] CS$0$0001)
//000112:             {
      IL_0000:  nop
//000113:                 if (seconds > _max)
      IL_0001:  ldarg.0
      IL_0002:  ldfld      float64 Strassens.MainForm/'<>c__DisplayClass14'::seconds
      IL_0007:  ldarg.0
      IL_0008:  ldfld      class Strassens.MainForm Strassens.MainForm/'<>c__DisplayClass14'::'<>4__this'
      IL_000d:  ldfld      float64 Strassens.MainForm::_max
      IL_0012:  cgt
      IL_0014:  ldc.i4.0
      IL_0015:  ceq
      IL_0017:  stloc.0
//000114:                 {
//000115:                     _max = seconds;
//000116:                     chart1.ChartAreas[0].AxisY.Maximum = _max * 1.1;
//000117:                 }
//000118:                 point.SetValueY(seconds);
//000119:                 point.ToolTip = seconds.ToString("F2");
//000120:                 point.Label = string.Format("{0:F2} secs  ({1:F2}x)", seconds, (_max / seconds));
//000121:                 chart1.Invalidate();
//000122:             }, CancellationToken.None, TaskCreationOptions.None, _uiScheduler);
//000123:         }
//000124: 
//000125:         static TimeSpan Time(Action action)
//000126:         {
//000127:             var sw = Stopwatch.StartNew();
//000128:             action();
//000129:             return sw.Elapsed;
//000130:         }
//000131:     }
//000132: }
      IL_0018:  ldloc.0
      IL_0019:  brtrue.s   IL_0064

//000114:                 {
      IL_001b:  nop
//000115:                     _max = seconds;
      IL_001c:  ldarg.0
      IL_001d:  ldfld      class Strassens.MainForm Strassens.MainForm/'<>c__DisplayClass14'::'<>4__this'
      IL_0022:  ldarg.0
      IL_0023:  ldfld      float64 Strassens.MainForm/'<>c__DisplayClass14'::seconds
      IL_0028:  stfld      float64 Strassens.MainForm::_max
//000116:                     chart1.ChartAreas[0].AxisY.Maximum = _max * 1.1;
      IL_002d:  ldarg.0
      IL_002e:  ldfld      class Strassens.MainForm Strassens.MainForm/'<>c__DisplayClass14'::'<>4__this'
      IL_0033:  ldfld      class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Chart Strassens.MainForm::chart1
      IL_0038:  callvirt   instance class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.ChartAreaCollection [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Chart::get_ChartAreas()
      IL_003d:  ldc.i4.0
      IL_003e:  callvirt   instance !0 class [mscorlib]System.Collections.ObjectModel.Collection`1<class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.ChartArea>::get_Item(int32)
      IL_0043:  callvirt   instance class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Axis [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.ChartArea::get_AxisY()
      IL_0048:  ldarg.0
      IL_0049:  ldfld      class Strassens.MainForm Strassens.MainForm/'<>c__DisplayClass14'::'<>4__this'
      IL_004e:  ldfld      float64 Strassens.MainForm::_max
      IL_0053:  ldc.r8     1.1000000000000001
      IL_005c:  mul
      IL_005d:  callvirt   instance void [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Axis::set_Maximum(float64)
      IL_0062:  nop
//000117:                 }
      IL_0063:  nop
//000118:                 point.SetValueY(seconds);
      IL_0064:  ldarg.0
      IL_0065:  ldfld      class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.DataPoint Strassens.MainForm/'<>c__DisplayClass14'::point
      IL_006a:  ldc.i4.1
      IL_006b:  newarr     [mscorlib]System.Object
      IL_0070:  stloc.1
      IL_0071:  ldloc.1
      IL_0072:  ldc.i4.0
      IL_0073:  ldarg.0
      IL_0074:  ldfld      float64 Strassens.MainForm/'<>c__DisplayClass14'::seconds
      IL_0079:  box        [mscorlib]System.Double
      IL_007e:  stelem.ref
      IL_007f:  ldloc.1
      IL_0080:  callvirt   instance void [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.DataPoint::SetValueY(object[])
      IL_0085:  nop
//000119:                 point.ToolTip = seconds.ToString("F2");
      IL_0086:  ldarg.0
      IL_0087:  ldfld      class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.DataPoint Strassens.MainForm/'<>c__DisplayClass14'::point
      IL_008c:  ldarg.0
      IL_008d:  ldflda     float64 Strassens.MainForm/'<>c__DisplayClass14'::seconds
      IL_0092:  ldstr      "F2"
      IL_0097:  call       instance string [mscorlib]System.Double::ToString(string)
      IL_009c:  callvirt   instance void [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties::set_ToolTip(string)
      IL_00a1:  nop
//000120:                 point.Label = string.Format("{0:F2} secs  ({1:F2}x)", seconds, (_max / seconds));
      IL_00a2:  ldarg.0
      IL_00a3:  ldfld      class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.DataPoint Strassens.MainForm/'<>c__DisplayClass14'::point
      IL_00a8:  ldstr      "{0:F2} secs  ({1:F2}x)"
      IL_00ad:  ldarg.0
      IL_00ae:  ldfld      float64 Strassens.MainForm/'<>c__DisplayClass14'::seconds
      IL_00b3:  box        [mscorlib]System.Double
      IL_00b8:  ldarg.0
      IL_00b9:  ldfld      class Strassens.MainForm Strassens.MainForm/'<>c__DisplayClass14'::'<>4__this'
      IL_00be:  ldfld      float64 Strassens.MainForm::_max
      IL_00c3:  ldarg.0
      IL_00c4:  ldfld      float64 Strassens.MainForm/'<>c__DisplayClass14'::seconds
      IL_00c9:  div
      IL_00ca:  box        [mscorlib]System.Double
      IL_00cf:  call       string [mscorlib]System.String::Format(string,
                                                                  object,
                                                                  object)
      IL_00d4:  callvirt   instance void [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties::set_Label(string)
      IL_00d9:  nop
//000121:                 chart1.Invalidate();
      IL_00da:  ldarg.0
      IL_00db:  ldfld      class Strassens.MainForm Strassens.MainForm/'<>c__DisplayClass14'::'<>4__this'
      IL_00e0:  ldfld      class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Chart Strassens.MainForm::chart1
      IL_00e5:  callvirt   instance void [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Chart::Invalidate()
      IL_00ea:  nop
//000122:             }, CancellationToken.None, TaskCreationOptions.None, _uiScheduler);
//000123:         }
//000124: 
//000125:         static TimeSpan Time(Action action)
//000126:         {
//000127:             var sw = Stopwatch.StartNew();
//000128:             action();
//000129:             return sw.Elapsed;
//000130:         }
//000131:     }
//000132: }
      IL_00eb:  ret
    } // end of method '<>c__DisplayClass14'::'<SetPoint>b__13'

  } // end of class '<>c__DisplayClass14'

  .field private class [mscorlib]System.Threading.Tasks.TaskScheduler _uiScheduler
  .field private class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.DataPoint _naive
  .field private class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.DataPoint _naiveParallel
  .field private class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.DataPoint _strassens
  .field private class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.DataPoint _strassensParallel
  .field private float64 _max
  .field private class [mscorlib]System.Threading.CancellationTokenSource _cancellation
  .field private class [System]System.ComponentModel.IContainer components
  .field private class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Chart chart1
  .field private class [System.Windows.Forms]System.Windows.Forms.ComboBox cbMatrixSize
  .field private class [System.Windows.Forms]System.Windows.Forms.Button btnCompute
  .field private class [System.Windows.Forms]System.Windows.Forms.ProgressBar progressBar1
  .method public hidebysig specialname rtspecialname 
          instance void  .ctor() cil managed
  {
    // Code size       39 (0x27)
    .maxstack  8
//000025:         private double _max = 0;
    IL_0000:  ldarg.0
    IL_0001:  ldc.r8     0.0
    IL_000a:  stfld      float64 Strassens.MainForm::_max
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Strassens\Strassens_CSharp\MainForm.Designer.cs' 
//000008:         private System.ComponentModel.IContainer components = null;
    IL_000f:  ldarg.0
    IL_0010:  ldnull
    IL_0011:  stfld      class [System]System.ComponentModel.IContainer Strassens.MainForm::components
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Strassens\Strassens_CSharp\MainForm.cs' 
//000028:         public MainForm()
    IL_0016:  ldarg.0
    IL_0017:  call       instance void [System.Windows.Forms]System.Windows.Forms.Form::.ctor()
    IL_001c:  nop
//000029:         {
    IL_001d:  nop
//000030:             InitializeComponent();
    IL_001e:  ldarg.0
    IL_001f:  call       instance void Strassens.MainForm::InitializeComponent()
    IL_0024:  nop
//000031:         }
    IL_0025:  nop
    IL_0026:  ret
  } // end of method MainForm::.ctor

  .method private hidebysig instance void 
          MainForm_Load(object sender,
                        class [mscorlib]System.EventArgs e) cil managed
  {
    // Code size       20 (0x14)
    .maxstack  8
//000032: 
//000033:         private void MainForm_Load(object sender, EventArgs e)
//000034:         {
    IL_0000:  nop
//000035:             _uiScheduler = TaskScheduler.FromCurrentSynchronizationContext();
    IL_0001:  ldarg.0
    IL_0002:  call       class [mscorlib]System.Threading.Tasks.TaskScheduler [mscorlib]System.Threading.Tasks.TaskScheduler::FromCurrentSynchronizationContext()
    IL_0007:  stfld      class [mscorlib]System.Threading.Tasks.TaskScheduler Strassens.MainForm::_uiScheduler
//000036:             SetupPoints();
    IL_000c:  ldarg.0
    IL_000d:  call       instance void Strassens.MainForm::SetupPoints()
    IL_0012:  nop
//000037:         }
    IL_0013:  ret
  } // end of method MainForm::MainForm_Load

  .method private hidebysig instance void 
          SetupPoints() cil managed
  {
    // Code size       450 (0x1c2)
    .maxstack  7
    .locals init ([0] object[] CS$0$0000)
//000038: 
//000039:         private void SetupPoints()
//000040:         {
    IL_0000:  nop
//000041:             _naive = chart1.Series[0].Points[chart1.Series[0].Points.AddXY("Naive", 0.0)];
    IL_0001:  ldarg.0
    IL_0002:  ldarg.0
    IL_0003:  ldfld      class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Chart Strassens.MainForm::chart1
    IL_0008:  callvirt   instance class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.SeriesCollection [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Chart::get_Series()
    IL_000d:  ldc.i4.0
    IL_000e:  callvirt   instance !0 class [mscorlib]System.Collections.ObjectModel.Collection`1<class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Series>::get_Item(int32)
    IL_0013:  callvirt   instance class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.DataPointCollection [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Series::get_Points()
    IL_0018:  ldarg.0
    IL_0019:  ldfld      class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Chart Strassens.MainForm::chart1
    IL_001e:  callvirt   instance class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.SeriesCollection [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Chart::get_Series()
    IL_0023:  ldc.i4.0
    IL_0024:  callvirt   instance !0 class [mscorlib]System.Collections.ObjectModel.Collection`1<class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Series>::get_Item(int32)
    IL_0029:  callvirt   instance class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.DataPointCollection [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Series::get_Points()
    IL_002e:  ldstr      "Naive"
    IL_0033:  ldc.i4.1
    IL_0034:  newarr     [mscorlib]System.Object
    IL_0039:  stloc.0
    IL_003a:  ldloc.0
    IL_003b:  ldc.i4.0
    IL_003c:  ldc.r8     0.0
    IL_0045:  box        [mscorlib]System.Double
    IL_004a:  stelem.ref
    IL_004b:  ldloc.0
    IL_004c:  callvirt   instance int32 [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.DataPointCollection::AddXY(object,
                                                                                                                                                           object[])
    IL_0051:  callvirt   instance !0 class [mscorlib]System.Collections.ObjectModel.Collection`1<class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.DataPoint>::get_Item(int32)
    IL_0056:  stfld      class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.DataPoint Strassens.MainForm::_naive
//000042:             _naiveParallel = chart1.Series[0].Points[chart1.Series[0].Points.AddXY("Naive Parallel", 0.0)];
    IL_005b:  ldarg.0
    IL_005c:  ldarg.0
    IL_005d:  ldfld      class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Chart Strassens.MainForm::chart1
    IL_0062:  callvirt   instance class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.SeriesCollection [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Chart::get_Series()
    IL_0067:  ldc.i4.0
    IL_0068:  callvirt   instance !0 class [mscorlib]System.Collections.ObjectModel.Collection`1<class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Series>::get_Item(int32)
    IL_006d:  callvirt   instance class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.DataPointCollection [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Series::get_Points()
    IL_0072:  ldarg.0
    IL_0073:  ldfld      class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Chart Strassens.MainForm::chart1
    IL_0078:  callvirt   instance class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.SeriesCollection [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Chart::get_Series()
    IL_007d:  ldc.i4.0
    IL_007e:  callvirt   instance !0 class [mscorlib]System.Collections.ObjectModel.Collection`1<class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Series>::get_Item(int32)
    IL_0083:  callvirt   instance class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.DataPointCollection [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Series::get_Points()
    IL_0088:  ldstr      "Naive Parallel"
    IL_008d:  ldc.i4.1
    IL_008e:  newarr     [mscorlib]System.Object
    IL_0093:  stloc.0
    IL_0094:  ldloc.0
    IL_0095:  ldc.i4.0
    IL_0096:  ldc.r8     0.0
    IL_009f:  box        [mscorlib]System.Double
    IL_00a4:  stelem.ref
    IL_00a5:  ldloc.0
    IL_00a6:  callvirt   instance int32 [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.DataPointCollection::AddXY(object,
                                                                                                                                                           object[])
    IL_00ab:  callvirt   instance !0 class [mscorlib]System.Collections.ObjectModel.Collection`1<class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.DataPoint>::get_Item(int32)
    IL_00b0:  stfld      class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.DataPoint Strassens.MainForm::_naiveParallel
//000043:             _strassens = chart1.Series[0].Points[chart1.Series[0].Points.AddXY("Strassen's", 0.0)];
    IL_00b5:  ldarg.0
    IL_00b6:  ldarg.0
    IL_00b7:  ldfld      class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Chart Strassens.MainForm::chart1
    IL_00bc:  callvirt   instance class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.SeriesCollection [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Chart::get_Series()
    IL_00c1:  ldc.i4.0
    IL_00c2:  callvirt   instance !0 class [mscorlib]System.Collections.ObjectModel.Collection`1<class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Series>::get_Item(int32)
    IL_00c7:  callvirt   instance class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.DataPointCollection [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Series::get_Points()
    IL_00cc:  ldarg.0
    IL_00cd:  ldfld      class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Chart Strassens.MainForm::chart1
    IL_00d2:  callvirt   instance class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.SeriesCollection [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Chart::get_Series()
    IL_00d7:  ldc.i4.0
    IL_00d8:  callvirt   instance !0 class [mscorlib]System.Collections.ObjectModel.Collection`1<class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Series>::get_Item(int32)
    IL_00dd:  callvirt   instance class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.DataPointCollection [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Series::get_Points()
    IL_00e2:  ldstr      "Strassen's"
    IL_00e7:  ldc.i4.1
    IL_00e8:  newarr     [mscorlib]System.Object
    IL_00ed:  stloc.0
    IL_00ee:  ldloc.0
    IL_00ef:  ldc.i4.0
    IL_00f0:  ldc.r8     0.0
    IL_00f9:  box        [mscorlib]System.Double
    IL_00fe:  stelem.ref
    IL_00ff:  ldloc.0
    IL_0100:  callvirt   instance int32 [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.DataPointCollection::AddXY(object,
                                                                                                                                                           object[])
    IL_0105:  callvirt   instance !0 class [mscorlib]System.Collections.ObjectModel.Collection`1<class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.DataPoint>::get_Item(int32)
    IL_010a:  stfld      class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.DataPoint Strassens.MainForm::_strassens
//000044:             _strassensParallel = chart1.Series[0].Points[chart1.Series[0].Points.AddXY("Strassen's Parallel", 0.0)];
    IL_010f:  ldarg.0
    IL_0110:  ldarg.0
    IL_0111:  ldfld      class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Chart Strassens.MainForm::chart1
    IL_0116:  callvirt   instance class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.SeriesCollection [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Chart::get_Series()
    IL_011b:  ldc.i4.0
    IL_011c:  callvirt   instance !0 class [mscorlib]System.Collections.ObjectModel.Collection`1<class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Series>::get_Item(int32)
    IL_0121:  callvirt   instance class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.DataPointCollection [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Series::get_Points()
    IL_0126:  ldarg.0
    IL_0127:  ldfld      class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Chart Strassens.MainForm::chart1
    IL_012c:  callvirt   instance class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.SeriesCollection [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Chart::get_Series()
    IL_0131:  ldc.i4.0
    IL_0132:  callvirt   instance !0 class [mscorlib]System.Collections.ObjectModel.Collection`1<class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Series>::get_Item(int32)
    IL_0137:  callvirt   instance class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.DataPointCollection [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Series::get_Points()
    IL_013c:  ldstr      "Strassen's Parallel"
    IL_0141:  ldc.i4.1
    IL_0142:  newarr     [mscorlib]System.Object
    IL_0147:  stloc.0
    IL_0148:  ldloc.0
    IL_0149:  ldc.i4.0
    IL_014a:  ldc.r8     0.0
    IL_0153:  box        [mscorlib]System.Double
    IL_0158:  stelem.ref
    IL_0159:  ldloc.0
    IL_015a:  callvirt   instance int32 [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.DataPointCollection::AddXY(object,
                                                                                                                                                           object[])
    IL_015f:  callvirt   instance !0 class [mscorlib]System.Collections.ObjectModel.Collection`1<class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.DataPoint>::get_Item(int32)
    IL_0164:  stfld      class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.DataPoint Strassens.MainForm::_strassensParallel
//000045:             chart1.ChartAreas[0].AxisY.Minimum = 0.0;
    IL_0169:  ldarg.0
    IL_016a:  ldfld      class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Chart Strassens.MainForm::chart1
    IL_016f:  callvirt   instance class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.ChartAreaCollection [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Chart::get_ChartAreas()
    IL_0174:  ldc.i4.0
    IL_0175:  callvirt   instance !0 class [mscorlib]System.Collections.ObjectModel.Collection`1<class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.ChartArea>::get_Item(int32)
    IL_017a:  callvirt   instance class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Axis [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.ChartArea::get_AxisY()
    IL_017f:  ldc.r8     0.0
    IL_0188:  callvirt   instance void [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Axis::set_Minimum(float64)
    IL_018d:  nop
//000046:             chart1.ChartAreas[0].AxisY.Maximum = 10.0;
    IL_018e:  ldarg.0
    IL_018f:  ldfld      class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Chart Strassens.MainForm::chart1
    IL_0194:  callvirt   instance class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.ChartAreaCollection [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Chart::get_ChartAreas()
    IL_0199:  ldc.i4.0
    IL_019a:  callvirt   instance !0 class [mscorlib]System.Collections.ObjectModel.Collection`1<class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.ChartArea>::get_Item(int32)
    IL_019f:  callvirt   instance class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Axis [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.ChartArea::get_AxisY()
    IL_01a4:  ldc.r8     10.
    IL_01ad:  callvirt   instance void [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Axis::set_Maximum(float64)
    IL_01b2:  nop
//000047:             ClearPointValues();
    IL_01b3:  ldarg.0
    IL_01b4:  call       instance void Strassens.MainForm::ClearPointValues()
    IL_01b9:  nop
//000048:             Invalidate();
    IL_01ba:  ldarg.0
    IL_01bb:  call       instance void [System.Windows.Forms]System.Windows.Forms.Control::Invalidate()
    IL_01c0:  nop
//000049:         }
    IL_01c1:  ret
  } // end of method MainForm::SetupPoints

  .method private hidebysig instance void 
          ClearPointValues() cil managed
  {
    // Code size       156 (0x9c)
    .maxstack  4
    .locals init ([0] class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.DataPoint point,
             [1] class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.DataPoint[] CS$0$0000,
             [2] class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.DataPoint[] CS$6$0001,
             [3] int32 CS$7$0002,
             [4] object[] CS$0$0003,
             [5] bool CS$4$0004)
//000050: 
//000051:         private void ClearPointValues()
//000052:         {
    IL_0000:  nop
//000053:             foreach (var point in new[] { _naive, _naiveParallel, _strassens, _strassensParallel })
    IL_0001:  nop
    IL_0002:  ldc.i4.4
    IL_0003:  newarr     [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.DataPoint
    IL_0008:  stloc.1
    IL_0009:  ldloc.1
    IL_000a:  ldc.i4.0
    IL_000b:  ldarg.0
    IL_000c:  ldfld      class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.DataPoint Strassens.MainForm::_naive
    IL_0011:  stelem.ref
    IL_0012:  ldloc.1
    IL_0013:  ldc.i4.1
    IL_0014:  ldarg.0
    IL_0015:  ldfld      class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.DataPoint Strassens.MainForm::_naiveParallel
    IL_001a:  stelem.ref
    IL_001b:  ldloc.1
    IL_001c:  ldc.i4.2
    IL_001d:  ldarg.0
    IL_001e:  ldfld      class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.DataPoint Strassens.MainForm::_strassens
    IL_0023:  stelem.ref
    IL_0024:  ldloc.1
    IL_0025:  ldc.i4.3
    IL_0026:  ldarg.0
    IL_0027:  ldfld      class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.DataPoint Strassens.MainForm::_strassensParallel
    IL_002c:  stelem.ref
    IL_002d:  ldloc.1
    IL_002e:  stloc.2
//000054:             {
//000055:                 point.SetValueY(0);
//000056:                 point.ToolTip = "";
//000057:                 point.Label = "";
//000058:                 point.Font = new System.Drawing.Font(point.Font, System.Drawing.FontStyle.Bold);
//000059:             }
//000060:             chart1.Invalidate();
//000061:         }
//000062: 
//000063:         private void btnCompute_Click(object sender, EventArgs e)
//000064:         {
//000065:             if (_cancellation == null)
//000066:             {
//000067:                 btnCompute.Text = "Cancel";
//000068: 
//000069:                 int matrixSize = 0;
//000070:                 if (!Int32.TryParse(cbMatrixSize.Text, out matrixSize)) return;
//000071:                 progressBar1.Visible = true;
//000072: 
//000073:                 ClearPointValues();
//000074:                 _max = 0;
//000075: 
//000076:                 _cancellation = new CancellationTokenSource();
//000077:                 var token = _cancellation.Token;
//000078:                 Task.Factory.StartNew(() =>
//000079:                 {
//000080:                     using (Matrix matA = new Matrix(matrixSize))
//000081:                     using (Matrix matB = new Matrix(matrixSize))
//000082:                     using (Matrix matC = new Matrix(matrixSize))
//000083:                     {
//000084:                         TimeSpan elapsed;
//000085: 
//000086:                         elapsed = Time(() => Matrix.Multiply(token, matA, matB, matC));
//000087:                         SetPoint(_naive, elapsed.TotalSeconds);
//000088: 
//000089:                         elapsed = Time(() => Matrix.MultiplyParallel(token, matA, matB, matC));
//000090:                         SetPoint(_naiveParallel, elapsed.TotalSeconds);
//000091: 
//000092:                         elapsed = Time(() => Matrix.MultiplyStrassens(token, matA, matB, matC));
//000093:                         SetPoint(_strassens, elapsed.TotalSeconds);
//000094: 
//000095:                         elapsed = Time(() => Matrix.MultiplyStrassensParallel(token, matA, matB, matC));
//000096:                         SetPoint(_strassensParallel, elapsed.TotalSeconds);
//000097:                     }
//000098:                 }, token).ContinueWith(t =>
//000099:                 {
//000100:                     _cancellation = null;
//000101:                     btnCompute.Text = "Compute";
//000102:                     progressBar1.Visible = false;
//000103:                     if (t.IsFaulted) MessageBox.Show(t.Exception.ToString());
//000104:                 }, _uiScheduler);
//000105:             }
//000106:             else _cancellation.Cancel();
//000107:         }
//000108: 
//000109:         private void SetPoint(DataPoint point, double seconds)
//000110:         {
//000111:             Task.Factory.StartNew(() =>
//000112:             {
//000113:                 if (seconds > _max)
//000114:                 {
//000115:                     _max = seconds;
//000116:                     chart1.ChartAreas[0].AxisY.Maximum = _max * 1.1;
//000117:                 }
//000118:                 point.SetValueY(seconds);
//000119:                 point.ToolTip = seconds.ToString("F2");
//000120:                 point.Label = string.Format("{0:F2} secs  ({1:F2}x)", seconds, (_max / seconds));
//000121:                 chart1.Invalidate();
//000122:             }, CancellationToken.None, TaskCreationOptions.None, _uiScheduler);
//000123:         }
//000124: 
//000125:         static TimeSpan Time(Action action)
//000126:         {
//000127:             var sw = Stopwatch.StartNew();
//000128:             action();
//000129:             return sw.Elapsed;
//000130:         }
//000131:     }
//000132: }
    IL_002f:  ldc.i4.0
    IL_0030:  stloc.3
    IL_0031:  br.s       IL_0083

//000053:             foreach (var point in new[] { _naive, _naiveParallel, _strassens, _strassensParallel })
    IL_0033:  ldloc.2
    IL_0034:  ldloc.3
    IL_0035:  ldelem.ref
    IL_0036:  stloc.0
//000054:             {
    IL_0037:  nop
//000055:                 point.SetValueY(0);
    IL_0038:  ldloc.0
    IL_0039:  ldc.i4.1
    IL_003a:  newarr     [mscorlib]System.Object
    IL_003f:  stloc.s    CS$0$0003
    IL_0041:  ldloc.s    CS$0$0003
    IL_0043:  ldc.i4.0
    IL_0044:  ldc.i4.0
    IL_0045:  box        [mscorlib]System.Int32
    IL_004a:  stelem.ref
    IL_004b:  ldloc.s    CS$0$0003
    IL_004d:  callvirt   instance void [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.DataPoint::SetValueY(object[])
    IL_0052:  nop
//000056:                 point.ToolTip = "";
    IL_0053:  ldloc.0
    IL_0054:  ldstr      ""
    IL_0059:  callvirt   instance void [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties::set_ToolTip(string)
    IL_005e:  nop
//000057:                 point.Label = "";
    IL_005f:  ldloc.0
    IL_0060:  ldstr      ""
    IL_0065:  callvirt   instance void [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties::set_Label(string)
    IL_006a:  nop
//000058:                 point.Font = new System.Drawing.Font(point.Font, System.Drawing.FontStyle.Bold);
    IL_006b:  ldloc.0
    IL_006c:  ldloc.0
    IL_006d:  callvirt   instance class [System.Drawing]System.Drawing.Font [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties::get_Font()
    IL_0072:  ldc.i4.1
    IL_0073:  newobj     instance void [System.Drawing]System.Drawing.Font::.ctor(class [System.Drawing]System.Drawing.Font,
                                                                                  valuetype [System.Drawing]System.Drawing.FontStyle)
    IL_0078:  callvirt   instance void [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties::set_Font(class [System.Drawing]System.Drawing.Font)
    IL_007d:  nop
//000059:             }
    IL_007e:  nop
//000060:             chart1.Invalidate();
//000061:         }
//000062: 
//000063:         private void btnCompute_Click(object sender, EventArgs e)
//000064:         {
//000065:             if (_cancellation == null)
//000066:             {
//000067:                 btnCompute.Text = "Cancel";
//000068: 
//000069:                 int matrixSize = 0;
//000070:                 if (!Int32.TryParse(cbMatrixSize.Text, out matrixSize)) return;
//000071:                 progressBar1.Visible = true;
//000072: 
//000073:                 ClearPointValues();
//000074:                 _max = 0;
//000075: 
//000076:                 _cancellation = new CancellationTokenSource();
//000077:                 var token = _cancellation.Token;
//000078:                 Task.Factory.StartNew(() =>
//000079:                 {
//000080:                     using (Matrix matA = new Matrix(matrixSize))
//000081:                     using (Matrix matB = new Matrix(matrixSize))
//000082:                     using (Matrix matC = new Matrix(matrixSize))
//000083:                     {
//000084:                         TimeSpan elapsed;
//000085: 
//000086:                         elapsed = Time(() => Matrix.Multiply(token, matA, matB, matC));
//000087:                         SetPoint(_naive, elapsed.TotalSeconds);
//000088: 
//000089:                         elapsed = Time(() => Matrix.MultiplyParallel(token, matA, matB, matC));
//000090:                         SetPoint(_naiveParallel, elapsed.TotalSeconds);
//000091: 
//000092:                         elapsed = Time(() => Matrix.MultiplyStrassens(token, matA, matB, matC));
//000093:                         SetPoint(_strassens, elapsed.TotalSeconds);
//000094: 
//000095:                         elapsed = Time(() => Matrix.MultiplyStrassensParallel(token, matA, matB, matC));
//000096:                         SetPoint(_strassensParallel, elapsed.TotalSeconds);
//000097:                     }
//000098:                 }, token).ContinueWith(t =>
//000099:                 {
//000100:                     _cancellation = null;
//000101:                     btnCompute.Text = "Compute";
//000102:                     progressBar1.Visible = false;
//000103:                     if (t.IsFaulted) MessageBox.Show(t.Exception.ToString());
//000104:                 }, _uiScheduler);
//000105:             }
//000106:             else _cancellation.Cancel();
//000107:         }
//000108: 
//000109:         private void SetPoint(DataPoint point, double seconds)
//000110:         {
//000111:             Task.Factory.StartNew(() =>
//000112:             {
//000113:                 if (seconds > _max)
//000114:                 {
//000115:                     _max = seconds;
//000116:                     chart1.ChartAreas[0].AxisY.Maximum = _max * 1.1;
//000117:                 }
//000118:                 point.SetValueY(seconds);
//000119:                 point.ToolTip = seconds.ToString("F2");
//000120:                 point.Label = string.Format("{0:F2} secs  ({1:F2}x)", seconds, (_max / seconds));
//000121:                 chart1.Invalidate();
//000122:             }, CancellationToken.None, TaskCreationOptions.None, _uiScheduler);
//000123:         }
//000124: 
//000125:         static TimeSpan Time(Action action)
//000126:         {
//000127:             var sw = Stopwatch.StartNew();
//000128:             action();
//000129:             return sw.Elapsed;
//000130:         }
//000131:     }
//000132: }
    IL_007f:  ldloc.3
    IL_0080:  ldc.i4.1
    IL_0081:  add
    IL_0082:  stloc.3
//000053:             foreach (var point in new[] { _naive, _naiveParallel, _strassens, _strassensParallel })
    IL_0083:  ldloc.3
    IL_0084:  ldloc.2
    IL_0085:  ldlen
    IL_0086:  conv.i4
    IL_0087:  clt
    IL_0089:  stloc.s    CS$4$0004
//000054:             {
//000055:                 point.SetValueY(0);
//000056:                 point.ToolTip = "";
//000057:                 point.Label = "";
//000058:                 point.Font = new System.Drawing.Font(point.Font, System.Drawing.FontStyle.Bold);
//000059:             }
//000060:             chart1.Invalidate();
//000061:         }
//000062: 
//000063:         private void btnCompute_Click(object sender, EventArgs e)
//000064:         {
//000065:             if (_cancellation == null)
//000066:             {
//000067:                 btnCompute.Text = "Cancel";
//000068: 
//000069:                 int matrixSize = 0;
//000070:                 if (!Int32.TryParse(cbMatrixSize.Text, out matrixSize)) return;
//000071:                 progressBar1.Visible = true;
//000072: 
//000073:                 ClearPointValues();
//000074:                 _max = 0;
//000075: 
//000076:                 _cancellation = new CancellationTokenSource();
//000077:                 var token = _cancellation.Token;
//000078:                 Task.Factory.StartNew(() =>
//000079:                 {
//000080:                     using (Matrix matA = new Matrix(matrixSize))
//000081:                     using (Matrix matB = new Matrix(matrixSize))
//000082:                     using (Matrix matC = new Matrix(matrixSize))
//000083:                     {
//000084:                         TimeSpan elapsed;
//000085: 
//000086:                         elapsed = Time(() => Matrix.Multiply(token, matA, matB, matC));
//000087:                         SetPoint(_naive, elapsed.TotalSeconds);
//000088: 
//000089:                         elapsed = Time(() => Matrix.MultiplyParallel(token, matA, matB, matC));
//000090:                         SetPoint(_naiveParallel, elapsed.TotalSeconds);
//000091: 
//000092:                         elapsed = Time(() => Matrix.MultiplyStrassens(token, matA, matB, matC));
//000093:                         SetPoint(_strassens, elapsed.TotalSeconds);
//000094: 
//000095:                         elapsed = Time(() => Matrix.MultiplyStrassensParallel(token, matA, matB, matC));
//000096:                         SetPoint(_strassensParallel, elapsed.TotalSeconds);
//000097:                     }
//000098:                 }, token).ContinueWith(t =>
//000099:                 {
//000100:                     _cancellation = null;
//000101:                     btnCompute.Text = "Compute";
//000102:                     progressBar1.Visible = false;
//000103:                     if (t.IsFaulted) MessageBox.Show(t.Exception.ToString());
//000104:                 }, _uiScheduler);
//000105:             }
//000106:             else _cancellation.Cancel();
//000107:         }
//000108: 
//000109:         private void SetPoint(DataPoint point, double seconds)
//000110:         {
//000111:             Task.Factory.StartNew(() =>
//000112:             {
//000113:                 if (seconds > _max)
//000114:                 {
//000115:                     _max = seconds;
//000116:                     chart1.ChartAreas[0].AxisY.Maximum = _max * 1.1;
//000117:                 }
//000118:                 point.SetValueY(seconds);
//000119:                 point.ToolTip = seconds.ToString("F2");
//000120:                 point.Label = string.Format("{0:F2} secs  ({1:F2}x)", seconds, (_max / seconds));
//000121:                 chart1.Invalidate();
//000122:             }, CancellationToken.None, TaskCreationOptions.None, _uiScheduler);
//000123:         }
//000124: 
//000125:         static TimeSpan Time(Action action)
//000126:         {
//000127:             var sw = Stopwatch.StartNew();
//000128:             action();
//000129:             return sw.Elapsed;
//000130:         }
//000131:     }
//000132: }
    IL_008b:  ldloc.s    CS$4$0004
    IL_008d:  brtrue.s   IL_0033

//000060:             chart1.Invalidate();
    IL_008f:  ldarg.0
    IL_0090:  ldfld      class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Chart Strassens.MainForm::chart1
    IL_0095:  callvirt   instance void [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Chart::Invalidate()
    IL_009a:  nop
//000061:         }
    IL_009b:  ret
  } // end of method MainForm::ClearPointValues

  .method private hidebysig instance void 
          btnCompute_Click(object sender,
                           class [mscorlib]System.EventArgs e) cil managed
  {
    // Code size       230 (0xe6)
    .maxstack  4
    .locals init ([0] class Strassens.MainForm/'<>c__DisplayClass7' 'CS$<>8__locals8',
             [1] class [mscorlib]System.Action`1<class [mscorlib]System.Threading.Tasks.Task> 'CS$<>9__CachedAnonymousMethodDelegate6',
             [2] bool CS$4$0000)
//000062: 
//000063:         private void btnCompute_Click(object sender, EventArgs e)
//000064:         {
//000065:             if (_cancellation == null)
//000066:             {
//000067:                 btnCompute.Text = "Cancel";
//000068: 
//000069:                 int matrixSize = 0;
//000070:                 if (!Int32.TryParse(cbMatrixSize.Text, out matrixSize)) return;
//000071:                 progressBar1.Visible = true;
//000072: 
//000073:                 ClearPointValues();
//000074:                 _max = 0;
//000075: 
//000076:                 _cancellation = new CancellationTokenSource();
//000077:                 var token = _cancellation.Token;
//000078:                 Task.Factory.StartNew(() =>
//000079:                 {
//000080:                     using (Matrix matA = new Matrix(matrixSize))
//000081:                     using (Matrix matB = new Matrix(matrixSize))
//000082:                     using (Matrix matC = new Matrix(matrixSize))
//000083:                     {
//000084:                         TimeSpan elapsed;
//000085: 
//000086:                         elapsed = Time(() => Matrix.Multiply(token, matA, matB, matC));
//000087:                         SetPoint(_naive, elapsed.TotalSeconds);
//000088: 
//000089:                         elapsed = Time(() => Matrix.MultiplyParallel(token, matA, matB, matC));
//000090:                         SetPoint(_naiveParallel, elapsed.TotalSeconds);
//000091: 
//000092:                         elapsed = Time(() => Matrix.MultiplyStrassens(token, matA, matB, matC));
//000093:                         SetPoint(_strassens, elapsed.TotalSeconds);
//000094: 
//000095:                         elapsed = Time(() => Matrix.MultiplyStrassensParallel(token, matA, matB, matC));
//000096:                         SetPoint(_strassensParallel, elapsed.TotalSeconds);
//000097:                     }
//000098:                 }, token).ContinueWith(t =>
//000099:                 {
//000100:                     _cancellation = null;
//000101:                     btnCompute.Text = "Compute";
//000102:                     progressBar1.Visible = false;
//000103:                     if (t.IsFaulted) MessageBox.Show(t.Exception.ToString());
//000104:                 }, _uiScheduler);
//000105:             }
//000106:             else _cancellation.Cancel();
//000107:         }
//000108: 
//000109:         private void SetPoint(DataPoint point, double seconds)
//000110:         {
//000111:             Task.Factory.StartNew(() =>
//000112:             {
//000113:                 if (seconds > _max)
//000114:                 {
//000115:                     _max = seconds;
//000116:                     chart1.ChartAreas[0].AxisY.Maximum = _max * 1.1;
//000117:                 }
//000118:                 point.SetValueY(seconds);
//000119:                 point.ToolTip = seconds.ToString("F2");
//000120:                 point.Label = string.Format("{0:F2} secs  ({1:F2}x)", seconds, (_max / seconds));
//000121:                 chart1.Invalidate();
//000122:             }, CancellationToken.None, TaskCreationOptions.None, _uiScheduler);
//000123:         }
//000124: 
//000125:         static TimeSpan Time(Action action)
//000126:         {
//000127:             var sw = Stopwatch.StartNew();
//000128:             action();
//000129:             return sw.Elapsed;
//000130:         }
//000131:     }
//000132: }
    IL_0000:  ldnull
    IL_0001:  stloc.1
//000064:         {
    IL_0002:  nop
//000065:             if (_cancellation == null)
    IL_0003:  ldarg.0
    IL_0004:  ldfld      class [mscorlib]System.Threading.CancellationTokenSource Strassens.MainForm::_cancellation
    IL_0009:  ldnull
    IL_000a:  ceq
    IL_000c:  ldc.i4.0
    IL_000d:  ceq
    IL_000f:  stloc.2
//000066:             {
//000067:                 btnCompute.Text = "Cancel";
//000068: 
//000069:                 int matrixSize = 0;
//000070:                 if (!Int32.TryParse(cbMatrixSize.Text, out matrixSize)) return;
//000071:                 progressBar1.Visible = true;
//000072: 
//000073:                 ClearPointValues();
//000074:                 _max = 0;
//000075: 
//000076:                 _cancellation = new CancellationTokenSource();
//000077:                 var token = _cancellation.Token;
//000078:                 Task.Factory.StartNew(() =>
//000079:                 {
//000080:                     using (Matrix matA = new Matrix(matrixSize))
//000081:                     using (Matrix matB = new Matrix(matrixSize))
//000082:                     using (Matrix matC = new Matrix(matrixSize))
//000083:                     {
//000084:                         TimeSpan elapsed;
//000085: 
//000086:                         elapsed = Time(() => Matrix.Multiply(token, matA, matB, matC));
//000087:                         SetPoint(_naive, elapsed.TotalSeconds);
//000088: 
//000089:                         elapsed = Time(() => Matrix.MultiplyParallel(token, matA, matB, matC));
//000090:                         SetPoint(_naiveParallel, elapsed.TotalSeconds);
//000091: 
//000092:                         elapsed = Time(() => Matrix.MultiplyStrassens(token, matA, matB, matC));
//000093:                         SetPoint(_strassens, elapsed.TotalSeconds);
//000094: 
//000095:                         elapsed = Time(() => Matrix.MultiplyStrassensParallel(token, matA, matB, matC));
//000096:                         SetPoint(_strassensParallel, elapsed.TotalSeconds);
//000097:                     }
//000098:                 }, token).ContinueWith(t =>
//000099:                 {
//000100:                     _cancellation = null;
//000101:                     btnCompute.Text = "Compute";
//000102:                     progressBar1.Visible = false;
//000103:                     if (t.IsFaulted) MessageBox.Show(t.Exception.ToString());
//000104:                 }, _uiScheduler);
//000105:             }
//000106:             else _cancellation.Cancel();
//000107:         }
//000108: 
//000109:         private void SetPoint(DataPoint point, double seconds)
//000110:         {
//000111:             Task.Factory.StartNew(() =>
//000112:             {
//000113:                 if (seconds > _max)
//000114:                 {
//000115:                     _max = seconds;
//000116:                     chart1.ChartAreas[0].AxisY.Maximum = _max * 1.1;
//000117:                 }
//000118:                 point.SetValueY(seconds);
//000119:                 point.ToolTip = seconds.ToString("F2");
//000120:                 point.Label = string.Format("{0:F2} secs  ({1:F2}x)", seconds, (_max / seconds));
//000121:                 chart1.Invalidate();
//000122:             }, CancellationToken.None, TaskCreationOptions.None, _uiScheduler);
//000123:         }
//000124: 
//000125:         static TimeSpan Time(Action action)
//000126:         {
//000127:             var sw = Stopwatch.StartNew();
//000128:             action();
//000129:             return sw.Elapsed;
//000130:         }
//000131:     }
//000132: }
    IL_0010:  ldloc.2
    IL_0011:  brtrue     IL_00d8

    IL_0016:  newobj     instance void Strassens.MainForm/'<>c__DisplayClass7'::.ctor()
    IL_001b:  stloc.0
    IL_001c:  ldloc.0
    IL_001d:  ldarg.0
    IL_001e:  stfld      class Strassens.MainForm Strassens.MainForm/'<>c__DisplayClass7'::'<>4__this'
//000066:             {
    IL_0023:  nop
//000067:                 btnCompute.Text = "Cancel";
    IL_0024:  ldarg.0
    IL_0025:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Button Strassens.MainForm::btnCompute
    IL_002a:  ldstr      "Cancel"
    IL_002f:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Text(string)
    IL_0034:  nop
//000068: 
//000069:                 int matrixSize = 0;
    IL_0035:  ldloc.0
    IL_0036:  ldc.i4.0
    IL_0037:  stfld      int32 Strassens.MainForm/'<>c__DisplayClass7'::matrixSize
//000070:                 if (!Int32.TryParse(cbMatrixSize.Text, out matrixSize)) return;
    IL_003c:  ldarg.0
    IL_003d:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ComboBox Strassens.MainForm::cbMatrixSize
    IL_0042:  callvirt   instance string [System.Windows.Forms]System.Windows.Forms.Control::get_Text()
    IL_0047:  ldloc.0
    IL_0048:  ldflda     int32 Strassens.MainForm/'<>c__DisplayClass7'::matrixSize
    IL_004d:  call       bool [mscorlib]System.Int32::TryParse(string,
                                                               int32&)
    IL_0052:  stloc.2
//000071:                 progressBar1.Visible = true;
//000072: 
//000073:                 ClearPointValues();
//000074:                 _max = 0;
//000075: 
//000076:                 _cancellation = new CancellationTokenSource();
//000077:                 var token = _cancellation.Token;
//000078:                 Task.Factory.StartNew(() =>
//000079:                 {
//000080:                     using (Matrix matA = new Matrix(matrixSize))
//000081:                     using (Matrix matB = new Matrix(matrixSize))
//000082:                     using (Matrix matC = new Matrix(matrixSize))
//000083:                     {
//000084:                         TimeSpan elapsed;
//000085: 
//000086:                         elapsed = Time(() => Matrix.Multiply(token, matA, matB, matC));
//000087:                         SetPoint(_naive, elapsed.TotalSeconds);
//000088: 
//000089:                         elapsed = Time(() => Matrix.MultiplyParallel(token, matA, matB, matC));
//000090:                         SetPoint(_naiveParallel, elapsed.TotalSeconds);
//000091: 
//000092:                         elapsed = Time(() => Matrix.MultiplyStrassens(token, matA, matB, matC));
//000093:                         SetPoint(_strassens, elapsed.TotalSeconds);
//000094: 
//000095:                         elapsed = Time(() => Matrix.MultiplyStrassensParallel(token, matA, matB, matC));
//000096:                         SetPoint(_strassensParallel, elapsed.TotalSeconds);
//000097:                     }
//000098:                 }, token).ContinueWith(t =>
//000099:                 {
//000100:                     _cancellation = null;
//000101:                     btnCompute.Text = "Compute";
//000102:                     progressBar1.Visible = false;
//000103:                     if (t.IsFaulted) MessageBox.Show(t.Exception.ToString());
//000104:                 }, _uiScheduler);
//000105:             }
//000106:             else _cancellation.Cancel();
//000107:         }
//000108: 
//000109:         private void SetPoint(DataPoint point, double seconds)
//000110:         {
//000111:             Task.Factory.StartNew(() =>
//000112:             {
//000113:                 if (seconds > _max)
//000114:                 {
//000115:                     _max = seconds;
//000116:                     chart1.ChartAreas[0].AxisY.Maximum = _max * 1.1;
//000117:                 }
//000118:                 point.SetValueY(seconds);
//000119:                 point.ToolTip = seconds.ToString("F2");
//000120:                 point.Label = string.Format("{0:F2} secs  ({1:F2}x)", seconds, (_max / seconds));
//000121:                 chart1.Invalidate();
//000122:             }, CancellationToken.None, TaskCreationOptions.None, _uiScheduler);
//000123:         }
//000124: 
//000125:         static TimeSpan Time(Action action)
//000126:         {
//000127:             var sw = Stopwatch.StartNew();
//000128:             action();
//000129:             return sw.Elapsed;
//000130:         }
//000131:     }
//000132: }
    IL_0053:  ldloc.2
    IL_0054:  brtrue.s   IL_005b

//000070:                 if (!Int32.TryParse(cbMatrixSize.Text, out matrixSize)) return;
    IL_0056:  br         IL_00e5

//000071:                 progressBar1.Visible = true;
    IL_005b:  ldarg.0
    IL_005c:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ProgressBar Strassens.MainForm::progressBar1
    IL_0061:  ldc.i4.1
    IL_0062:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Visible(bool)
    IL_0067:  nop
//000072: 
//000073:                 ClearPointValues();
    IL_0068:  ldarg.0
    IL_0069:  call       instance void Strassens.MainForm::ClearPointValues()
    IL_006e:  nop
//000074:                 _max = 0;
    IL_006f:  ldarg.0
    IL_0070:  ldc.r8     0.0
    IL_0079:  stfld      float64 Strassens.MainForm::_max
//000075: 
//000076:                 _cancellation = new CancellationTokenSource();
    IL_007e:  ldarg.0
    IL_007f:  newobj     instance void [mscorlib]System.Threading.CancellationTokenSource::.ctor()
    IL_0084:  stfld      class [mscorlib]System.Threading.CancellationTokenSource Strassens.MainForm::_cancellation
//000077:                 var token = _cancellation.Token;
    IL_0089:  ldloc.0
    IL_008a:  ldarg.0
    IL_008b:  ldfld      class [mscorlib]System.Threading.CancellationTokenSource Strassens.MainForm::_cancellation
    IL_0090:  callvirt   instance valuetype [mscorlib]System.Threading.CancellationToken [mscorlib]System.Threading.CancellationTokenSource::get_Token()
    IL_0095:  stfld      valuetype [mscorlib]System.Threading.CancellationToken Strassens.MainForm/'<>c__DisplayClass7'::token
//000078:                 Task.Factory.StartNew(() =>
    IL_009a:  call       class [mscorlib]System.Threading.Tasks.TaskFactory [mscorlib]System.Threading.Tasks.Task::get_Factory()
    IL_009f:  ldloc.0
    IL_00a0:  ldftn      instance void Strassens.MainForm/'<>c__DisplayClass7'::'<btnCompute_Click>b__1'()
    IL_00a6:  newobj     instance void [mscorlib]System.Action::.ctor(object,
                                                                      native int)
    IL_00ab:  ldloc.0
    IL_00ac:  ldfld      valuetype [mscorlib]System.Threading.CancellationToken Strassens.MainForm/'<>c__DisplayClass7'::token
    IL_00b1:  callvirt   instance class [mscorlib]System.Threading.Tasks.Task [mscorlib]System.Threading.Tasks.TaskFactory::StartNew(class [mscorlib]System.Action,
                                                                                                                                     valuetype [mscorlib]System.Threading.CancellationToken)
    IL_00b6:  ldloc.1
    IL_00b7:  brtrue.s   IL_00c8

    IL_00b9:  ldarg.0
    IL_00ba:  ldftn      instance void Strassens.MainForm::'<btnCompute_Click>b__0'(class [mscorlib]System.Threading.Tasks.Task)
    IL_00c0:  newobj     instance void class [mscorlib]System.Action`1<class [mscorlib]System.Threading.Tasks.Task>::.ctor(object,
                                                                                                                           native int)
    IL_00c5:  stloc.1
    IL_00c6:  br.s       IL_00c8

    IL_00c8:  ldloc.1
    IL_00c9:  ldarg.0
    IL_00ca:  ldfld      class [mscorlib]System.Threading.Tasks.TaskScheduler Strassens.MainForm::_uiScheduler
    IL_00cf:  callvirt   instance class [mscorlib]System.Threading.Tasks.Task [mscorlib]System.Threading.Tasks.Task::ContinueWith(class [mscorlib]System.Action`1<class [mscorlib]System.Threading.Tasks.Task>,
                                                                                                                                  class [mscorlib]System.Threading.Tasks.TaskScheduler)
    IL_00d4:  pop
//000079:                 {
//000080:                     using (Matrix matA = new Matrix(matrixSize))
//000081:                     using (Matrix matB = new Matrix(matrixSize))
//000082:                     using (Matrix matC = new Matrix(matrixSize))
//000083:                     {
//000084:                         TimeSpan elapsed;
//000085: 
//000086:                         elapsed = Time(() => Matrix.Multiply(token, matA, matB, matC));
//000087:                         SetPoint(_naive, elapsed.TotalSeconds);
//000088: 
//000089:                         elapsed = Time(() => Matrix.MultiplyParallel(token, matA, matB, matC));
//000090:                         SetPoint(_naiveParallel, elapsed.TotalSeconds);
//000091: 
//000092:                         elapsed = Time(() => Matrix.MultiplyStrassens(token, matA, matB, matC));
//000093:                         SetPoint(_strassens, elapsed.TotalSeconds);
//000094: 
//000095:                         elapsed = Time(() => Matrix.MultiplyStrassensParallel(token, matA, matB, matC));
//000096:                         SetPoint(_strassensParallel, elapsed.TotalSeconds);
//000097:                     }
//000098:                 }, token).ContinueWith(t =>
//000099:                 {
//000100:                     _cancellation = null;
//000101:                     btnCompute.Text = "Compute";
//000102:                     progressBar1.Visible = false;
//000103:                     if (t.IsFaulted) MessageBox.Show(t.Exception.ToString());
//000104:                 }, _uiScheduler);
//000105:             }
    IL_00d5:  nop
//000106:             else _cancellation.Cancel();
//000107:         }
//000108: 
//000109:         private void SetPoint(DataPoint point, double seconds)
//000110:         {
//000111:             Task.Factory.StartNew(() =>
//000112:             {
//000113:                 if (seconds > _max)
//000114:                 {
//000115:                     _max = seconds;
//000116:                     chart1.ChartAreas[0].AxisY.Maximum = _max * 1.1;
//000117:                 }
//000118:                 point.SetValueY(seconds);
//000119:                 point.ToolTip = seconds.ToString("F2");
//000120:                 point.Label = string.Format("{0:F2} secs  ({1:F2}x)", seconds, (_max / seconds));
//000121:                 chart1.Invalidate();
//000122:             }, CancellationToken.None, TaskCreationOptions.None, _uiScheduler);
//000123:         }
//000124: 
//000125:         static TimeSpan Time(Action action)
//000126:         {
//000127:             var sw = Stopwatch.StartNew();
//000128:             action();
//000129:             return sw.Elapsed;
//000130:         }
//000131:     }
//000132: }
    IL_00d6:  br.s       IL_00e4

//000106:             else _cancellation.Cancel();
    IL_00d8:  ldarg.0
    IL_00d9:  ldfld      class [mscorlib]System.Threading.CancellationTokenSource Strassens.MainForm::_cancellation
    IL_00de:  callvirt   instance void [mscorlib]System.Threading.CancellationTokenSource::Cancel()
    IL_00e3:  nop
//000107:         }
    IL_00e4:  nop
    IL_00e5:  ret
  } // end of method MainForm::btnCompute_Click

  .method private hidebysig instance void 
          SetPoint(class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.DataPoint point,
                   float64 seconds) cil managed
  {
    // Code size       65 (0x41)
    .maxstack  5
    .locals init ([0] class Strassens.MainForm/'<>c__DisplayClass14' 'CS$<>8__locals15')
//000108: 
//000109:         private void SetPoint(DataPoint point, double seconds)
//000110:         {
//000111:             Task.Factory.StartNew(() =>
//000112:             {
//000113:                 if (seconds > _max)
//000114:                 {
//000115:                     _max = seconds;
//000116:                     chart1.ChartAreas[0].AxisY.Maximum = _max * 1.1;
//000117:                 }
//000118:                 point.SetValueY(seconds);
//000119:                 point.ToolTip = seconds.ToString("F2");
//000120:                 point.Label = string.Format("{0:F2} secs  ({1:F2}x)", seconds, (_max / seconds));
//000121:                 chart1.Invalidate();
//000122:             }, CancellationToken.None, TaskCreationOptions.None, _uiScheduler);
//000123:         }
//000124: 
//000125:         static TimeSpan Time(Action action)
//000126:         {
//000127:             var sw = Stopwatch.StartNew();
//000128:             action();
//000129:             return sw.Elapsed;
//000130:         }
//000131:     }
//000132: }
    IL_0000:  newobj     instance void Strassens.MainForm/'<>c__DisplayClass14'::.ctor()
    IL_0005:  stloc.0
    IL_0006:  ldloc.0
    IL_0007:  ldarg.1
    IL_0008:  stfld      class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.DataPoint Strassens.MainForm/'<>c__DisplayClass14'::point
    IL_000d:  ldloc.0
    IL_000e:  ldarg.2
    IL_000f:  stfld      float64 Strassens.MainForm/'<>c__DisplayClass14'::seconds
    IL_0014:  ldloc.0
    IL_0015:  ldarg.0
    IL_0016:  stfld      class Strassens.MainForm Strassens.MainForm/'<>c__DisplayClass14'::'<>4__this'
//000110:         {
    IL_001b:  nop
//000111:             Task.Factory.StartNew(() =>
    IL_001c:  call       class [mscorlib]System.Threading.Tasks.TaskFactory [mscorlib]System.Threading.Tasks.Task::get_Factory()
    IL_0021:  ldloc.0
    IL_0022:  ldftn      instance void Strassens.MainForm/'<>c__DisplayClass14'::'<SetPoint>b__13'()
    IL_0028:  newobj     instance void [mscorlib]System.Action::.ctor(object,
                                                                      native int)
    IL_002d:  call       valuetype [mscorlib]System.Threading.CancellationToken [mscorlib]System.Threading.CancellationToken::get_None()
    IL_0032:  ldc.i4.0
    IL_0033:  ldarg.0
    IL_0034:  ldfld      class [mscorlib]System.Threading.Tasks.TaskScheduler Strassens.MainForm::_uiScheduler
    IL_0039:  callvirt   instance class [mscorlib]System.Threading.Tasks.Task [mscorlib]System.Threading.Tasks.TaskFactory::StartNew(class [mscorlib]System.Action,
                                                                                                                                     valuetype [mscorlib]System.Threading.CancellationToken,
                                                                                                                                     valuetype [mscorlib]System.Threading.Tasks.TaskCreationOptions,
                                                                                                                                     class [mscorlib]System.Threading.Tasks.TaskScheduler)
    IL_003e:  pop
//000112:             {
//000113:                 if (seconds > _max)
//000114:                 {
//000115:                     _max = seconds;
//000116:                     chart1.ChartAreas[0].AxisY.Maximum = _max * 1.1;
//000117:                 }
//000118:                 point.SetValueY(seconds);
//000119:                 point.ToolTip = seconds.ToString("F2");
//000120:                 point.Label = string.Format("{0:F2} secs  ({1:F2}x)", seconds, (_max / seconds));
//000121:                 chart1.Invalidate();
//000122:             }, CancellationToken.None, TaskCreationOptions.None, _uiScheduler);
//000123:         }
    IL_003f:  nop
    IL_0040:  ret
  } // end of method MainForm::SetPoint

  .method private hidebysig static valuetype [mscorlib]System.TimeSpan 
          Time(class [mscorlib]System.Action action) cil managed
  {
    // Code size       25 (0x19)
    .maxstack  1
    .locals init ([0] class [System]System.Diagnostics.Stopwatch sw,
             [1] valuetype [mscorlib]System.TimeSpan CS$1$0000)
//000124: 
//000125:         static TimeSpan Time(Action action)
//000126:         {
    IL_0000:  nop
//000127:             var sw = Stopwatch.StartNew();
    IL_0001:  call       class [System]System.Diagnostics.Stopwatch [System]System.Diagnostics.Stopwatch::StartNew()
    IL_0006:  stloc.0
//000128:             action();
    IL_0007:  ldarg.0
    IL_0008:  callvirt   instance void [mscorlib]System.Action::Invoke()
    IL_000d:  nop
//000129:             return sw.Elapsed;
    IL_000e:  ldloc.0
    IL_000f:  callvirt   instance valuetype [mscorlib]System.TimeSpan [System]System.Diagnostics.Stopwatch::get_Elapsed()
    IL_0014:  stloc.1
    IL_0015:  br.s       IL_0017

//000130:         }
    IL_0017:  ldloc.1
    IL_0018:  ret
  } // end of method MainForm::Time

  .method family hidebysig virtual instance void 
          Dispose(bool disposing) cil managed
  {
    // Code size       43 (0x2b)
    .maxstack  2
    .locals init ([0] bool CS$4$0000)
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Strassens\Strassens_CSharp\MainForm.Designer.cs' 
//000015:         {
    IL_0000:  nop
//000016:             if (disposing && (components != null))
    IL_0001:  ldarg.1
    IL_0002:  brfalse.s  IL_000f

    IL_0004:  ldarg.0
    IL_0005:  ldfld      class [System]System.ComponentModel.IContainer Strassens.MainForm::components
    IL_000a:  ldnull
    IL_000b:  ceq
    IL_000d:  br.s       IL_0010

    IL_000f:  ldc.i4.1
    IL_0010:  stloc.0
//000017:             {
//000018:                 components.Dispose();
//000019:             }
//000020:             base.Dispose(disposing);
//000021:         }
//000022: 
//000023:         #region Windows Form Designer generated code
//000024: 
//000025:         /// <summary>
//000026:         /// Required method for Designer support - do not modify
//000027:         /// the contents of this method with the code editor.
//000028:         /// </summary>
//000029:         private void InitializeComponent()
//000030:         {
//000031:             System.Windows.Forms.DataVisualization.Charting.ChartArea chartArea2 = new System.Windows.Forms.DataVisualization.Charting.ChartArea();
//000032:             System.Windows.Forms.DataVisualization.Charting.Series series2 = new System.Windows.Forms.DataVisualization.Charting.Series();
//000033:             this.chart1 = new System.Windows.Forms.DataVisualization.Charting.Chart();
//000034:             this.cbMatrixSize = new System.Windows.Forms.ComboBox();
//000035:             this.btnCompute = new System.Windows.Forms.Button();
//000036:             this.progressBar1 = new System.Windows.Forms.ProgressBar();
//000037:             ((System.ComponentModel.ISupportInitialize)(this.chart1)).BeginInit();
//000038:             this.SuspendLayout();
//000039:             // 
//000040:             // chart1
//000041:             // 
//000042:             this.chart1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
//000043:                         | System.Windows.Forms.AnchorStyles.Left)
//000044:                         | System.Windows.Forms.AnchorStyles.Right)));
//000045:             this.chart1.BackColor = System.Drawing.Color.WhiteSmoke;
//000046:             this.chart1.BackGradientStyle = System.Windows.Forms.DataVisualization.Charting.GradientStyle.HorizontalCenter;
//000047:             chartArea2.AxisX.IsLabelAutoFit = false;
//000048:             chartArea2.AxisX.LabelStyle.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F);
//000049:             chartArea2.AxisY.IsLabelAutoFit = false;
//000050:             chartArea2.AxisY.LabelStyle.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F);
//000051:             chartArea2.AxisY.LabelStyle.Format = "F2";
//000052:             chartArea2.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(255)))), ((int)(((byte)(255)))), ((int)(((byte)(192)))));
//000053:             chartArea2.BackGradientStyle = System.Windows.Forms.DataVisualization.Charting.GradientStyle.DiagonalLeft;
//000054:             chartArea2.BackSecondaryColor = System.Drawing.Color.FromArgb(((int)(((byte)(255)))), ((int)(((byte)(224)))), ((int)(((byte)(192)))));
//000055:             chartArea2.Name = "ChartArea1";
//000056:             this.chart1.ChartAreas.Add(chartArea2);
//000057:             this.chart1.Location = new System.Drawing.Point(18, 65);
//000058:             this.chart1.Margin = new System.Windows.Forms.Padding(4, 5, 4, 5);
//000059:             this.chart1.Name = "chart1";
//000060:             this.chart1.Palette = System.Windows.Forms.DataVisualization.Charting.ChartColorPalette.None;
//000061:             series2.BackSecondaryColor = System.Drawing.Color.MintCream;
//000062:             series2.ChartArea = "ChartArea1";
//000063:             series2.CustomProperties = "DrawingStyle=Cylinder, LabelStyle=Top";
//000064:             series2.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F);
//000065:             series2.Name = "chartSeries1";
//000066:             series2.XValueType = System.Windows.Forms.DataVisualization.Charting.ChartValueType.String;
//000067:             series2.YValueType = System.Windows.Forms.DataVisualization.Charting.ChartValueType.Double;
//000068:             this.chart1.Series.Add(series2);
//000069:             this.chart1.Size = new System.Drawing.Size(844, 517);
//000070:             this.chart1.TabIndex = 0;
//000071:             this.chart1.TextAntiAliasingQuality = System.Windows.Forms.DataVisualization.Charting.TextAntiAliasingQuality.SystemDefault;
//000072:             // 
//000073:             // cbMatrixSize
//000074:             // 
//000075:             this.cbMatrixSize.AutoCompleteMode = System.Windows.Forms.AutoCompleteMode.SuggestAppend;
//000076:             this.cbMatrixSize.AutoCompleteSource = System.Windows.Forms.AutoCompleteSource.ListItems;
//000077:             this.cbMatrixSize.FormattingEnabled = true;
//000078:             this.cbMatrixSize.Items.AddRange(new object[] {
//000079:             "16",
//000080:             "32",
//000081:             "64",
//000082:             "128",
//000083:             "256",
//000084:             "512",
//000085:             "1024",
//000086:             "2048",
//000087:             "4096",
//000088:             "8192"});
//000089:             this.cbMatrixSize.Location = new System.Drawing.Point(20, 20);
//000090:             this.cbMatrixSize.Margin = new System.Windows.Forms.Padding(4, 5, 4, 5);
//000091:             this.cbMatrixSize.Name = "cbMatrixSize";
//000092:             this.cbMatrixSize.Size = new System.Drawing.Size(121, 28);
//000093:             this.cbMatrixSize.TabIndex = 1;
//000094:             this.cbMatrixSize.Text = "512";
//000095:             // 
//000096:             // btnCompute
//000097:             // 
//000098:             this.btnCompute.Location = new System.Drawing.Point(152, 20);
//000099:             this.btnCompute.Margin = new System.Windows.Forms.Padding(4, 5, 4, 5);
//000100:             this.btnCompute.Name = "btnCompute";
//000101:             this.btnCompute.Size = new System.Drawing.Size(112, 35);
//000102:             this.btnCompute.TabIndex = 2;
//000103:             this.btnCompute.Text = "Compute";
//000104:             this.btnCompute.UseVisualStyleBackColor = true;
//000105:             this.btnCompute.Click += new System.EventHandler(this.btnCompute_Click);
//000106:             // 
//000107:             // progressBar1
//000108:             // 
//000109:             this.progressBar1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
//000110:                         | System.Windows.Forms.AnchorStyles.Right)));
//000111:             this.progressBar1.Location = new System.Drawing.Point(274, 20);
//000112:             this.progressBar1.Margin = new System.Windows.Forms.Padding(4, 5, 4, 5);
//000113:             this.progressBar1.Name = "progressBar1";
//000114:             this.progressBar1.Size = new System.Drawing.Size(588, 35);
//000115:             this.progressBar1.Style = System.Windows.Forms.ProgressBarStyle.Marquee;
//000116:             this.progressBar1.TabIndex = 3;
//000117:             this.progressBar1.Visible = false;
//000118:             // 
//000119:             // MainForm
//000120:             // 
//000121:             this.AutoScaleDimensions = new System.Drawing.SizeF(9F, 20F);
//000122:             this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
//000123:             this.ClientSize = new System.Drawing.Size(880, 600);
//000124:             this.Controls.Add(this.progressBar1);
//000125:             this.Controls.Add(this.btnCompute);
//000126:             this.Controls.Add(this.cbMatrixSize);
//000127:             this.Controls.Add(this.chart1);
//000128:             this.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
//000129:             this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.SizableToolWindow;
//000130:             this.Margin = new System.Windows.Forms.Padding(4, 5, 4, 5);
//000131:             this.Name = "MainForm";
//000132:             this.Text = "Matrix Multiplication";
//000133:             this.Load += new System.EventHandler(this.MainForm_Load);
//000134:             ((System.ComponentModel.ISupportInitialize)(this.chart1)).EndInit();
//000135:             this.ResumeLayout(false);
//000136: 
//000137:         }
//000138: 
//000139:         #endregion
//000140: 
//000141:         private System.Windows.Forms.DataVisualization.Charting.Chart chart1;
//000142:         private System.Windows.Forms.ComboBox cbMatrixSize;
//000143:         private System.Windows.Forms.Button btnCompute;
//000144:         private System.Windows.Forms.ProgressBar progressBar1;
//000145:     }
//000146: }
//000147: 
    IL_0011:  ldloc.0
    IL_0012:  brtrue.s   IL_0022

//000017:             {
    IL_0014:  nop
//000018:                 components.Dispose();
    IL_0015:  ldarg.0
    IL_0016:  ldfld      class [System]System.ComponentModel.IContainer Strassens.MainForm::components
    IL_001b:  callvirt   instance void [mscorlib]System.IDisposable::Dispose()
    IL_0020:  nop
//000019:             }
    IL_0021:  nop
//000020:             base.Dispose(disposing);
    IL_0022:  ldarg.0
    IL_0023:  ldarg.1
    IL_0024:  call       instance void [System.Windows.Forms]System.Windows.Forms.Form::Dispose(bool)
    IL_0029:  nop
//000021:         }
    IL_002a:  ret
  } // end of method MainForm::Dispose

  .method private hidebysig instance void 
          InitializeComponent() cil managed
  {
    // Code size       1339 (0x53b)
    .maxstack  7
    .locals init ([0] class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.ChartArea chartArea2,
             [1] class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Series series2,
             [2] object[] CS$0$0000)
//000022: 
//000023:         #region Windows Form Designer generated code
//000024: 
//000025:         /// <summary>
//000026:         /// Required method for Designer support - do not modify
//000027:         /// the contents of this method with the code editor.
//000028:         /// </summary>
//000029:         private void InitializeComponent()
//000030:         {
    IL_0000:  nop
//000031:             System.Windows.Forms.DataVisualization.Charting.ChartArea chartArea2 = new System.Windows.Forms.DataVisualization.Charting.ChartArea();
    IL_0001:  newobj     instance void [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.ChartArea::.ctor()
    IL_0006:  stloc.0
//000032:             System.Windows.Forms.DataVisualization.Charting.Series series2 = new System.Windows.Forms.DataVisualization.Charting.Series();
    IL_0007:  newobj     instance void [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Series::.ctor()
    IL_000c:  stloc.1
//000033:             this.chart1 = new System.Windows.Forms.DataVisualization.Charting.Chart();
    IL_000d:  ldarg.0
    IL_000e:  newobj     instance void [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Chart::.ctor()
    IL_0013:  stfld      class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Chart Strassens.MainForm::chart1
//000034:             this.cbMatrixSize = new System.Windows.Forms.ComboBox();
    IL_0018:  ldarg.0
    IL_0019:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.ComboBox::.ctor()
    IL_001e:  stfld      class [System.Windows.Forms]System.Windows.Forms.ComboBox Strassens.MainForm::cbMatrixSize
//000035:             this.btnCompute = new System.Windows.Forms.Button();
    IL_0023:  ldarg.0
    IL_0024:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.Button::.ctor()
    IL_0029:  stfld      class [System.Windows.Forms]System.Windows.Forms.Button Strassens.MainForm::btnCompute
//000036:             this.progressBar1 = new System.Windows.Forms.ProgressBar();
    IL_002e:  ldarg.0
    IL_002f:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.ProgressBar::.ctor()
    IL_0034:  stfld      class [System.Windows.Forms]System.Windows.Forms.ProgressBar Strassens.MainForm::progressBar1
//000037:             ((System.ComponentModel.ISupportInitialize)(this.chart1)).BeginInit();
    IL_0039:  ldarg.0
    IL_003a:  ldfld      class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Chart Strassens.MainForm::chart1
    IL_003f:  callvirt   instance void [System]System.ComponentModel.ISupportInitialize::BeginInit()
    IL_0044:  nop
//000038:             this.SuspendLayout();
    IL_0045:  ldarg.0
    IL_0046:  call       instance void [System.Windows.Forms]System.Windows.Forms.Control::SuspendLayout()
    IL_004b:  nop
//000039:             // 
//000040:             // chart1
//000041:             // 
//000042:             this.chart1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
    IL_004c:  ldarg.0
    IL_004d:  ldfld      class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Chart Strassens.MainForm::chart1
    IL_0052:  ldc.i4.s   15
    IL_0054:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Anchor(valuetype [System.Windows.Forms]System.Windows.Forms.AnchorStyles)
    IL_0059:  nop
//000043:                         | System.Windows.Forms.AnchorStyles.Left)
//000044:                         | System.Windows.Forms.AnchorStyles.Right)));
//000045:             this.chart1.BackColor = System.Drawing.Color.WhiteSmoke;
    IL_005a:  ldarg.0
    IL_005b:  ldfld      class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Chart Strassens.MainForm::chart1
    IL_0060:  call       valuetype [System.Drawing]System.Drawing.Color [System.Drawing]System.Drawing.Color::get_WhiteSmoke()
    IL_0065:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_BackColor(valuetype [System.Drawing]System.Drawing.Color)
    IL_006a:  nop
//000046:             this.chart1.BackGradientStyle = System.Windows.Forms.DataVisualization.Charting.GradientStyle.HorizontalCenter;
    IL_006b:  ldarg.0
    IL_006c:  ldfld      class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Chart Strassens.MainForm::chart1
    IL_0071:  ldc.i4.6
    IL_0072:  callvirt   instance void [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Chart::set_BackGradientStyle(valuetype [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.GradientStyle)
    IL_0077:  nop
//000047:             chartArea2.AxisX.IsLabelAutoFit = false;
    IL_0078:  ldloc.0
    IL_0079:  callvirt   instance class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Axis [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.ChartArea::get_AxisX()
    IL_007e:  ldc.i4.0
    IL_007f:  callvirt   instance void [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Axis::set_IsLabelAutoFit(bool)
    IL_0084:  nop
//000048:             chartArea2.AxisX.LabelStyle.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F);
    IL_0085:  ldloc.0
    IL_0086:  callvirt   instance class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Axis [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.ChartArea::get_AxisX()
    IL_008b:  callvirt   instance class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.LabelStyle [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Axis::get_LabelStyle()
    IL_0090:  ldstr      "Microsoft Sans Serif"
    IL_0095:  ldc.r4     12.
    IL_009a:  newobj     instance void [System.Drawing]System.Drawing.Font::.ctor(string,
                                                                                  float32)
    IL_009f:  callvirt   instance void [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.LabelStyle::set_Font(class [System.Drawing]System.Drawing.Font)
    IL_00a4:  nop
//000049:             chartArea2.AxisY.IsLabelAutoFit = false;
    IL_00a5:  ldloc.0
    IL_00a6:  callvirt   instance class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Axis [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.ChartArea::get_AxisY()
    IL_00ab:  ldc.i4.0
    IL_00ac:  callvirt   instance void [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Axis::set_IsLabelAutoFit(bool)
    IL_00b1:  nop
//000050:             chartArea2.AxisY.LabelStyle.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F);
    IL_00b2:  ldloc.0
    IL_00b3:  callvirt   instance class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Axis [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.ChartArea::get_AxisY()
    IL_00b8:  callvirt   instance class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.LabelStyle [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Axis::get_LabelStyle()
    IL_00bd:  ldstr      "Microsoft Sans Serif"
    IL_00c2:  ldc.r4     12.
    IL_00c7:  newobj     instance void [System.Drawing]System.Drawing.Font::.ctor(string,
                                                                                  float32)
    IL_00cc:  callvirt   instance void [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.LabelStyle::set_Font(class [System.Drawing]System.Drawing.Font)
    IL_00d1:  nop
//000051:             chartArea2.AxisY.LabelStyle.Format = "F2";
    IL_00d2:  ldloc.0
    IL_00d3:  callvirt   instance class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Axis [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.ChartArea::get_AxisY()
    IL_00d8:  callvirt   instance class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.LabelStyle [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Axis::get_LabelStyle()
    IL_00dd:  ldstr      "F2"
    IL_00e2:  callvirt   instance void [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.LabelStyle::set_Format(string)
    IL_00e7:  nop
//000052:             chartArea2.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(255)))), ((int)(((byte)(255)))), ((int)(((byte)(192)))));
    IL_00e8:  ldloc.0
    IL_00e9:  ldc.i4     0xff
    IL_00ee:  ldc.i4     0xff
    IL_00f3:  ldc.i4     0xc0
    IL_00f8:  call       valuetype [System.Drawing]System.Drawing.Color [System.Drawing]System.Drawing.Color::FromArgb(int32,
                                                                                                                       int32,
                                                                                                                       int32)
    IL_00fd:  callvirt   instance void [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.ChartArea::set_BackColor(valuetype [System.Drawing]System.Drawing.Color)
    IL_0102:  nop
//000053:             chartArea2.BackGradientStyle = System.Windows.Forms.DataVisualization.Charting.GradientStyle.DiagonalLeft;
    IL_0103:  ldloc.0
    IL_0104:  ldc.i4.4
    IL_0105:  callvirt   instance void [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.ChartArea::set_BackGradientStyle(valuetype [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.GradientStyle)
    IL_010a:  nop
//000054:             chartArea2.BackSecondaryColor = System.Drawing.Color.FromArgb(((int)(((byte)(255)))), ((int)(((byte)(224)))), ((int)(((byte)(192)))));
    IL_010b:  ldloc.0
    IL_010c:  ldc.i4     0xff
    IL_0111:  ldc.i4     0xe0
    IL_0116:  ldc.i4     0xc0
    IL_011b:  call       valuetype [System.Drawing]System.Drawing.Color [System.Drawing]System.Drawing.Color::FromArgb(int32,
                                                                                                                       int32,
                                                                                                                       int32)
    IL_0120:  callvirt   instance void [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.ChartArea::set_BackSecondaryColor(valuetype [System.Drawing]System.Drawing.Color)
    IL_0125:  nop
//000055:             chartArea2.Name = "ChartArea1";
    IL_0126:  ldloc.0
    IL_0127:  ldstr      "ChartArea1"
    IL_012c:  callvirt   instance void [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.ChartNamedElement::set_Name(string)
    IL_0131:  nop
//000056:             this.chart1.ChartAreas.Add(chartArea2);
    IL_0132:  ldarg.0
    IL_0133:  ldfld      class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Chart Strassens.MainForm::chart1
    IL_0138:  callvirt   instance class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.ChartAreaCollection [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Chart::get_ChartAreas()
    IL_013d:  ldloc.0
    IL_013e:  callvirt   instance void class [mscorlib]System.Collections.ObjectModel.Collection`1<class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.ChartArea>::Add(!0)
    IL_0143:  nop
//000057:             this.chart1.Location = new System.Drawing.Point(18, 65);
    IL_0144:  ldarg.0
    IL_0145:  ldfld      class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Chart Strassens.MainForm::chart1
    IL_014a:  ldc.i4.s   18
    IL_014c:  ldc.i4.s   65
    IL_014e:  newobj     instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_0153:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_0158:  nop
//000058:             this.chart1.Margin = new System.Windows.Forms.Padding(4, 5, 4, 5);
    IL_0159:  ldarg.0
    IL_015a:  ldfld      class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Chart Strassens.MainForm::chart1
    IL_015f:  ldc.i4.4
    IL_0160:  ldc.i4.5
    IL_0161:  ldc.i4.4
    IL_0162:  ldc.i4.5
    IL_0163:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.Padding::.ctor(int32,
                                                                                                 int32,
                                                                                                 int32,
                                                                                                 int32)
    IL_0168:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Margin(valuetype [System.Windows.Forms]System.Windows.Forms.Padding)
    IL_016d:  nop
//000059:             this.chart1.Name = "chart1";
    IL_016e:  ldarg.0
    IL_016f:  ldfld      class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Chart Strassens.MainForm::chart1
    IL_0174:  ldstr      "chart1"
    IL_0179:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_017e:  nop
//000060:             this.chart1.Palette = System.Windows.Forms.DataVisualization.Charting.ChartColorPalette.None;
    IL_017f:  ldarg.0
    IL_0180:  ldfld      class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Chart Strassens.MainForm::chart1
    IL_0185:  ldc.i4.0
    IL_0186:  callvirt   instance void [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Chart::set_Palette(valuetype [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.ChartColorPalette)
    IL_018b:  nop
//000061:             series2.BackSecondaryColor = System.Drawing.Color.MintCream;
    IL_018c:  ldloc.1
    IL_018d:  call       valuetype [System.Drawing]System.Drawing.Color [System.Drawing]System.Drawing.Color::get_MintCream()
    IL_0192:  callvirt   instance void [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties::set_BackSecondaryColor(valuetype [System.Drawing]System.Drawing.Color)
    IL_0197:  nop
//000062:             series2.ChartArea = "ChartArea1";
    IL_0198:  ldloc.1
    IL_0199:  ldstr      "ChartArea1"
    IL_019e:  callvirt   instance void [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Series::set_ChartArea(string)
    IL_01a3:  nop
//000063:             series2.CustomProperties = "DrawingStyle=Cylinder, LabelStyle=Top";
    IL_01a4:  ldloc.1
    IL_01a5:  ldstr      "DrawingStyle=Cylinder, LabelStyle=Top"
    IL_01aa:  callvirt   instance void [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties::set_CustomProperties(string)
    IL_01af:  nop
//000064:             series2.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F);
    IL_01b0:  ldloc.1
    IL_01b1:  ldstr      "Microsoft Sans Serif"
    IL_01b6:  ldc.r4     12.
    IL_01bb:  newobj     instance void [System.Drawing]System.Drawing.Font::.ctor(string,
                                                                                  float32)
    IL_01c0:  callvirt   instance void [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties::set_Font(class [System.Drawing]System.Drawing.Font)
    IL_01c5:  nop
//000065:             series2.Name = "chartSeries1";
    IL_01c6:  ldloc.1
    IL_01c7:  ldstr      "chartSeries1"
    IL_01cc:  callvirt   instance void [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.ChartNamedElement::set_Name(string)
    IL_01d1:  nop
//000066:             series2.XValueType = System.Windows.Forms.DataVisualization.Charting.ChartValueType.String;
    IL_01d2:  ldloc.1
    IL_01d3:  ldc.i4.7
    IL_01d4:  callvirt   instance void [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Series::set_XValueType(valuetype [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.ChartValueType)
    IL_01d9:  nop
//000067:             series2.YValueType = System.Windows.Forms.DataVisualization.Charting.ChartValueType.Double;
    IL_01da:  ldloc.1
    IL_01db:  ldc.i4.1
    IL_01dc:  callvirt   instance void [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Series::set_YValueType(valuetype [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.ChartValueType)
    IL_01e1:  nop
//000068:             this.chart1.Series.Add(series2);
    IL_01e2:  ldarg.0
    IL_01e3:  ldfld      class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Chart Strassens.MainForm::chart1
    IL_01e8:  callvirt   instance class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.SeriesCollection [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Chart::get_Series()
    IL_01ed:  ldloc.1
    IL_01ee:  callvirt   instance void class [mscorlib]System.Collections.ObjectModel.Collection`1<class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Series>::Add(!0)
    IL_01f3:  nop
//000069:             this.chart1.Size = new System.Drawing.Size(844, 517);
    IL_01f4:  ldarg.0
    IL_01f5:  ldfld      class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Chart Strassens.MainForm::chart1
    IL_01fa:  ldc.i4     0x34c
    IL_01ff:  ldc.i4     0x205
    IL_0204:  newobj     instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_0209:  callvirt   instance void [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Chart::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_020e:  nop
//000070:             this.chart1.TabIndex = 0;
    IL_020f:  ldarg.0
    IL_0210:  ldfld      class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Chart Strassens.MainForm::chart1
    IL_0215:  ldc.i4.0
    IL_0216:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_TabIndex(int32)
    IL_021b:  nop
//000071:             this.chart1.TextAntiAliasingQuality = System.Windows.Forms.DataVisualization.Charting.TextAntiAliasingQuality.SystemDefault;
    IL_021c:  ldarg.0
    IL_021d:  ldfld      class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Chart Strassens.MainForm::chart1
    IL_0222:  ldc.i4.2
    IL_0223:  callvirt   instance void [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Chart::set_TextAntiAliasingQuality(valuetype [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.TextAntiAliasingQuality)
    IL_0228:  nop
//000072:             // 
//000073:             // cbMatrixSize
//000074:             // 
//000075:             this.cbMatrixSize.AutoCompleteMode = System.Windows.Forms.AutoCompleteMode.SuggestAppend;
    IL_0229:  ldarg.0
    IL_022a:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ComboBox Strassens.MainForm::cbMatrixSize
    IL_022f:  ldc.i4.3
    IL_0230:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ComboBox::set_AutoCompleteMode(valuetype [System.Windows.Forms]System.Windows.Forms.AutoCompleteMode)
    IL_0235:  nop
//000076:             this.cbMatrixSize.AutoCompleteSource = System.Windows.Forms.AutoCompleteSource.ListItems;
    IL_0236:  ldarg.0
    IL_0237:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ComboBox Strassens.MainForm::cbMatrixSize
    IL_023c:  ldc.i4     0x100
    IL_0241:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ComboBox::set_AutoCompleteSource(valuetype [System.Windows.Forms]System.Windows.Forms.AutoCompleteSource)
    IL_0246:  nop
//000077:             this.cbMatrixSize.FormattingEnabled = true;
    IL_0247:  ldarg.0
    IL_0248:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ComboBox Strassens.MainForm::cbMatrixSize
    IL_024d:  ldc.i4.1
    IL_024e:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ListControl::set_FormattingEnabled(bool)
    IL_0253:  nop
//000078:             this.cbMatrixSize.Items.AddRange(new object[] {
    IL_0254:  ldarg.0
    IL_0255:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ComboBox Strassens.MainForm::cbMatrixSize
    IL_025a:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.ComboBox/ObjectCollection [System.Windows.Forms]System.Windows.Forms.ComboBox::get_Items()
    IL_025f:  ldc.i4.s   10
    IL_0261:  newarr     [mscorlib]System.Object
    IL_0266:  stloc.2
    IL_0267:  ldloc.2
    IL_0268:  ldc.i4.0
    IL_0269:  ldstr      "16"
    IL_026e:  stelem.ref
    IL_026f:  ldloc.2
    IL_0270:  ldc.i4.1
    IL_0271:  ldstr      "32"
    IL_0276:  stelem.ref
    IL_0277:  ldloc.2
    IL_0278:  ldc.i4.2
    IL_0279:  ldstr      "64"
    IL_027e:  stelem.ref
    IL_027f:  ldloc.2
    IL_0280:  ldc.i4.3
    IL_0281:  ldstr      "128"
    IL_0286:  stelem.ref
    IL_0287:  ldloc.2
    IL_0288:  ldc.i4.4
    IL_0289:  ldstr      "256"
    IL_028e:  stelem.ref
    IL_028f:  ldloc.2
    IL_0290:  ldc.i4.5
    IL_0291:  ldstr      "512"
    IL_0296:  stelem.ref
    IL_0297:  ldloc.2
    IL_0298:  ldc.i4.6
    IL_0299:  ldstr      "1024"
    IL_029e:  stelem.ref
    IL_029f:  ldloc.2
    IL_02a0:  ldc.i4.7
    IL_02a1:  ldstr      "2048"
    IL_02a6:  stelem.ref
    IL_02a7:  ldloc.2
    IL_02a8:  ldc.i4.8
    IL_02a9:  ldstr      "4096"
    IL_02ae:  stelem.ref
    IL_02af:  ldloc.2
    IL_02b0:  ldc.i4.s   9
    IL_02b2:  ldstr      "8192"
    IL_02b7:  stelem.ref
    IL_02b8:  ldloc.2
    IL_02b9:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ComboBox/ObjectCollection::AddRange(object[])
    IL_02be:  nop
//000079:             "16",
//000080:             "32",
//000081:             "64",
//000082:             "128",
//000083:             "256",
//000084:             "512",
//000085:             "1024",
//000086:             "2048",
//000087:             "4096",
//000088:             "8192"});
//000089:             this.cbMatrixSize.Location = new System.Drawing.Point(20, 20);
    IL_02bf:  ldarg.0
    IL_02c0:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ComboBox Strassens.MainForm::cbMatrixSize
    IL_02c5:  ldc.i4.s   20
    IL_02c7:  ldc.i4.s   20
    IL_02c9:  newobj     instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_02ce:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_02d3:  nop
//000090:             this.cbMatrixSize.Margin = new System.Windows.Forms.Padding(4, 5, 4, 5);
    IL_02d4:  ldarg.0
    IL_02d5:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ComboBox Strassens.MainForm::cbMatrixSize
    IL_02da:  ldc.i4.4
    IL_02db:  ldc.i4.5
    IL_02dc:  ldc.i4.4
    IL_02dd:  ldc.i4.5
    IL_02de:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.Padding::.ctor(int32,
                                                                                                 int32,
                                                                                                 int32,
                                                                                                 int32)
    IL_02e3:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Margin(valuetype [System.Windows.Forms]System.Windows.Forms.Padding)
    IL_02e8:  nop
//000091:             this.cbMatrixSize.Name = "cbMatrixSize";
    IL_02e9:  ldarg.0
    IL_02ea:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ComboBox Strassens.MainForm::cbMatrixSize
    IL_02ef:  ldstr      "cbMatrixSize"
    IL_02f4:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_02f9:  nop
//000092:             this.cbMatrixSize.Size = new System.Drawing.Size(121, 28);
    IL_02fa:  ldarg.0
    IL_02fb:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ComboBox Strassens.MainForm::cbMatrixSize
    IL_0300:  ldc.i4.s   121
    IL_0302:  ldc.i4.s   28
    IL_0304:  newobj     instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_0309:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_030e:  nop
//000093:             this.cbMatrixSize.TabIndex = 1;
    IL_030f:  ldarg.0
    IL_0310:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ComboBox Strassens.MainForm::cbMatrixSize
    IL_0315:  ldc.i4.1
    IL_0316:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_TabIndex(int32)
    IL_031b:  nop
//000094:             this.cbMatrixSize.Text = "512";
    IL_031c:  ldarg.0
    IL_031d:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ComboBox Strassens.MainForm::cbMatrixSize
    IL_0322:  ldstr      "512"
    IL_0327:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Text(string)
    IL_032c:  nop
//000095:             // 
//000096:             // btnCompute
//000097:             // 
//000098:             this.btnCompute.Location = new System.Drawing.Point(152, 20);
    IL_032d:  ldarg.0
    IL_032e:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Button Strassens.MainForm::btnCompute
    IL_0333:  ldc.i4     0x98
    IL_0338:  ldc.i4.s   20
    IL_033a:  newobj     instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_033f:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_0344:  nop
//000099:             this.btnCompute.Margin = new System.Windows.Forms.Padding(4, 5, 4, 5);
    IL_0345:  ldarg.0
    IL_0346:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Button Strassens.MainForm::btnCompute
    IL_034b:  ldc.i4.4
    IL_034c:  ldc.i4.5
    IL_034d:  ldc.i4.4
    IL_034e:  ldc.i4.5
    IL_034f:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.Padding::.ctor(int32,
                                                                                                 int32,
                                                                                                 int32,
                                                                                                 int32)
    IL_0354:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Margin(valuetype [System.Windows.Forms]System.Windows.Forms.Padding)
    IL_0359:  nop
//000100:             this.btnCompute.Name = "btnCompute";
    IL_035a:  ldarg.0
    IL_035b:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Button Strassens.MainForm::btnCompute
    IL_0360:  ldstr      "btnCompute"
    IL_0365:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_036a:  nop
//000101:             this.btnCompute.Size = new System.Drawing.Size(112, 35);
    IL_036b:  ldarg.0
    IL_036c:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Button Strassens.MainForm::btnCompute
    IL_0371:  ldc.i4.s   112
    IL_0373:  ldc.i4.s   35
    IL_0375:  newobj     instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_037a:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_037f:  nop
//000102:             this.btnCompute.TabIndex = 2;
    IL_0380:  ldarg.0
    IL_0381:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Button Strassens.MainForm::btnCompute
    IL_0386:  ldc.i4.2
    IL_0387:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_TabIndex(int32)
    IL_038c:  nop
//000103:             this.btnCompute.Text = "Compute";
    IL_038d:  ldarg.0
    IL_038e:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Button Strassens.MainForm::btnCompute
    IL_0393:  ldstr      "Compute"
    IL_0398:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Text(string)
    IL_039d:  nop
//000104:             this.btnCompute.UseVisualStyleBackColor = true;
    IL_039e:  ldarg.0
    IL_039f:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Button Strassens.MainForm::btnCompute
    IL_03a4:  ldc.i4.1
    IL_03a5:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ButtonBase::set_UseVisualStyleBackColor(bool)
    IL_03aa:  nop
//000105:             this.btnCompute.Click += new System.EventHandler(this.btnCompute_Click);
    IL_03ab:  ldarg.0
    IL_03ac:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Button Strassens.MainForm::btnCompute
    IL_03b1:  ldarg.0
    IL_03b2:  ldftn      instance void Strassens.MainForm::btnCompute_Click(object,
                                                                            class [mscorlib]System.EventArgs)
    IL_03b8:  newobj     instance void [mscorlib]System.EventHandler::.ctor(object,
                                                                            native int)
    IL_03bd:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::add_Click(class [mscorlib]System.EventHandler)
    IL_03c2:  nop
//000106:             // 
//000107:             // progressBar1
//000108:             // 
//000109:             this.progressBar1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
    IL_03c3:  ldarg.0
    IL_03c4:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ProgressBar Strassens.MainForm::progressBar1
    IL_03c9:  ldc.i4.s   13
    IL_03cb:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Anchor(valuetype [System.Windows.Forms]System.Windows.Forms.AnchorStyles)
    IL_03d0:  nop
//000110:                         | System.Windows.Forms.AnchorStyles.Right)));
//000111:             this.progressBar1.Location = new System.Drawing.Point(274, 20);
    IL_03d1:  ldarg.0
    IL_03d2:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ProgressBar Strassens.MainForm::progressBar1
    IL_03d7:  ldc.i4     0x112
    IL_03dc:  ldc.i4.s   20
    IL_03de:  newobj     instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_03e3:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_03e8:  nop
//000112:             this.progressBar1.Margin = new System.Windows.Forms.Padding(4, 5, 4, 5);
    IL_03e9:  ldarg.0
    IL_03ea:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ProgressBar Strassens.MainForm::progressBar1
    IL_03ef:  ldc.i4.4
    IL_03f0:  ldc.i4.5
    IL_03f1:  ldc.i4.4
    IL_03f2:  ldc.i4.5
    IL_03f3:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.Padding::.ctor(int32,
                                                                                                 int32,
                                                                                                 int32,
                                                                                                 int32)
    IL_03f8:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Margin(valuetype [System.Windows.Forms]System.Windows.Forms.Padding)
    IL_03fd:  nop
//000113:             this.progressBar1.Name = "progressBar1";
    IL_03fe:  ldarg.0
    IL_03ff:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ProgressBar Strassens.MainForm::progressBar1
    IL_0404:  ldstr      "progressBar1"
    IL_0409:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_040e:  nop
//000114:             this.progressBar1.Size = new System.Drawing.Size(588, 35);
    IL_040f:  ldarg.0
    IL_0410:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ProgressBar Strassens.MainForm::progressBar1
    IL_0415:  ldc.i4     0x24c
    IL_041a:  ldc.i4.s   35
    IL_041c:  newobj     instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_0421:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_0426:  nop
//000115:             this.progressBar1.Style = System.Windows.Forms.ProgressBarStyle.Marquee;
    IL_0427:  ldarg.0
    IL_0428:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ProgressBar Strassens.MainForm::progressBar1
    IL_042d:  ldc.i4.2
    IL_042e:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ProgressBar::set_Style(valuetype [System.Windows.Forms]System.Windows.Forms.ProgressBarStyle)
    IL_0433:  nop
//000116:             this.progressBar1.TabIndex = 3;
    IL_0434:  ldarg.0
    IL_0435:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ProgressBar Strassens.MainForm::progressBar1
    IL_043a:  ldc.i4.3
    IL_043b:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_TabIndex(int32)
    IL_0440:  nop
//000117:             this.progressBar1.Visible = false;
    IL_0441:  ldarg.0
    IL_0442:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ProgressBar Strassens.MainForm::progressBar1
    IL_0447:  ldc.i4.0
    IL_0448:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Visible(bool)
    IL_044d:  nop
//000118:             // 
//000119:             // MainForm
//000120:             // 
//000121:             this.AutoScaleDimensions = new System.Drawing.SizeF(9F, 20F);
    IL_044e:  ldarg.0
    IL_044f:  ldc.r4     9.
    IL_0454:  ldc.r4     20.
    IL_0459:  newobj     instance void [System.Drawing]System.Drawing.SizeF::.ctor(float32,
                                                                                   float32)
    IL_045e:  call       instance void [System.Windows.Forms]System.Windows.Forms.ContainerControl::set_AutoScaleDimensions(valuetype [System.Drawing]System.Drawing.SizeF)
    IL_0463:  nop
//000122:             this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
    IL_0464:  ldarg.0
    IL_0465:  ldc.i4.1
    IL_0466:  call       instance void [System.Windows.Forms]System.Windows.Forms.ContainerControl::set_AutoScaleMode(valuetype [System.Windows.Forms]System.Windows.Forms.AutoScaleMode)
    IL_046b:  nop
//000123:             this.ClientSize = new System.Drawing.Size(880, 600);
    IL_046c:  ldarg.0
    IL_046d:  ldc.i4     0x370
    IL_0472:  ldc.i4     0x258
    IL_0477:  newobj     instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_047c:  call       instance void [System.Windows.Forms]System.Windows.Forms.Form::set_ClientSize(valuetype [System.Drawing]System.Drawing.Size)
    IL_0481:  nop
//000124:             this.Controls.Add(this.progressBar1);
    IL_0482:  ldarg.0
    IL_0483:  call       instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_0488:  ldarg.0
    IL_0489:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ProgressBar Strassens.MainForm::progressBar1
    IL_048e:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_0493:  nop
//000125:             this.Controls.Add(this.btnCompute);
    IL_0494:  ldarg.0
    IL_0495:  call       instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_049a:  ldarg.0
    IL_049b:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Button Strassens.MainForm::btnCompute
    IL_04a0:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_04a5:  nop
//000126:             this.Controls.Add(this.cbMatrixSize);
    IL_04a6:  ldarg.0
    IL_04a7:  call       instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_04ac:  ldarg.0
    IL_04ad:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ComboBox Strassens.MainForm::cbMatrixSize
    IL_04b2:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_04b7:  nop
//000127:             this.Controls.Add(this.chart1);
    IL_04b8:  ldarg.0
    IL_04b9:  call       instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_04be:  ldarg.0
    IL_04bf:  ldfld      class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Chart Strassens.MainForm::chart1
    IL_04c4:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_04c9:  nop
//000128:             this.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
    IL_04ca:  ldarg.0
    IL_04cb:  ldstr      "Microsoft Sans Serif"
    IL_04d0:  ldc.r4     12.
    IL_04d5:  ldc.i4.0
    IL_04d6:  ldc.i4.3
    IL_04d7:  ldc.i4.0
    IL_04d8:  newobj     instance void [System.Drawing]System.Drawing.Font::.ctor(string,
                                                                                  float32,
                                                                                  valuetype [System.Drawing]System.Drawing.FontStyle,
                                                                                  valuetype [System.Drawing]System.Drawing.GraphicsUnit,
                                                                                  uint8)
    IL_04dd:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Font(class [System.Drawing]System.Drawing.Font)
    IL_04e2:  nop
//000129:             this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.SizableToolWindow;
    IL_04e3:  ldarg.0
    IL_04e4:  ldc.i4.6
    IL_04e5:  call       instance void [System.Windows.Forms]System.Windows.Forms.Form::set_FormBorderStyle(valuetype [System.Windows.Forms]System.Windows.Forms.FormBorderStyle)
    IL_04ea:  nop
//000130:             this.Margin = new System.Windows.Forms.Padding(4, 5, 4, 5);
    IL_04eb:  ldarg.0
    IL_04ec:  ldc.i4.4
    IL_04ed:  ldc.i4.5
    IL_04ee:  ldc.i4.4
    IL_04ef:  ldc.i4.5
    IL_04f0:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.Padding::.ctor(int32,
                                                                                                 int32,
                                                                                                 int32,
                                                                                                 int32)
    IL_04f5:  call       instance void [System.Windows.Forms]System.Windows.Forms.Form::set_Margin(valuetype [System.Windows.Forms]System.Windows.Forms.Padding)
    IL_04fa:  nop
//000131:             this.Name = "MainForm";
    IL_04fb:  ldarg.0
    IL_04fc:  ldstr      "MainForm"
    IL_0501:  call       instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_0506:  nop
//000132:             this.Text = "Matrix Multiplication";
    IL_0507:  ldarg.0
    IL_0508:  ldstr      "Matrix Multiplication"
    IL_050d:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Text(string)
    IL_0512:  nop
//000133:             this.Load += new System.EventHandler(this.MainForm_Load);
    IL_0513:  ldarg.0
    IL_0514:  ldarg.0
    IL_0515:  ldftn      instance void Strassens.MainForm::MainForm_Load(object,
                                                                         class [mscorlib]System.EventArgs)
    IL_051b:  newobj     instance void [mscorlib]System.EventHandler::.ctor(object,
                                                                            native int)
    IL_0520:  call       instance void [System.Windows.Forms]System.Windows.Forms.Form::add_Load(class [mscorlib]System.EventHandler)
    IL_0525:  nop
//000134:             ((System.ComponentModel.ISupportInitialize)(this.chart1)).EndInit();
    IL_0526:  ldarg.0
    IL_0527:  ldfld      class [System.Windows.Forms.DataVisualization]System.Windows.Forms.DataVisualization.Charting.Chart Strassens.MainForm::chart1
    IL_052c:  callvirt   instance void [System]System.ComponentModel.ISupportInitialize::EndInit()
    IL_0531:  nop
//000135:             this.ResumeLayout(false);
    IL_0532:  ldarg.0
    IL_0533:  ldc.i4.0
    IL_0534:  call       instance void [System.Windows.Forms]System.Windows.Forms.Control::ResumeLayout(bool)
    IL_0539:  nop
//000136: 
//000137:         }
    IL_053a:  ret
  } // end of method MainForm::InitializeComponent

  .method private hidebysig instance void 
          '<btnCompute_Click>b__0'(class [mscorlib]System.Threading.Tasks.Task t) cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       69 (0x45)
    .maxstack  2
    .locals init ([0] bool CS$4$0000)
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Strassens\Strassens_CSharp\MainForm.cs' 
//000099:                 {
    IL_0000:  nop
//000100:                     _cancellation = null;
    IL_0001:  ldarg.0
    IL_0002:  ldnull
    IL_0003:  stfld      class [mscorlib]System.Threading.CancellationTokenSource Strassens.MainForm::_cancellation
//000101:                     btnCompute.Text = "Compute";
    IL_0008:  ldarg.0
    IL_0009:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Button Strassens.MainForm::btnCompute
    IL_000e:  ldstr      "Compute"
    IL_0013:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Text(string)
    IL_0018:  nop
//000102:                     progressBar1.Visible = false;
    IL_0019:  ldarg.0
    IL_001a:  ldfld      class [System.Windows.Forms]System.Windows.Forms.ProgressBar Strassens.MainForm::progressBar1
    IL_001f:  ldc.i4.0
    IL_0020:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Visible(bool)
    IL_0025:  nop
//000103:                     if (t.IsFaulted) MessageBox.Show(t.Exception.ToString());
    IL_0026:  ldarg.1
    IL_0027:  callvirt   instance bool [mscorlib]System.Threading.Tasks.Task::get_IsFaulted()
    IL_002c:  ldc.i4.0
    IL_002d:  ceq
    IL_002f:  stloc.0
//000104:                 }, _uiScheduler);
//000105:             }
//000106:             else _cancellation.Cancel();
//000107:         }
//000108: 
//000109:         private void SetPoint(DataPoint point, double seconds)
//000110:         {
//000111:             Task.Factory.StartNew(() =>
//000112:             {
//000113:                 if (seconds > _max)
//000114:                 {
//000115:                     _max = seconds;
//000116:                     chart1.ChartAreas[0].AxisY.Maximum = _max * 1.1;
//000117:                 }
//000118:                 point.SetValueY(seconds);
//000119:                 point.ToolTip = seconds.ToString("F2");
//000120:                 point.Label = string.Format("{0:F2} secs  ({1:F2}x)", seconds, (_max / seconds));
//000121:                 chart1.Invalidate();
//000122:             }, CancellationToken.None, TaskCreationOptions.None, _uiScheduler);
//000123:         }
//000124: 
//000125:         static TimeSpan Time(Action action)
//000126:         {
//000127:             var sw = Stopwatch.StartNew();
//000128:             action();
//000129:             return sw.Elapsed;
//000130:         }
//000131:     }
//000132: }
    IL_0030:  ldloc.0
    IL_0031:  brtrue.s   IL_0044

//000103:                     if (t.IsFaulted) MessageBox.Show(t.Exception.ToString());
    IL_0033:  ldarg.1
    IL_0034:  callvirt   instance class [mscorlib]System.AggregateException [mscorlib]System.Threading.Tasks.Task::get_Exception()
    IL_0039:  callvirt   instance string [mscorlib]System.Object::ToString()
    IL_003e:  call       valuetype [System.Windows.Forms]System.Windows.Forms.DialogResult [System.Windows.Forms]System.Windows.Forms.MessageBox::Show(string)
    IL_0043:  pop
//000104:                 }, _uiScheduler);
//000105:             }
//000106:             else _cancellation.Cancel();
//000107:         }
//000108: 
//000109:         private void SetPoint(DataPoint point, double seconds)
//000110:         {
//000111:             Task.Factory.StartNew(() =>
//000112:             {
//000113:                 if (seconds > _max)
//000114:                 {
//000115:                     _max = seconds;
//000116:                     chart1.ChartAreas[0].AxisY.Maximum = _max * 1.1;
//000117:                 }
//000118:                 point.SetValueY(seconds);
//000119:                 point.ToolTip = seconds.ToString("F2");
//000120:                 point.Label = string.Format("{0:F2} secs  ({1:F2}x)", seconds, (_max / seconds));
//000121:                 chart1.Invalidate();
//000122:             }, CancellationToken.None, TaskCreationOptions.None, _uiScheduler);
//000123:         }
//000124: 
//000125:         static TimeSpan Time(Action action)
//000126:         {
//000127:             var sw = Stopwatch.StartNew();
//000128:             action();
//000129:             return sw.Elapsed;
//000130:         }
//000131:     }
//000132: }
    IL_0044:  ret
  } // end of method MainForm::'<btnCompute_Click>b__0'

} // end of class Strassens.MainForm

.class private auto ansi beforefieldinit Strassens.Properties.Resources
       extends [mscorlib]System.Object
{
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
  .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
  .custom instance void [System]System.CodeDom.Compiler.GeneratedCodeAttribute::.ctor(string,
                                                                                      string) = ( 01 00 33 53 79 73 74 65 6D 2E 52 65 73 6F 75 72   // ..3System.Resour
                                                                                                  63 65 73 2E 54 6F 6F 6C 73 2E 53 74 72 6F 6E 67   // ces.Tools.Strong
                                                                                                  6C 79 54 79 70 65 64 52 65 73 6F 75 72 63 65 42   // lyTypedResourceB
                                                                                                  75 69 6C 64 65 72 07 34 2E 30 2E 30 2E 30 00 00 ) // uilder.4.0.0.0..
  .field private static class [mscorlib]System.Resources.ResourceManager resourceMan
  .field private static class [mscorlib]System.Globalization.CultureInfo resourceCulture
  .method assembly hidebysig specialname rtspecialname 
          instance void  .ctor() cil managed
  {
    // Code size       10 (0xa)
    .maxstack  8
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Strassens\Strassens_CSharp\Properties\Resources.Designer.cs' 
//000031:         [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
    IL_0000:  ldarg.0
    IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
    IL_0006:  nop
//000032:         internal Resources() {
    IL_0007:  nop
//000033:         }
    IL_0008:  nop
    IL_0009:  ret
  } // end of method Resources::.ctor

  .method assembly hidebysig specialname static 
          class [mscorlib]System.Resources.ResourceManager 
          get_ResourceManager() cil managed
  {
    // Code size       63 (0x3f)
    .maxstack  3
    .locals init ([0] class [mscorlib]System.Resources.ResourceManager temp,
             [1] class [mscorlib]System.Resources.ResourceManager CS$1$0000,
             [2] bool CS$4$0001)
//000034:         
//000035:         /// <summary>
//000036:         ///   Returns the cached ResourceManager instance used by this class.
//000037:         /// </summary>
//000038:         [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
//000039:         internal static global::System.Resources.ResourceManager ResourceManager {
//000040:             get {
    IL_0000:  nop
//000041:                 if (object.ReferenceEquals(resourceMan, null)) {
    IL_0001:  ldsfld     class [mscorlib]System.Resources.ResourceManager Strassens.Properties.Resources::resourceMan
    IL_0006:  ldnull
    IL_0007:  call       bool [mscorlib]System.Object::ReferenceEquals(object,
                                                                       object)
    IL_000c:  ldc.i4.0
    IL_000d:  ceq
    IL_000f:  stloc.2
//000042:                     global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Strassens.Properties.Resources", typeof(Resources).Assembly);
//000043:                     resourceMan = temp;
//000044:                 }
//000045:                 return resourceMan;
//000046:             }
//000047:         }
//000048:         
//000049:         /// <summary>
//000050:         ///   Overrides the current thread's CurrentUICulture property for all
//000051:         ///   resource lookups using this strongly typed resource class.
//000052:         /// </summary>
//000053:         [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
//000054:         internal static global::System.Globalization.CultureInfo Culture {
//000055:             get {
//000056:                 return resourceCulture;
//000057:             }
//000058:             set {
//000059:                 resourceCulture = value;
//000060:             }
//000061:         }
//000062:     }
//000063: }
    IL_0010:  ldloc.2
    IL_0011:  brtrue.s   IL_0035

//000041:                 if (object.ReferenceEquals(resourceMan, null)) {
    IL_0013:  nop
//000042:                     global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Strassens.Properties.Resources", typeof(Resources).Assembly);
    IL_0014:  ldstr      "Strassens.Properties.Resources"
    IL_0019:  ldtoken    Strassens.Properties.Resources
    IL_001e:  call       class [mscorlib]System.Type [mscorlib]System.Type::GetTypeFromHandle(valuetype [mscorlib]System.RuntimeTypeHandle)
    IL_0023:  callvirt   instance class [mscorlib]System.Reflection.Assembly [mscorlib]System.Type::get_Assembly()
    IL_0028:  newobj     instance void [mscorlib]System.Resources.ResourceManager::.ctor(string,
                                                                                         class [mscorlib]System.Reflection.Assembly)
    IL_002d:  stloc.0
//000043:                     resourceMan = temp;
    IL_002e:  ldloc.0
    IL_002f:  stsfld     class [mscorlib]System.Resources.ResourceManager Strassens.Properties.Resources::resourceMan
//000044:                 }
    IL_0034:  nop
//000045:                 return resourceMan;
    IL_0035:  ldsfld     class [mscorlib]System.Resources.ResourceManager Strassens.Properties.Resources::resourceMan
    IL_003a:  stloc.1
    IL_003b:  br.s       IL_003d

//000046:             }
    IL_003d:  ldloc.1
    IL_003e:  ret
  } // end of method Resources::get_ResourceManager

  .method assembly hidebysig specialname static 
          class [mscorlib]System.Globalization.CultureInfo 
          get_Culture() cil managed
  {
    // Code size       11 (0xb)
    .maxstack  1
    .locals init ([0] class [mscorlib]System.Globalization.CultureInfo CS$1$0000)
//000047:         }
//000048:         
//000049:         /// <summary>
//000050:         ///   Overrides the current thread's CurrentUICulture property for all
//000051:         ///   resource lookups using this strongly typed resource class.
//000052:         /// </summary>
//000053:         [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
//000054:         internal static global::System.Globalization.CultureInfo Culture {
//000055:             get {
    IL_0000:  nop
//000056:                 return resourceCulture;
    IL_0001:  ldsfld     class [mscorlib]System.Globalization.CultureInfo Strassens.Properties.Resources::resourceCulture
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

//000057:             }
    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method Resources::get_Culture

  .method assembly hidebysig specialname static 
          void  set_Culture(class [mscorlib]System.Globalization.CultureInfo 'value') cil managed
  {
    // Code size       8 (0x8)
    .maxstack  8
//000058:             set {
    IL_0000:  nop
//000059:                 resourceCulture = value;
    IL_0001:  ldarg.0
    IL_0002:  stsfld     class [mscorlib]System.Globalization.CultureInfo Strassens.Properties.Resources::resourceCulture
//000060:             }
    IL_0007:  ret
  } // end of method Resources::set_Culture

  .property class [mscorlib]System.Resources.ResourceManager
          ResourceManager()
  {
    .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 02 00 00 00 00 00 ) 
    .get class [mscorlib]System.Resources.ResourceManager Strassens.Properties.Resources::get_ResourceManager()
  } // end of property Resources::ResourceManager
  .property class [mscorlib]System.Globalization.CultureInfo
          Culture()
  {
    .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 02 00 00 00 00 00 ) 
    .set void Strassens.Properties.Resources::set_Culture(class [mscorlib]System.Globalization.CultureInfo)
    .get class [mscorlib]System.Globalization.CultureInfo Strassens.Properties.Resources::get_Culture()
  } // end of property Resources::Culture
} // end of class Strassens.Properties.Resources

.class private abstract auto ansi sealed beforefieldinit Strassens.Program
       extends [mscorlib]System.Object
{
  .method private hidebysig static void  Main() cil managed
  {
    .entrypoint
    .custom instance void [mscorlib]System.STAThreadAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       26 (0x1a)
    .maxstack  8
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Strassens\Strassens_CSharp\Program.cs' 
//000019:         {
    IL_0000:  nop
//000020:             Application.EnableVisualStyles();
    IL_0001:  call       void [System.Windows.Forms]System.Windows.Forms.Application::EnableVisualStyles()
    IL_0006:  nop
//000021:             Application.SetCompatibleTextRenderingDefault(false);
    IL_0007:  ldc.i4.0
    IL_0008:  call       void [System.Windows.Forms]System.Windows.Forms.Application::SetCompatibleTextRenderingDefault(bool)
    IL_000d:  nop
//000022:             Application.Run(new MainForm());
    IL_000e:  newobj     instance void Strassens.MainForm::.ctor()
    IL_0013:  call       void [System.Windows.Forms]System.Windows.Forms.Application::Run(class [System.Windows.Forms]System.Windows.Forms.Form)
    IL_0018:  nop
//000023:         }
    IL_0019:  ret
  } // end of method Program::Main

} // end of class Strassens.Program

.class private auto ansi sealed beforefieldinit Strassens.Properties.Settings
       extends [System]System.Configuration.ApplicationSettingsBase
{
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
  .custom instance void [System]System.CodeDom.Compiler.GeneratedCodeAttribute::.ctor(string,
                                                                                      string) = ( 01 00 4B 4D 69 63 72 6F 73 6F 66 74 2E 56 69 73   // ..KMicrosoft.Vis
                                                                                                  75 61 6C 53 74 75 64 69 6F 2E 45 64 69 74 6F 72   // ualStudio.Editor
                                                                                                  73 2E 53 65 74 74 69 6E 67 73 44 65 73 69 67 6E   // s.SettingsDesign
                                                                                                  65 72 2E 53 65 74 74 69 6E 67 73 53 69 6E 67 6C   // er.SettingsSingl
                                                                                                  65 46 69 6C 65 47 65 6E 65 72 61 74 6F 72 08 31   // eFileGenerator.1
                                                                                                  30 2E 30 2E 30 2E 30 00 00 )                      // 0.0.0.0..
  .field private static class Strassens.Properties.Settings defaultInstance
  .method public hidebysig specialname static 
          class Strassens.Properties.Settings 
          get_Default() cil managed
  {
    // Code size       11 (0xb)
    .maxstack  1
    .locals init ([0] class Strassens.Properties.Settings CS$1$0000)
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Strassens\Strassens_CSharp\Properties\Settings.Designer.cs' 
//000021:             get {
    IL_0000:  nop
//000022:                 return defaultInstance;
    IL_0001:  ldsfld     class Strassens.Properties.Settings Strassens.Properties.Settings::defaultInstance
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

//000023:             }
    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method Settings::get_Default

  .method public hidebysig specialname rtspecialname 
          instance void  .ctor() cil managed
  {
    // Code size       7 (0x7)
    .maxstack  8
    IL_0000:  ldarg.0
    IL_0001:  call       instance void [System]System.Configuration.ApplicationSettingsBase::.ctor()
    IL_0006:  ret
  } // end of method Settings::.ctor

  .method private hidebysig specialname rtspecialname static 
          void  .cctor() cil managed
  {
    // Code size       21 (0x15)
    .maxstack  8
//000018:         private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
    IL_0000:  newobj     instance void Strassens.Properties.Settings::.ctor()
    IL_0005:  call       class [System]System.Configuration.SettingsBase [System]System.Configuration.SettingsBase::Synchronized(class [System]System.Configuration.SettingsBase)
    IL_000a:  castclass  Strassens.Properties.Settings
    IL_000f:  stsfld     class Strassens.Properties.Settings Strassens.Properties.Settings::defaultInstance
//000019:         
//000020:         public static Settings Default {
//000021:             get {
//000022:                 return defaultInstance;
//000023:             }
//000024:         }
//000025:     }
//000026: }
    IL_0014:  ret
  } // end of method Settings::.cctor

  .property class Strassens.Properties.Settings
          Default()
  {
    .get class Strassens.Properties.Settings Strassens.Properties.Settings::get_Default()
  } // end of property Settings::Default
} // end of class Strassens.Properties.Settings

.class public auto ansi sealed beforefieldinit Matrix
       extends [mscorlib]System.Object
       implements [mscorlib]System.IDisposable
{
  .class auto ansi sealed nested private beforefieldinit '<>c__DisplayClass2'
         extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .field public int32 m
    .field public int32 n
    .field public int32* A
    .field public int32 ax
    .field public int32 ay
    .field public int32 a_s
    .field public int32* B
    .field public int32 bx
    .field public int32 by
    .field public int32 bs
    .field public int32* C
    .field public int32 cx
    .field public int32 cy
    .field public int32 cs
    .method public hidebysig specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      // Code size       7 (0x7)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ret
    } // end of method '<>c__DisplayClass2'::.ctor

    .method public hidebysig instance void 
            '<matrix_mult_parallel>b__1'(int32 i) cil managed
    {
      // Code size       166 (0xa6)
      .maxstack  5
      .locals init ([0] int32 j,
               [1] int32 temp,
               [2] int32 k,
               [3] bool CS$4$0000)
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Strassens\Strassens_CSharp\Matrix.cs' 
//000184:         {
      IL_0000:  nop
//000185:             for (int j = 0; j < n; j++)
      IL_0001:  ldc.i4.0
      IL_0002:  stloc.0
//000186:             {
//000187:                 int temp = 0;
//000188:                 for (int k = 0; k < m; k++)
//000189:                 {
//000190:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
//000191:                 }
//000192:                 C[(i + cx) * cs + j + cy] = temp;
//000193:             }
//000194:         });
//000195:     }
//000196: 
//000197:     private static void strassen_mult_serial(
//000198:         CancellationToken cancellationToken, 
//000199:         // dimensions of A, B, and C submatrices 
//000200:         int n,
//000201:         // (ax,ay) = origin of A submatrix for multiplicand 
//000202:         int* A, int ax, int ay, int a_s,
//000203:         // (bx,by) = origin of B submatrix for multiplicand 
//000204:         int* B, int bx, int by, int bs,
//000205:         // (cx,cy) = origin of C submatrix for result 
//000206:         int* C, int cx, int cy, int cs,
//000207:         // Strassen's recursion limit for array dimensions 
//000208:         int s)
//000209:     {
//000210:         if (n <= s)
//000211:         {
//000212:             matrix_mult_serial(
//000213:                 cancellationToken,
//000214:                 n, n, n,
//000215:                 A, ax, ay, a_s,
//000216:                 B, bx, by, bs,
//000217:                 C, cx, cy, cs);
//000218:         }
//000219:         else
//000220:         {
//000221:             int n_2 = n >> 1;
//000222:             int[] workArr = new int[n_2 * n_2 * 9];
//000223:             fixed (int* work = workArr)
//000224:             {
//000225:                 int* a_cum = work;
//000226:                 int* b_cum = a_cum + n_2 * n_2;
//000227:                 int* p1 = b_cum + n_2 * n_2;
//000228:                 int* p2 = p1 + n_2 * n_2;
//000229:                 int* p3 = p2 + n_2 * n_2;
//000230:                 int* p4 = p3 + n_2 * n_2;
//000231:                 int* p5 = p4 + n_2 * n_2;
//000232:                 int* p6 = p5 + n_2 * n_2;
//000233:                 int* p7 = p6 + n_2 * n_2;
//000234: 
//000235:                 // p1 = (a11 + a22) * (b11 + b22) 
//000236:                 matrix_add(n_2, n_2,
//000237:                     A, ax, ay, a_s,
//000238:                     A, ax + n_2, ay + n_2, a_s,
//000239:                     a_cum, 0, 0, n_2);
//000240:                 matrix_add(n_2, n_2,
//000241:                     B, bx, by, bs,
//000242:                     B, bx + n_2, by + n_2, bs,
//000243:                     b_cum, 0, 0, n_2);
//000244:                 strassen_mult_serial(
//000245:                     cancellationToken,
//000246:                     n_2,
//000247:                     a_cum, 0, 0, n_2,
//000248:                     b_cum, 0, 0, n_2,
//000249:                     p1, 0, 0, n_2,
//000250:                     s);
//000251: 
//000252:                 // p2 = (a21 + a22) * b11 
//000253:                 matrix_add(n_2, n_2,
//000254:                     A, ax + n_2, ay, a_s,
//000255:                     A, ax + n_2, ay + n_2, a_s,
//000256:                     a_cum, 0, 0, n_2);
//000257:                 strassen_mult_serial(
//000258:                     cancellationToken,
//000259:                     n_2,
//000260:                     a_cum, 0, 0, n_2,
//000261:                     B, bx, by, bs,
//000262:                     p2, 0, 0, n_2,
//000263:                     s);
//000264: 
//000265:                 // p3 = a11 x (b12 - b22) 
//000266:                 matrix_sub(n_2, n_2,
//000267:                     B, bx, by + n_2, bs,
//000268:                     B, bx + n_2, by + n_2, bs,
//000269:                     b_cum, 0, 0, n_2);
//000270:                 strassen_mult_serial(
//000271:                     cancellationToken,
//000272:                     n_2,
//000273:                     A, ax, ay, a_s,
//000274:                     b_cum, 0, 0, n_2,
//000275:                     p3, 0, 0, n_2,
//000276:                     s);
//000277: 
//000278:                 // p4 = a22 x (b21 - b11) 
//000279:                 matrix_sub(n_2, n_2,
//000280:                     B, bx + n_2, by, bs,
//000281:                     B, bx, by, bs,
//000282:                     b_cum, 0, 0, n_2);
//000283:                 strassen_mult_serial(
//000284:                     cancellationToken,
//000285:                     n_2,
//000286:                     A, ax + n_2, ay + n_2, a_s,
//000287:                     b_cum, 0, 0, n_2,
//000288:                     p4, 0, 0, n_2,
//000289:                     s);
//000290: 
//000291:                 // p5 = (a11 + a12) x b22 
//000292:                 matrix_add(n_2, n_2,
//000293:                     A, ax, ay, a_s,
//000294:                     A, ax, ay + n_2, a_s,
//000295:                     a_cum, 0, 0, n_2);
//000296:                 strassen_mult_serial(
//000297:                     cancellationToken,
//000298:                     n_2,
//000299:                     a_cum, 0, 0, n_2,
//000300:                     B, bx + n_2, by + n_2, bs,
//000301:                     p5, 0, 0, n_2,
//000302:                     s);
//000303: 
//000304:                 // p6 = (a21 - a11) x (b11 + b12) 
//000305:                 matrix_sub(n_2, n_2,
//000306:                     A, ax + n_2, ay, a_s,
//000307:                     A, ax, ay, a_s,
//000308:                     a_cum, 0, 0, n_2);
//000309:                 matrix_add(n_2, n_2,
//000310:                     B, bx, by, bs,
//000311:                     B, bx, by + n_2, bs,
//000312:                     b_cum, 0, 0, n_2);
//000313:                 strassen_mult_serial(
//000314:                     cancellationToken,
//000315:                     n_2,
//000316:                     a_cum, 0, 0, n_2,
//000317:                     b_cum, 0, 0, n_2,
//000318:                     p6, 0, 0, n_2,
//000319:                     s);
//000320: 
//000321:                 // p7 = (a12 - a22) x (b21 + b22) 
//000322:                 matrix_sub(n_2, n_2,
//000323:                     A, ax, ay + n_2, a_s,
//000324:                     A, ax + n_2, ay + n_2, a_s,
//000325:                     a_cum, 0, 0, n_2);
//000326:                 matrix_add(n_2, n_2,
//000327:                     B, bx + n_2, by, bs,
//000328:                     B, bx + n_2, by + n_2, bs,
//000329:                     b_cum, 0, 0, n_2);
//000330:                 strassen_mult_serial(
//000331:                     cancellationToken,
//000332:                     n_2,
//000333:                     a_cum, 0, 0, n_2,
//000334:                     b_cum, 0, 0, n_2,
//000335:                     p7, 0, 0, n_2,
//000336:                     s);
//000337: 
//000338:                 // c11 = p1 + p4 - p5 + p7 
//000339:                 matrix_add(n_2, n_2,
//000340:                     p1, 0, 0, n_2,
//000341:                     p4, 0, 0, n_2,
//000342:                     C, cx, cy, cs);
//000343:                 matrix_sub(n_2, n_2,
//000344:                     C, cx, cy, cs,
//000345:                     p5, 0, 0, n_2,
//000346:                     C, cx, cy, cs);
//000347:                 matrix_add(n_2, n_2,
//000348:                     C, cx, cy, cs,
//000349:                     p7, 0, 0, n_2,
//000350:                     C, cx, cy, cs);
//000351: 
//000352:                 // c12 = p3 + p5 
//000353:                 matrix_add(n_2, n_2,
//000354:                     p3, 0, 0, n_2,
//000355:                     p5, 0, 0, n_2,
//000356:                     C, cx, cy + n_2, cs);
//000357: 
//000358:                 // c21 = p2 + p4 
//000359:                 matrix_add(n_2, n_2,
//000360:                     p2, 0, 0, n_2,
//000361:                     p4, 0, 0, n_2,
//000362:                     C, cx + n_2, cy, cs);
//000363: 
//000364:                 // c22 = p1 + p3 - p2 + p6 
//000365:                 matrix_add(n_2, n_2,
//000366:                     p1, 0, 0, n_2,
//000367:                     p3, 0, 0, n_2,
//000368:                     C, cx + n_2, cy + n_2, cs);
//000369:                 matrix_sub(n_2, n_2,
//000370:                     C, cx + n_2, cy + n_2, cs,
//000371:                     p2, 0, 0, n_2,
//000372:                     C, cx + n_2, cy + n_2, cs);
//000373:                 matrix_add(n_2, n_2,
//000374:                     C, cx + n_2, cy + n_2, cs,
//000375:                     p6, 0, 0, n_2,
//000376:                     C, cx + n_2, cy + n_2, cs);
//000377:             }
//000378:         }
//000379:     }
//000380: 
//000381:     private static void strassen_mult_parallel(
//000382:         CancellationToken cancellationToken, 
//000383:         // dimensions of A, B, and C submatrices 
//000384:         int n,
//000385:         // (ax,ay) = origin of A submatrix for multiplicand 
//000386:         int* A, int ax, int ay, int a_s,
//000387:         // (bx,by) = origin of B submatrix for multiplicand 
//000388:         int* B, int bx, int by, int bs,
//000389:         // (cx,cy) = origin of C submatrix for result 
//000390:         int* C, int cx, int cy, int cs,
//000391:         // Strassen's recursion limit for array dimensions 
//000392:         int s)
//000393:     {
//000394:         if (n <= s)
//000395:         {
//000396:             matrix_mult_serial(
//000397:                 cancellationToken,
//000398:                 n, n, n,
//000399:                 A, ax, ay, a_s,
//000400:                 B, bx, by, bs,
//000401:                 C, cx, cy, cs);
//000402:         }
//000403:         else
//000404:         {
//000405:             int n_2 = n >> 1;
//000406:             int areaSize = n_2 * n_2;
//000407:             int[] workArr = new int[areaSize * 17];
//000408:             fixed (int* work = workArr)
//000409:             {
//000410:                 int* a_cum = work;
//000411:                 int* b_cum = a_cum + areaSize;
//000412:                 int* c_cum = b_cum + areaSize;
//000413:                 int* d_cum = c_cum + areaSize;
//000414:                 int* e_cum = d_cum + areaSize;
//000415:                 int* f_cum = e_cum + areaSize;
//000416:                 int* g_cum = f_cum + areaSize;
//000417:                 int* h_cum = g_cum + areaSize;
//000418:                 int* i_cum = h_cum + areaSize;
//000419:                 int* j_cum = i_cum + areaSize;
//000420:                 int* p1 = j_cum + areaSize;
//000421:                 int* p2 = p1 + areaSize;
//000422:                 int* p3 = p2 + areaSize;
//000423:                 int* p4 = p3 + areaSize;
//000424:                 int* p5 = p4 + areaSize;
//000425:                 int* p6 = p5 + areaSize;
//000426:                 int* p7 = p6 + areaSize;
//000427: 
//000428:                 // p1 = (a11 + a22) * (b11 + b22) 
//000429:                 Task t_p1 = Task.Factory.StartNew(() =>
//000430:                 {
//000431:                     matrix_add(n_2, n_2,
//000432:                         A, ax, ay, a_s,
//000433:                         A, ax + n_2, ay + n_2, a_s,
//000434:                         a_cum, 0, 0, n_2);
//000435:                     matrix_add(n_2, n_2,
//000436:                         B, bx, by, bs,
//000437:                         B, bx + n_2, by + n_2, bs,
//000438:                         b_cum, 0, 0, n_2);
//000439:                     strassen_mult_parallel(
//000440:                         cancellationToken,
//000441:                         n_2,
//000442:                         a_cum, 0, 0, n_2,
//000443:                         b_cum, 0, 0, n_2,
//000444:                         p1, 0, 0, n_2,
//000445:                         s);
//000446:                 }, cancellationToken);
//000447: 
//000448:                 // p2 = (a21 + a22) * b11 
//000449:                 Task t_p2 = Task.Factory.StartNew(() =>
//000450:                 {
//000451:                     matrix_add(n_2, n_2,
//000452:                         A, ax + n_2, ay, a_s,
//000453:                         A, ax + n_2, ay + n_2, a_s,
//000454:                         c_cum, 0, 0, n_2);
//000455:                     strassen_mult_parallel(
//000456:                         cancellationToken,
//000457:                         n_2,
//000458:                         c_cum, 0, 0, n_2,
//000459:                         B, bx, by, bs,
//000460:                         p2, 0, 0, n_2,
//000461:                         s);
//000462:                 }, cancellationToken);
//000463: 
//000464:                 // p3 = a11 x (b12 - b22) 
//000465:                 Task t_p3 = Task.Factory.StartNew(() =>
//000466:                 {
//000467:                     matrix_sub(n_2, n_2,
//000468:                         B, bx, by + n_2, bs,
//000469:                         B, bx + n_2, by + n_2, bs,
//000470:                         d_cum, 0, 0, n_2);
//000471:                     strassen_mult_parallel(
//000472:                         cancellationToken,
//000473:                         n_2,
//000474:                         A, ax, ay, a_s,
//000475:                         d_cum, 0, 0, n_2,
//000476:                         p3, 0, 0, n_2,
//000477:                         s);
//000478:                 }, cancellationToken);
//000479: 
//000480:                 // p4 = a22 x (b21 - b11) 
//000481:                 Task t_p4 = Task.Factory.StartNew(() =>
//000482:                 {
//000483:                     matrix_sub(n_2, n_2,
//000484:                         B, bx + n_2, by, bs,
//000485:                         B, bx, by, bs,
//000486:                         e_cum, 0, 0, n_2);
//000487:                     strassen_mult_parallel(
//000488:                         cancellationToken,
//000489:                         n_2,
//000490:                         A, ax + n_2, ay + n_2, a_s,
//000491:                         e_cum, 0, 0, n_2,
//000492:                         p4, 0, 0, n_2,
//000493:                         s);
//000494:                 }, cancellationToken);
//000495: 
//000496:                 // p5 = (a11 + a12) x b22 
//000497:                 Task t_p5 = Task.Factory.StartNew(() =>
//000498:                 {
//000499:                     matrix_add(n_2, n_2,
//000500:                         A, ax, ay, a_s,
//000501:                         A, ax, ay + n_2, a_s,
//000502:                         f_cum, 0, 0, n_2);
//000503:                     strassen_mult_parallel(
//000504:                         cancellationToken,
//000505:                         n_2,
//000506:                         f_cum, 0, 0, n_2,
//000507:                         B, bx + n_2, by + n_2, bs,
//000508:                         p5, 0, 0, n_2,
//000509:                         s);
//000510:                 }, cancellationToken);
//000511: 
//000512:                 // p6 = (a21 - a11) x (b11 + b12) 
//000513:                 Task t_p6 = Task.Factory.StartNew(() =>
//000514:                 {
//000515:                     matrix_sub(n_2, n_2,
//000516:                         A, ax + n_2, ay, a_s,
//000517:                         A, ax, ay, a_s,
//000518:                         g_cum, 0, 0, n_2);
//000519:                     matrix_add(n_2, n_2,
//000520:                         B, bx, by, bs,
//000521:                         B, bx, by + n_2, bs,
//000522:                         h_cum, 0, 0, n_2);
//000523:                     strassen_mult_parallel(
//000524:                         cancellationToken,
//000525:                         n_2,
//000526:                         g_cum, 0, 0, n_2,
//000527:                         h_cum, 0, 0, n_2,
//000528:                         p6, 0, 0, n_2,
//000529:                         s);
//000530:                 }, cancellationToken);
//000531: 
//000532:                 // p7 = (a12 - a22) x (b21 + b22) 
//000533:                 Task t_p7 = Task.Factory.StartNew(() =>
//000534:                 {
//000535:                     matrix_sub(n_2, n_2,
//000536:                         A, ax, ay + n_2, a_s,
//000537:                         A, ax + n_2, ay + n_2, a_s,
//000538:                         i_cum, 0, 0, n_2);
//000539:                     matrix_add(n_2, n_2,
//000540:                         B, bx + n_2, by, bs,
//000541:                         B, bx + n_2, by + n_2, bs,
//000542:                         j_cum, 0, 0, n_2);
//000543:                     strassen_mult_parallel(
//000544:                         cancellationToken,
//000545:                         n_2,
//000546:                         i_cum, 0, 0, n_2,
//000547:                         j_cum, 0, 0, n_2,
//000548:                         p7, 0, 0, n_2,
//000549:                         s);
//000550:                 }, cancellationToken);
//000551: 
//000552:                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
//000553:                 catch (AggregateException ae)
//000554:                 {
//000555:                     ae.Flatten().Handle(e => e is TaskCanceledException);
//000556:                     cancellationToken.ThrowIfCancellationRequested();
//000557:                 }
//000558: 
//000559:                 // c11 = p1 + p4 - p5 + p7 
//000560:                 Task t_c11 = Task.Factory.StartNew(() =>
//000561:                 {
//000562:                     matrix_add(n_2, n_2,
//000563:                         p1, 0, 0, n_2,
//000564:                         p4, 0, 0, n_2,
//000565:                         C, cx, cy, cs);
//000566:                     matrix_sub(n_2, n_2,
//000567:                         C, cx, cy, cs,
//000568:                         p5, 0, 0, n_2,
//000569:                         C, cx, cy, cs);
//000570:                     matrix_add(n_2, n_2,
//000571:                         C, cx, cy, cs,
//000572:                         p7, 0, 0, n_2,
//000573:                         C, cx, cy, cs);
//000574:                 });
//000575: 
//000576:                 // c12 = p3 + p5 
//000577:                 Task t_c12 = Task.Factory.StartNew(() =>
//000578:                 {
//000579:                     matrix_add(n_2, n_2,
//000580:                         p3, 0, 0, n_2,
//000581:                         p5, 0, 0, n_2,
//000582:                         C, cx, cy + n_2, cs);
//000583:                 });
//000584: 
//000585:                 // c21 = p2 + p4 
//000586:                 Task t_c21 = Task.Factory.StartNew(() =>
//000587:                 {
//000588:                     matrix_add(n_2, n_2,
//000589:                         p2, 0, 0, n_2,
//000590:                         p4, 0, 0, n_2,
//000591:                         C, cx + n_2, cy, cs);
//000592:                 });
//000593: 
//000594:                 // c22 = p1 + p3 - p2 + p6 
//000595:                 Task t_c22 = Task.Factory.StartNew(() =>
//000596:                 {
//000597:                     matrix_add(n_2, n_2,
//000598:                         p1, 0, 0, n_2,
//000599:                         p3, 0, 0, n_2,
//000600:                         C, cx + n_2, cy + n_2, cs);
//000601:                     matrix_sub(n_2, n_2,
//000602:                         C, cx + n_2, cy + n_2, cs,
//000603:                         p2, 0, 0, n_2,
//000604:                         C, cx + n_2, cy + n_2, cs);
//000605:                     matrix_add(n_2, n_2,
//000606:                         C, cx + n_2, cy + n_2, cs,
//000607:                         p6, 0, 0, n_2,
//000608:                         C, cx + n_2, cy + n_2, cs);
//000609:                 });
//000610: 
//000611:                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
//000612:             }
//000613:         }
//000614:     }
//000615: }
      IL_0003:  br         IL_0095

//000186:             {
      IL_0008:  nop
//000187:                 int temp = 0;
      IL_0009:  ldc.i4.0
      IL_000a:  stloc.1
//000188:                 for (int k = 0; k < m; k++)
      IL_000b:  ldc.i4.0
      IL_000c:  stloc.2
//000189:                 {
//000190:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
//000191:                 }
//000192:                 C[(i + cx) * cs + j + cy] = temp;
//000193:             }
//000194:         });
//000195:     }
//000196: 
//000197:     private static void strassen_mult_serial(
//000198:         CancellationToken cancellationToken, 
//000199:         // dimensions of A, B, and C submatrices 
//000200:         int n,
//000201:         // (ax,ay) = origin of A submatrix for multiplicand 
//000202:         int* A, int ax, int ay, int a_s,
//000203:         // (bx,by) = origin of B submatrix for multiplicand 
//000204:         int* B, int bx, int by, int bs,
//000205:         // (cx,cy) = origin of C submatrix for result 
//000206:         int* C, int cx, int cy, int cs,
//000207:         // Strassen's recursion limit for array dimensions 
//000208:         int s)
//000209:     {
//000210:         if (n <= s)
//000211:         {
//000212:             matrix_mult_serial(
//000213:                 cancellationToken,
//000214:                 n, n, n,
//000215:                 A, ax, ay, a_s,
//000216:                 B, bx, by, bs,
//000217:                 C, cx, cy, cs);
//000218:         }
//000219:         else
//000220:         {
//000221:             int n_2 = n >> 1;
//000222:             int[] workArr = new int[n_2 * n_2 * 9];
//000223:             fixed (int* work = workArr)
//000224:             {
//000225:                 int* a_cum = work;
//000226:                 int* b_cum = a_cum + n_2 * n_2;
//000227:                 int* p1 = b_cum + n_2 * n_2;
//000228:                 int* p2 = p1 + n_2 * n_2;
//000229:                 int* p3 = p2 + n_2 * n_2;
//000230:                 int* p4 = p3 + n_2 * n_2;
//000231:                 int* p5 = p4 + n_2 * n_2;
//000232:                 int* p6 = p5 + n_2 * n_2;
//000233:                 int* p7 = p6 + n_2 * n_2;
//000234: 
//000235:                 // p1 = (a11 + a22) * (b11 + b22) 
//000236:                 matrix_add(n_2, n_2,
//000237:                     A, ax, ay, a_s,
//000238:                     A, ax + n_2, ay + n_2, a_s,
//000239:                     a_cum, 0, 0, n_2);
//000240:                 matrix_add(n_2, n_2,
//000241:                     B, bx, by, bs,
//000242:                     B, bx + n_2, by + n_2, bs,
//000243:                     b_cum, 0, 0, n_2);
//000244:                 strassen_mult_serial(
//000245:                     cancellationToken,
//000246:                     n_2,
//000247:                     a_cum, 0, 0, n_2,
//000248:                     b_cum, 0, 0, n_2,
//000249:                     p1, 0, 0, n_2,
//000250:                     s);
//000251: 
//000252:                 // p2 = (a21 + a22) * b11 
//000253:                 matrix_add(n_2, n_2,
//000254:                     A, ax + n_2, ay, a_s,
//000255:                     A, ax + n_2, ay + n_2, a_s,
//000256:                     a_cum, 0, 0, n_2);
//000257:                 strassen_mult_serial(
//000258:                     cancellationToken,
//000259:                     n_2,
//000260:                     a_cum, 0, 0, n_2,
//000261:                     B, bx, by, bs,
//000262:                     p2, 0, 0, n_2,
//000263:                     s);
//000264: 
//000265:                 // p3 = a11 x (b12 - b22) 
//000266:                 matrix_sub(n_2, n_2,
//000267:                     B, bx, by + n_2, bs,
//000268:                     B, bx + n_2, by + n_2, bs,
//000269:                     b_cum, 0, 0, n_2);
//000270:                 strassen_mult_serial(
//000271:                     cancellationToken,
//000272:                     n_2,
//000273:                     A, ax, ay, a_s,
//000274:                     b_cum, 0, 0, n_2,
//000275:                     p3, 0, 0, n_2,
//000276:                     s);
//000277: 
//000278:                 // p4 = a22 x (b21 - b11) 
//000279:                 matrix_sub(n_2, n_2,
//000280:                     B, bx + n_2, by, bs,
//000281:                     B, bx, by, bs,
//000282:                     b_cum, 0, 0, n_2);
//000283:                 strassen_mult_serial(
//000284:                     cancellationToken,
//000285:                     n_2,
//000286:                     A, ax + n_2, ay + n_2, a_s,
//000287:                     b_cum, 0, 0, n_2,
//000288:                     p4, 0, 0, n_2,
//000289:                     s);
//000290: 
//000291:                 // p5 = (a11 + a12) x b22 
//000292:                 matrix_add(n_2, n_2,
//000293:                     A, ax, ay, a_s,
//000294:                     A, ax, ay + n_2, a_s,
//000295:                     a_cum, 0, 0, n_2);
//000296:                 strassen_mult_serial(
//000297:                     cancellationToken,
//000298:                     n_2,
//000299:                     a_cum, 0, 0, n_2,
//000300:                     B, bx + n_2, by + n_2, bs,
//000301:                     p5, 0, 0, n_2,
//000302:                     s);
//000303: 
//000304:                 // p6 = (a21 - a11) x (b11 + b12) 
//000305:                 matrix_sub(n_2, n_2,
//000306:                     A, ax + n_2, ay, a_s,
//000307:                     A, ax, ay, a_s,
//000308:                     a_cum, 0, 0, n_2);
//000309:                 matrix_add(n_2, n_2,
//000310:                     B, bx, by, bs,
//000311:                     B, bx, by + n_2, bs,
//000312:                     b_cum, 0, 0, n_2);
//000313:                 strassen_mult_serial(
//000314:                     cancellationToken,
//000315:                     n_2,
//000316:                     a_cum, 0, 0, n_2,
//000317:                     b_cum, 0, 0, n_2,
//000318:                     p6, 0, 0, n_2,
//000319:                     s);
//000320: 
//000321:                 // p7 = (a12 - a22) x (b21 + b22) 
//000322:                 matrix_sub(n_2, n_2,
//000323:                     A, ax, ay + n_2, a_s,
//000324:                     A, ax + n_2, ay + n_2, a_s,
//000325:                     a_cum, 0, 0, n_2);
//000326:                 matrix_add(n_2, n_2,
//000327:                     B, bx + n_2, by, bs,
//000328:                     B, bx + n_2, by + n_2, bs,
//000329:                     b_cum, 0, 0, n_2);
//000330:                 strassen_mult_serial(
//000331:                     cancellationToken,
//000332:                     n_2,
//000333:                     a_cum, 0, 0, n_2,
//000334:                     b_cum, 0, 0, n_2,
//000335:                     p7, 0, 0, n_2,
//000336:                     s);
//000337: 
//000338:                 // c11 = p1 + p4 - p5 + p7 
//000339:                 matrix_add(n_2, n_2,
//000340:                     p1, 0, 0, n_2,
//000341:                     p4, 0, 0, n_2,
//000342:                     C, cx, cy, cs);
//000343:                 matrix_sub(n_2, n_2,
//000344:                     C, cx, cy, cs,
//000345:                     p5, 0, 0, n_2,
//000346:                     C, cx, cy, cs);
//000347:                 matrix_add(n_2, n_2,
//000348:                     C, cx, cy, cs,
//000349:                     p7, 0, 0, n_2,
//000350:                     C, cx, cy, cs);
//000351: 
//000352:                 // c12 = p3 + p5 
//000353:                 matrix_add(n_2, n_2,
//000354:                     p3, 0, 0, n_2,
//000355:                     p5, 0, 0, n_2,
//000356:                     C, cx, cy + n_2, cs);
//000357: 
//000358:                 // c21 = p2 + p4 
//000359:                 matrix_add(n_2, n_2,
//000360:                     p2, 0, 0, n_2,
//000361:                     p4, 0, 0, n_2,
//000362:                     C, cx + n_2, cy, cs);
//000363: 
//000364:                 // c22 = p1 + p3 - p2 + p6 
//000365:                 matrix_add(n_2, n_2,
//000366:                     p1, 0, 0, n_2,
//000367:                     p3, 0, 0, n_2,
//000368:                     C, cx + n_2, cy + n_2, cs);
//000369:                 matrix_sub(n_2, n_2,
//000370:                     C, cx + n_2, cy + n_2, cs,
//000371:                     p2, 0, 0, n_2,
//000372:                     C, cx + n_2, cy + n_2, cs);
//000373:                 matrix_add(n_2, n_2,
//000374:                     C, cx + n_2, cy + n_2, cs,
//000375:                     p6, 0, 0, n_2,
//000376:                     C, cx + n_2, cy + n_2, cs);
//000377:             }
//000378:         }
//000379:     }
//000380: 
//000381:     private static void strassen_mult_parallel(
//000382:         CancellationToken cancellationToken, 
//000383:         // dimensions of A, B, and C submatrices 
//000384:         int n,
//000385:         // (ax,ay) = origin of A submatrix for multiplicand 
//000386:         int* A, int ax, int ay, int a_s,
//000387:         // (bx,by) = origin of B submatrix for multiplicand 
//000388:         int* B, int bx, int by, int bs,
//000389:         // (cx,cy) = origin of C submatrix for result 
//000390:         int* C, int cx, int cy, int cs,
//000391:         // Strassen's recursion limit for array dimensions 
//000392:         int s)
//000393:     {
//000394:         if (n <= s)
//000395:         {
//000396:             matrix_mult_serial(
//000397:                 cancellationToken,
//000398:                 n, n, n,
//000399:                 A, ax, ay, a_s,
//000400:                 B, bx, by, bs,
//000401:                 C, cx, cy, cs);
//000402:         }
//000403:         else
//000404:         {
//000405:             int n_2 = n >> 1;
//000406:             int areaSize = n_2 * n_2;
//000407:             int[] workArr = new int[areaSize * 17];
//000408:             fixed (int* work = workArr)
//000409:             {
//000410:                 int* a_cum = work;
//000411:                 int* b_cum = a_cum + areaSize;
//000412:                 int* c_cum = b_cum + areaSize;
//000413:                 int* d_cum = c_cum + areaSize;
//000414:                 int* e_cum = d_cum + areaSize;
//000415:                 int* f_cum = e_cum + areaSize;
//000416:                 int* g_cum = f_cum + areaSize;
//000417:                 int* h_cum = g_cum + areaSize;
//000418:                 int* i_cum = h_cum + areaSize;
//000419:                 int* j_cum = i_cum + areaSize;
//000420:                 int* p1 = j_cum + areaSize;
//000421:                 int* p2 = p1 + areaSize;
//000422:                 int* p3 = p2 + areaSize;
//000423:                 int* p4 = p3 + areaSize;
//000424:                 int* p5 = p4 + areaSize;
//000425:                 int* p6 = p5 + areaSize;
//000426:                 int* p7 = p6 + areaSize;
//000427: 
//000428:                 // p1 = (a11 + a22) * (b11 + b22) 
//000429:                 Task t_p1 = Task.Factory.StartNew(() =>
//000430:                 {
//000431:                     matrix_add(n_2, n_2,
//000432:                         A, ax, ay, a_s,
//000433:                         A, ax + n_2, ay + n_2, a_s,
//000434:                         a_cum, 0, 0, n_2);
//000435:                     matrix_add(n_2, n_2,
//000436:                         B, bx, by, bs,
//000437:                         B, bx + n_2, by + n_2, bs,
//000438:                         b_cum, 0, 0, n_2);
//000439:                     strassen_mult_parallel(
//000440:                         cancellationToken,
//000441:                         n_2,
//000442:                         a_cum, 0, 0, n_2,
//000443:                         b_cum, 0, 0, n_2,
//000444:                         p1, 0, 0, n_2,
//000445:                         s);
//000446:                 }, cancellationToken);
//000447: 
//000448:                 // p2 = (a21 + a22) * b11 
//000449:                 Task t_p2 = Task.Factory.StartNew(() =>
//000450:                 {
//000451:                     matrix_add(n_2, n_2,
//000452:                         A, ax + n_2, ay, a_s,
//000453:                         A, ax + n_2, ay + n_2, a_s,
//000454:                         c_cum, 0, 0, n_2);
//000455:                     strassen_mult_parallel(
//000456:                         cancellationToken,
//000457:                         n_2,
//000458:                         c_cum, 0, 0, n_2,
//000459:                         B, bx, by, bs,
//000460:                         p2, 0, 0, n_2,
//000461:                         s);
//000462:                 }, cancellationToken);
//000463: 
//000464:                 // p3 = a11 x (b12 - b22) 
//000465:                 Task t_p3 = Task.Factory.StartNew(() =>
//000466:                 {
//000467:                     matrix_sub(n_2, n_2,
//000468:                         B, bx, by + n_2, bs,
//000469:                         B, bx + n_2, by + n_2, bs,
//000470:                         d_cum, 0, 0, n_2);
//000471:                     strassen_mult_parallel(
//000472:                         cancellationToken,
//000473:                         n_2,
//000474:                         A, ax, ay, a_s,
//000475:                         d_cum, 0, 0, n_2,
//000476:                         p3, 0, 0, n_2,
//000477:                         s);
//000478:                 }, cancellationToken);
//000479: 
//000480:                 // p4 = a22 x (b21 - b11) 
//000481:                 Task t_p4 = Task.Factory.StartNew(() =>
//000482:                 {
//000483:                     matrix_sub(n_2, n_2,
//000484:                         B, bx + n_2, by, bs,
//000485:                         B, bx, by, bs,
//000486:                         e_cum, 0, 0, n_2);
//000487:                     strassen_mult_parallel(
//000488:                         cancellationToken,
//000489:                         n_2,
//000490:                         A, ax + n_2, ay + n_2, a_s,
//000491:                         e_cum, 0, 0, n_2,
//000492:                         p4, 0, 0, n_2,
//000493:                         s);
//000494:                 }, cancellationToken);
//000495: 
//000496:                 // p5 = (a11 + a12) x b22 
//000497:                 Task t_p5 = Task.Factory.StartNew(() =>
//000498:                 {
//000499:                     matrix_add(n_2, n_2,
//000500:                         A, ax, ay, a_s,
//000501:                         A, ax, ay + n_2, a_s,
//000502:                         f_cum, 0, 0, n_2);
//000503:                     strassen_mult_parallel(
//000504:                         cancellationToken,
//000505:                         n_2,
//000506:                         f_cum, 0, 0, n_2,
//000507:                         B, bx + n_2, by + n_2, bs,
//000508:                         p5, 0, 0, n_2,
//000509:                         s);
//000510:                 }, cancellationToken);
//000511: 
//000512:                 // p6 = (a21 - a11) x (b11 + b12) 
//000513:                 Task t_p6 = Task.Factory.StartNew(() =>
//000514:                 {
//000515:                     matrix_sub(n_2, n_2,
//000516:                         A, ax + n_2, ay, a_s,
//000517:                         A, ax, ay, a_s,
//000518:                         g_cum, 0, 0, n_2);
//000519:                     matrix_add(n_2, n_2,
//000520:                         B, bx, by, bs,
//000521:                         B, bx, by + n_2, bs,
//000522:                         h_cum, 0, 0, n_2);
//000523:                     strassen_mult_parallel(
//000524:                         cancellationToken,
//000525:                         n_2,
//000526:                         g_cum, 0, 0, n_2,
//000527:                         h_cum, 0, 0, n_2,
//000528:                         p6, 0, 0, n_2,
//000529:                         s);
//000530:                 }, cancellationToken);
//000531: 
//000532:                 // p7 = (a12 - a22) x (b21 + b22) 
//000533:                 Task t_p7 = Task.Factory.StartNew(() =>
//000534:                 {
//000535:                     matrix_sub(n_2, n_2,
//000536:                         A, ax, ay + n_2, a_s,
//000537:                         A, ax + n_2, ay + n_2, a_s,
//000538:                         i_cum, 0, 0, n_2);
//000539:                     matrix_add(n_2, n_2,
//000540:                         B, bx + n_2, by, bs,
//000541:                         B, bx + n_2, by + n_2, bs,
//000542:                         j_cum, 0, 0, n_2);
//000543:                     strassen_mult_parallel(
//000544:                         cancellationToken,
//000545:                         n_2,
//000546:                         i_cum, 0, 0, n_2,
//000547:                         j_cum, 0, 0, n_2,
//000548:                         p7, 0, 0, n_2,
//000549:                         s);
//000550:                 }, cancellationToken);
//000551: 
//000552:                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
//000553:                 catch (AggregateException ae)
//000554:                 {
//000555:                     ae.Flatten().Handle(e => e is TaskCanceledException);
//000556:                     cancellationToken.ThrowIfCancellationRequested();
//000557:                 }
//000558: 
//000559:                 // c11 = p1 + p4 - p5 + p7 
//000560:                 Task t_c11 = Task.Factory.StartNew(() =>
//000561:                 {
//000562:                     matrix_add(n_2, n_2,
//000563:                         p1, 0, 0, n_2,
//000564:                         p4, 0, 0, n_2,
//000565:                         C, cx, cy, cs);
//000566:                     matrix_sub(n_2, n_2,
//000567:                         C, cx, cy, cs,
//000568:                         p5, 0, 0, n_2,
//000569:                         C, cx, cy, cs);
//000570:                     matrix_add(n_2, n_2,
//000571:                         C, cx, cy, cs,
//000572:                         p7, 0, 0, n_2,
//000573:                         C, cx, cy, cs);
//000574:                 });
//000575: 
//000576:                 // c12 = p3 + p5 
//000577:                 Task t_c12 = Task.Factory.StartNew(() =>
//000578:                 {
//000579:                     matrix_add(n_2, n_2,
//000580:                         p3, 0, 0, n_2,
//000581:                         p5, 0, 0, n_2,
//000582:                         C, cx, cy + n_2, cs);
//000583:                 });
//000584: 
//000585:                 // c21 = p2 + p4 
//000586:                 Task t_c21 = Task.Factory.StartNew(() =>
//000587:                 {
//000588:                     matrix_add(n_2, n_2,
//000589:                         p2, 0, 0, n_2,
//000590:                         p4, 0, 0, n_2,
//000591:                         C, cx + n_2, cy, cs);
//000592:                 });
//000593: 
//000594:                 // c22 = p1 + p3 - p2 + p6 
//000595:                 Task t_c22 = Task.Factory.StartNew(() =>
//000596:                 {
//000597:                     matrix_add(n_2, n_2,
//000598:                         p1, 0, 0, n_2,
//000599:                         p3, 0, 0, n_2,
//000600:                         C, cx + n_2, cy + n_2, cs);
//000601:                     matrix_sub(n_2, n_2,
//000602:                         C, cx + n_2, cy + n_2, cs,
//000603:                         p2, 0, 0, n_2,
//000604:                         C, cx + n_2, cy + n_2, cs);
//000605:                     matrix_add(n_2, n_2,
//000606:                         C, cx + n_2, cy + n_2, cs,
//000607:                         p6, 0, 0, n_2,
//000608:                         C, cx + n_2, cy + n_2, cs);
//000609:                 });
//000610: 
//000611:                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
//000612:             }
//000613:         }
//000614:     }
//000615: }
      IL_000d:  br.s       IL_005f

//000189:                 {
      IL_000f:  nop
//000190:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
      IL_0010:  ldloc.1
      IL_0011:  ldarg.0
      IL_0012:  ldfld      int32* Matrix/'<>c__DisplayClass2'::A
      IL_0017:  ldarg.1
      IL_0018:  ldarg.0
      IL_0019:  ldfld      int32 Matrix/'<>c__DisplayClass2'::ax
      IL_001e:  add
      IL_001f:  ldarg.0
      IL_0020:  ldfld      int32 Matrix/'<>c__DisplayClass2'::a_s
      IL_0025:  mul
      IL_0026:  ldloc.2
      IL_0027:  add
      IL_0028:  ldarg.0
      IL_0029:  ldfld      int32 Matrix/'<>c__DisplayClass2'::ay
      IL_002e:  add
      IL_002f:  conv.i
      IL_0030:  ldc.i4.4
      IL_0031:  mul
      IL_0032:  add
      IL_0033:  ldind.i4
      IL_0034:  ldarg.0
      IL_0035:  ldfld      int32* Matrix/'<>c__DisplayClass2'::B
      IL_003a:  ldloc.2
      IL_003b:  ldarg.0
      IL_003c:  ldfld      int32 Matrix/'<>c__DisplayClass2'::bx
      IL_0041:  add
      IL_0042:  ldarg.0
      IL_0043:  ldfld      int32 Matrix/'<>c__DisplayClass2'::bs
      IL_0048:  mul
      IL_0049:  ldloc.0
      IL_004a:  add
      IL_004b:  ldarg.0
      IL_004c:  ldfld      int32 Matrix/'<>c__DisplayClass2'::by
      IL_0051:  add
      IL_0052:  conv.i
      IL_0053:  ldc.i4.4
      IL_0054:  mul
      IL_0055:  add
      IL_0056:  ldind.i4
      IL_0057:  mul
      IL_0058:  add
      IL_0059:  stloc.1
//000191:                 }
      IL_005a:  nop
//000188:                 for (int k = 0; k < m; k++)
      IL_005b:  ldloc.2
      IL_005c:  ldc.i4.1
      IL_005d:  add
      IL_005e:  stloc.2
      IL_005f:  ldloc.2
      IL_0060:  ldarg.0
      IL_0061:  ldfld      int32 Matrix/'<>c__DisplayClass2'::m
      IL_0066:  clt
      IL_0068:  stloc.3
//000189:                 {
//000190:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
//000191:                 }
//000192:                 C[(i + cx) * cs + j + cy] = temp;
//000193:             }
//000194:         });
//000195:     }
//000196: 
//000197:     private static void strassen_mult_serial(
//000198:         CancellationToken cancellationToken, 
//000199:         // dimensions of A, B, and C submatrices 
//000200:         int n,
//000201:         // (ax,ay) = origin of A submatrix for multiplicand 
//000202:         int* A, int ax, int ay, int a_s,
//000203:         // (bx,by) = origin of B submatrix for multiplicand 
//000204:         int* B, int bx, int by, int bs,
//000205:         // (cx,cy) = origin of C submatrix for result 
//000206:         int* C, int cx, int cy, int cs,
//000207:         // Strassen's recursion limit for array dimensions 
//000208:         int s)
//000209:     {
//000210:         if (n <= s)
//000211:         {
//000212:             matrix_mult_serial(
//000213:                 cancellationToken,
//000214:                 n, n, n,
//000215:                 A, ax, ay, a_s,
//000216:                 B, bx, by, bs,
//000217:                 C, cx, cy, cs);
//000218:         }
//000219:         else
//000220:         {
//000221:             int n_2 = n >> 1;
//000222:             int[] workArr = new int[n_2 * n_2 * 9];
//000223:             fixed (int* work = workArr)
//000224:             {
//000225:                 int* a_cum = work;
//000226:                 int* b_cum = a_cum + n_2 * n_2;
//000227:                 int* p1 = b_cum + n_2 * n_2;
//000228:                 int* p2 = p1 + n_2 * n_2;
//000229:                 int* p3 = p2 + n_2 * n_2;
//000230:                 int* p4 = p3 + n_2 * n_2;
//000231:                 int* p5 = p4 + n_2 * n_2;
//000232:                 int* p6 = p5 + n_2 * n_2;
//000233:                 int* p7 = p6 + n_2 * n_2;
//000234: 
//000235:                 // p1 = (a11 + a22) * (b11 + b22) 
//000236:                 matrix_add(n_2, n_2,
//000237:                     A, ax, ay, a_s,
//000238:                     A, ax + n_2, ay + n_2, a_s,
//000239:                     a_cum, 0, 0, n_2);
//000240:                 matrix_add(n_2, n_2,
//000241:                     B, bx, by, bs,
//000242:                     B, bx + n_2, by + n_2, bs,
//000243:                     b_cum, 0, 0, n_2);
//000244:                 strassen_mult_serial(
//000245:                     cancellationToken,
//000246:                     n_2,
//000247:                     a_cum, 0, 0, n_2,
//000248:                     b_cum, 0, 0, n_2,
//000249:                     p1, 0, 0, n_2,
//000250:                     s);
//000251: 
//000252:                 // p2 = (a21 + a22) * b11 
//000253:                 matrix_add(n_2, n_2,
//000254:                     A, ax + n_2, ay, a_s,
//000255:                     A, ax + n_2, ay + n_2, a_s,
//000256:                     a_cum, 0, 0, n_2);
//000257:                 strassen_mult_serial(
//000258:                     cancellationToken,
//000259:                     n_2,
//000260:                     a_cum, 0, 0, n_2,
//000261:                     B, bx, by, bs,
//000262:                     p2, 0, 0, n_2,
//000263:                     s);
//000264: 
//000265:                 // p3 = a11 x (b12 - b22) 
//000266:                 matrix_sub(n_2, n_2,
//000267:                     B, bx, by + n_2, bs,
//000268:                     B, bx + n_2, by + n_2, bs,
//000269:                     b_cum, 0, 0, n_2);
//000270:                 strassen_mult_serial(
//000271:                     cancellationToken,
//000272:                     n_2,
//000273:                     A, ax, ay, a_s,
//000274:                     b_cum, 0, 0, n_2,
//000275:                     p3, 0, 0, n_2,
//000276:                     s);
//000277: 
//000278:                 // p4 = a22 x (b21 - b11) 
//000279:                 matrix_sub(n_2, n_2,
//000280:                     B, bx + n_2, by, bs,
//000281:                     B, bx, by, bs,
//000282:                     b_cum, 0, 0, n_2);
//000283:                 strassen_mult_serial(
//000284:                     cancellationToken,
//000285:                     n_2,
//000286:                     A, ax + n_2, ay + n_2, a_s,
//000287:                     b_cum, 0, 0, n_2,
//000288:                     p4, 0, 0, n_2,
//000289:                     s);
//000290: 
//000291:                 // p5 = (a11 + a12) x b22 
//000292:                 matrix_add(n_2, n_2,
//000293:                     A, ax, ay, a_s,
//000294:                     A, ax, ay + n_2, a_s,
//000295:                     a_cum, 0, 0, n_2);
//000296:                 strassen_mult_serial(
//000297:                     cancellationToken,
//000298:                     n_2,
//000299:                     a_cum, 0, 0, n_2,
//000300:                     B, bx + n_2, by + n_2, bs,
//000301:                     p5, 0, 0, n_2,
//000302:                     s);
//000303: 
//000304:                 // p6 = (a21 - a11) x (b11 + b12) 
//000305:                 matrix_sub(n_2, n_2,
//000306:                     A, ax + n_2, ay, a_s,
//000307:                     A, ax, ay, a_s,
//000308:                     a_cum, 0, 0, n_2);
//000309:                 matrix_add(n_2, n_2,
//000310:                     B, bx, by, bs,
//000311:                     B, bx, by + n_2, bs,
//000312:                     b_cum, 0, 0, n_2);
//000313:                 strassen_mult_serial(
//000314:                     cancellationToken,
//000315:                     n_2,
//000316:                     a_cum, 0, 0, n_2,
//000317:                     b_cum, 0, 0, n_2,
//000318:                     p6, 0, 0, n_2,
//000319:                     s);
//000320: 
//000321:                 // p7 = (a12 - a22) x (b21 + b22) 
//000322:                 matrix_sub(n_2, n_2,
//000323:                     A, ax, ay + n_2, a_s,
//000324:                     A, ax + n_2, ay + n_2, a_s,
//000325:                     a_cum, 0, 0, n_2);
//000326:                 matrix_add(n_2, n_2,
//000327:                     B, bx + n_2, by, bs,
//000328:                     B, bx + n_2, by + n_2, bs,
//000329:                     b_cum, 0, 0, n_2);
//000330:                 strassen_mult_serial(
//000331:                     cancellationToken,
//000332:                     n_2,
//000333:                     a_cum, 0, 0, n_2,
//000334:                     b_cum, 0, 0, n_2,
//000335:                     p7, 0, 0, n_2,
//000336:                     s);
//000337: 
//000338:                 // c11 = p1 + p4 - p5 + p7 
//000339:                 matrix_add(n_2, n_2,
//000340:                     p1, 0, 0, n_2,
//000341:                     p4, 0, 0, n_2,
//000342:                     C, cx, cy, cs);
//000343:                 matrix_sub(n_2, n_2,
//000344:                     C, cx, cy, cs,
//000345:                     p5, 0, 0, n_2,
//000346:                     C, cx, cy, cs);
//000347:                 matrix_add(n_2, n_2,
//000348:                     C, cx, cy, cs,
//000349:                     p7, 0, 0, n_2,
//000350:                     C, cx, cy, cs);
//000351: 
//000352:                 // c12 = p3 + p5 
//000353:                 matrix_add(n_2, n_2,
//000354:                     p3, 0, 0, n_2,
//000355:                     p5, 0, 0, n_2,
//000356:                     C, cx, cy + n_2, cs);
//000357: 
//000358:                 // c21 = p2 + p4 
//000359:                 matrix_add(n_2, n_2,
//000360:                     p2, 0, 0, n_2,
//000361:                     p4, 0, 0, n_2,
//000362:                     C, cx + n_2, cy, cs);
//000363: 
//000364:                 // c22 = p1 + p3 - p2 + p6 
//000365:                 matrix_add(n_2, n_2,
//000366:                     p1, 0, 0, n_2,
//000367:                     p3, 0, 0, n_2,
//000368:                     C, cx + n_2, cy + n_2, cs);
//000369:                 matrix_sub(n_2, n_2,
//000370:                     C, cx + n_2, cy + n_2, cs,
//000371:                     p2, 0, 0, n_2,
//000372:                     C, cx + n_2, cy + n_2, cs);
//000373:                 matrix_add(n_2, n_2,
//000374:                     C, cx + n_2, cy + n_2, cs,
//000375:                     p6, 0, 0, n_2,
//000376:                     C, cx + n_2, cy + n_2, cs);
//000377:             }
//000378:         }
//000379:     }
//000380: 
//000381:     private static void strassen_mult_parallel(
//000382:         CancellationToken cancellationToken, 
//000383:         // dimensions of A, B, and C submatrices 
//000384:         int n,
//000385:         // (ax,ay) = origin of A submatrix for multiplicand 
//000386:         int* A, int ax, int ay, int a_s,
//000387:         // (bx,by) = origin of B submatrix for multiplicand 
//000388:         int* B, int bx, int by, int bs,
//000389:         // (cx,cy) = origin of C submatrix for result 
//000390:         int* C, int cx, int cy, int cs,
//000391:         // Strassen's recursion limit for array dimensions 
//000392:         int s)
//000393:     {
//000394:         if (n <= s)
//000395:         {
//000396:             matrix_mult_serial(
//000397:                 cancellationToken,
//000398:                 n, n, n,
//000399:                 A, ax, ay, a_s,
//000400:                 B, bx, by, bs,
//000401:                 C, cx, cy, cs);
//000402:         }
//000403:         else
//000404:         {
//000405:             int n_2 = n >> 1;
//000406:             int areaSize = n_2 * n_2;
//000407:             int[] workArr = new int[areaSize * 17];
//000408:             fixed (int* work = workArr)
//000409:             {
//000410:                 int* a_cum = work;
//000411:                 int* b_cum = a_cum + areaSize;
//000412:                 int* c_cum = b_cum + areaSize;
//000413:                 int* d_cum = c_cum + areaSize;
//000414:                 int* e_cum = d_cum + areaSize;
//000415:                 int* f_cum = e_cum + areaSize;
//000416:                 int* g_cum = f_cum + areaSize;
//000417:                 int* h_cum = g_cum + areaSize;
//000418:                 int* i_cum = h_cum + areaSize;
//000419:                 int* j_cum = i_cum + areaSize;
//000420:                 int* p1 = j_cum + areaSize;
//000421:                 int* p2 = p1 + areaSize;
//000422:                 int* p3 = p2 + areaSize;
//000423:                 int* p4 = p3 + areaSize;
//000424:                 int* p5 = p4 + areaSize;
//000425:                 int* p6 = p5 + areaSize;
//000426:                 int* p7 = p6 + areaSize;
//000427: 
//000428:                 // p1 = (a11 + a22) * (b11 + b22) 
//000429:                 Task t_p1 = Task.Factory.StartNew(() =>
//000430:                 {
//000431:                     matrix_add(n_2, n_2,
//000432:                         A, ax, ay, a_s,
//000433:                         A, ax + n_2, ay + n_2, a_s,
//000434:                         a_cum, 0, 0, n_2);
//000435:                     matrix_add(n_2, n_2,
//000436:                         B, bx, by, bs,
//000437:                         B, bx + n_2, by + n_2, bs,
//000438:                         b_cum, 0, 0, n_2);
//000439:                     strassen_mult_parallel(
//000440:                         cancellationToken,
//000441:                         n_2,
//000442:                         a_cum, 0, 0, n_2,
//000443:                         b_cum, 0, 0, n_2,
//000444:                         p1, 0, 0, n_2,
//000445:                         s);
//000446:                 }, cancellationToken);
//000447: 
//000448:                 // p2 = (a21 + a22) * b11 
//000449:                 Task t_p2 = Task.Factory.StartNew(() =>
//000450:                 {
//000451:                     matrix_add(n_2, n_2,
//000452:                         A, ax + n_2, ay, a_s,
//000453:                         A, ax + n_2, ay + n_2, a_s,
//000454:                         c_cum, 0, 0, n_2);
//000455:                     strassen_mult_parallel(
//000456:                         cancellationToken,
//000457:                         n_2,
//000458:                         c_cum, 0, 0, n_2,
//000459:                         B, bx, by, bs,
//000460:                         p2, 0, 0, n_2,
//000461:                         s);
//000462:                 }, cancellationToken);
//000463: 
//000464:                 // p3 = a11 x (b12 - b22) 
//000465:                 Task t_p3 = Task.Factory.StartNew(() =>
//000466:                 {
//000467:                     matrix_sub(n_2, n_2,
//000468:                         B, bx, by + n_2, bs,
//000469:                         B, bx + n_2, by + n_2, bs,
//000470:                         d_cum, 0, 0, n_2);
//000471:                     strassen_mult_parallel(
//000472:                         cancellationToken,
//000473:                         n_2,
//000474:                         A, ax, ay, a_s,
//000475:                         d_cum, 0, 0, n_2,
//000476:                         p3, 0, 0, n_2,
//000477:                         s);
//000478:                 }, cancellationToken);
//000479: 
//000480:                 // p4 = a22 x (b21 - b11) 
//000481:                 Task t_p4 = Task.Factory.StartNew(() =>
//000482:                 {
//000483:                     matrix_sub(n_2, n_2,
//000484:                         B, bx + n_2, by, bs,
//000485:                         B, bx, by, bs,
//000486:                         e_cum, 0, 0, n_2);
//000487:                     strassen_mult_parallel(
//000488:                         cancellationToken,
//000489:                         n_2,
//000490:                         A, ax + n_2, ay + n_2, a_s,
//000491:                         e_cum, 0, 0, n_2,
//000492:                         p4, 0, 0, n_2,
//000493:                         s);
//000494:                 }, cancellationToken);
//000495: 
//000496:                 // p5 = (a11 + a12) x b22 
//000497:                 Task t_p5 = Task.Factory.StartNew(() =>
//000498:                 {
//000499:                     matrix_add(n_2, n_2,
//000500:                         A, ax, ay, a_s,
//000501:                         A, ax, ay + n_2, a_s,
//000502:                         f_cum, 0, 0, n_2);
//000503:                     strassen_mult_parallel(
//000504:                         cancellationToken,
//000505:                         n_2,
//000506:                         f_cum, 0, 0, n_2,
//000507:                         B, bx + n_2, by + n_2, bs,
//000508:                         p5, 0, 0, n_2,
//000509:                         s);
//000510:                 }, cancellationToken);
//000511: 
//000512:                 // p6 = (a21 - a11) x (b11 + b12) 
//000513:                 Task t_p6 = Task.Factory.StartNew(() =>
//000514:                 {
//000515:                     matrix_sub(n_2, n_2,
//000516:                         A, ax + n_2, ay, a_s,
//000517:                         A, ax, ay, a_s,
//000518:                         g_cum, 0, 0, n_2);
//000519:                     matrix_add(n_2, n_2,
//000520:                         B, bx, by, bs,
//000521:                         B, bx, by + n_2, bs,
//000522:                         h_cum, 0, 0, n_2);
//000523:                     strassen_mult_parallel(
//000524:                         cancellationToken,
//000525:                         n_2,
//000526:                         g_cum, 0, 0, n_2,
//000527:                         h_cum, 0, 0, n_2,
//000528:                         p6, 0, 0, n_2,
//000529:                         s);
//000530:                 }, cancellationToken);
//000531: 
//000532:                 // p7 = (a12 - a22) x (b21 + b22) 
//000533:                 Task t_p7 = Task.Factory.StartNew(() =>
//000534:                 {
//000535:                     matrix_sub(n_2, n_2,
//000536:                         A, ax, ay + n_2, a_s,
//000537:                         A, ax + n_2, ay + n_2, a_s,
//000538:                         i_cum, 0, 0, n_2);
//000539:                     matrix_add(n_2, n_2,
//000540:                         B, bx + n_2, by, bs,
//000541:                         B, bx + n_2, by + n_2, bs,
//000542:                         j_cum, 0, 0, n_2);
//000543:                     strassen_mult_parallel(
//000544:                         cancellationToken,
//000545:                         n_2,
//000546:                         i_cum, 0, 0, n_2,
//000547:                         j_cum, 0, 0, n_2,
//000548:                         p7, 0, 0, n_2,
//000549:                         s);
//000550:                 }, cancellationToken);
//000551: 
//000552:                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
//000553:                 catch (AggregateException ae)
//000554:                 {
//000555:                     ae.Flatten().Handle(e => e is TaskCanceledException);
//000556:                     cancellationToken.ThrowIfCancellationRequested();
//000557:                 }
//000558: 
//000559:                 // c11 = p1 + p4 - p5 + p7 
//000560:                 Task t_c11 = Task.Factory.StartNew(() =>
//000561:                 {
//000562:                     matrix_add(n_2, n_2,
//000563:                         p1, 0, 0, n_2,
//000564:                         p4, 0, 0, n_2,
//000565:                         C, cx, cy, cs);
//000566:                     matrix_sub(n_2, n_2,
//000567:                         C, cx, cy, cs,
//000568:                         p5, 0, 0, n_2,
//000569:                         C, cx, cy, cs);
//000570:                     matrix_add(n_2, n_2,
//000571:                         C, cx, cy, cs,
//000572:                         p7, 0, 0, n_2,
//000573:                         C, cx, cy, cs);
//000574:                 });
//000575: 
//000576:                 // c12 = p3 + p5 
//000577:                 Task t_c12 = Task.Factory.StartNew(() =>
//000578:                 {
//000579:                     matrix_add(n_2, n_2,
//000580:                         p3, 0, 0, n_2,
//000581:                         p5, 0, 0, n_2,
//000582:                         C, cx, cy + n_2, cs);
//000583:                 });
//000584: 
//000585:                 // c21 = p2 + p4 
//000586:                 Task t_c21 = Task.Factory.StartNew(() =>
//000587:                 {
//000588:                     matrix_add(n_2, n_2,
//000589:                         p2, 0, 0, n_2,
//000590:                         p4, 0, 0, n_2,
//000591:                         C, cx + n_2, cy, cs);
//000592:                 });
//000593: 
//000594:                 // c22 = p1 + p3 - p2 + p6 
//000595:                 Task t_c22 = Task.Factory.StartNew(() =>
//000596:                 {
//000597:                     matrix_add(n_2, n_2,
//000598:                         p1, 0, 0, n_2,
//000599:                         p3, 0, 0, n_2,
//000600:                         C, cx + n_2, cy + n_2, cs);
//000601:                     matrix_sub(n_2, n_2,
//000602:                         C, cx + n_2, cy + n_2, cs,
//000603:                         p2, 0, 0, n_2,
//000604:                         C, cx + n_2, cy + n_2, cs);
//000605:                     matrix_add(n_2, n_2,
//000606:                         C, cx + n_2, cy + n_2, cs,
//000607:                         p6, 0, 0, n_2,
//000608:                         C, cx + n_2, cy + n_2, cs);
//000609:                 });
//000610: 
//000611:                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
//000612:             }
//000613:         }
//000614:     }
//000615: }
      IL_0069:  ldloc.3
      IL_006a:  brtrue.s   IL_000f

//000192:                 C[(i + cx) * cs + j + cy] = temp;
      IL_006c:  ldarg.0
      IL_006d:  ldfld      int32* Matrix/'<>c__DisplayClass2'::C
      IL_0072:  ldarg.1
      IL_0073:  ldarg.0
      IL_0074:  ldfld      int32 Matrix/'<>c__DisplayClass2'::cx
      IL_0079:  add
      IL_007a:  ldarg.0
      IL_007b:  ldfld      int32 Matrix/'<>c__DisplayClass2'::cs
      IL_0080:  mul
      IL_0081:  ldloc.0
      IL_0082:  add
      IL_0083:  ldarg.0
      IL_0084:  ldfld      int32 Matrix/'<>c__DisplayClass2'::cy
      IL_0089:  add
      IL_008a:  conv.i
      IL_008b:  ldc.i4.4
      IL_008c:  mul
      IL_008d:  add
      IL_008e:  ldloc.1
      IL_008f:  stind.i4
//000193:             }
      IL_0090:  nop
//000185:             for (int j = 0; j < n; j++)
      IL_0091:  ldloc.0
      IL_0092:  ldc.i4.1
      IL_0093:  add
      IL_0094:  stloc.0
      IL_0095:  ldloc.0
      IL_0096:  ldarg.0
      IL_0097:  ldfld      int32 Matrix/'<>c__DisplayClass2'::n
      IL_009c:  clt
      IL_009e:  stloc.3
//000186:             {
//000187:                 int temp = 0;
//000188:                 for (int k = 0; k < m; k++)
//000189:                 {
//000190:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
//000191:                 }
//000192:                 C[(i + cx) * cs + j + cy] = temp;
//000193:             }
//000194:         });
//000195:     }
//000196: 
//000197:     private static void strassen_mult_serial(
//000198:         CancellationToken cancellationToken, 
//000199:         // dimensions of A, B, and C submatrices 
//000200:         int n,
//000201:         // (ax,ay) = origin of A submatrix for multiplicand 
//000202:         int* A, int ax, int ay, int a_s,
//000203:         // (bx,by) = origin of B submatrix for multiplicand 
//000204:         int* B, int bx, int by, int bs,
//000205:         // (cx,cy) = origin of C submatrix for result 
//000206:         int* C, int cx, int cy, int cs,
//000207:         // Strassen's recursion limit for array dimensions 
//000208:         int s)
//000209:     {
//000210:         if (n <= s)
//000211:         {
//000212:             matrix_mult_serial(
//000213:                 cancellationToken,
//000214:                 n, n, n,
//000215:                 A, ax, ay, a_s,
//000216:                 B, bx, by, bs,
//000217:                 C, cx, cy, cs);
//000218:         }
//000219:         else
//000220:         {
//000221:             int n_2 = n >> 1;
//000222:             int[] workArr = new int[n_2 * n_2 * 9];
//000223:             fixed (int* work = workArr)
//000224:             {
//000225:                 int* a_cum = work;
//000226:                 int* b_cum = a_cum + n_2 * n_2;
//000227:                 int* p1 = b_cum + n_2 * n_2;
//000228:                 int* p2 = p1 + n_2 * n_2;
//000229:                 int* p3 = p2 + n_2 * n_2;
//000230:                 int* p4 = p3 + n_2 * n_2;
//000231:                 int* p5 = p4 + n_2 * n_2;
//000232:                 int* p6 = p5 + n_2 * n_2;
//000233:                 int* p7 = p6 + n_2 * n_2;
//000234: 
//000235:                 // p1 = (a11 + a22) * (b11 + b22) 
//000236:                 matrix_add(n_2, n_2,
//000237:                     A, ax, ay, a_s,
//000238:                     A, ax + n_2, ay + n_2, a_s,
//000239:                     a_cum, 0, 0, n_2);
//000240:                 matrix_add(n_2, n_2,
//000241:                     B, bx, by, bs,
//000242:                     B, bx + n_2, by + n_2, bs,
//000243:                     b_cum, 0, 0, n_2);
//000244:                 strassen_mult_serial(
//000245:                     cancellationToken,
//000246:                     n_2,
//000247:                     a_cum, 0, 0, n_2,
//000248:                     b_cum, 0, 0, n_2,
//000249:                     p1, 0, 0, n_2,
//000250:                     s);
//000251: 
//000252:                 // p2 = (a21 + a22) * b11 
//000253:                 matrix_add(n_2, n_2,
//000254:                     A, ax + n_2, ay, a_s,
//000255:                     A, ax + n_2, ay + n_2, a_s,
//000256:                     a_cum, 0, 0, n_2);
//000257:                 strassen_mult_serial(
//000258:                     cancellationToken,
//000259:                     n_2,
//000260:                     a_cum, 0, 0, n_2,
//000261:                     B, bx, by, bs,
//000262:                     p2, 0, 0, n_2,
//000263:                     s);
//000264: 
//000265:                 // p3 = a11 x (b12 - b22) 
//000266:                 matrix_sub(n_2, n_2,
//000267:                     B, bx, by + n_2, bs,
//000268:                     B, bx + n_2, by + n_2, bs,
//000269:                     b_cum, 0, 0, n_2);
//000270:                 strassen_mult_serial(
//000271:                     cancellationToken,
//000272:                     n_2,
//000273:                     A, ax, ay, a_s,
//000274:                     b_cum, 0, 0, n_2,
//000275:                     p3, 0, 0, n_2,
//000276:                     s);
//000277: 
//000278:                 // p4 = a22 x (b21 - b11) 
//000279:                 matrix_sub(n_2, n_2,
//000280:                     B, bx + n_2, by, bs,
//000281:                     B, bx, by, bs,
//000282:                     b_cum, 0, 0, n_2);
//000283:                 strassen_mult_serial(
//000284:                     cancellationToken,
//000285:                     n_2,
//000286:                     A, ax + n_2, ay + n_2, a_s,
//000287:                     b_cum, 0, 0, n_2,
//000288:                     p4, 0, 0, n_2,
//000289:                     s);
//000290: 
//000291:                 // p5 = (a11 + a12) x b22 
//000292:                 matrix_add(n_2, n_2,
//000293:                     A, ax, ay, a_s,
//000294:                     A, ax, ay + n_2, a_s,
//000295:                     a_cum, 0, 0, n_2);
//000296:                 strassen_mult_serial(
//000297:                     cancellationToken,
//000298:                     n_2,
//000299:                     a_cum, 0, 0, n_2,
//000300:                     B, bx + n_2, by + n_2, bs,
//000301:                     p5, 0, 0, n_2,
//000302:                     s);
//000303: 
//000304:                 // p6 = (a21 - a11) x (b11 + b12) 
//000305:                 matrix_sub(n_2, n_2,
//000306:                     A, ax + n_2, ay, a_s,
//000307:                     A, ax, ay, a_s,
//000308:                     a_cum, 0, 0, n_2);
//000309:                 matrix_add(n_2, n_2,
//000310:                     B, bx, by, bs,
//000311:                     B, bx, by + n_2, bs,
//000312:                     b_cum, 0, 0, n_2);
//000313:                 strassen_mult_serial(
//000314:                     cancellationToken,
//000315:                     n_2,
//000316:                     a_cum, 0, 0, n_2,
//000317:                     b_cum, 0, 0, n_2,
//000318:                     p6, 0, 0, n_2,
//000319:                     s);
//000320: 
//000321:                 // p7 = (a12 - a22) x (b21 + b22) 
//000322:                 matrix_sub(n_2, n_2,
//000323:                     A, ax, ay + n_2, a_s,
//000324:                     A, ax + n_2, ay + n_2, a_s,
//000325:                     a_cum, 0, 0, n_2);
//000326:                 matrix_add(n_2, n_2,
//000327:                     B, bx + n_2, by, bs,
//000328:                     B, bx + n_2, by + n_2, bs,
//000329:                     b_cum, 0, 0, n_2);
//000330:                 strassen_mult_serial(
//000331:                     cancellationToken,
//000332:                     n_2,
//000333:                     a_cum, 0, 0, n_2,
//000334:                     b_cum, 0, 0, n_2,
//000335:                     p7, 0, 0, n_2,
//000336:                     s);
//000337: 
//000338:                 // c11 = p1 + p4 - p5 + p7 
//000339:                 matrix_add(n_2, n_2,
//000340:                     p1, 0, 0, n_2,
//000341:                     p4, 0, 0, n_2,
//000342:                     C, cx, cy, cs);
//000343:                 matrix_sub(n_2, n_2,
//000344:                     C, cx, cy, cs,
//000345:                     p5, 0, 0, n_2,
//000346:                     C, cx, cy, cs);
//000347:                 matrix_add(n_2, n_2,
//000348:                     C, cx, cy, cs,
//000349:                     p7, 0, 0, n_2,
//000350:                     C, cx, cy, cs);
//000351: 
//000352:                 // c12 = p3 + p5 
//000353:                 matrix_add(n_2, n_2,
//000354:                     p3, 0, 0, n_2,
//000355:                     p5, 0, 0, n_2,
//000356:                     C, cx, cy + n_2, cs);
//000357: 
//000358:                 // c21 = p2 + p4 
//000359:                 matrix_add(n_2, n_2,
//000360:                     p2, 0, 0, n_2,
//000361:                     p4, 0, 0, n_2,
//000362:                     C, cx + n_2, cy, cs);
//000363: 
//000364:                 // c22 = p1 + p3 - p2 + p6 
//000365:                 matrix_add(n_2, n_2,
//000366:                     p1, 0, 0, n_2,
//000367:                     p3, 0, 0, n_2,
//000368:                     C, cx + n_2, cy + n_2, cs);
//000369:                 matrix_sub(n_2, n_2,
//000370:                     C, cx + n_2, cy + n_2, cs,
//000371:                     p2, 0, 0, n_2,
//000372:                     C, cx + n_2, cy + n_2, cs);
//000373:                 matrix_add(n_2, n_2,
//000374:                     C, cx + n_2, cy + n_2, cs,
//000375:                     p6, 0, 0, n_2,
//000376:                     C, cx + n_2, cy + n_2, cs);
//000377:             }
//000378:         }
//000379:     }
//000380: 
//000381:     private static void strassen_mult_parallel(
//000382:         CancellationToken cancellationToken, 
//000383:         // dimensions of A, B, and C submatrices 
//000384:         int n,
//000385:         // (ax,ay) = origin of A submatrix for multiplicand 
//000386:         int* A, int ax, int ay, int a_s,
//000387:         // (bx,by) = origin of B submatrix for multiplicand 
//000388:         int* B, int bx, int by, int bs,
//000389:         // (cx,cy) = origin of C submatrix for result 
//000390:         int* C, int cx, int cy, int cs,
//000391:         // Strassen's recursion limit for array dimensions 
//000392:         int s)
//000393:     {
//000394:         if (n <= s)
//000395:         {
//000396:             matrix_mult_serial(
//000397:                 cancellationToken,
//000398:                 n, n, n,
//000399:                 A, ax, ay, a_s,
//000400:                 B, bx, by, bs,
//000401:                 C, cx, cy, cs);
//000402:         }
//000403:         else
//000404:         {
//000405:             int n_2 = n >> 1;
//000406:             int areaSize = n_2 * n_2;
//000407:             int[] workArr = new int[areaSize * 17];
//000408:             fixed (int* work = workArr)
//000409:             {
//000410:                 int* a_cum = work;
//000411:                 int* b_cum = a_cum + areaSize;
//000412:                 int* c_cum = b_cum + areaSize;
//000413:                 int* d_cum = c_cum + areaSize;
//000414:                 int* e_cum = d_cum + areaSize;
//000415:                 int* f_cum = e_cum + areaSize;
//000416:                 int* g_cum = f_cum + areaSize;
//000417:                 int* h_cum = g_cum + areaSize;
//000418:                 int* i_cum = h_cum + areaSize;
//000419:                 int* j_cum = i_cum + areaSize;
//000420:                 int* p1 = j_cum + areaSize;
//000421:                 int* p2 = p1 + areaSize;
//000422:                 int* p3 = p2 + areaSize;
//000423:                 int* p4 = p3 + areaSize;
//000424:                 int* p5 = p4 + areaSize;
//000425:                 int* p6 = p5 + areaSize;
//000426:                 int* p7 = p6 + areaSize;
//000427: 
//000428:                 // p1 = (a11 + a22) * (b11 + b22) 
//000429:                 Task t_p1 = Task.Factory.StartNew(() =>
//000430:                 {
//000431:                     matrix_add(n_2, n_2,
//000432:                         A, ax, ay, a_s,
//000433:                         A, ax + n_2, ay + n_2, a_s,
//000434:                         a_cum, 0, 0, n_2);
//000435:                     matrix_add(n_2, n_2,
//000436:                         B, bx, by, bs,
//000437:                         B, bx + n_2, by + n_2, bs,
//000438:                         b_cum, 0, 0, n_2);
//000439:                     strassen_mult_parallel(
//000440:                         cancellationToken,
//000441:                         n_2,
//000442:                         a_cum, 0, 0, n_2,
//000443:                         b_cum, 0, 0, n_2,
//000444:                         p1, 0, 0, n_2,
//000445:                         s);
//000446:                 }, cancellationToken);
//000447: 
//000448:                 // p2 = (a21 + a22) * b11 
//000449:                 Task t_p2 = Task.Factory.StartNew(() =>
//000450:                 {
//000451:                     matrix_add(n_2, n_2,
//000452:                         A, ax + n_2, ay, a_s,
//000453:                         A, ax + n_2, ay + n_2, a_s,
//000454:                         c_cum, 0, 0, n_2);
//000455:                     strassen_mult_parallel(
//000456:                         cancellationToken,
//000457:                         n_2,
//000458:                         c_cum, 0, 0, n_2,
//000459:                         B, bx, by, bs,
//000460:                         p2, 0, 0, n_2,
//000461:                         s);
//000462:                 }, cancellationToken);
//000463: 
//000464:                 // p3 = a11 x (b12 - b22) 
//000465:                 Task t_p3 = Task.Factory.StartNew(() =>
//000466:                 {
//000467:                     matrix_sub(n_2, n_2,
//000468:                         B, bx, by + n_2, bs,
//000469:                         B, bx + n_2, by + n_2, bs,
//000470:                         d_cum, 0, 0, n_2);
//000471:                     strassen_mult_parallel(
//000472:                         cancellationToken,
//000473:                         n_2,
//000474:                         A, ax, ay, a_s,
//000475:                         d_cum, 0, 0, n_2,
//000476:                         p3, 0, 0, n_2,
//000477:                         s);
//000478:                 }, cancellationToken);
//000479: 
//000480:                 // p4 = a22 x (b21 - b11) 
//000481:                 Task t_p4 = Task.Factory.StartNew(() =>
//000482:                 {
//000483:                     matrix_sub(n_2, n_2,
//000484:                         B, bx + n_2, by, bs,
//000485:                         B, bx, by, bs,
//000486:                         e_cum, 0, 0, n_2);
//000487:                     strassen_mult_parallel(
//000488:                         cancellationToken,
//000489:                         n_2,
//000490:                         A, ax + n_2, ay + n_2, a_s,
//000491:                         e_cum, 0, 0, n_2,
//000492:                         p4, 0, 0, n_2,
//000493:                         s);
//000494:                 }, cancellationToken);
//000495: 
//000496:                 // p5 = (a11 + a12) x b22 
//000497:                 Task t_p5 = Task.Factory.StartNew(() =>
//000498:                 {
//000499:                     matrix_add(n_2, n_2,
//000500:                         A, ax, ay, a_s,
//000501:                         A, ax, ay + n_2, a_s,
//000502:                         f_cum, 0, 0, n_2);
//000503:                     strassen_mult_parallel(
//000504:                         cancellationToken,
//000505:                         n_2,
//000506:                         f_cum, 0, 0, n_2,
//000507:                         B, bx + n_2, by + n_2, bs,
//000508:                         p5, 0, 0, n_2,
//000509:                         s);
//000510:                 }, cancellationToken);
//000511: 
//000512:                 // p6 = (a21 - a11) x (b11 + b12) 
//000513:                 Task t_p6 = Task.Factory.StartNew(() =>
//000514:                 {
//000515:                     matrix_sub(n_2, n_2,
//000516:                         A, ax + n_2, ay, a_s,
//000517:                         A, ax, ay, a_s,
//000518:                         g_cum, 0, 0, n_2);
//000519:                     matrix_add(n_2, n_2,
//000520:                         B, bx, by, bs,
//000521:                         B, bx, by + n_2, bs,
//000522:                         h_cum, 0, 0, n_2);
//000523:                     strassen_mult_parallel(
//000524:                         cancellationToken,
//000525:                         n_2,
//000526:                         g_cum, 0, 0, n_2,
//000527:                         h_cum, 0, 0, n_2,
//000528:                         p6, 0, 0, n_2,
//000529:                         s);
//000530:                 }, cancellationToken);
//000531: 
//000532:                 // p7 = (a12 - a22) x (b21 + b22) 
//000533:                 Task t_p7 = Task.Factory.StartNew(() =>
//000534:                 {
//000535:                     matrix_sub(n_2, n_2,
//000536:                         A, ax, ay + n_2, a_s,
//000537:                         A, ax + n_2, ay + n_2, a_s,
//000538:                         i_cum, 0, 0, n_2);
//000539:                     matrix_add(n_2, n_2,
//000540:                         B, bx + n_2, by, bs,
//000541:                         B, bx + n_2, by + n_2, bs,
//000542:                         j_cum, 0, 0, n_2);
//000543:                     strassen_mult_parallel(
//000544:                         cancellationToken,
//000545:                         n_2,
//000546:                         i_cum, 0, 0, n_2,
//000547:                         j_cum, 0, 0, n_2,
//000548:                         p7, 0, 0, n_2,
//000549:                         s);
//000550:                 }, cancellationToken);
//000551: 
//000552:                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
//000553:                 catch (AggregateException ae)
//000554:                 {
//000555:                     ae.Flatten().Handle(e => e is TaskCanceledException);
//000556:                     cancellationToken.ThrowIfCancellationRequested();
//000557:                 }
//000558: 
//000559:                 // c11 = p1 + p4 - p5 + p7 
//000560:                 Task t_c11 = Task.Factory.StartNew(() =>
//000561:                 {
//000562:                     matrix_add(n_2, n_2,
//000563:                         p1, 0, 0, n_2,
//000564:                         p4, 0, 0, n_2,
//000565:                         C, cx, cy, cs);
//000566:                     matrix_sub(n_2, n_2,
//000567:                         C, cx, cy, cs,
//000568:                         p5, 0, 0, n_2,
//000569:                         C, cx, cy, cs);
//000570:                     matrix_add(n_2, n_2,
//000571:                         C, cx, cy, cs,
//000572:                         p7, 0, 0, n_2,
//000573:                         C, cx, cy, cs);
//000574:                 });
//000575: 
//000576:                 // c12 = p3 + p5 
//000577:                 Task t_c12 = Task.Factory.StartNew(() =>
//000578:                 {
//000579:                     matrix_add(n_2, n_2,
//000580:                         p3, 0, 0, n_2,
//000581:                         p5, 0, 0, n_2,
//000582:                         C, cx, cy + n_2, cs);
//000583:                 });
//000584: 
//000585:                 // c21 = p2 + p4 
//000586:                 Task t_c21 = Task.Factory.StartNew(() =>
//000587:                 {
//000588:                     matrix_add(n_2, n_2,
//000589:                         p2, 0, 0, n_2,
//000590:                         p4, 0, 0, n_2,
//000591:                         C, cx + n_2, cy, cs);
//000592:                 });
//000593: 
//000594:                 // c22 = p1 + p3 - p2 + p6 
//000595:                 Task t_c22 = Task.Factory.StartNew(() =>
//000596:                 {
//000597:                     matrix_add(n_2, n_2,
//000598:                         p1, 0, 0, n_2,
//000599:                         p3, 0, 0, n_2,
//000600:                         C, cx + n_2, cy + n_2, cs);
//000601:                     matrix_sub(n_2, n_2,
//000602:                         C, cx + n_2, cy + n_2, cs,
//000603:                         p2, 0, 0, n_2,
//000604:                         C, cx + n_2, cy + n_2, cs);
//000605:                     matrix_add(n_2, n_2,
//000606:                         C, cx + n_2, cy + n_2, cs,
//000607:                         p6, 0, 0, n_2,
//000608:                         C, cx + n_2, cy + n_2, cs);
//000609:                 });
//000610: 
//000611:                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
//000612:             }
//000613:         }
//000614:     }
//000615: }
      IL_009f:  ldloc.3
      IL_00a0:  brtrue     IL_0008

      IL_00a5:  ret
    } // end of method '<>c__DisplayClass2'::'<matrix_mult_parallel>b__1'

  } // end of class '<>c__DisplayClass2'

  .class auto ansi sealed nested private beforefieldinit '<>c__DisplayClass11'
         extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .field public valuetype [mscorlib]System.Threading.CancellationToken cancellationToken
    .field public int32* A
    .field public int32 ax
    .field public int32 ay
    .field public int32 a_s
    .field public int32* B
    .field public int32 bx
    .field public int32 by
    .field public int32 bs
    .field public int32* C
    .field public int32 cx
    .field public int32 cy
    .field public int32 cs
    .field public int32 s
    .method public hidebysig specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      // Code size       7 (0x7)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ret
    } // end of method '<>c__DisplayClass11'::.ctor

  } // end of class '<>c__DisplayClass11'

  .class auto ansi sealed nested private beforefieldinit '<>c__DisplayClass13'
         extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .field public int32 n_2
    .method public hidebysig specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      // Code size       7 (0x7)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ret
    } // end of method '<>c__DisplayClass13'::.ctor

  } // end of class '<>c__DisplayClass13'

  .class auto ansi sealed nested private beforefieldinit '<>c__DisplayClass15'
         extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .field public class Matrix/'<>c__DisplayClass13' 'CS$<>8__locals14'
    .field public class Matrix/'<>c__DisplayClass11' 'CS$<>8__locals12'
    .field public int32* a_cum
    .field public int32* b_cum
    .field public int32* c_cum
    .field public int32* d_cum
    .field public int32* e_cum
    .field public int32* f_cum
    .field public int32* g_cum
    .field public int32* h_cum
    .field public int32* i_cum
    .field public int32* j_cum
    .field public int32* p1
    .field public int32* p2
    .field public int32* p3
    .field public int32* p4
    .field public int32* p5
    .field public int32* p6
    .field public int32* p7
    .method public hidebysig specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      // Code size       7 (0x7)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  ret
    } // end of method '<>c__DisplayClass15'::.ctor

    .method public hidebysig instance void 
            '<strassen_mult_parallel>b__4'() cil managed
    {
      // Code size       416 (0x1a0)
      .maxstack  15
//000430:                 {
      IL_0000:  nop
//000431:                     matrix_add(n_2, n_2,
      IL_0001:  ldarg.0
      IL_0002:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_0007:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_000c:  ldarg.0
      IL_000d:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_0012:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_0017:  ldarg.0
      IL_0018:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_001d:  ldfld      int32* Matrix/'<>c__DisplayClass11'::A
      IL_0022:  ldarg.0
      IL_0023:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_0028:  ldfld      int32 Matrix/'<>c__DisplayClass11'::ax
      IL_002d:  ldarg.0
      IL_002e:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_0033:  ldfld      int32 Matrix/'<>c__DisplayClass11'::ay
      IL_0038:  ldarg.0
      IL_0039:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_003e:  ldfld      int32 Matrix/'<>c__DisplayClass11'::a_s
      IL_0043:  ldarg.0
      IL_0044:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_0049:  ldfld      int32* Matrix/'<>c__DisplayClass11'::A
      IL_004e:  ldarg.0
      IL_004f:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_0054:  ldfld      int32 Matrix/'<>c__DisplayClass11'::ax
      IL_0059:  ldarg.0
      IL_005a:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_005f:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_0064:  add
      IL_0065:  ldarg.0
      IL_0066:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_006b:  ldfld      int32 Matrix/'<>c__DisplayClass11'::ay
      IL_0070:  ldarg.0
      IL_0071:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_0076:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_007b:  add
      IL_007c:  ldarg.0
      IL_007d:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_0082:  ldfld      int32 Matrix/'<>c__DisplayClass11'::a_s
      IL_0087:  ldarg.0
      IL_0088:  ldfld      int32* Matrix/'<>c__DisplayClass15'::a_cum
      IL_008d:  ldc.i4.0
      IL_008e:  ldc.i4.0
      IL_008f:  ldarg.0
      IL_0090:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_0095:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_009a:  call       void Matrix::matrix_add(int32,
                                                   int32,
                                                   int32*,
                                                   int32,
                                                   int32,
                                                   int32,
                                                   int32*,
                                                   int32,
                                                   int32,
                                                   int32,
                                                   int32*,
                                                   int32,
                                                   int32,
                                                   int32)
      IL_009f:  nop
//000432:                         A, ax, ay, a_s,
//000433:                         A, ax + n_2, ay + n_2, a_s,
//000434:                         a_cum, 0, 0, n_2);
//000435:                     matrix_add(n_2, n_2,
      IL_00a0:  ldarg.0
      IL_00a1:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_00a6:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_00ab:  ldarg.0
      IL_00ac:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_00b1:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_00b6:  ldarg.0
      IL_00b7:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_00bc:  ldfld      int32* Matrix/'<>c__DisplayClass11'::B
      IL_00c1:  ldarg.0
      IL_00c2:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_00c7:  ldfld      int32 Matrix/'<>c__DisplayClass11'::bx
      IL_00cc:  ldarg.0
      IL_00cd:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_00d2:  ldfld      int32 Matrix/'<>c__DisplayClass11'::by
      IL_00d7:  ldarg.0
      IL_00d8:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_00dd:  ldfld      int32 Matrix/'<>c__DisplayClass11'::bs
      IL_00e2:  ldarg.0
      IL_00e3:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_00e8:  ldfld      int32* Matrix/'<>c__DisplayClass11'::B
      IL_00ed:  ldarg.0
      IL_00ee:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_00f3:  ldfld      int32 Matrix/'<>c__DisplayClass11'::bx
      IL_00f8:  ldarg.0
      IL_00f9:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_00fe:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_0103:  add
      IL_0104:  ldarg.0
      IL_0105:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_010a:  ldfld      int32 Matrix/'<>c__DisplayClass11'::by
      IL_010f:  ldarg.0
      IL_0110:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_0115:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_011a:  add
      IL_011b:  ldarg.0
      IL_011c:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_0121:  ldfld      int32 Matrix/'<>c__DisplayClass11'::bs
      IL_0126:  ldarg.0
      IL_0127:  ldfld      int32* Matrix/'<>c__DisplayClass15'::b_cum
      IL_012c:  ldc.i4.0
      IL_012d:  ldc.i4.0
      IL_012e:  ldarg.0
      IL_012f:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_0134:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_0139:  call       void Matrix::matrix_add(int32,
                                                   int32,
                                                   int32*,
                                                   int32,
                                                   int32,
                                                   int32,
                                                   int32*,
                                                   int32,
                                                   int32,
                                                   int32,
                                                   int32*,
                                                   int32,
                                                   int32,
                                                   int32)
      IL_013e:  nop
//000436:                         B, bx, by, bs,
//000437:                         B, bx + n_2, by + n_2, bs,
//000438:                         b_cum, 0, 0, n_2);
//000439:                     strassen_mult_parallel(
      IL_013f:  ldarg.0
      IL_0140:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_0145:  ldfld      valuetype [mscorlib]System.Threading.CancellationToken Matrix/'<>c__DisplayClass11'::cancellationToken
      IL_014a:  ldarg.0
      IL_014b:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_0150:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_0155:  ldarg.0
      IL_0156:  ldfld      int32* Matrix/'<>c__DisplayClass15'::a_cum
      IL_015b:  ldc.i4.0
      IL_015c:  ldc.i4.0
      IL_015d:  ldarg.0
      IL_015e:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_0163:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_0168:  ldarg.0
      IL_0169:  ldfld      int32* Matrix/'<>c__DisplayClass15'::b_cum
      IL_016e:  ldc.i4.0
      IL_016f:  ldc.i4.0
      IL_0170:  ldarg.0
      IL_0171:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_0176:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_017b:  ldarg.0
      IL_017c:  ldfld      int32* Matrix/'<>c__DisplayClass15'::p1
      IL_0181:  ldc.i4.0
      IL_0182:  ldc.i4.0
      IL_0183:  ldarg.0
      IL_0184:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_0189:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_018e:  ldarg.0
      IL_018f:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_0194:  ldfld      int32 Matrix/'<>c__DisplayClass11'::s
      IL_0199:  call       void Matrix::strassen_mult_parallel(valuetype [mscorlib]System.Threading.CancellationToken,
                                                               int32,
                                                               int32*,
                                                               int32,
                                                               int32,
                                                               int32,
                                                               int32*,
                                                               int32,
                                                               int32,
                                                               int32,
                                                               int32*,
                                                               int32,
                                                               int32,
                                                               int32,
                                                               int32)
      IL_019e:  nop
//000440:                         cancellationToken,
//000441:                         n_2,
//000442:                         a_cum, 0, 0, n_2,
//000443:                         b_cum, 0, 0, n_2,
//000444:                         p1, 0, 0, n_2,
//000445:                         s);
//000446:                 }, cancellationToken);
//000447: 
//000448:                 // p2 = (a21 + a22) * b11 
//000449:                 Task t_p2 = Task.Factory.StartNew(() =>
//000450:                 {
//000451:                     matrix_add(n_2, n_2,
//000452:                         A, ax + n_2, ay, a_s,
//000453:                         A, ax + n_2, ay + n_2, a_s,
//000454:                         c_cum, 0, 0, n_2);
//000455:                     strassen_mult_parallel(
//000456:                         cancellationToken,
//000457:                         n_2,
//000458:                         c_cum, 0, 0, n_2,
//000459:                         B, bx, by, bs,
//000460:                         p2, 0, 0, n_2,
//000461:                         s);
//000462:                 }, cancellationToken);
//000463: 
//000464:                 // p3 = a11 x (b12 - b22) 
//000465:                 Task t_p3 = Task.Factory.StartNew(() =>
//000466:                 {
//000467:                     matrix_sub(n_2, n_2,
//000468:                         B, bx, by + n_2, bs,
//000469:                         B, bx + n_2, by + n_2, bs,
//000470:                         d_cum, 0, 0, n_2);
//000471:                     strassen_mult_parallel(
//000472:                         cancellationToken,
//000473:                         n_2,
//000474:                         A, ax, ay, a_s,
//000475:                         d_cum, 0, 0, n_2,
//000476:                         p3, 0, 0, n_2,
//000477:                         s);
//000478:                 }, cancellationToken);
//000479: 
//000480:                 // p4 = a22 x (b21 - b11) 
//000481:                 Task t_p4 = Task.Factory.StartNew(() =>
//000482:                 {
//000483:                     matrix_sub(n_2, n_2,
//000484:                         B, bx + n_2, by, bs,
//000485:                         B, bx, by, bs,
//000486:                         e_cum, 0, 0, n_2);
//000487:                     strassen_mult_parallel(
//000488:                         cancellationToken,
//000489:                         n_2,
//000490:                         A, ax + n_2, ay + n_2, a_s,
//000491:                         e_cum, 0, 0, n_2,
//000492:                         p4, 0, 0, n_2,
//000493:                         s);
//000494:                 }, cancellationToken);
//000495: 
//000496:                 // p5 = (a11 + a12) x b22 
//000497:                 Task t_p5 = Task.Factory.StartNew(() =>
//000498:                 {
//000499:                     matrix_add(n_2, n_2,
//000500:                         A, ax, ay, a_s,
//000501:                         A, ax, ay + n_2, a_s,
//000502:                         f_cum, 0, 0, n_2);
//000503:                     strassen_mult_parallel(
//000504:                         cancellationToken,
//000505:                         n_2,
//000506:                         f_cum, 0, 0, n_2,
//000507:                         B, bx + n_2, by + n_2, bs,
//000508:                         p5, 0, 0, n_2,
//000509:                         s);
//000510:                 }, cancellationToken);
//000511: 
//000512:                 // p6 = (a21 - a11) x (b11 + b12) 
//000513:                 Task t_p6 = Task.Factory.StartNew(() =>
//000514:                 {
//000515:                     matrix_sub(n_2, n_2,
//000516:                         A, ax + n_2, ay, a_s,
//000517:                         A, ax, ay, a_s,
//000518:                         g_cum, 0, 0, n_2);
//000519:                     matrix_add(n_2, n_2,
//000520:                         B, bx, by, bs,
//000521:                         B, bx, by + n_2, bs,
//000522:                         h_cum, 0, 0, n_2);
//000523:                     strassen_mult_parallel(
//000524:                         cancellationToken,
//000525:                         n_2,
//000526:                         g_cum, 0, 0, n_2,
//000527:                         h_cum, 0, 0, n_2,
//000528:                         p6, 0, 0, n_2,
//000529:                         s);
//000530:                 }, cancellationToken);
//000531: 
//000532:                 // p7 = (a12 - a22) x (b21 + b22) 
//000533:                 Task t_p7 = Task.Factory.StartNew(() =>
//000534:                 {
//000535:                     matrix_sub(n_2, n_2,
//000536:                         A, ax, ay + n_2, a_s,
//000537:                         A, ax + n_2, ay + n_2, a_s,
//000538:                         i_cum, 0, 0, n_2);
//000539:                     matrix_add(n_2, n_2,
//000540:                         B, bx + n_2, by, bs,
//000541:                         B, bx + n_2, by + n_2, bs,
//000542:                         j_cum, 0, 0, n_2);
//000543:                     strassen_mult_parallel(
//000544:                         cancellationToken,
//000545:                         n_2,
//000546:                         i_cum, 0, 0, n_2,
//000547:                         j_cum, 0, 0, n_2,
//000548:                         p7, 0, 0, n_2,
//000549:                         s);
//000550:                 }, cancellationToken);
//000551: 
//000552:                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
//000553:                 catch (AggregateException ae)
//000554:                 {
//000555:                     ae.Flatten().Handle(e => e is TaskCanceledException);
//000556:                     cancellationToken.ThrowIfCancellationRequested();
//000557:                 }
//000558: 
//000559:                 // c11 = p1 + p4 - p5 + p7 
//000560:                 Task t_c11 = Task.Factory.StartNew(() =>
//000561:                 {
//000562:                     matrix_add(n_2, n_2,
//000563:                         p1, 0, 0, n_2,
//000564:                         p4, 0, 0, n_2,
//000565:                         C, cx, cy, cs);
//000566:                     matrix_sub(n_2, n_2,
//000567:                         C, cx, cy, cs,
//000568:                         p5, 0, 0, n_2,
//000569:                         C, cx, cy, cs);
//000570:                     matrix_add(n_2, n_2,
//000571:                         C, cx, cy, cs,
//000572:                         p7, 0, 0, n_2,
//000573:                         C, cx, cy, cs);
//000574:                 });
//000575: 
//000576:                 // c12 = p3 + p5 
//000577:                 Task t_c12 = Task.Factory.StartNew(() =>
//000578:                 {
//000579:                     matrix_add(n_2, n_2,
//000580:                         p3, 0, 0, n_2,
//000581:                         p5, 0, 0, n_2,
//000582:                         C, cx, cy + n_2, cs);
//000583:                 });
//000584: 
//000585:                 // c21 = p2 + p4 
//000586:                 Task t_c21 = Task.Factory.StartNew(() =>
//000587:                 {
//000588:                     matrix_add(n_2, n_2,
//000589:                         p2, 0, 0, n_2,
//000590:                         p4, 0, 0, n_2,
//000591:                         C, cx + n_2, cy, cs);
//000592:                 });
//000593: 
//000594:                 // c22 = p1 + p3 - p2 + p6 
//000595:                 Task t_c22 = Task.Factory.StartNew(() =>
//000596:                 {
//000597:                     matrix_add(n_2, n_2,
//000598:                         p1, 0, 0, n_2,
//000599:                         p3, 0, 0, n_2,
//000600:                         C, cx + n_2, cy + n_2, cs);
//000601:                     matrix_sub(n_2, n_2,
//000602:                         C, cx + n_2, cy + n_2, cs,
//000603:                         p2, 0, 0, n_2,
//000604:                         C, cx + n_2, cy + n_2, cs);
//000605:                     matrix_add(n_2, n_2,
//000606:                         C, cx + n_2, cy + n_2, cs,
//000607:                         p6, 0, 0, n_2,
//000608:                         C, cx + n_2, cy + n_2, cs);
//000609:                 });
//000610: 
//000611:                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
//000612:             }
//000613:         }
//000614:     }
//000615: }
      IL_019f:  ret
    } // end of method '<>c__DisplayClass15'::'<strassen_mult_parallel>b__4'

    .method public hidebysig instance void 
            '<strassen_mult_parallel>b__5'() cil managed
    {
      // Code size       294 (0x126)
      .maxstack  15
//000450:                 {
      IL_0000:  nop
//000451:                     matrix_add(n_2, n_2,
      IL_0001:  ldarg.0
      IL_0002:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_0007:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_000c:  ldarg.0
      IL_000d:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_0012:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_0017:  ldarg.0
      IL_0018:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_001d:  ldfld      int32* Matrix/'<>c__DisplayClass11'::A
      IL_0022:  ldarg.0
      IL_0023:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_0028:  ldfld      int32 Matrix/'<>c__DisplayClass11'::ax
      IL_002d:  ldarg.0
      IL_002e:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_0033:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_0038:  add
      IL_0039:  ldarg.0
      IL_003a:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_003f:  ldfld      int32 Matrix/'<>c__DisplayClass11'::ay
      IL_0044:  ldarg.0
      IL_0045:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_004a:  ldfld      int32 Matrix/'<>c__DisplayClass11'::a_s
      IL_004f:  ldarg.0
      IL_0050:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_0055:  ldfld      int32* Matrix/'<>c__DisplayClass11'::A
      IL_005a:  ldarg.0
      IL_005b:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_0060:  ldfld      int32 Matrix/'<>c__DisplayClass11'::ax
      IL_0065:  ldarg.0
      IL_0066:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_006b:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_0070:  add
      IL_0071:  ldarg.0
      IL_0072:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_0077:  ldfld      int32 Matrix/'<>c__DisplayClass11'::ay
      IL_007c:  ldarg.0
      IL_007d:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_0082:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_0087:  add
      IL_0088:  ldarg.0
      IL_0089:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_008e:  ldfld      int32 Matrix/'<>c__DisplayClass11'::a_s
      IL_0093:  ldarg.0
      IL_0094:  ldfld      int32* Matrix/'<>c__DisplayClass15'::c_cum
      IL_0099:  ldc.i4.0
      IL_009a:  ldc.i4.0
      IL_009b:  ldarg.0
      IL_009c:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_00a1:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_00a6:  call       void Matrix::matrix_add(int32,
                                                   int32,
                                                   int32*,
                                                   int32,
                                                   int32,
                                                   int32,
                                                   int32*,
                                                   int32,
                                                   int32,
                                                   int32,
                                                   int32*,
                                                   int32,
                                                   int32,
                                                   int32)
      IL_00ab:  nop
//000452:                         A, ax + n_2, ay, a_s,
//000453:                         A, ax + n_2, ay + n_2, a_s,
//000454:                         c_cum, 0, 0, n_2);
//000455:                     strassen_mult_parallel(
      IL_00ac:  ldarg.0
      IL_00ad:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_00b2:  ldfld      valuetype [mscorlib]System.Threading.CancellationToken Matrix/'<>c__DisplayClass11'::cancellationToken
      IL_00b7:  ldarg.0
      IL_00b8:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_00bd:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_00c2:  ldarg.0
      IL_00c3:  ldfld      int32* Matrix/'<>c__DisplayClass15'::c_cum
      IL_00c8:  ldc.i4.0
      IL_00c9:  ldc.i4.0
      IL_00ca:  ldarg.0
      IL_00cb:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_00d0:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_00d5:  ldarg.0
      IL_00d6:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_00db:  ldfld      int32* Matrix/'<>c__DisplayClass11'::B
      IL_00e0:  ldarg.0
      IL_00e1:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_00e6:  ldfld      int32 Matrix/'<>c__DisplayClass11'::bx
      IL_00eb:  ldarg.0
      IL_00ec:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_00f1:  ldfld      int32 Matrix/'<>c__DisplayClass11'::by
      IL_00f6:  ldarg.0
      IL_00f7:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_00fc:  ldfld      int32 Matrix/'<>c__DisplayClass11'::bs
      IL_0101:  ldarg.0
      IL_0102:  ldfld      int32* Matrix/'<>c__DisplayClass15'::p2
      IL_0107:  ldc.i4.0
      IL_0108:  ldc.i4.0
      IL_0109:  ldarg.0
      IL_010a:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_010f:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_0114:  ldarg.0
      IL_0115:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_011a:  ldfld      int32 Matrix/'<>c__DisplayClass11'::s
      IL_011f:  call       void Matrix::strassen_mult_parallel(valuetype [mscorlib]System.Threading.CancellationToken,
                                                               int32,
                                                               int32*,
                                                               int32,
                                                               int32,
                                                               int32,
                                                               int32*,
                                                               int32,
                                                               int32,
                                                               int32,
                                                               int32*,
                                                               int32,
                                                               int32,
                                                               int32,
                                                               int32)
      IL_0124:  nop
//000456:                         cancellationToken,
//000457:                         n_2,
//000458:                         c_cum, 0, 0, n_2,
//000459:                         B, bx, by, bs,
//000460:                         p2, 0, 0, n_2,
//000461:                         s);
//000462:                 }, cancellationToken);
//000463: 
//000464:                 // p3 = a11 x (b12 - b22) 
//000465:                 Task t_p3 = Task.Factory.StartNew(() =>
//000466:                 {
//000467:                     matrix_sub(n_2, n_2,
//000468:                         B, bx, by + n_2, bs,
//000469:                         B, bx + n_2, by + n_2, bs,
//000470:                         d_cum, 0, 0, n_2);
//000471:                     strassen_mult_parallel(
//000472:                         cancellationToken,
//000473:                         n_2,
//000474:                         A, ax, ay, a_s,
//000475:                         d_cum, 0, 0, n_2,
//000476:                         p3, 0, 0, n_2,
//000477:                         s);
//000478:                 }, cancellationToken);
//000479: 
//000480:                 // p4 = a22 x (b21 - b11) 
//000481:                 Task t_p4 = Task.Factory.StartNew(() =>
//000482:                 {
//000483:                     matrix_sub(n_2, n_2,
//000484:                         B, bx + n_2, by, bs,
//000485:                         B, bx, by, bs,
//000486:                         e_cum, 0, 0, n_2);
//000487:                     strassen_mult_parallel(
//000488:                         cancellationToken,
//000489:                         n_2,
//000490:                         A, ax + n_2, ay + n_2, a_s,
//000491:                         e_cum, 0, 0, n_2,
//000492:                         p4, 0, 0, n_2,
//000493:                         s);
//000494:                 }, cancellationToken);
//000495: 
//000496:                 // p5 = (a11 + a12) x b22 
//000497:                 Task t_p5 = Task.Factory.StartNew(() =>
//000498:                 {
//000499:                     matrix_add(n_2, n_2,
//000500:                         A, ax, ay, a_s,
//000501:                         A, ax, ay + n_2, a_s,
//000502:                         f_cum, 0, 0, n_2);
//000503:                     strassen_mult_parallel(
//000504:                         cancellationToken,
//000505:                         n_2,
//000506:                         f_cum, 0, 0, n_2,
//000507:                         B, bx + n_2, by + n_2, bs,
//000508:                         p5, 0, 0, n_2,
//000509:                         s);
//000510:                 }, cancellationToken);
//000511: 
//000512:                 // p6 = (a21 - a11) x (b11 + b12) 
//000513:                 Task t_p6 = Task.Factory.StartNew(() =>
//000514:                 {
//000515:                     matrix_sub(n_2, n_2,
//000516:                         A, ax + n_2, ay, a_s,
//000517:                         A, ax, ay, a_s,
//000518:                         g_cum, 0, 0, n_2);
//000519:                     matrix_add(n_2, n_2,
//000520:                         B, bx, by, bs,
//000521:                         B, bx, by + n_2, bs,
//000522:                         h_cum, 0, 0, n_2);
//000523:                     strassen_mult_parallel(
//000524:                         cancellationToken,
//000525:                         n_2,
//000526:                         g_cum, 0, 0, n_2,
//000527:                         h_cum, 0, 0, n_2,
//000528:                         p6, 0, 0, n_2,
//000529:                         s);
//000530:                 }, cancellationToken);
//000531: 
//000532:                 // p7 = (a12 - a22) x (b21 + b22) 
//000533:                 Task t_p7 = Task.Factory.StartNew(() =>
//000534:                 {
//000535:                     matrix_sub(n_2, n_2,
//000536:                         A, ax, ay + n_2, a_s,
//000537:                         A, ax + n_2, ay + n_2, a_s,
//000538:                         i_cum, 0, 0, n_2);
//000539:                     matrix_add(n_2, n_2,
//000540:                         B, bx + n_2, by, bs,
//000541:                         B, bx + n_2, by + n_2, bs,
//000542:                         j_cum, 0, 0, n_2);
//000543:                     strassen_mult_parallel(
//000544:                         cancellationToken,
//000545:                         n_2,
//000546:                         i_cum, 0, 0, n_2,
//000547:                         j_cum, 0, 0, n_2,
//000548:                         p7, 0, 0, n_2,
//000549:                         s);
//000550:                 }, cancellationToken);
//000551: 
//000552:                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
//000553:                 catch (AggregateException ae)
//000554:                 {
//000555:                     ae.Flatten().Handle(e => e is TaskCanceledException);
//000556:                     cancellationToken.ThrowIfCancellationRequested();
//000557:                 }
//000558: 
//000559:                 // c11 = p1 + p4 - p5 + p7 
//000560:                 Task t_c11 = Task.Factory.StartNew(() =>
//000561:                 {
//000562:                     matrix_add(n_2, n_2,
//000563:                         p1, 0, 0, n_2,
//000564:                         p4, 0, 0, n_2,
//000565:                         C, cx, cy, cs);
//000566:                     matrix_sub(n_2, n_2,
//000567:                         C, cx, cy, cs,
//000568:                         p5, 0, 0, n_2,
//000569:                         C, cx, cy, cs);
//000570:                     matrix_add(n_2, n_2,
//000571:                         C, cx, cy, cs,
//000572:                         p7, 0, 0, n_2,
//000573:                         C, cx, cy, cs);
//000574:                 });
//000575: 
//000576:                 // c12 = p3 + p5 
//000577:                 Task t_c12 = Task.Factory.StartNew(() =>
//000578:                 {
//000579:                     matrix_add(n_2, n_2,
//000580:                         p3, 0, 0, n_2,
//000581:                         p5, 0, 0, n_2,
//000582:                         C, cx, cy + n_2, cs);
//000583:                 });
//000584: 
//000585:                 // c21 = p2 + p4 
//000586:                 Task t_c21 = Task.Factory.StartNew(() =>
//000587:                 {
//000588:                     matrix_add(n_2, n_2,
//000589:                         p2, 0, 0, n_2,
//000590:                         p4, 0, 0, n_2,
//000591:                         C, cx + n_2, cy, cs);
//000592:                 });
//000593: 
//000594:                 // c22 = p1 + p3 - p2 + p6 
//000595:                 Task t_c22 = Task.Factory.StartNew(() =>
//000596:                 {
//000597:                     matrix_add(n_2, n_2,
//000598:                         p1, 0, 0, n_2,
//000599:                         p3, 0, 0, n_2,
//000600:                         C, cx + n_2, cy + n_2, cs);
//000601:                     matrix_sub(n_2, n_2,
//000602:                         C, cx + n_2, cy + n_2, cs,
//000603:                         p2, 0, 0, n_2,
//000604:                         C, cx + n_2, cy + n_2, cs);
//000605:                     matrix_add(n_2, n_2,
//000606:                         C, cx + n_2, cy + n_2, cs,
//000607:                         p6, 0, 0, n_2,
//000608:                         C, cx + n_2, cy + n_2, cs);
//000609:                 });
//000610: 
//000611:                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
//000612:             }
//000613:         }
//000614:     }
//000615: }
      IL_0125:  ret
    } // end of method '<>c__DisplayClass15'::'<strassen_mult_parallel>b__5'

    .method public hidebysig instance void 
            '<strassen_mult_parallel>b__6'() cil managed
    {
      // Code size       294 (0x126)
      .maxstack  15
//000466:                 {
      IL_0000:  nop
//000467:                     matrix_sub(n_2, n_2,
      IL_0001:  ldarg.0
      IL_0002:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_0007:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_000c:  ldarg.0
      IL_000d:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_0012:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_0017:  ldarg.0
      IL_0018:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_001d:  ldfld      int32* Matrix/'<>c__DisplayClass11'::B
      IL_0022:  ldarg.0
      IL_0023:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_0028:  ldfld      int32 Matrix/'<>c__DisplayClass11'::bx
      IL_002d:  ldarg.0
      IL_002e:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_0033:  ldfld      int32 Matrix/'<>c__DisplayClass11'::by
      IL_0038:  ldarg.0
      IL_0039:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_003e:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_0043:  add
      IL_0044:  ldarg.0
      IL_0045:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_004a:  ldfld      int32 Matrix/'<>c__DisplayClass11'::bs
      IL_004f:  ldarg.0
      IL_0050:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_0055:  ldfld      int32* Matrix/'<>c__DisplayClass11'::B
      IL_005a:  ldarg.0
      IL_005b:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_0060:  ldfld      int32 Matrix/'<>c__DisplayClass11'::bx
      IL_0065:  ldarg.0
      IL_0066:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_006b:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_0070:  add
      IL_0071:  ldarg.0
      IL_0072:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_0077:  ldfld      int32 Matrix/'<>c__DisplayClass11'::by
      IL_007c:  ldarg.0
      IL_007d:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_0082:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_0087:  add
      IL_0088:  ldarg.0
      IL_0089:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_008e:  ldfld      int32 Matrix/'<>c__DisplayClass11'::bs
      IL_0093:  ldarg.0
      IL_0094:  ldfld      int32* Matrix/'<>c__DisplayClass15'::d_cum
      IL_0099:  ldc.i4.0
      IL_009a:  ldc.i4.0
      IL_009b:  ldarg.0
      IL_009c:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_00a1:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_00a6:  call       void Matrix::matrix_sub(int32,
                                                   int32,
                                                   int32*,
                                                   int32,
                                                   int32,
                                                   int32,
                                                   int32*,
                                                   int32,
                                                   int32,
                                                   int32,
                                                   int32*,
                                                   int32,
                                                   int32,
                                                   int32)
      IL_00ab:  nop
//000468:                         B, bx, by + n_2, bs,
//000469:                         B, bx + n_2, by + n_2, bs,
//000470:                         d_cum, 0, 0, n_2);
//000471:                     strassen_mult_parallel(
      IL_00ac:  ldarg.0
      IL_00ad:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_00b2:  ldfld      valuetype [mscorlib]System.Threading.CancellationToken Matrix/'<>c__DisplayClass11'::cancellationToken
      IL_00b7:  ldarg.0
      IL_00b8:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_00bd:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_00c2:  ldarg.0
      IL_00c3:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_00c8:  ldfld      int32* Matrix/'<>c__DisplayClass11'::A
      IL_00cd:  ldarg.0
      IL_00ce:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_00d3:  ldfld      int32 Matrix/'<>c__DisplayClass11'::ax
      IL_00d8:  ldarg.0
      IL_00d9:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_00de:  ldfld      int32 Matrix/'<>c__DisplayClass11'::ay
      IL_00e3:  ldarg.0
      IL_00e4:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_00e9:  ldfld      int32 Matrix/'<>c__DisplayClass11'::a_s
      IL_00ee:  ldarg.0
      IL_00ef:  ldfld      int32* Matrix/'<>c__DisplayClass15'::d_cum
      IL_00f4:  ldc.i4.0
      IL_00f5:  ldc.i4.0
      IL_00f6:  ldarg.0
      IL_00f7:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_00fc:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_0101:  ldarg.0
      IL_0102:  ldfld      int32* Matrix/'<>c__DisplayClass15'::p3
      IL_0107:  ldc.i4.0
      IL_0108:  ldc.i4.0
      IL_0109:  ldarg.0
      IL_010a:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_010f:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_0114:  ldarg.0
      IL_0115:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_011a:  ldfld      int32 Matrix/'<>c__DisplayClass11'::s
      IL_011f:  call       void Matrix::strassen_mult_parallel(valuetype [mscorlib]System.Threading.CancellationToken,
                                                               int32,
                                                               int32*,
                                                               int32,
                                                               int32,
                                                               int32,
                                                               int32*,
                                                               int32,
                                                               int32,
                                                               int32,
                                                               int32*,
                                                               int32,
                                                               int32,
                                                               int32,
                                                               int32)
      IL_0124:  nop
//000472:                         cancellationToken,
//000473:                         n_2,
//000474:                         A, ax, ay, a_s,
//000475:                         d_cum, 0, 0, n_2,
//000476:                         p3, 0, 0, n_2,
//000477:                         s);
//000478:                 }, cancellationToken);
//000479: 
//000480:                 // p4 = a22 x (b21 - b11) 
//000481:                 Task t_p4 = Task.Factory.StartNew(() =>
//000482:                 {
//000483:                     matrix_sub(n_2, n_2,
//000484:                         B, bx + n_2, by, bs,
//000485:                         B, bx, by, bs,
//000486:                         e_cum, 0, 0, n_2);
//000487:                     strassen_mult_parallel(
//000488:                         cancellationToken,
//000489:                         n_2,
//000490:                         A, ax + n_2, ay + n_2, a_s,
//000491:                         e_cum, 0, 0, n_2,
//000492:                         p4, 0, 0, n_2,
//000493:                         s);
//000494:                 }, cancellationToken);
//000495: 
//000496:                 // p5 = (a11 + a12) x b22 
//000497:                 Task t_p5 = Task.Factory.StartNew(() =>
//000498:                 {
//000499:                     matrix_add(n_2, n_2,
//000500:                         A, ax, ay, a_s,
//000501:                         A, ax, ay + n_2, a_s,
//000502:                         f_cum, 0, 0, n_2);
//000503:                     strassen_mult_parallel(
//000504:                         cancellationToken,
//000505:                         n_2,
//000506:                         f_cum, 0, 0, n_2,
//000507:                         B, bx + n_2, by + n_2, bs,
//000508:                         p5, 0, 0, n_2,
//000509:                         s);
//000510:                 }, cancellationToken);
//000511: 
//000512:                 // p6 = (a21 - a11) x (b11 + b12) 
//000513:                 Task t_p6 = Task.Factory.StartNew(() =>
//000514:                 {
//000515:                     matrix_sub(n_2, n_2,
//000516:                         A, ax + n_2, ay, a_s,
//000517:                         A, ax, ay, a_s,
//000518:                         g_cum, 0, 0, n_2);
//000519:                     matrix_add(n_2, n_2,
//000520:                         B, bx, by, bs,
//000521:                         B, bx, by + n_2, bs,
//000522:                         h_cum, 0, 0, n_2);
//000523:                     strassen_mult_parallel(
//000524:                         cancellationToken,
//000525:                         n_2,
//000526:                         g_cum, 0, 0, n_2,
//000527:                         h_cum, 0, 0, n_2,
//000528:                         p6, 0, 0, n_2,
//000529:                         s);
//000530:                 }, cancellationToken);
//000531: 
//000532:                 // p7 = (a12 - a22) x (b21 + b22) 
//000533:                 Task t_p7 = Task.Factory.StartNew(() =>
//000534:                 {
//000535:                     matrix_sub(n_2, n_2,
//000536:                         A, ax, ay + n_2, a_s,
//000537:                         A, ax + n_2, ay + n_2, a_s,
//000538:                         i_cum, 0, 0, n_2);
//000539:                     matrix_add(n_2, n_2,
//000540:                         B, bx + n_2, by, bs,
//000541:                         B, bx + n_2, by + n_2, bs,
//000542:                         j_cum, 0, 0, n_2);
//000543:                     strassen_mult_parallel(
//000544:                         cancellationToken,
//000545:                         n_2,
//000546:                         i_cum, 0, 0, n_2,
//000547:                         j_cum, 0, 0, n_2,
//000548:                         p7, 0, 0, n_2,
//000549:                         s);
//000550:                 }, cancellationToken);
//000551: 
//000552:                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
//000553:                 catch (AggregateException ae)
//000554:                 {
//000555:                     ae.Flatten().Handle(e => e is TaskCanceledException);
//000556:                     cancellationToken.ThrowIfCancellationRequested();
//000557:                 }
//000558: 
//000559:                 // c11 = p1 + p4 - p5 + p7 
//000560:                 Task t_c11 = Task.Factory.StartNew(() =>
//000561:                 {
//000562:                     matrix_add(n_2, n_2,
//000563:                         p1, 0, 0, n_2,
//000564:                         p4, 0, 0, n_2,
//000565:                         C, cx, cy, cs);
//000566:                     matrix_sub(n_2, n_2,
//000567:                         C, cx, cy, cs,
//000568:                         p5, 0, 0, n_2,
//000569:                         C, cx, cy, cs);
//000570:                     matrix_add(n_2, n_2,
//000571:                         C, cx, cy, cs,
//000572:                         p7, 0, 0, n_2,
//000573:                         C, cx, cy, cs);
//000574:                 });
//000575: 
//000576:                 // c12 = p3 + p5 
//000577:                 Task t_c12 = Task.Factory.StartNew(() =>
//000578:                 {
//000579:                     matrix_add(n_2, n_2,
//000580:                         p3, 0, 0, n_2,
//000581:                         p5, 0, 0, n_2,
//000582:                         C, cx, cy + n_2, cs);
//000583:                 });
//000584: 
//000585:                 // c21 = p2 + p4 
//000586:                 Task t_c21 = Task.Factory.StartNew(() =>
//000587:                 {
//000588:                     matrix_add(n_2, n_2,
//000589:                         p2, 0, 0, n_2,
//000590:                         p4, 0, 0, n_2,
//000591:                         C, cx + n_2, cy, cs);
//000592:                 });
//000593: 
//000594:                 // c22 = p1 + p3 - p2 + p6 
//000595:                 Task t_c22 = Task.Factory.StartNew(() =>
//000596:                 {
//000597:                     matrix_add(n_2, n_2,
//000598:                         p1, 0, 0, n_2,
//000599:                         p3, 0, 0, n_2,
//000600:                         C, cx + n_2, cy + n_2, cs);
//000601:                     matrix_sub(n_2, n_2,
//000602:                         C, cx + n_2, cy + n_2, cs,
//000603:                         p2, 0, 0, n_2,
//000604:                         C, cx + n_2, cy + n_2, cs);
//000605:                     matrix_add(n_2, n_2,
//000606:                         C, cx + n_2, cy + n_2, cs,
//000607:                         p6, 0, 0, n_2,
//000608:                         C, cx + n_2, cy + n_2, cs);
//000609:                 });
//000610: 
//000611:                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
//000612:             }
//000613:         }
//000614:     }
//000615: }
      IL_0125:  ret
    } // end of method '<>c__DisplayClass15'::'<strassen_mult_parallel>b__6'

    .method public hidebysig instance void 
            '<strassen_mult_parallel>b__7'() cil managed
    {
      // Code size       294 (0x126)
      .maxstack  15
//000482:                 {
      IL_0000:  nop
//000483:                     matrix_sub(n_2, n_2,
      IL_0001:  ldarg.0
      IL_0002:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_0007:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_000c:  ldarg.0
      IL_000d:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_0012:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_0017:  ldarg.0
      IL_0018:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_001d:  ldfld      int32* Matrix/'<>c__DisplayClass11'::B
      IL_0022:  ldarg.0
      IL_0023:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_0028:  ldfld      int32 Matrix/'<>c__DisplayClass11'::bx
      IL_002d:  ldarg.0
      IL_002e:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_0033:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_0038:  add
      IL_0039:  ldarg.0
      IL_003a:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_003f:  ldfld      int32 Matrix/'<>c__DisplayClass11'::by
      IL_0044:  ldarg.0
      IL_0045:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_004a:  ldfld      int32 Matrix/'<>c__DisplayClass11'::bs
      IL_004f:  ldarg.0
      IL_0050:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_0055:  ldfld      int32* Matrix/'<>c__DisplayClass11'::B
      IL_005a:  ldarg.0
      IL_005b:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_0060:  ldfld      int32 Matrix/'<>c__DisplayClass11'::bx
      IL_0065:  ldarg.0
      IL_0066:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_006b:  ldfld      int32 Matrix/'<>c__DisplayClass11'::by
      IL_0070:  ldarg.0
      IL_0071:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_0076:  ldfld      int32 Matrix/'<>c__DisplayClass11'::bs
      IL_007b:  ldarg.0
      IL_007c:  ldfld      int32* Matrix/'<>c__DisplayClass15'::e_cum
      IL_0081:  ldc.i4.0
      IL_0082:  ldc.i4.0
      IL_0083:  ldarg.0
      IL_0084:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_0089:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_008e:  call       void Matrix::matrix_sub(int32,
                                                   int32,
                                                   int32*,
                                                   int32,
                                                   int32,
                                                   int32,
                                                   int32*,
                                                   int32,
                                                   int32,
                                                   int32,
                                                   int32*,
                                                   int32,
                                                   int32,
                                                   int32)
      IL_0093:  nop
//000484:                         B, bx + n_2, by, bs,
//000485:                         B, bx, by, bs,
//000486:                         e_cum, 0, 0, n_2);
//000487:                     strassen_mult_parallel(
      IL_0094:  ldarg.0
      IL_0095:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_009a:  ldfld      valuetype [mscorlib]System.Threading.CancellationToken Matrix/'<>c__DisplayClass11'::cancellationToken
      IL_009f:  ldarg.0
      IL_00a0:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_00a5:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_00aa:  ldarg.0
      IL_00ab:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_00b0:  ldfld      int32* Matrix/'<>c__DisplayClass11'::A
      IL_00b5:  ldarg.0
      IL_00b6:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_00bb:  ldfld      int32 Matrix/'<>c__DisplayClass11'::ax
      IL_00c0:  ldarg.0
      IL_00c1:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_00c6:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_00cb:  add
      IL_00cc:  ldarg.0
      IL_00cd:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_00d2:  ldfld      int32 Matrix/'<>c__DisplayClass11'::ay
      IL_00d7:  ldarg.0
      IL_00d8:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_00dd:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_00e2:  add
      IL_00e3:  ldarg.0
      IL_00e4:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_00e9:  ldfld      int32 Matrix/'<>c__DisplayClass11'::a_s
      IL_00ee:  ldarg.0
      IL_00ef:  ldfld      int32* Matrix/'<>c__DisplayClass15'::e_cum
      IL_00f4:  ldc.i4.0
      IL_00f5:  ldc.i4.0
      IL_00f6:  ldarg.0
      IL_00f7:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_00fc:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_0101:  ldarg.0
      IL_0102:  ldfld      int32* Matrix/'<>c__DisplayClass15'::p4
      IL_0107:  ldc.i4.0
      IL_0108:  ldc.i4.0
      IL_0109:  ldarg.0
      IL_010a:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_010f:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_0114:  ldarg.0
      IL_0115:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_011a:  ldfld      int32 Matrix/'<>c__DisplayClass11'::s
      IL_011f:  call       void Matrix::strassen_mult_parallel(valuetype [mscorlib]System.Threading.CancellationToken,
                                                               int32,
                                                               int32*,
                                                               int32,
                                                               int32,
                                                               int32,
                                                               int32*,
                                                               int32,
                                                               int32,
                                                               int32,
                                                               int32*,
                                                               int32,
                                                               int32,
                                                               int32,
                                                               int32)
      IL_0124:  nop
//000488:                         cancellationToken,
//000489:                         n_2,
//000490:                         A, ax + n_2, ay + n_2, a_s,
//000491:                         e_cum, 0, 0, n_2,
//000492:                         p4, 0, 0, n_2,
//000493:                         s);
//000494:                 }, cancellationToken);
//000495: 
//000496:                 // p5 = (a11 + a12) x b22 
//000497:                 Task t_p5 = Task.Factory.StartNew(() =>
//000498:                 {
//000499:                     matrix_add(n_2, n_2,
//000500:                         A, ax, ay, a_s,
//000501:                         A, ax, ay + n_2, a_s,
//000502:                         f_cum, 0, 0, n_2);
//000503:                     strassen_mult_parallel(
//000504:                         cancellationToken,
//000505:                         n_2,
//000506:                         f_cum, 0, 0, n_2,
//000507:                         B, bx + n_2, by + n_2, bs,
//000508:                         p5, 0, 0, n_2,
//000509:                         s);
//000510:                 }, cancellationToken);
//000511: 
//000512:                 // p6 = (a21 - a11) x (b11 + b12) 
//000513:                 Task t_p6 = Task.Factory.StartNew(() =>
//000514:                 {
//000515:                     matrix_sub(n_2, n_2,
//000516:                         A, ax + n_2, ay, a_s,
//000517:                         A, ax, ay, a_s,
//000518:                         g_cum, 0, 0, n_2);
//000519:                     matrix_add(n_2, n_2,
//000520:                         B, bx, by, bs,
//000521:                         B, bx, by + n_2, bs,
//000522:                         h_cum, 0, 0, n_2);
//000523:                     strassen_mult_parallel(
//000524:                         cancellationToken,
//000525:                         n_2,
//000526:                         g_cum, 0, 0, n_2,
//000527:                         h_cum, 0, 0, n_2,
//000528:                         p6, 0, 0, n_2,
//000529:                         s);
//000530:                 }, cancellationToken);
//000531: 
//000532:                 // p7 = (a12 - a22) x (b21 + b22) 
//000533:                 Task t_p7 = Task.Factory.StartNew(() =>
//000534:                 {
//000535:                     matrix_sub(n_2, n_2,
//000536:                         A, ax, ay + n_2, a_s,
//000537:                         A, ax + n_2, ay + n_2, a_s,
//000538:                         i_cum, 0, 0, n_2);
//000539:                     matrix_add(n_2, n_2,
//000540:                         B, bx + n_2, by, bs,
//000541:                         B, bx + n_2, by + n_2, bs,
//000542:                         j_cum, 0, 0, n_2);
//000543:                     strassen_mult_parallel(
//000544:                         cancellationToken,
//000545:                         n_2,
//000546:                         i_cum, 0, 0, n_2,
//000547:                         j_cum, 0, 0, n_2,
//000548:                         p7, 0, 0, n_2,
//000549:                         s);
//000550:                 }, cancellationToken);
//000551: 
//000552:                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
//000553:                 catch (AggregateException ae)
//000554:                 {
//000555:                     ae.Flatten().Handle(e => e is TaskCanceledException);
//000556:                     cancellationToken.ThrowIfCancellationRequested();
//000557:                 }
//000558: 
//000559:                 // c11 = p1 + p4 - p5 + p7 
//000560:                 Task t_c11 = Task.Factory.StartNew(() =>
//000561:                 {
//000562:                     matrix_add(n_2, n_2,
//000563:                         p1, 0, 0, n_2,
//000564:                         p4, 0, 0, n_2,
//000565:                         C, cx, cy, cs);
//000566:                     matrix_sub(n_2, n_2,
//000567:                         C, cx, cy, cs,
//000568:                         p5, 0, 0, n_2,
//000569:                         C, cx, cy, cs);
//000570:                     matrix_add(n_2, n_2,
//000571:                         C, cx, cy, cs,
//000572:                         p7, 0, 0, n_2,
//000573:                         C, cx, cy, cs);
//000574:                 });
//000575: 
//000576:                 // c12 = p3 + p5 
//000577:                 Task t_c12 = Task.Factory.StartNew(() =>
//000578:                 {
//000579:                     matrix_add(n_2, n_2,
//000580:                         p3, 0, 0, n_2,
//000581:                         p5, 0, 0, n_2,
//000582:                         C, cx, cy + n_2, cs);
//000583:                 });
//000584: 
//000585:                 // c21 = p2 + p4 
//000586:                 Task t_c21 = Task.Factory.StartNew(() =>
//000587:                 {
//000588:                     matrix_add(n_2, n_2,
//000589:                         p2, 0, 0, n_2,
//000590:                         p4, 0, 0, n_2,
//000591:                         C, cx + n_2, cy, cs);
//000592:                 });
//000593: 
//000594:                 // c22 = p1 + p3 - p2 + p6 
//000595:                 Task t_c22 = Task.Factory.StartNew(() =>
//000596:                 {
//000597:                     matrix_add(n_2, n_2,
//000598:                         p1, 0, 0, n_2,
//000599:                         p3, 0, 0, n_2,
//000600:                         C, cx + n_2, cy + n_2, cs);
//000601:                     matrix_sub(n_2, n_2,
//000602:                         C, cx + n_2, cy + n_2, cs,
//000603:                         p2, 0, 0, n_2,
//000604:                         C, cx + n_2, cy + n_2, cs);
//000605:                     matrix_add(n_2, n_2,
//000606:                         C, cx + n_2, cy + n_2, cs,
//000607:                         p6, 0, 0, n_2,
//000608:                         C, cx + n_2, cy + n_2, cs);
//000609:                 });
//000610: 
//000611:                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
//000612:             }
//000613:         }
//000614:     }
//000615: }
      IL_0125:  ret
    } // end of method '<>c__DisplayClass15'::'<strassen_mult_parallel>b__7'

    .method public hidebysig instance void 
            '<strassen_mult_parallel>b__8'() cil managed
    {
      // Code size       294 (0x126)
      .maxstack  15
//000498:                 {
      IL_0000:  nop
//000499:                     matrix_add(n_2, n_2,
      IL_0001:  ldarg.0
      IL_0002:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_0007:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_000c:  ldarg.0
      IL_000d:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_0012:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_0017:  ldarg.0
      IL_0018:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_001d:  ldfld      int32* Matrix/'<>c__DisplayClass11'::A
      IL_0022:  ldarg.0
      IL_0023:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_0028:  ldfld      int32 Matrix/'<>c__DisplayClass11'::ax
      IL_002d:  ldarg.0
      IL_002e:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_0033:  ldfld      int32 Matrix/'<>c__DisplayClass11'::ay
      IL_0038:  ldarg.0
      IL_0039:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_003e:  ldfld      int32 Matrix/'<>c__DisplayClass11'::a_s
      IL_0043:  ldarg.0
      IL_0044:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_0049:  ldfld      int32* Matrix/'<>c__DisplayClass11'::A
      IL_004e:  ldarg.0
      IL_004f:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_0054:  ldfld      int32 Matrix/'<>c__DisplayClass11'::ax
      IL_0059:  ldarg.0
      IL_005a:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_005f:  ldfld      int32 Matrix/'<>c__DisplayClass11'::ay
      IL_0064:  ldarg.0
      IL_0065:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_006a:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_006f:  add
      IL_0070:  ldarg.0
      IL_0071:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_0076:  ldfld      int32 Matrix/'<>c__DisplayClass11'::a_s
      IL_007b:  ldarg.0
      IL_007c:  ldfld      int32* Matrix/'<>c__DisplayClass15'::f_cum
      IL_0081:  ldc.i4.0
      IL_0082:  ldc.i4.0
      IL_0083:  ldarg.0
      IL_0084:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_0089:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_008e:  call       void Matrix::matrix_add(int32,
                                                   int32,
                                                   int32*,
                                                   int32,
                                                   int32,
                                                   int32,
                                                   int32*,
                                                   int32,
                                                   int32,
                                                   int32,
                                                   int32*,
                                                   int32,
                                                   int32,
                                                   int32)
      IL_0093:  nop
//000500:                         A, ax, ay, a_s,
//000501:                         A, ax, ay + n_2, a_s,
//000502:                         f_cum, 0, 0, n_2);
//000503:                     strassen_mult_parallel(
      IL_0094:  ldarg.0
      IL_0095:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_009a:  ldfld      valuetype [mscorlib]System.Threading.CancellationToken Matrix/'<>c__DisplayClass11'::cancellationToken
      IL_009f:  ldarg.0
      IL_00a0:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_00a5:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_00aa:  ldarg.0
      IL_00ab:  ldfld      int32* Matrix/'<>c__DisplayClass15'::f_cum
      IL_00b0:  ldc.i4.0
      IL_00b1:  ldc.i4.0
      IL_00b2:  ldarg.0
      IL_00b3:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_00b8:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_00bd:  ldarg.0
      IL_00be:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_00c3:  ldfld      int32* Matrix/'<>c__DisplayClass11'::B
      IL_00c8:  ldarg.0
      IL_00c9:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_00ce:  ldfld      int32 Matrix/'<>c__DisplayClass11'::bx
      IL_00d3:  ldarg.0
      IL_00d4:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_00d9:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_00de:  add
      IL_00df:  ldarg.0
      IL_00e0:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_00e5:  ldfld      int32 Matrix/'<>c__DisplayClass11'::by
      IL_00ea:  ldarg.0
      IL_00eb:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_00f0:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_00f5:  add
      IL_00f6:  ldarg.0
      IL_00f7:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_00fc:  ldfld      int32 Matrix/'<>c__DisplayClass11'::bs
      IL_0101:  ldarg.0
      IL_0102:  ldfld      int32* Matrix/'<>c__DisplayClass15'::p5
      IL_0107:  ldc.i4.0
      IL_0108:  ldc.i4.0
      IL_0109:  ldarg.0
      IL_010a:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_010f:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_0114:  ldarg.0
      IL_0115:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_011a:  ldfld      int32 Matrix/'<>c__DisplayClass11'::s
      IL_011f:  call       void Matrix::strassen_mult_parallel(valuetype [mscorlib]System.Threading.CancellationToken,
                                                               int32,
                                                               int32*,
                                                               int32,
                                                               int32,
                                                               int32,
                                                               int32*,
                                                               int32,
                                                               int32,
                                                               int32,
                                                               int32*,
                                                               int32,
                                                               int32,
                                                               int32,
                                                               int32)
      IL_0124:  nop
//000504:                         cancellationToken,
//000505:                         n_2,
//000506:                         f_cum, 0, 0, n_2,
//000507:                         B, bx + n_2, by + n_2, bs,
//000508:                         p5, 0, 0, n_2,
//000509:                         s);
//000510:                 }, cancellationToken);
//000511: 
//000512:                 // p6 = (a21 - a11) x (b11 + b12) 
//000513:                 Task t_p6 = Task.Factory.StartNew(() =>
//000514:                 {
//000515:                     matrix_sub(n_2, n_2,
//000516:                         A, ax + n_2, ay, a_s,
//000517:                         A, ax, ay, a_s,
//000518:                         g_cum, 0, 0, n_2);
//000519:                     matrix_add(n_2, n_2,
//000520:                         B, bx, by, bs,
//000521:                         B, bx, by + n_2, bs,
//000522:                         h_cum, 0, 0, n_2);
//000523:                     strassen_mult_parallel(
//000524:                         cancellationToken,
//000525:                         n_2,
//000526:                         g_cum, 0, 0, n_2,
//000527:                         h_cum, 0, 0, n_2,
//000528:                         p6, 0, 0, n_2,
//000529:                         s);
//000530:                 }, cancellationToken);
//000531: 
//000532:                 // p7 = (a12 - a22) x (b21 + b22) 
//000533:                 Task t_p7 = Task.Factory.StartNew(() =>
//000534:                 {
//000535:                     matrix_sub(n_2, n_2,
//000536:                         A, ax, ay + n_2, a_s,
//000537:                         A, ax + n_2, ay + n_2, a_s,
//000538:                         i_cum, 0, 0, n_2);
//000539:                     matrix_add(n_2, n_2,
//000540:                         B, bx + n_2, by, bs,
//000541:                         B, bx + n_2, by + n_2, bs,
//000542:                         j_cum, 0, 0, n_2);
//000543:                     strassen_mult_parallel(
//000544:                         cancellationToken,
//000545:                         n_2,
//000546:                         i_cum, 0, 0, n_2,
//000547:                         j_cum, 0, 0, n_2,
//000548:                         p7, 0, 0, n_2,
//000549:                         s);
//000550:                 }, cancellationToken);
//000551: 
//000552:                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
//000553:                 catch (AggregateException ae)
//000554:                 {
//000555:                     ae.Flatten().Handle(e => e is TaskCanceledException);
//000556:                     cancellationToken.ThrowIfCancellationRequested();
//000557:                 }
//000558: 
//000559:                 // c11 = p1 + p4 - p5 + p7 
//000560:                 Task t_c11 = Task.Factory.StartNew(() =>
//000561:                 {
//000562:                     matrix_add(n_2, n_2,
//000563:                         p1, 0, 0, n_2,
//000564:                         p4, 0, 0, n_2,
//000565:                         C, cx, cy, cs);
//000566:                     matrix_sub(n_2, n_2,
//000567:                         C, cx, cy, cs,
//000568:                         p5, 0, 0, n_2,
//000569:                         C, cx, cy, cs);
//000570:                     matrix_add(n_2, n_2,
//000571:                         C, cx, cy, cs,
//000572:                         p7, 0, 0, n_2,
//000573:                         C, cx, cy, cs);
//000574:                 });
//000575: 
//000576:                 // c12 = p3 + p5 
//000577:                 Task t_c12 = Task.Factory.StartNew(() =>
//000578:                 {
//000579:                     matrix_add(n_2, n_2,
//000580:                         p3, 0, 0, n_2,
//000581:                         p5, 0, 0, n_2,
//000582:                         C, cx, cy + n_2, cs);
//000583:                 });
//000584: 
//000585:                 // c21 = p2 + p4 
//000586:                 Task t_c21 = Task.Factory.StartNew(() =>
//000587:                 {
//000588:                     matrix_add(n_2, n_2,
//000589:                         p2, 0, 0, n_2,
//000590:                         p4, 0, 0, n_2,
//000591:                         C, cx + n_2, cy, cs);
//000592:                 });
//000593: 
//000594:                 // c22 = p1 + p3 - p2 + p6 
//000595:                 Task t_c22 = Task.Factory.StartNew(() =>
//000596:                 {
//000597:                     matrix_add(n_2, n_2,
//000598:                         p1, 0, 0, n_2,
//000599:                         p3, 0, 0, n_2,
//000600:                         C, cx + n_2, cy + n_2, cs);
//000601:                     matrix_sub(n_2, n_2,
//000602:                         C, cx + n_2, cy + n_2, cs,
//000603:                         p2, 0, 0, n_2,
//000604:                         C, cx + n_2, cy + n_2, cs);
//000605:                     matrix_add(n_2, n_2,
//000606:                         C, cx + n_2, cy + n_2, cs,
//000607:                         p6, 0, 0, n_2,
//000608:                         C, cx + n_2, cy + n_2, cs);
//000609:                 });
//000610: 
//000611:                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
//000612:             }
//000613:         }
//000614:     }
//000615: }
      IL_0125:  ret
    } // end of method '<>c__DisplayClass15'::'<strassen_mult_parallel>b__8'

    .method public hidebysig instance void 
            '<strassen_mult_parallel>b__9'() cil managed
    {
      // Code size       392 (0x188)
      .maxstack  15
//000514:                 {
      IL_0000:  nop
//000515:                     matrix_sub(n_2, n_2,
      IL_0001:  ldarg.0
      IL_0002:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_0007:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_000c:  ldarg.0
      IL_000d:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_0012:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_0017:  ldarg.0
      IL_0018:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_001d:  ldfld      int32* Matrix/'<>c__DisplayClass11'::A
      IL_0022:  ldarg.0
      IL_0023:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_0028:  ldfld      int32 Matrix/'<>c__DisplayClass11'::ax
      IL_002d:  ldarg.0
      IL_002e:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_0033:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_0038:  add
      IL_0039:  ldarg.0
      IL_003a:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_003f:  ldfld      int32 Matrix/'<>c__DisplayClass11'::ay
      IL_0044:  ldarg.0
      IL_0045:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_004a:  ldfld      int32 Matrix/'<>c__DisplayClass11'::a_s
      IL_004f:  ldarg.0
      IL_0050:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_0055:  ldfld      int32* Matrix/'<>c__DisplayClass11'::A
      IL_005a:  ldarg.0
      IL_005b:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_0060:  ldfld      int32 Matrix/'<>c__DisplayClass11'::ax
      IL_0065:  ldarg.0
      IL_0066:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_006b:  ldfld      int32 Matrix/'<>c__DisplayClass11'::ay
      IL_0070:  ldarg.0
      IL_0071:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_0076:  ldfld      int32 Matrix/'<>c__DisplayClass11'::a_s
      IL_007b:  ldarg.0
      IL_007c:  ldfld      int32* Matrix/'<>c__DisplayClass15'::g_cum
      IL_0081:  ldc.i4.0
      IL_0082:  ldc.i4.0
      IL_0083:  ldarg.0
      IL_0084:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_0089:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_008e:  call       void Matrix::matrix_sub(int32,
                                                   int32,
                                                   int32*,
                                                   int32,
                                                   int32,
                                                   int32,
                                                   int32*,
                                                   int32,
                                                   int32,
                                                   int32,
                                                   int32*,
                                                   int32,
                                                   int32,
                                                   int32)
      IL_0093:  nop
//000516:                         A, ax + n_2, ay, a_s,
//000517:                         A, ax, ay, a_s,
//000518:                         g_cum, 0, 0, n_2);
//000519:                     matrix_add(n_2, n_2,
      IL_0094:  ldarg.0
      IL_0095:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_009a:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_009f:  ldarg.0
      IL_00a0:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_00a5:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_00aa:  ldarg.0
      IL_00ab:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_00b0:  ldfld      int32* Matrix/'<>c__DisplayClass11'::B
      IL_00b5:  ldarg.0
      IL_00b6:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_00bb:  ldfld      int32 Matrix/'<>c__DisplayClass11'::bx
      IL_00c0:  ldarg.0
      IL_00c1:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_00c6:  ldfld      int32 Matrix/'<>c__DisplayClass11'::by
      IL_00cb:  ldarg.0
      IL_00cc:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_00d1:  ldfld      int32 Matrix/'<>c__DisplayClass11'::bs
      IL_00d6:  ldarg.0
      IL_00d7:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_00dc:  ldfld      int32* Matrix/'<>c__DisplayClass11'::B
      IL_00e1:  ldarg.0
      IL_00e2:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_00e7:  ldfld      int32 Matrix/'<>c__DisplayClass11'::bx
      IL_00ec:  ldarg.0
      IL_00ed:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_00f2:  ldfld      int32 Matrix/'<>c__DisplayClass11'::by
      IL_00f7:  ldarg.0
      IL_00f8:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_00fd:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_0102:  add
      IL_0103:  ldarg.0
      IL_0104:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_0109:  ldfld      int32 Matrix/'<>c__DisplayClass11'::bs
      IL_010e:  ldarg.0
      IL_010f:  ldfld      int32* Matrix/'<>c__DisplayClass15'::h_cum
      IL_0114:  ldc.i4.0
      IL_0115:  ldc.i4.0
      IL_0116:  ldarg.0
      IL_0117:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_011c:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_0121:  call       void Matrix::matrix_add(int32,
                                                   int32,
                                                   int32*,
                                                   int32,
                                                   int32,
                                                   int32,
                                                   int32*,
                                                   int32,
                                                   int32,
                                                   int32,
                                                   int32*,
                                                   int32,
                                                   int32,
                                                   int32)
      IL_0126:  nop
//000520:                         B, bx, by, bs,
//000521:                         B, bx, by + n_2, bs,
//000522:                         h_cum, 0, 0, n_2);
//000523:                     strassen_mult_parallel(
      IL_0127:  ldarg.0
      IL_0128:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_012d:  ldfld      valuetype [mscorlib]System.Threading.CancellationToken Matrix/'<>c__DisplayClass11'::cancellationToken
      IL_0132:  ldarg.0
      IL_0133:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_0138:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_013d:  ldarg.0
      IL_013e:  ldfld      int32* Matrix/'<>c__DisplayClass15'::g_cum
      IL_0143:  ldc.i4.0
      IL_0144:  ldc.i4.0
      IL_0145:  ldarg.0
      IL_0146:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_014b:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_0150:  ldarg.0
      IL_0151:  ldfld      int32* Matrix/'<>c__DisplayClass15'::h_cum
      IL_0156:  ldc.i4.0
      IL_0157:  ldc.i4.0
      IL_0158:  ldarg.0
      IL_0159:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_015e:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_0163:  ldarg.0
      IL_0164:  ldfld      int32* Matrix/'<>c__DisplayClass15'::p6
      IL_0169:  ldc.i4.0
      IL_016a:  ldc.i4.0
      IL_016b:  ldarg.0
      IL_016c:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_0171:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_0176:  ldarg.0
      IL_0177:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_017c:  ldfld      int32 Matrix/'<>c__DisplayClass11'::s
      IL_0181:  call       void Matrix::strassen_mult_parallel(valuetype [mscorlib]System.Threading.CancellationToken,
                                                               int32,
                                                               int32*,
                                                               int32,
                                                               int32,
                                                               int32,
                                                               int32*,
                                                               int32,
                                                               int32,
                                                               int32,
                                                               int32*,
                                                               int32,
                                                               int32,
                                                               int32,
                                                               int32)
      IL_0186:  nop
//000524:                         cancellationToken,
//000525:                         n_2,
//000526:                         g_cum, 0, 0, n_2,
//000527:                         h_cum, 0, 0, n_2,
//000528:                         p6, 0, 0, n_2,
//000529:                         s);
//000530:                 }, cancellationToken);
//000531: 
//000532:                 // p7 = (a12 - a22) x (b21 + b22) 
//000533:                 Task t_p7 = Task.Factory.StartNew(() =>
//000534:                 {
//000535:                     matrix_sub(n_2, n_2,
//000536:                         A, ax, ay + n_2, a_s,
//000537:                         A, ax + n_2, ay + n_2, a_s,
//000538:                         i_cum, 0, 0, n_2);
//000539:                     matrix_add(n_2, n_2,
//000540:                         B, bx + n_2, by, bs,
//000541:                         B, bx + n_2, by + n_2, bs,
//000542:                         j_cum, 0, 0, n_2);
//000543:                     strassen_mult_parallel(
//000544:                         cancellationToken,
//000545:                         n_2,
//000546:                         i_cum, 0, 0, n_2,
//000547:                         j_cum, 0, 0, n_2,
//000548:                         p7, 0, 0, n_2,
//000549:                         s);
//000550:                 }, cancellationToken);
//000551: 
//000552:                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
//000553:                 catch (AggregateException ae)
//000554:                 {
//000555:                     ae.Flatten().Handle(e => e is TaskCanceledException);
//000556:                     cancellationToken.ThrowIfCancellationRequested();
//000557:                 }
//000558: 
//000559:                 // c11 = p1 + p4 - p5 + p7 
//000560:                 Task t_c11 = Task.Factory.StartNew(() =>
//000561:                 {
//000562:                     matrix_add(n_2, n_2,
//000563:                         p1, 0, 0, n_2,
//000564:                         p4, 0, 0, n_2,
//000565:                         C, cx, cy, cs);
//000566:                     matrix_sub(n_2, n_2,
//000567:                         C, cx, cy, cs,
//000568:                         p5, 0, 0, n_2,
//000569:                         C, cx, cy, cs);
//000570:                     matrix_add(n_2, n_2,
//000571:                         C, cx, cy, cs,
//000572:                         p7, 0, 0, n_2,
//000573:                         C, cx, cy, cs);
//000574:                 });
//000575: 
//000576:                 // c12 = p3 + p5 
//000577:                 Task t_c12 = Task.Factory.StartNew(() =>
//000578:                 {
//000579:                     matrix_add(n_2, n_2,
//000580:                         p3, 0, 0, n_2,
//000581:                         p5, 0, 0, n_2,
//000582:                         C, cx, cy + n_2, cs);
//000583:                 });
//000584: 
//000585:                 // c21 = p2 + p4 
//000586:                 Task t_c21 = Task.Factory.StartNew(() =>
//000587:                 {
//000588:                     matrix_add(n_2, n_2,
//000589:                         p2, 0, 0, n_2,
//000590:                         p4, 0, 0, n_2,
//000591:                         C, cx + n_2, cy, cs);
//000592:                 });
//000593: 
//000594:                 // c22 = p1 + p3 - p2 + p6 
//000595:                 Task t_c22 = Task.Factory.StartNew(() =>
//000596:                 {
//000597:                     matrix_add(n_2, n_2,
//000598:                         p1, 0, 0, n_2,
//000599:                         p3, 0, 0, n_2,
//000600:                         C, cx + n_2, cy + n_2, cs);
//000601:                     matrix_sub(n_2, n_2,
//000602:                         C, cx + n_2, cy + n_2, cs,
//000603:                         p2, 0, 0, n_2,
//000604:                         C, cx + n_2, cy + n_2, cs);
//000605:                     matrix_add(n_2, n_2,
//000606:                         C, cx + n_2, cy + n_2, cs,
//000607:                         p6, 0, 0, n_2,
//000608:                         C, cx + n_2, cy + n_2, cs);
//000609:                 });
//000610: 
//000611:                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
//000612:             }
//000613:         }
//000614:     }
//000615: }
      IL_0187:  ret
    } // end of method '<>c__DisplayClass15'::'<strassen_mult_parallel>b__9'

    .method public hidebysig instance void 
            '<strassen_mult_parallel>b__a'() cil managed
    {
      // Code size       440 (0x1b8)
      .maxstack  15
//000534:                 {
      IL_0000:  nop
//000535:                     matrix_sub(n_2, n_2,
      IL_0001:  ldarg.0
      IL_0002:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_0007:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_000c:  ldarg.0
      IL_000d:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_0012:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_0017:  ldarg.0
      IL_0018:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_001d:  ldfld      int32* Matrix/'<>c__DisplayClass11'::A
      IL_0022:  ldarg.0
      IL_0023:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_0028:  ldfld      int32 Matrix/'<>c__DisplayClass11'::ax
      IL_002d:  ldarg.0
      IL_002e:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_0033:  ldfld      int32 Matrix/'<>c__DisplayClass11'::ay
      IL_0038:  ldarg.0
      IL_0039:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_003e:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_0043:  add
      IL_0044:  ldarg.0
      IL_0045:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_004a:  ldfld      int32 Matrix/'<>c__DisplayClass11'::a_s
      IL_004f:  ldarg.0
      IL_0050:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_0055:  ldfld      int32* Matrix/'<>c__DisplayClass11'::A
      IL_005a:  ldarg.0
      IL_005b:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_0060:  ldfld      int32 Matrix/'<>c__DisplayClass11'::ax
      IL_0065:  ldarg.0
      IL_0066:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_006b:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_0070:  add
      IL_0071:  ldarg.0
      IL_0072:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_0077:  ldfld      int32 Matrix/'<>c__DisplayClass11'::ay
      IL_007c:  ldarg.0
      IL_007d:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_0082:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_0087:  add
      IL_0088:  ldarg.0
      IL_0089:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_008e:  ldfld      int32 Matrix/'<>c__DisplayClass11'::a_s
      IL_0093:  ldarg.0
      IL_0094:  ldfld      int32* Matrix/'<>c__DisplayClass15'::i_cum
      IL_0099:  ldc.i4.0
      IL_009a:  ldc.i4.0
      IL_009b:  ldarg.0
      IL_009c:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_00a1:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_00a6:  call       void Matrix::matrix_sub(int32,
                                                   int32,
                                                   int32*,
                                                   int32,
                                                   int32,
                                                   int32,
                                                   int32*,
                                                   int32,
                                                   int32,
                                                   int32,
                                                   int32*,
                                                   int32,
                                                   int32,
                                                   int32)
      IL_00ab:  nop
//000536:                         A, ax, ay + n_2, a_s,
//000537:                         A, ax + n_2, ay + n_2, a_s,
//000538:                         i_cum, 0, 0, n_2);
//000539:                     matrix_add(n_2, n_2,
      IL_00ac:  ldarg.0
      IL_00ad:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_00b2:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_00b7:  ldarg.0
      IL_00b8:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_00bd:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_00c2:  ldarg.0
      IL_00c3:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_00c8:  ldfld      int32* Matrix/'<>c__DisplayClass11'::B
      IL_00cd:  ldarg.0
      IL_00ce:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_00d3:  ldfld      int32 Matrix/'<>c__DisplayClass11'::bx
      IL_00d8:  ldarg.0
      IL_00d9:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_00de:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_00e3:  add
      IL_00e4:  ldarg.0
      IL_00e5:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_00ea:  ldfld      int32 Matrix/'<>c__DisplayClass11'::by
      IL_00ef:  ldarg.0
      IL_00f0:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_00f5:  ldfld      int32 Matrix/'<>c__DisplayClass11'::bs
      IL_00fa:  ldarg.0
      IL_00fb:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_0100:  ldfld      int32* Matrix/'<>c__DisplayClass11'::B
      IL_0105:  ldarg.0
      IL_0106:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_010b:  ldfld      int32 Matrix/'<>c__DisplayClass11'::bx
      IL_0110:  ldarg.0
      IL_0111:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_0116:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_011b:  add
      IL_011c:  ldarg.0
      IL_011d:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_0122:  ldfld      int32 Matrix/'<>c__DisplayClass11'::by
      IL_0127:  ldarg.0
      IL_0128:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_012d:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_0132:  add
      IL_0133:  ldarg.0
      IL_0134:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_0139:  ldfld      int32 Matrix/'<>c__DisplayClass11'::bs
      IL_013e:  ldarg.0
      IL_013f:  ldfld      int32* Matrix/'<>c__DisplayClass15'::j_cum
      IL_0144:  ldc.i4.0
      IL_0145:  ldc.i4.0
      IL_0146:  ldarg.0
      IL_0147:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_014c:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_0151:  call       void Matrix::matrix_add(int32,
                                                   int32,
                                                   int32*,
                                                   int32,
                                                   int32,
                                                   int32,
                                                   int32*,
                                                   int32,
                                                   int32,
                                                   int32,
                                                   int32*,
                                                   int32,
                                                   int32,
                                                   int32)
      IL_0156:  nop
//000540:                         B, bx + n_2, by, bs,
//000541:                         B, bx + n_2, by + n_2, bs,
//000542:                         j_cum, 0, 0, n_2);
//000543:                     strassen_mult_parallel(
      IL_0157:  ldarg.0
      IL_0158:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_015d:  ldfld      valuetype [mscorlib]System.Threading.CancellationToken Matrix/'<>c__DisplayClass11'::cancellationToken
      IL_0162:  ldarg.0
      IL_0163:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_0168:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_016d:  ldarg.0
      IL_016e:  ldfld      int32* Matrix/'<>c__DisplayClass15'::i_cum
      IL_0173:  ldc.i4.0
      IL_0174:  ldc.i4.0
      IL_0175:  ldarg.0
      IL_0176:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_017b:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_0180:  ldarg.0
      IL_0181:  ldfld      int32* Matrix/'<>c__DisplayClass15'::j_cum
      IL_0186:  ldc.i4.0
      IL_0187:  ldc.i4.0
      IL_0188:  ldarg.0
      IL_0189:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_018e:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_0193:  ldarg.0
      IL_0194:  ldfld      int32* Matrix/'<>c__DisplayClass15'::p7
      IL_0199:  ldc.i4.0
      IL_019a:  ldc.i4.0
      IL_019b:  ldarg.0
      IL_019c:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_01a1:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_01a6:  ldarg.0
      IL_01a7:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_01ac:  ldfld      int32 Matrix/'<>c__DisplayClass11'::s
      IL_01b1:  call       void Matrix::strassen_mult_parallel(valuetype [mscorlib]System.Threading.CancellationToken,
                                                               int32,
                                                               int32*,
                                                               int32,
                                                               int32,
                                                               int32,
                                                               int32*,
                                                               int32,
                                                               int32,
                                                               int32,
                                                               int32*,
                                                               int32,
                                                               int32,
                                                               int32,
                                                               int32)
      IL_01b6:  nop
//000544:                         cancellationToken,
//000545:                         n_2,
//000546:                         i_cum, 0, 0, n_2,
//000547:                         j_cum, 0, 0, n_2,
//000548:                         p7, 0, 0, n_2,
//000549:                         s);
//000550:                 }, cancellationToken);
//000551: 
//000552:                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
//000553:                 catch (AggregateException ae)
//000554:                 {
//000555:                     ae.Flatten().Handle(e => e is TaskCanceledException);
//000556:                     cancellationToken.ThrowIfCancellationRequested();
//000557:                 }
//000558: 
//000559:                 // c11 = p1 + p4 - p5 + p7 
//000560:                 Task t_c11 = Task.Factory.StartNew(() =>
//000561:                 {
//000562:                     matrix_add(n_2, n_2,
//000563:                         p1, 0, 0, n_2,
//000564:                         p4, 0, 0, n_2,
//000565:                         C, cx, cy, cs);
//000566:                     matrix_sub(n_2, n_2,
//000567:                         C, cx, cy, cs,
//000568:                         p5, 0, 0, n_2,
//000569:                         C, cx, cy, cs);
//000570:                     matrix_add(n_2, n_2,
//000571:                         C, cx, cy, cs,
//000572:                         p7, 0, 0, n_2,
//000573:                         C, cx, cy, cs);
//000574:                 });
//000575: 
//000576:                 // c12 = p3 + p5 
//000577:                 Task t_c12 = Task.Factory.StartNew(() =>
//000578:                 {
//000579:                     matrix_add(n_2, n_2,
//000580:                         p3, 0, 0, n_2,
//000581:                         p5, 0, 0, n_2,
//000582:                         C, cx, cy + n_2, cs);
//000583:                 });
//000584: 
//000585:                 // c21 = p2 + p4 
//000586:                 Task t_c21 = Task.Factory.StartNew(() =>
//000587:                 {
//000588:                     matrix_add(n_2, n_2,
//000589:                         p2, 0, 0, n_2,
//000590:                         p4, 0, 0, n_2,
//000591:                         C, cx + n_2, cy, cs);
//000592:                 });
//000593: 
//000594:                 // c22 = p1 + p3 - p2 + p6 
//000595:                 Task t_c22 = Task.Factory.StartNew(() =>
//000596:                 {
//000597:                     matrix_add(n_2, n_2,
//000598:                         p1, 0, 0, n_2,
//000599:                         p3, 0, 0, n_2,
//000600:                         C, cx + n_2, cy + n_2, cs);
//000601:                     matrix_sub(n_2, n_2,
//000602:                         C, cx + n_2, cy + n_2, cs,
//000603:                         p2, 0, 0, n_2,
//000604:                         C, cx + n_2, cy + n_2, cs);
//000605:                     matrix_add(n_2, n_2,
//000606:                         C, cx + n_2, cy + n_2, cs,
//000607:                         p6, 0, 0, n_2,
//000608:                         C, cx + n_2, cy + n_2, cs);
//000609:                 });
//000610: 
//000611:                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
//000612:             }
//000613:         }
//000614:     }
//000615: }
      IL_01b7:  ret
    } // end of method '<>c__DisplayClass15'::'<strassen_mult_parallel>b__a'

    .method public hidebysig instance void 
            '<strassen_mult_parallel>b__c'() cil managed
    {
      // Code size       382 (0x17e)
      .maxstack  14
//000561:                 {
      IL_0000:  nop
//000562:                     matrix_add(n_2, n_2,
      IL_0001:  ldarg.0
      IL_0002:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_0007:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_000c:  ldarg.0
      IL_000d:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_0012:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_0017:  ldarg.0
      IL_0018:  ldfld      int32* Matrix/'<>c__DisplayClass15'::p1
      IL_001d:  ldc.i4.0
      IL_001e:  ldc.i4.0
      IL_001f:  ldarg.0
      IL_0020:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_0025:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_002a:  ldarg.0
      IL_002b:  ldfld      int32* Matrix/'<>c__DisplayClass15'::p4
      IL_0030:  ldc.i4.0
      IL_0031:  ldc.i4.0
      IL_0032:  ldarg.0
      IL_0033:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_0038:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_003d:  ldarg.0
      IL_003e:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_0043:  ldfld      int32* Matrix/'<>c__DisplayClass11'::C
      IL_0048:  ldarg.0
      IL_0049:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_004e:  ldfld      int32 Matrix/'<>c__DisplayClass11'::cx
      IL_0053:  ldarg.0
      IL_0054:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_0059:  ldfld      int32 Matrix/'<>c__DisplayClass11'::cy
      IL_005e:  ldarg.0
      IL_005f:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_0064:  ldfld      int32 Matrix/'<>c__DisplayClass11'::cs
      IL_0069:  call       void Matrix::matrix_add(int32,
                                                   int32,
                                                   int32*,
                                                   int32,
                                                   int32,
                                                   int32,
                                                   int32*,
                                                   int32,
                                                   int32,
                                                   int32,
                                                   int32*,
                                                   int32,
                                                   int32,
                                                   int32)
      IL_006e:  nop
//000563:                         p1, 0, 0, n_2,
//000564:                         p4, 0, 0, n_2,
//000565:                         C, cx, cy, cs);
//000566:                     matrix_sub(n_2, n_2,
      IL_006f:  ldarg.0
      IL_0070:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_0075:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_007a:  ldarg.0
      IL_007b:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_0080:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_0085:  ldarg.0
      IL_0086:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_008b:  ldfld      int32* Matrix/'<>c__DisplayClass11'::C
      IL_0090:  ldarg.0
      IL_0091:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_0096:  ldfld      int32 Matrix/'<>c__DisplayClass11'::cx
      IL_009b:  ldarg.0
      IL_009c:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_00a1:  ldfld      int32 Matrix/'<>c__DisplayClass11'::cy
      IL_00a6:  ldarg.0
      IL_00a7:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_00ac:  ldfld      int32 Matrix/'<>c__DisplayClass11'::cs
      IL_00b1:  ldarg.0
      IL_00b2:  ldfld      int32* Matrix/'<>c__DisplayClass15'::p5
      IL_00b7:  ldc.i4.0
      IL_00b8:  ldc.i4.0
      IL_00b9:  ldarg.0
      IL_00ba:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_00bf:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_00c4:  ldarg.0
      IL_00c5:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_00ca:  ldfld      int32* Matrix/'<>c__DisplayClass11'::C
      IL_00cf:  ldarg.0
      IL_00d0:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_00d5:  ldfld      int32 Matrix/'<>c__DisplayClass11'::cx
      IL_00da:  ldarg.0
      IL_00db:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_00e0:  ldfld      int32 Matrix/'<>c__DisplayClass11'::cy
      IL_00e5:  ldarg.0
      IL_00e6:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_00eb:  ldfld      int32 Matrix/'<>c__DisplayClass11'::cs
      IL_00f0:  call       void Matrix::matrix_sub(int32,
                                                   int32,
                                                   int32*,
                                                   int32,
                                                   int32,
                                                   int32,
                                                   int32*,
                                                   int32,
                                                   int32,
                                                   int32,
                                                   int32*,
                                                   int32,
                                                   int32,
                                                   int32)
      IL_00f5:  nop
//000567:                         C, cx, cy, cs,
//000568:                         p5, 0, 0, n_2,
//000569:                         C, cx, cy, cs);
//000570:                     matrix_add(n_2, n_2,
      IL_00f6:  ldarg.0
      IL_00f7:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_00fc:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_0101:  ldarg.0
      IL_0102:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_0107:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_010c:  ldarg.0
      IL_010d:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_0112:  ldfld      int32* Matrix/'<>c__DisplayClass11'::C
      IL_0117:  ldarg.0
      IL_0118:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_011d:  ldfld      int32 Matrix/'<>c__DisplayClass11'::cx
      IL_0122:  ldarg.0
      IL_0123:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_0128:  ldfld      int32 Matrix/'<>c__DisplayClass11'::cy
      IL_012d:  ldarg.0
      IL_012e:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_0133:  ldfld      int32 Matrix/'<>c__DisplayClass11'::cs
      IL_0138:  ldarg.0
      IL_0139:  ldfld      int32* Matrix/'<>c__DisplayClass15'::p7
      IL_013e:  ldc.i4.0
      IL_013f:  ldc.i4.0
      IL_0140:  ldarg.0
      IL_0141:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_0146:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_014b:  ldarg.0
      IL_014c:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_0151:  ldfld      int32* Matrix/'<>c__DisplayClass11'::C
      IL_0156:  ldarg.0
      IL_0157:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_015c:  ldfld      int32 Matrix/'<>c__DisplayClass11'::cx
      IL_0161:  ldarg.0
      IL_0162:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_0167:  ldfld      int32 Matrix/'<>c__DisplayClass11'::cy
      IL_016c:  ldarg.0
      IL_016d:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_0172:  ldfld      int32 Matrix/'<>c__DisplayClass11'::cs
      IL_0177:  call       void Matrix::matrix_add(int32,
                                                   int32,
                                                   int32*,
                                                   int32,
                                                   int32,
                                                   int32,
                                                   int32*,
                                                   int32,
                                                   int32,
                                                   int32,
                                                   int32*,
                                                   int32,
                                                   int32,
                                                   int32)
      IL_017c:  nop
//000571:                         C, cx, cy, cs,
//000572:                         p7, 0, 0, n_2,
//000573:                         C, cx, cy, cs);
//000574:                 });
//000575: 
//000576:                 // c12 = p3 + p5 
//000577:                 Task t_c12 = Task.Factory.StartNew(() =>
//000578:                 {
//000579:                     matrix_add(n_2, n_2,
//000580:                         p3, 0, 0, n_2,
//000581:                         p5, 0, 0, n_2,
//000582:                         C, cx, cy + n_2, cs);
//000583:                 });
//000584: 
//000585:                 // c21 = p2 + p4 
//000586:                 Task t_c21 = Task.Factory.StartNew(() =>
//000587:                 {
//000588:                     matrix_add(n_2, n_2,
//000589:                         p2, 0, 0, n_2,
//000590:                         p4, 0, 0, n_2,
//000591:                         C, cx + n_2, cy, cs);
//000592:                 });
//000593: 
//000594:                 // c22 = p1 + p3 - p2 + p6 
//000595:                 Task t_c22 = Task.Factory.StartNew(() =>
//000596:                 {
//000597:                     matrix_add(n_2, n_2,
//000598:                         p1, 0, 0, n_2,
//000599:                         p3, 0, 0, n_2,
//000600:                         C, cx + n_2, cy + n_2, cs);
//000601:                     matrix_sub(n_2, n_2,
//000602:                         C, cx + n_2, cy + n_2, cs,
//000603:                         p2, 0, 0, n_2,
//000604:                         C, cx + n_2, cy + n_2, cs);
//000605:                     matrix_add(n_2, n_2,
//000606:                         C, cx + n_2, cy + n_2, cs,
//000607:                         p6, 0, 0, n_2,
//000608:                         C, cx + n_2, cy + n_2, cs);
//000609:                 });
//000610: 
//000611:                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
//000612:             }
//000613:         }
//000614:     }
//000615: }
      IL_017d:  ret
    } // end of method '<>c__DisplayClass15'::'<strassen_mult_parallel>b__c'

    .method public hidebysig instance void 
            '<strassen_mult_parallel>b__d'() cil managed
    {
      // Code size       124 (0x7c)
      .maxstack  14
//000578:                 {
      IL_0000:  nop
//000579:                     matrix_add(n_2, n_2,
      IL_0001:  ldarg.0
      IL_0002:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_0007:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_000c:  ldarg.0
      IL_000d:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_0012:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_0017:  ldarg.0
      IL_0018:  ldfld      int32* Matrix/'<>c__DisplayClass15'::p3
      IL_001d:  ldc.i4.0
      IL_001e:  ldc.i4.0
      IL_001f:  ldarg.0
      IL_0020:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_0025:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_002a:  ldarg.0
      IL_002b:  ldfld      int32* Matrix/'<>c__DisplayClass15'::p5
      IL_0030:  ldc.i4.0
      IL_0031:  ldc.i4.0
      IL_0032:  ldarg.0
      IL_0033:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_0038:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_003d:  ldarg.0
      IL_003e:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_0043:  ldfld      int32* Matrix/'<>c__DisplayClass11'::C
      IL_0048:  ldarg.0
      IL_0049:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_004e:  ldfld      int32 Matrix/'<>c__DisplayClass11'::cx
      IL_0053:  ldarg.0
      IL_0054:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_0059:  ldfld      int32 Matrix/'<>c__DisplayClass11'::cy
      IL_005e:  ldarg.0
      IL_005f:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_0064:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_0069:  add
      IL_006a:  ldarg.0
      IL_006b:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_0070:  ldfld      int32 Matrix/'<>c__DisplayClass11'::cs
      IL_0075:  call       void Matrix::matrix_add(int32,
                                                   int32,
                                                   int32*,
                                                   int32,
                                                   int32,
                                                   int32,
                                                   int32*,
                                                   int32,
                                                   int32,
                                                   int32,
                                                   int32*,
                                                   int32,
                                                   int32,
                                                   int32)
      IL_007a:  nop
//000580:                         p3, 0, 0, n_2,
//000581:                         p5, 0, 0, n_2,
//000582:                         C, cx, cy + n_2, cs);
//000583:                 });
//000584: 
//000585:                 // c21 = p2 + p4 
//000586:                 Task t_c21 = Task.Factory.StartNew(() =>
//000587:                 {
//000588:                     matrix_add(n_2, n_2,
//000589:                         p2, 0, 0, n_2,
//000590:                         p4, 0, 0, n_2,
//000591:                         C, cx + n_2, cy, cs);
//000592:                 });
//000593: 
//000594:                 // c22 = p1 + p3 - p2 + p6 
//000595:                 Task t_c22 = Task.Factory.StartNew(() =>
//000596:                 {
//000597:                     matrix_add(n_2, n_2,
//000598:                         p1, 0, 0, n_2,
//000599:                         p3, 0, 0, n_2,
//000600:                         C, cx + n_2, cy + n_2, cs);
//000601:                     matrix_sub(n_2, n_2,
//000602:                         C, cx + n_2, cy + n_2, cs,
//000603:                         p2, 0, 0, n_2,
//000604:                         C, cx + n_2, cy + n_2, cs);
//000605:                     matrix_add(n_2, n_2,
//000606:                         C, cx + n_2, cy + n_2, cs,
//000607:                         p6, 0, 0, n_2,
//000608:                         C, cx + n_2, cy + n_2, cs);
//000609:                 });
//000610: 
//000611:                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
//000612:             }
//000613:         }
//000614:     }
//000615: }
      IL_007b:  ret
    } // end of method '<>c__DisplayClass15'::'<strassen_mult_parallel>b__d'

    .method public hidebysig instance void 
            '<strassen_mult_parallel>b__e'() cil managed
    {
      // Code size       124 (0x7c)
      .maxstack  14
//000587:                 {
      IL_0000:  nop
//000588:                     matrix_add(n_2, n_2,
      IL_0001:  ldarg.0
      IL_0002:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_0007:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_000c:  ldarg.0
      IL_000d:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_0012:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_0017:  ldarg.0
      IL_0018:  ldfld      int32* Matrix/'<>c__DisplayClass15'::p2
      IL_001d:  ldc.i4.0
      IL_001e:  ldc.i4.0
      IL_001f:  ldarg.0
      IL_0020:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_0025:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_002a:  ldarg.0
      IL_002b:  ldfld      int32* Matrix/'<>c__DisplayClass15'::p4
      IL_0030:  ldc.i4.0
      IL_0031:  ldc.i4.0
      IL_0032:  ldarg.0
      IL_0033:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_0038:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_003d:  ldarg.0
      IL_003e:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_0043:  ldfld      int32* Matrix/'<>c__DisplayClass11'::C
      IL_0048:  ldarg.0
      IL_0049:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_004e:  ldfld      int32 Matrix/'<>c__DisplayClass11'::cx
      IL_0053:  ldarg.0
      IL_0054:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_0059:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_005e:  add
      IL_005f:  ldarg.0
      IL_0060:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_0065:  ldfld      int32 Matrix/'<>c__DisplayClass11'::cy
      IL_006a:  ldarg.0
      IL_006b:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_0070:  ldfld      int32 Matrix/'<>c__DisplayClass11'::cs
      IL_0075:  call       void Matrix::matrix_add(int32,
                                                   int32,
                                                   int32*,
                                                   int32,
                                                   int32,
                                                   int32,
                                                   int32*,
                                                   int32,
                                                   int32,
                                                   int32,
                                                   int32*,
                                                   int32,
                                                   int32,
                                                   int32)
      IL_007a:  nop
//000589:                         p2, 0, 0, n_2,
//000590:                         p4, 0, 0, n_2,
//000591:                         C, cx + n_2, cy, cs);
//000592:                 });
//000593: 
//000594:                 // c22 = p1 + p3 - p2 + p6 
//000595:                 Task t_c22 = Task.Factory.StartNew(() =>
//000596:                 {
//000597:                     matrix_add(n_2, n_2,
//000598:                         p1, 0, 0, n_2,
//000599:                         p3, 0, 0, n_2,
//000600:                         C, cx + n_2, cy + n_2, cs);
//000601:                     matrix_sub(n_2, n_2,
//000602:                         C, cx + n_2, cy + n_2, cs,
//000603:                         p2, 0, 0, n_2,
//000604:                         C, cx + n_2, cy + n_2, cs);
//000605:                     matrix_add(n_2, n_2,
//000606:                         C, cx + n_2, cy + n_2, cs,
//000607:                         p6, 0, 0, n_2,
//000608:                         C, cx + n_2, cy + n_2, cs);
//000609:                 });
//000610: 
//000611:                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
//000612:             }
//000613:         }
//000614:     }
//000615: }
      IL_007b:  ret
    } // end of method '<>c__DisplayClass15'::'<strassen_mult_parallel>b__e'

    .method public hidebysig instance void 
            '<strassen_mult_parallel>b__f'() cil managed
    {
      // Code size       502 (0x1f6)
      .maxstack  14
//000596:                 {
      IL_0000:  nop
//000597:                     matrix_add(n_2, n_2,
      IL_0001:  ldarg.0
      IL_0002:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_0007:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_000c:  ldarg.0
      IL_000d:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_0012:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_0017:  ldarg.0
      IL_0018:  ldfld      int32* Matrix/'<>c__DisplayClass15'::p1
      IL_001d:  ldc.i4.0
      IL_001e:  ldc.i4.0
      IL_001f:  ldarg.0
      IL_0020:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_0025:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_002a:  ldarg.0
      IL_002b:  ldfld      int32* Matrix/'<>c__DisplayClass15'::p3
      IL_0030:  ldc.i4.0
      IL_0031:  ldc.i4.0
      IL_0032:  ldarg.0
      IL_0033:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_0038:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_003d:  ldarg.0
      IL_003e:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_0043:  ldfld      int32* Matrix/'<>c__DisplayClass11'::C
      IL_0048:  ldarg.0
      IL_0049:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_004e:  ldfld      int32 Matrix/'<>c__DisplayClass11'::cx
      IL_0053:  ldarg.0
      IL_0054:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_0059:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_005e:  add
      IL_005f:  ldarg.0
      IL_0060:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_0065:  ldfld      int32 Matrix/'<>c__DisplayClass11'::cy
      IL_006a:  ldarg.0
      IL_006b:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_0070:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_0075:  add
      IL_0076:  ldarg.0
      IL_0077:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_007c:  ldfld      int32 Matrix/'<>c__DisplayClass11'::cs
      IL_0081:  call       void Matrix::matrix_add(int32,
                                                   int32,
                                                   int32*,
                                                   int32,
                                                   int32,
                                                   int32,
                                                   int32*,
                                                   int32,
                                                   int32,
                                                   int32,
                                                   int32*,
                                                   int32,
                                                   int32,
                                                   int32)
      IL_0086:  nop
//000598:                         p1, 0, 0, n_2,
//000599:                         p3, 0, 0, n_2,
//000600:                         C, cx + n_2, cy + n_2, cs);
//000601:                     matrix_sub(n_2, n_2,
      IL_0087:  ldarg.0
      IL_0088:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_008d:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_0092:  ldarg.0
      IL_0093:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_0098:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_009d:  ldarg.0
      IL_009e:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_00a3:  ldfld      int32* Matrix/'<>c__DisplayClass11'::C
      IL_00a8:  ldarg.0
      IL_00a9:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_00ae:  ldfld      int32 Matrix/'<>c__DisplayClass11'::cx
      IL_00b3:  ldarg.0
      IL_00b4:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_00b9:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_00be:  add
      IL_00bf:  ldarg.0
      IL_00c0:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_00c5:  ldfld      int32 Matrix/'<>c__DisplayClass11'::cy
      IL_00ca:  ldarg.0
      IL_00cb:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_00d0:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_00d5:  add
      IL_00d6:  ldarg.0
      IL_00d7:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_00dc:  ldfld      int32 Matrix/'<>c__DisplayClass11'::cs
      IL_00e1:  ldarg.0
      IL_00e2:  ldfld      int32* Matrix/'<>c__DisplayClass15'::p2
      IL_00e7:  ldc.i4.0
      IL_00e8:  ldc.i4.0
      IL_00e9:  ldarg.0
      IL_00ea:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_00ef:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_00f4:  ldarg.0
      IL_00f5:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_00fa:  ldfld      int32* Matrix/'<>c__DisplayClass11'::C
      IL_00ff:  ldarg.0
      IL_0100:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_0105:  ldfld      int32 Matrix/'<>c__DisplayClass11'::cx
      IL_010a:  ldarg.0
      IL_010b:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_0110:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_0115:  add
      IL_0116:  ldarg.0
      IL_0117:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_011c:  ldfld      int32 Matrix/'<>c__DisplayClass11'::cy
      IL_0121:  ldarg.0
      IL_0122:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_0127:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_012c:  add
      IL_012d:  ldarg.0
      IL_012e:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_0133:  ldfld      int32 Matrix/'<>c__DisplayClass11'::cs
      IL_0138:  call       void Matrix::matrix_sub(int32,
                                                   int32,
                                                   int32*,
                                                   int32,
                                                   int32,
                                                   int32,
                                                   int32*,
                                                   int32,
                                                   int32,
                                                   int32,
                                                   int32*,
                                                   int32,
                                                   int32,
                                                   int32)
      IL_013d:  nop
//000602:                         C, cx + n_2, cy + n_2, cs,
//000603:                         p2, 0, 0, n_2,
//000604:                         C, cx + n_2, cy + n_2, cs);
//000605:                     matrix_add(n_2, n_2,
      IL_013e:  ldarg.0
      IL_013f:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_0144:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_0149:  ldarg.0
      IL_014a:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_014f:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_0154:  ldarg.0
      IL_0155:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_015a:  ldfld      int32* Matrix/'<>c__DisplayClass11'::C
      IL_015f:  ldarg.0
      IL_0160:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_0165:  ldfld      int32 Matrix/'<>c__DisplayClass11'::cx
      IL_016a:  ldarg.0
      IL_016b:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_0170:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_0175:  add
      IL_0176:  ldarg.0
      IL_0177:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_017c:  ldfld      int32 Matrix/'<>c__DisplayClass11'::cy
      IL_0181:  ldarg.0
      IL_0182:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_0187:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_018c:  add
      IL_018d:  ldarg.0
      IL_018e:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_0193:  ldfld      int32 Matrix/'<>c__DisplayClass11'::cs
      IL_0198:  ldarg.0
      IL_0199:  ldfld      int32* Matrix/'<>c__DisplayClass15'::p6
      IL_019e:  ldc.i4.0
      IL_019f:  ldc.i4.0
      IL_01a0:  ldarg.0
      IL_01a1:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_01a6:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_01ab:  ldarg.0
      IL_01ac:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_01b1:  ldfld      int32* Matrix/'<>c__DisplayClass11'::C
      IL_01b6:  ldarg.0
      IL_01b7:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_01bc:  ldfld      int32 Matrix/'<>c__DisplayClass11'::cx
      IL_01c1:  ldarg.0
      IL_01c2:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_01c7:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_01cc:  add
      IL_01cd:  ldarg.0
      IL_01ce:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_01d3:  ldfld      int32 Matrix/'<>c__DisplayClass11'::cy
      IL_01d8:  ldarg.0
      IL_01d9:  ldfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
      IL_01de:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
      IL_01e3:  add
      IL_01e4:  ldarg.0
      IL_01e5:  ldfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
      IL_01ea:  ldfld      int32 Matrix/'<>c__DisplayClass11'::cs
      IL_01ef:  call       void Matrix::matrix_add(int32,
                                                   int32,
                                                   int32*,
                                                   int32,
                                                   int32,
                                                   int32,
                                                   int32*,
                                                   int32,
                                                   int32,
                                                   int32,
                                                   int32*,
                                                   int32,
                                                   int32,
                                                   int32)
      IL_01f4:  nop
//000606:                         C, cx + n_2, cy + n_2, cs,
//000607:                         p6, 0, 0, n_2,
//000608:                         C, cx + n_2, cy + n_2, cs);
//000609:                 });
//000610: 
//000611:                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
//000612:             }
//000613:         }
//000614:     }
//000615: }
      IL_01f5:  ret
    } // end of method '<>c__DisplayClass15'::'<strassen_mult_parallel>b__f'

  } // end of class '<>c__DisplayClass15'

  .field private int32 _size
  .field private static int32[] _validSizes
  .field private int32[] _data
  .field private int32* _dataPtr
  .field private valuetype [mscorlib]System.Runtime.InteropServices.GCHandle _dataPtrHandle
  .field private static class [mscorlib]System.Func`2<class [mscorlib]System.Exception,bool> 'CS$<>9__CachedAnonymousMethodDelegate10'
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
  .method public hidebysig specialname rtspecialname 
          instance void  .ctor(int32 size) cil managed
  {
    // Code size       100 (0x64)
    .maxstack  3
    .locals init ([0] bool CS$4$0000,
             [1] native int CS$0$0001)
//000023:     public Matrix(int size)
    IL_0000:  ldarg.0
    IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
    IL_0006:  nop
//000024:     {
    IL_0007:  nop
//000025:         if (!_validSizes.Contains(size)) throw new ArgumentOutOfRangeException("size");
    IL_0008:  ldsfld     int32[] Matrix::_validSizes
    IL_000d:  ldarg.1
    IL_000e:  call       bool [System.Core]System.Linq.Enumerable::Contains<int32>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>,
                                                                                   !!0)
    IL_0013:  stloc.0
//000026:         _size = size;
//000027:         _data = new int[size * size];
//000028: 
//000029:         _dataPtrHandle = GCHandle.Alloc(_data, GCHandleType.Pinned);
//000030:         _dataPtr = (int*)_dataPtrHandle.AddrOfPinnedObject().ToPointer();
//000031:     }
//000032: 
//000033:     ~Matrix() { Dispose(); }
//000034:     public void Dispose()
//000035:     {
//000036:         if (_data != null)
//000037:         {
//000038:             _dataPtrHandle.Free();
//000039:             _data = null;
//000040:         }
//000041:     }
//000042: 
//000043:     public int[] ValidSizes { get { return _validSizes.ToArray(); } }
//000044: 
//000045:     public void FillWithRandomValues()
//000046:     {
//000047:         Random rand = new Random();
//000048:         for (int i = 0; i < _data.Length; i++)
//000049:         {
//000050:             _data[i] = rand.Next() % 127;
//000051:         }
//000052:     }
//000053: 
//000054:     public bool Equals(Matrix other)
//000055:     {
//000056:         if (_size != other._size) return false;
//000057:         for (int i = 0; i < _data.Length; i++) if (_data[i] != other._data[i]) return false;
//000058:         return true;
//000059:     }
//000060: 
//000061:     public static void Multiply(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
//000062:     {
//000063:         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
//000064:         int N = src1._size;
//000065:         matrix_mult_serial(
//000066:             cancellationToken,
//000067:             N, N, N,
//000068:             src1._dataPtr, 0, 0, N,
//000069:             src2._dataPtr, 0, 0, N,
//000070:             dst._dataPtr, 0, 0, N);
//000071:     }
//000072: 
//000073:     public static void MultiplyParallel(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
//000074:     {
//000075:         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
//000076:         int N = src1._size;
//000077:         matrix_mult_parallel(
//000078:             cancellationToken,
//000079:             N, N, N,
//000080:             src1._dataPtr, 0, 0, N,
//000081:             src2._dataPtr, 0, 0, N,
//000082:             dst._dataPtr, 0, 0, N);
//000083:     }
//000084: 
//000085:     public static void MultiplyStrassens(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
//000086:     {
//000087:         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
//000088:         int N = src1._size;
//000089:         strassen_mult_serial(
//000090:             cancellationToken,
//000091:             N,
//000092:             src1._dataPtr, 0, 0, N,
//000093:             src2._dataPtr, 0, 0, N,
//000094:             dst._dataPtr, 0, 0, N,
//000095:             64);
//000096:     }
//000097: 
//000098:     public static void MultiplyStrassensParallel(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
//000099:     {
//000100:         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
//000101:         int N = src1._size;
//000102:         strassen_mult_parallel(
//000103:             cancellationToken,
//000104:             N,
//000105:             src1._dataPtr, 0, 0, N,
//000106:             src2._dataPtr, 0, 0, N,
//000107:             dst._dataPtr, 0, 0, N,
//000108:             64);
//000109:     }
//000110: 
//000111:     private static void matrix_add( 
//000112:         // dimensions of A, B, and C submatrices 
//000113:         int n, int m,
//000114:         // (ax,ay) = origin of A submatrix for multiplicand 
//000115:         int* A, int ax, int ay, int a_s,
//000116:         // (bx,by) = origin of B submatrix for multiplicand 
//000117:         int* B, int bx, int by, int bs,
//000118:         // (cx,cy) = origin of C submatrix for result 
//000119:         int* C, int cx, int cy, int cs)
//000120:     {
//000121:         for (int i = 0; i < n; i += 1)
//000122:             for (int j = 0; j < m; j += 1)
//000123:                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] + B[(i + bx) * bs + j + by];
//000124:     }
//000125: 
//000126:     private static void matrix_sub(
//000127:         // dimensions of A, B, and C submatrices 
//000128:         int n, int m,
//000129:         // (ax,ay) = origin of A submatrix for multiplicand 
//000130:         int* A, int ax, int ay, int a_s,
//000131:         // (bx,by) = origin of B submatrix for multiplicand 
//000132:         int* B, int bx, int by, int bs,
//000133:         // (cx,cy) = origin of C submatrix for result 
//000134:         int* C, int cx, int cy, int cs)
//000135:     {
//000136:         for (int i = 0; i < n; i += 1)
//000137:         {
//000138:             for (int j = 0; j < m; j += 1)
//000139:             {
//000140:                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] - B[(i + bx) * bs + j + by];
//000141:             }
//000142:         }
//000143:     }
//000144: 
//000145:     private static void matrix_mult_serial(
//000146:         CancellationToken cancellationToken, 
//000147:         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
//000148:         int l, int m, int n,
//000149:         // (ax,ay) = origin of A submatrix for multiplicand 
//000150:         int* A, int ax, int ay, int a_s,
//000151:         // (bx,by) = origin of B submatrix for multiplicand 
//000152:         int* B, int bx, int by, int bs,
//000153:         // (cx,cy) = origin of C submatrix for result 
//000154:         int* C, int cx, int cy, int cs)
//000155:     {
//000156:         for (int i = 0; i < l; ++i)
//000157:         {
//000158:             cancellationToken.ThrowIfCancellationRequested();
//000159:             for (int j = 0; j < n; j++)
//000160:             {
//000161:                 int temp = 0;
//000162:                 for (int k = 0; k < m; k++)
//000163:                 {
//000164:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
//000165:                 }
//000166:                 C[(i + cx) * cs + j + cy] = temp;
//000167:             }
//000168:         }
//000169:     }
//000170: 
//000171:     private static void matrix_mult_parallel(
//000172:         CancellationToken cancellationToken, 
//000173:         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
//000174:         int l, int m, int n,
//000175:         // (ax,ay) = origin of A submatrix for multiplicand 
//000176:         int* A, int ax, int ay, int a_s,
//000177:         // (bx,by) = origin of B submatrix for multiplicand 
//000178:         int* B, int bx, int by, int bs,
//000179:         // (cx,cy) = origin of C submatrix for result 
//000180:         int* C, int cx, int cy, int cs)
//000181:     {
//000182:         ParallelOptions options = new ParallelOptions { CancellationToken = cancellationToken };
//000183:         Parallel.For(0, l, options, i =>
//000184:         {
//000185:             for (int j = 0; j < n; j++)
//000186:             {
//000187:                 int temp = 0;
//000188:                 for (int k = 0; k < m; k++)
//000189:                 {
//000190:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
//000191:                 }
//000192:                 C[(i + cx) * cs + j + cy] = temp;
//000193:             }
//000194:         });
//000195:     }
//000196: 
//000197:     private static void strassen_mult_serial(
//000198:         CancellationToken cancellationToken, 
//000199:         // dimensions of A, B, and C submatrices 
//000200:         int n,
//000201:         // (ax,ay) = origin of A submatrix for multiplicand 
//000202:         int* A, int ax, int ay, int a_s,
//000203:         // (bx,by) = origin of B submatrix for multiplicand 
//000204:         int* B, int bx, int by, int bs,
//000205:         // (cx,cy) = origin of C submatrix for result 
//000206:         int* C, int cx, int cy, int cs,
//000207:         // Strassen's recursion limit for array dimensions 
//000208:         int s)
//000209:     {
//000210:         if (n <= s)
//000211:         {
//000212:             matrix_mult_serial(
//000213:                 cancellationToken,
//000214:                 n, n, n,
//000215:                 A, ax, ay, a_s,
//000216:                 B, bx, by, bs,
//000217:                 C, cx, cy, cs);
//000218:         }
//000219:         else
//000220:         {
//000221:             int n_2 = n >> 1;
//000222:             int[] workArr = new int[n_2 * n_2 * 9];
//000223:             fixed (int* work = workArr)
//000224:             {
//000225:                 int* a_cum = work;
//000226:                 int* b_cum = a_cum + n_2 * n_2;
//000227:                 int* p1 = b_cum + n_2 * n_2;
//000228:                 int* p2 = p1 + n_2 * n_2;
//000229:                 int* p3 = p2 + n_2 * n_2;
//000230:                 int* p4 = p3 + n_2 * n_2;
//000231:                 int* p5 = p4 + n_2 * n_2;
//000232:                 int* p6 = p5 + n_2 * n_2;
//000233:                 int* p7 = p6 + n_2 * n_2;
//000234: 
//000235:                 // p1 = (a11 + a22) * (b11 + b22) 
//000236:                 matrix_add(n_2, n_2,
//000237:                     A, ax, ay, a_s,
//000238:                     A, ax + n_2, ay + n_2, a_s,
//000239:                     a_cum, 0, 0, n_2);
//000240:                 matrix_add(n_2, n_2,
//000241:                     B, bx, by, bs,
//000242:                     B, bx + n_2, by + n_2, bs,
//000243:                     b_cum, 0, 0, n_2);
//000244:                 strassen_mult_serial(
//000245:                     cancellationToken,
//000246:                     n_2,
//000247:                     a_cum, 0, 0, n_2,
//000248:                     b_cum, 0, 0, n_2,
//000249:                     p1, 0, 0, n_2,
//000250:                     s);
//000251: 
//000252:                 // p2 = (a21 + a22) * b11 
//000253:                 matrix_add(n_2, n_2,
//000254:                     A, ax + n_2, ay, a_s,
//000255:                     A, ax + n_2, ay + n_2, a_s,
//000256:                     a_cum, 0, 0, n_2);
//000257:                 strassen_mult_serial(
//000258:                     cancellationToken,
//000259:                     n_2,
//000260:                     a_cum, 0, 0, n_2,
//000261:                     B, bx, by, bs,
//000262:                     p2, 0, 0, n_2,
//000263:                     s);
//000264: 
//000265:                 // p3 = a11 x (b12 - b22) 
//000266:                 matrix_sub(n_2, n_2,
//000267:                     B, bx, by + n_2, bs,
//000268:                     B, bx + n_2, by + n_2, bs,
//000269:                     b_cum, 0, 0, n_2);
//000270:                 strassen_mult_serial(
//000271:                     cancellationToken,
//000272:                     n_2,
//000273:                     A, ax, ay, a_s,
//000274:                     b_cum, 0, 0, n_2,
//000275:                     p3, 0, 0, n_2,
//000276:                     s);
//000277: 
//000278:                 // p4 = a22 x (b21 - b11) 
//000279:                 matrix_sub(n_2, n_2,
//000280:                     B, bx + n_2, by, bs,
//000281:                     B, bx, by, bs,
//000282:                     b_cum, 0, 0, n_2);
//000283:                 strassen_mult_serial(
//000284:                     cancellationToken,
//000285:                     n_2,
//000286:                     A, ax + n_2, ay + n_2, a_s,
//000287:                     b_cum, 0, 0, n_2,
//000288:                     p4, 0, 0, n_2,
//000289:                     s);
//000290: 
//000291:                 // p5 = (a11 + a12) x b22 
//000292:                 matrix_add(n_2, n_2,
//000293:                     A, ax, ay, a_s,
//000294:                     A, ax, ay + n_2, a_s,
//000295:                     a_cum, 0, 0, n_2);
//000296:                 strassen_mult_serial(
//000297:                     cancellationToken,
//000298:                     n_2,
//000299:                     a_cum, 0, 0, n_2,
//000300:                     B, bx + n_2, by + n_2, bs,
//000301:                     p5, 0, 0, n_2,
//000302:                     s);
//000303: 
//000304:                 // p6 = (a21 - a11) x (b11 + b12) 
//000305:                 matrix_sub(n_2, n_2,
//000306:                     A, ax + n_2, ay, a_s,
//000307:                     A, ax, ay, a_s,
//000308:                     a_cum, 0, 0, n_2);
//000309:                 matrix_add(n_2, n_2,
//000310:                     B, bx, by, bs,
//000311:                     B, bx, by + n_2, bs,
//000312:                     b_cum, 0, 0, n_2);
//000313:                 strassen_mult_serial(
//000314:                     cancellationToken,
//000315:                     n_2,
//000316:                     a_cum, 0, 0, n_2,
//000317:                     b_cum, 0, 0, n_2,
//000318:                     p6, 0, 0, n_2,
//000319:                     s);
//000320: 
//000321:                 // p7 = (a12 - a22) x (b21 + b22) 
//000322:                 matrix_sub(n_2, n_2,
//000323:                     A, ax, ay + n_2, a_s,
//000324:                     A, ax + n_2, ay + n_2, a_s,
//000325:                     a_cum, 0, 0, n_2);
//000326:                 matrix_add(n_2, n_2,
//000327:                     B, bx + n_2, by, bs,
//000328:                     B, bx + n_2, by + n_2, bs,
//000329:                     b_cum, 0, 0, n_2);
//000330:                 strassen_mult_serial(
//000331:                     cancellationToken,
//000332:                     n_2,
//000333:                     a_cum, 0, 0, n_2,
//000334:                     b_cum, 0, 0, n_2,
//000335:                     p7, 0, 0, n_2,
//000336:                     s);
//000337: 
//000338:                 // c11 = p1 + p4 - p5 + p7 
//000339:                 matrix_add(n_2, n_2,
//000340:                     p1, 0, 0, n_2,
//000341:                     p4, 0, 0, n_2,
//000342:                     C, cx, cy, cs);
//000343:                 matrix_sub(n_2, n_2,
//000344:                     C, cx, cy, cs,
//000345:                     p5, 0, 0, n_2,
//000346:                     C, cx, cy, cs);
//000347:                 matrix_add(n_2, n_2,
//000348:                     C, cx, cy, cs,
//000349:                     p7, 0, 0, n_2,
//000350:                     C, cx, cy, cs);
//000351: 
//000352:                 // c12 = p3 + p5 
//000353:                 matrix_add(n_2, n_2,
//000354:                     p3, 0, 0, n_2,
//000355:                     p5, 0, 0, n_2,
//000356:                     C, cx, cy + n_2, cs);
//000357: 
//000358:                 // c21 = p2 + p4 
//000359:                 matrix_add(n_2, n_2,
//000360:                     p2, 0, 0, n_2,
//000361:                     p4, 0, 0, n_2,
//000362:                     C, cx + n_2, cy, cs);
//000363: 
//000364:                 // c22 = p1 + p3 - p2 + p6 
//000365:                 matrix_add(n_2, n_2,
//000366:                     p1, 0, 0, n_2,
//000367:                     p3, 0, 0, n_2,
//000368:                     C, cx + n_2, cy + n_2, cs);
//000369:                 matrix_sub(n_2, n_2,
//000370:                     C, cx + n_2, cy + n_2, cs,
//000371:                     p2, 0, 0, n_2,
//000372:                     C, cx + n_2, cy + n_2, cs);
//000373:                 matrix_add(n_2, n_2,
//000374:                     C, cx + n_2, cy + n_2, cs,
//000375:                     p6, 0, 0, n_2,
//000376:                     C, cx + n_2, cy + n_2, cs);
//000377:             }
//000378:         }
//000379:     }
//000380: 
//000381:     private static void strassen_mult_parallel(
//000382:         CancellationToken cancellationToken, 
//000383:         // dimensions of A, B, and C submatrices 
//000384:         int n,
//000385:         // (ax,ay) = origin of A submatrix for multiplicand 
//000386:         int* A, int ax, int ay, int a_s,
//000387:         // (bx,by) = origin of B submatrix for multiplicand 
//000388:         int* B, int bx, int by, int bs,
//000389:         // (cx,cy) = origin of C submatrix for result 
//000390:         int* C, int cx, int cy, int cs,
//000391:         // Strassen's recursion limit for array dimensions 
//000392:         int s)
//000393:     {
//000394:         if (n <= s)
//000395:         {
//000396:             matrix_mult_serial(
//000397:                 cancellationToken,
//000398:                 n, n, n,
//000399:                 A, ax, ay, a_s,
//000400:                 B, bx, by, bs,
//000401:                 C, cx, cy, cs);
//000402:         }
//000403:         else
//000404:         {
//000405:             int n_2 = n >> 1;
//000406:             int areaSize = n_2 * n_2;
//000407:             int[] workArr = new int[areaSize * 17];
//000408:             fixed (int* work = workArr)
//000409:             {
//000410:                 int* a_cum = work;
//000411:                 int* b_cum = a_cum + areaSize;
//000412:                 int* c_cum = b_cum + areaSize;
//000413:                 int* d_cum = c_cum + areaSize;
//000414:                 int* e_cum = d_cum + areaSize;
//000415:                 int* f_cum = e_cum + areaSize;
//000416:                 int* g_cum = f_cum + areaSize;
//000417:                 int* h_cum = g_cum + areaSize;
//000418:                 int* i_cum = h_cum + areaSize;
//000419:                 int* j_cum = i_cum + areaSize;
//000420:                 int* p1 = j_cum + areaSize;
//000421:                 int* p2 = p1 + areaSize;
//000422:                 int* p3 = p2 + areaSize;
//000423:                 int* p4 = p3 + areaSize;
//000424:                 int* p5 = p4 + areaSize;
//000425:                 int* p6 = p5 + areaSize;
//000426:                 int* p7 = p6 + areaSize;
//000427: 
//000428:                 // p1 = (a11 + a22) * (b11 + b22) 
//000429:                 Task t_p1 = Task.Factory.StartNew(() =>
//000430:                 {
//000431:                     matrix_add(n_2, n_2,
//000432:                         A, ax, ay, a_s,
//000433:                         A, ax + n_2, ay + n_2, a_s,
//000434:                         a_cum, 0, 0, n_2);
//000435:                     matrix_add(n_2, n_2,
//000436:                         B, bx, by, bs,
//000437:                         B, bx + n_2, by + n_2, bs,
//000438:                         b_cum, 0, 0, n_2);
//000439:                     strassen_mult_parallel(
//000440:                         cancellationToken,
//000441:                         n_2,
//000442:                         a_cum, 0, 0, n_2,
//000443:                         b_cum, 0, 0, n_2,
//000444:                         p1, 0, 0, n_2,
//000445:                         s);
//000446:                 }, cancellationToken);
//000447: 
//000448:                 // p2 = (a21 + a22) * b11 
//000449:                 Task t_p2 = Task.Factory.StartNew(() =>
//000450:                 {
//000451:                     matrix_add(n_2, n_2,
//000452:                         A, ax + n_2, ay, a_s,
//000453:                         A, ax + n_2, ay + n_2, a_s,
//000454:                         c_cum, 0, 0, n_2);
//000455:                     strassen_mult_parallel(
//000456:                         cancellationToken,
//000457:                         n_2,
//000458:                         c_cum, 0, 0, n_2,
//000459:                         B, bx, by, bs,
//000460:                         p2, 0, 0, n_2,
//000461:                         s);
//000462:                 }, cancellationToken);
//000463: 
//000464:                 // p3 = a11 x (b12 - b22) 
//000465:                 Task t_p3 = Task.Factory.StartNew(() =>
//000466:                 {
//000467:                     matrix_sub(n_2, n_2,
//000468:                         B, bx, by + n_2, bs,
//000469:                         B, bx + n_2, by + n_2, bs,
//000470:                         d_cum, 0, 0, n_2);
//000471:                     strassen_mult_parallel(
//000472:                         cancellationToken,
//000473:                         n_2,
//000474:                         A, ax, ay, a_s,
//000475:                         d_cum, 0, 0, n_2,
//000476:                         p3, 0, 0, n_2,
//000477:                         s);
//000478:                 }, cancellationToken);
//000479: 
//000480:                 // p4 = a22 x (b21 - b11) 
//000481:                 Task t_p4 = Task.Factory.StartNew(() =>
//000482:                 {
//000483:                     matrix_sub(n_2, n_2,
//000484:                         B, bx + n_2, by, bs,
//000485:                         B, bx, by, bs,
//000486:                         e_cum, 0, 0, n_2);
//000487:                     strassen_mult_parallel(
//000488:                         cancellationToken,
//000489:                         n_2,
//000490:                         A, ax + n_2, ay + n_2, a_s,
//000491:                         e_cum, 0, 0, n_2,
//000492:                         p4, 0, 0, n_2,
//000493:                         s);
//000494:                 }, cancellationToken);
//000495: 
//000496:                 // p5 = (a11 + a12) x b22 
//000497:                 Task t_p5 = Task.Factory.StartNew(() =>
//000498:                 {
//000499:                     matrix_add(n_2, n_2,
//000500:                         A, ax, ay, a_s,
//000501:                         A, ax, ay + n_2, a_s,
//000502:                         f_cum, 0, 0, n_2);
//000503:                     strassen_mult_parallel(
//000504:                         cancellationToken,
//000505:                         n_2,
//000506:                         f_cum, 0, 0, n_2,
//000507:                         B, bx + n_2, by + n_2, bs,
//000508:                         p5, 0, 0, n_2,
//000509:                         s);
//000510:                 }, cancellationToken);
//000511: 
//000512:                 // p6 = (a21 - a11) x (b11 + b12) 
//000513:                 Task t_p6 = Task.Factory.StartNew(() =>
//000514:                 {
//000515:                     matrix_sub(n_2, n_2,
//000516:                         A, ax + n_2, ay, a_s,
//000517:                         A, ax, ay, a_s,
//000518:                         g_cum, 0, 0, n_2);
//000519:                     matrix_add(n_2, n_2,
//000520:                         B, bx, by, bs,
//000521:                         B, bx, by + n_2, bs,
//000522:                         h_cum, 0, 0, n_2);
//000523:                     strassen_mult_parallel(
//000524:                         cancellationToken,
//000525:                         n_2,
//000526:                         g_cum, 0, 0, n_2,
//000527:                         h_cum, 0, 0, n_2,
//000528:                         p6, 0, 0, n_2,
//000529:                         s);
//000530:                 }, cancellationToken);
//000531: 
//000532:                 // p7 = (a12 - a22) x (b21 + b22) 
//000533:                 Task t_p7 = Task.Factory.StartNew(() =>
//000534:                 {
//000535:                     matrix_sub(n_2, n_2,
//000536:                         A, ax, ay + n_2, a_s,
//000537:                         A, ax + n_2, ay + n_2, a_s,
//000538:                         i_cum, 0, 0, n_2);
//000539:                     matrix_add(n_2, n_2,
//000540:                         B, bx + n_2, by, bs,
//000541:                         B, bx + n_2, by + n_2, bs,
//000542:                         j_cum, 0, 0, n_2);
//000543:                     strassen_mult_parallel(
//000544:                         cancellationToken,
//000545:                         n_2,
//000546:                         i_cum, 0, 0, n_2,
//000547:                         j_cum, 0, 0, n_2,
//000548:                         p7, 0, 0, n_2,
//000549:                         s);
//000550:                 }, cancellationToken);
//000551: 
//000552:                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
//000553:                 catch (AggregateException ae)
//000554:                 {
//000555:                     ae.Flatten().Handle(e => e is TaskCanceledException);
//000556:                     cancellationToken.ThrowIfCancellationRequested();
//000557:                 }
//000558: 
//000559:                 // c11 = p1 + p4 - p5 + p7 
//000560:                 Task t_c11 = Task.Factory.StartNew(() =>
//000561:                 {
//000562:                     matrix_add(n_2, n_2,
//000563:                         p1, 0, 0, n_2,
//000564:                         p4, 0, 0, n_2,
//000565:                         C, cx, cy, cs);
//000566:                     matrix_sub(n_2, n_2,
//000567:                         C, cx, cy, cs,
//000568:                         p5, 0, 0, n_2,
//000569:                         C, cx, cy, cs);
//000570:                     matrix_add(n_2, n_2,
//000571:                         C, cx, cy, cs,
//000572:                         p7, 0, 0, n_2,
//000573:                         C, cx, cy, cs);
//000574:                 });
//000575: 
//000576:                 // c12 = p3 + p5 
//000577:                 Task t_c12 = Task.Factory.StartNew(() =>
//000578:                 {
//000579:                     matrix_add(n_2, n_2,
//000580:                         p3, 0, 0, n_2,
//000581:                         p5, 0, 0, n_2,
//000582:                         C, cx, cy + n_2, cs);
//000583:                 });
//000584: 
//000585:                 // c21 = p2 + p4 
//000586:                 Task t_c21 = Task.Factory.StartNew(() =>
//000587:                 {
//000588:                     matrix_add(n_2, n_2,
//000589:                         p2, 0, 0, n_2,
//000590:                         p4, 0, 0, n_2,
//000591:                         C, cx + n_2, cy, cs);
//000592:                 });
//000593: 
//000594:                 // c22 = p1 + p3 - p2 + p6 
//000595:                 Task t_c22 = Task.Factory.StartNew(() =>
//000596:                 {
//000597:                     matrix_add(n_2, n_2,
//000598:                         p1, 0, 0, n_2,
//000599:                         p3, 0, 0, n_2,
//000600:                         C, cx + n_2, cy + n_2, cs);
//000601:                     matrix_sub(n_2, n_2,
//000602:                         C, cx + n_2, cy + n_2, cs,
//000603:                         p2, 0, 0, n_2,
//000604:                         C, cx + n_2, cy + n_2, cs);
//000605:                     matrix_add(n_2, n_2,
//000606:                         C, cx + n_2, cy + n_2, cs,
//000607:                         p6, 0, 0, n_2,
//000608:                         C, cx + n_2, cy + n_2, cs);
//000609:                 });
//000610: 
//000611:                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
//000612:             }
//000613:         }
//000614:     }
//000615: }
    IL_0014:  ldloc.0
    IL_0015:  brtrue.s   IL_0022

//000025:         if (!_validSizes.Contains(size)) throw new ArgumentOutOfRangeException("size");
    IL_0017:  ldstr      "size"
    IL_001c:  newobj     instance void [mscorlib]System.ArgumentOutOfRangeException::.ctor(string)
    IL_0021:  throw

//000026:         _size = size;
    IL_0022:  ldarg.0
    IL_0023:  ldarg.1
    IL_0024:  stfld      int32 Matrix::_size
//000027:         _data = new int[size * size];
    IL_0029:  ldarg.0
    IL_002a:  ldarg.1
    IL_002b:  ldarg.1
    IL_002c:  mul
    IL_002d:  newarr     [mscorlib]System.Int32
    IL_0032:  stfld      int32[] Matrix::_data
//000028: 
//000029:         _dataPtrHandle = GCHandle.Alloc(_data, GCHandleType.Pinned);
    IL_0037:  ldarg.0
    IL_0038:  ldarg.0
    IL_0039:  ldfld      int32[] Matrix::_data
    IL_003e:  ldc.i4.3
    IL_003f:  call       valuetype [mscorlib]System.Runtime.InteropServices.GCHandle [mscorlib]System.Runtime.InteropServices.GCHandle::Alloc(object,
                                                                                                                                              valuetype [mscorlib]System.Runtime.InteropServices.GCHandleType)
    IL_0044:  stfld      valuetype [mscorlib]System.Runtime.InteropServices.GCHandle Matrix::_dataPtrHandle
//000030:         _dataPtr = (int*)_dataPtrHandle.AddrOfPinnedObject().ToPointer();
    IL_0049:  ldarg.0
    IL_004a:  ldarg.0
    IL_004b:  ldflda     valuetype [mscorlib]System.Runtime.InteropServices.GCHandle Matrix::_dataPtrHandle
    IL_0050:  call       instance native int [mscorlib]System.Runtime.InteropServices.GCHandle::AddrOfPinnedObject()
    IL_0055:  stloc.1
    IL_0056:  ldloca.s   CS$0$0001
    IL_0058:  call       instance void* [mscorlib]System.IntPtr::ToPointer()
    IL_005d:  stfld      int32* Matrix::_dataPtr
//000031:     }
    IL_0062:  nop
    IL_0063:  ret
  } // end of method Matrix::.ctor

  .method family hidebysig virtual instance void 
          Finalize() cil managed
  {
    // Code size       21 (0x15)
    .maxstack  1
//000032: 
//000033:     ~Matrix() { Dispose(); }
    .try
    {
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  call       instance void Matrix::Dispose()
      IL_0007:  nop
      IL_0008:  nop
//000034:     public void Dispose()
//000035:     {
//000036:         if (_data != null)
//000037:         {
//000038:             _dataPtrHandle.Free();
//000039:             _data = null;
//000040:         }
//000041:     }
//000042: 
//000043:     public int[] ValidSizes { get { return _validSizes.ToArray(); } }
//000044: 
//000045:     public void FillWithRandomValues()
//000046:     {
//000047:         Random rand = new Random();
//000048:         for (int i = 0; i < _data.Length; i++)
//000049:         {
//000050:             _data[i] = rand.Next() % 127;
//000051:         }
//000052:     }
//000053: 
//000054:     public bool Equals(Matrix other)
//000055:     {
//000056:         if (_size != other._size) return false;
//000057:         for (int i = 0; i < _data.Length; i++) if (_data[i] != other._data[i]) return false;
//000058:         return true;
//000059:     }
//000060: 
//000061:     public static void Multiply(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
//000062:     {
//000063:         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
//000064:         int N = src1._size;
//000065:         matrix_mult_serial(
//000066:             cancellationToken,
//000067:             N, N, N,
//000068:             src1._dataPtr, 0, 0, N,
//000069:             src2._dataPtr, 0, 0, N,
//000070:             dst._dataPtr, 0, 0, N);
//000071:     }
//000072: 
//000073:     public static void MultiplyParallel(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
//000074:     {
//000075:         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
//000076:         int N = src1._size;
//000077:         matrix_mult_parallel(
//000078:             cancellationToken,
//000079:             N, N, N,
//000080:             src1._dataPtr, 0, 0, N,
//000081:             src2._dataPtr, 0, 0, N,
//000082:             dst._dataPtr, 0, 0, N);
//000083:     }
//000084: 
//000085:     public static void MultiplyStrassens(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
//000086:     {
//000087:         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
//000088:         int N = src1._size;
//000089:         strassen_mult_serial(
//000090:             cancellationToken,
//000091:             N,
//000092:             src1._dataPtr, 0, 0, N,
//000093:             src2._dataPtr, 0, 0, N,
//000094:             dst._dataPtr, 0, 0, N,
//000095:             64);
//000096:     }
//000097: 
//000098:     public static void MultiplyStrassensParallel(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
//000099:     {
//000100:         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
//000101:         int N = src1._size;
//000102:         strassen_mult_parallel(
//000103:             cancellationToken,
//000104:             N,
//000105:             src1._dataPtr, 0, 0, N,
//000106:             src2._dataPtr, 0, 0, N,
//000107:             dst._dataPtr, 0, 0, N,
//000108:             64);
//000109:     }
//000110: 
//000111:     private static void matrix_add( 
//000112:         // dimensions of A, B, and C submatrices 
//000113:         int n, int m,
//000114:         // (ax,ay) = origin of A submatrix for multiplicand 
//000115:         int* A, int ax, int ay, int a_s,
//000116:         // (bx,by) = origin of B submatrix for multiplicand 
//000117:         int* B, int bx, int by, int bs,
//000118:         // (cx,cy) = origin of C submatrix for result 
//000119:         int* C, int cx, int cy, int cs)
//000120:     {
//000121:         for (int i = 0; i < n; i += 1)
//000122:             for (int j = 0; j < m; j += 1)
//000123:                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] + B[(i + bx) * bs + j + by];
//000124:     }
//000125: 
//000126:     private static void matrix_sub(
//000127:         // dimensions of A, B, and C submatrices 
//000128:         int n, int m,
//000129:         // (ax,ay) = origin of A submatrix for multiplicand 
//000130:         int* A, int ax, int ay, int a_s,
//000131:         // (bx,by) = origin of B submatrix for multiplicand 
//000132:         int* B, int bx, int by, int bs,
//000133:         // (cx,cy) = origin of C submatrix for result 
//000134:         int* C, int cx, int cy, int cs)
//000135:     {
//000136:         for (int i = 0; i < n; i += 1)
//000137:         {
//000138:             for (int j = 0; j < m; j += 1)
//000139:             {
//000140:                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] - B[(i + bx) * bs + j + by];
//000141:             }
//000142:         }
//000143:     }
//000144: 
//000145:     private static void matrix_mult_serial(
//000146:         CancellationToken cancellationToken, 
//000147:         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
//000148:         int l, int m, int n,
//000149:         // (ax,ay) = origin of A submatrix for multiplicand 
//000150:         int* A, int ax, int ay, int a_s,
//000151:         // (bx,by) = origin of B submatrix for multiplicand 
//000152:         int* B, int bx, int by, int bs,
//000153:         // (cx,cy) = origin of C submatrix for result 
//000154:         int* C, int cx, int cy, int cs)
//000155:     {
//000156:         for (int i = 0; i < l; ++i)
//000157:         {
//000158:             cancellationToken.ThrowIfCancellationRequested();
//000159:             for (int j = 0; j < n; j++)
//000160:             {
//000161:                 int temp = 0;
//000162:                 for (int k = 0; k < m; k++)
//000163:                 {
//000164:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
//000165:                 }
//000166:                 C[(i + cx) * cs + j + cy] = temp;
//000167:             }
//000168:         }
//000169:     }
//000170: 
//000171:     private static void matrix_mult_parallel(
//000172:         CancellationToken cancellationToken, 
//000173:         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
//000174:         int l, int m, int n,
//000175:         // (ax,ay) = origin of A submatrix for multiplicand 
//000176:         int* A, int ax, int ay, int a_s,
//000177:         // (bx,by) = origin of B submatrix for multiplicand 
//000178:         int* B, int bx, int by, int bs,
//000179:         // (cx,cy) = origin of C submatrix for result 
//000180:         int* C, int cx, int cy, int cs)
//000181:     {
//000182:         ParallelOptions options = new ParallelOptions { CancellationToken = cancellationToken };
//000183:         Parallel.For(0, l, options, i =>
//000184:         {
//000185:             for (int j = 0; j < n; j++)
//000186:             {
//000187:                 int temp = 0;
//000188:                 for (int k = 0; k < m; k++)
//000189:                 {
//000190:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
//000191:                 }
//000192:                 C[(i + cx) * cs + j + cy] = temp;
//000193:             }
//000194:         });
//000195:     }
//000196: 
//000197:     private static void strassen_mult_serial(
//000198:         CancellationToken cancellationToken, 
//000199:         // dimensions of A, B, and C submatrices 
//000200:         int n,
//000201:         // (ax,ay) = origin of A submatrix for multiplicand 
//000202:         int* A, int ax, int ay, int a_s,
//000203:         // (bx,by) = origin of B submatrix for multiplicand 
//000204:         int* B, int bx, int by, int bs,
//000205:         // (cx,cy) = origin of C submatrix for result 
//000206:         int* C, int cx, int cy, int cs,
//000207:         // Strassen's recursion limit for array dimensions 
//000208:         int s)
//000209:     {
//000210:         if (n <= s)
//000211:         {
//000212:             matrix_mult_serial(
//000213:                 cancellationToken,
//000214:                 n, n, n,
//000215:                 A, ax, ay, a_s,
//000216:                 B, bx, by, bs,
//000217:                 C, cx, cy, cs);
//000218:         }
//000219:         else
//000220:         {
//000221:             int n_2 = n >> 1;
//000222:             int[] workArr = new int[n_2 * n_2 * 9];
//000223:             fixed (int* work = workArr)
//000224:             {
//000225:                 int* a_cum = work;
//000226:                 int* b_cum = a_cum + n_2 * n_2;
//000227:                 int* p1 = b_cum + n_2 * n_2;
//000228:                 int* p2 = p1 + n_2 * n_2;
//000229:                 int* p3 = p2 + n_2 * n_2;
//000230:                 int* p4 = p3 + n_2 * n_2;
//000231:                 int* p5 = p4 + n_2 * n_2;
//000232:                 int* p6 = p5 + n_2 * n_2;
//000233:                 int* p7 = p6 + n_2 * n_2;
//000234: 
//000235:                 // p1 = (a11 + a22) * (b11 + b22) 
//000236:                 matrix_add(n_2, n_2,
//000237:                     A, ax, ay, a_s,
//000238:                     A, ax + n_2, ay + n_2, a_s,
//000239:                     a_cum, 0, 0, n_2);
//000240:                 matrix_add(n_2, n_2,
//000241:                     B, bx, by, bs,
//000242:                     B, bx + n_2, by + n_2, bs,
//000243:                     b_cum, 0, 0, n_2);
//000244:                 strassen_mult_serial(
//000245:                     cancellationToken,
//000246:                     n_2,
//000247:                     a_cum, 0, 0, n_2,
//000248:                     b_cum, 0, 0, n_2,
//000249:                     p1, 0, 0, n_2,
//000250:                     s);
//000251: 
//000252:                 // p2 = (a21 + a22) * b11 
//000253:                 matrix_add(n_2, n_2,
//000254:                     A, ax + n_2, ay, a_s,
//000255:                     A, ax + n_2, ay + n_2, a_s,
//000256:                     a_cum, 0, 0, n_2);
//000257:                 strassen_mult_serial(
//000258:                     cancellationToken,
//000259:                     n_2,
//000260:                     a_cum, 0, 0, n_2,
//000261:                     B, bx, by, bs,
//000262:                     p2, 0, 0, n_2,
//000263:                     s);
//000264: 
//000265:                 // p3 = a11 x (b12 - b22) 
//000266:                 matrix_sub(n_2, n_2,
//000267:                     B, bx, by + n_2, bs,
//000268:                     B, bx + n_2, by + n_2, bs,
//000269:                     b_cum, 0, 0, n_2);
//000270:                 strassen_mult_serial(
//000271:                     cancellationToken,
//000272:                     n_2,
//000273:                     A, ax, ay, a_s,
//000274:                     b_cum, 0, 0, n_2,
//000275:                     p3, 0, 0, n_2,
//000276:                     s);
//000277: 
//000278:                 // p4 = a22 x (b21 - b11) 
//000279:                 matrix_sub(n_2, n_2,
//000280:                     B, bx + n_2, by, bs,
//000281:                     B, bx, by, bs,
//000282:                     b_cum, 0, 0, n_2);
//000283:                 strassen_mult_serial(
//000284:                     cancellationToken,
//000285:                     n_2,
//000286:                     A, ax + n_2, ay + n_2, a_s,
//000287:                     b_cum, 0, 0, n_2,
//000288:                     p4, 0, 0, n_2,
//000289:                     s);
//000290: 
//000291:                 // p5 = (a11 + a12) x b22 
//000292:                 matrix_add(n_2, n_2,
//000293:                     A, ax, ay, a_s,
//000294:                     A, ax, ay + n_2, a_s,
//000295:                     a_cum, 0, 0, n_2);
//000296:                 strassen_mult_serial(
//000297:                     cancellationToken,
//000298:                     n_2,
//000299:                     a_cum, 0, 0, n_2,
//000300:                     B, bx + n_2, by + n_2, bs,
//000301:                     p5, 0, 0, n_2,
//000302:                     s);
//000303: 
//000304:                 // p6 = (a21 - a11) x (b11 + b12) 
//000305:                 matrix_sub(n_2, n_2,
//000306:                     A, ax + n_2, ay, a_s,
//000307:                     A, ax, ay, a_s,
//000308:                     a_cum, 0, 0, n_2);
//000309:                 matrix_add(n_2, n_2,
//000310:                     B, bx, by, bs,
//000311:                     B, bx, by + n_2, bs,
//000312:                     b_cum, 0, 0, n_2);
//000313:                 strassen_mult_serial(
//000314:                     cancellationToken,
//000315:                     n_2,
//000316:                     a_cum, 0, 0, n_2,
//000317:                     b_cum, 0, 0, n_2,
//000318:                     p6, 0, 0, n_2,
//000319:                     s);
//000320: 
//000321:                 // p7 = (a12 - a22) x (b21 + b22) 
//000322:                 matrix_sub(n_2, n_2,
//000323:                     A, ax, ay + n_2, a_s,
//000324:                     A, ax + n_2, ay + n_2, a_s,
//000325:                     a_cum, 0, 0, n_2);
//000326:                 matrix_add(n_2, n_2,
//000327:                     B, bx + n_2, by, bs,
//000328:                     B, bx + n_2, by + n_2, bs,
//000329:                     b_cum, 0, 0, n_2);
//000330:                 strassen_mult_serial(
//000331:                     cancellationToken,
//000332:                     n_2,
//000333:                     a_cum, 0, 0, n_2,
//000334:                     b_cum, 0, 0, n_2,
//000335:                     p7, 0, 0, n_2,
//000336:                     s);
//000337: 
//000338:                 // c11 = p1 + p4 - p5 + p7 
//000339:                 matrix_add(n_2, n_2,
//000340:                     p1, 0, 0, n_2,
//000341:                     p4, 0, 0, n_2,
//000342:                     C, cx, cy, cs);
//000343:                 matrix_sub(n_2, n_2,
//000344:                     C, cx, cy, cs,
//000345:                     p5, 0, 0, n_2,
//000346:                     C, cx, cy, cs);
//000347:                 matrix_add(n_2, n_2,
//000348:                     C, cx, cy, cs,
//000349:                     p7, 0, 0, n_2,
//000350:                     C, cx, cy, cs);
//000351: 
//000352:                 // c12 = p3 + p5 
//000353:                 matrix_add(n_2, n_2,
//000354:                     p3, 0, 0, n_2,
//000355:                     p5, 0, 0, n_2,
//000356:                     C, cx, cy + n_2, cs);
//000357: 
//000358:                 // c21 = p2 + p4 
//000359:                 matrix_add(n_2, n_2,
//000360:                     p2, 0, 0, n_2,
//000361:                     p4, 0, 0, n_2,
//000362:                     C, cx + n_2, cy, cs);
//000363: 
//000364:                 // c22 = p1 + p3 - p2 + p6 
//000365:                 matrix_add(n_2, n_2,
//000366:                     p1, 0, 0, n_2,
//000367:                     p3, 0, 0, n_2,
//000368:                     C, cx + n_2, cy + n_2, cs);
//000369:                 matrix_sub(n_2, n_2,
//000370:                     C, cx + n_2, cy + n_2, cs,
//000371:                     p2, 0, 0, n_2,
//000372:                     C, cx + n_2, cy + n_2, cs);
//000373:                 matrix_add(n_2, n_2,
//000374:                     C, cx + n_2, cy + n_2, cs,
//000375:                     p6, 0, 0, n_2,
//000376:                     C, cx + n_2, cy + n_2, cs);
//000377:             }
//000378:         }
//000379:     }
//000380: 
//000381:     private static void strassen_mult_parallel(
//000382:         CancellationToken cancellationToken, 
//000383:         // dimensions of A, B, and C submatrices 
//000384:         int n,
//000385:         // (ax,ay) = origin of A submatrix for multiplicand 
//000386:         int* A, int ax, int ay, int a_s,
//000387:         // (bx,by) = origin of B submatrix for multiplicand 
//000388:         int* B, int bx, int by, int bs,
//000389:         // (cx,cy) = origin of C submatrix for result 
//000390:         int* C, int cx, int cy, int cs,
//000391:         // Strassen's recursion limit for array dimensions 
//000392:         int s)
//000393:     {
//000394:         if (n <= s)
//000395:         {
//000396:             matrix_mult_serial(
//000397:                 cancellationToken,
//000398:                 n, n, n,
//000399:                 A, ax, ay, a_s,
//000400:                 B, bx, by, bs,
//000401:                 C, cx, cy, cs);
//000402:         }
//000403:         else
//000404:         {
//000405:             int n_2 = n >> 1;
//000406:             int areaSize = n_2 * n_2;
//000407:             int[] workArr = new int[areaSize * 17];
//000408:             fixed (int* work = workArr)
//000409:             {
//000410:                 int* a_cum = work;
//000411:                 int* b_cum = a_cum + areaSize;
//000412:                 int* c_cum = b_cum + areaSize;
//000413:                 int* d_cum = c_cum + areaSize;
//000414:                 int* e_cum = d_cum + areaSize;
//000415:                 int* f_cum = e_cum + areaSize;
//000416:                 int* g_cum = f_cum + areaSize;
//000417:                 int* h_cum = g_cum + areaSize;
//000418:                 int* i_cum = h_cum + areaSize;
//000419:                 int* j_cum = i_cum + areaSize;
//000420:                 int* p1 = j_cum + areaSize;
//000421:                 int* p2 = p1 + areaSize;
//000422:                 int* p3 = p2 + areaSize;
//000423:                 int* p4 = p3 + areaSize;
//000424:                 int* p5 = p4 + areaSize;
//000425:                 int* p6 = p5 + areaSize;
//000426:                 int* p7 = p6 + areaSize;
//000427: 
//000428:                 // p1 = (a11 + a22) * (b11 + b22) 
//000429:                 Task t_p1 = Task.Factory.StartNew(() =>
//000430:                 {
//000431:                     matrix_add(n_2, n_2,
//000432:                         A, ax, ay, a_s,
//000433:                         A, ax + n_2, ay + n_2, a_s,
//000434:                         a_cum, 0, 0, n_2);
//000435:                     matrix_add(n_2, n_2,
//000436:                         B, bx, by, bs,
//000437:                         B, bx + n_2, by + n_2, bs,
//000438:                         b_cum, 0, 0, n_2);
//000439:                     strassen_mult_parallel(
//000440:                         cancellationToken,
//000441:                         n_2,
//000442:                         a_cum, 0, 0, n_2,
//000443:                         b_cum, 0, 0, n_2,
//000444:                         p1, 0, 0, n_2,
//000445:                         s);
//000446:                 }, cancellationToken);
//000447: 
//000448:                 // p2 = (a21 + a22) * b11 
//000449:                 Task t_p2 = Task.Factory.StartNew(() =>
//000450:                 {
//000451:                     matrix_add(n_2, n_2,
//000452:                         A, ax + n_2, ay, a_s,
//000453:                         A, ax + n_2, ay + n_2, a_s,
//000454:                         c_cum, 0, 0, n_2);
//000455:                     strassen_mult_parallel(
//000456:                         cancellationToken,
//000457:                         n_2,
//000458:                         c_cum, 0, 0, n_2,
//000459:                         B, bx, by, bs,
//000460:                         p2, 0, 0, n_2,
//000461:                         s);
//000462:                 }, cancellationToken);
//000463: 
//000464:                 // p3 = a11 x (b12 - b22) 
//000465:                 Task t_p3 = Task.Factory.StartNew(() =>
//000466:                 {
//000467:                     matrix_sub(n_2, n_2,
//000468:                         B, bx, by + n_2, bs,
//000469:                         B, bx + n_2, by + n_2, bs,
//000470:                         d_cum, 0, 0, n_2);
//000471:                     strassen_mult_parallel(
//000472:                         cancellationToken,
//000473:                         n_2,
//000474:                         A, ax, ay, a_s,
//000475:                         d_cum, 0, 0, n_2,
//000476:                         p3, 0, 0, n_2,
//000477:                         s);
//000478:                 }, cancellationToken);
//000479: 
//000480:                 // p4 = a22 x (b21 - b11) 
//000481:                 Task t_p4 = Task.Factory.StartNew(() =>
//000482:                 {
//000483:                     matrix_sub(n_2, n_2,
//000484:                         B, bx + n_2, by, bs,
//000485:                         B, bx, by, bs,
//000486:                         e_cum, 0, 0, n_2);
//000487:                     strassen_mult_parallel(
//000488:                         cancellationToken,
//000489:                         n_2,
//000490:                         A, ax + n_2, ay + n_2, a_s,
//000491:                         e_cum, 0, 0, n_2,
//000492:                         p4, 0, 0, n_2,
//000493:                         s);
//000494:                 }, cancellationToken);
//000495: 
//000496:                 // p5 = (a11 + a12) x b22 
//000497:                 Task t_p5 = Task.Factory.StartNew(() =>
//000498:                 {
//000499:                     matrix_add(n_2, n_2,
//000500:                         A, ax, ay, a_s,
//000501:                         A, ax, ay + n_2, a_s,
//000502:                         f_cum, 0, 0, n_2);
//000503:                     strassen_mult_parallel(
//000504:                         cancellationToken,
//000505:                         n_2,
//000506:                         f_cum, 0, 0, n_2,
//000507:                         B, bx + n_2, by + n_2, bs,
//000508:                         p5, 0, 0, n_2,
//000509:                         s);
//000510:                 }, cancellationToken);
//000511: 
//000512:                 // p6 = (a21 - a11) x (b11 + b12) 
//000513:                 Task t_p6 = Task.Factory.StartNew(() =>
//000514:                 {
//000515:                     matrix_sub(n_2, n_2,
//000516:                         A, ax + n_2, ay, a_s,
//000517:                         A, ax, ay, a_s,
//000518:                         g_cum, 0, 0, n_2);
//000519:                     matrix_add(n_2, n_2,
//000520:                         B, bx, by, bs,
//000521:                         B, bx, by + n_2, bs,
//000522:                         h_cum, 0, 0, n_2);
//000523:                     strassen_mult_parallel(
//000524:                         cancellationToken,
//000525:                         n_2,
//000526:                         g_cum, 0, 0, n_2,
//000527:                         h_cum, 0, 0, n_2,
//000528:                         p6, 0, 0, n_2,
//000529:                         s);
//000530:                 }, cancellationToken);
//000531: 
//000532:                 // p7 = (a12 - a22) x (b21 + b22) 
//000533:                 Task t_p7 = Task.Factory.StartNew(() =>
//000534:                 {
//000535:                     matrix_sub(n_2, n_2,
//000536:                         A, ax, ay + n_2, a_s,
//000537:                         A, ax + n_2, ay + n_2, a_s,
//000538:                         i_cum, 0, 0, n_2);
//000539:                     matrix_add(n_2, n_2,
//000540:                         B, bx + n_2, by, bs,
//000541:                         B, bx + n_2, by + n_2, bs,
//000542:                         j_cum, 0, 0, n_2);
//000543:                     strassen_mult_parallel(
//000544:                         cancellationToken,
//000545:                         n_2,
//000546:                         i_cum, 0, 0, n_2,
//000547:                         j_cum, 0, 0, n_2,
//000548:                         p7, 0, 0, n_2,
//000549:                         s);
//000550:                 }, cancellationToken);
//000551: 
//000552:                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
//000553:                 catch (AggregateException ae)
//000554:                 {
//000555:                     ae.Flatten().Handle(e => e is TaskCanceledException);
//000556:                     cancellationToken.ThrowIfCancellationRequested();
//000557:                 }
//000558: 
//000559:                 // c11 = p1 + p4 - p5 + p7 
//000560:                 Task t_c11 = Task.Factory.StartNew(() =>
//000561:                 {
//000562:                     matrix_add(n_2, n_2,
//000563:                         p1, 0, 0, n_2,
//000564:                         p4, 0, 0, n_2,
//000565:                         C, cx, cy, cs);
//000566:                     matrix_sub(n_2, n_2,
//000567:                         C, cx, cy, cs,
//000568:                         p5, 0, 0, n_2,
//000569:                         C, cx, cy, cs);
//000570:                     matrix_add(n_2, n_2,
//000571:                         C, cx, cy, cs,
//000572:                         p7, 0, 0, n_2,
//000573:                         C, cx, cy, cs);
//000574:                 });
//000575: 
//000576:                 // c12 = p3 + p5 
//000577:                 Task t_c12 = Task.Factory.StartNew(() =>
//000578:                 {
//000579:                     matrix_add(n_2, n_2,
//000580:                         p3, 0, 0, n_2,
//000581:                         p5, 0, 0, n_2,
//000582:                         C, cx, cy + n_2, cs);
//000583:                 });
//000584: 
//000585:                 // c21 = p2 + p4 
//000586:                 Task t_c21 = Task.Factory.StartNew(() =>
//000587:                 {
//000588:                     matrix_add(n_2, n_2,
//000589:                         p2, 0, 0, n_2,
//000590:                         p4, 0, 0, n_2,
//000591:                         C, cx + n_2, cy, cs);
//000592:                 });
//000593: 
//000594:                 // c22 = p1 + p3 - p2 + p6 
//000595:                 Task t_c22 = Task.Factory.StartNew(() =>
//000596:                 {
//000597:                     matrix_add(n_2, n_2,
//000598:                         p1, 0, 0, n_2,
//000599:                         p3, 0, 0, n_2,
//000600:                         C, cx + n_2, cy + n_2, cs);
//000601:                     matrix_sub(n_2, n_2,
//000602:                         C, cx + n_2, cy + n_2, cs,
//000603:                         p2, 0, 0, n_2,
//000604:                         C, cx + n_2, cy + n_2, cs);
//000605:                     matrix_add(n_2, n_2,
//000606:                         C, cx + n_2, cy + n_2, cs,
//000607:                         p6, 0, 0, n_2,
//000608:                         C, cx + n_2, cy + n_2, cs);
//000609:                 });
//000610: 
//000611:                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
//000612:             }
//000613:         }
//000614:     }
//000615: }
      IL_0009:  leave.s    IL_0013

//000033:     ~Matrix() { Dispose(); }
    }  // end .try
    finally
    {
      IL_000b:  ldarg.0
      IL_000c:  call       instance void [mscorlib]System.Object::Finalize()
      IL_0011:  nop
//000034:     public void Dispose()
//000035:     {
//000036:         if (_data != null)
//000037:         {
//000038:             _dataPtrHandle.Free();
//000039:             _data = null;
//000040:         }
//000041:     }
//000042: 
//000043:     public int[] ValidSizes { get { return _validSizes.ToArray(); } }
//000044: 
//000045:     public void FillWithRandomValues()
//000046:     {
//000047:         Random rand = new Random();
//000048:         for (int i = 0; i < _data.Length; i++)
//000049:         {
//000050:             _data[i] = rand.Next() % 127;
//000051:         }
//000052:     }
//000053: 
//000054:     public bool Equals(Matrix other)
//000055:     {
//000056:         if (_size != other._size) return false;
//000057:         for (int i = 0; i < _data.Length; i++) if (_data[i] != other._data[i]) return false;
//000058:         return true;
//000059:     }
//000060: 
//000061:     public static void Multiply(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
//000062:     {
//000063:         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
//000064:         int N = src1._size;
//000065:         matrix_mult_serial(
//000066:             cancellationToken,
//000067:             N, N, N,
//000068:             src1._dataPtr, 0, 0, N,
//000069:             src2._dataPtr, 0, 0, N,
//000070:             dst._dataPtr, 0, 0, N);
//000071:     }
//000072: 
//000073:     public static void MultiplyParallel(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
//000074:     {
//000075:         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
//000076:         int N = src1._size;
//000077:         matrix_mult_parallel(
//000078:             cancellationToken,
//000079:             N, N, N,
//000080:             src1._dataPtr, 0, 0, N,
//000081:             src2._dataPtr, 0, 0, N,
//000082:             dst._dataPtr, 0, 0, N);
//000083:     }
//000084: 
//000085:     public static void MultiplyStrassens(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
//000086:     {
//000087:         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
//000088:         int N = src1._size;
//000089:         strassen_mult_serial(
//000090:             cancellationToken,
//000091:             N,
//000092:             src1._dataPtr, 0, 0, N,
//000093:             src2._dataPtr, 0, 0, N,
//000094:             dst._dataPtr, 0, 0, N,
//000095:             64);
//000096:     }
//000097: 
//000098:     public static void MultiplyStrassensParallel(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
//000099:     {
//000100:         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
//000101:         int N = src1._size;
//000102:         strassen_mult_parallel(
//000103:             cancellationToken,
//000104:             N,
//000105:             src1._dataPtr, 0, 0, N,
//000106:             src2._dataPtr, 0, 0, N,
//000107:             dst._dataPtr, 0, 0, N,
//000108:             64);
//000109:     }
//000110: 
//000111:     private static void matrix_add( 
//000112:         // dimensions of A, B, and C submatrices 
//000113:         int n, int m,
//000114:         // (ax,ay) = origin of A submatrix for multiplicand 
//000115:         int* A, int ax, int ay, int a_s,
//000116:         // (bx,by) = origin of B submatrix for multiplicand 
//000117:         int* B, int bx, int by, int bs,
//000118:         // (cx,cy) = origin of C submatrix for result 
//000119:         int* C, int cx, int cy, int cs)
//000120:     {
//000121:         for (int i = 0; i < n; i += 1)
//000122:             for (int j = 0; j < m; j += 1)
//000123:                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] + B[(i + bx) * bs + j + by];
//000124:     }
//000125: 
//000126:     private static void matrix_sub(
//000127:         // dimensions of A, B, and C submatrices 
//000128:         int n, int m,
//000129:         // (ax,ay) = origin of A submatrix for multiplicand 
//000130:         int* A, int ax, int ay, int a_s,
//000131:         // (bx,by) = origin of B submatrix for multiplicand 
//000132:         int* B, int bx, int by, int bs,
//000133:         // (cx,cy) = origin of C submatrix for result 
//000134:         int* C, int cx, int cy, int cs)
//000135:     {
//000136:         for (int i = 0; i < n; i += 1)
//000137:         {
//000138:             for (int j = 0; j < m; j += 1)
//000139:             {
//000140:                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] - B[(i + bx) * bs + j + by];
//000141:             }
//000142:         }
//000143:     }
//000144: 
//000145:     private static void matrix_mult_serial(
//000146:         CancellationToken cancellationToken, 
//000147:         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
//000148:         int l, int m, int n,
//000149:         // (ax,ay) = origin of A submatrix for multiplicand 
//000150:         int* A, int ax, int ay, int a_s,
//000151:         // (bx,by) = origin of B submatrix for multiplicand 
//000152:         int* B, int bx, int by, int bs,
//000153:         // (cx,cy) = origin of C submatrix for result 
//000154:         int* C, int cx, int cy, int cs)
//000155:     {
//000156:         for (int i = 0; i < l; ++i)
//000157:         {
//000158:             cancellationToken.ThrowIfCancellationRequested();
//000159:             for (int j = 0; j < n; j++)
//000160:             {
//000161:                 int temp = 0;
//000162:                 for (int k = 0; k < m; k++)
//000163:                 {
//000164:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
//000165:                 }
//000166:                 C[(i + cx) * cs + j + cy] = temp;
//000167:             }
//000168:         }
//000169:     }
//000170: 
//000171:     private static void matrix_mult_parallel(
//000172:         CancellationToken cancellationToken, 
//000173:         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
//000174:         int l, int m, int n,
//000175:         // (ax,ay) = origin of A submatrix for multiplicand 
//000176:         int* A, int ax, int ay, int a_s,
//000177:         // (bx,by) = origin of B submatrix for multiplicand 
//000178:         int* B, int bx, int by, int bs,
//000179:         // (cx,cy) = origin of C submatrix for result 
//000180:         int* C, int cx, int cy, int cs)
//000181:     {
//000182:         ParallelOptions options = new ParallelOptions { CancellationToken = cancellationToken };
//000183:         Parallel.For(0, l, options, i =>
//000184:         {
//000185:             for (int j = 0; j < n; j++)
//000186:             {
//000187:                 int temp = 0;
//000188:                 for (int k = 0; k < m; k++)
//000189:                 {
//000190:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
//000191:                 }
//000192:                 C[(i + cx) * cs + j + cy] = temp;
//000193:             }
//000194:         });
//000195:     }
//000196: 
//000197:     private static void strassen_mult_serial(
//000198:         CancellationToken cancellationToken, 
//000199:         // dimensions of A, B, and C submatrices 
//000200:         int n,
//000201:         // (ax,ay) = origin of A submatrix for multiplicand 
//000202:         int* A, int ax, int ay, int a_s,
//000203:         // (bx,by) = origin of B submatrix for multiplicand 
//000204:         int* B, int bx, int by, int bs,
//000205:         // (cx,cy) = origin of C submatrix for result 
//000206:         int* C, int cx, int cy, int cs,
//000207:         // Strassen's recursion limit for array dimensions 
//000208:         int s)
//000209:     {
//000210:         if (n <= s)
//000211:         {
//000212:             matrix_mult_serial(
//000213:                 cancellationToken,
//000214:                 n, n, n,
//000215:                 A, ax, ay, a_s,
//000216:                 B, bx, by, bs,
//000217:                 C, cx, cy, cs);
//000218:         }
//000219:         else
//000220:         {
//000221:             int n_2 = n >> 1;
//000222:             int[] workArr = new int[n_2 * n_2 * 9];
//000223:             fixed (int* work = workArr)
//000224:             {
//000225:                 int* a_cum = work;
//000226:                 int* b_cum = a_cum + n_2 * n_2;
//000227:                 int* p1 = b_cum + n_2 * n_2;
//000228:                 int* p2 = p1 + n_2 * n_2;
//000229:                 int* p3 = p2 + n_2 * n_2;
//000230:                 int* p4 = p3 + n_2 * n_2;
//000231:                 int* p5 = p4 + n_2 * n_2;
//000232:                 int* p6 = p5 + n_2 * n_2;
//000233:                 int* p7 = p6 + n_2 * n_2;
//000234: 
//000235:                 // p1 = (a11 + a22) * (b11 + b22) 
//000236:                 matrix_add(n_2, n_2,
//000237:                     A, ax, ay, a_s,
//000238:                     A, ax + n_2, ay + n_2, a_s,
//000239:                     a_cum, 0, 0, n_2);
//000240:                 matrix_add(n_2, n_2,
//000241:                     B, bx, by, bs,
//000242:                     B, bx + n_2, by + n_2, bs,
//000243:                     b_cum, 0, 0, n_2);
//000244:                 strassen_mult_serial(
//000245:                     cancellationToken,
//000246:                     n_2,
//000247:                     a_cum, 0, 0, n_2,
//000248:                     b_cum, 0, 0, n_2,
//000249:                     p1, 0, 0, n_2,
//000250:                     s);
//000251: 
//000252:                 // p2 = (a21 + a22) * b11 
//000253:                 matrix_add(n_2, n_2,
//000254:                     A, ax + n_2, ay, a_s,
//000255:                     A, ax + n_2, ay + n_2, a_s,
//000256:                     a_cum, 0, 0, n_2);
//000257:                 strassen_mult_serial(
//000258:                     cancellationToken,
//000259:                     n_2,
//000260:                     a_cum, 0, 0, n_2,
//000261:                     B, bx, by, bs,
//000262:                     p2, 0, 0, n_2,
//000263:                     s);
//000264: 
//000265:                 // p3 = a11 x (b12 - b22) 
//000266:                 matrix_sub(n_2, n_2,
//000267:                     B, bx, by + n_2, bs,
//000268:                     B, bx + n_2, by + n_2, bs,
//000269:                     b_cum, 0, 0, n_2);
//000270:                 strassen_mult_serial(
//000271:                     cancellationToken,
//000272:                     n_2,
//000273:                     A, ax, ay, a_s,
//000274:                     b_cum, 0, 0, n_2,
//000275:                     p3, 0, 0, n_2,
//000276:                     s);
//000277: 
//000278:                 // p4 = a22 x (b21 - b11) 
//000279:                 matrix_sub(n_2, n_2,
//000280:                     B, bx + n_2, by, bs,
//000281:                     B, bx, by, bs,
//000282:                     b_cum, 0, 0, n_2);
//000283:                 strassen_mult_serial(
//000284:                     cancellationToken,
//000285:                     n_2,
//000286:                     A, ax + n_2, ay + n_2, a_s,
//000287:                     b_cum, 0, 0, n_2,
//000288:                     p4, 0, 0, n_2,
//000289:                     s);
//000290: 
//000291:                 // p5 = (a11 + a12) x b22 
//000292:                 matrix_add(n_2, n_2,
//000293:                     A, ax, ay, a_s,
//000294:                     A, ax, ay + n_2, a_s,
//000295:                     a_cum, 0, 0, n_2);
//000296:                 strassen_mult_serial(
//000297:                     cancellationToken,
//000298:                     n_2,
//000299:                     a_cum, 0, 0, n_2,
//000300:                     B, bx + n_2, by + n_2, bs,
//000301:                     p5, 0, 0, n_2,
//000302:                     s);
//000303: 
//000304:                 // p6 = (a21 - a11) x (b11 + b12) 
//000305:                 matrix_sub(n_2, n_2,
//000306:                     A, ax + n_2, ay, a_s,
//000307:                     A, ax, ay, a_s,
//000308:                     a_cum, 0, 0, n_2);
//000309:                 matrix_add(n_2, n_2,
//000310:                     B, bx, by, bs,
//000311:                     B, bx, by + n_2, bs,
//000312:                     b_cum, 0, 0, n_2);
//000313:                 strassen_mult_serial(
//000314:                     cancellationToken,
//000315:                     n_2,
//000316:                     a_cum, 0, 0, n_2,
//000317:                     b_cum, 0, 0, n_2,
//000318:                     p6, 0, 0, n_2,
//000319:                     s);
//000320: 
//000321:                 // p7 = (a12 - a22) x (b21 + b22) 
//000322:                 matrix_sub(n_2, n_2,
//000323:                     A, ax, ay + n_2, a_s,
//000324:                     A, ax + n_2, ay + n_2, a_s,
//000325:                     a_cum, 0, 0, n_2);
//000326:                 matrix_add(n_2, n_2,
//000327:                     B, bx + n_2, by, bs,
//000328:                     B, bx + n_2, by + n_2, bs,
//000329:                     b_cum, 0, 0, n_2);
//000330:                 strassen_mult_serial(
//000331:                     cancellationToken,
//000332:                     n_2,
//000333:                     a_cum, 0, 0, n_2,
//000334:                     b_cum, 0, 0, n_2,
//000335:                     p7, 0, 0, n_2,
//000336:                     s);
//000337: 
//000338:                 // c11 = p1 + p4 - p5 + p7 
//000339:                 matrix_add(n_2, n_2,
//000340:                     p1, 0, 0, n_2,
//000341:                     p4, 0, 0, n_2,
//000342:                     C, cx, cy, cs);
//000343:                 matrix_sub(n_2, n_2,
//000344:                     C, cx, cy, cs,
//000345:                     p5, 0, 0, n_2,
//000346:                     C, cx, cy, cs);
//000347:                 matrix_add(n_2, n_2,
//000348:                     C, cx, cy, cs,
//000349:                     p7, 0, 0, n_2,
//000350:                     C, cx, cy, cs);
//000351: 
//000352:                 // c12 = p3 + p5 
//000353:                 matrix_add(n_2, n_2,
//000354:                     p3, 0, 0, n_2,
//000355:                     p5, 0, 0, n_2,
//000356:                     C, cx, cy + n_2, cs);
//000357: 
//000358:                 // c21 = p2 + p4 
//000359:                 matrix_add(n_2, n_2,
//000360:                     p2, 0, 0, n_2,
//000361:                     p4, 0, 0, n_2,
//000362:                     C, cx + n_2, cy, cs);
//000363: 
//000364:                 // c22 = p1 + p3 - p2 + p6 
//000365:                 matrix_add(n_2, n_2,
//000366:                     p1, 0, 0, n_2,
//000367:                     p3, 0, 0, n_2,
//000368:                     C, cx + n_2, cy + n_2, cs);
//000369:                 matrix_sub(n_2, n_2,
//000370:                     C, cx + n_2, cy + n_2, cs,
//000371:                     p2, 0, 0, n_2,
//000372:                     C, cx + n_2, cy + n_2, cs);
//000373:                 matrix_add(n_2, n_2,
//000374:                     C, cx + n_2, cy + n_2, cs,
//000375:                     p6, 0, 0, n_2,
//000376:                     C, cx + n_2, cy + n_2, cs);
//000377:             }
//000378:         }
//000379:     }
//000380: 
//000381:     private static void strassen_mult_parallel(
//000382:         CancellationToken cancellationToken, 
//000383:         // dimensions of A, B, and C submatrices 
//000384:         int n,
//000385:         // (ax,ay) = origin of A submatrix for multiplicand 
//000386:         int* A, int ax, int ay, int a_s,
//000387:         // (bx,by) = origin of B submatrix for multiplicand 
//000388:         int* B, int bx, int by, int bs,
//000389:         // (cx,cy) = origin of C submatrix for result 
//000390:         int* C, int cx, int cy, int cs,
//000391:         // Strassen's recursion limit for array dimensions 
//000392:         int s)
//000393:     {
//000394:         if (n <= s)
//000395:         {
//000396:             matrix_mult_serial(
//000397:                 cancellationToken,
//000398:                 n, n, n,
//000399:                 A, ax, ay, a_s,
//000400:                 B, bx, by, bs,
//000401:                 C, cx, cy, cs);
//000402:         }
//000403:         else
//000404:         {
//000405:             int n_2 = n >> 1;
//000406:             int areaSize = n_2 * n_2;
//000407:             int[] workArr = new int[areaSize * 17];
//000408:             fixed (int* work = workArr)
//000409:             {
//000410:                 int* a_cum = work;
//000411:                 int* b_cum = a_cum + areaSize;
//000412:                 int* c_cum = b_cum + areaSize;
//000413:                 int* d_cum = c_cum + areaSize;
//000414:                 int* e_cum = d_cum + areaSize;
//000415:                 int* f_cum = e_cum + areaSize;
//000416:                 int* g_cum = f_cum + areaSize;
//000417:                 int* h_cum = g_cum + areaSize;
//000418:                 int* i_cum = h_cum + areaSize;
//000419:                 int* j_cum = i_cum + areaSize;
//000420:                 int* p1 = j_cum + areaSize;
//000421:                 int* p2 = p1 + areaSize;
//000422:                 int* p3 = p2 + areaSize;
//000423:                 int* p4 = p3 + areaSize;
//000424:                 int* p5 = p4 + areaSize;
//000425:                 int* p6 = p5 + areaSize;
//000426:                 int* p7 = p6 + areaSize;
//000427: 
//000428:                 // p1 = (a11 + a22) * (b11 + b22) 
//000429:                 Task t_p1 = Task.Factory.StartNew(() =>
//000430:                 {
//000431:                     matrix_add(n_2, n_2,
//000432:                         A, ax, ay, a_s,
//000433:                         A, ax + n_2, ay + n_2, a_s,
//000434:                         a_cum, 0, 0, n_2);
//000435:                     matrix_add(n_2, n_2,
//000436:                         B, bx, by, bs,
//000437:                         B, bx + n_2, by + n_2, bs,
//000438:                         b_cum, 0, 0, n_2);
//000439:                     strassen_mult_parallel(
//000440:                         cancellationToken,
//000441:                         n_2,
//000442:                         a_cum, 0, 0, n_2,
//000443:                         b_cum, 0, 0, n_2,
//000444:                         p1, 0, 0, n_2,
//000445:                         s);
//000446:                 }, cancellationToken);
//000447: 
//000448:                 // p2 = (a21 + a22) * b11 
//000449:                 Task t_p2 = Task.Factory.StartNew(() =>
//000450:                 {
//000451:                     matrix_add(n_2, n_2,
//000452:                         A, ax + n_2, ay, a_s,
//000453:                         A, ax + n_2, ay + n_2, a_s,
//000454:                         c_cum, 0, 0, n_2);
//000455:                     strassen_mult_parallel(
//000456:                         cancellationToken,
//000457:                         n_2,
//000458:                         c_cum, 0, 0, n_2,
//000459:                         B, bx, by, bs,
//000460:                         p2, 0, 0, n_2,
//000461:                         s);
//000462:                 }, cancellationToken);
//000463: 
//000464:                 // p3 = a11 x (b12 - b22) 
//000465:                 Task t_p3 = Task.Factory.StartNew(() =>
//000466:                 {
//000467:                     matrix_sub(n_2, n_2,
//000468:                         B, bx, by + n_2, bs,
//000469:                         B, bx + n_2, by + n_2, bs,
//000470:                         d_cum, 0, 0, n_2);
//000471:                     strassen_mult_parallel(
//000472:                         cancellationToken,
//000473:                         n_2,
//000474:                         A, ax, ay, a_s,
//000475:                         d_cum, 0, 0, n_2,
//000476:                         p3, 0, 0, n_2,
//000477:                         s);
//000478:                 }, cancellationToken);
//000479: 
//000480:                 // p4 = a22 x (b21 - b11) 
//000481:                 Task t_p4 = Task.Factory.StartNew(() =>
//000482:                 {
//000483:                     matrix_sub(n_2, n_2,
//000484:                         B, bx + n_2, by, bs,
//000485:                         B, bx, by, bs,
//000486:                         e_cum, 0, 0, n_2);
//000487:                     strassen_mult_parallel(
//000488:                         cancellationToken,
//000489:                         n_2,
//000490:                         A, ax + n_2, ay + n_2, a_s,
//000491:                         e_cum, 0, 0, n_2,
//000492:                         p4, 0, 0, n_2,
//000493:                         s);
//000494:                 }, cancellationToken);
//000495: 
//000496:                 // p5 = (a11 + a12) x b22 
//000497:                 Task t_p5 = Task.Factory.StartNew(() =>
//000498:                 {
//000499:                     matrix_add(n_2, n_2,
//000500:                         A, ax, ay, a_s,
//000501:                         A, ax, ay + n_2, a_s,
//000502:                         f_cum, 0, 0, n_2);
//000503:                     strassen_mult_parallel(
//000504:                         cancellationToken,
//000505:                         n_2,
//000506:                         f_cum, 0, 0, n_2,
//000507:                         B, bx + n_2, by + n_2, bs,
//000508:                         p5, 0, 0, n_2,
//000509:                         s);
//000510:                 }, cancellationToken);
//000511: 
//000512:                 // p6 = (a21 - a11) x (b11 + b12) 
//000513:                 Task t_p6 = Task.Factory.StartNew(() =>
//000514:                 {
//000515:                     matrix_sub(n_2, n_2,
//000516:                         A, ax + n_2, ay, a_s,
//000517:                         A, ax, ay, a_s,
//000518:                         g_cum, 0, 0, n_2);
//000519:                     matrix_add(n_2, n_2,
//000520:                         B, bx, by, bs,
//000521:                         B, bx, by + n_2, bs,
//000522:                         h_cum, 0, 0, n_2);
//000523:                     strassen_mult_parallel(
//000524:                         cancellationToken,
//000525:                         n_2,
//000526:                         g_cum, 0, 0, n_2,
//000527:                         h_cum, 0, 0, n_2,
//000528:                         p6, 0, 0, n_2,
//000529:                         s);
//000530:                 }, cancellationToken);
//000531: 
//000532:                 // p7 = (a12 - a22) x (b21 + b22) 
//000533:                 Task t_p7 = Task.Factory.StartNew(() =>
//000534:                 {
//000535:                     matrix_sub(n_2, n_2,
//000536:                         A, ax, ay + n_2, a_s,
//000537:                         A, ax + n_2, ay + n_2, a_s,
//000538:                         i_cum, 0, 0, n_2);
//000539:                     matrix_add(n_2, n_2,
//000540:                         B, bx + n_2, by, bs,
//000541:                         B, bx + n_2, by + n_2, bs,
//000542:                         j_cum, 0, 0, n_2);
//000543:                     strassen_mult_parallel(
//000544:                         cancellationToken,
//000545:                         n_2,
//000546:                         i_cum, 0, 0, n_2,
//000547:                         j_cum, 0, 0, n_2,
//000548:                         p7, 0, 0, n_2,
//000549:                         s);
//000550:                 }, cancellationToken);
//000551: 
//000552:                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
//000553:                 catch (AggregateException ae)
//000554:                 {
//000555:                     ae.Flatten().Handle(e => e is TaskCanceledException);
//000556:                     cancellationToken.ThrowIfCancellationRequested();
//000557:                 }
//000558: 
//000559:                 // c11 = p1 + p4 - p5 + p7 
//000560:                 Task t_c11 = Task.Factory.StartNew(() =>
//000561:                 {
//000562:                     matrix_add(n_2, n_2,
//000563:                         p1, 0, 0, n_2,
//000564:                         p4, 0, 0, n_2,
//000565:                         C, cx, cy, cs);
//000566:                     matrix_sub(n_2, n_2,
//000567:                         C, cx, cy, cs,
//000568:                         p5, 0, 0, n_2,
//000569:                         C, cx, cy, cs);
//000570:                     matrix_add(n_2, n_2,
//000571:                         C, cx, cy, cs,
//000572:                         p7, 0, 0, n_2,
//000573:                         C, cx, cy, cs);
//000574:                 });
//000575: 
//000576:                 // c12 = p3 + p5 
//000577:                 Task t_c12 = Task.Factory.StartNew(() =>
//000578:                 {
//000579:                     matrix_add(n_2, n_2,
//000580:                         p3, 0, 0, n_2,
//000581:                         p5, 0, 0, n_2,
//000582:                         C, cx, cy + n_2, cs);
//000583:                 });
//000584: 
//000585:                 // c21 = p2 + p4 
//000586:                 Task t_c21 = Task.Factory.StartNew(() =>
//000587:                 {
//000588:                     matrix_add(n_2, n_2,
//000589:                         p2, 0, 0, n_2,
//000590:                         p4, 0, 0, n_2,
//000591:                         C, cx + n_2, cy, cs);
//000592:                 });
//000593: 
//000594:                 // c22 = p1 + p3 - p2 + p6 
//000595:                 Task t_c22 = Task.Factory.StartNew(() =>
//000596:                 {
//000597:                     matrix_add(n_2, n_2,
//000598:                         p1, 0, 0, n_2,
//000599:                         p3, 0, 0, n_2,
//000600:                         C, cx + n_2, cy + n_2, cs);
//000601:                     matrix_sub(n_2, n_2,
//000602:                         C, cx + n_2, cy + n_2, cs,
//000603:                         p2, 0, 0, n_2,
//000604:                         C, cx + n_2, cy + n_2, cs);
//000605:                     matrix_add(n_2, n_2,
//000606:                         C, cx + n_2, cy + n_2, cs,
//000607:                         p6, 0, 0, n_2,
//000608:                         C, cx + n_2, cy + n_2, cs);
//000609:                 });
//000610: 
//000611:                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
//000612:             }
//000613:         }
//000614:     }
//000615: }
      IL_0012:  endfinally
    }  // end handler
    IL_0013:  nop
//000033:     ~Matrix() { Dispose(); }
    IL_0014:  ret
  } // end of method Matrix::Finalize

  .method public hidebysig newslot virtual final 
          instance void  Dispose() cil managed
  {
    // Code size       36 (0x24)
    .maxstack  2
    .locals init ([0] bool CS$4$0000)
//000034:     public void Dispose()
//000035:     {
    IL_0000:  nop
//000036:         if (_data != null)
    IL_0001:  ldarg.0
    IL_0002:  ldfld      int32[] Matrix::_data
    IL_0007:  ldnull
    IL_0008:  ceq
    IL_000a:  stloc.0
//000037:         {
//000038:             _dataPtrHandle.Free();
//000039:             _data = null;
//000040:         }
//000041:     }
//000042: 
//000043:     public int[] ValidSizes { get { return _validSizes.ToArray(); } }
//000044: 
//000045:     public void FillWithRandomValues()
//000046:     {
//000047:         Random rand = new Random();
//000048:         for (int i = 0; i < _data.Length; i++)
//000049:         {
//000050:             _data[i] = rand.Next() % 127;
//000051:         }
//000052:     }
//000053: 
//000054:     public bool Equals(Matrix other)
//000055:     {
//000056:         if (_size != other._size) return false;
//000057:         for (int i = 0; i < _data.Length; i++) if (_data[i] != other._data[i]) return false;
//000058:         return true;
//000059:     }
//000060: 
//000061:     public static void Multiply(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
//000062:     {
//000063:         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
//000064:         int N = src1._size;
//000065:         matrix_mult_serial(
//000066:             cancellationToken,
//000067:             N, N, N,
//000068:             src1._dataPtr, 0, 0, N,
//000069:             src2._dataPtr, 0, 0, N,
//000070:             dst._dataPtr, 0, 0, N);
//000071:     }
//000072: 
//000073:     public static void MultiplyParallel(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
//000074:     {
//000075:         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
//000076:         int N = src1._size;
//000077:         matrix_mult_parallel(
//000078:             cancellationToken,
//000079:             N, N, N,
//000080:             src1._dataPtr, 0, 0, N,
//000081:             src2._dataPtr, 0, 0, N,
//000082:             dst._dataPtr, 0, 0, N);
//000083:     }
//000084: 
//000085:     public static void MultiplyStrassens(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
//000086:     {
//000087:         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
//000088:         int N = src1._size;
//000089:         strassen_mult_serial(
//000090:             cancellationToken,
//000091:             N,
//000092:             src1._dataPtr, 0, 0, N,
//000093:             src2._dataPtr, 0, 0, N,
//000094:             dst._dataPtr, 0, 0, N,
//000095:             64);
//000096:     }
//000097: 
//000098:     public static void MultiplyStrassensParallel(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
//000099:     {
//000100:         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
//000101:         int N = src1._size;
//000102:         strassen_mult_parallel(
//000103:             cancellationToken,
//000104:             N,
//000105:             src1._dataPtr, 0, 0, N,
//000106:             src2._dataPtr, 0, 0, N,
//000107:             dst._dataPtr, 0, 0, N,
//000108:             64);
//000109:     }
//000110: 
//000111:     private static void matrix_add( 
//000112:         // dimensions of A, B, and C submatrices 
//000113:         int n, int m,
//000114:         // (ax,ay) = origin of A submatrix for multiplicand 
//000115:         int* A, int ax, int ay, int a_s,
//000116:         // (bx,by) = origin of B submatrix for multiplicand 
//000117:         int* B, int bx, int by, int bs,
//000118:         // (cx,cy) = origin of C submatrix for result 
//000119:         int* C, int cx, int cy, int cs)
//000120:     {
//000121:         for (int i = 0; i < n; i += 1)
//000122:             for (int j = 0; j < m; j += 1)
//000123:                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] + B[(i + bx) * bs + j + by];
//000124:     }
//000125: 
//000126:     private static void matrix_sub(
//000127:         // dimensions of A, B, and C submatrices 
//000128:         int n, int m,
//000129:         // (ax,ay) = origin of A submatrix for multiplicand 
//000130:         int* A, int ax, int ay, int a_s,
//000131:         // (bx,by) = origin of B submatrix for multiplicand 
//000132:         int* B, int bx, int by, int bs,
//000133:         // (cx,cy) = origin of C submatrix for result 
//000134:         int* C, int cx, int cy, int cs)
//000135:     {
//000136:         for (int i = 0; i < n; i += 1)
//000137:         {
//000138:             for (int j = 0; j < m; j += 1)
//000139:             {
//000140:                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] - B[(i + bx) * bs + j + by];
//000141:             }
//000142:         }
//000143:     }
//000144: 
//000145:     private static void matrix_mult_serial(
//000146:         CancellationToken cancellationToken, 
//000147:         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
//000148:         int l, int m, int n,
//000149:         // (ax,ay) = origin of A submatrix for multiplicand 
//000150:         int* A, int ax, int ay, int a_s,
//000151:         // (bx,by) = origin of B submatrix for multiplicand 
//000152:         int* B, int bx, int by, int bs,
//000153:         // (cx,cy) = origin of C submatrix for result 
//000154:         int* C, int cx, int cy, int cs)
//000155:     {
//000156:         for (int i = 0; i < l; ++i)
//000157:         {
//000158:             cancellationToken.ThrowIfCancellationRequested();
//000159:             for (int j = 0; j < n; j++)
//000160:             {
//000161:                 int temp = 0;
//000162:                 for (int k = 0; k < m; k++)
//000163:                 {
//000164:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
//000165:                 }
//000166:                 C[(i + cx) * cs + j + cy] = temp;
//000167:             }
//000168:         }
//000169:     }
//000170: 
//000171:     private static void matrix_mult_parallel(
//000172:         CancellationToken cancellationToken, 
//000173:         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
//000174:         int l, int m, int n,
//000175:         // (ax,ay) = origin of A submatrix for multiplicand 
//000176:         int* A, int ax, int ay, int a_s,
//000177:         // (bx,by) = origin of B submatrix for multiplicand 
//000178:         int* B, int bx, int by, int bs,
//000179:         // (cx,cy) = origin of C submatrix for result 
//000180:         int* C, int cx, int cy, int cs)
//000181:     {
//000182:         ParallelOptions options = new ParallelOptions { CancellationToken = cancellationToken };
//000183:         Parallel.For(0, l, options, i =>
//000184:         {
//000185:             for (int j = 0; j < n; j++)
//000186:             {
//000187:                 int temp = 0;
//000188:                 for (int k = 0; k < m; k++)
//000189:                 {
//000190:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
//000191:                 }
//000192:                 C[(i + cx) * cs + j + cy] = temp;
//000193:             }
//000194:         });
//000195:     }
//000196: 
//000197:     private static void strassen_mult_serial(
//000198:         CancellationToken cancellationToken, 
//000199:         // dimensions of A, B, and C submatrices 
//000200:         int n,
//000201:         // (ax,ay) = origin of A submatrix for multiplicand 
//000202:         int* A, int ax, int ay, int a_s,
//000203:         // (bx,by) = origin of B submatrix for multiplicand 
//000204:         int* B, int bx, int by, int bs,
//000205:         // (cx,cy) = origin of C submatrix for result 
//000206:         int* C, int cx, int cy, int cs,
//000207:         // Strassen's recursion limit for array dimensions 
//000208:         int s)
//000209:     {
//000210:         if (n <= s)
//000211:         {
//000212:             matrix_mult_serial(
//000213:                 cancellationToken,
//000214:                 n, n, n,
//000215:                 A, ax, ay, a_s,
//000216:                 B, bx, by, bs,
//000217:                 C, cx, cy, cs);
//000218:         }
//000219:         else
//000220:         {
//000221:             int n_2 = n >> 1;
//000222:             int[] workArr = new int[n_2 * n_2 * 9];
//000223:             fixed (int* work = workArr)
//000224:             {
//000225:                 int* a_cum = work;
//000226:                 int* b_cum = a_cum + n_2 * n_2;
//000227:                 int* p1 = b_cum + n_2 * n_2;
//000228:                 int* p2 = p1 + n_2 * n_2;
//000229:                 int* p3 = p2 + n_2 * n_2;
//000230:                 int* p4 = p3 + n_2 * n_2;
//000231:                 int* p5 = p4 + n_2 * n_2;
//000232:                 int* p6 = p5 + n_2 * n_2;
//000233:                 int* p7 = p6 + n_2 * n_2;
//000234: 
//000235:                 // p1 = (a11 + a22) * (b11 + b22) 
//000236:                 matrix_add(n_2, n_2,
//000237:                     A, ax, ay, a_s,
//000238:                     A, ax + n_2, ay + n_2, a_s,
//000239:                     a_cum, 0, 0, n_2);
//000240:                 matrix_add(n_2, n_2,
//000241:                     B, bx, by, bs,
//000242:                     B, bx + n_2, by + n_2, bs,
//000243:                     b_cum, 0, 0, n_2);
//000244:                 strassen_mult_serial(
//000245:                     cancellationToken,
//000246:                     n_2,
//000247:                     a_cum, 0, 0, n_2,
//000248:                     b_cum, 0, 0, n_2,
//000249:                     p1, 0, 0, n_2,
//000250:                     s);
//000251: 
//000252:                 // p2 = (a21 + a22) * b11 
//000253:                 matrix_add(n_2, n_2,
//000254:                     A, ax + n_2, ay, a_s,
//000255:                     A, ax + n_2, ay + n_2, a_s,
//000256:                     a_cum, 0, 0, n_2);
//000257:                 strassen_mult_serial(
//000258:                     cancellationToken,
//000259:                     n_2,
//000260:                     a_cum, 0, 0, n_2,
//000261:                     B, bx, by, bs,
//000262:                     p2, 0, 0, n_2,
//000263:                     s);
//000264: 
//000265:                 // p3 = a11 x (b12 - b22) 
//000266:                 matrix_sub(n_2, n_2,
//000267:                     B, bx, by + n_2, bs,
//000268:                     B, bx + n_2, by + n_2, bs,
//000269:                     b_cum, 0, 0, n_2);
//000270:                 strassen_mult_serial(
//000271:                     cancellationToken,
//000272:                     n_2,
//000273:                     A, ax, ay, a_s,
//000274:                     b_cum, 0, 0, n_2,
//000275:                     p3, 0, 0, n_2,
//000276:                     s);
//000277: 
//000278:                 // p4 = a22 x (b21 - b11) 
//000279:                 matrix_sub(n_2, n_2,
//000280:                     B, bx + n_2, by, bs,
//000281:                     B, bx, by, bs,
//000282:                     b_cum, 0, 0, n_2);
//000283:                 strassen_mult_serial(
//000284:                     cancellationToken,
//000285:                     n_2,
//000286:                     A, ax + n_2, ay + n_2, a_s,
//000287:                     b_cum, 0, 0, n_2,
//000288:                     p4, 0, 0, n_2,
//000289:                     s);
//000290: 
//000291:                 // p5 = (a11 + a12) x b22 
//000292:                 matrix_add(n_2, n_2,
//000293:                     A, ax, ay, a_s,
//000294:                     A, ax, ay + n_2, a_s,
//000295:                     a_cum, 0, 0, n_2);
//000296:                 strassen_mult_serial(
//000297:                     cancellationToken,
//000298:                     n_2,
//000299:                     a_cum, 0, 0, n_2,
//000300:                     B, bx + n_2, by + n_2, bs,
//000301:                     p5, 0, 0, n_2,
//000302:                     s);
//000303: 
//000304:                 // p6 = (a21 - a11) x (b11 + b12) 
//000305:                 matrix_sub(n_2, n_2,
//000306:                     A, ax + n_2, ay, a_s,
//000307:                     A, ax, ay, a_s,
//000308:                     a_cum, 0, 0, n_2);
//000309:                 matrix_add(n_2, n_2,
//000310:                     B, bx, by, bs,
//000311:                     B, bx, by + n_2, bs,
//000312:                     b_cum, 0, 0, n_2);
//000313:                 strassen_mult_serial(
//000314:                     cancellationToken,
//000315:                     n_2,
//000316:                     a_cum, 0, 0, n_2,
//000317:                     b_cum, 0, 0, n_2,
//000318:                     p6, 0, 0, n_2,
//000319:                     s);
//000320: 
//000321:                 // p7 = (a12 - a22) x (b21 + b22) 
//000322:                 matrix_sub(n_2, n_2,
//000323:                     A, ax, ay + n_2, a_s,
//000324:                     A, ax + n_2, ay + n_2, a_s,
//000325:                     a_cum, 0, 0, n_2);
//000326:                 matrix_add(n_2, n_2,
//000327:                     B, bx + n_2, by, bs,
//000328:                     B, bx + n_2, by + n_2, bs,
//000329:                     b_cum, 0, 0, n_2);
//000330:                 strassen_mult_serial(
//000331:                     cancellationToken,
//000332:                     n_2,
//000333:                     a_cum, 0, 0, n_2,
//000334:                     b_cum, 0, 0, n_2,
//000335:                     p7, 0, 0, n_2,
//000336:                     s);
//000337: 
//000338:                 // c11 = p1 + p4 - p5 + p7 
//000339:                 matrix_add(n_2, n_2,
//000340:                     p1, 0, 0, n_2,
//000341:                     p4, 0, 0, n_2,
//000342:                     C, cx, cy, cs);
//000343:                 matrix_sub(n_2, n_2,
//000344:                     C, cx, cy, cs,
//000345:                     p5, 0, 0, n_2,
//000346:                     C, cx, cy, cs);
//000347:                 matrix_add(n_2, n_2,
//000348:                     C, cx, cy, cs,
//000349:                     p7, 0, 0, n_2,
//000350:                     C, cx, cy, cs);
//000351: 
//000352:                 // c12 = p3 + p5 
//000353:                 matrix_add(n_2, n_2,
//000354:                     p3, 0, 0, n_2,
//000355:                     p5, 0, 0, n_2,
//000356:                     C, cx, cy + n_2, cs);
//000357: 
//000358:                 // c21 = p2 + p4 
//000359:                 matrix_add(n_2, n_2,
//000360:                     p2, 0, 0, n_2,
//000361:                     p4, 0, 0, n_2,
//000362:                     C, cx + n_2, cy, cs);
//000363: 
//000364:                 // c22 = p1 + p3 - p2 + p6 
//000365:                 matrix_add(n_2, n_2,
//000366:                     p1, 0, 0, n_2,
//000367:                     p3, 0, 0, n_2,
//000368:                     C, cx + n_2, cy + n_2, cs);
//000369:                 matrix_sub(n_2, n_2,
//000370:                     C, cx + n_2, cy + n_2, cs,
//000371:                     p2, 0, 0, n_2,
//000372:                     C, cx + n_2, cy + n_2, cs);
//000373:                 matrix_add(n_2, n_2,
//000374:                     C, cx + n_2, cy + n_2, cs,
//000375:                     p6, 0, 0, n_2,
//000376:                     C, cx + n_2, cy + n_2, cs);
//000377:             }
//000378:         }
//000379:     }
//000380: 
//000381:     private static void strassen_mult_parallel(
//000382:         CancellationToken cancellationToken, 
//000383:         // dimensions of A, B, and C submatrices 
//000384:         int n,
//000385:         // (ax,ay) = origin of A submatrix for multiplicand 
//000386:         int* A, int ax, int ay, int a_s,
//000387:         // (bx,by) = origin of B submatrix for multiplicand 
//000388:         int* B, int bx, int by, int bs,
//000389:         // (cx,cy) = origin of C submatrix for result 
//000390:         int* C, int cx, int cy, int cs,
//000391:         // Strassen's recursion limit for array dimensions 
//000392:         int s)
//000393:     {
//000394:         if (n <= s)
//000395:         {
//000396:             matrix_mult_serial(
//000397:                 cancellationToken,
//000398:                 n, n, n,
//000399:                 A, ax, ay, a_s,
//000400:                 B, bx, by, bs,
//000401:                 C, cx, cy, cs);
//000402:         }
//000403:         else
//000404:         {
//000405:             int n_2 = n >> 1;
//000406:             int areaSize = n_2 * n_2;
//000407:             int[] workArr = new int[areaSize * 17];
//000408:             fixed (int* work = workArr)
//000409:             {
//000410:                 int* a_cum = work;
//000411:                 int* b_cum = a_cum + areaSize;
//000412:                 int* c_cum = b_cum + areaSize;
//000413:                 int* d_cum = c_cum + areaSize;
//000414:                 int* e_cum = d_cum + areaSize;
//000415:                 int* f_cum = e_cum + areaSize;
//000416:                 int* g_cum = f_cum + areaSize;
//000417:                 int* h_cum = g_cum + areaSize;
//000418:                 int* i_cum = h_cum + areaSize;
//000419:                 int* j_cum = i_cum + areaSize;
//000420:                 int* p1 = j_cum + areaSize;
//000421:                 int* p2 = p1 + areaSize;
//000422:                 int* p3 = p2 + areaSize;
//000423:                 int* p4 = p3 + areaSize;
//000424:                 int* p5 = p4 + areaSize;
//000425:                 int* p6 = p5 + areaSize;
//000426:                 int* p7 = p6 + areaSize;
//000427: 
//000428:                 // p1 = (a11 + a22) * (b11 + b22) 
//000429:                 Task t_p1 = Task.Factory.StartNew(() =>
//000430:                 {
//000431:                     matrix_add(n_2, n_2,
//000432:                         A, ax, ay, a_s,
//000433:                         A, ax + n_2, ay + n_2, a_s,
//000434:                         a_cum, 0, 0, n_2);
//000435:                     matrix_add(n_2, n_2,
//000436:                         B, bx, by, bs,
//000437:                         B, bx + n_2, by + n_2, bs,
//000438:                         b_cum, 0, 0, n_2);
//000439:                     strassen_mult_parallel(
//000440:                         cancellationToken,
//000441:                         n_2,
//000442:                         a_cum, 0, 0, n_2,
//000443:                         b_cum, 0, 0, n_2,
//000444:                         p1, 0, 0, n_2,
//000445:                         s);
//000446:                 }, cancellationToken);
//000447: 
//000448:                 // p2 = (a21 + a22) * b11 
//000449:                 Task t_p2 = Task.Factory.StartNew(() =>
//000450:                 {
//000451:                     matrix_add(n_2, n_2,
//000452:                         A, ax + n_2, ay, a_s,
//000453:                         A, ax + n_2, ay + n_2, a_s,
//000454:                         c_cum, 0, 0, n_2);
//000455:                     strassen_mult_parallel(
//000456:                         cancellationToken,
//000457:                         n_2,
//000458:                         c_cum, 0, 0, n_2,
//000459:                         B, bx, by, bs,
//000460:                         p2, 0, 0, n_2,
//000461:                         s);
//000462:                 }, cancellationToken);
//000463: 
//000464:                 // p3 = a11 x (b12 - b22) 
//000465:                 Task t_p3 = Task.Factory.StartNew(() =>
//000466:                 {
//000467:                     matrix_sub(n_2, n_2,
//000468:                         B, bx, by + n_2, bs,
//000469:                         B, bx + n_2, by + n_2, bs,
//000470:                         d_cum, 0, 0, n_2);
//000471:                     strassen_mult_parallel(
//000472:                         cancellationToken,
//000473:                         n_2,
//000474:                         A, ax, ay, a_s,
//000475:                         d_cum, 0, 0, n_2,
//000476:                         p3, 0, 0, n_2,
//000477:                         s);
//000478:                 }, cancellationToken);
//000479: 
//000480:                 // p4 = a22 x (b21 - b11) 
//000481:                 Task t_p4 = Task.Factory.StartNew(() =>
//000482:                 {
//000483:                     matrix_sub(n_2, n_2,
//000484:                         B, bx + n_2, by, bs,
//000485:                         B, bx, by, bs,
//000486:                         e_cum, 0, 0, n_2);
//000487:                     strassen_mult_parallel(
//000488:                         cancellationToken,
//000489:                         n_2,
//000490:                         A, ax + n_2, ay + n_2, a_s,
//000491:                         e_cum, 0, 0, n_2,
//000492:                         p4, 0, 0, n_2,
//000493:                         s);
//000494:                 }, cancellationToken);
//000495: 
//000496:                 // p5 = (a11 + a12) x b22 
//000497:                 Task t_p5 = Task.Factory.StartNew(() =>
//000498:                 {
//000499:                     matrix_add(n_2, n_2,
//000500:                         A, ax, ay, a_s,
//000501:                         A, ax, ay + n_2, a_s,
//000502:                         f_cum, 0, 0, n_2);
//000503:                     strassen_mult_parallel(
//000504:                         cancellationToken,
//000505:                         n_2,
//000506:                         f_cum, 0, 0, n_2,
//000507:                         B, bx + n_2, by + n_2, bs,
//000508:                         p5, 0, 0, n_2,
//000509:                         s);
//000510:                 }, cancellationToken);
//000511: 
//000512:                 // p6 = (a21 - a11) x (b11 + b12) 
//000513:                 Task t_p6 = Task.Factory.StartNew(() =>
//000514:                 {
//000515:                     matrix_sub(n_2, n_2,
//000516:                         A, ax + n_2, ay, a_s,
//000517:                         A, ax, ay, a_s,
//000518:                         g_cum, 0, 0, n_2);
//000519:                     matrix_add(n_2, n_2,
//000520:                         B, bx, by, bs,
//000521:                         B, bx, by + n_2, bs,
//000522:                         h_cum, 0, 0, n_2);
//000523:                     strassen_mult_parallel(
//000524:                         cancellationToken,
//000525:                         n_2,
//000526:                         g_cum, 0, 0, n_2,
//000527:                         h_cum, 0, 0, n_2,
//000528:                         p6, 0, 0, n_2,
//000529:                         s);
//000530:                 }, cancellationToken);
//000531: 
//000532:                 // p7 = (a12 - a22) x (b21 + b22) 
//000533:                 Task t_p7 = Task.Factory.StartNew(() =>
//000534:                 {
//000535:                     matrix_sub(n_2, n_2,
//000536:                         A, ax, ay + n_2, a_s,
//000537:                         A, ax + n_2, ay + n_2, a_s,
//000538:                         i_cum, 0, 0, n_2);
//000539:                     matrix_add(n_2, n_2,
//000540:                         B, bx + n_2, by, bs,
//000541:                         B, bx + n_2, by + n_2, bs,
//000542:                         j_cum, 0, 0, n_2);
//000543:                     strassen_mult_parallel(
//000544:                         cancellationToken,
//000545:                         n_2,
//000546:                         i_cum, 0, 0, n_2,
//000547:                         j_cum, 0, 0, n_2,
//000548:                         p7, 0, 0, n_2,
//000549:                         s);
//000550:                 }, cancellationToken);
//000551: 
//000552:                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
//000553:                 catch (AggregateException ae)
//000554:                 {
//000555:                     ae.Flatten().Handle(e => e is TaskCanceledException);
//000556:                     cancellationToken.ThrowIfCancellationRequested();
//000557:                 }
//000558: 
//000559:                 // c11 = p1 + p4 - p5 + p7 
//000560:                 Task t_c11 = Task.Factory.StartNew(() =>
//000561:                 {
//000562:                     matrix_add(n_2, n_2,
//000563:                         p1, 0, 0, n_2,
//000564:                         p4, 0, 0, n_2,
//000565:                         C, cx, cy, cs);
//000566:                     matrix_sub(n_2, n_2,
//000567:                         C, cx, cy, cs,
//000568:                         p5, 0, 0, n_2,
//000569:                         C, cx, cy, cs);
//000570:                     matrix_add(n_2, n_2,
//000571:                         C, cx, cy, cs,
//000572:                         p7, 0, 0, n_2,
//000573:                         C, cx, cy, cs);
//000574:                 });
//000575: 
//000576:                 // c12 = p3 + p5 
//000577:                 Task t_c12 = Task.Factory.StartNew(() =>
//000578:                 {
//000579:                     matrix_add(n_2, n_2,
//000580:                         p3, 0, 0, n_2,
//000581:                         p5, 0, 0, n_2,
//000582:                         C, cx, cy + n_2, cs);
//000583:                 });
//000584: 
//000585:                 // c21 = p2 + p4 
//000586:                 Task t_c21 = Task.Factory.StartNew(() =>
//000587:                 {
//000588:                     matrix_add(n_2, n_2,
//000589:                         p2, 0, 0, n_2,
//000590:                         p4, 0, 0, n_2,
//000591:                         C, cx + n_2, cy, cs);
//000592:                 });
//000593: 
//000594:                 // c22 = p1 + p3 - p2 + p6 
//000595:                 Task t_c22 = Task.Factory.StartNew(() =>
//000596:                 {
//000597:                     matrix_add(n_2, n_2,
//000598:                         p1, 0, 0, n_2,
//000599:                         p3, 0, 0, n_2,
//000600:                         C, cx + n_2, cy + n_2, cs);
//000601:                     matrix_sub(n_2, n_2,
//000602:                         C, cx + n_2, cy + n_2, cs,
//000603:                         p2, 0, 0, n_2,
//000604:                         C, cx + n_2, cy + n_2, cs);
//000605:                     matrix_add(n_2, n_2,
//000606:                         C, cx + n_2, cy + n_2, cs,
//000607:                         p6, 0, 0, n_2,
//000608:                         C, cx + n_2, cy + n_2, cs);
//000609:                 });
//000610: 
//000611:                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
//000612:             }
//000613:         }
//000614:     }
//000615: }
    IL_000b:  ldloc.0
    IL_000c:  brtrue.s   IL_0023

//000037:         {
    IL_000e:  nop
//000038:             _dataPtrHandle.Free();
    IL_000f:  ldarg.0
    IL_0010:  ldflda     valuetype [mscorlib]System.Runtime.InteropServices.GCHandle Matrix::_dataPtrHandle
    IL_0015:  call       instance void [mscorlib]System.Runtime.InteropServices.GCHandle::Free()
    IL_001a:  nop
//000039:             _data = null;
    IL_001b:  ldarg.0
    IL_001c:  ldnull
    IL_001d:  stfld      int32[] Matrix::_data
//000040:         }
    IL_0022:  nop
//000041:     }
    IL_0023:  ret
  } // end of method Matrix::Dispose

  .method public hidebysig specialname instance int32[] 
          get_ValidSizes() cil managed
  {
    // Code size       16 (0x10)
    .maxstack  1
    .locals init ([0] int32[] CS$1$0000)
//000042: 
//000043:     public int[] ValidSizes { get { return _validSizes.ToArray(); } }
    IL_0000:  nop
    IL_0001:  ldsfld     int32[] Matrix::_validSizes
    IL_0006:  call       !!0[] [System.Core]System.Linq.Enumerable::ToArray<int32>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>)
    IL_000b:  stloc.0
    IL_000c:  br.s       IL_000e

    IL_000e:  ldloc.0
    IL_000f:  ret
  } // end of method Matrix::get_ValidSizes

  .method public hidebysig instance void 
          FillWithRandomValues() cil managed
  {
    // Code size       50 (0x32)
    .maxstack  4
    .locals init ([0] class [mscorlib]System.Random rand,
             [1] int32 i,
             [2] bool CS$4$0000)
//000044: 
//000045:     public void FillWithRandomValues()
//000046:     {
    IL_0000:  nop
//000047:         Random rand = new Random();
    IL_0001:  newobj     instance void [mscorlib]System.Random::.ctor()
    IL_0006:  stloc.0
//000048:         for (int i = 0; i < _data.Length; i++)
    IL_0007:  ldc.i4.0
    IL_0008:  stloc.1
//000049:         {
//000050:             _data[i] = rand.Next() % 127;
//000051:         }
//000052:     }
//000053: 
//000054:     public bool Equals(Matrix other)
//000055:     {
//000056:         if (_size != other._size) return false;
//000057:         for (int i = 0; i < _data.Length; i++) if (_data[i] != other._data[i]) return false;
//000058:         return true;
//000059:     }
//000060: 
//000061:     public static void Multiply(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
//000062:     {
//000063:         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
//000064:         int N = src1._size;
//000065:         matrix_mult_serial(
//000066:             cancellationToken,
//000067:             N, N, N,
//000068:             src1._dataPtr, 0, 0, N,
//000069:             src2._dataPtr, 0, 0, N,
//000070:             dst._dataPtr, 0, 0, N);
//000071:     }
//000072: 
//000073:     public static void MultiplyParallel(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
//000074:     {
//000075:         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
//000076:         int N = src1._size;
//000077:         matrix_mult_parallel(
//000078:             cancellationToken,
//000079:             N, N, N,
//000080:             src1._dataPtr, 0, 0, N,
//000081:             src2._dataPtr, 0, 0, N,
//000082:             dst._dataPtr, 0, 0, N);
//000083:     }
//000084: 
//000085:     public static void MultiplyStrassens(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
//000086:     {
//000087:         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
//000088:         int N = src1._size;
//000089:         strassen_mult_serial(
//000090:             cancellationToken,
//000091:             N,
//000092:             src1._dataPtr, 0, 0, N,
//000093:             src2._dataPtr, 0, 0, N,
//000094:             dst._dataPtr, 0, 0, N,
//000095:             64);
//000096:     }
//000097: 
//000098:     public static void MultiplyStrassensParallel(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
//000099:     {
//000100:         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
//000101:         int N = src1._size;
//000102:         strassen_mult_parallel(
//000103:             cancellationToken,
//000104:             N,
//000105:             src1._dataPtr, 0, 0, N,
//000106:             src2._dataPtr, 0, 0, N,
//000107:             dst._dataPtr, 0, 0, N,
//000108:             64);
//000109:     }
//000110: 
//000111:     private static void matrix_add( 
//000112:         // dimensions of A, B, and C submatrices 
//000113:         int n, int m,
//000114:         // (ax,ay) = origin of A submatrix for multiplicand 
//000115:         int* A, int ax, int ay, int a_s,
//000116:         // (bx,by) = origin of B submatrix for multiplicand 
//000117:         int* B, int bx, int by, int bs,
//000118:         // (cx,cy) = origin of C submatrix for result 
//000119:         int* C, int cx, int cy, int cs)
//000120:     {
//000121:         for (int i = 0; i < n; i += 1)
//000122:             for (int j = 0; j < m; j += 1)
//000123:                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] + B[(i + bx) * bs + j + by];
//000124:     }
//000125: 
//000126:     private static void matrix_sub(
//000127:         // dimensions of A, B, and C submatrices 
//000128:         int n, int m,
//000129:         // (ax,ay) = origin of A submatrix for multiplicand 
//000130:         int* A, int ax, int ay, int a_s,
//000131:         // (bx,by) = origin of B submatrix for multiplicand 
//000132:         int* B, int bx, int by, int bs,
//000133:         // (cx,cy) = origin of C submatrix for result 
//000134:         int* C, int cx, int cy, int cs)
//000135:     {
//000136:         for (int i = 0; i < n; i += 1)
//000137:         {
//000138:             for (int j = 0; j < m; j += 1)
//000139:             {
//000140:                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] - B[(i + bx) * bs + j + by];
//000141:             }
//000142:         }
//000143:     }
//000144: 
//000145:     private static void matrix_mult_serial(
//000146:         CancellationToken cancellationToken, 
//000147:         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
//000148:         int l, int m, int n,
//000149:         // (ax,ay) = origin of A submatrix for multiplicand 
//000150:         int* A, int ax, int ay, int a_s,
//000151:         // (bx,by) = origin of B submatrix for multiplicand 
//000152:         int* B, int bx, int by, int bs,
//000153:         // (cx,cy) = origin of C submatrix for result 
//000154:         int* C, int cx, int cy, int cs)
//000155:     {
//000156:         for (int i = 0; i < l; ++i)
//000157:         {
//000158:             cancellationToken.ThrowIfCancellationRequested();
//000159:             for (int j = 0; j < n; j++)
//000160:             {
//000161:                 int temp = 0;
//000162:                 for (int k = 0; k < m; k++)
//000163:                 {
//000164:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
//000165:                 }
//000166:                 C[(i + cx) * cs + j + cy] = temp;
//000167:             }
//000168:         }
//000169:     }
//000170: 
//000171:     private static void matrix_mult_parallel(
//000172:         CancellationToken cancellationToken, 
//000173:         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
//000174:         int l, int m, int n,
//000175:         // (ax,ay) = origin of A submatrix for multiplicand 
//000176:         int* A, int ax, int ay, int a_s,
//000177:         // (bx,by) = origin of B submatrix for multiplicand 
//000178:         int* B, int bx, int by, int bs,
//000179:         // (cx,cy) = origin of C submatrix for result 
//000180:         int* C, int cx, int cy, int cs)
//000181:     {
//000182:         ParallelOptions options = new ParallelOptions { CancellationToken = cancellationToken };
//000183:         Parallel.For(0, l, options, i =>
//000184:         {
//000185:             for (int j = 0; j < n; j++)
//000186:             {
//000187:                 int temp = 0;
//000188:                 for (int k = 0; k < m; k++)
//000189:                 {
//000190:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
//000191:                 }
//000192:                 C[(i + cx) * cs + j + cy] = temp;
//000193:             }
//000194:         });
//000195:     }
//000196: 
//000197:     private static void strassen_mult_serial(
//000198:         CancellationToken cancellationToken, 
//000199:         // dimensions of A, B, and C submatrices 
//000200:         int n,
//000201:         // (ax,ay) = origin of A submatrix for multiplicand 
//000202:         int* A, int ax, int ay, int a_s,
//000203:         // (bx,by) = origin of B submatrix for multiplicand 
//000204:         int* B, int bx, int by, int bs,
//000205:         // (cx,cy) = origin of C submatrix for result 
//000206:         int* C, int cx, int cy, int cs,
//000207:         // Strassen's recursion limit for array dimensions 
//000208:         int s)
//000209:     {
//000210:         if (n <= s)
//000211:         {
//000212:             matrix_mult_serial(
//000213:                 cancellationToken,
//000214:                 n, n, n,
//000215:                 A, ax, ay, a_s,
//000216:                 B, bx, by, bs,
//000217:                 C, cx, cy, cs);
//000218:         }
//000219:         else
//000220:         {
//000221:             int n_2 = n >> 1;
//000222:             int[] workArr = new int[n_2 * n_2 * 9];
//000223:             fixed (int* work = workArr)
//000224:             {
//000225:                 int* a_cum = work;
//000226:                 int* b_cum = a_cum + n_2 * n_2;
//000227:                 int* p1 = b_cum + n_2 * n_2;
//000228:                 int* p2 = p1 + n_2 * n_2;
//000229:                 int* p3 = p2 + n_2 * n_2;
//000230:                 int* p4 = p3 + n_2 * n_2;
//000231:                 int* p5 = p4 + n_2 * n_2;
//000232:                 int* p6 = p5 + n_2 * n_2;
//000233:                 int* p7 = p6 + n_2 * n_2;
//000234: 
//000235:                 // p1 = (a11 + a22) * (b11 + b22) 
//000236:                 matrix_add(n_2, n_2,
//000237:                     A, ax, ay, a_s,
//000238:                     A, ax + n_2, ay + n_2, a_s,
//000239:                     a_cum, 0, 0, n_2);
//000240:                 matrix_add(n_2, n_2,
//000241:                     B, bx, by, bs,
//000242:                     B, bx + n_2, by + n_2, bs,
//000243:                     b_cum, 0, 0, n_2);
//000244:                 strassen_mult_serial(
//000245:                     cancellationToken,
//000246:                     n_2,
//000247:                     a_cum, 0, 0, n_2,
//000248:                     b_cum, 0, 0, n_2,
//000249:                     p1, 0, 0, n_2,
//000250:                     s);
//000251: 
//000252:                 // p2 = (a21 + a22) * b11 
//000253:                 matrix_add(n_2, n_2,
//000254:                     A, ax + n_2, ay, a_s,
//000255:                     A, ax + n_2, ay + n_2, a_s,
//000256:                     a_cum, 0, 0, n_2);
//000257:                 strassen_mult_serial(
//000258:                     cancellationToken,
//000259:                     n_2,
//000260:                     a_cum, 0, 0, n_2,
//000261:                     B, bx, by, bs,
//000262:                     p2, 0, 0, n_2,
//000263:                     s);
//000264: 
//000265:                 // p3 = a11 x (b12 - b22) 
//000266:                 matrix_sub(n_2, n_2,
//000267:                     B, bx, by + n_2, bs,
//000268:                     B, bx + n_2, by + n_2, bs,
//000269:                     b_cum, 0, 0, n_2);
//000270:                 strassen_mult_serial(
//000271:                     cancellationToken,
//000272:                     n_2,
//000273:                     A, ax, ay, a_s,
//000274:                     b_cum, 0, 0, n_2,
//000275:                     p3, 0, 0, n_2,
//000276:                     s);
//000277: 
//000278:                 // p4 = a22 x (b21 - b11) 
//000279:                 matrix_sub(n_2, n_2,
//000280:                     B, bx + n_2, by, bs,
//000281:                     B, bx, by, bs,
//000282:                     b_cum, 0, 0, n_2);
//000283:                 strassen_mult_serial(
//000284:                     cancellationToken,
//000285:                     n_2,
//000286:                     A, ax + n_2, ay + n_2, a_s,
//000287:                     b_cum, 0, 0, n_2,
//000288:                     p4, 0, 0, n_2,
//000289:                     s);
//000290: 
//000291:                 // p5 = (a11 + a12) x b22 
//000292:                 matrix_add(n_2, n_2,
//000293:                     A, ax, ay, a_s,
//000294:                     A, ax, ay + n_2, a_s,
//000295:                     a_cum, 0, 0, n_2);
//000296:                 strassen_mult_serial(
//000297:                     cancellationToken,
//000298:                     n_2,
//000299:                     a_cum, 0, 0, n_2,
//000300:                     B, bx + n_2, by + n_2, bs,
//000301:                     p5, 0, 0, n_2,
//000302:                     s);
//000303: 
//000304:                 // p6 = (a21 - a11) x (b11 + b12) 
//000305:                 matrix_sub(n_2, n_2,
//000306:                     A, ax + n_2, ay, a_s,
//000307:                     A, ax, ay, a_s,
//000308:                     a_cum, 0, 0, n_2);
//000309:                 matrix_add(n_2, n_2,
//000310:                     B, bx, by, bs,
//000311:                     B, bx, by + n_2, bs,
//000312:                     b_cum, 0, 0, n_2);
//000313:                 strassen_mult_serial(
//000314:                     cancellationToken,
//000315:                     n_2,
//000316:                     a_cum, 0, 0, n_2,
//000317:                     b_cum, 0, 0, n_2,
//000318:                     p6, 0, 0, n_2,
//000319:                     s);
//000320: 
//000321:                 // p7 = (a12 - a22) x (b21 + b22) 
//000322:                 matrix_sub(n_2, n_2,
//000323:                     A, ax, ay + n_2, a_s,
//000324:                     A, ax + n_2, ay + n_2, a_s,
//000325:                     a_cum, 0, 0, n_2);
//000326:                 matrix_add(n_2, n_2,
//000327:                     B, bx + n_2, by, bs,
//000328:                     B, bx + n_2, by + n_2, bs,
//000329:                     b_cum, 0, 0, n_2);
//000330:                 strassen_mult_serial(
//000331:                     cancellationToken,
//000332:                     n_2,
//000333:                     a_cum, 0, 0, n_2,
//000334:                     b_cum, 0, 0, n_2,
//000335:                     p7, 0, 0, n_2,
//000336:                     s);
//000337: 
//000338:                 // c11 = p1 + p4 - p5 + p7 
//000339:                 matrix_add(n_2, n_2,
//000340:                     p1, 0, 0, n_2,
//000341:                     p4, 0, 0, n_2,
//000342:                     C, cx, cy, cs);
//000343:                 matrix_sub(n_2, n_2,
//000344:                     C, cx, cy, cs,
//000345:                     p5, 0, 0, n_2,
//000346:                     C, cx, cy, cs);
//000347:                 matrix_add(n_2, n_2,
//000348:                     C, cx, cy, cs,
//000349:                     p7, 0, 0, n_2,
//000350:                     C, cx, cy, cs);
//000351: 
//000352:                 // c12 = p3 + p5 
//000353:                 matrix_add(n_2, n_2,
//000354:                     p3, 0, 0, n_2,
//000355:                     p5, 0, 0, n_2,
//000356:                     C, cx, cy + n_2, cs);
//000357: 
//000358:                 // c21 = p2 + p4 
//000359:                 matrix_add(n_2, n_2,
//000360:                     p2, 0, 0, n_2,
//000361:                     p4, 0, 0, n_2,
//000362:                     C, cx + n_2, cy, cs);
//000363: 
//000364:                 // c22 = p1 + p3 - p2 + p6 
//000365:                 matrix_add(n_2, n_2,
//000366:                     p1, 0, 0, n_2,
//000367:                     p3, 0, 0, n_2,
//000368:                     C, cx + n_2, cy + n_2, cs);
//000369:                 matrix_sub(n_2, n_2,
//000370:                     C, cx + n_2, cy + n_2, cs,
//000371:                     p2, 0, 0, n_2,
//000372:                     C, cx + n_2, cy + n_2, cs);
//000373:                 matrix_add(n_2, n_2,
//000374:                     C, cx + n_2, cy + n_2, cs,
//000375:                     p6, 0, 0, n_2,
//000376:                     C, cx + n_2, cy + n_2, cs);
//000377:             }
//000378:         }
//000379:     }
//000380: 
//000381:     private static void strassen_mult_parallel(
//000382:         CancellationToken cancellationToken, 
//000383:         // dimensions of A, B, and C submatrices 
//000384:         int n,
//000385:         // (ax,ay) = origin of A submatrix for multiplicand 
//000386:         int* A, int ax, int ay, int a_s,
//000387:         // (bx,by) = origin of B submatrix for multiplicand 
//000388:         int* B, int bx, int by, int bs,
//000389:         // (cx,cy) = origin of C submatrix for result 
//000390:         int* C, int cx, int cy, int cs,
//000391:         // Strassen's recursion limit for array dimensions 
//000392:         int s)
//000393:     {
//000394:         if (n <= s)
//000395:         {
//000396:             matrix_mult_serial(
//000397:                 cancellationToken,
//000398:                 n, n, n,
//000399:                 A, ax, ay, a_s,
//000400:                 B, bx, by, bs,
//000401:                 C, cx, cy, cs);
//000402:         }
//000403:         else
//000404:         {
//000405:             int n_2 = n >> 1;
//000406:             int areaSize = n_2 * n_2;
//000407:             int[] workArr = new int[areaSize * 17];
//000408:             fixed (int* work = workArr)
//000409:             {
//000410:                 int* a_cum = work;
//000411:                 int* b_cum = a_cum + areaSize;
//000412:                 int* c_cum = b_cum + areaSize;
//000413:                 int* d_cum = c_cum + areaSize;
//000414:                 int* e_cum = d_cum + areaSize;
//000415:                 int* f_cum = e_cum + areaSize;
//000416:                 int* g_cum = f_cum + areaSize;
//000417:                 int* h_cum = g_cum + areaSize;
//000418:                 int* i_cum = h_cum + areaSize;
//000419:                 int* j_cum = i_cum + areaSize;
//000420:                 int* p1 = j_cum + areaSize;
//000421:                 int* p2 = p1 + areaSize;
//000422:                 int* p3 = p2 + areaSize;
//000423:                 int* p4 = p3 + areaSize;
//000424:                 int* p5 = p4 + areaSize;
//000425:                 int* p6 = p5 + areaSize;
//000426:                 int* p7 = p6 + areaSize;
//000427: 
//000428:                 // p1 = (a11 + a22) * (b11 + b22) 
//000429:                 Task t_p1 = Task.Factory.StartNew(() =>
//000430:                 {
//000431:                     matrix_add(n_2, n_2,
//000432:                         A, ax, ay, a_s,
//000433:                         A, ax + n_2, ay + n_2, a_s,
//000434:                         a_cum, 0, 0, n_2);
//000435:                     matrix_add(n_2, n_2,
//000436:                         B, bx, by, bs,
//000437:                         B, bx + n_2, by + n_2, bs,
//000438:                         b_cum, 0, 0, n_2);
//000439:                     strassen_mult_parallel(
//000440:                         cancellationToken,
//000441:                         n_2,
//000442:                         a_cum, 0, 0, n_2,
//000443:                         b_cum, 0, 0, n_2,
//000444:                         p1, 0, 0, n_2,
//000445:                         s);
//000446:                 }, cancellationToken);
//000447: 
//000448:                 // p2 = (a21 + a22) * b11 
//000449:                 Task t_p2 = Task.Factory.StartNew(() =>
//000450:                 {
//000451:                     matrix_add(n_2, n_2,
//000452:                         A, ax + n_2, ay, a_s,
//000453:                         A, ax + n_2, ay + n_2, a_s,
//000454:                         c_cum, 0, 0, n_2);
//000455:                     strassen_mult_parallel(
//000456:                         cancellationToken,
//000457:                         n_2,
//000458:                         c_cum, 0, 0, n_2,
//000459:                         B, bx, by, bs,
//000460:                         p2, 0, 0, n_2,
//000461:                         s);
//000462:                 }, cancellationToken);
//000463: 
//000464:                 // p3 = a11 x (b12 - b22) 
//000465:                 Task t_p3 = Task.Factory.StartNew(() =>
//000466:                 {
//000467:                     matrix_sub(n_2, n_2,
//000468:                         B, bx, by + n_2, bs,
//000469:                         B, bx + n_2, by + n_2, bs,
//000470:                         d_cum, 0, 0, n_2);
//000471:                     strassen_mult_parallel(
//000472:                         cancellationToken,
//000473:                         n_2,
//000474:                         A, ax, ay, a_s,
//000475:                         d_cum, 0, 0, n_2,
//000476:                         p3, 0, 0, n_2,
//000477:                         s);
//000478:                 }, cancellationToken);
//000479: 
//000480:                 // p4 = a22 x (b21 - b11) 
//000481:                 Task t_p4 = Task.Factory.StartNew(() =>
//000482:                 {
//000483:                     matrix_sub(n_2, n_2,
//000484:                         B, bx + n_2, by, bs,
//000485:                         B, bx, by, bs,
//000486:                         e_cum, 0, 0, n_2);
//000487:                     strassen_mult_parallel(
//000488:                         cancellationToken,
//000489:                         n_2,
//000490:                         A, ax + n_2, ay + n_2, a_s,
//000491:                         e_cum, 0, 0, n_2,
//000492:                         p4, 0, 0, n_2,
//000493:                         s);
//000494:                 }, cancellationToken);
//000495: 
//000496:                 // p5 = (a11 + a12) x b22 
//000497:                 Task t_p5 = Task.Factory.StartNew(() =>
//000498:                 {
//000499:                     matrix_add(n_2, n_2,
//000500:                         A, ax, ay, a_s,
//000501:                         A, ax, ay + n_2, a_s,
//000502:                         f_cum, 0, 0, n_2);
//000503:                     strassen_mult_parallel(
//000504:                         cancellationToken,
//000505:                         n_2,
//000506:                         f_cum, 0, 0, n_2,
//000507:                         B, bx + n_2, by + n_2, bs,
//000508:                         p5, 0, 0, n_2,
//000509:                         s);
//000510:                 }, cancellationToken);
//000511: 
//000512:                 // p6 = (a21 - a11) x (b11 + b12) 
//000513:                 Task t_p6 = Task.Factory.StartNew(() =>
//000514:                 {
//000515:                     matrix_sub(n_2, n_2,
//000516:                         A, ax + n_2, ay, a_s,
//000517:                         A, ax, ay, a_s,
//000518:                         g_cum, 0, 0, n_2);
//000519:                     matrix_add(n_2, n_2,
//000520:                         B, bx, by, bs,
//000521:                         B, bx, by + n_2, bs,
//000522:                         h_cum, 0, 0, n_2);
//000523:                     strassen_mult_parallel(
//000524:                         cancellationToken,
//000525:                         n_2,
//000526:                         g_cum, 0, 0, n_2,
//000527:                         h_cum, 0, 0, n_2,
//000528:                         p6, 0, 0, n_2,
//000529:                         s);
//000530:                 }, cancellationToken);
//000531: 
//000532:                 // p7 = (a12 - a22) x (b21 + b22) 
//000533:                 Task t_p7 = Task.Factory.StartNew(() =>
//000534:                 {
//000535:                     matrix_sub(n_2, n_2,
//000536:                         A, ax, ay + n_2, a_s,
//000537:                         A, ax + n_2, ay + n_2, a_s,
//000538:                         i_cum, 0, 0, n_2);
//000539:                     matrix_add(n_2, n_2,
//000540:                         B, bx + n_2, by, bs,
//000541:                         B, bx + n_2, by + n_2, bs,
//000542:                         j_cum, 0, 0, n_2);
//000543:                     strassen_mult_parallel(
//000544:                         cancellationToken,
//000545:                         n_2,
//000546:                         i_cum, 0, 0, n_2,
//000547:                         j_cum, 0, 0, n_2,
//000548:                         p7, 0, 0, n_2,
//000549:                         s);
//000550:                 }, cancellationToken);
//000551: 
//000552:                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
//000553:                 catch (AggregateException ae)
//000554:                 {
//000555:                     ae.Flatten().Handle(e => e is TaskCanceledException);
//000556:                     cancellationToken.ThrowIfCancellationRequested();
//000557:                 }
//000558: 
//000559:                 // c11 = p1 + p4 - p5 + p7 
//000560:                 Task t_c11 = Task.Factory.StartNew(() =>
//000561:                 {
//000562:                     matrix_add(n_2, n_2,
//000563:                         p1, 0, 0, n_2,
//000564:                         p4, 0, 0, n_2,
//000565:                         C, cx, cy, cs);
//000566:                     matrix_sub(n_2, n_2,
//000567:                         C, cx, cy, cs,
//000568:                         p5, 0, 0, n_2,
//000569:                         C, cx, cy, cs);
//000570:                     matrix_add(n_2, n_2,
//000571:                         C, cx, cy, cs,
//000572:                         p7, 0, 0, n_2,
//000573:                         C, cx, cy, cs);
//000574:                 });
//000575: 
//000576:                 // c12 = p3 + p5 
//000577:                 Task t_c12 = Task.Factory.StartNew(() =>
//000578:                 {
//000579:                     matrix_add(n_2, n_2,
//000580:                         p3, 0, 0, n_2,
//000581:                         p5, 0, 0, n_2,
//000582:                         C, cx, cy + n_2, cs);
//000583:                 });
//000584: 
//000585:                 // c21 = p2 + p4 
//000586:                 Task t_c21 = Task.Factory.StartNew(() =>
//000587:                 {
//000588:                     matrix_add(n_2, n_2,
//000589:                         p2, 0, 0, n_2,
//000590:                         p4, 0, 0, n_2,
//000591:                         C, cx + n_2, cy, cs);
//000592:                 });
//000593: 
//000594:                 // c22 = p1 + p3 - p2 + p6 
//000595:                 Task t_c22 = Task.Factory.StartNew(() =>
//000596:                 {
//000597:                     matrix_add(n_2, n_2,
//000598:                         p1, 0, 0, n_2,
//000599:                         p3, 0, 0, n_2,
//000600:                         C, cx + n_2, cy + n_2, cs);
//000601:                     matrix_sub(n_2, n_2,
//000602:                         C, cx + n_2, cy + n_2, cs,
//000603:                         p2, 0, 0, n_2,
//000604:                         C, cx + n_2, cy + n_2, cs);
//000605:                     matrix_add(n_2, n_2,
//000606:                         C, cx + n_2, cy + n_2, cs,
//000607:                         p6, 0, 0, n_2,
//000608:                         C, cx + n_2, cy + n_2, cs);
//000609:                 });
//000610: 
//000611:                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
//000612:             }
//000613:         }
//000614:     }
//000615: }
    IL_0009:  br.s       IL_0022

//000049:         {
    IL_000b:  nop
//000050:             _data[i] = rand.Next() % 127;
    IL_000c:  ldarg.0
    IL_000d:  ldfld      int32[] Matrix::_data
    IL_0012:  ldloc.1
    IL_0013:  ldloc.0
    IL_0014:  callvirt   instance int32 [mscorlib]System.Random::Next()
    IL_0019:  ldc.i4.s   127
    IL_001b:  rem
    IL_001c:  stelem.i4
//000051:         }
    IL_001d:  nop
//000048:         for (int i = 0; i < _data.Length; i++)
    IL_001e:  ldloc.1
    IL_001f:  ldc.i4.1
    IL_0020:  add
    IL_0021:  stloc.1
    IL_0022:  ldloc.1
    IL_0023:  ldarg.0
    IL_0024:  ldfld      int32[] Matrix::_data
    IL_0029:  ldlen
    IL_002a:  conv.i4
    IL_002b:  clt
    IL_002d:  stloc.2
//000049:         {
//000050:             _data[i] = rand.Next() % 127;
//000051:         }
//000052:     }
//000053: 
//000054:     public bool Equals(Matrix other)
//000055:     {
//000056:         if (_size != other._size) return false;
//000057:         for (int i = 0; i < _data.Length; i++) if (_data[i] != other._data[i]) return false;
//000058:         return true;
//000059:     }
//000060: 
//000061:     public static void Multiply(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
//000062:     {
//000063:         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
//000064:         int N = src1._size;
//000065:         matrix_mult_serial(
//000066:             cancellationToken,
//000067:             N, N, N,
//000068:             src1._dataPtr, 0, 0, N,
//000069:             src2._dataPtr, 0, 0, N,
//000070:             dst._dataPtr, 0, 0, N);
//000071:     }
//000072: 
//000073:     public static void MultiplyParallel(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
//000074:     {
//000075:         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
//000076:         int N = src1._size;
//000077:         matrix_mult_parallel(
//000078:             cancellationToken,
//000079:             N, N, N,
//000080:             src1._dataPtr, 0, 0, N,
//000081:             src2._dataPtr, 0, 0, N,
//000082:             dst._dataPtr, 0, 0, N);
//000083:     }
//000084: 
//000085:     public static void MultiplyStrassens(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
//000086:     {
//000087:         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
//000088:         int N = src1._size;
//000089:         strassen_mult_serial(
//000090:             cancellationToken,
//000091:             N,
//000092:             src1._dataPtr, 0, 0, N,
//000093:             src2._dataPtr, 0, 0, N,
//000094:             dst._dataPtr, 0, 0, N,
//000095:             64);
//000096:     }
//000097: 
//000098:     public static void MultiplyStrassensParallel(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
//000099:     {
//000100:         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
//000101:         int N = src1._size;
//000102:         strassen_mult_parallel(
//000103:             cancellationToken,
//000104:             N,
//000105:             src1._dataPtr, 0, 0, N,
//000106:             src2._dataPtr, 0, 0, N,
//000107:             dst._dataPtr, 0, 0, N,
//000108:             64);
//000109:     }
//000110: 
//000111:     private static void matrix_add( 
//000112:         // dimensions of A, B, and C submatrices 
//000113:         int n, int m,
//000114:         // (ax,ay) = origin of A submatrix for multiplicand 
//000115:         int* A, int ax, int ay, int a_s,
//000116:         // (bx,by) = origin of B submatrix for multiplicand 
//000117:         int* B, int bx, int by, int bs,
//000118:         // (cx,cy) = origin of C submatrix for result 
//000119:         int* C, int cx, int cy, int cs)
//000120:     {
//000121:         for (int i = 0; i < n; i += 1)
//000122:             for (int j = 0; j < m; j += 1)
//000123:                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] + B[(i + bx) * bs + j + by];
//000124:     }
//000125: 
//000126:     private static void matrix_sub(
//000127:         // dimensions of A, B, and C submatrices 
//000128:         int n, int m,
//000129:         // (ax,ay) = origin of A submatrix for multiplicand 
//000130:         int* A, int ax, int ay, int a_s,
//000131:         // (bx,by) = origin of B submatrix for multiplicand 
//000132:         int* B, int bx, int by, int bs,
//000133:         // (cx,cy) = origin of C submatrix for result 
//000134:         int* C, int cx, int cy, int cs)
//000135:     {
//000136:         for (int i = 0; i < n; i += 1)
//000137:         {
//000138:             for (int j = 0; j < m; j += 1)
//000139:             {
//000140:                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] - B[(i + bx) * bs + j + by];
//000141:             }
//000142:         }
//000143:     }
//000144: 
//000145:     private static void matrix_mult_serial(
//000146:         CancellationToken cancellationToken, 
//000147:         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
//000148:         int l, int m, int n,
//000149:         // (ax,ay) = origin of A submatrix for multiplicand 
//000150:         int* A, int ax, int ay, int a_s,
//000151:         // (bx,by) = origin of B submatrix for multiplicand 
//000152:         int* B, int bx, int by, int bs,
//000153:         // (cx,cy) = origin of C submatrix for result 
//000154:         int* C, int cx, int cy, int cs)
//000155:     {
//000156:         for (int i = 0; i < l; ++i)
//000157:         {
//000158:             cancellationToken.ThrowIfCancellationRequested();
//000159:             for (int j = 0; j < n; j++)
//000160:             {
//000161:                 int temp = 0;
//000162:                 for (int k = 0; k < m; k++)
//000163:                 {
//000164:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
//000165:                 }
//000166:                 C[(i + cx) * cs + j + cy] = temp;
//000167:             }
//000168:         }
//000169:     }
//000170: 
//000171:     private static void matrix_mult_parallel(
//000172:         CancellationToken cancellationToken, 
//000173:         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
//000174:         int l, int m, int n,
//000175:         // (ax,ay) = origin of A submatrix for multiplicand 
//000176:         int* A, int ax, int ay, int a_s,
//000177:         // (bx,by) = origin of B submatrix for multiplicand 
//000178:         int* B, int bx, int by, int bs,
//000179:         // (cx,cy) = origin of C submatrix for result 
//000180:         int* C, int cx, int cy, int cs)
//000181:     {
//000182:         ParallelOptions options = new ParallelOptions { CancellationToken = cancellationToken };
//000183:         Parallel.For(0, l, options, i =>
//000184:         {
//000185:             for (int j = 0; j < n; j++)
//000186:             {
//000187:                 int temp = 0;
//000188:                 for (int k = 0; k < m; k++)
//000189:                 {
//000190:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
//000191:                 }
//000192:                 C[(i + cx) * cs + j + cy] = temp;
//000193:             }
//000194:         });
//000195:     }
//000196: 
//000197:     private static void strassen_mult_serial(
//000198:         CancellationToken cancellationToken, 
//000199:         // dimensions of A, B, and C submatrices 
//000200:         int n,
//000201:         // (ax,ay) = origin of A submatrix for multiplicand 
//000202:         int* A, int ax, int ay, int a_s,
//000203:         // (bx,by) = origin of B submatrix for multiplicand 
//000204:         int* B, int bx, int by, int bs,
//000205:         // (cx,cy) = origin of C submatrix for result 
//000206:         int* C, int cx, int cy, int cs,
//000207:         // Strassen's recursion limit for array dimensions 
//000208:         int s)
//000209:     {
//000210:         if (n <= s)
//000211:         {
//000212:             matrix_mult_serial(
//000213:                 cancellationToken,
//000214:                 n, n, n,
//000215:                 A, ax, ay, a_s,
//000216:                 B, bx, by, bs,
//000217:                 C, cx, cy, cs);
//000218:         }
//000219:         else
//000220:         {
//000221:             int n_2 = n >> 1;
//000222:             int[] workArr = new int[n_2 * n_2 * 9];
//000223:             fixed (int* work = workArr)
//000224:             {
//000225:                 int* a_cum = work;
//000226:                 int* b_cum = a_cum + n_2 * n_2;
//000227:                 int* p1 = b_cum + n_2 * n_2;
//000228:                 int* p2 = p1 + n_2 * n_2;
//000229:                 int* p3 = p2 + n_2 * n_2;
//000230:                 int* p4 = p3 + n_2 * n_2;
//000231:                 int* p5 = p4 + n_2 * n_2;
//000232:                 int* p6 = p5 + n_2 * n_2;
//000233:                 int* p7 = p6 + n_2 * n_2;
//000234: 
//000235:                 // p1 = (a11 + a22) * (b11 + b22) 
//000236:                 matrix_add(n_2, n_2,
//000237:                     A, ax, ay, a_s,
//000238:                     A, ax + n_2, ay + n_2, a_s,
//000239:                     a_cum, 0, 0, n_2);
//000240:                 matrix_add(n_2, n_2,
//000241:                     B, bx, by, bs,
//000242:                     B, bx + n_2, by + n_2, bs,
//000243:                     b_cum, 0, 0, n_2);
//000244:                 strassen_mult_serial(
//000245:                     cancellationToken,
//000246:                     n_2,
//000247:                     a_cum, 0, 0, n_2,
//000248:                     b_cum, 0, 0, n_2,
//000249:                     p1, 0, 0, n_2,
//000250:                     s);
//000251: 
//000252:                 // p2 = (a21 + a22) * b11 
//000253:                 matrix_add(n_2, n_2,
//000254:                     A, ax + n_2, ay, a_s,
//000255:                     A, ax + n_2, ay + n_2, a_s,
//000256:                     a_cum, 0, 0, n_2);
//000257:                 strassen_mult_serial(
//000258:                     cancellationToken,
//000259:                     n_2,
//000260:                     a_cum, 0, 0, n_2,
//000261:                     B, bx, by, bs,
//000262:                     p2, 0, 0, n_2,
//000263:                     s);
//000264: 
//000265:                 // p3 = a11 x (b12 - b22) 
//000266:                 matrix_sub(n_2, n_2,
//000267:                     B, bx, by + n_2, bs,
//000268:                     B, bx + n_2, by + n_2, bs,
//000269:                     b_cum, 0, 0, n_2);
//000270:                 strassen_mult_serial(
//000271:                     cancellationToken,
//000272:                     n_2,
//000273:                     A, ax, ay, a_s,
//000274:                     b_cum, 0, 0, n_2,
//000275:                     p3, 0, 0, n_2,
//000276:                     s);
//000277: 
//000278:                 // p4 = a22 x (b21 - b11) 
//000279:                 matrix_sub(n_2, n_2,
//000280:                     B, bx + n_2, by, bs,
//000281:                     B, bx, by, bs,
//000282:                     b_cum, 0, 0, n_2);
//000283:                 strassen_mult_serial(
//000284:                     cancellationToken,
//000285:                     n_2,
//000286:                     A, ax + n_2, ay + n_2, a_s,
//000287:                     b_cum, 0, 0, n_2,
//000288:                     p4, 0, 0, n_2,
//000289:                     s);
//000290: 
//000291:                 // p5 = (a11 + a12) x b22 
//000292:                 matrix_add(n_2, n_2,
//000293:                     A, ax, ay, a_s,
//000294:                     A, ax, ay + n_2, a_s,
//000295:                     a_cum, 0, 0, n_2);
//000296:                 strassen_mult_serial(
//000297:                     cancellationToken,
//000298:                     n_2,
//000299:                     a_cum, 0, 0, n_2,
//000300:                     B, bx + n_2, by + n_2, bs,
//000301:                     p5, 0, 0, n_2,
//000302:                     s);
//000303: 
//000304:                 // p6 = (a21 - a11) x (b11 + b12) 
//000305:                 matrix_sub(n_2, n_2,
//000306:                     A, ax + n_2, ay, a_s,
//000307:                     A, ax, ay, a_s,
//000308:                     a_cum, 0, 0, n_2);
//000309:                 matrix_add(n_2, n_2,
//000310:                     B, bx, by, bs,
//000311:                     B, bx, by + n_2, bs,
//000312:                     b_cum, 0, 0, n_2);
//000313:                 strassen_mult_serial(
//000314:                     cancellationToken,
//000315:                     n_2,
//000316:                     a_cum, 0, 0, n_2,
//000317:                     b_cum, 0, 0, n_2,
//000318:                     p6, 0, 0, n_2,
//000319:                     s);
//000320: 
//000321:                 // p7 = (a12 - a22) x (b21 + b22) 
//000322:                 matrix_sub(n_2, n_2,
//000323:                     A, ax, ay + n_2, a_s,
//000324:                     A, ax + n_2, ay + n_2, a_s,
//000325:                     a_cum, 0, 0, n_2);
//000326:                 matrix_add(n_2, n_2,
//000327:                     B, bx + n_2, by, bs,
//000328:                     B, bx + n_2, by + n_2, bs,
//000329:                     b_cum, 0, 0, n_2);
//000330:                 strassen_mult_serial(
//000331:                     cancellationToken,
//000332:                     n_2,
//000333:                     a_cum, 0, 0, n_2,
//000334:                     b_cum, 0, 0, n_2,
//000335:                     p7, 0, 0, n_2,
//000336:                     s);
//000337: 
//000338:                 // c11 = p1 + p4 - p5 + p7 
//000339:                 matrix_add(n_2, n_2,
//000340:                     p1, 0, 0, n_2,
//000341:                     p4, 0, 0, n_2,
//000342:                     C, cx, cy, cs);
//000343:                 matrix_sub(n_2, n_2,
//000344:                     C, cx, cy, cs,
//000345:                     p5, 0, 0, n_2,
//000346:                     C, cx, cy, cs);
//000347:                 matrix_add(n_2, n_2,
//000348:                     C, cx, cy, cs,
//000349:                     p7, 0, 0, n_2,
//000350:                     C, cx, cy, cs);
//000351: 
//000352:                 // c12 = p3 + p5 
//000353:                 matrix_add(n_2, n_2,
//000354:                     p3, 0, 0, n_2,
//000355:                     p5, 0, 0, n_2,
//000356:                     C, cx, cy + n_2, cs);
//000357: 
//000358:                 // c21 = p2 + p4 
//000359:                 matrix_add(n_2, n_2,
//000360:                     p2, 0, 0, n_2,
//000361:                     p4, 0, 0, n_2,
//000362:                     C, cx + n_2, cy, cs);
//000363: 
//000364:                 // c22 = p1 + p3 - p2 + p6 
//000365:                 matrix_add(n_2, n_2,
//000366:                     p1, 0, 0, n_2,
//000367:                     p3, 0, 0, n_2,
//000368:                     C, cx + n_2, cy + n_2, cs);
//000369:                 matrix_sub(n_2, n_2,
//000370:                     C, cx + n_2, cy + n_2, cs,
//000371:                     p2, 0, 0, n_2,
//000372:                     C, cx + n_2, cy + n_2, cs);
//000373:                 matrix_add(n_2, n_2,
//000374:                     C, cx + n_2, cy + n_2, cs,
//000375:                     p6, 0, 0, n_2,
//000376:                     C, cx + n_2, cy + n_2, cs);
//000377:             }
//000378:         }
//000379:     }
//000380: 
//000381:     private static void strassen_mult_parallel(
//000382:         CancellationToken cancellationToken, 
//000383:         // dimensions of A, B, and C submatrices 
//000384:         int n,
//000385:         // (ax,ay) = origin of A submatrix for multiplicand 
//000386:         int* A, int ax, int ay, int a_s,
//000387:         // (bx,by) = origin of B submatrix for multiplicand 
//000388:         int* B, int bx, int by, int bs,
//000389:         // (cx,cy) = origin of C submatrix for result 
//000390:         int* C, int cx, int cy, int cs,
//000391:         // Strassen's recursion limit for array dimensions 
//000392:         int s)
//000393:     {
//000394:         if (n <= s)
//000395:         {
//000396:             matrix_mult_serial(
//000397:                 cancellationToken,
//000398:                 n, n, n,
//000399:                 A, ax, ay, a_s,
//000400:                 B, bx, by, bs,
//000401:                 C, cx, cy, cs);
//000402:         }
//000403:         else
//000404:         {
//000405:             int n_2 = n >> 1;
//000406:             int areaSize = n_2 * n_2;
//000407:             int[] workArr = new int[areaSize * 17];
//000408:             fixed (int* work = workArr)
//000409:             {
//000410:                 int* a_cum = work;
//000411:                 int* b_cum = a_cum + areaSize;
//000412:                 int* c_cum = b_cum + areaSize;
//000413:                 int* d_cum = c_cum + areaSize;
//000414:                 int* e_cum = d_cum + areaSize;
//000415:                 int* f_cum = e_cum + areaSize;
//000416:                 int* g_cum = f_cum + areaSize;
//000417:                 int* h_cum = g_cum + areaSize;
//000418:                 int* i_cum = h_cum + areaSize;
//000419:                 int* j_cum = i_cum + areaSize;
//000420:                 int* p1 = j_cum + areaSize;
//000421:                 int* p2 = p1 + areaSize;
//000422:                 int* p3 = p2 + areaSize;
//000423:                 int* p4 = p3 + areaSize;
//000424:                 int* p5 = p4 + areaSize;
//000425:                 int* p6 = p5 + areaSize;
//000426:                 int* p7 = p6 + areaSize;
//000427: 
//000428:                 // p1 = (a11 + a22) * (b11 + b22) 
//000429:                 Task t_p1 = Task.Factory.StartNew(() =>
//000430:                 {
//000431:                     matrix_add(n_2, n_2,
//000432:                         A, ax, ay, a_s,
//000433:                         A, ax + n_2, ay + n_2, a_s,
//000434:                         a_cum, 0, 0, n_2);
//000435:                     matrix_add(n_2, n_2,
//000436:                         B, bx, by, bs,
//000437:                         B, bx + n_2, by + n_2, bs,
//000438:                         b_cum, 0, 0, n_2);
//000439:                     strassen_mult_parallel(
//000440:                         cancellationToken,
//000441:                         n_2,
//000442:                         a_cum, 0, 0, n_2,
//000443:                         b_cum, 0, 0, n_2,
//000444:                         p1, 0, 0, n_2,
//000445:                         s);
//000446:                 }, cancellationToken);
//000447: 
//000448:                 // p2 = (a21 + a22) * b11 
//000449:                 Task t_p2 = Task.Factory.StartNew(() =>
//000450:                 {
//000451:                     matrix_add(n_2, n_2,
//000452:                         A, ax + n_2, ay, a_s,
//000453:                         A, ax + n_2, ay + n_2, a_s,
//000454:                         c_cum, 0, 0, n_2);
//000455:                     strassen_mult_parallel(
//000456:                         cancellationToken,
//000457:                         n_2,
//000458:                         c_cum, 0, 0, n_2,
//000459:                         B, bx, by, bs,
//000460:                         p2, 0, 0, n_2,
//000461:                         s);
//000462:                 }, cancellationToken);
//000463: 
//000464:                 // p3 = a11 x (b12 - b22) 
//000465:                 Task t_p3 = Task.Factory.StartNew(() =>
//000466:                 {
//000467:                     matrix_sub(n_2, n_2,
//000468:                         B, bx, by + n_2, bs,
//000469:                         B, bx + n_2, by + n_2, bs,
//000470:                         d_cum, 0, 0, n_2);
//000471:                     strassen_mult_parallel(
//000472:                         cancellationToken,
//000473:                         n_2,
//000474:                         A, ax, ay, a_s,
//000475:                         d_cum, 0, 0, n_2,
//000476:                         p3, 0, 0, n_2,
//000477:                         s);
//000478:                 }, cancellationToken);
//000479: 
//000480:                 // p4 = a22 x (b21 - b11) 
//000481:                 Task t_p4 = Task.Factory.StartNew(() =>
//000482:                 {
//000483:                     matrix_sub(n_2, n_2,
//000484:                         B, bx + n_2, by, bs,
//000485:                         B, bx, by, bs,
//000486:                         e_cum, 0, 0, n_2);
//000487:                     strassen_mult_parallel(
//000488:                         cancellationToken,
//000489:                         n_2,
//000490:                         A, ax + n_2, ay + n_2, a_s,
//000491:                         e_cum, 0, 0, n_2,
//000492:                         p4, 0, 0, n_2,
//000493:                         s);
//000494:                 }, cancellationToken);
//000495: 
//000496:                 // p5 = (a11 + a12) x b22 
//000497:                 Task t_p5 = Task.Factory.StartNew(() =>
//000498:                 {
//000499:                     matrix_add(n_2, n_2,
//000500:                         A, ax, ay, a_s,
//000501:                         A, ax, ay + n_2, a_s,
//000502:                         f_cum, 0, 0, n_2);
//000503:                     strassen_mult_parallel(
//000504:                         cancellationToken,
//000505:                         n_2,
//000506:                         f_cum, 0, 0, n_2,
//000507:                         B, bx + n_2, by + n_2, bs,
//000508:                         p5, 0, 0, n_2,
//000509:                         s);
//000510:                 }, cancellationToken);
//000511: 
//000512:                 // p6 = (a21 - a11) x (b11 + b12) 
//000513:                 Task t_p6 = Task.Factory.StartNew(() =>
//000514:                 {
//000515:                     matrix_sub(n_2, n_2,
//000516:                         A, ax + n_2, ay, a_s,
//000517:                         A, ax, ay, a_s,
//000518:                         g_cum, 0, 0, n_2);
//000519:                     matrix_add(n_2, n_2,
//000520:                         B, bx, by, bs,
//000521:                         B, bx, by + n_2, bs,
//000522:                         h_cum, 0, 0, n_2);
//000523:                     strassen_mult_parallel(
//000524:                         cancellationToken,
//000525:                         n_2,
//000526:                         g_cum, 0, 0, n_2,
//000527:                         h_cum, 0, 0, n_2,
//000528:                         p6, 0, 0, n_2,
//000529:                         s);
//000530:                 }, cancellationToken);
//000531: 
//000532:                 // p7 = (a12 - a22) x (b21 + b22) 
//000533:                 Task t_p7 = Task.Factory.StartNew(() =>
//000534:                 {
//000535:                     matrix_sub(n_2, n_2,
//000536:                         A, ax, ay + n_2, a_s,
//000537:                         A, ax + n_2, ay + n_2, a_s,
//000538:                         i_cum, 0, 0, n_2);
//000539:                     matrix_add(n_2, n_2,
//000540:                         B, bx + n_2, by, bs,
//000541:                         B, bx + n_2, by + n_2, bs,
//000542:                         j_cum, 0, 0, n_2);
//000543:                     strassen_mult_parallel(
//000544:                         cancellationToken,
//000545:                         n_2,
//000546:                         i_cum, 0, 0, n_2,
//000547:                         j_cum, 0, 0, n_2,
//000548:                         p7, 0, 0, n_2,
//000549:                         s);
//000550:                 }, cancellationToken);
//000551: 
//000552:                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
//000553:                 catch (AggregateException ae)
//000554:                 {
//000555:                     ae.Flatten().Handle(e => e is TaskCanceledException);
//000556:                     cancellationToken.ThrowIfCancellationRequested();
//000557:                 }
//000558: 
//000559:                 // c11 = p1 + p4 - p5 + p7 
//000560:                 Task t_c11 = Task.Factory.StartNew(() =>
//000561:                 {
//000562:                     matrix_add(n_2, n_2,
//000563:                         p1, 0, 0, n_2,
//000564:                         p4, 0, 0, n_2,
//000565:                         C, cx, cy, cs);
//000566:                     matrix_sub(n_2, n_2,
//000567:                         C, cx, cy, cs,
//000568:                         p5, 0, 0, n_2,
//000569:                         C, cx, cy, cs);
//000570:                     matrix_add(n_2, n_2,
//000571:                         C, cx, cy, cs,
//000572:                         p7, 0, 0, n_2,
//000573:                         C, cx, cy, cs);
//000574:                 });
//000575: 
//000576:                 // c12 = p3 + p5 
//000577:                 Task t_c12 = Task.Factory.StartNew(() =>
//000578:                 {
//000579:                     matrix_add(n_2, n_2,
//000580:                         p3, 0, 0, n_2,
//000581:                         p5, 0, 0, n_2,
//000582:                         C, cx, cy + n_2, cs);
//000583:                 });
//000584: 
//000585:                 // c21 = p2 + p4 
//000586:                 Task t_c21 = Task.Factory.StartNew(() =>
//000587:                 {
//000588:                     matrix_add(n_2, n_2,
//000589:                         p2, 0, 0, n_2,
//000590:                         p4, 0, 0, n_2,
//000591:                         C, cx + n_2, cy, cs);
//000592:                 });
//000593: 
//000594:                 // c22 = p1 + p3 - p2 + p6 
//000595:                 Task t_c22 = Task.Factory.StartNew(() =>
//000596:                 {
//000597:                     matrix_add(n_2, n_2,
//000598:                         p1, 0, 0, n_2,
//000599:                         p3, 0, 0, n_2,
//000600:                         C, cx + n_2, cy + n_2, cs);
//000601:                     matrix_sub(n_2, n_2,
//000602:                         C, cx + n_2, cy + n_2, cs,
//000603:                         p2, 0, 0, n_2,
//000604:                         C, cx + n_2, cy + n_2, cs);
//000605:                     matrix_add(n_2, n_2,
//000606:                         C, cx + n_2, cy + n_2, cs,
//000607:                         p6, 0, 0, n_2,
//000608:                         C, cx + n_2, cy + n_2, cs);
//000609:                 });
//000610: 
//000611:                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
//000612:             }
//000613:         }
//000614:     }
//000615: }
    IL_002e:  ldloc.2
    IL_002f:  brtrue.s   IL_000b

//000052:     }
    IL_0031:  ret
  } // end of method Matrix::FillWithRandomValues

  .method public hidebysig instance bool 
          Equals(class Matrix other) cil managed
  {
    // Code size       78 (0x4e)
    .maxstack  3
    .locals init ([0] int32 i,
             [1] bool CS$1$0000,
             [2] bool CS$4$0001)
//000053: 
//000054:     public bool Equals(Matrix other)
//000055:     {
    IL_0000:  nop
//000056:         if (_size != other._size) return false;
    IL_0001:  ldarg.0
    IL_0002:  ldfld      int32 Matrix::_size
    IL_0007:  ldarg.1
    IL_0008:  ldfld      int32 Matrix::_size
    IL_000d:  ceq
    IL_000f:  stloc.2
//000057:         for (int i = 0; i < _data.Length; i++) if (_data[i] != other._data[i]) return false;
//000058:         return true;
//000059:     }
//000060: 
//000061:     public static void Multiply(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
//000062:     {
//000063:         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
//000064:         int N = src1._size;
//000065:         matrix_mult_serial(
//000066:             cancellationToken,
//000067:             N, N, N,
//000068:             src1._dataPtr, 0, 0, N,
//000069:             src2._dataPtr, 0, 0, N,
//000070:             dst._dataPtr, 0, 0, N);
//000071:     }
//000072: 
//000073:     public static void MultiplyParallel(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
//000074:     {
//000075:         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
//000076:         int N = src1._size;
//000077:         matrix_mult_parallel(
//000078:             cancellationToken,
//000079:             N, N, N,
//000080:             src1._dataPtr, 0, 0, N,
//000081:             src2._dataPtr, 0, 0, N,
//000082:             dst._dataPtr, 0, 0, N);
//000083:     }
//000084: 
//000085:     public static void MultiplyStrassens(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
//000086:     {
//000087:         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
//000088:         int N = src1._size;
//000089:         strassen_mult_serial(
//000090:             cancellationToken,
//000091:             N,
//000092:             src1._dataPtr, 0, 0, N,
//000093:             src2._dataPtr, 0, 0, N,
//000094:             dst._dataPtr, 0, 0, N,
//000095:             64);
//000096:     }
//000097: 
//000098:     public static void MultiplyStrassensParallel(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
//000099:     {
//000100:         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
//000101:         int N = src1._size;
//000102:         strassen_mult_parallel(
//000103:             cancellationToken,
//000104:             N,
//000105:             src1._dataPtr, 0, 0, N,
//000106:             src2._dataPtr, 0, 0, N,
//000107:             dst._dataPtr, 0, 0, N,
//000108:             64);
//000109:     }
//000110: 
//000111:     private static void matrix_add( 
//000112:         // dimensions of A, B, and C submatrices 
//000113:         int n, int m,
//000114:         // (ax,ay) = origin of A submatrix for multiplicand 
//000115:         int* A, int ax, int ay, int a_s,
//000116:         // (bx,by) = origin of B submatrix for multiplicand 
//000117:         int* B, int bx, int by, int bs,
//000118:         // (cx,cy) = origin of C submatrix for result 
//000119:         int* C, int cx, int cy, int cs)
//000120:     {
//000121:         for (int i = 0; i < n; i += 1)
//000122:             for (int j = 0; j < m; j += 1)
//000123:                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] + B[(i + bx) * bs + j + by];
//000124:     }
//000125: 
//000126:     private static void matrix_sub(
//000127:         // dimensions of A, B, and C submatrices 
//000128:         int n, int m,
//000129:         // (ax,ay) = origin of A submatrix for multiplicand 
//000130:         int* A, int ax, int ay, int a_s,
//000131:         // (bx,by) = origin of B submatrix for multiplicand 
//000132:         int* B, int bx, int by, int bs,
//000133:         // (cx,cy) = origin of C submatrix for result 
//000134:         int* C, int cx, int cy, int cs)
//000135:     {
//000136:         for (int i = 0; i < n; i += 1)
//000137:         {
//000138:             for (int j = 0; j < m; j += 1)
//000139:             {
//000140:                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] - B[(i + bx) * bs + j + by];
//000141:             }
//000142:         }
//000143:     }
//000144: 
//000145:     private static void matrix_mult_serial(
//000146:         CancellationToken cancellationToken, 
//000147:         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
//000148:         int l, int m, int n,
//000149:         // (ax,ay) = origin of A submatrix for multiplicand 
//000150:         int* A, int ax, int ay, int a_s,
//000151:         // (bx,by) = origin of B submatrix for multiplicand 
//000152:         int* B, int bx, int by, int bs,
//000153:         // (cx,cy) = origin of C submatrix for result 
//000154:         int* C, int cx, int cy, int cs)
//000155:     {
//000156:         for (int i = 0; i < l; ++i)
//000157:         {
//000158:             cancellationToken.ThrowIfCancellationRequested();
//000159:             for (int j = 0; j < n; j++)
//000160:             {
//000161:                 int temp = 0;
//000162:                 for (int k = 0; k < m; k++)
//000163:                 {
//000164:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
//000165:                 }
//000166:                 C[(i + cx) * cs + j + cy] = temp;
//000167:             }
//000168:         }
//000169:     }
//000170: 
//000171:     private static void matrix_mult_parallel(
//000172:         CancellationToken cancellationToken, 
//000173:         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
//000174:         int l, int m, int n,
//000175:         // (ax,ay) = origin of A submatrix for multiplicand 
//000176:         int* A, int ax, int ay, int a_s,
//000177:         // (bx,by) = origin of B submatrix for multiplicand 
//000178:         int* B, int bx, int by, int bs,
//000179:         // (cx,cy) = origin of C submatrix for result 
//000180:         int* C, int cx, int cy, int cs)
//000181:     {
//000182:         ParallelOptions options = new ParallelOptions { CancellationToken = cancellationToken };
//000183:         Parallel.For(0, l, options, i =>
//000184:         {
//000185:             for (int j = 0; j < n; j++)
//000186:             {
//000187:                 int temp = 0;
//000188:                 for (int k = 0; k < m; k++)
//000189:                 {
//000190:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
//000191:                 }
//000192:                 C[(i + cx) * cs + j + cy] = temp;
//000193:             }
//000194:         });
//000195:     }
//000196: 
//000197:     private static void strassen_mult_serial(
//000198:         CancellationToken cancellationToken, 
//000199:         // dimensions of A, B, and C submatrices 
//000200:         int n,
//000201:         // (ax,ay) = origin of A submatrix for multiplicand 
//000202:         int* A, int ax, int ay, int a_s,
//000203:         // (bx,by) = origin of B submatrix for multiplicand 
//000204:         int* B, int bx, int by, int bs,
//000205:         // (cx,cy) = origin of C submatrix for result 
//000206:         int* C, int cx, int cy, int cs,
//000207:         // Strassen's recursion limit for array dimensions 
//000208:         int s)
//000209:     {
//000210:         if (n <= s)
//000211:         {
//000212:             matrix_mult_serial(
//000213:                 cancellationToken,
//000214:                 n, n, n,
//000215:                 A, ax, ay, a_s,
//000216:                 B, bx, by, bs,
//000217:                 C, cx, cy, cs);
//000218:         }
//000219:         else
//000220:         {
//000221:             int n_2 = n >> 1;
//000222:             int[] workArr = new int[n_2 * n_2 * 9];
//000223:             fixed (int* work = workArr)
//000224:             {
//000225:                 int* a_cum = work;
//000226:                 int* b_cum = a_cum + n_2 * n_2;
//000227:                 int* p1 = b_cum + n_2 * n_2;
//000228:                 int* p2 = p1 + n_2 * n_2;
//000229:                 int* p3 = p2 + n_2 * n_2;
//000230:                 int* p4 = p3 + n_2 * n_2;
//000231:                 int* p5 = p4 + n_2 * n_2;
//000232:                 int* p6 = p5 + n_2 * n_2;
//000233:                 int* p7 = p6 + n_2 * n_2;
//000234: 
//000235:                 // p1 = (a11 + a22) * (b11 + b22) 
//000236:                 matrix_add(n_2, n_2,
//000237:                     A, ax, ay, a_s,
//000238:                     A, ax + n_2, ay + n_2, a_s,
//000239:                     a_cum, 0, 0, n_2);
//000240:                 matrix_add(n_2, n_2,
//000241:                     B, bx, by, bs,
//000242:                     B, bx + n_2, by + n_2, bs,
//000243:                     b_cum, 0, 0, n_2);
//000244:                 strassen_mult_serial(
//000245:                     cancellationToken,
//000246:                     n_2,
//000247:                     a_cum, 0, 0, n_2,
//000248:                     b_cum, 0, 0, n_2,
//000249:                     p1, 0, 0, n_2,
//000250:                     s);
//000251: 
//000252:                 // p2 = (a21 + a22) * b11 
//000253:                 matrix_add(n_2, n_2,
//000254:                     A, ax + n_2, ay, a_s,
//000255:                     A, ax + n_2, ay + n_2, a_s,
//000256:                     a_cum, 0, 0, n_2);
//000257:                 strassen_mult_serial(
//000258:                     cancellationToken,
//000259:                     n_2,
//000260:                     a_cum, 0, 0, n_2,
//000261:                     B, bx, by, bs,
//000262:                     p2, 0, 0, n_2,
//000263:                     s);
//000264: 
//000265:                 // p3 = a11 x (b12 - b22) 
//000266:                 matrix_sub(n_2, n_2,
//000267:                     B, bx, by + n_2, bs,
//000268:                     B, bx + n_2, by + n_2, bs,
//000269:                     b_cum, 0, 0, n_2);
//000270:                 strassen_mult_serial(
//000271:                     cancellationToken,
//000272:                     n_2,
//000273:                     A, ax, ay, a_s,
//000274:                     b_cum, 0, 0, n_2,
//000275:                     p3, 0, 0, n_2,
//000276:                     s);
//000277: 
//000278:                 // p4 = a22 x (b21 - b11) 
//000279:                 matrix_sub(n_2, n_2,
//000280:                     B, bx + n_2, by, bs,
//000281:                     B, bx, by, bs,
//000282:                     b_cum, 0, 0, n_2);
//000283:                 strassen_mult_serial(
//000284:                     cancellationToken,
//000285:                     n_2,
//000286:                     A, ax + n_2, ay + n_2, a_s,
//000287:                     b_cum, 0, 0, n_2,
//000288:                     p4, 0, 0, n_2,
//000289:                     s);
//000290: 
//000291:                 // p5 = (a11 + a12) x b22 
//000292:                 matrix_add(n_2, n_2,
//000293:                     A, ax, ay, a_s,
//000294:                     A, ax, ay + n_2, a_s,
//000295:                     a_cum, 0, 0, n_2);
//000296:                 strassen_mult_serial(
//000297:                     cancellationToken,
//000298:                     n_2,
//000299:                     a_cum, 0, 0, n_2,
//000300:                     B, bx + n_2, by + n_2, bs,
//000301:                     p5, 0, 0, n_2,
//000302:                     s);
//000303: 
//000304:                 // p6 = (a21 - a11) x (b11 + b12) 
//000305:                 matrix_sub(n_2, n_2,
//000306:                     A, ax + n_2, ay, a_s,
//000307:                     A, ax, ay, a_s,
//000308:                     a_cum, 0, 0, n_2);
//000309:                 matrix_add(n_2, n_2,
//000310:                     B, bx, by, bs,
//000311:                     B, bx, by + n_2, bs,
//000312:                     b_cum, 0, 0, n_2);
//000313:                 strassen_mult_serial(
//000314:                     cancellationToken,
//000315:                     n_2,
//000316:                     a_cum, 0, 0, n_2,
//000317:                     b_cum, 0, 0, n_2,
//000318:                     p6, 0, 0, n_2,
//000319:                     s);
//000320: 
//000321:                 // p7 = (a12 - a22) x (b21 + b22) 
//000322:                 matrix_sub(n_2, n_2,
//000323:                     A, ax, ay + n_2, a_s,
//000324:                     A, ax + n_2, ay + n_2, a_s,
//000325:                     a_cum, 0, 0, n_2);
//000326:                 matrix_add(n_2, n_2,
//000327:                     B, bx + n_2, by, bs,
//000328:                     B, bx + n_2, by + n_2, bs,
//000329:                     b_cum, 0, 0, n_2);
//000330:                 strassen_mult_serial(
//000331:                     cancellationToken,
//000332:                     n_2,
//000333:                     a_cum, 0, 0, n_2,
//000334:                     b_cum, 0, 0, n_2,
//000335:                     p7, 0, 0, n_2,
//000336:                     s);
//000337: 
//000338:                 // c11 = p1 + p4 - p5 + p7 
//000339:                 matrix_add(n_2, n_2,
//000340:                     p1, 0, 0, n_2,
//000341:                     p4, 0, 0, n_2,
//000342:                     C, cx, cy, cs);
//000343:                 matrix_sub(n_2, n_2,
//000344:                     C, cx, cy, cs,
//000345:                     p5, 0, 0, n_2,
//000346:                     C, cx, cy, cs);
//000347:                 matrix_add(n_2, n_2,
//000348:                     C, cx, cy, cs,
//000349:                     p7, 0, 0, n_2,
//000350:                     C, cx, cy, cs);
//000351: 
//000352:                 // c12 = p3 + p5 
//000353:                 matrix_add(n_2, n_2,
//000354:                     p3, 0, 0, n_2,
//000355:                     p5, 0, 0, n_2,
//000356:                     C, cx, cy + n_2, cs);
//000357: 
//000358:                 // c21 = p2 + p4 
//000359:                 matrix_add(n_2, n_2,
//000360:                     p2, 0, 0, n_2,
//000361:                     p4, 0, 0, n_2,
//000362:                     C, cx + n_2, cy, cs);
//000363: 
//000364:                 // c22 = p1 + p3 - p2 + p6 
//000365:                 matrix_add(n_2, n_2,
//000366:                     p1, 0, 0, n_2,
//000367:                     p3, 0, 0, n_2,
//000368:                     C, cx + n_2, cy + n_2, cs);
//000369:                 matrix_sub(n_2, n_2,
//000370:                     C, cx + n_2, cy + n_2, cs,
//000371:                     p2, 0, 0, n_2,
//000372:                     C, cx + n_2, cy + n_2, cs);
//000373:                 matrix_add(n_2, n_2,
//000374:                     C, cx + n_2, cy + n_2, cs,
//000375:                     p6, 0, 0, n_2,
//000376:                     C, cx + n_2, cy + n_2, cs);
//000377:             }
//000378:         }
//000379:     }
//000380: 
//000381:     private static void strassen_mult_parallel(
//000382:         CancellationToken cancellationToken, 
//000383:         // dimensions of A, B, and C submatrices 
//000384:         int n,
//000385:         // (ax,ay) = origin of A submatrix for multiplicand 
//000386:         int* A, int ax, int ay, int a_s,
//000387:         // (bx,by) = origin of B submatrix for multiplicand 
//000388:         int* B, int bx, int by, int bs,
//000389:         // (cx,cy) = origin of C submatrix for result 
//000390:         int* C, int cx, int cy, int cs,
//000391:         // Strassen's recursion limit for array dimensions 
//000392:         int s)
//000393:     {
//000394:         if (n <= s)
//000395:         {
//000396:             matrix_mult_serial(
//000397:                 cancellationToken,
//000398:                 n, n, n,
//000399:                 A, ax, ay, a_s,
//000400:                 B, bx, by, bs,
//000401:                 C, cx, cy, cs);
//000402:         }
//000403:         else
//000404:         {
//000405:             int n_2 = n >> 1;
//000406:             int areaSize = n_2 * n_2;
//000407:             int[] workArr = new int[areaSize * 17];
//000408:             fixed (int* work = workArr)
//000409:             {
//000410:                 int* a_cum = work;
//000411:                 int* b_cum = a_cum + areaSize;
//000412:                 int* c_cum = b_cum + areaSize;
//000413:                 int* d_cum = c_cum + areaSize;
//000414:                 int* e_cum = d_cum + areaSize;
//000415:                 int* f_cum = e_cum + areaSize;
//000416:                 int* g_cum = f_cum + areaSize;
//000417:                 int* h_cum = g_cum + areaSize;
//000418:                 int* i_cum = h_cum + areaSize;
//000419:                 int* j_cum = i_cum + areaSize;
//000420:                 int* p1 = j_cum + areaSize;
//000421:                 int* p2 = p1 + areaSize;
//000422:                 int* p3 = p2 + areaSize;
//000423:                 int* p4 = p3 + areaSize;
//000424:                 int* p5 = p4 + areaSize;
//000425:                 int* p6 = p5 + areaSize;
//000426:                 int* p7 = p6 + areaSize;
//000427: 
//000428:                 // p1 = (a11 + a22) * (b11 + b22) 
//000429:                 Task t_p1 = Task.Factory.StartNew(() =>
//000430:                 {
//000431:                     matrix_add(n_2, n_2,
//000432:                         A, ax, ay, a_s,
//000433:                         A, ax + n_2, ay + n_2, a_s,
//000434:                         a_cum, 0, 0, n_2);
//000435:                     matrix_add(n_2, n_2,
//000436:                         B, bx, by, bs,
//000437:                         B, bx + n_2, by + n_2, bs,
//000438:                         b_cum, 0, 0, n_2);
//000439:                     strassen_mult_parallel(
//000440:                         cancellationToken,
//000441:                         n_2,
//000442:                         a_cum, 0, 0, n_2,
//000443:                         b_cum, 0, 0, n_2,
//000444:                         p1, 0, 0, n_2,
//000445:                         s);
//000446:                 }, cancellationToken);
//000447: 
//000448:                 // p2 = (a21 + a22) * b11 
//000449:                 Task t_p2 = Task.Factory.StartNew(() =>
//000450:                 {
//000451:                     matrix_add(n_2, n_2,
//000452:                         A, ax + n_2, ay, a_s,
//000453:                         A, ax + n_2, ay + n_2, a_s,
//000454:                         c_cum, 0, 0, n_2);
//000455:                     strassen_mult_parallel(
//000456:                         cancellationToken,
//000457:                         n_2,
//000458:                         c_cum, 0, 0, n_2,
//000459:                         B, bx, by, bs,
//000460:                         p2, 0, 0, n_2,
//000461:                         s);
//000462:                 }, cancellationToken);
//000463: 
//000464:                 // p3 = a11 x (b12 - b22) 
//000465:                 Task t_p3 = Task.Factory.StartNew(() =>
//000466:                 {
//000467:                     matrix_sub(n_2, n_2,
//000468:                         B, bx, by + n_2, bs,
//000469:                         B, bx + n_2, by + n_2, bs,
//000470:                         d_cum, 0, 0, n_2);
//000471:                     strassen_mult_parallel(
//000472:                         cancellationToken,
//000473:                         n_2,
//000474:                         A, ax, ay, a_s,
//000475:                         d_cum, 0, 0, n_2,
//000476:                         p3, 0, 0, n_2,
//000477:                         s);
//000478:                 }, cancellationToken);
//000479: 
//000480:                 // p4 = a22 x (b21 - b11) 
//000481:                 Task t_p4 = Task.Factory.StartNew(() =>
//000482:                 {
//000483:                     matrix_sub(n_2, n_2,
//000484:                         B, bx + n_2, by, bs,
//000485:                         B, bx, by, bs,
//000486:                         e_cum, 0, 0, n_2);
//000487:                     strassen_mult_parallel(
//000488:                         cancellationToken,
//000489:                         n_2,
//000490:                         A, ax + n_2, ay + n_2, a_s,
//000491:                         e_cum, 0, 0, n_2,
//000492:                         p4, 0, 0, n_2,
//000493:                         s);
//000494:                 }, cancellationToken);
//000495: 
//000496:                 // p5 = (a11 + a12) x b22 
//000497:                 Task t_p5 = Task.Factory.StartNew(() =>
//000498:                 {
//000499:                     matrix_add(n_2, n_2,
//000500:                         A, ax, ay, a_s,
//000501:                         A, ax, ay + n_2, a_s,
//000502:                         f_cum, 0, 0, n_2);
//000503:                     strassen_mult_parallel(
//000504:                         cancellationToken,
//000505:                         n_2,
//000506:                         f_cum, 0, 0, n_2,
//000507:                         B, bx + n_2, by + n_2, bs,
//000508:                         p5, 0, 0, n_2,
//000509:                         s);
//000510:                 }, cancellationToken);
//000511: 
//000512:                 // p6 = (a21 - a11) x (b11 + b12) 
//000513:                 Task t_p6 = Task.Factory.StartNew(() =>
//000514:                 {
//000515:                     matrix_sub(n_2, n_2,
//000516:                         A, ax + n_2, ay, a_s,
//000517:                         A, ax, ay, a_s,
//000518:                         g_cum, 0, 0, n_2);
//000519:                     matrix_add(n_2, n_2,
//000520:                         B, bx, by, bs,
//000521:                         B, bx, by + n_2, bs,
//000522:                         h_cum, 0, 0, n_2);
//000523:                     strassen_mult_parallel(
//000524:                         cancellationToken,
//000525:                         n_2,
//000526:                         g_cum, 0, 0, n_2,
//000527:                         h_cum, 0, 0, n_2,
//000528:                         p6, 0, 0, n_2,
//000529:                         s);
//000530:                 }, cancellationToken);
//000531: 
//000532:                 // p7 = (a12 - a22) x (b21 + b22) 
//000533:                 Task t_p7 = Task.Factory.StartNew(() =>
//000534:                 {
//000535:                     matrix_sub(n_2, n_2,
//000536:                         A, ax, ay + n_2, a_s,
//000537:                         A, ax + n_2, ay + n_2, a_s,
//000538:                         i_cum, 0, 0, n_2);
//000539:                     matrix_add(n_2, n_2,
//000540:                         B, bx + n_2, by, bs,
//000541:                         B, bx + n_2, by + n_2, bs,
//000542:                         j_cum, 0, 0, n_2);
//000543:                     strassen_mult_parallel(
//000544:                         cancellationToken,
//000545:                         n_2,
//000546:                         i_cum, 0, 0, n_2,
//000547:                         j_cum, 0, 0, n_2,
//000548:                         p7, 0, 0, n_2,
//000549:                         s);
//000550:                 }, cancellationToken);
//000551: 
//000552:                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
//000553:                 catch (AggregateException ae)
//000554:                 {
//000555:                     ae.Flatten().Handle(e => e is TaskCanceledException);
//000556:                     cancellationToken.ThrowIfCancellationRequested();
//000557:                 }
//000558: 
//000559:                 // c11 = p1 + p4 - p5 + p7 
//000560:                 Task t_c11 = Task.Factory.StartNew(() =>
//000561:                 {
//000562:                     matrix_add(n_2, n_2,
//000563:                         p1, 0, 0, n_2,
//000564:                         p4, 0, 0, n_2,
//000565:                         C, cx, cy, cs);
//000566:                     matrix_sub(n_2, n_2,
//000567:                         C, cx, cy, cs,
//000568:                         p5, 0, 0, n_2,
//000569:                         C, cx, cy, cs);
//000570:                     matrix_add(n_2, n_2,
//000571:                         C, cx, cy, cs,
//000572:                         p7, 0, 0, n_2,
//000573:                         C, cx, cy, cs);
//000574:                 });
//000575: 
//000576:                 // c12 = p3 + p5 
//000577:                 Task t_c12 = Task.Factory.StartNew(() =>
//000578:                 {
//000579:                     matrix_add(n_2, n_2,
//000580:                         p3, 0, 0, n_2,
//000581:                         p5, 0, 0, n_2,
//000582:                         C, cx, cy + n_2, cs);
//000583:                 });
//000584: 
//000585:                 // c21 = p2 + p4 
//000586:                 Task t_c21 = Task.Factory.StartNew(() =>
//000587:                 {
//000588:                     matrix_add(n_2, n_2,
//000589:                         p2, 0, 0, n_2,
//000590:                         p4, 0, 0, n_2,
//000591:                         C, cx + n_2, cy, cs);
//000592:                 });
//000593: 
//000594:                 // c22 = p1 + p3 - p2 + p6 
//000595:                 Task t_c22 = Task.Factory.StartNew(() =>
//000596:                 {
//000597:                     matrix_add(n_2, n_2,
//000598:                         p1, 0, 0, n_2,
//000599:                         p3, 0, 0, n_2,
//000600:                         C, cx + n_2, cy + n_2, cs);
//000601:                     matrix_sub(n_2, n_2,
//000602:                         C, cx + n_2, cy + n_2, cs,
//000603:                         p2, 0, 0, n_2,
//000604:                         C, cx + n_2, cy + n_2, cs);
//000605:                     matrix_add(n_2, n_2,
//000606:                         C, cx + n_2, cy + n_2, cs,
//000607:                         p6, 0, 0, n_2,
//000608:                         C, cx + n_2, cy + n_2, cs);
//000609:                 });
//000610: 
//000611:                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
//000612:             }
//000613:         }
//000614:     }
//000615: }
    IL_0010:  ldloc.2
    IL_0011:  brtrue.s   IL_0017

//000056:         if (_size != other._size) return false;
    IL_0013:  ldc.i4.0
    IL_0014:  stloc.1
    IL_0015:  br.s       IL_004c

//000057:         for (int i = 0; i < _data.Length; i++) if (_data[i] != other._data[i]) return false;
    IL_0017:  ldc.i4.0
    IL_0018:  stloc.0
//000058:         return true;
//000059:     }
//000060: 
//000061:     public static void Multiply(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
//000062:     {
//000063:         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
//000064:         int N = src1._size;
//000065:         matrix_mult_serial(
//000066:             cancellationToken,
//000067:             N, N, N,
//000068:             src1._dataPtr, 0, 0, N,
//000069:             src2._dataPtr, 0, 0, N,
//000070:             dst._dataPtr, 0, 0, N);
//000071:     }
//000072: 
//000073:     public static void MultiplyParallel(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
//000074:     {
//000075:         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
//000076:         int N = src1._size;
//000077:         matrix_mult_parallel(
//000078:             cancellationToken,
//000079:             N, N, N,
//000080:             src1._dataPtr, 0, 0, N,
//000081:             src2._dataPtr, 0, 0, N,
//000082:             dst._dataPtr, 0, 0, N);
//000083:     }
//000084: 
//000085:     public static void MultiplyStrassens(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
//000086:     {
//000087:         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
//000088:         int N = src1._size;
//000089:         strassen_mult_serial(
//000090:             cancellationToken,
//000091:             N,
//000092:             src1._dataPtr, 0, 0, N,
//000093:             src2._dataPtr, 0, 0, N,
//000094:             dst._dataPtr, 0, 0, N,
//000095:             64);
//000096:     }
//000097: 
//000098:     public static void MultiplyStrassensParallel(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
//000099:     {
//000100:         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
//000101:         int N = src1._size;
//000102:         strassen_mult_parallel(
//000103:             cancellationToken,
//000104:             N,
//000105:             src1._dataPtr, 0, 0, N,
//000106:             src2._dataPtr, 0, 0, N,
//000107:             dst._dataPtr, 0, 0, N,
//000108:             64);
//000109:     }
//000110: 
//000111:     private static void matrix_add( 
//000112:         // dimensions of A, B, and C submatrices 
//000113:         int n, int m,
//000114:         // (ax,ay) = origin of A submatrix for multiplicand 
//000115:         int* A, int ax, int ay, int a_s,
//000116:         // (bx,by) = origin of B submatrix for multiplicand 
//000117:         int* B, int bx, int by, int bs,
//000118:         // (cx,cy) = origin of C submatrix for result 
//000119:         int* C, int cx, int cy, int cs)
//000120:     {
//000121:         for (int i = 0; i < n; i += 1)
//000122:             for (int j = 0; j < m; j += 1)
//000123:                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] + B[(i + bx) * bs + j + by];
//000124:     }
//000125: 
//000126:     private static void matrix_sub(
//000127:         // dimensions of A, B, and C submatrices 
//000128:         int n, int m,
//000129:         // (ax,ay) = origin of A submatrix for multiplicand 
//000130:         int* A, int ax, int ay, int a_s,
//000131:         // (bx,by) = origin of B submatrix for multiplicand 
//000132:         int* B, int bx, int by, int bs,
//000133:         // (cx,cy) = origin of C submatrix for result 
//000134:         int* C, int cx, int cy, int cs)
//000135:     {
//000136:         for (int i = 0; i < n; i += 1)
//000137:         {
//000138:             for (int j = 0; j < m; j += 1)
//000139:             {
//000140:                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] - B[(i + bx) * bs + j + by];
//000141:             }
//000142:         }
//000143:     }
//000144: 
//000145:     private static void matrix_mult_serial(
//000146:         CancellationToken cancellationToken, 
//000147:         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
//000148:         int l, int m, int n,
//000149:         // (ax,ay) = origin of A submatrix for multiplicand 
//000150:         int* A, int ax, int ay, int a_s,
//000151:         // (bx,by) = origin of B submatrix for multiplicand 
//000152:         int* B, int bx, int by, int bs,
//000153:         // (cx,cy) = origin of C submatrix for result 
//000154:         int* C, int cx, int cy, int cs)
//000155:     {
//000156:         for (int i = 0; i < l; ++i)
//000157:         {
//000158:             cancellationToken.ThrowIfCancellationRequested();
//000159:             for (int j = 0; j < n; j++)
//000160:             {
//000161:                 int temp = 0;
//000162:                 for (int k = 0; k < m; k++)
//000163:                 {
//000164:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
//000165:                 }
//000166:                 C[(i + cx) * cs + j + cy] = temp;
//000167:             }
//000168:         }
//000169:     }
//000170: 
//000171:     private static void matrix_mult_parallel(
//000172:         CancellationToken cancellationToken, 
//000173:         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
//000174:         int l, int m, int n,
//000175:         // (ax,ay) = origin of A submatrix for multiplicand 
//000176:         int* A, int ax, int ay, int a_s,
//000177:         // (bx,by) = origin of B submatrix for multiplicand 
//000178:         int* B, int bx, int by, int bs,
//000179:         // (cx,cy) = origin of C submatrix for result 
//000180:         int* C, int cx, int cy, int cs)
//000181:     {
//000182:         ParallelOptions options = new ParallelOptions { CancellationToken = cancellationToken };
//000183:         Parallel.For(0, l, options, i =>
//000184:         {
//000185:             for (int j = 0; j < n; j++)
//000186:             {
//000187:                 int temp = 0;
//000188:                 for (int k = 0; k < m; k++)
//000189:                 {
//000190:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
//000191:                 }
//000192:                 C[(i + cx) * cs + j + cy] = temp;
//000193:             }
//000194:         });
//000195:     }
//000196: 
//000197:     private static void strassen_mult_serial(
//000198:         CancellationToken cancellationToken, 
//000199:         // dimensions of A, B, and C submatrices 
//000200:         int n,
//000201:         // (ax,ay) = origin of A submatrix for multiplicand 
//000202:         int* A, int ax, int ay, int a_s,
//000203:         // (bx,by) = origin of B submatrix for multiplicand 
//000204:         int* B, int bx, int by, int bs,
//000205:         // (cx,cy) = origin of C submatrix for result 
//000206:         int* C, int cx, int cy, int cs,
//000207:         // Strassen's recursion limit for array dimensions 
//000208:         int s)
//000209:     {
//000210:         if (n <= s)
//000211:         {
//000212:             matrix_mult_serial(
//000213:                 cancellationToken,
//000214:                 n, n, n,
//000215:                 A, ax, ay, a_s,
//000216:                 B, bx, by, bs,
//000217:                 C, cx, cy, cs);
//000218:         }
//000219:         else
//000220:         {
//000221:             int n_2 = n >> 1;
//000222:             int[] workArr = new int[n_2 * n_2 * 9];
//000223:             fixed (int* work = workArr)
//000224:             {
//000225:                 int* a_cum = work;
//000226:                 int* b_cum = a_cum + n_2 * n_2;
//000227:                 int* p1 = b_cum + n_2 * n_2;
//000228:                 int* p2 = p1 + n_2 * n_2;
//000229:                 int* p3 = p2 + n_2 * n_2;
//000230:                 int* p4 = p3 + n_2 * n_2;
//000231:                 int* p5 = p4 + n_2 * n_2;
//000232:                 int* p6 = p5 + n_2 * n_2;
//000233:                 int* p7 = p6 + n_2 * n_2;
//000234: 
//000235:                 // p1 = (a11 + a22) * (b11 + b22) 
//000236:                 matrix_add(n_2, n_2,
//000237:                     A, ax, ay, a_s,
//000238:                     A, ax + n_2, ay + n_2, a_s,
//000239:                     a_cum, 0, 0, n_2);
//000240:                 matrix_add(n_2, n_2,
//000241:                     B, bx, by, bs,
//000242:                     B, bx + n_2, by + n_2, bs,
//000243:                     b_cum, 0, 0, n_2);
//000244:                 strassen_mult_serial(
//000245:                     cancellationToken,
//000246:                     n_2,
//000247:                     a_cum, 0, 0, n_2,
//000248:                     b_cum, 0, 0, n_2,
//000249:                     p1, 0, 0, n_2,
//000250:                     s);
//000251: 
//000252:                 // p2 = (a21 + a22) * b11 
//000253:                 matrix_add(n_2, n_2,
//000254:                     A, ax + n_2, ay, a_s,
//000255:                     A, ax + n_2, ay + n_2, a_s,
//000256:                     a_cum, 0, 0, n_2);
//000257:                 strassen_mult_serial(
//000258:                     cancellationToken,
//000259:                     n_2,
//000260:                     a_cum, 0, 0, n_2,
//000261:                     B, bx, by, bs,
//000262:                     p2, 0, 0, n_2,
//000263:                     s);
//000264: 
//000265:                 // p3 = a11 x (b12 - b22) 
//000266:                 matrix_sub(n_2, n_2,
//000267:                     B, bx, by + n_2, bs,
//000268:                     B, bx + n_2, by + n_2, bs,
//000269:                     b_cum, 0, 0, n_2);
//000270:                 strassen_mult_serial(
//000271:                     cancellationToken,
//000272:                     n_2,
//000273:                     A, ax, ay, a_s,
//000274:                     b_cum, 0, 0, n_2,
//000275:                     p3, 0, 0, n_2,
//000276:                     s);
//000277: 
//000278:                 // p4 = a22 x (b21 - b11) 
//000279:                 matrix_sub(n_2, n_2,
//000280:                     B, bx + n_2, by, bs,
//000281:                     B, bx, by, bs,
//000282:                     b_cum, 0, 0, n_2);
//000283:                 strassen_mult_serial(
//000284:                     cancellationToken,
//000285:                     n_2,
//000286:                     A, ax + n_2, ay + n_2, a_s,
//000287:                     b_cum, 0, 0, n_2,
//000288:                     p4, 0, 0, n_2,
//000289:                     s);
//000290: 
//000291:                 // p5 = (a11 + a12) x b22 
//000292:                 matrix_add(n_2, n_2,
//000293:                     A, ax, ay, a_s,
//000294:                     A, ax, ay + n_2, a_s,
//000295:                     a_cum, 0, 0, n_2);
//000296:                 strassen_mult_serial(
//000297:                     cancellationToken,
//000298:                     n_2,
//000299:                     a_cum, 0, 0, n_2,
//000300:                     B, bx + n_2, by + n_2, bs,
//000301:                     p5, 0, 0, n_2,
//000302:                     s);
//000303: 
//000304:                 // p6 = (a21 - a11) x (b11 + b12) 
//000305:                 matrix_sub(n_2, n_2,
//000306:                     A, ax + n_2, ay, a_s,
//000307:                     A, ax, ay, a_s,
//000308:                     a_cum, 0, 0, n_2);
//000309:                 matrix_add(n_2, n_2,
//000310:                     B, bx, by, bs,
//000311:                     B, bx, by + n_2, bs,
//000312:                     b_cum, 0, 0, n_2);
//000313:                 strassen_mult_serial(
//000314:                     cancellationToken,
//000315:                     n_2,
//000316:                     a_cum, 0, 0, n_2,
//000317:                     b_cum, 0, 0, n_2,
//000318:                     p6, 0, 0, n_2,
//000319:                     s);
//000320: 
//000321:                 // p7 = (a12 - a22) x (b21 + b22) 
//000322:                 matrix_sub(n_2, n_2,
//000323:                     A, ax, ay + n_2, a_s,
//000324:                     A, ax + n_2, ay + n_2, a_s,
//000325:                     a_cum, 0, 0, n_2);
//000326:                 matrix_add(n_2, n_2,
//000327:                     B, bx + n_2, by, bs,
//000328:                     B, bx + n_2, by + n_2, bs,
//000329:                     b_cum, 0, 0, n_2);
//000330:                 strassen_mult_serial(
//000331:                     cancellationToken,
//000332:                     n_2,
//000333:                     a_cum, 0, 0, n_2,
//000334:                     b_cum, 0, 0, n_2,
//000335:                     p7, 0, 0, n_2,
//000336:                     s);
//000337: 
//000338:                 // c11 = p1 + p4 - p5 + p7 
//000339:                 matrix_add(n_2, n_2,
//000340:                     p1, 0, 0, n_2,
//000341:                     p4, 0, 0, n_2,
//000342:                     C, cx, cy, cs);
//000343:                 matrix_sub(n_2, n_2,
//000344:                     C, cx, cy, cs,
//000345:                     p5, 0, 0, n_2,
//000346:                     C, cx, cy, cs);
//000347:                 matrix_add(n_2, n_2,
//000348:                     C, cx, cy, cs,
//000349:                     p7, 0, 0, n_2,
//000350:                     C, cx, cy, cs);
//000351: 
//000352:                 // c12 = p3 + p5 
//000353:                 matrix_add(n_2, n_2,
//000354:                     p3, 0, 0, n_2,
//000355:                     p5, 0, 0, n_2,
//000356:                     C, cx, cy + n_2, cs);
//000357: 
//000358:                 // c21 = p2 + p4 
//000359:                 matrix_add(n_2, n_2,
//000360:                     p2, 0, 0, n_2,
//000361:                     p4, 0, 0, n_2,
//000362:                     C, cx + n_2, cy, cs);
//000363: 
//000364:                 // c22 = p1 + p3 - p2 + p6 
//000365:                 matrix_add(n_2, n_2,
//000366:                     p1, 0, 0, n_2,
//000367:                     p3, 0, 0, n_2,
//000368:                     C, cx + n_2, cy + n_2, cs);
//000369:                 matrix_sub(n_2, n_2,
//000370:                     C, cx + n_2, cy + n_2, cs,
//000371:                     p2, 0, 0, n_2,
//000372:                     C, cx + n_2, cy + n_2, cs);
//000373:                 matrix_add(n_2, n_2,
//000374:                     C, cx + n_2, cy + n_2, cs,
//000375:                     p6, 0, 0, n_2,
//000376:                     C, cx + n_2, cy + n_2, cs);
//000377:             }
//000378:         }
//000379:     }
//000380: 
//000381:     private static void strassen_mult_parallel(
//000382:         CancellationToken cancellationToken, 
//000383:         // dimensions of A, B, and C submatrices 
//000384:         int n,
//000385:         // (ax,ay) = origin of A submatrix for multiplicand 
//000386:         int* A, int ax, int ay, int a_s,
//000387:         // (bx,by) = origin of B submatrix for multiplicand 
//000388:         int* B, int bx, int by, int bs,
//000389:         // (cx,cy) = origin of C submatrix for result 
//000390:         int* C, int cx, int cy, int cs,
//000391:         // Strassen's recursion limit for array dimensions 
//000392:         int s)
//000393:     {
//000394:         if (n <= s)
//000395:         {
//000396:             matrix_mult_serial(
//000397:                 cancellationToken,
//000398:                 n, n, n,
//000399:                 A, ax, ay, a_s,
//000400:                 B, bx, by, bs,
//000401:                 C, cx, cy, cs);
//000402:         }
//000403:         else
//000404:         {
//000405:             int n_2 = n >> 1;
//000406:             int areaSize = n_2 * n_2;
//000407:             int[] workArr = new int[areaSize * 17];
//000408:             fixed (int* work = workArr)
//000409:             {
//000410:                 int* a_cum = work;
//000411:                 int* b_cum = a_cum + areaSize;
//000412:                 int* c_cum = b_cum + areaSize;
//000413:                 int* d_cum = c_cum + areaSize;
//000414:                 int* e_cum = d_cum + areaSize;
//000415:                 int* f_cum = e_cum + areaSize;
//000416:                 int* g_cum = f_cum + areaSize;
//000417:                 int* h_cum = g_cum + areaSize;
//000418:                 int* i_cum = h_cum + areaSize;
//000419:                 int* j_cum = i_cum + areaSize;
//000420:                 int* p1 = j_cum + areaSize;
//000421:                 int* p2 = p1 + areaSize;
//000422:                 int* p3 = p2 + areaSize;
//000423:                 int* p4 = p3 + areaSize;
//000424:                 int* p5 = p4 + areaSize;
//000425:                 int* p6 = p5 + areaSize;
//000426:                 int* p7 = p6 + areaSize;
//000427: 
//000428:                 // p1 = (a11 + a22) * (b11 + b22) 
//000429:                 Task t_p1 = Task.Factory.StartNew(() =>
//000430:                 {
//000431:                     matrix_add(n_2, n_2,
//000432:                         A, ax, ay, a_s,
//000433:                         A, ax + n_2, ay + n_2, a_s,
//000434:                         a_cum, 0, 0, n_2);
//000435:                     matrix_add(n_2, n_2,
//000436:                         B, bx, by, bs,
//000437:                         B, bx + n_2, by + n_2, bs,
//000438:                         b_cum, 0, 0, n_2);
//000439:                     strassen_mult_parallel(
//000440:                         cancellationToken,
//000441:                         n_2,
//000442:                         a_cum, 0, 0, n_2,
//000443:                         b_cum, 0, 0, n_2,
//000444:                         p1, 0, 0, n_2,
//000445:                         s);
//000446:                 }, cancellationToken);
//000447: 
//000448:                 // p2 = (a21 + a22) * b11 
//000449:                 Task t_p2 = Task.Factory.StartNew(() =>
//000450:                 {
//000451:                     matrix_add(n_2, n_2,
//000452:                         A, ax + n_2, ay, a_s,
//000453:                         A, ax + n_2, ay + n_2, a_s,
//000454:                         c_cum, 0, 0, n_2);
//000455:                     strassen_mult_parallel(
//000456:                         cancellationToken,
//000457:                         n_2,
//000458:                         c_cum, 0, 0, n_2,
//000459:                         B, bx, by, bs,
//000460:                         p2, 0, 0, n_2,
//000461:                         s);
//000462:                 }, cancellationToken);
//000463: 
//000464:                 // p3 = a11 x (b12 - b22) 
//000465:                 Task t_p3 = Task.Factory.StartNew(() =>
//000466:                 {
//000467:                     matrix_sub(n_2, n_2,
//000468:                         B, bx, by + n_2, bs,
//000469:                         B, bx + n_2, by + n_2, bs,
//000470:                         d_cum, 0, 0, n_2);
//000471:                     strassen_mult_parallel(
//000472:                         cancellationToken,
//000473:                         n_2,
//000474:                         A, ax, ay, a_s,
//000475:                         d_cum, 0, 0, n_2,
//000476:                         p3, 0, 0, n_2,
//000477:                         s);
//000478:                 }, cancellationToken);
//000479: 
//000480:                 // p4 = a22 x (b21 - b11) 
//000481:                 Task t_p4 = Task.Factory.StartNew(() =>
//000482:                 {
//000483:                     matrix_sub(n_2, n_2,
//000484:                         B, bx + n_2, by, bs,
//000485:                         B, bx, by, bs,
//000486:                         e_cum, 0, 0, n_2);
//000487:                     strassen_mult_parallel(
//000488:                         cancellationToken,
//000489:                         n_2,
//000490:                         A, ax + n_2, ay + n_2, a_s,
//000491:                         e_cum, 0, 0, n_2,
//000492:                         p4, 0, 0, n_2,
//000493:                         s);
//000494:                 }, cancellationToken);
//000495: 
//000496:                 // p5 = (a11 + a12) x b22 
//000497:                 Task t_p5 = Task.Factory.StartNew(() =>
//000498:                 {
//000499:                     matrix_add(n_2, n_2,
//000500:                         A, ax, ay, a_s,
//000501:                         A, ax, ay + n_2, a_s,
//000502:                         f_cum, 0, 0, n_2);
//000503:                     strassen_mult_parallel(
//000504:                         cancellationToken,
//000505:                         n_2,
//000506:                         f_cum, 0, 0, n_2,
//000507:                         B, bx + n_2, by + n_2, bs,
//000508:                         p5, 0, 0, n_2,
//000509:                         s);
//000510:                 }, cancellationToken);
//000511: 
//000512:                 // p6 = (a21 - a11) x (b11 + b12) 
//000513:                 Task t_p6 = Task.Factory.StartNew(() =>
//000514:                 {
//000515:                     matrix_sub(n_2, n_2,
//000516:                         A, ax + n_2, ay, a_s,
//000517:                         A, ax, ay, a_s,
//000518:                         g_cum, 0, 0, n_2);
//000519:                     matrix_add(n_2, n_2,
//000520:                         B, bx, by, bs,
//000521:                         B, bx, by + n_2, bs,
//000522:                         h_cum, 0, 0, n_2);
//000523:                     strassen_mult_parallel(
//000524:                         cancellationToken,
//000525:                         n_2,
//000526:                         g_cum, 0, 0, n_2,
//000527:                         h_cum, 0, 0, n_2,
//000528:                         p6, 0, 0, n_2,
//000529:                         s);
//000530:                 }, cancellationToken);
//000531: 
//000532:                 // p7 = (a12 - a22) x (b21 + b22) 
//000533:                 Task t_p7 = Task.Factory.StartNew(() =>
//000534:                 {
//000535:                     matrix_sub(n_2, n_2,
//000536:                         A, ax, ay + n_2, a_s,
//000537:                         A, ax + n_2, ay + n_2, a_s,
//000538:                         i_cum, 0, 0, n_2);
//000539:                     matrix_add(n_2, n_2,
//000540:                         B, bx + n_2, by, bs,
//000541:                         B, bx + n_2, by + n_2, bs,
//000542:                         j_cum, 0, 0, n_2);
//000543:                     strassen_mult_parallel(
//000544:                         cancellationToken,
//000545:                         n_2,
//000546:                         i_cum, 0, 0, n_2,
//000547:                         j_cum, 0, 0, n_2,
//000548:                         p7, 0, 0, n_2,
//000549:                         s);
//000550:                 }, cancellationToken);
//000551: 
//000552:                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
//000553:                 catch (AggregateException ae)
//000554:                 {
//000555:                     ae.Flatten().Handle(e => e is TaskCanceledException);
//000556:                     cancellationToken.ThrowIfCancellationRequested();
//000557:                 }
//000558: 
//000559:                 // c11 = p1 + p4 - p5 + p7 
//000560:                 Task t_c11 = Task.Factory.StartNew(() =>
//000561:                 {
//000562:                     matrix_add(n_2, n_2,
//000563:                         p1, 0, 0, n_2,
//000564:                         p4, 0, 0, n_2,
//000565:                         C, cx, cy, cs);
//000566:                     matrix_sub(n_2, n_2,
//000567:                         C, cx, cy, cs,
//000568:                         p5, 0, 0, n_2,
//000569:                         C, cx, cy, cs);
//000570:                     matrix_add(n_2, n_2,
//000571:                         C, cx, cy, cs,
//000572:                         p7, 0, 0, n_2,
//000573:                         C, cx, cy, cs);
//000574:                 });
//000575: 
//000576:                 // c12 = p3 + p5 
//000577:                 Task t_c12 = Task.Factory.StartNew(() =>
//000578:                 {
//000579:                     matrix_add(n_2, n_2,
//000580:                         p3, 0, 0, n_2,
//000581:                         p5, 0, 0, n_2,
//000582:                         C, cx, cy + n_2, cs);
//000583:                 });
//000584: 
//000585:                 // c21 = p2 + p4 
//000586:                 Task t_c21 = Task.Factory.StartNew(() =>
//000587:                 {
//000588:                     matrix_add(n_2, n_2,
//000589:                         p2, 0, 0, n_2,
//000590:                         p4, 0, 0, n_2,
//000591:                         C, cx + n_2, cy, cs);
//000592:                 });
//000593: 
//000594:                 // c22 = p1 + p3 - p2 + p6 
//000595:                 Task t_c22 = Task.Factory.StartNew(() =>
//000596:                 {
//000597:                     matrix_add(n_2, n_2,
//000598:                         p1, 0, 0, n_2,
//000599:                         p3, 0, 0, n_2,
//000600:                         C, cx + n_2, cy + n_2, cs);
//000601:                     matrix_sub(n_2, n_2,
//000602:                         C, cx + n_2, cy + n_2, cs,
//000603:                         p2, 0, 0, n_2,
//000604:                         C, cx + n_2, cy + n_2, cs);
//000605:                     matrix_add(n_2, n_2,
//000606:                         C, cx + n_2, cy + n_2, cs,
//000607:                         p6, 0, 0, n_2,
//000608:                         C, cx + n_2, cy + n_2, cs);
//000609:                 });
//000610: 
//000611:                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
//000612:             }
//000613:         }
//000614:     }
//000615: }
    IL_0019:  br.s       IL_0039

//000057:         for (int i = 0; i < _data.Length; i++) if (_data[i] != other._data[i]) return false;
    IL_001b:  ldarg.0
    IL_001c:  ldfld      int32[] Matrix::_data
    IL_0021:  ldloc.0
    IL_0022:  ldelem.i4
    IL_0023:  ldarg.1
    IL_0024:  ldfld      int32[] Matrix::_data
    IL_0029:  ldloc.0
    IL_002a:  ldelem.i4
    IL_002b:  ceq
    IL_002d:  stloc.2
//000058:         return true;
//000059:     }
//000060: 
//000061:     public static void Multiply(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
//000062:     {
//000063:         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
//000064:         int N = src1._size;
//000065:         matrix_mult_serial(
//000066:             cancellationToken,
//000067:             N, N, N,
//000068:             src1._dataPtr, 0, 0, N,
//000069:             src2._dataPtr, 0, 0, N,
//000070:             dst._dataPtr, 0, 0, N);
//000071:     }
//000072: 
//000073:     public static void MultiplyParallel(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
//000074:     {
//000075:         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
//000076:         int N = src1._size;
//000077:         matrix_mult_parallel(
//000078:             cancellationToken,
//000079:             N, N, N,
//000080:             src1._dataPtr, 0, 0, N,
//000081:             src2._dataPtr, 0, 0, N,
//000082:             dst._dataPtr, 0, 0, N);
//000083:     }
//000084: 
//000085:     public static void MultiplyStrassens(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
//000086:     {
//000087:         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
//000088:         int N = src1._size;
//000089:         strassen_mult_serial(
//000090:             cancellationToken,
//000091:             N,
//000092:             src1._dataPtr, 0, 0, N,
//000093:             src2._dataPtr, 0, 0, N,
//000094:             dst._dataPtr, 0, 0, N,
//000095:             64);
//000096:     }
//000097: 
//000098:     public static void MultiplyStrassensParallel(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
//000099:     {
//000100:         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
//000101:         int N = src1._size;
//000102:         strassen_mult_parallel(
//000103:             cancellationToken,
//000104:             N,
//000105:             src1._dataPtr, 0, 0, N,
//000106:             src2._dataPtr, 0, 0, N,
//000107:             dst._dataPtr, 0, 0, N,
//000108:             64);
//000109:     }
//000110: 
//000111:     private static void matrix_add( 
//000112:         // dimensions of A, B, and C submatrices 
//000113:         int n, int m,
//000114:         // (ax,ay) = origin of A submatrix for multiplicand 
//000115:         int* A, int ax, int ay, int a_s,
//000116:         // (bx,by) = origin of B submatrix for multiplicand 
//000117:         int* B, int bx, int by, int bs,
//000118:         // (cx,cy) = origin of C submatrix for result 
//000119:         int* C, int cx, int cy, int cs)
//000120:     {
//000121:         for (int i = 0; i < n; i += 1)
//000122:             for (int j = 0; j < m; j += 1)
//000123:                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] + B[(i + bx) * bs + j + by];
//000124:     }
//000125: 
//000126:     private static void matrix_sub(
//000127:         // dimensions of A, B, and C submatrices 
//000128:         int n, int m,
//000129:         // (ax,ay) = origin of A submatrix for multiplicand 
//000130:         int* A, int ax, int ay, int a_s,
//000131:         // (bx,by) = origin of B submatrix for multiplicand 
//000132:         int* B, int bx, int by, int bs,
//000133:         // (cx,cy) = origin of C submatrix for result 
//000134:         int* C, int cx, int cy, int cs)
//000135:     {
//000136:         for (int i = 0; i < n; i += 1)
//000137:         {
//000138:             for (int j = 0; j < m; j += 1)
//000139:             {
//000140:                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] - B[(i + bx) * bs + j + by];
//000141:             }
//000142:         }
//000143:     }
//000144: 
//000145:     private static void matrix_mult_serial(
//000146:         CancellationToken cancellationToken, 
//000147:         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
//000148:         int l, int m, int n,
//000149:         // (ax,ay) = origin of A submatrix for multiplicand 
//000150:         int* A, int ax, int ay, int a_s,
//000151:         // (bx,by) = origin of B submatrix for multiplicand 
//000152:         int* B, int bx, int by, int bs,
//000153:         // (cx,cy) = origin of C submatrix for result 
//000154:         int* C, int cx, int cy, int cs)
//000155:     {
//000156:         for (int i = 0; i < l; ++i)
//000157:         {
//000158:             cancellationToken.ThrowIfCancellationRequested();
//000159:             for (int j = 0; j < n; j++)
//000160:             {
//000161:                 int temp = 0;
//000162:                 for (int k = 0; k < m; k++)
//000163:                 {
//000164:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
//000165:                 }
//000166:                 C[(i + cx) * cs + j + cy] = temp;
//000167:             }
//000168:         }
//000169:     }
//000170: 
//000171:     private static void matrix_mult_parallel(
//000172:         CancellationToken cancellationToken, 
//000173:         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
//000174:         int l, int m, int n,
//000175:         // (ax,ay) = origin of A submatrix for multiplicand 
//000176:         int* A, int ax, int ay, int a_s,
//000177:         // (bx,by) = origin of B submatrix for multiplicand 
//000178:         int* B, int bx, int by, int bs,
//000179:         // (cx,cy) = origin of C submatrix for result 
//000180:         int* C, int cx, int cy, int cs)
//000181:     {
//000182:         ParallelOptions options = new ParallelOptions { CancellationToken = cancellationToken };
//000183:         Parallel.For(0, l, options, i =>
//000184:         {
//000185:             for (int j = 0; j < n; j++)
//000186:             {
//000187:                 int temp = 0;
//000188:                 for (int k = 0; k < m; k++)
//000189:                 {
//000190:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
//000191:                 }
//000192:                 C[(i + cx) * cs + j + cy] = temp;
//000193:             }
//000194:         });
//000195:     }
//000196: 
//000197:     private static void strassen_mult_serial(
//000198:         CancellationToken cancellationToken, 
//000199:         // dimensions of A, B, and C submatrices 
//000200:         int n,
//000201:         // (ax,ay) = origin of A submatrix for multiplicand 
//000202:         int* A, int ax, int ay, int a_s,
//000203:         // (bx,by) = origin of B submatrix for multiplicand 
//000204:         int* B, int bx, int by, int bs,
//000205:         // (cx,cy) = origin of C submatrix for result 
//000206:         int* C, int cx, int cy, int cs,
//000207:         // Strassen's recursion limit for array dimensions 
//000208:         int s)
//000209:     {
//000210:         if (n <= s)
//000211:         {
//000212:             matrix_mult_serial(
//000213:                 cancellationToken,
//000214:                 n, n, n,
//000215:                 A, ax, ay, a_s,
//000216:                 B, bx, by, bs,
//000217:                 C, cx, cy, cs);
//000218:         }
//000219:         else
//000220:         {
//000221:             int n_2 = n >> 1;
//000222:             int[] workArr = new int[n_2 * n_2 * 9];
//000223:             fixed (int* work = workArr)
//000224:             {
//000225:                 int* a_cum = work;
//000226:                 int* b_cum = a_cum + n_2 * n_2;
//000227:                 int* p1 = b_cum + n_2 * n_2;
//000228:                 int* p2 = p1 + n_2 * n_2;
//000229:                 int* p3 = p2 + n_2 * n_2;
//000230:                 int* p4 = p3 + n_2 * n_2;
//000231:                 int* p5 = p4 + n_2 * n_2;
//000232:                 int* p6 = p5 + n_2 * n_2;
//000233:                 int* p7 = p6 + n_2 * n_2;
//000234: 
//000235:                 // p1 = (a11 + a22) * (b11 + b22) 
//000236:                 matrix_add(n_2, n_2,
//000237:                     A, ax, ay, a_s,
//000238:                     A, ax + n_2, ay + n_2, a_s,
//000239:                     a_cum, 0, 0, n_2);
//000240:                 matrix_add(n_2, n_2,
//000241:                     B, bx, by, bs,
//000242:                     B, bx + n_2, by + n_2, bs,
//000243:                     b_cum, 0, 0, n_2);
//000244:                 strassen_mult_serial(
//000245:                     cancellationToken,
//000246:                     n_2,
//000247:                     a_cum, 0, 0, n_2,
//000248:                     b_cum, 0, 0, n_2,
//000249:                     p1, 0, 0, n_2,
//000250:                     s);
//000251: 
//000252:                 // p2 = (a21 + a22) * b11 
//000253:                 matrix_add(n_2, n_2,
//000254:                     A, ax + n_2, ay, a_s,
//000255:                     A, ax + n_2, ay + n_2, a_s,
//000256:                     a_cum, 0, 0, n_2);
//000257:                 strassen_mult_serial(
//000258:                     cancellationToken,
//000259:                     n_2,
//000260:                     a_cum, 0, 0, n_2,
//000261:                     B, bx, by, bs,
//000262:                     p2, 0, 0, n_2,
//000263:                     s);
//000264: 
//000265:                 // p3 = a11 x (b12 - b22) 
//000266:                 matrix_sub(n_2, n_2,
//000267:                     B, bx, by + n_2, bs,
//000268:                     B, bx + n_2, by + n_2, bs,
//000269:                     b_cum, 0, 0, n_2);
//000270:                 strassen_mult_serial(
//000271:                     cancellationToken,
//000272:                     n_2,
//000273:                     A, ax, ay, a_s,
//000274:                     b_cum, 0, 0, n_2,
//000275:                     p3, 0, 0, n_2,
//000276:                     s);
//000277: 
//000278:                 // p4 = a22 x (b21 - b11) 
//000279:                 matrix_sub(n_2, n_2,
//000280:                     B, bx + n_2, by, bs,
//000281:                     B, bx, by, bs,
//000282:                     b_cum, 0, 0, n_2);
//000283:                 strassen_mult_serial(
//000284:                     cancellationToken,
//000285:                     n_2,
//000286:                     A, ax + n_2, ay + n_2, a_s,
//000287:                     b_cum, 0, 0, n_2,
//000288:                     p4, 0, 0, n_2,
//000289:                     s);
//000290: 
//000291:                 // p5 = (a11 + a12) x b22 
//000292:                 matrix_add(n_2, n_2,
//000293:                     A, ax, ay, a_s,
//000294:                     A, ax, ay + n_2, a_s,
//000295:                     a_cum, 0, 0, n_2);
//000296:                 strassen_mult_serial(
//000297:                     cancellationToken,
//000298:                     n_2,
//000299:                     a_cum, 0, 0, n_2,
//000300:                     B, bx + n_2, by + n_2, bs,
//000301:                     p5, 0, 0, n_2,
//000302:                     s);
//000303: 
//000304:                 // p6 = (a21 - a11) x (b11 + b12) 
//000305:                 matrix_sub(n_2, n_2,
//000306:                     A, ax + n_2, ay, a_s,
//000307:                     A, ax, ay, a_s,
//000308:                     a_cum, 0, 0, n_2);
//000309:                 matrix_add(n_2, n_2,
//000310:                     B, bx, by, bs,
//000311:                     B, bx, by + n_2, bs,
//000312:                     b_cum, 0, 0, n_2);
//000313:                 strassen_mult_serial(
//000314:                     cancellationToken,
//000315:                     n_2,
//000316:                     a_cum, 0, 0, n_2,
//000317:                     b_cum, 0, 0, n_2,
//000318:                     p6, 0, 0, n_2,
//000319:                     s);
//000320: 
//000321:                 // p7 = (a12 - a22) x (b21 + b22) 
//000322:                 matrix_sub(n_2, n_2,
//000323:                     A, ax, ay + n_2, a_s,
//000324:                     A, ax + n_2, ay + n_2, a_s,
//000325:                     a_cum, 0, 0, n_2);
//000326:                 matrix_add(n_2, n_2,
//000327:                     B, bx + n_2, by, bs,
//000328:                     B, bx + n_2, by + n_2, bs,
//000329:                     b_cum, 0, 0, n_2);
//000330:                 strassen_mult_serial(
//000331:                     cancellationToken,
//000332:                     n_2,
//000333:                     a_cum, 0, 0, n_2,
//000334:                     b_cum, 0, 0, n_2,
//000335:                     p7, 0, 0, n_2,
//000336:                     s);
//000337: 
//000338:                 // c11 = p1 + p4 - p5 + p7 
//000339:                 matrix_add(n_2, n_2,
//000340:                     p1, 0, 0, n_2,
//000341:                     p4, 0, 0, n_2,
//000342:                     C, cx, cy, cs);
//000343:                 matrix_sub(n_2, n_2,
//000344:                     C, cx, cy, cs,
//000345:                     p5, 0, 0, n_2,
//000346:                     C, cx, cy, cs);
//000347:                 matrix_add(n_2, n_2,
//000348:                     C, cx, cy, cs,
//000349:                     p7, 0, 0, n_2,
//000350:                     C, cx, cy, cs);
//000351: 
//000352:                 // c12 = p3 + p5 
//000353:                 matrix_add(n_2, n_2,
//000354:                     p3, 0, 0, n_2,
//000355:                     p5, 0, 0, n_2,
//000356:                     C, cx, cy + n_2, cs);
//000357: 
//000358:                 // c21 = p2 + p4 
//000359:                 matrix_add(n_2, n_2,
//000360:                     p2, 0, 0, n_2,
//000361:                     p4, 0, 0, n_2,
//000362:                     C, cx + n_2, cy, cs);
//000363: 
//000364:                 // c22 = p1 + p3 - p2 + p6 
//000365:                 matrix_add(n_2, n_2,
//000366:                     p1, 0, 0, n_2,
//000367:                     p3, 0, 0, n_2,
//000368:                     C, cx + n_2, cy + n_2, cs);
//000369:                 matrix_sub(n_2, n_2,
//000370:                     C, cx + n_2, cy + n_2, cs,
//000371:                     p2, 0, 0, n_2,
//000372:                     C, cx + n_2, cy + n_2, cs);
//000373:                 matrix_add(n_2, n_2,
//000374:                     C, cx + n_2, cy + n_2, cs,
//000375:                     p6, 0, 0, n_2,
//000376:                     C, cx + n_2, cy + n_2, cs);
//000377:             }
//000378:         }
//000379:     }
//000380: 
//000381:     private static void strassen_mult_parallel(
//000382:         CancellationToken cancellationToken, 
//000383:         // dimensions of A, B, and C submatrices 
//000384:         int n,
//000385:         // (ax,ay) = origin of A submatrix for multiplicand 
//000386:         int* A, int ax, int ay, int a_s,
//000387:         // (bx,by) = origin of B submatrix for multiplicand 
//000388:         int* B, int bx, int by, int bs,
//000389:         // (cx,cy) = origin of C submatrix for result 
//000390:         int* C, int cx, int cy, int cs,
//000391:         // Strassen's recursion limit for array dimensions 
//000392:         int s)
//000393:     {
//000394:         if (n <= s)
//000395:         {
//000396:             matrix_mult_serial(
//000397:                 cancellationToken,
//000398:                 n, n, n,
//000399:                 A, ax, ay, a_s,
//000400:                 B, bx, by, bs,
//000401:                 C, cx, cy, cs);
//000402:         }
//000403:         else
//000404:         {
//000405:             int n_2 = n >> 1;
//000406:             int areaSize = n_2 * n_2;
//000407:             int[] workArr = new int[areaSize * 17];
//000408:             fixed (int* work = workArr)
//000409:             {
//000410:                 int* a_cum = work;
//000411:                 int* b_cum = a_cum + areaSize;
//000412:                 int* c_cum = b_cum + areaSize;
//000413:                 int* d_cum = c_cum + areaSize;
//000414:                 int* e_cum = d_cum + areaSize;
//000415:                 int* f_cum = e_cum + areaSize;
//000416:                 int* g_cum = f_cum + areaSize;
//000417:                 int* h_cum = g_cum + areaSize;
//000418:                 int* i_cum = h_cum + areaSize;
//000419:                 int* j_cum = i_cum + areaSize;
//000420:                 int* p1 = j_cum + areaSize;
//000421:                 int* p2 = p1 + areaSize;
//000422:                 int* p3 = p2 + areaSize;
//000423:                 int* p4 = p3 + areaSize;
//000424:                 int* p5 = p4 + areaSize;
//000425:                 int* p6 = p5 + areaSize;
//000426:                 int* p7 = p6 + areaSize;
//000427: 
//000428:                 // p1 = (a11 + a22) * (b11 + b22) 
//000429:                 Task t_p1 = Task.Factory.StartNew(() =>
//000430:                 {
//000431:                     matrix_add(n_2, n_2,
//000432:                         A, ax, ay, a_s,
//000433:                         A, ax + n_2, ay + n_2, a_s,
//000434:                         a_cum, 0, 0, n_2);
//000435:                     matrix_add(n_2, n_2,
//000436:                         B, bx, by, bs,
//000437:                         B, bx + n_2, by + n_2, bs,
//000438:                         b_cum, 0, 0, n_2);
//000439:                     strassen_mult_parallel(
//000440:                         cancellationToken,
//000441:                         n_2,
//000442:                         a_cum, 0, 0, n_2,
//000443:                         b_cum, 0, 0, n_2,
//000444:                         p1, 0, 0, n_2,
//000445:                         s);
//000446:                 }, cancellationToken);
//000447: 
//000448:                 // p2 = (a21 + a22) * b11 
//000449:                 Task t_p2 = Task.Factory.StartNew(() =>
//000450:                 {
//000451:                     matrix_add(n_2, n_2,
//000452:                         A, ax + n_2, ay, a_s,
//000453:                         A, ax + n_2, ay + n_2, a_s,
//000454:                         c_cum, 0, 0, n_2);
//000455:                     strassen_mult_parallel(
//000456:                         cancellationToken,
//000457:                         n_2,
//000458:                         c_cum, 0, 0, n_2,
//000459:                         B, bx, by, bs,
//000460:                         p2, 0, 0, n_2,
//000461:                         s);
//000462:                 }, cancellationToken);
//000463: 
//000464:                 // p3 = a11 x (b12 - b22) 
//000465:                 Task t_p3 = Task.Factory.StartNew(() =>
//000466:                 {
//000467:                     matrix_sub(n_2, n_2,
//000468:                         B, bx, by + n_2, bs,
//000469:                         B, bx + n_2, by + n_2, bs,
//000470:                         d_cum, 0, 0, n_2);
//000471:                     strassen_mult_parallel(
//000472:                         cancellationToken,
//000473:                         n_2,
//000474:                         A, ax, ay, a_s,
//000475:                         d_cum, 0, 0, n_2,
//000476:                         p3, 0, 0, n_2,
//000477:                         s);
//000478:                 }, cancellationToken);
//000479: 
//000480:                 // p4 = a22 x (b21 - b11) 
//000481:                 Task t_p4 = Task.Factory.StartNew(() =>
//000482:                 {
//000483:                     matrix_sub(n_2, n_2,
//000484:                         B, bx + n_2, by, bs,
//000485:                         B, bx, by, bs,
//000486:                         e_cum, 0, 0, n_2);
//000487:                     strassen_mult_parallel(
//000488:                         cancellationToken,
//000489:                         n_2,
//000490:                         A, ax + n_2, ay + n_2, a_s,
//000491:                         e_cum, 0, 0, n_2,
//000492:                         p4, 0, 0, n_2,
//000493:                         s);
//000494:                 }, cancellationToken);
//000495: 
//000496:                 // p5 = (a11 + a12) x b22 
//000497:                 Task t_p5 = Task.Factory.StartNew(() =>
//000498:                 {
//000499:                     matrix_add(n_2, n_2,
//000500:                         A, ax, ay, a_s,
//000501:                         A, ax, ay + n_2, a_s,
//000502:                         f_cum, 0, 0, n_2);
//000503:                     strassen_mult_parallel(
//000504:                         cancellationToken,
//000505:                         n_2,
//000506:                         f_cum, 0, 0, n_2,
//000507:                         B, bx + n_2, by + n_2, bs,
//000508:                         p5, 0, 0, n_2,
//000509:                         s);
//000510:                 }, cancellationToken);
//000511: 
//000512:                 // p6 = (a21 - a11) x (b11 + b12) 
//000513:                 Task t_p6 = Task.Factory.StartNew(() =>
//000514:                 {
//000515:                     matrix_sub(n_2, n_2,
//000516:                         A, ax + n_2, ay, a_s,
//000517:                         A, ax, ay, a_s,
//000518:                         g_cum, 0, 0, n_2);
//000519:                     matrix_add(n_2, n_2,
//000520:                         B, bx, by, bs,
//000521:                         B, bx, by + n_2, bs,
//000522:                         h_cum, 0, 0, n_2);
//000523:                     strassen_mult_parallel(
//000524:                         cancellationToken,
//000525:                         n_2,
//000526:                         g_cum, 0, 0, n_2,
//000527:                         h_cum, 0, 0, n_2,
//000528:                         p6, 0, 0, n_2,
//000529:                         s);
//000530:                 }, cancellationToken);
//000531: 
//000532:                 // p7 = (a12 - a22) x (b21 + b22) 
//000533:                 Task t_p7 = Task.Factory.StartNew(() =>
//000534:                 {
//000535:                     matrix_sub(n_2, n_2,
//000536:                         A, ax, ay + n_2, a_s,
//000537:                         A, ax + n_2, ay + n_2, a_s,
//000538:                         i_cum, 0, 0, n_2);
//000539:                     matrix_add(n_2, n_2,
//000540:                         B, bx + n_2, by, bs,
//000541:                         B, bx + n_2, by + n_2, bs,
//000542:                         j_cum, 0, 0, n_2);
//000543:                     strassen_mult_parallel(
//000544:                         cancellationToken,
//000545:                         n_2,
//000546:                         i_cum, 0, 0, n_2,
//000547:                         j_cum, 0, 0, n_2,
//000548:                         p7, 0, 0, n_2,
//000549:                         s);
//000550:                 }, cancellationToken);
//000551: 
//000552:                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
//000553:                 catch (AggregateException ae)
//000554:                 {
//000555:                     ae.Flatten().Handle(e => e is TaskCanceledException);
//000556:                     cancellationToken.ThrowIfCancellationRequested();
//000557:                 }
//000558: 
//000559:                 // c11 = p1 + p4 - p5 + p7 
//000560:                 Task t_c11 = Task.Factory.StartNew(() =>
//000561:                 {
//000562:                     matrix_add(n_2, n_2,
//000563:                         p1, 0, 0, n_2,
//000564:                         p4, 0, 0, n_2,
//000565:                         C, cx, cy, cs);
//000566:                     matrix_sub(n_2, n_2,
//000567:                         C, cx, cy, cs,
//000568:                         p5, 0, 0, n_2,
//000569:                         C, cx, cy, cs);
//000570:                     matrix_add(n_2, n_2,
//000571:                         C, cx, cy, cs,
//000572:                         p7, 0, 0, n_2,
//000573:                         C, cx, cy, cs);
//000574:                 });
//000575: 
//000576:                 // c12 = p3 + p5 
//000577:                 Task t_c12 = Task.Factory.StartNew(() =>
//000578:                 {
//000579:                     matrix_add(n_2, n_2,
//000580:                         p3, 0, 0, n_2,
//000581:                         p5, 0, 0, n_2,
//000582:                         C, cx, cy + n_2, cs);
//000583:                 });
//000584: 
//000585:                 // c21 = p2 + p4 
//000586:                 Task t_c21 = Task.Factory.StartNew(() =>
//000587:                 {
//000588:                     matrix_add(n_2, n_2,
//000589:                         p2, 0, 0, n_2,
//000590:                         p4, 0, 0, n_2,
//000591:                         C, cx + n_2, cy, cs);
//000592:                 });
//000593: 
//000594:                 // c22 = p1 + p3 - p2 + p6 
//000595:                 Task t_c22 = Task.Factory.StartNew(() =>
//000596:                 {
//000597:                     matrix_add(n_2, n_2,
//000598:                         p1, 0, 0, n_2,
//000599:                         p3, 0, 0, n_2,
//000600:                         C, cx + n_2, cy + n_2, cs);
//000601:                     matrix_sub(n_2, n_2,
//000602:                         C, cx + n_2, cy + n_2, cs,
//000603:                         p2, 0, 0, n_2,
//000604:                         C, cx + n_2, cy + n_2, cs);
//000605:                     matrix_add(n_2, n_2,
//000606:                         C, cx + n_2, cy + n_2, cs,
//000607:                         p6, 0, 0, n_2,
//000608:                         C, cx + n_2, cy + n_2, cs);
//000609:                 });
//000610: 
//000611:                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
//000612:             }
//000613:         }
//000614:     }
//000615: }
    IL_002e:  ldloc.2
    IL_002f:  brtrue.s   IL_0035

//000057:         for (int i = 0; i < _data.Length; i++) if (_data[i] != other._data[i]) return false;
    IL_0031:  ldc.i4.0
    IL_0032:  stloc.1
    IL_0033:  br.s       IL_004c

    IL_0035:  ldloc.0
    IL_0036:  ldc.i4.1
    IL_0037:  add
    IL_0038:  stloc.0
    IL_0039:  ldloc.0
    IL_003a:  ldarg.0
    IL_003b:  ldfld      int32[] Matrix::_data
    IL_0040:  ldlen
    IL_0041:  conv.i4
    IL_0042:  clt
    IL_0044:  stloc.2
//000058:         return true;
//000059:     }
//000060: 
//000061:     public static void Multiply(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
//000062:     {
//000063:         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
//000064:         int N = src1._size;
//000065:         matrix_mult_serial(
//000066:             cancellationToken,
//000067:             N, N, N,
//000068:             src1._dataPtr, 0, 0, N,
//000069:             src2._dataPtr, 0, 0, N,
//000070:             dst._dataPtr, 0, 0, N);
//000071:     }
//000072: 
//000073:     public static void MultiplyParallel(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
//000074:     {
//000075:         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
//000076:         int N = src1._size;
//000077:         matrix_mult_parallel(
//000078:             cancellationToken,
//000079:             N, N, N,
//000080:             src1._dataPtr, 0, 0, N,
//000081:             src2._dataPtr, 0, 0, N,
//000082:             dst._dataPtr, 0, 0, N);
//000083:     }
//000084: 
//000085:     public static void MultiplyStrassens(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
//000086:     {
//000087:         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
//000088:         int N = src1._size;
//000089:         strassen_mult_serial(
//000090:             cancellationToken,
//000091:             N,
//000092:             src1._dataPtr, 0, 0, N,
//000093:             src2._dataPtr, 0, 0, N,
//000094:             dst._dataPtr, 0, 0, N,
//000095:             64);
//000096:     }
//000097: 
//000098:     public static void MultiplyStrassensParallel(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
//000099:     {
//000100:         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
//000101:         int N = src1._size;
//000102:         strassen_mult_parallel(
//000103:             cancellationToken,
//000104:             N,
//000105:             src1._dataPtr, 0, 0, N,
//000106:             src2._dataPtr, 0, 0, N,
//000107:             dst._dataPtr, 0, 0, N,
//000108:             64);
//000109:     }
//000110: 
//000111:     private static void matrix_add( 
//000112:         // dimensions of A, B, and C submatrices 
//000113:         int n, int m,
//000114:         // (ax,ay) = origin of A submatrix for multiplicand 
//000115:         int* A, int ax, int ay, int a_s,
//000116:         // (bx,by) = origin of B submatrix for multiplicand 
//000117:         int* B, int bx, int by, int bs,
//000118:         // (cx,cy) = origin of C submatrix for result 
//000119:         int* C, int cx, int cy, int cs)
//000120:     {
//000121:         for (int i = 0; i < n; i += 1)
//000122:             for (int j = 0; j < m; j += 1)
//000123:                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] + B[(i + bx) * bs + j + by];
//000124:     }
//000125: 
//000126:     private static void matrix_sub(
//000127:         // dimensions of A, B, and C submatrices 
//000128:         int n, int m,
//000129:         // (ax,ay) = origin of A submatrix for multiplicand 
//000130:         int* A, int ax, int ay, int a_s,
//000131:         // (bx,by) = origin of B submatrix for multiplicand 
//000132:         int* B, int bx, int by, int bs,
//000133:         // (cx,cy) = origin of C submatrix for result 
//000134:         int* C, int cx, int cy, int cs)
//000135:     {
//000136:         for (int i = 0; i < n; i += 1)
//000137:         {
//000138:             for (int j = 0; j < m; j += 1)
//000139:             {
//000140:                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] - B[(i + bx) * bs + j + by];
//000141:             }
//000142:         }
//000143:     }
//000144: 
//000145:     private static void matrix_mult_serial(
//000146:         CancellationToken cancellationToken, 
//000147:         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
//000148:         int l, int m, int n,
//000149:         // (ax,ay) = origin of A submatrix for multiplicand 
//000150:         int* A, int ax, int ay, int a_s,
//000151:         // (bx,by) = origin of B submatrix for multiplicand 
//000152:         int* B, int bx, int by, int bs,
//000153:         // (cx,cy) = origin of C submatrix for result 
//000154:         int* C, int cx, int cy, int cs)
//000155:     {
//000156:         for (int i = 0; i < l; ++i)
//000157:         {
//000158:             cancellationToken.ThrowIfCancellationRequested();
//000159:             for (int j = 0; j < n; j++)
//000160:             {
//000161:                 int temp = 0;
//000162:                 for (int k = 0; k < m; k++)
//000163:                 {
//000164:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
//000165:                 }
//000166:                 C[(i + cx) * cs + j + cy] = temp;
//000167:             }
//000168:         }
//000169:     }
//000170: 
//000171:     private static void matrix_mult_parallel(
//000172:         CancellationToken cancellationToken, 
//000173:         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
//000174:         int l, int m, int n,
//000175:         // (ax,ay) = origin of A submatrix for multiplicand 
//000176:         int* A, int ax, int ay, int a_s,
//000177:         // (bx,by) = origin of B submatrix for multiplicand 
//000178:         int* B, int bx, int by, int bs,
//000179:         // (cx,cy) = origin of C submatrix for result 
//000180:         int* C, int cx, int cy, int cs)
//000181:     {
//000182:         ParallelOptions options = new ParallelOptions { CancellationToken = cancellationToken };
//000183:         Parallel.For(0, l, options, i =>
//000184:         {
//000185:             for (int j = 0; j < n; j++)
//000186:             {
//000187:                 int temp = 0;
//000188:                 for (int k = 0; k < m; k++)
//000189:                 {
//000190:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
//000191:                 }
//000192:                 C[(i + cx) * cs + j + cy] = temp;
//000193:             }
//000194:         });
//000195:     }
//000196: 
//000197:     private static void strassen_mult_serial(
//000198:         CancellationToken cancellationToken, 
//000199:         // dimensions of A, B, and C submatrices 
//000200:         int n,
//000201:         // (ax,ay) = origin of A submatrix for multiplicand 
//000202:         int* A, int ax, int ay, int a_s,
//000203:         // (bx,by) = origin of B submatrix for multiplicand 
//000204:         int* B, int bx, int by, int bs,
//000205:         // (cx,cy) = origin of C submatrix for result 
//000206:         int* C, int cx, int cy, int cs,
//000207:         // Strassen's recursion limit for array dimensions 
//000208:         int s)
//000209:     {
//000210:         if (n <= s)
//000211:         {
//000212:             matrix_mult_serial(
//000213:                 cancellationToken,
//000214:                 n, n, n,
//000215:                 A, ax, ay, a_s,
//000216:                 B, bx, by, bs,
//000217:                 C, cx, cy, cs);
//000218:         }
//000219:         else
//000220:         {
//000221:             int n_2 = n >> 1;
//000222:             int[] workArr = new int[n_2 * n_2 * 9];
//000223:             fixed (int* work = workArr)
//000224:             {
//000225:                 int* a_cum = work;
//000226:                 int* b_cum = a_cum + n_2 * n_2;
//000227:                 int* p1 = b_cum + n_2 * n_2;
//000228:                 int* p2 = p1 + n_2 * n_2;
//000229:                 int* p3 = p2 + n_2 * n_2;
//000230:                 int* p4 = p3 + n_2 * n_2;
//000231:                 int* p5 = p4 + n_2 * n_2;
//000232:                 int* p6 = p5 + n_2 * n_2;
//000233:                 int* p7 = p6 + n_2 * n_2;
//000234: 
//000235:                 // p1 = (a11 + a22) * (b11 + b22) 
//000236:                 matrix_add(n_2, n_2,
//000237:                     A, ax, ay, a_s,
//000238:                     A, ax + n_2, ay + n_2, a_s,
//000239:                     a_cum, 0, 0, n_2);
//000240:                 matrix_add(n_2, n_2,
//000241:                     B, bx, by, bs,
//000242:                     B, bx + n_2, by + n_2, bs,
//000243:                     b_cum, 0, 0, n_2);
//000244:                 strassen_mult_serial(
//000245:                     cancellationToken,
//000246:                     n_2,
//000247:                     a_cum, 0, 0, n_2,
//000248:                     b_cum, 0, 0, n_2,
//000249:                     p1, 0, 0, n_2,
//000250:                     s);
//000251: 
//000252:                 // p2 = (a21 + a22) * b11 
//000253:                 matrix_add(n_2, n_2,
//000254:                     A, ax + n_2, ay, a_s,
//000255:                     A, ax + n_2, ay + n_2, a_s,
//000256:                     a_cum, 0, 0, n_2);
//000257:                 strassen_mult_serial(
//000258:                     cancellationToken,
//000259:                     n_2,
//000260:                     a_cum, 0, 0, n_2,
//000261:                     B, bx, by, bs,
//000262:                     p2, 0, 0, n_2,
//000263:                     s);
//000264: 
//000265:                 // p3 = a11 x (b12 - b22) 
//000266:                 matrix_sub(n_2, n_2,
//000267:                     B, bx, by + n_2, bs,
//000268:                     B, bx + n_2, by + n_2, bs,
//000269:                     b_cum, 0, 0, n_2);
//000270:                 strassen_mult_serial(
//000271:                     cancellationToken,
//000272:                     n_2,
//000273:                     A, ax, ay, a_s,
//000274:                     b_cum, 0, 0, n_2,
//000275:                     p3, 0, 0, n_2,
//000276:                     s);
//000277: 
//000278:                 // p4 = a22 x (b21 - b11) 
//000279:                 matrix_sub(n_2, n_2,
//000280:                     B, bx + n_2, by, bs,
//000281:                     B, bx, by, bs,
//000282:                     b_cum, 0, 0, n_2);
//000283:                 strassen_mult_serial(
//000284:                     cancellationToken,
//000285:                     n_2,
//000286:                     A, ax + n_2, ay + n_2, a_s,
//000287:                     b_cum, 0, 0, n_2,
//000288:                     p4, 0, 0, n_2,
//000289:                     s);
//000290: 
//000291:                 // p5 = (a11 + a12) x b22 
//000292:                 matrix_add(n_2, n_2,
//000293:                     A, ax, ay, a_s,
//000294:                     A, ax, ay + n_2, a_s,
//000295:                     a_cum, 0, 0, n_2);
//000296:                 strassen_mult_serial(
//000297:                     cancellationToken,
//000298:                     n_2,
//000299:                     a_cum, 0, 0, n_2,
//000300:                     B, bx + n_2, by + n_2, bs,
//000301:                     p5, 0, 0, n_2,
//000302:                     s);
//000303: 
//000304:                 // p6 = (a21 - a11) x (b11 + b12) 
//000305:                 matrix_sub(n_2, n_2,
//000306:                     A, ax + n_2, ay, a_s,
//000307:                     A, ax, ay, a_s,
//000308:                     a_cum, 0, 0, n_2);
//000309:                 matrix_add(n_2, n_2,
//000310:                     B, bx, by, bs,
//000311:                     B, bx, by + n_2, bs,
//000312:                     b_cum, 0, 0, n_2);
//000313:                 strassen_mult_serial(
//000314:                     cancellationToken,
//000315:                     n_2,
//000316:                     a_cum, 0, 0, n_2,
//000317:                     b_cum, 0, 0, n_2,
//000318:                     p6, 0, 0, n_2,
//000319:                     s);
//000320: 
//000321:                 // p7 = (a12 - a22) x (b21 + b22) 
//000322:                 matrix_sub(n_2, n_2,
//000323:                     A, ax, ay + n_2, a_s,
//000324:                     A, ax + n_2, ay + n_2, a_s,
//000325:                     a_cum, 0, 0, n_2);
//000326:                 matrix_add(n_2, n_2,
//000327:                     B, bx + n_2, by, bs,
//000328:                     B, bx + n_2, by + n_2, bs,
//000329:                     b_cum, 0, 0, n_2);
//000330:                 strassen_mult_serial(
//000331:                     cancellationToken,
//000332:                     n_2,
//000333:                     a_cum, 0, 0, n_2,
//000334:                     b_cum, 0, 0, n_2,
//000335:                     p7, 0, 0, n_2,
//000336:                     s);
//000337: 
//000338:                 // c11 = p1 + p4 - p5 + p7 
//000339:                 matrix_add(n_2, n_2,
//000340:                     p1, 0, 0, n_2,
//000341:                     p4, 0, 0, n_2,
//000342:                     C, cx, cy, cs);
//000343:                 matrix_sub(n_2, n_2,
//000344:                     C, cx, cy, cs,
//000345:                     p5, 0, 0, n_2,
//000346:                     C, cx, cy, cs);
//000347:                 matrix_add(n_2, n_2,
//000348:                     C, cx, cy, cs,
//000349:                     p7, 0, 0, n_2,
//000350:                     C, cx, cy, cs);
//000351: 
//000352:                 // c12 = p3 + p5 
//000353:                 matrix_add(n_2, n_2,
//000354:                     p3, 0, 0, n_2,
//000355:                     p5, 0, 0, n_2,
//000356:                     C, cx, cy + n_2, cs);
//000357: 
//000358:                 // c21 = p2 + p4 
//000359:                 matrix_add(n_2, n_2,
//000360:                     p2, 0, 0, n_2,
//000361:                     p4, 0, 0, n_2,
//000362:                     C, cx + n_2, cy, cs);
//000363: 
//000364:                 // c22 = p1 + p3 - p2 + p6 
//000365:                 matrix_add(n_2, n_2,
//000366:                     p1, 0, 0, n_2,
//000367:                     p3, 0, 0, n_2,
//000368:                     C, cx + n_2, cy + n_2, cs);
//000369:                 matrix_sub(n_2, n_2,
//000370:                     C, cx + n_2, cy + n_2, cs,
//000371:                     p2, 0, 0, n_2,
//000372:                     C, cx + n_2, cy + n_2, cs);
//000373:                 matrix_add(n_2, n_2,
//000374:                     C, cx + n_2, cy + n_2, cs,
//000375:                     p6, 0, 0, n_2,
//000376:                     C, cx + n_2, cy + n_2, cs);
//000377:             }
//000378:         }
//000379:     }
//000380: 
//000381:     private static void strassen_mult_parallel(
//000382:         CancellationToken cancellationToken, 
//000383:         // dimensions of A, B, and C submatrices 
//000384:         int n,
//000385:         // (ax,ay) = origin of A submatrix for multiplicand 
//000386:         int* A, int ax, int ay, int a_s,
//000387:         // (bx,by) = origin of B submatrix for multiplicand 
//000388:         int* B, int bx, int by, int bs,
//000389:         // (cx,cy) = origin of C submatrix for result 
//000390:         int* C, int cx, int cy, int cs,
//000391:         // Strassen's recursion limit for array dimensions 
//000392:         int s)
//000393:     {
//000394:         if (n <= s)
//000395:         {
//000396:             matrix_mult_serial(
//000397:                 cancellationToken,
//000398:                 n, n, n,
//000399:                 A, ax, ay, a_s,
//000400:                 B, bx, by, bs,
//000401:                 C, cx, cy, cs);
//000402:         }
//000403:         else
//000404:         {
//000405:             int n_2 = n >> 1;
//000406:             int areaSize = n_2 * n_2;
//000407:             int[] workArr = new int[areaSize * 17];
//000408:             fixed (int* work = workArr)
//000409:             {
//000410:                 int* a_cum = work;
//000411:                 int* b_cum = a_cum + areaSize;
//000412:                 int* c_cum = b_cum + areaSize;
//000413:                 int* d_cum = c_cum + areaSize;
//000414:                 int* e_cum = d_cum + areaSize;
//000415:                 int* f_cum = e_cum + areaSize;
//000416:                 int* g_cum = f_cum + areaSize;
//000417:                 int* h_cum = g_cum + areaSize;
//000418:                 int* i_cum = h_cum + areaSize;
//000419:                 int* j_cum = i_cum + areaSize;
//000420:                 int* p1 = j_cum + areaSize;
//000421:                 int* p2 = p1 + areaSize;
//000422:                 int* p3 = p2 + areaSize;
//000423:                 int* p4 = p3 + areaSize;
//000424:                 int* p5 = p4 + areaSize;
//000425:                 int* p6 = p5 + areaSize;
//000426:                 int* p7 = p6 + areaSize;
//000427: 
//000428:                 // p1 = (a11 + a22) * (b11 + b22) 
//000429:                 Task t_p1 = Task.Factory.StartNew(() =>
//000430:                 {
//000431:                     matrix_add(n_2, n_2,
//000432:                         A, ax, ay, a_s,
//000433:                         A, ax + n_2, ay + n_2, a_s,
//000434:                         a_cum, 0, 0, n_2);
//000435:                     matrix_add(n_2, n_2,
//000436:                         B, bx, by, bs,
//000437:                         B, bx + n_2, by + n_2, bs,
//000438:                         b_cum, 0, 0, n_2);
//000439:                     strassen_mult_parallel(
//000440:                         cancellationToken,
//000441:                         n_2,
//000442:                         a_cum, 0, 0, n_2,
//000443:                         b_cum, 0, 0, n_2,
//000444:                         p1, 0, 0, n_2,
//000445:                         s);
//000446:                 }, cancellationToken);
//000447: 
//000448:                 // p2 = (a21 + a22) * b11 
//000449:                 Task t_p2 = Task.Factory.StartNew(() =>
//000450:                 {
//000451:                     matrix_add(n_2, n_2,
//000452:                         A, ax + n_2, ay, a_s,
//000453:                         A, ax + n_2, ay + n_2, a_s,
//000454:                         c_cum, 0, 0, n_2);
//000455:                     strassen_mult_parallel(
//000456:                         cancellationToken,
//000457:                         n_2,
//000458:                         c_cum, 0, 0, n_2,
//000459:                         B, bx, by, bs,
//000460:                         p2, 0, 0, n_2,
//000461:                         s);
//000462:                 }, cancellationToken);
//000463: 
//000464:                 // p3 = a11 x (b12 - b22) 
//000465:                 Task t_p3 = Task.Factory.StartNew(() =>
//000466:                 {
//000467:                     matrix_sub(n_2, n_2,
//000468:                         B, bx, by + n_2, bs,
//000469:                         B, bx + n_2, by + n_2, bs,
//000470:                         d_cum, 0, 0, n_2);
//000471:                     strassen_mult_parallel(
//000472:                         cancellationToken,
//000473:                         n_2,
//000474:                         A, ax, ay, a_s,
//000475:                         d_cum, 0, 0, n_2,
//000476:                         p3, 0, 0, n_2,
//000477:                         s);
//000478:                 }, cancellationToken);
//000479: 
//000480:                 // p4 = a22 x (b21 - b11) 
//000481:                 Task t_p4 = Task.Factory.StartNew(() =>
//000482:                 {
//000483:                     matrix_sub(n_2, n_2,
//000484:                         B, bx + n_2, by, bs,
//000485:                         B, bx, by, bs,
//000486:                         e_cum, 0, 0, n_2);
//000487:                     strassen_mult_parallel(
//000488:                         cancellationToken,
//000489:                         n_2,
//000490:                         A, ax + n_2, ay + n_2, a_s,
//000491:                         e_cum, 0, 0, n_2,
//000492:                         p4, 0, 0, n_2,
//000493:                         s);
//000494:                 }, cancellationToken);
//000495: 
//000496:                 // p5 = (a11 + a12) x b22 
//000497:                 Task t_p5 = Task.Factory.StartNew(() =>
//000498:                 {
//000499:                     matrix_add(n_2, n_2,
//000500:                         A, ax, ay, a_s,
//000501:                         A, ax, ay + n_2, a_s,
//000502:                         f_cum, 0, 0, n_2);
//000503:                     strassen_mult_parallel(
//000504:                         cancellationToken,
//000505:                         n_2,
//000506:                         f_cum, 0, 0, n_2,
//000507:                         B, bx + n_2, by + n_2, bs,
//000508:                         p5, 0, 0, n_2,
//000509:                         s);
//000510:                 }, cancellationToken);
//000511: 
//000512:                 // p6 = (a21 - a11) x (b11 + b12) 
//000513:                 Task t_p6 = Task.Factory.StartNew(() =>
//000514:                 {
//000515:                     matrix_sub(n_2, n_2,
//000516:                         A, ax + n_2, ay, a_s,
//000517:                         A, ax, ay, a_s,
//000518:                         g_cum, 0, 0, n_2);
//000519:                     matrix_add(n_2, n_2,
//000520:                         B, bx, by, bs,
//000521:                         B, bx, by + n_2, bs,
//000522:                         h_cum, 0, 0, n_2);
//000523:                     strassen_mult_parallel(
//000524:                         cancellationToken,
//000525:                         n_2,
//000526:                         g_cum, 0, 0, n_2,
//000527:                         h_cum, 0, 0, n_2,
//000528:                         p6, 0, 0, n_2,
//000529:                         s);
//000530:                 }, cancellationToken);
//000531: 
//000532:                 // p7 = (a12 - a22) x (b21 + b22) 
//000533:                 Task t_p7 = Task.Factory.StartNew(() =>
//000534:                 {
//000535:                     matrix_sub(n_2, n_2,
//000536:                         A, ax, ay + n_2, a_s,
//000537:                         A, ax + n_2, ay + n_2, a_s,
//000538:                         i_cum, 0, 0, n_2);
//000539:                     matrix_add(n_2, n_2,
//000540:                         B, bx + n_2, by, bs,
//000541:                         B, bx + n_2, by + n_2, bs,
//000542:                         j_cum, 0, 0, n_2);
//000543:                     strassen_mult_parallel(
//000544:                         cancellationToken,
//000545:                         n_2,
//000546:                         i_cum, 0, 0, n_2,
//000547:                         j_cum, 0, 0, n_2,
//000548:                         p7, 0, 0, n_2,
//000549:                         s);
//000550:                 }, cancellationToken);
//000551: 
//000552:                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
//000553:                 catch (AggregateException ae)
//000554:                 {
//000555:                     ae.Flatten().Handle(e => e is TaskCanceledException);
//000556:                     cancellationToken.ThrowIfCancellationRequested();
//000557:                 }
//000558: 
//000559:                 // c11 = p1 + p4 - p5 + p7 
//000560:                 Task t_c11 = Task.Factory.StartNew(() =>
//000561:                 {
//000562:                     matrix_add(n_2, n_2,
//000563:                         p1, 0, 0, n_2,
//000564:                         p4, 0, 0, n_2,
//000565:                         C, cx, cy, cs);
//000566:                     matrix_sub(n_2, n_2,
//000567:                         C, cx, cy, cs,
//000568:                         p5, 0, 0, n_2,
//000569:                         C, cx, cy, cs);
//000570:                     matrix_add(n_2, n_2,
//000571:                         C, cx, cy, cs,
//000572:                         p7, 0, 0, n_2,
//000573:                         C, cx, cy, cs);
//000574:                 });
//000575: 
//000576:                 // c12 = p3 + p5 
//000577:                 Task t_c12 = Task.Factory.StartNew(() =>
//000578:                 {
//000579:                     matrix_add(n_2, n_2,
//000580:                         p3, 0, 0, n_2,
//000581:                         p5, 0, 0, n_2,
//000582:                         C, cx, cy + n_2, cs);
//000583:                 });
//000584: 
//000585:                 // c21 = p2 + p4 
//000586:                 Task t_c21 = Task.Factory.StartNew(() =>
//000587:                 {
//000588:                     matrix_add(n_2, n_2,
//000589:                         p2, 0, 0, n_2,
//000590:                         p4, 0, 0, n_2,
//000591:                         C, cx + n_2, cy, cs);
//000592:                 });
//000593: 
//000594:                 // c22 = p1 + p3 - p2 + p6 
//000595:                 Task t_c22 = Task.Factory.StartNew(() =>
//000596:                 {
//000597:                     matrix_add(n_2, n_2,
//000598:                         p1, 0, 0, n_2,
//000599:                         p3, 0, 0, n_2,
//000600:                         C, cx + n_2, cy + n_2, cs);
//000601:                     matrix_sub(n_2, n_2,
//000602:                         C, cx + n_2, cy + n_2, cs,
//000603:                         p2, 0, 0, n_2,
//000604:                         C, cx + n_2, cy + n_2, cs);
//000605:                     matrix_add(n_2, n_2,
//000606:                         C, cx + n_2, cy + n_2, cs,
//000607:                         p6, 0, 0, n_2,
//000608:                         C, cx + n_2, cy + n_2, cs);
//000609:                 });
//000610: 
//000611:                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
//000612:             }
//000613:         }
//000614:     }
//000615: }
    IL_0045:  ldloc.2
    IL_0046:  brtrue.s   IL_001b

//000058:         return true;
    IL_0048:  ldc.i4.1
    IL_0049:  stloc.1
    IL_004a:  br.s       IL_004c

//000059:     }
    IL_004c:  ldloc.1
    IL_004d:  ret
  } // end of method Matrix::Equals

  .method public hidebysig static void  Multiply(valuetype [mscorlib]System.Threading.CancellationToken cancellationToken,
                                                 class Matrix src1,
                                                 class Matrix src2,
                                                 class Matrix dst) cil managed
  {
    // Code size       92 (0x5c)
    .maxstack  16
    .locals init ([0] int32 N,
             [1] bool CS$4$0000)
//000060: 
//000061:     public static void Multiply(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
//000062:     {
    IL_0000:  nop
//000063:         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
    IL_0001:  ldarg.1
    IL_0002:  ldfld      int32 Matrix::_size
    IL_0007:  ldarg.2
    IL_0008:  ldfld      int32 Matrix::_size
    IL_000d:  bne.un.s   IL_001f

    IL_000f:  ldarg.1
    IL_0010:  ldfld      int32 Matrix::_size
    IL_0015:  ldarg.3
    IL_0016:  ldfld      int32 Matrix::_size
    IL_001b:  ceq
    IL_001d:  br.s       IL_0020

    IL_001f:  ldc.i4.0
    IL_0020:  stloc.1
//000064:         int N = src1._size;
//000065:         matrix_mult_serial(
//000066:             cancellationToken,
//000067:             N, N, N,
//000068:             src1._dataPtr, 0, 0, N,
//000069:             src2._dataPtr, 0, 0, N,
//000070:             dst._dataPtr, 0, 0, N);
//000071:     }
//000072: 
//000073:     public static void MultiplyParallel(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
//000074:     {
//000075:         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
//000076:         int N = src1._size;
//000077:         matrix_mult_parallel(
//000078:             cancellationToken,
//000079:             N, N, N,
//000080:             src1._dataPtr, 0, 0, N,
//000081:             src2._dataPtr, 0, 0, N,
//000082:             dst._dataPtr, 0, 0, N);
//000083:     }
//000084: 
//000085:     public static void MultiplyStrassens(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
//000086:     {
//000087:         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
//000088:         int N = src1._size;
//000089:         strassen_mult_serial(
//000090:             cancellationToken,
//000091:             N,
//000092:             src1._dataPtr, 0, 0, N,
//000093:             src2._dataPtr, 0, 0, N,
//000094:             dst._dataPtr, 0, 0, N,
//000095:             64);
//000096:     }
//000097: 
//000098:     public static void MultiplyStrassensParallel(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
//000099:     {
//000100:         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
//000101:         int N = src1._size;
//000102:         strassen_mult_parallel(
//000103:             cancellationToken,
//000104:             N,
//000105:             src1._dataPtr, 0, 0, N,
//000106:             src2._dataPtr, 0, 0, N,
//000107:             dst._dataPtr, 0, 0, N,
//000108:             64);
//000109:     }
//000110: 
//000111:     private static void matrix_add( 
//000112:         // dimensions of A, B, and C submatrices 
//000113:         int n, int m,
//000114:         // (ax,ay) = origin of A submatrix for multiplicand 
//000115:         int* A, int ax, int ay, int a_s,
//000116:         // (bx,by) = origin of B submatrix for multiplicand 
//000117:         int* B, int bx, int by, int bs,
//000118:         // (cx,cy) = origin of C submatrix for result 
//000119:         int* C, int cx, int cy, int cs)
//000120:     {
//000121:         for (int i = 0; i < n; i += 1)
//000122:             for (int j = 0; j < m; j += 1)
//000123:                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] + B[(i + bx) * bs + j + by];
//000124:     }
//000125: 
//000126:     private static void matrix_sub(
//000127:         // dimensions of A, B, and C submatrices 
//000128:         int n, int m,
//000129:         // (ax,ay) = origin of A submatrix for multiplicand 
//000130:         int* A, int ax, int ay, int a_s,
//000131:         // (bx,by) = origin of B submatrix for multiplicand 
//000132:         int* B, int bx, int by, int bs,
//000133:         // (cx,cy) = origin of C submatrix for result 
//000134:         int* C, int cx, int cy, int cs)
//000135:     {
//000136:         for (int i = 0; i < n; i += 1)
//000137:         {
//000138:             for (int j = 0; j < m; j += 1)
//000139:             {
//000140:                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] - B[(i + bx) * bs + j + by];
//000141:             }
//000142:         }
//000143:     }
//000144: 
//000145:     private static void matrix_mult_serial(
//000146:         CancellationToken cancellationToken, 
//000147:         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
//000148:         int l, int m, int n,
//000149:         // (ax,ay) = origin of A submatrix for multiplicand 
//000150:         int* A, int ax, int ay, int a_s,
//000151:         // (bx,by) = origin of B submatrix for multiplicand 
//000152:         int* B, int bx, int by, int bs,
//000153:         // (cx,cy) = origin of C submatrix for result 
//000154:         int* C, int cx, int cy, int cs)
//000155:     {
//000156:         for (int i = 0; i < l; ++i)
//000157:         {
//000158:             cancellationToken.ThrowIfCancellationRequested();
//000159:             for (int j = 0; j < n; j++)
//000160:             {
//000161:                 int temp = 0;
//000162:                 for (int k = 0; k < m; k++)
//000163:                 {
//000164:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
//000165:                 }
//000166:                 C[(i + cx) * cs + j + cy] = temp;
//000167:             }
//000168:         }
//000169:     }
//000170: 
//000171:     private static void matrix_mult_parallel(
//000172:         CancellationToken cancellationToken, 
//000173:         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
//000174:         int l, int m, int n,
//000175:         // (ax,ay) = origin of A submatrix for multiplicand 
//000176:         int* A, int ax, int ay, int a_s,
//000177:         // (bx,by) = origin of B submatrix for multiplicand 
//000178:         int* B, int bx, int by, int bs,
//000179:         // (cx,cy) = origin of C submatrix for result 
//000180:         int* C, int cx, int cy, int cs)
//000181:     {
//000182:         ParallelOptions options = new ParallelOptions { CancellationToken = cancellationToken };
//000183:         Parallel.For(0, l, options, i =>
//000184:         {
//000185:             for (int j = 0; j < n; j++)
//000186:             {
//000187:                 int temp = 0;
//000188:                 for (int k = 0; k < m; k++)
//000189:                 {
//000190:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
//000191:                 }
//000192:                 C[(i + cx) * cs + j + cy] = temp;
//000193:             }
//000194:         });
//000195:     }
//000196: 
//000197:     private static void strassen_mult_serial(
//000198:         CancellationToken cancellationToken, 
//000199:         // dimensions of A, B, and C submatrices 
//000200:         int n,
//000201:         // (ax,ay) = origin of A submatrix for multiplicand 
//000202:         int* A, int ax, int ay, int a_s,
//000203:         // (bx,by) = origin of B submatrix for multiplicand 
//000204:         int* B, int bx, int by, int bs,
//000205:         // (cx,cy) = origin of C submatrix for result 
//000206:         int* C, int cx, int cy, int cs,
//000207:         // Strassen's recursion limit for array dimensions 
//000208:         int s)
//000209:     {
//000210:         if (n <= s)
//000211:         {
//000212:             matrix_mult_serial(
//000213:                 cancellationToken,
//000214:                 n, n, n,
//000215:                 A, ax, ay, a_s,
//000216:                 B, bx, by, bs,
//000217:                 C, cx, cy, cs);
//000218:         }
//000219:         else
//000220:         {
//000221:             int n_2 = n >> 1;
//000222:             int[] workArr = new int[n_2 * n_2 * 9];
//000223:             fixed (int* work = workArr)
//000224:             {
//000225:                 int* a_cum = work;
//000226:                 int* b_cum = a_cum + n_2 * n_2;
//000227:                 int* p1 = b_cum + n_2 * n_2;
//000228:                 int* p2 = p1 + n_2 * n_2;
//000229:                 int* p3 = p2 + n_2 * n_2;
//000230:                 int* p4 = p3 + n_2 * n_2;
//000231:                 int* p5 = p4 + n_2 * n_2;
//000232:                 int* p6 = p5 + n_2 * n_2;
//000233:                 int* p7 = p6 + n_2 * n_2;
//000234: 
//000235:                 // p1 = (a11 + a22) * (b11 + b22) 
//000236:                 matrix_add(n_2, n_2,
//000237:                     A, ax, ay, a_s,
//000238:                     A, ax + n_2, ay + n_2, a_s,
//000239:                     a_cum, 0, 0, n_2);
//000240:                 matrix_add(n_2, n_2,
//000241:                     B, bx, by, bs,
//000242:                     B, bx + n_2, by + n_2, bs,
//000243:                     b_cum, 0, 0, n_2);
//000244:                 strassen_mult_serial(
//000245:                     cancellationToken,
//000246:                     n_2,
//000247:                     a_cum, 0, 0, n_2,
//000248:                     b_cum, 0, 0, n_2,
//000249:                     p1, 0, 0, n_2,
//000250:                     s);
//000251: 
//000252:                 // p2 = (a21 + a22) * b11 
//000253:                 matrix_add(n_2, n_2,
//000254:                     A, ax + n_2, ay, a_s,
//000255:                     A, ax + n_2, ay + n_2, a_s,
//000256:                     a_cum, 0, 0, n_2);
//000257:                 strassen_mult_serial(
//000258:                     cancellationToken,
//000259:                     n_2,
//000260:                     a_cum, 0, 0, n_2,
//000261:                     B, bx, by, bs,
//000262:                     p2, 0, 0, n_2,
//000263:                     s);
//000264: 
//000265:                 // p3 = a11 x (b12 - b22) 
//000266:                 matrix_sub(n_2, n_2,
//000267:                     B, bx, by + n_2, bs,
//000268:                     B, bx + n_2, by + n_2, bs,
//000269:                     b_cum, 0, 0, n_2);
//000270:                 strassen_mult_serial(
//000271:                     cancellationToken,
//000272:                     n_2,
//000273:                     A, ax, ay, a_s,
//000274:                     b_cum, 0, 0, n_2,
//000275:                     p3, 0, 0, n_2,
//000276:                     s);
//000277: 
//000278:                 // p4 = a22 x (b21 - b11) 
//000279:                 matrix_sub(n_2, n_2,
//000280:                     B, bx + n_2, by, bs,
//000281:                     B, bx, by, bs,
//000282:                     b_cum, 0, 0, n_2);
//000283:                 strassen_mult_serial(
//000284:                     cancellationToken,
//000285:                     n_2,
//000286:                     A, ax + n_2, ay + n_2, a_s,
//000287:                     b_cum, 0, 0, n_2,
//000288:                     p4, 0, 0, n_2,
//000289:                     s);
//000290: 
//000291:                 // p5 = (a11 + a12) x b22 
//000292:                 matrix_add(n_2, n_2,
//000293:                     A, ax, ay, a_s,
//000294:                     A, ax, ay + n_2, a_s,
//000295:                     a_cum, 0, 0, n_2);
//000296:                 strassen_mult_serial(
//000297:                     cancellationToken,
//000298:                     n_2,
//000299:                     a_cum, 0, 0, n_2,
//000300:                     B, bx + n_2, by + n_2, bs,
//000301:                     p5, 0, 0, n_2,
//000302:                     s);
//000303: 
//000304:                 // p6 = (a21 - a11) x (b11 + b12) 
//000305:                 matrix_sub(n_2, n_2,
//000306:                     A, ax + n_2, ay, a_s,
//000307:                     A, ax, ay, a_s,
//000308:                     a_cum, 0, 0, n_2);
//000309:                 matrix_add(n_2, n_2,
//000310:                     B, bx, by, bs,
//000311:                     B, bx, by + n_2, bs,
//000312:                     b_cum, 0, 0, n_2);
//000313:                 strassen_mult_serial(
//000314:                     cancellationToken,
//000315:                     n_2,
//000316:                     a_cum, 0, 0, n_2,
//000317:                     b_cum, 0, 0, n_2,
//000318:                     p6, 0, 0, n_2,
//000319:                     s);
//000320: 
//000321:                 // p7 = (a12 - a22) x (b21 + b22) 
//000322:                 matrix_sub(n_2, n_2,
//000323:                     A, ax, ay + n_2, a_s,
//000324:                     A, ax + n_2, ay + n_2, a_s,
//000325:                     a_cum, 0, 0, n_2);
//000326:                 matrix_add(n_2, n_2,
//000327:                     B, bx + n_2, by, bs,
//000328:                     B, bx + n_2, by + n_2, bs,
//000329:                     b_cum, 0, 0, n_2);
//000330:                 strassen_mult_serial(
//000331:                     cancellationToken,
//000332:                     n_2,
//000333:                     a_cum, 0, 0, n_2,
//000334:                     b_cum, 0, 0, n_2,
//000335:                     p7, 0, 0, n_2,
//000336:                     s);
//000337: 
//000338:                 // c11 = p1 + p4 - p5 + p7 
//000339:                 matrix_add(n_2, n_2,
//000340:                     p1, 0, 0, n_2,
//000341:                     p4, 0, 0, n_2,
//000342:                     C, cx, cy, cs);
//000343:                 matrix_sub(n_2, n_2,
//000344:                     C, cx, cy, cs,
//000345:                     p5, 0, 0, n_2,
//000346:                     C, cx, cy, cs);
//000347:                 matrix_add(n_2, n_2,
//000348:                     C, cx, cy, cs,
//000349:                     p7, 0, 0, n_2,
//000350:                     C, cx, cy, cs);
//000351: 
//000352:                 // c12 = p3 + p5 
//000353:                 matrix_add(n_2, n_2,
//000354:                     p3, 0, 0, n_2,
//000355:                     p5, 0, 0, n_2,
//000356:                     C, cx, cy + n_2, cs);
//000357: 
//000358:                 // c21 = p2 + p4 
//000359:                 matrix_add(n_2, n_2,
//000360:                     p2, 0, 0, n_2,
//000361:                     p4, 0, 0, n_2,
//000362:                     C, cx + n_2, cy, cs);
//000363: 
//000364:                 // c22 = p1 + p3 - p2 + p6 
//000365:                 matrix_add(n_2, n_2,
//000366:                     p1, 0, 0, n_2,
//000367:                     p3, 0, 0, n_2,
//000368:                     C, cx + n_2, cy + n_2, cs);
//000369:                 matrix_sub(n_2, n_2,
//000370:                     C, cx + n_2, cy + n_2, cs,
//000371:                     p2, 0, 0, n_2,
//000372:                     C, cx + n_2, cy + n_2, cs);
//000373:                 matrix_add(n_2, n_2,
//000374:                     C, cx + n_2, cy + n_2, cs,
//000375:                     p6, 0, 0, n_2,
//000376:                     C, cx + n_2, cy + n_2, cs);
//000377:             }
//000378:         }
//000379:     }
//000380: 
//000381:     private static void strassen_mult_parallel(
//000382:         CancellationToken cancellationToken, 
//000383:         // dimensions of A, B, and C submatrices 
//000384:         int n,
//000385:         // (ax,ay) = origin of A submatrix for multiplicand 
//000386:         int* A, int ax, int ay, int a_s,
//000387:         // (bx,by) = origin of B submatrix for multiplicand 
//000388:         int* B, int bx, int by, int bs,
//000389:         // (cx,cy) = origin of C submatrix for result 
//000390:         int* C, int cx, int cy, int cs,
//000391:         // Strassen's recursion limit for array dimensions 
//000392:         int s)
//000393:     {
//000394:         if (n <= s)
//000395:         {
//000396:             matrix_mult_serial(
//000397:                 cancellationToken,
//000398:                 n, n, n,
//000399:                 A, ax, ay, a_s,
//000400:                 B, bx, by, bs,
//000401:                 C, cx, cy, cs);
//000402:         }
//000403:         else
//000404:         {
//000405:             int n_2 = n >> 1;
//000406:             int areaSize = n_2 * n_2;
//000407:             int[] workArr = new int[areaSize * 17];
//000408:             fixed (int* work = workArr)
//000409:             {
//000410:                 int* a_cum = work;
//000411:                 int* b_cum = a_cum + areaSize;
//000412:                 int* c_cum = b_cum + areaSize;
//000413:                 int* d_cum = c_cum + areaSize;
//000414:                 int* e_cum = d_cum + areaSize;
//000415:                 int* f_cum = e_cum + areaSize;
//000416:                 int* g_cum = f_cum + areaSize;
//000417:                 int* h_cum = g_cum + areaSize;
//000418:                 int* i_cum = h_cum + areaSize;
//000419:                 int* j_cum = i_cum + areaSize;
//000420:                 int* p1 = j_cum + areaSize;
//000421:                 int* p2 = p1 + areaSize;
//000422:                 int* p3 = p2 + areaSize;
//000423:                 int* p4 = p3 + areaSize;
//000424:                 int* p5 = p4 + areaSize;
//000425:                 int* p6 = p5 + areaSize;
//000426:                 int* p7 = p6 + areaSize;
//000427: 
//000428:                 // p1 = (a11 + a22) * (b11 + b22) 
//000429:                 Task t_p1 = Task.Factory.StartNew(() =>
//000430:                 {
//000431:                     matrix_add(n_2, n_2,
//000432:                         A, ax, ay, a_s,
//000433:                         A, ax + n_2, ay + n_2, a_s,
//000434:                         a_cum, 0, 0, n_2);
//000435:                     matrix_add(n_2, n_2,
//000436:                         B, bx, by, bs,
//000437:                         B, bx + n_2, by + n_2, bs,
//000438:                         b_cum, 0, 0, n_2);
//000439:                     strassen_mult_parallel(
//000440:                         cancellationToken,
//000441:                         n_2,
//000442:                         a_cum, 0, 0, n_2,
//000443:                         b_cum, 0, 0, n_2,
//000444:                         p1, 0, 0, n_2,
//000445:                         s);
//000446:                 }, cancellationToken);
//000447: 
//000448:                 // p2 = (a21 + a22) * b11 
//000449:                 Task t_p2 = Task.Factory.StartNew(() =>
//000450:                 {
//000451:                     matrix_add(n_2, n_2,
//000452:                         A, ax + n_2, ay, a_s,
//000453:                         A, ax + n_2, ay + n_2, a_s,
//000454:                         c_cum, 0, 0, n_2);
//000455:                     strassen_mult_parallel(
//000456:                         cancellationToken,
//000457:                         n_2,
//000458:                         c_cum, 0, 0, n_2,
//000459:                         B, bx, by, bs,
//000460:                         p2, 0, 0, n_2,
//000461:                         s);
//000462:                 }, cancellationToken);
//000463: 
//000464:                 // p3 = a11 x (b12 - b22) 
//000465:                 Task t_p3 = Task.Factory.StartNew(() =>
//000466:                 {
//000467:                     matrix_sub(n_2, n_2,
//000468:                         B, bx, by + n_2, bs,
//000469:                         B, bx + n_2, by + n_2, bs,
//000470:                         d_cum, 0, 0, n_2);
//000471:                     strassen_mult_parallel(
//000472:                         cancellationToken,
//000473:                         n_2,
//000474:                         A, ax, ay, a_s,
//000475:                         d_cum, 0, 0, n_2,
//000476:                         p3, 0, 0, n_2,
//000477:                         s);
//000478:                 }, cancellationToken);
//000479: 
//000480:                 // p4 = a22 x (b21 - b11) 
//000481:                 Task t_p4 = Task.Factory.StartNew(() =>
//000482:                 {
//000483:                     matrix_sub(n_2, n_2,
//000484:                         B, bx + n_2, by, bs,
//000485:                         B, bx, by, bs,
//000486:                         e_cum, 0, 0, n_2);
//000487:                     strassen_mult_parallel(
//000488:                         cancellationToken,
//000489:                         n_2,
//000490:                         A, ax + n_2, ay + n_2, a_s,
//000491:                         e_cum, 0, 0, n_2,
//000492:                         p4, 0, 0, n_2,
//000493:                         s);
//000494:                 }, cancellationToken);
//000495: 
//000496:                 // p5 = (a11 + a12) x b22 
//000497:                 Task t_p5 = Task.Factory.StartNew(() =>
//000498:                 {
//000499:                     matrix_add(n_2, n_2,
//000500:                         A, ax, ay, a_s,
//000501:                         A, ax, ay + n_2, a_s,
//000502:                         f_cum, 0, 0, n_2);
//000503:                     strassen_mult_parallel(
//000504:                         cancellationToken,
//000505:                         n_2,
//000506:                         f_cum, 0, 0, n_2,
//000507:                         B, bx + n_2, by + n_2, bs,
//000508:                         p5, 0, 0, n_2,
//000509:                         s);
//000510:                 }, cancellationToken);
//000511: 
//000512:                 // p6 = (a21 - a11) x (b11 + b12) 
//000513:                 Task t_p6 = Task.Factory.StartNew(() =>
//000514:                 {
//000515:                     matrix_sub(n_2, n_2,
//000516:                         A, ax + n_2, ay, a_s,
//000517:                         A, ax, ay, a_s,
//000518:                         g_cum, 0, 0, n_2);
//000519:                     matrix_add(n_2, n_2,
//000520:                         B, bx, by, bs,
//000521:                         B, bx, by + n_2, bs,
//000522:                         h_cum, 0, 0, n_2);
//000523:                     strassen_mult_parallel(
//000524:                         cancellationToken,
//000525:                         n_2,
//000526:                         g_cum, 0, 0, n_2,
//000527:                         h_cum, 0, 0, n_2,
//000528:                         p6, 0, 0, n_2,
//000529:                         s);
//000530:                 }, cancellationToken);
//000531: 
//000532:                 // p7 = (a12 - a22) x (b21 + b22) 
//000533:                 Task t_p7 = Task.Factory.StartNew(() =>
//000534:                 {
//000535:                     matrix_sub(n_2, n_2,
//000536:                         A, ax, ay + n_2, a_s,
//000537:                         A, ax + n_2, ay + n_2, a_s,
//000538:                         i_cum, 0, 0, n_2);
//000539:                     matrix_add(n_2, n_2,
//000540:                         B, bx + n_2, by, bs,
//000541:                         B, bx + n_2, by + n_2, bs,
//000542:                         j_cum, 0, 0, n_2);
//000543:                     strassen_mult_parallel(
//000544:                         cancellationToken,
//000545:                         n_2,
//000546:                         i_cum, 0, 0, n_2,
//000547:                         j_cum, 0, 0, n_2,
//000548:                         p7, 0, 0, n_2,
//000549:                         s);
//000550:                 }, cancellationToken);
//000551: 
//000552:                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
//000553:                 catch (AggregateException ae)
//000554:                 {
//000555:                     ae.Flatten().Handle(e => e is TaskCanceledException);
//000556:                     cancellationToken.ThrowIfCancellationRequested();
//000557:                 }
//000558: 
//000559:                 // c11 = p1 + p4 - p5 + p7 
//000560:                 Task t_c11 = Task.Factory.StartNew(() =>
//000561:                 {
//000562:                     matrix_add(n_2, n_2,
//000563:                         p1, 0, 0, n_2,
//000564:                         p4, 0, 0, n_2,
//000565:                         C, cx, cy, cs);
//000566:                     matrix_sub(n_2, n_2,
//000567:                         C, cx, cy, cs,
//000568:                         p5, 0, 0, n_2,
//000569:                         C, cx, cy, cs);
//000570:                     matrix_add(n_2, n_2,
//000571:                         C, cx, cy, cs,
//000572:                         p7, 0, 0, n_2,
//000573:                         C, cx, cy, cs);
//000574:                 });
//000575: 
//000576:                 // c12 = p3 + p5 
//000577:                 Task t_c12 = Task.Factory.StartNew(() =>
//000578:                 {
//000579:                     matrix_add(n_2, n_2,
//000580:                         p3, 0, 0, n_2,
//000581:                         p5, 0, 0, n_2,
//000582:                         C, cx, cy + n_2, cs);
//000583:                 });
//000584: 
//000585:                 // c21 = p2 + p4 
//000586:                 Task t_c21 = Task.Factory.StartNew(() =>
//000587:                 {
//000588:                     matrix_add(n_2, n_2,
//000589:                         p2, 0, 0, n_2,
//000590:                         p4, 0, 0, n_2,
//000591:                         C, cx + n_2, cy, cs);
//000592:                 });
//000593: 
//000594:                 // c22 = p1 + p3 - p2 + p6 
//000595:                 Task t_c22 = Task.Factory.StartNew(() =>
//000596:                 {
//000597:                     matrix_add(n_2, n_2,
//000598:                         p1, 0, 0, n_2,
//000599:                         p3, 0, 0, n_2,
//000600:                         C, cx + n_2, cy + n_2, cs);
//000601:                     matrix_sub(n_2, n_2,
//000602:                         C, cx + n_2, cy + n_2, cs,
//000603:                         p2, 0, 0, n_2,
//000604:                         C, cx + n_2, cy + n_2, cs);
//000605:                     matrix_add(n_2, n_2,
//000606:                         C, cx + n_2, cy + n_2, cs,
//000607:                         p6, 0, 0, n_2,
//000608:                         C, cx + n_2, cy + n_2, cs);
//000609:                 });
//000610: 
//000611:                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
//000612:             }
//000613:         }
//000614:     }
//000615: }
    IL_0021:  ldloc.1
    IL_0022:  brtrue.s   IL_002f

//000063:         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
    IL_0024:  ldstr      "src1"
    IL_0029:  newobj     instance void [mscorlib]System.ArgumentOutOfRangeException::.ctor(string)
    IL_002e:  throw

//000064:         int N = src1._size;
    IL_002f:  ldarg.1
    IL_0030:  ldfld      int32 Matrix::_size
    IL_0035:  stloc.0
//000065:         matrix_mult_serial(
    IL_0036:  ldarg.0
    IL_0037:  ldloc.0
    IL_0038:  ldloc.0
    IL_0039:  ldloc.0
    IL_003a:  ldarg.1
    IL_003b:  ldfld      int32* Matrix::_dataPtr
    IL_0040:  ldc.i4.0
    IL_0041:  ldc.i4.0
    IL_0042:  ldloc.0
    IL_0043:  ldarg.2
    IL_0044:  ldfld      int32* Matrix::_dataPtr
    IL_0049:  ldc.i4.0
    IL_004a:  ldc.i4.0
    IL_004b:  ldloc.0
    IL_004c:  ldarg.3
    IL_004d:  ldfld      int32* Matrix::_dataPtr
    IL_0052:  ldc.i4.0
    IL_0053:  ldc.i4.0
    IL_0054:  ldloc.0
    IL_0055:  call       void Matrix::matrix_mult_serial(valuetype [mscorlib]System.Threading.CancellationToken,
                                                         int32,
                                                         int32,
                                                         int32,
                                                         int32*,
                                                         int32,
                                                         int32,
                                                         int32,
                                                         int32*,
                                                         int32,
                                                         int32,
                                                         int32,
                                                         int32*,
                                                         int32,
                                                         int32,
                                                         int32)
    IL_005a:  nop
//000066:             cancellationToken,
//000067:             N, N, N,
//000068:             src1._dataPtr, 0, 0, N,
//000069:             src2._dataPtr, 0, 0, N,
//000070:             dst._dataPtr, 0, 0, N);
//000071:     }
    IL_005b:  ret
  } // end of method Matrix::Multiply

  .method public hidebysig static void  MultiplyParallel(valuetype [mscorlib]System.Threading.CancellationToken cancellationToken,
                                                         class Matrix src1,
                                                         class Matrix src2,
                                                         class Matrix dst) cil managed
  {
    // Code size       92 (0x5c)
    .maxstack  16
    .locals init ([0] int32 N,
             [1] bool CS$4$0000)
//000072: 
//000073:     public static void MultiplyParallel(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
//000074:     {
    IL_0000:  nop
//000075:         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
    IL_0001:  ldarg.1
    IL_0002:  ldfld      int32 Matrix::_size
    IL_0007:  ldarg.2
    IL_0008:  ldfld      int32 Matrix::_size
    IL_000d:  bne.un.s   IL_001f

    IL_000f:  ldarg.1
    IL_0010:  ldfld      int32 Matrix::_size
    IL_0015:  ldarg.3
    IL_0016:  ldfld      int32 Matrix::_size
    IL_001b:  ceq
    IL_001d:  br.s       IL_0020

    IL_001f:  ldc.i4.0
    IL_0020:  stloc.1
//000076:         int N = src1._size;
//000077:         matrix_mult_parallel(
//000078:             cancellationToken,
//000079:             N, N, N,
//000080:             src1._dataPtr, 0, 0, N,
//000081:             src2._dataPtr, 0, 0, N,
//000082:             dst._dataPtr, 0, 0, N);
//000083:     }
//000084: 
//000085:     public static void MultiplyStrassens(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
//000086:     {
//000087:         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
//000088:         int N = src1._size;
//000089:         strassen_mult_serial(
//000090:             cancellationToken,
//000091:             N,
//000092:             src1._dataPtr, 0, 0, N,
//000093:             src2._dataPtr, 0, 0, N,
//000094:             dst._dataPtr, 0, 0, N,
//000095:             64);
//000096:     }
//000097: 
//000098:     public static void MultiplyStrassensParallel(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
//000099:     {
//000100:         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
//000101:         int N = src1._size;
//000102:         strassen_mult_parallel(
//000103:             cancellationToken,
//000104:             N,
//000105:             src1._dataPtr, 0, 0, N,
//000106:             src2._dataPtr, 0, 0, N,
//000107:             dst._dataPtr, 0, 0, N,
//000108:             64);
//000109:     }
//000110: 
//000111:     private static void matrix_add( 
//000112:         // dimensions of A, B, and C submatrices 
//000113:         int n, int m,
//000114:         // (ax,ay) = origin of A submatrix for multiplicand 
//000115:         int* A, int ax, int ay, int a_s,
//000116:         // (bx,by) = origin of B submatrix for multiplicand 
//000117:         int* B, int bx, int by, int bs,
//000118:         // (cx,cy) = origin of C submatrix for result 
//000119:         int* C, int cx, int cy, int cs)
//000120:     {
//000121:         for (int i = 0; i < n; i += 1)
//000122:             for (int j = 0; j < m; j += 1)
//000123:                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] + B[(i + bx) * bs + j + by];
//000124:     }
//000125: 
//000126:     private static void matrix_sub(
//000127:         // dimensions of A, B, and C submatrices 
//000128:         int n, int m,
//000129:         // (ax,ay) = origin of A submatrix for multiplicand 
//000130:         int* A, int ax, int ay, int a_s,
//000131:         // (bx,by) = origin of B submatrix for multiplicand 
//000132:         int* B, int bx, int by, int bs,
//000133:         // (cx,cy) = origin of C submatrix for result 
//000134:         int* C, int cx, int cy, int cs)
//000135:     {
//000136:         for (int i = 0; i < n; i += 1)
//000137:         {
//000138:             for (int j = 0; j < m; j += 1)
//000139:             {
//000140:                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] - B[(i + bx) * bs + j + by];
//000141:             }
//000142:         }
//000143:     }
//000144: 
//000145:     private static void matrix_mult_serial(
//000146:         CancellationToken cancellationToken, 
//000147:         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
//000148:         int l, int m, int n,
//000149:         // (ax,ay) = origin of A submatrix for multiplicand 
//000150:         int* A, int ax, int ay, int a_s,
//000151:         // (bx,by) = origin of B submatrix for multiplicand 
//000152:         int* B, int bx, int by, int bs,
//000153:         // (cx,cy) = origin of C submatrix for result 
//000154:         int* C, int cx, int cy, int cs)
//000155:     {
//000156:         for (int i = 0; i < l; ++i)
//000157:         {
//000158:             cancellationToken.ThrowIfCancellationRequested();
//000159:             for (int j = 0; j < n; j++)
//000160:             {
//000161:                 int temp = 0;
//000162:                 for (int k = 0; k < m; k++)
//000163:                 {
//000164:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
//000165:                 }
//000166:                 C[(i + cx) * cs + j + cy] = temp;
//000167:             }
//000168:         }
//000169:     }
//000170: 
//000171:     private static void matrix_mult_parallel(
//000172:         CancellationToken cancellationToken, 
//000173:         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
//000174:         int l, int m, int n,
//000175:         // (ax,ay) = origin of A submatrix for multiplicand 
//000176:         int* A, int ax, int ay, int a_s,
//000177:         // (bx,by) = origin of B submatrix for multiplicand 
//000178:         int* B, int bx, int by, int bs,
//000179:         // (cx,cy) = origin of C submatrix for result 
//000180:         int* C, int cx, int cy, int cs)
//000181:     {
//000182:         ParallelOptions options = new ParallelOptions { CancellationToken = cancellationToken };
//000183:         Parallel.For(0, l, options, i =>
//000184:         {
//000185:             for (int j = 0; j < n; j++)
//000186:             {
//000187:                 int temp = 0;
//000188:                 for (int k = 0; k < m; k++)
//000189:                 {
//000190:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
//000191:                 }
//000192:                 C[(i + cx) * cs + j + cy] = temp;
//000193:             }
//000194:         });
//000195:     }
//000196: 
//000197:     private static void strassen_mult_serial(
//000198:         CancellationToken cancellationToken, 
//000199:         // dimensions of A, B, and C submatrices 
//000200:         int n,
//000201:         // (ax,ay) = origin of A submatrix for multiplicand 
//000202:         int* A, int ax, int ay, int a_s,
//000203:         // (bx,by) = origin of B submatrix for multiplicand 
//000204:         int* B, int bx, int by, int bs,
//000205:         // (cx,cy) = origin of C submatrix for result 
//000206:         int* C, int cx, int cy, int cs,
//000207:         // Strassen's recursion limit for array dimensions 
//000208:         int s)
//000209:     {
//000210:         if (n <= s)
//000211:         {
//000212:             matrix_mult_serial(
//000213:                 cancellationToken,
//000214:                 n, n, n,
//000215:                 A, ax, ay, a_s,
//000216:                 B, bx, by, bs,
//000217:                 C, cx, cy, cs);
//000218:         }
//000219:         else
//000220:         {
//000221:             int n_2 = n >> 1;
//000222:             int[] workArr = new int[n_2 * n_2 * 9];
//000223:             fixed (int* work = workArr)
//000224:             {
//000225:                 int* a_cum = work;
//000226:                 int* b_cum = a_cum + n_2 * n_2;
//000227:                 int* p1 = b_cum + n_2 * n_2;
//000228:                 int* p2 = p1 + n_2 * n_2;
//000229:                 int* p3 = p2 + n_2 * n_2;
//000230:                 int* p4 = p3 + n_2 * n_2;
//000231:                 int* p5 = p4 + n_2 * n_2;
//000232:                 int* p6 = p5 + n_2 * n_2;
//000233:                 int* p7 = p6 + n_2 * n_2;
//000234: 
//000235:                 // p1 = (a11 + a22) * (b11 + b22) 
//000236:                 matrix_add(n_2, n_2,
//000237:                     A, ax, ay, a_s,
//000238:                     A, ax + n_2, ay + n_2, a_s,
//000239:                     a_cum, 0, 0, n_2);
//000240:                 matrix_add(n_2, n_2,
//000241:                     B, bx, by, bs,
//000242:                     B, bx + n_2, by + n_2, bs,
//000243:                     b_cum, 0, 0, n_2);
//000244:                 strassen_mult_serial(
//000245:                     cancellationToken,
//000246:                     n_2,
//000247:                     a_cum, 0, 0, n_2,
//000248:                     b_cum, 0, 0, n_2,
//000249:                     p1, 0, 0, n_2,
//000250:                     s);
//000251: 
//000252:                 // p2 = (a21 + a22) * b11 
//000253:                 matrix_add(n_2, n_2,
//000254:                     A, ax + n_2, ay, a_s,
//000255:                     A, ax + n_2, ay + n_2, a_s,
//000256:                     a_cum, 0, 0, n_2);
//000257:                 strassen_mult_serial(
//000258:                     cancellationToken,
//000259:                     n_2,
//000260:                     a_cum, 0, 0, n_2,
//000261:                     B, bx, by, bs,
//000262:                     p2, 0, 0, n_2,
//000263:                     s);
//000264: 
//000265:                 // p3 = a11 x (b12 - b22) 
//000266:                 matrix_sub(n_2, n_2,
//000267:                     B, bx, by + n_2, bs,
//000268:                     B, bx + n_2, by + n_2, bs,
//000269:                     b_cum, 0, 0, n_2);
//000270:                 strassen_mult_serial(
//000271:                     cancellationToken,
//000272:                     n_2,
//000273:                     A, ax, ay, a_s,
//000274:                     b_cum, 0, 0, n_2,
//000275:                     p3, 0, 0, n_2,
//000276:                     s);
//000277: 
//000278:                 // p4 = a22 x (b21 - b11) 
//000279:                 matrix_sub(n_2, n_2,
//000280:                     B, bx + n_2, by, bs,
//000281:                     B, bx, by, bs,
//000282:                     b_cum, 0, 0, n_2);
//000283:                 strassen_mult_serial(
//000284:                     cancellationToken,
//000285:                     n_2,
//000286:                     A, ax + n_2, ay + n_2, a_s,
//000287:                     b_cum, 0, 0, n_2,
//000288:                     p4, 0, 0, n_2,
//000289:                     s);
//000290: 
//000291:                 // p5 = (a11 + a12) x b22 
//000292:                 matrix_add(n_2, n_2,
//000293:                     A, ax, ay, a_s,
//000294:                     A, ax, ay + n_2, a_s,
//000295:                     a_cum, 0, 0, n_2);
//000296:                 strassen_mult_serial(
//000297:                     cancellationToken,
//000298:                     n_2,
//000299:                     a_cum, 0, 0, n_2,
//000300:                     B, bx + n_2, by + n_2, bs,
//000301:                     p5, 0, 0, n_2,
//000302:                     s);
//000303: 
//000304:                 // p6 = (a21 - a11) x (b11 + b12) 
//000305:                 matrix_sub(n_2, n_2,
//000306:                     A, ax + n_2, ay, a_s,
//000307:                     A, ax, ay, a_s,
//000308:                     a_cum, 0, 0, n_2);
//000309:                 matrix_add(n_2, n_2,
//000310:                     B, bx, by, bs,
//000311:                     B, bx, by + n_2, bs,
//000312:                     b_cum, 0, 0, n_2);
//000313:                 strassen_mult_serial(
//000314:                     cancellationToken,
//000315:                     n_2,
//000316:                     a_cum, 0, 0, n_2,
//000317:                     b_cum, 0, 0, n_2,
//000318:                     p6, 0, 0, n_2,
//000319:                     s);
//000320: 
//000321:                 // p7 = (a12 - a22) x (b21 + b22) 
//000322:                 matrix_sub(n_2, n_2,
//000323:                     A, ax, ay + n_2, a_s,
//000324:                     A, ax + n_2, ay + n_2, a_s,
//000325:                     a_cum, 0, 0, n_2);
//000326:                 matrix_add(n_2, n_2,
//000327:                     B, bx + n_2, by, bs,
//000328:                     B, bx + n_2, by + n_2, bs,
//000329:                     b_cum, 0, 0, n_2);
//000330:                 strassen_mult_serial(
//000331:                     cancellationToken,
//000332:                     n_2,
//000333:                     a_cum, 0, 0, n_2,
//000334:                     b_cum, 0, 0, n_2,
//000335:                     p7, 0, 0, n_2,
//000336:                     s);
//000337: 
//000338:                 // c11 = p1 + p4 - p5 + p7 
//000339:                 matrix_add(n_2, n_2,
//000340:                     p1, 0, 0, n_2,
//000341:                     p4, 0, 0, n_2,
//000342:                     C, cx, cy, cs);
//000343:                 matrix_sub(n_2, n_2,
//000344:                     C, cx, cy, cs,
//000345:                     p5, 0, 0, n_2,
//000346:                     C, cx, cy, cs);
//000347:                 matrix_add(n_2, n_2,
//000348:                     C, cx, cy, cs,
//000349:                     p7, 0, 0, n_2,
//000350:                     C, cx, cy, cs);
//000351: 
//000352:                 // c12 = p3 + p5 
//000353:                 matrix_add(n_2, n_2,
//000354:                     p3, 0, 0, n_2,
//000355:                     p5, 0, 0, n_2,
//000356:                     C, cx, cy + n_2, cs);
//000357: 
//000358:                 // c21 = p2 + p4 
//000359:                 matrix_add(n_2, n_2,
//000360:                     p2, 0, 0, n_2,
//000361:                     p4, 0, 0, n_2,
//000362:                     C, cx + n_2, cy, cs);
//000363: 
//000364:                 // c22 = p1 + p3 - p2 + p6 
//000365:                 matrix_add(n_2, n_2,
//000366:                     p1, 0, 0, n_2,
//000367:                     p3, 0, 0, n_2,
//000368:                     C, cx + n_2, cy + n_2, cs);
//000369:                 matrix_sub(n_2, n_2,
//000370:                     C, cx + n_2, cy + n_2, cs,
//000371:                     p2, 0, 0, n_2,
//000372:                     C, cx + n_2, cy + n_2, cs);
//000373:                 matrix_add(n_2, n_2,
//000374:                     C, cx + n_2, cy + n_2, cs,
//000375:                     p6, 0, 0, n_2,
//000376:                     C, cx + n_2, cy + n_2, cs);
//000377:             }
//000378:         }
//000379:     }
//000380: 
//000381:     private static void strassen_mult_parallel(
//000382:         CancellationToken cancellationToken, 
//000383:         // dimensions of A, B, and C submatrices 
//000384:         int n,
//000385:         // (ax,ay) = origin of A submatrix for multiplicand 
//000386:         int* A, int ax, int ay, int a_s,
//000387:         // (bx,by) = origin of B submatrix for multiplicand 
//000388:         int* B, int bx, int by, int bs,
//000389:         // (cx,cy) = origin of C submatrix for result 
//000390:         int* C, int cx, int cy, int cs,
//000391:         // Strassen's recursion limit for array dimensions 
//000392:         int s)
//000393:     {
//000394:         if (n <= s)
//000395:         {
//000396:             matrix_mult_serial(
//000397:                 cancellationToken,
//000398:                 n, n, n,
//000399:                 A, ax, ay, a_s,
//000400:                 B, bx, by, bs,
//000401:                 C, cx, cy, cs);
//000402:         }
//000403:         else
//000404:         {
//000405:             int n_2 = n >> 1;
//000406:             int areaSize = n_2 * n_2;
//000407:             int[] workArr = new int[areaSize * 17];
//000408:             fixed (int* work = workArr)
//000409:             {
//000410:                 int* a_cum = work;
//000411:                 int* b_cum = a_cum + areaSize;
//000412:                 int* c_cum = b_cum + areaSize;
//000413:                 int* d_cum = c_cum + areaSize;
//000414:                 int* e_cum = d_cum + areaSize;
//000415:                 int* f_cum = e_cum + areaSize;
//000416:                 int* g_cum = f_cum + areaSize;
//000417:                 int* h_cum = g_cum + areaSize;
//000418:                 int* i_cum = h_cum + areaSize;
//000419:                 int* j_cum = i_cum + areaSize;
//000420:                 int* p1 = j_cum + areaSize;
//000421:                 int* p2 = p1 + areaSize;
//000422:                 int* p3 = p2 + areaSize;
//000423:                 int* p4 = p3 + areaSize;
//000424:                 int* p5 = p4 + areaSize;
//000425:                 int* p6 = p5 + areaSize;
//000426:                 int* p7 = p6 + areaSize;
//000427: 
//000428:                 // p1 = (a11 + a22) * (b11 + b22) 
//000429:                 Task t_p1 = Task.Factory.StartNew(() =>
//000430:                 {
//000431:                     matrix_add(n_2, n_2,
//000432:                         A, ax, ay, a_s,
//000433:                         A, ax + n_2, ay + n_2, a_s,
//000434:                         a_cum, 0, 0, n_2);
//000435:                     matrix_add(n_2, n_2,
//000436:                         B, bx, by, bs,
//000437:                         B, bx + n_2, by + n_2, bs,
//000438:                         b_cum, 0, 0, n_2);
//000439:                     strassen_mult_parallel(
//000440:                         cancellationToken,
//000441:                         n_2,
//000442:                         a_cum, 0, 0, n_2,
//000443:                         b_cum, 0, 0, n_2,
//000444:                         p1, 0, 0, n_2,
//000445:                         s);
//000446:                 }, cancellationToken);
//000447: 
//000448:                 // p2 = (a21 + a22) * b11 
//000449:                 Task t_p2 = Task.Factory.StartNew(() =>
//000450:                 {
//000451:                     matrix_add(n_2, n_2,
//000452:                         A, ax + n_2, ay, a_s,
//000453:                         A, ax + n_2, ay + n_2, a_s,
//000454:                         c_cum, 0, 0, n_2);
//000455:                     strassen_mult_parallel(
//000456:                         cancellationToken,
//000457:                         n_2,
//000458:                         c_cum, 0, 0, n_2,
//000459:                         B, bx, by, bs,
//000460:                         p2, 0, 0, n_2,
//000461:                         s);
//000462:                 }, cancellationToken);
//000463: 
//000464:                 // p3 = a11 x (b12 - b22) 
//000465:                 Task t_p3 = Task.Factory.StartNew(() =>
//000466:                 {
//000467:                     matrix_sub(n_2, n_2,
//000468:                         B, bx, by + n_2, bs,
//000469:                         B, bx + n_2, by + n_2, bs,
//000470:                         d_cum, 0, 0, n_2);
//000471:                     strassen_mult_parallel(
//000472:                         cancellationToken,
//000473:                         n_2,
//000474:                         A, ax, ay, a_s,
//000475:                         d_cum, 0, 0, n_2,
//000476:                         p3, 0, 0, n_2,
//000477:                         s);
//000478:                 }, cancellationToken);
//000479: 
//000480:                 // p4 = a22 x (b21 - b11) 
//000481:                 Task t_p4 = Task.Factory.StartNew(() =>
//000482:                 {
//000483:                     matrix_sub(n_2, n_2,
//000484:                         B, bx + n_2, by, bs,
//000485:                         B, bx, by, bs,
//000486:                         e_cum, 0, 0, n_2);
//000487:                     strassen_mult_parallel(
//000488:                         cancellationToken,
//000489:                         n_2,
//000490:                         A, ax + n_2, ay + n_2, a_s,
//000491:                         e_cum, 0, 0, n_2,
//000492:                         p4, 0, 0, n_2,
//000493:                         s);
//000494:                 }, cancellationToken);
//000495: 
//000496:                 // p5 = (a11 + a12) x b22 
//000497:                 Task t_p5 = Task.Factory.StartNew(() =>
//000498:                 {
//000499:                     matrix_add(n_2, n_2,
//000500:                         A, ax, ay, a_s,
//000501:                         A, ax, ay + n_2, a_s,
//000502:                         f_cum, 0, 0, n_2);
//000503:                     strassen_mult_parallel(
//000504:                         cancellationToken,
//000505:                         n_2,
//000506:                         f_cum, 0, 0, n_2,
//000507:                         B, bx + n_2, by + n_2, bs,
//000508:                         p5, 0, 0, n_2,
//000509:                         s);
//000510:                 }, cancellationToken);
//000511: 
//000512:                 // p6 = (a21 - a11) x (b11 + b12) 
//000513:                 Task t_p6 = Task.Factory.StartNew(() =>
//000514:                 {
//000515:                     matrix_sub(n_2, n_2,
//000516:                         A, ax + n_2, ay, a_s,
//000517:                         A, ax, ay, a_s,
//000518:                         g_cum, 0, 0, n_2);
//000519:                     matrix_add(n_2, n_2,
//000520:                         B, bx, by, bs,
//000521:                         B, bx, by + n_2, bs,
//000522:                         h_cum, 0, 0, n_2);
//000523:                     strassen_mult_parallel(
//000524:                         cancellationToken,
//000525:                         n_2,
//000526:                         g_cum, 0, 0, n_2,
//000527:                         h_cum, 0, 0, n_2,
//000528:                         p6, 0, 0, n_2,
//000529:                         s);
//000530:                 }, cancellationToken);
//000531: 
//000532:                 // p7 = (a12 - a22) x (b21 + b22) 
//000533:                 Task t_p7 = Task.Factory.StartNew(() =>
//000534:                 {
//000535:                     matrix_sub(n_2, n_2,
//000536:                         A, ax, ay + n_2, a_s,
//000537:                         A, ax + n_2, ay + n_2, a_s,
//000538:                         i_cum, 0, 0, n_2);
//000539:                     matrix_add(n_2, n_2,
//000540:                         B, bx + n_2, by, bs,
//000541:                         B, bx + n_2, by + n_2, bs,
//000542:                         j_cum, 0, 0, n_2);
//000543:                     strassen_mult_parallel(
//000544:                         cancellationToken,
//000545:                         n_2,
//000546:                         i_cum, 0, 0, n_2,
//000547:                         j_cum, 0, 0, n_2,
//000548:                         p7, 0, 0, n_2,
//000549:                         s);
//000550:                 }, cancellationToken);
//000551: 
//000552:                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
//000553:                 catch (AggregateException ae)
//000554:                 {
//000555:                     ae.Flatten().Handle(e => e is TaskCanceledException);
//000556:                     cancellationToken.ThrowIfCancellationRequested();
//000557:                 }
//000558: 
//000559:                 // c11 = p1 + p4 - p5 + p7 
//000560:                 Task t_c11 = Task.Factory.StartNew(() =>
//000561:                 {
//000562:                     matrix_add(n_2, n_2,
//000563:                         p1, 0, 0, n_2,
//000564:                         p4, 0, 0, n_2,
//000565:                         C, cx, cy, cs);
//000566:                     matrix_sub(n_2, n_2,
//000567:                         C, cx, cy, cs,
//000568:                         p5, 0, 0, n_2,
//000569:                         C, cx, cy, cs);
//000570:                     matrix_add(n_2, n_2,
//000571:                         C, cx, cy, cs,
//000572:                         p7, 0, 0, n_2,
//000573:                         C, cx, cy, cs);
//000574:                 });
//000575: 
//000576:                 // c12 = p3 + p5 
//000577:                 Task t_c12 = Task.Factory.StartNew(() =>
//000578:                 {
//000579:                     matrix_add(n_2, n_2,
//000580:                         p3, 0, 0, n_2,
//000581:                         p5, 0, 0, n_2,
//000582:                         C, cx, cy + n_2, cs);
//000583:                 });
//000584: 
//000585:                 // c21 = p2 + p4 
//000586:                 Task t_c21 = Task.Factory.StartNew(() =>
//000587:                 {
//000588:                     matrix_add(n_2, n_2,
//000589:                         p2, 0, 0, n_2,
//000590:                         p4, 0, 0, n_2,
//000591:                         C, cx + n_2, cy, cs);
//000592:                 });
//000593: 
//000594:                 // c22 = p1 + p3 - p2 + p6 
//000595:                 Task t_c22 = Task.Factory.StartNew(() =>
//000596:                 {
//000597:                     matrix_add(n_2, n_2,
//000598:                         p1, 0, 0, n_2,
//000599:                         p3, 0, 0, n_2,
//000600:                         C, cx + n_2, cy + n_2, cs);
//000601:                     matrix_sub(n_2, n_2,
//000602:                         C, cx + n_2, cy + n_2, cs,
//000603:                         p2, 0, 0, n_2,
//000604:                         C, cx + n_2, cy + n_2, cs);
//000605:                     matrix_add(n_2, n_2,
//000606:                         C, cx + n_2, cy + n_2, cs,
//000607:                         p6, 0, 0, n_2,
//000608:                         C, cx + n_2, cy + n_2, cs);
//000609:                 });
//000610: 
//000611:                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
//000612:             }
//000613:         }
//000614:     }
//000615: }
    IL_0021:  ldloc.1
    IL_0022:  brtrue.s   IL_002f

//000075:         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
    IL_0024:  ldstr      "src1"
    IL_0029:  newobj     instance void [mscorlib]System.ArgumentOutOfRangeException::.ctor(string)
    IL_002e:  throw

//000076:         int N = src1._size;
    IL_002f:  ldarg.1
    IL_0030:  ldfld      int32 Matrix::_size
    IL_0035:  stloc.0
//000077:         matrix_mult_parallel(
    IL_0036:  ldarg.0
    IL_0037:  ldloc.0
    IL_0038:  ldloc.0
    IL_0039:  ldloc.0
    IL_003a:  ldarg.1
    IL_003b:  ldfld      int32* Matrix::_dataPtr
    IL_0040:  ldc.i4.0
    IL_0041:  ldc.i4.0
    IL_0042:  ldloc.0
    IL_0043:  ldarg.2
    IL_0044:  ldfld      int32* Matrix::_dataPtr
    IL_0049:  ldc.i4.0
    IL_004a:  ldc.i4.0
    IL_004b:  ldloc.0
    IL_004c:  ldarg.3
    IL_004d:  ldfld      int32* Matrix::_dataPtr
    IL_0052:  ldc.i4.0
    IL_0053:  ldc.i4.0
    IL_0054:  ldloc.0
    IL_0055:  call       void Matrix::matrix_mult_parallel(valuetype [mscorlib]System.Threading.CancellationToken,
                                                           int32,
                                                           int32,
                                                           int32,
                                                           int32*,
                                                           int32,
                                                           int32,
                                                           int32,
                                                           int32*,
                                                           int32,
                                                           int32,
                                                           int32,
                                                           int32*,
                                                           int32,
                                                           int32,
                                                           int32)
    IL_005a:  nop
//000078:             cancellationToken,
//000079:             N, N, N,
//000080:             src1._dataPtr, 0, 0, N,
//000081:             src2._dataPtr, 0, 0, N,
//000082:             dst._dataPtr, 0, 0, N);
//000083:     }
    IL_005b:  ret
  } // end of method Matrix::MultiplyParallel

  .method public hidebysig static void  MultiplyStrassens(valuetype [mscorlib]System.Threading.CancellationToken cancellationToken,
                                                          class Matrix src1,
                                                          class Matrix src2,
                                                          class Matrix dst) cil managed
  {
    // Code size       92 (0x5c)
    .maxstack  15
    .locals init ([0] int32 N,
             [1] bool CS$4$0000)
//000084: 
//000085:     public static void MultiplyStrassens(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
//000086:     {
    IL_0000:  nop
//000087:         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
    IL_0001:  ldarg.1
    IL_0002:  ldfld      int32 Matrix::_size
    IL_0007:  ldarg.2
    IL_0008:  ldfld      int32 Matrix::_size
    IL_000d:  bne.un.s   IL_001f

    IL_000f:  ldarg.1
    IL_0010:  ldfld      int32 Matrix::_size
    IL_0015:  ldarg.3
    IL_0016:  ldfld      int32 Matrix::_size
    IL_001b:  ceq
    IL_001d:  br.s       IL_0020

    IL_001f:  ldc.i4.0
    IL_0020:  stloc.1
//000088:         int N = src1._size;
//000089:         strassen_mult_serial(
//000090:             cancellationToken,
//000091:             N,
//000092:             src1._dataPtr, 0, 0, N,
//000093:             src2._dataPtr, 0, 0, N,
//000094:             dst._dataPtr, 0, 0, N,
//000095:             64);
//000096:     }
//000097: 
//000098:     public static void MultiplyStrassensParallel(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
//000099:     {
//000100:         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
//000101:         int N = src1._size;
//000102:         strassen_mult_parallel(
//000103:             cancellationToken,
//000104:             N,
//000105:             src1._dataPtr, 0, 0, N,
//000106:             src2._dataPtr, 0, 0, N,
//000107:             dst._dataPtr, 0, 0, N,
//000108:             64);
//000109:     }
//000110: 
//000111:     private static void matrix_add( 
//000112:         // dimensions of A, B, and C submatrices 
//000113:         int n, int m,
//000114:         // (ax,ay) = origin of A submatrix for multiplicand 
//000115:         int* A, int ax, int ay, int a_s,
//000116:         // (bx,by) = origin of B submatrix for multiplicand 
//000117:         int* B, int bx, int by, int bs,
//000118:         // (cx,cy) = origin of C submatrix for result 
//000119:         int* C, int cx, int cy, int cs)
//000120:     {
//000121:         for (int i = 0; i < n; i += 1)
//000122:             for (int j = 0; j < m; j += 1)
//000123:                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] + B[(i + bx) * bs + j + by];
//000124:     }
//000125: 
//000126:     private static void matrix_sub(
//000127:         // dimensions of A, B, and C submatrices 
//000128:         int n, int m,
//000129:         // (ax,ay) = origin of A submatrix for multiplicand 
//000130:         int* A, int ax, int ay, int a_s,
//000131:         // (bx,by) = origin of B submatrix for multiplicand 
//000132:         int* B, int bx, int by, int bs,
//000133:         // (cx,cy) = origin of C submatrix for result 
//000134:         int* C, int cx, int cy, int cs)
//000135:     {
//000136:         for (int i = 0; i < n; i += 1)
//000137:         {
//000138:             for (int j = 0; j < m; j += 1)
//000139:             {
//000140:                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] - B[(i + bx) * bs + j + by];
//000141:             }
//000142:         }
//000143:     }
//000144: 
//000145:     private static void matrix_mult_serial(
//000146:         CancellationToken cancellationToken, 
//000147:         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
//000148:         int l, int m, int n,
//000149:         // (ax,ay) = origin of A submatrix for multiplicand 
//000150:         int* A, int ax, int ay, int a_s,
//000151:         // (bx,by) = origin of B submatrix for multiplicand 
//000152:         int* B, int bx, int by, int bs,
//000153:         // (cx,cy) = origin of C submatrix for result 
//000154:         int* C, int cx, int cy, int cs)
//000155:     {
//000156:         for (int i = 0; i < l; ++i)
//000157:         {
//000158:             cancellationToken.ThrowIfCancellationRequested();
//000159:             for (int j = 0; j < n; j++)
//000160:             {
//000161:                 int temp = 0;
//000162:                 for (int k = 0; k < m; k++)
//000163:                 {
//000164:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
//000165:                 }
//000166:                 C[(i + cx) * cs + j + cy] = temp;
//000167:             }
//000168:         }
//000169:     }
//000170: 
//000171:     private static void matrix_mult_parallel(
//000172:         CancellationToken cancellationToken, 
//000173:         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
//000174:         int l, int m, int n,
//000175:         // (ax,ay) = origin of A submatrix for multiplicand 
//000176:         int* A, int ax, int ay, int a_s,
//000177:         // (bx,by) = origin of B submatrix for multiplicand 
//000178:         int* B, int bx, int by, int bs,
//000179:         // (cx,cy) = origin of C submatrix for result 
//000180:         int* C, int cx, int cy, int cs)
//000181:     {
//000182:         ParallelOptions options = new ParallelOptions { CancellationToken = cancellationToken };
//000183:         Parallel.For(0, l, options, i =>
//000184:         {
//000185:             for (int j = 0; j < n; j++)
//000186:             {
//000187:                 int temp = 0;
//000188:                 for (int k = 0; k < m; k++)
//000189:                 {
//000190:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
//000191:                 }
//000192:                 C[(i + cx) * cs + j + cy] = temp;
//000193:             }
//000194:         });
//000195:     }
//000196: 
//000197:     private static void strassen_mult_serial(
//000198:         CancellationToken cancellationToken, 
//000199:         // dimensions of A, B, and C submatrices 
//000200:         int n,
//000201:         // (ax,ay) = origin of A submatrix for multiplicand 
//000202:         int* A, int ax, int ay, int a_s,
//000203:         // (bx,by) = origin of B submatrix for multiplicand 
//000204:         int* B, int bx, int by, int bs,
//000205:         // (cx,cy) = origin of C submatrix for result 
//000206:         int* C, int cx, int cy, int cs,
//000207:         // Strassen's recursion limit for array dimensions 
//000208:         int s)
//000209:     {
//000210:         if (n <= s)
//000211:         {
//000212:             matrix_mult_serial(
//000213:                 cancellationToken,
//000214:                 n, n, n,
//000215:                 A, ax, ay, a_s,
//000216:                 B, bx, by, bs,
//000217:                 C, cx, cy, cs);
//000218:         }
//000219:         else
//000220:         {
//000221:             int n_2 = n >> 1;
//000222:             int[] workArr = new int[n_2 * n_2 * 9];
//000223:             fixed (int* work = workArr)
//000224:             {
//000225:                 int* a_cum = work;
//000226:                 int* b_cum = a_cum + n_2 * n_2;
//000227:                 int* p1 = b_cum + n_2 * n_2;
//000228:                 int* p2 = p1 + n_2 * n_2;
//000229:                 int* p3 = p2 + n_2 * n_2;
//000230:                 int* p4 = p3 + n_2 * n_2;
//000231:                 int* p5 = p4 + n_2 * n_2;
//000232:                 int* p6 = p5 + n_2 * n_2;
//000233:                 int* p7 = p6 + n_2 * n_2;
//000234: 
//000235:                 // p1 = (a11 + a22) * (b11 + b22) 
//000236:                 matrix_add(n_2, n_2,
//000237:                     A, ax, ay, a_s,
//000238:                     A, ax + n_2, ay + n_2, a_s,
//000239:                     a_cum, 0, 0, n_2);
//000240:                 matrix_add(n_2, n_2,
//000241:                     B, bx, by, bs,
//000242:                     B, bx + n_2, by + n_2, bs,
//000243:                     b_cum, 0, 0, n_2);
//000244:                 strassen_mult_serial(
//000245:                     cancellationToken,
//000246:                     n_2,
//000247:                     a_cum, 0, 0, n_2,
//000248:                     b_cum, 0, 0, n_2,
//000249:                     p1, 0, 0, n_2,
//000250:                     s);
//000251: 
//000252:                 // p2 = (a21 + a22) * b11 
//000253:                 matrix_add(n_2, n_2,
//000254:                     A, ax + n_2, ay, a_s,
//000255:                     A, ax + n_2, ay + n_2, a_s,
//000256:                     a_cum, 0, 0, n_2);
//000257:                 strassen_mult_serial(
//000258:                     cancellationToken,
//000259:                     n_2,
//000260:                     a_cum, 0, 0, n_2,
//000261:                     B, bx, by, bs,
//000262:                     p2, 0, 0, n_2,
//000263:                     s);
//000264: 
//000265:                 // p3 = a11 x (b12 - b22) 
//000266:                 matrix_sub(n_2, n_2,
//000267:                     B, bx, by + n_2, bs,
//000268:                     B, bx + n_2, by + n_2, bs,
//000269:                     b_cum, 0, 0, n_2);
//000270:                 strassen_mult_serial(
//000271:                     cancellationToken,
//000272:                     n_2,
//000273:                     A, ax, ay, a_s,
//000274:                     b_cum, 0, 0, n_2,
//000275:                     p3, 0, 0, n_2,
//000276:                     s);
//000277: 
//000278:                 // p4 = a22 x (b21 - b11) 
//000279:                 matrix_sub(n_2, n_2,
//000280:                     B, bx + n_2, by, bs,
//000281:                     B, bx, by, bs,
//000282:                     b_cum, 0, 0, n_2);
//000283:                 strassen_mult_serial(
//000284:                     cancellationToken,
//000285:                     n_2,
//000286:                     A, ax + n_2, ay + n_2, a_s,
//000287:                     b_cum, 0, 0, n_2,
//000288:                     p4, 0, 0, n_2,
//000289:                     s);
//000290: 
//000291:                 // p5 = (a11 + a12) x b22 
//000292:                 matrix_add(n_2, n_2,
//000293:                     A, ax, ay, a_s,
//000294:                     A, ax, ay + n_2, a_s,
//000295:                     a_cum, 0, 0, n_2);
//000296:                 strassen_mult_serial(
//000297:                     cancellationToken,
//000298:                     n_2,
//000299:                     a_cum, 0, 0, n_2,
//000300:                     B, bx + n_2, by + n_2, bs,
//000301:                     p5, 0, 0, n_2,
//000302:                     s);
//000303: 
//000304:                 // p6 = (a21 - a11) x (b11 + b12) 
//000305:                 matrix_sub(n_2, n_2,
//000306:                     A, ax + n_2, ay, a_s,
//000307:                     A, ax, ay, a_s,
//000308:                     a_cum, 0, 0, n_2);
//000309:                 matrix_add(n_2, n_2,
//000310:                     B, bx, by, bs,
//000311:                     B, bx, by + n_2, bs,
//000312:                     b_cum, 0, 0, n_2);
//000313:                 strassen_mult_serial(
//000314:                     cancellationToken,
//000315:                     n_2,
//000316:                     a_cum, 0, 0, n_2,
//000317:                     b_cum, 0, 0, n_2,
//000318:                     p6, 0, 0, n_2,
//000319:                     s);
//000320: 
//000321:                 // p7 = (a12 - a22) x (b21 + b22) 
//000322:                 matrix_sub(n_2, n_2,
//000323:                     A, ax, ay + n_2, a_s,
//000324:                     A, ax + n_2, ay + n_2, a_s,
//000325:                     a_cum, 0, 0, n_2);
//000326:                 matrix_add(n_2, n_2,
//000327:                     B, bx + n_2, by, bs,
//000328:                     B, bx + n_2, by + n_2, bs,
//000329:                     b_cum, 0, 0, n_2);
//000330:                 strassen_mult_serial(
//000331:                     cancellationToken,
//000332:                     n_2,
//000333:                     a_cum, 0, 0, n_2,
//000334:                     b_cum, 0, 0, n_2,
//000335:                     p7, 0, 0, n_2,
//000336:                     s);
//000337: 
//000338:                 // c11 = p1 + p4 - p5 + p7 
//000339:                 matrix_add(n_2, n_2,
//000340:                     p1, 0, 0, n_2,
//000341:                     p4, 0, 0, n_2,
//000342:                     C, cx, cy, cs);
//000343:                 matrix_sub(n_2, n_2,
//000344:                     C, cx, cy, cs,
//000345:                     p5, 0, 0, n_2,
//000346:                     C, cx, cy, cs);
//000347:                 matrix_add(n_2, n_2,
//000348:                     C, cx, cy, cs,
//000349:                     p7, 0, 0, n_2,
//000350:                     C, cx, cy, cs);
//000351: 
//000352:                 // c12 = p3 + p5 
//000353:                 matrix_add(n_2, n_2,
//000354:                     p3, 0, 0, n_2,
//000355:                     p5, 0, 0, n_2,
//000356:                     C, cx, cy + n_2, cs);
//000357: 
//000358:                 // c21 = p2 + p4 
//000359:                 matrix_add(n_2, n_2,
//000360:                     p2, 0, 0, n_2,
//000361:                     p4, 0, 0, n_2,
//000362:                     C, cx + n_2, cy, cs);
//000363: 
//000364:                 // c22 = p1 + p3 - p2 + p6 
//000365:                 matrix_add(n_2, n_2,
//000366:                     p1, 0, 0, n_2,
//000367:                     p3, 0, 0, n_2,
//000368:                     C, cx + n_2, cy + n_2, cs);
//000369:                 matrix_sub(n_2, n_2,
//000370:                     C, cx + n_2, cy + n_2, cs,
//000371:                     p2, 0, 0, n_2,
//000372:                     C, cx + n_2, cy + n_2, cs);
//000373:                 matrix_add(n_2, n_2,
//000374:                     C, cx + n_2, cy + n_2, cs,
//000375:                     p6, 0, 0, n_2,
//000376:                     C, cx + n_2, cy + n_2, cs);
//000377:             }
//000378:         }
//000379:     }
//000380: 
//000381:     private static void strassen_mult_parallel(
//000382:         CancellationToken cancellationToken, 
//000383:         // dimensions of A, B, and C submatrices 
//000384:         int n,
//000385:         // (ax,ay) = origin of A submatrix for multiplicand 
//000386:         int* A, int ax, int ay, int a_s,
//000387:         // (bx,by) = origin of B submatrix for multiplicand 
//000388:         int* B, int bx, int by, int bs,
//000389:         // (cx,cy) = origin of C submatrix for result 
//000390:         int* C, int cx, int cy, int cs,
//000391:         // Strassen's recursion limit for array dimensions 
//000392:         int s)
//000393:     {
//000394:         if (n <= s)
//000395:         {
//000396:             matrix_mult_serial(
//000397:                 cancellationToken,
//000398:                 n, n, n,
//000399:                 A, ax, ay, a_s,
//000400:                 B, bx, by, bs,
//000401:                 C, cx, cy, cs);
//000402:         }
//000403:         else
//000404:         {
//000405:             int n_2 = n >> 1;
//000406:             int areaSize = n_2 * n_2;
//000407:             int[] workArr = new int[areaSize * 17];
//000408:             fixed (int* work = workArr)
//000409:             {
//000410:                 int* a_cum = work;
//000411:                 int* b_cum = a_cum + areaSize;
//000412:                 int* c_cum = b_cum + areaSize;
//000413:                 int* d_cum = c_cum + areaSize;
//000414:                 int* e_cum = d_cum + areaSize;
//000415:                 int* f_cum = e_cum + areaSize;
//000416:                 int* g_cum = f_cum + areaSize;
//000417:                 int* h_cum = g_cum + areaSize;
//000418:                 int* i_cum = h_cum + areaSize;
//000419:                 int* j_cum = i_cum + areaSize;
//000420:                 int* p1 = j_cum + areaSize;
//000421:                 int* p2 = p1 + areaSize;
//000422:                 int* p3 = p2 + areaSize;
//000423:                 int* p4 = p3 + areaSize;
//000424:                 int* p5 = p4 + areaSize;
//000425:                 int* p6 = p5 + areaSize;
//000426:                 int* p7 = p6 + areaSize;
//000427: 
//000428:                 // p1 = (a11 + a22) * (b11 + b22) 
//000429:                 Task t_p1 = Task.Factory.StartNew(() =>
//000430:                 {
//000431:                     matrix_add(n_2, n_2,
//000432:                         A, ax, ay, a_s,
//000433:                         A, ax + n_2, ay + n_2, a_s,
//000434:                         a_cum, 0, 0, n_2);
//000435:                     matrix_add(n_2, n_2,
//000436:                         B, bx, by, bs,
//000437:                         B, bx + n_2, by + n_2, bs,
//000438:                         b_cum, 0, 0, n_2);
//000439:                     strassen_mult_parallel(
//000440:                         cancellationToken,
//000441:                         n_2,
//000442:                         a_cum, 0, 0, n_2,
//000443:                         b_cum, 0, 0, n_2,
//000444:                         p1, 0, 0, n_2,
//000445:                         s);
//000446:                 }, cancellationToken);
//000447: 
//000448:                 // p2 = (a21 + a22) * b11 
//000449:                 Task t_p2 = Task.Factory.StartNew(() =>
//000450:                 {
//000451:                     matrix_add(n_2, n_2,
//000452:                         A, ax + n_2, ay, a_s,
//000453:                         A, ax + n_2, ay + n_2, a_s,
//000454:                         c_cum, 0, 0, n_2);
//000455:                     strassen_mult_parallel(
//000456:                         cancellationToken,
//000457:                         n_2,
//000458:                         c_cum, 0, 0, n_2,
//000459:                         B, bx, by, bs,
//000460:                         p2, 0, 0, n_2,
//000461:                         s);
//000462:                 }, cancellationToken);
//000463: 
//000464:                 // p3 = a11 x (b12 - b22) 
//000465:                 Task t_p3 = Task.Factory.StartNew(() =>
//000466:                 {
//000467:                     matrix_sub(n_2, n_2,
//000468:                         B, bx, by + n_2, bs,
//000469:                         B, bx + n_2, by + n_2, bs,
//000470:                         d_cum, 0, 0, n_2);
//000471:                     strassen_mult_parallel(
//000472:                         cancellationToken,
//000473:                         n_2,
//000474:                         A, ax, ay, a_s,
//000475:                         d_cum, 0, 0, n_2,
//000476:                         p3, 0, 0, n_2,
//000477:                         s);
//000478:                 }, cancellationToken);
//000479: 
//000480:                 // p4 = a22 x (b21 - b11) 
//000481:                 Task t_p4 = Task.Factory.StartNew(() =>
//000482:                 {
//000483:                     matrix_sub(n_2, n_2,
//000484:                         B, bx + n_2, by, bs,
//000485:                         B, bx, by, bs,
//000486:                         e_cum, 0, 0, n_2);
//000487:                     strassen_mult_parallel(
//000488:                         cancellationToken,
//000489:                         n_2,
//000490:                         A, ax + n_2, ay + n_2, a_s,
//000491:                         e_cum, 0, 0, n_2,
//000492:                         p4, 0, 0, n_2,
//000493:                         s);
//000494:                 }, cancellationToken);
//000495: 
//000496:                 // p5 = (a11 + a12) x b22 
//000497:                 Task t_p5 = Task.Factory.StartNew(() =>
//000498:                 {
//000499:                     matrix_add(n_2, n_2,
//000500:                         A, ax, ay, a_s,
//000501:                         A, ax, ay + n_2, a_s,
//000502:                         f_cum, 0, 0, n_2);
//000503:                     strassen_mult_parallel(
//000504:                         cancellationToken,
//000505:                         n_2,
//000506:                         f_cum, 0, 0, n_2,
//000507:                         B, bx + n_2, by + n_2, bs,
//000508:                         p5, 0, 0, n_2,
//000509:                         s);
//000510:                 }, cancellationToken);
//000511: 
//000512:                 // p6 = (a21 - a11) x (b11 + b12) 
//000513:                 Task t_p6 = Task.Factory.StartNew(() =>
//000514:                 {
//000515:                     matrix_sub(n_2, n_2,
//000516:                         A, ax + n_2, ay, a_s,
//000517:                         A, ax, ay, a_s,
//000518:                         g_cum, 0, 0, n_2);
//000519:                     matrix_add(n_2, n_2,
//000520:                         B, bx, by, bs,
//000521:                         B, bx, by + n_2, bs,
//000522:                         h_cum, 0, 0, n_2);
//000523:                     strassen_mult_parallel(
//000524:                         cancellationToken,
//000525:                         n_2,
//000526:                         g_cum, 0, 0, n_2,
//000527:                         h_cum, 0, 0, n_2,
//000528:                         p6, 0, 0, n_2,
//000529:                         s);
//000530:                 }, cancellationToken);
//000531: 
//000532:                 // p7 = (a12 - a22) x (b21 + b22) 
//000533:                 Task t_p7 = Task.Factory.StartNew(() =>
//000534:                 {
//000535:                     matrix_sub(n_2, n_2,
//000536:                         A, ax, ay + n_2, a_s,
//000537:                         A, ax + n_2, ay + n_2, a_s,
//000538:                         i_cum, 0, 0, n_2);
//000539:                     matrix_add(n_2, n_2,
//000540:                         B, bx + n_2, by, bs,
//000541:                         B, bx + n_2, by + n_2, bs,
//000542:                         j_cum, 0, 0, n_2);
//000543:                     strassen_mult_parallel(
//000544:                         cancellationToken,
//000545:                         n_2,
//000546:                         i_cum, 0, 0, n_2,
//000547:                         j_cum, 0, 0, n_2,
//000548:                         p7, 0, 0, n_2,
//000549:                         s);
//000550:                 }, cancellationToken);
//000551: 
//000552:                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
//000553:                 catch (AggregateException ae)
//000554:                 {
//000555:                     ae.Flatten().Handle(e => e is TaskCanceledException);
//000556:                     cancellationToken.ThrowIfCancellationRequested();
//000557:                 }
//000558: 
//000559:                 // c11 = p1 + p4 - p5 + p7 
//000560:                 Task t_c11 = Task.Factory.StartNew(() =>
//000561:                 {
//000562:                     matrix_add(n_2, n_2,
//000563:                         p1, 0, 0, n_2,
//000564:                         p4, 0, 0, n_2,
//000565:                         C, cx, cy, cs);
//000566:                     matrix_sub(n_2, n_2,
//000567:                         C, cx, cy, cs,
//000568:                         p5, 0, 0, n_2,
//000569:                         C, cx, cy, cs);
//000570:                     matrix_add(n_2, n_2,
//000571:                         C, cx, cy, cs,
//000572:                         p7, 0, 0, n_2,
//000573:                         C, cx, cy, cs);
//000574:                 });
//000575: 
//000576:                 // c12 = p3 + p5 
//000577:                 Task t_c12 = Task.Factory.StartNew(() =>
//000578:                 {
//000579:                     matrix_add(n_2, n_2,
//000580:                         p3, 0, 0, n_2,
//000581:                         p5, 0, 0, n_2,
//000582:                         C, cx, cy + n_2, cs);
//000583:                 });
//000584: 
//000585:                 // c21 = p2 + p4 
//000586:                 Task t_c21 = Task.Factory.StartNew(() =>
//000587:                 {
//000588:                     matrix_add(n_2, n_2,
//000589:                         p2, 0, 0, n_2,
//000590:                         p4, 0, 0, n_2,
//000591:                         C, cx + n_2, cy, cs);
//000592:                 });
//000593: 
//000594:                 // c22 = p1 + p3 - p2 + p6 
//000595:                 Task t_c22 = Task.Factory.StartNew(() =>
//000596:                 {
//000597:                     matrix_add(n_2, n_2,
//000598:                         p1, 0, 0, n_2,
//000599:                         p3, 0, 0, n_2,
//000600:                         C, cx + n_2, cy + n_2, cs);
//000601:                     matrix_sub(n_2, n_2,
//000602:                         C, cx + n_2, cy + n_2, cs,
//000603:                         p2, 0, 0, n_2,
//000604:                         C, cx + n_2, cy + n_2, cs);
//000605:                     matrix_add(n_2, n_2,
//000606:                         C, cx + n_2, cy + n_2, cs,
//000607:                         p6, 0, 0, n_2,
//000608:                         C, cx + n_2, cy + n_2, cs);
//000609:                 });
//000610: 
//000611:                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
//000612:             }
//000613:         }
//000614:     }
//000615: }
    IL_0021:  ldloc.1
    IL_0022:  brtrue.s   IL_002f

//000087:         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
    IL_0024:  ldstr      "src1"
    IL_0029:  newobj     instance void [mscorlib]System.ArgumentOutOfRangeException::.ctor(string)
    IL_002e:  throw

//000088:         int N = src1._size;
    IL_002f:  ldarg.1
    IL_0030:  ldfld      int32 Matrix::_size
    IL_0035:  stloc.0
//000089:         strassen_mult_serial(
    IL_0036:  ldarg.0
    IL_0037:  ldloc.0
    IL_0038:  ldarg.1
    IL_0039:  ldfld      int32* Matrix::_dataPtr
    IL_003e:  ldc.i4.0
    IL_003f:  ldc.i4.0
    IL_0040:  ldloc.0
    IL_0041:  ldarg.2
    IL_0042:  ldfld      int32* Matrix::_dataPtr
    IL_0047:  ldc.i4.0
    IL_0048:  ldc.i4.0
    IL_0049:  ldloc.0
    IL_004a:  ldarg.3
    IL_004b:  ldfld      int32* Matrix::_dataPtr
    IL_0050:  ldc.i4.0
    IL_0051:  ldc.i4.0
    IL_0052:  ldloc.0
    IL_0053:  ldc.i4.s   64
    IL_0055:  call       void Matrix::strassen_mult_serial(valuetype [mscorlib]System.Threading.CancellationToken,
                                                           int32,
                                                           int32*,
                                                           int32,
                                                           int32,
                                                           int32,
                                                           int32*,
                                                           int32,
                                                           int32,
                                                           int32,
                                                           int32*,
                                                           int32,
                                                           int32,
                                                           int32,
                                                           int32)
    IL_005a:  nop
//000090:             cancellationToken,
//000091:             N,
//000092:             src1._dataPtr, 0, 0, N,
//000093:             src2._dataPtr, 0, 0, N,
//000094:             dst._dataPtr, 0, 0, N,
//000095:             64);
//000096:     }
    IL_005b:  ret
  } // end of method Matrix::MultiplyStrassens

  .method public hidebysig static void  MultiplyStrassensParallel(valuetype [mscorlib]System.Threading.CancellationToken cancellationToken,
                                                                  class Matrix src1,
                                                                  class Matrix src2,
                                                                  class Matrix dst) cil managed
  {
    // Code size       92 (0x5c)
    .maxstack  15
    .locals init ([0] int32 N,
             [1] bool CS$4$0000)
//000097: 
//000098:     public static void MultiplyStrassensParallel(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
//000099:     {
    IL_0000:  nop
//000100:         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
    IL_0001:  ldarg.1
    IL_0002:  ldfld      int32 Matrix::_size
    IL_0007:  ldarg.2
    IL_0008:  ldfld      int32 Matrix::_size
    IL_000d:  bne.un.s   IL_001f

    IL_000f:  ldarg.1
    IL_0010:  ldfld      int32 Matrix::_size
    IL_0015:  ldarg.3
    IL_0016:  ldfld      int32 Matrix::_size
    IL_001b:  ceq
    IL_001d:  br.s       IL_0020

    IL_001f:  ldc.i4.0
    IL_0020:  stloc.1
//000101:         int N = src1._size;
//000102:         strassen_mult_parallel(
//000103:             cancellationToken,
//000104:             N,
//000105:             src1._dataPtr, 0, 0, N,
//000106:             src2._dataPtr, 0, 0, N,
//000107:             dst._dataPtr, 0, 0, N,
//000108:             64);
//000109:     }
//000110: 
//000111:     private static void matrix_add( 
//000112:         // dimensions of A, B, and C submatrices 
//000113:         int n, int m,
//000114:         // (ax,ay) = origin of A submatrix for multiplicand 
//000115:         int* A, int ax, int ay, int a_s,
//000116:         // (bx,by) = origin of B submatrix for multiplicand 
//000117:         int* B, int bx, int by, int bs,
//000118:         // (cx,cy) = origin of C submatrix for result 
//000119:         int* C, int cx, int cy, int cs)
//000120:     {
//000121:         for (int i = 0; i < n; i += 1)
//000122:             for (int j = 0; j < m; j += 1)
//000123:                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] + B[(i + bx) * bs + j + by];
//000124:     }
//000125: 
//000126:     private static void matrix_sub(
//000127:         // dimensions of A, B, and C submatrices 
//000128:         int n, int m,
//000129:         // (ax,ay) = origin of A submatrix for multiplicand 
//000130:         int* A, int ax, int ay, int a_s,
//000131:         // (bx,by) = origin of B submatrix for multiplicand 
//000132:         int* B, int bx, int by, int bs,
//000133:         // (cx,cy) = origin of C submatrix for result 
//000134:         int* C, int cx, int cy, int cs)
//000135:     {
//000136:         for (int i = 0; i < n; i += 1)
//000137:         {
//000138:             for (int j = 0; j < m; j += 1)
//000139:             {
//000140:                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] - B[(i + bx) * bs + j + by];
//000141:             }
//000142:         }
//000143:     }
//000144: 
//000145:     private static void matrix_mult_serial(
//000146:         CancellationToken cancellationToken, 
//000147:         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
//000148:         int l, int m, int n,
//000149:         // (ax,ay) = origin of A submatrix for multiplicand 
//000150:         int* A, int ax, int ay, int a_s,
//000151:         // (bx,by) = origin of B submatrix for multiplicand 
//000152:         int* B, int bx, int by, int bs,
//000153:         // (cx,cy) = origin of C submatrix for result 
//000154:         int* C, int cx, int cy, int cs)
//000155:     {
//000156:         for (int i = 0; i < l; ++i)
//000157:         {
//000158:             cancellationToken.ThrowIfCancellationRequested();
//000159:             for (int j = 0; j < n; j++)
//000160:             {
//000161:                 int temp = 0;
//000162:                 for (int k = 0; k < m; k++)
//000163:                 {
//000164:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
//000165:                 }
//000166:                 C[(i + cx) * cs + j + cy] = temp;
//000167:             }
//000168:         }
//000169:     }
//000170: 
//000171:     private static void matrix_mult_parallel(
//000172:         CancellationToken cancellationToken, 
//000173:         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
//000174:         int l, int m, int n,
//000175:         // (ax,ay) = origin of A submatrix for multiplicand 
//000176:         int* A, int ax, int ay, int a_s,
//000177:         // (bx,by) = origin of B submatrix for multiplicand 
//000178:         int* B, int bx, int by, int bs,
//000179:         // (cx,cy) = origin of C submatrix for result 
//000180:         int* C, int cx, int cy, int cs)
//000181:     {
//000182:         ParallelOptions options = new ParallelOptions { CancellationToken = cancellationToken };
//000183:         Parallel.For(0, l, options, i =>
//000184:         {
//000185:             for (int j = 0; j < n; j++)
//000186:             {
//000187:                 int temp = 0;
//000188:                 for (int k = 0; k < m; k++)
//000189:                 {
//000190:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
//000191:                 }
//000192:                 C[(i + cx) * cs + j + cy] = temp;
//000193:             }
//000194:         });
//000195:     }
//000196: 
//000197:     private static void strassen_mult_serial(
//000198:         CancellationToken cancellationToken, 
//000199:         // dimensions of A, B, and C submatrices 
//000200:         int n,
//000201:         // (ax,ay) = origin of A submatrix for multiplicand 
//000202:         int* A, int ax, int ay, int a_s,
//000203:         // (bx,by) = origin of B submatrix for multiplicand 
//000204:         int* B, int bx, int by, int bs,
//000205:         // (cx,cy) = origin of C submatrix for result 
//000206:         int* C, int cx, int cy, int cs,
//000207:         // Strassen's recursion limit for array dimensions 
//000208:         int s)
//000209:     {
//000210:         if (n <= s)
//000211:         {
//000212:             matrix_mult_serial(
//000213:                 cancellationToken,
//000214:                 n, n, n,
//000215:                 A, ax, ay, a_s,
//000216:                 B, bx, by, bs,
//000217:                 C, cx, cy, cs);
//000218:         }
//000219:         else
//000220:         {
//000221:             int n_2 = n >> 1;
//000222:             int[] workArr = new int[n_2 * n_2 * 9];
//000223:             fixed (int* work = workArr)
//000224:             {
//000225:                 int* a_cum = work;
//000226:                 int* b_cum = a_cum + n_2 * n_2;
//000227:                 int* p1 = b_cum + n_2 * n_2;
//000228:                 int* p2 = p1 + n_2 * n_2;
//000229:                 int* p3 = p2 + n_2 * n_2;
//000230:                 int* p4 = p3 + n_2 * n_2;
//000231:                 int* p5 = p4 + n_2 * n_2;
//000232:                 int* p6 = p5 + n_2 * n_2;
//000233:                 int* p7 = p6 + n_2 * n_2;
//000234: 
//000235:                 // p1 = (a11 + a22) * (b11 + b22) 
//000236:                 matrix_add(n_2, n_2,
//000237:                     A, ax, ay, a_s,
//000238:                     A, ax + n_2, ay + n_2, a_s,
//000239:                     a_cum, 0, 0, n_2);
//000240:                 matrix_add(n_2, n_2,
//000241:                     B, bx, by, bs,
//000242:                     B, bx + n_2, by + n_2, bs,
//000243:                     b_cum, 0, 0, n_2);
//000244:                 strassen_mult_serial(
//000245:                     cancellationToken,
//000246:                     n_2,
//000247:                     a_cum, 0, 0, n_2,
//000248:                     b_cum, 0, 0, n_2,
//000249:                     p1, 0, 0, n_2,
//000250:                     s);
//000251: 
//000252:                 // p2 = (a21 + a22) * b11 
//000253:                 matrix_add(n_2, n_2,
//000254:                     A, ax + n_2, ay, a_s,
//000255:                     A, ax + n_2, ay + n_2, a_s,
//000256:                     a_cum, 0, 0, n_2);
//000257:                 strassen_mult_serial(
//000258:                     cancellationToken,
//000259:                     n_2,
//000260:                     a_cum, 0, 0, n_2,
//000261:                     B, bx, by, bs,
//000262:                     p2, 0, 0, n_2,
//000263:                     s);
//000264: 
//000265:                 // p3 = a11 x (b12 - b22) 
//000266:                 matrix_sub(n_2, n_2,
//000267:                     B, bx, by + n_2, bs,
//000268:                     B, bx + n_2, by + n_2, bs,
//000269:                     b_cum, 0, 0, n_2);
//000270:                 strassen_mult_serial(
//000271:                     cancellationToken,
//000272:                     n_2,
//000273:                     A, ax, ay, a_s,
//000274:                     b_cum, 0, 0, n_2,
//000275:                     p3, 0, 0, n_2,
//000276:                     s);
//000277: 
//000278:                 // p4 = a22 x (b21 - b11) 
//000279:                 matrix_sub(n_2, n_2,
//000280:                     B, bx + n_2, by, bs,
//000281:                     B, bx, by, bs,
//000282:                     b_cum, 0, 0, n_2);
//000283:                 strassen_mult_serial(
//000284:                     cancellationToken,
//000285:                     n_2,
//000286:                     A, ax + n_2, ay + n_2, a_s,
//000287:                     b_cum, 0, 0, n_2,
//000288:                     p4, 0, 0, n_2,
//000289:                     s);
//000290: 
//000291:                 // p5 = (a11 + a12) x b22 
//000292:                 matrix_add(n_2, n_2,
//000293:                     A, ax, ay, a_s,
//000294:                     A, ax, ay + n_2, a_s,
//000295:                     a_cum, 0, 0, n_2);
//000296:                 strassen_mult_serial(
//000297:                     cancellationToken,
//000298:                     n_2,
//000299:                     a_cum, 0, 0, n_2,
//000300:                     B, bx + n_2, by + n_2, bs,
//000301:                     p5, 0, 0, n_2,
//000302:                     s);
//000303: 
//000304:                 // p6 = (a21 - a11) x (b11 + b12) 
//000305:                 matrix_sub(n_2, n_2,
//000306:                     A, ax + n_2, ay, a_s,
//000307:                     A, ax, ay, a_s,
//000308:                     a_cum, 0, 0, n_2);
//000309:                 matrix_add(n_2, n_2,
//000310:                     B, bx, by, bs,
//000311:                     B, bx, by + n_2, bs,
//000312:                     b_cum, 0, 0, n_2);
//000313:                 strassen_mult_serial(
//000314:                     cancellationToken,
//000315:                     n_2,
//000316:                     a_cum, 0, 0, n_2,
//000317:                     b_cum, 0, 0, n_2,
//000318:                     p6, 0, 0, n_2,
//000319:                     s);
//000320: 
//000321:                 // p7 = (a12 - a22) x (b21 + b22) 
//000322:                 matrix_sub(n_2, n_2,
//000323:                     A, ax, ay + n_2, a_s,
//000324:                     A, ax + n_2, ay + n_2, a_s,
//000325:                     a_cum, 0, 0, n_2);
//000326:                 matrix_add(n_2, n_2,
//000327:                     B, bx + n_2, by, bs,
//000328:                     B, bx + n_2, by + n_2, bs,
//000329:                     b_cum, 0, 0, n_2);
//000330:                 strassen_mult_serial(
//000331:                     cancellationToken,
//000332:                     n_2,
//000333:                     a_cum, 0, 0, n_2,
//000334:                     b_cum, 0, 0, n_2,
//000335:                     p7, 0, 0, n_2,
//000336:                     s);
//000337: 
//000338:                 // c11 = p1 + p4 - p5 + p7 
//000339:                 matrix_add(n_2, n_2,
//000340:                     p1, 0, 0, n_2,
//000341:                     p4, 0, 0, n_2,
//000342:                     C, cx, cy, cs);
//000343:                 matrix_sub(n_2, n_2,
//000344:                     C, cx, cy, cs,
//000345:                     p5, 0, 0, n_2,
//000346:                     C, cx, cy, cs);
//000347:                 matrix_add(n_2, n_2,
//000348:                     C, cx, cy, cs,
//000349:                     p7, 0, 0, n_2,
//000350:                     C, cx, cy, cs);
//000351: 
//000352:                 // c12 = p3 + p5 
//000353:                 matrix_add(n_2, n_2,
//000354:                     p3, 0, 0, n_2,
//000355:                     p5, 0, 0, n_2,
//000356:                     C, cx, cy + n_2, cs);
//000357: 
//000358:                 // c21 = p2 + p4 
//000359:                 matrix_add(n_2, n_2,
//000360:                     p2, 0, 0, n_2,
//000361:                     p4, 0, 0, n_2,
//000362:                     C, cx + n_2, cy, cs);
//000363: 
//000364:                 // c22 = p1 + p3 - p2 + p6 
//000365:                 matrix_add(n_2, n_2,
//000366:                     p1, 0, 0, n_2,
//000367:                     p3, 0, 0, n_2,
//000368:                     C, cx + n_2, cy + n_2, cs);
//000369:                 matrix_sub(n_2, n_2,
//000370:                     C, cx + n_2, cy + n_2, cs,
//000371:                     p2, 0, 0, n_2,
//000372:                     C, cx + n_2, cy + n_2, cs);
//000373:                 matrix_add(n_2, n_2,
//000374:                     C, cx + n_2, cy + n_2, cs,
//000375:                     p6, 0, 0, n_2,
//000376:                     C, cx + n_2, cy + n_2, cs);
//000377:             }
//000378:         }
//000379:     }
//000380: 
//000381:     private static void strassen_mult_parallel(
//000382:         CancellationToken cancellationToken, 
//000383:         // dimensions of A, B, and C submatrices 
//000384:         int n,
//000385:         // (ax,ay) = origin of A submatrix for multiplicand 
//000386:         int* A, int ax, int ay, int a_s,
//000387:         // (bx,by) = origin of B submatrix for multiplicand 
//000388:         int* B, int bx, int by, int bs,
//000389:         // (cx,cy) = origin of C submatrix for result 
//000390:         int* C, int cx, int cy, int cs,
//000391:         // Strassen's recursion limit for array dimensions 
//000392:         int s)
//000393:     {
//000394:         if (n <= s)
//000395:         {
//000396:             matrix_mult_serial(
//000397:                 cancellationToken,
//000398:                 n, n, n,
//000399:                 A, ax, ay, a_s,
//000400:                 B, bx, by, bs,
//000401:                 C, cx, cy, cs);
//000402:         }
//000403:         else
//000404:         {
//000405:             int n_2 = n >> 1;
//000406:             int areaSize = n_2 * n_2;
//000407:             int[] workArr = new int[areaSize * 17];
//000408:             fixed (int* work = workArr)
//000409:             {
//000410:                 int* a_cum = work;
//000411:                 int* b_cum = a_cum + areaSize;
//000412:                 int* c_cum = b_cum + areaSize;
//000413:                 int* d_cum = c_cum + areaSize;
//000414:                 int* e_cum = d_cum + areaSize;
//000415:                 int* f_cum = e_cum + areaSize;
//000416:                 int* g_cum = f_cum + areaSize;
//000417:                 int* h_cum = g_cum + areaSize;
//000418:                 int* i_cum = h_cum + areaSize;
//000419:                 int* j_cum = i_cum + areaSize;
//000420:                 int* p1 = j_cum + areaSize;
//000421:                 int* p2 = p1 + areaSize;
//000422:                 int* p3 = p2 + areaSize;
//000423:                 int* p4 = p3 + areaSize;
//000424:                 int* p5 = p4 + areaSize;
//000425:                 int* p6 = p5 + areaSize;
//000426:                 int* p7 = p6 + areaSize;
//000427: 
//000428:                 // p1 = (a11 + a22) * (b11 + b22) 
//000429:                 Task t_p1 = Task.Factory.StartNew(() =>
//000430:                 {
//000431:                     matrix_add(n_2, n_2,
//000432:                         A, ax, ay, a_s,
//000433:                         A, ax + n_2, ay + n_2, a_s,
//000434:                         a_cum, 0, 0, n_2);
//000435:                     matrix_add(n_2, n_2,
//000436:                         B, bx, by, bs,
//000437:                         B, bx + n_2, by + n_2, bs,
//000438:                         b_cum, 0, 0, n_2);
//000439:                     strassen_mult_parallel(
//000440:                         cancellationToken,
//000441:                         n_2,
//000442:                         a_cum, 0, 0, n_2,
//000443:                         b_cum, 0, 0, n_2,
//000444:                         p1, 0, 0, n_2,
//000445:                         s);
//000446:                 }, cancellationToken);
//000447: 
//000448:                 // p2 = (a21 + a22) * b11 
//000449:                 Task t_p2 = Task.Factory.StartNew(() =>
//000450:                 {
//000451:                     matrix_add(n_2, n_2,
//000452:                         A, ax + n_2, ay, a_s,
//000453:                         A, ax + n_2, ay + n_2, a_s,
//000454:                         c_cum, 0, 0, n_2);
//000455:                     strassen_mult_parallel(
//000456:                         cancellationToken,
//000457:                         n_2,
//000458:                         c_cum, 0, 0, n_2,
//000459:                         B, bx, by, bs,
//000460:                         p2, 0, 0, n_2,
//000461:                         s);
//000462:                 }, cancellationToken);
//000463: 
//000464:                 // p3 = a11 x (b12 - b22) 
//000465:                 Task t_p3 = Task.Factory.StartNew(() =>
//000466:                 {
//000467:                     matrix_sub(n_2, n_2,
//000468:                         B, bx, by + n_2, bs,
//000469:                         B, bx + n_2, by + n_2, bs,
//000470:                         d_cum, 0, 0, n_2);
//000471:                     strassen_mult_parallel(
//000472:                         cancellationToken,
//000473:                         n_2,
//000474:                         A, ax, ay, a_s,
//000475:                         d_cum, 0, 0, n_2,
//000476:                         p3, 0, 0, n_2,
//000477:                         s);
//000478:                 }, cancellationToken);
//000479: 
//000480:                 // p4 = a22 x (b21 - b11) 
//000481:                 Task t_p4 = Task.Factory.StartNew(() =>
//000482:                 {
//000483:                     matrix_sub(n_2, n_2,
//000484:                         B, bx + n_2, by, bs,
//000485:                         B, bx, by, bs,
//000486:                         e_cum, 0, 0, n_2);
//000487:                     strassen_mult_parallel(
//000488:                         cancellationToken,
//000489:                         n_2,
//000490:                         A, ax + n_2, ay + n_2, a_s,
//000491:                         e_cum, 0, 0, n_2,
//000492:                         p4, 0, 0, n_2,
//000493:                         s);
//000494:                 }, cancellationToken);
//000495: 
//000496:                 // p5 = (a11 + a12) x b22 
//000497:                 Task t_p5 = Task.Factory.StartNew(() =>
//000498:                 {
//000499:                     matrix_add(n_2, n_2,
//000500:                         A, ax, ay, a_s,
//000501:                         A, ax, ay + n_2, a_s,
//000502:                         f_cum, 0, 0, n_2);
//000503:                     strassen_mult_parallel(
//000504:                         cancellationToken,
//000505:                         n_2,
//000506:                         f_cum, 0, 0, n_2,
//000507:                         B, bx + n_2, by + n_2, bs,
//000508:                         p5, 0, 0, n_2,
//000509:                         s);
//000510:                 }, cancellationToken);
//000511: 
//000512:                 // p6 = (a21 - a11) x (b11 + b12) 
//000513:                 Task t_p6 = Task.Factory.StartNew(() =>
//000514:                 {
//000515:                     matrix_sub(n_2, n_2,
//000516:                         A, ax + n_2, ay, a_s,
//000517:                         A, ax, ay, a_s,
//000518:                         g_cum, 0, 0, n_2);
//000519:                     matrix_add(n_2, n_2,
//000520:                         B, bx, by, bs,
//000521:                         B, bx, by + n_2, bs,
//000522:                         h_cum, 0, 0, n_2);
//000523:                     strassen_mult_parallel(
//000524:                         cancellationToken,
//000525:                         n_2,
//000526:                         g_cum, 0, 0, n_2,
//000527:                         h_cum, 0, 0, n_2,
//000528:                         p6, 0, 0, n_2,
//000529:                         s);
//000530:                 }, cancellationToken);
//000531: 
//000532:                 // p7 = (a12 - a22) x (b21 + b22) 
//000533:                 Task t_p7 = Task.Factory.StartNew(() =>
//000534:                 {
//000535:                     matrix_sub(n_2, n_2,
//000536:                         A, ax, ay + n_2, a_s,
//000537:                         A, ax + n_2, ay + n_2, a_s,
//000538:                         i_cum, 0, 0, n_2);
//000539:                     matrix_add(n_2, n_2,
//000540:                         B, bx + n_2, by, bs,
//000541:                         B, bx + n_2, by + n_2, bs,
//000542:                         j_cum, 0, 0, n_2);
//000543:                     strassen_mult_parallel(
//000544:                         cancellationToken,
//000545:                         n_2,
//000546:                         i_cum, 0, 0, n_2,
//000547:                         j_cum, 0, 0, n_2,
//000548:                         p7, 0, 0, n_2,
//000549:                         s);
//000550:                 }, cancellationToken);
//000551: 
//000552:                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
//000553:                 catch (AggregateException ae)
//000554:                 {
//000555:                     ae.Flatten().Handle(e => e is TaskCanceledException);
//000556:                     cancellationToken.ThrowIfCancellationRequested();
//000557:                 }
//000558: 
//000559:                 // c11 = p1 + p4 - p5 + p7 
//000560:                 Task t_c11 = Task.Factory.StartNew(() =>
//000561:                 {
//000562:                     matrix_add(n_2, n_2,
//000563:                         p1, 0, 0, n_2,
//000564:                         p4, 0, 0, n_2,
//000565:                         C, cx, cy, cs);
//000566:                     matrix_sub(n_2, n_2,
//000567:                         C, cx, cy, cs,
//000568:                         p5, 0, 0, n_2,
//000569:                         C, cx, cy, cs);
//000570:                     matrix_add(n_2, n_2,
//000571:                         C, cx, cy, cs,
//000572:                         p7, 0, 0, n_2,
//000573:                         C, cx, cy, cs);
//000574:                 });
//000575: 
//000576:                 // c12 = p3 + p5 
//000577:                 Task t_c12 = Task.Factory.StartNew(() =>
//000578:                 {
//000579:                     matrix_add(n_2, n_2,
//000580:                         p3, 0, 0, n_2,
//000581:                         p5, 0, 0, n_2,
//000582:                         C, cx, cy + n_2, cs);
//000583:                 });
//000584: 
//000585:                 // c21 = p2 + p4 
//000586:                 Task t_c21 = Task.Factory.StartNew(() =>
//000587:                 {
//000588:                     matrix_add(n_2, n_2,
//000589:                         p2, 0, 0, n_2,
//000590:                         p4, 0, 0, n_2,
//000591:                         C, cx + n_2, cy, cs);
//000592:                 });
//000593: 
//000594:                 // c22 = p1 + p3 - p2 + p6 
//000595:                 Task t_c22 = Task.Factory.StartNew(() =>
//000596:                 {
//000597:                     matrix_add(n_2, n_2,
//000598:                         p1, 0, 0, n_2,
//000599:                         p3, 0, 0, n_2,
//000600:                         C, cx + n_2, cy + n_2, cs);
//000601:                     matrix_sub(n_2, n_2,
//000602:                         C, cx + n_2, cy + n_2, cs,
//000603:                         p2, 0, 0, n_2,
//000604:                         C, cx + n_2, cy + n_2, cs);
//000605:                     matrix_add(n_2, n_2,
//000606:                         C, cx + n_2, cy + n_2, cs,
//000607:                         p6, 0, 0, n_2,
//000608:                         C, cx + n_2, cy + n_2, cs);
//000609:                 });
//000610: 
//000611:                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
//000612:             }
//000613:         }
//000614:     }
//000615: }
    IL_0021:  ldloc.1
    IL_0022:  brtrue.s   IL_002f

//000100:         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
    IL_0024:  ldstr      "src1"
    IL_0029:  newobj     instance void [mscorlib]System.ArgumentOutOfRangeException::.ctor(string)
    IL_002e:  throw

//000101:         int N = src1._size;
    IL_002f:  ldarg.1
    IL_0030:  ldfld      int32 Matrix::_size
    IL_0035:  stloc.0
//000102:         strassen_mult_parallel(
    IL_0036:  ldarg.0
    IL_0037:  ldloc.0
    IL_0038:  ldarg.1
    IL_0039:  ldfld      int32* Matrix::_dataPtr
    IL_003e:  ldc.i4.0
    IL_003f:  ldc.i4.0
    IL_0040:  ldloc.0
    IL_0041:  ldarg.2
    IL_0042:  ldfld      int32* Matrix::_dataPtr
    IL_0047:  ldc.i4.0
    IL_0048:  ldc.i4.0
    IL_0049:  ldloc.0
    IL_004a:  ldarg.3
    IL_004b:  ldfld      int32* Matrix::_dataPtr
    IL_0050:  ldc.i4.0
    IL_0051:  ldc.i4.0
    IL_0052:  ldloc.0
    IL_0053:  ldc.i4.s   64
    IL_0055:  call       void Matrix::strassen_mult_parallel(valuetype [mscorlib]System.Threading.CancellationToken,
                                                             int32,
                                                             int32*,
                                                             int32,
                                                             int32,
                                                             int32,
                                                             int32*,
                                                             int32,
                                                             int32,
                                                             int32,
                                                             int32*,
                                                             int32,
                                                             int32,
                                                             int32,
                                                             int32)
    IL_005a:  nop
//000103:             cancellationToken,
//000104:             N,
//000105:             src1._dataPtr, 0, 0, N,
//000106:             src2._dataPtr, 0, 0, N,
//000107:             dst._dataPtr, 0, 0, N,
//000108:             64);
//000109:     }
    IL_005b:  ret
  } // end of method Matrix::MultiplyStrassensParallel

  .method private hidebysig static void  matrix_add(int32 n,
                                                    int32 m,
                                                    int32* A,
                                                    int32 ax,
                                                    int32 ay,
                                                    int32 a_s,
                                                    int32* B,
                                                    int32 bx,
                                                    int32 by,
                                                    int32 bs,
                                                    int32* C,
                                                    int32 cx,
                                                    int32 cy,
                                                    int32 cs) cil managed
  {
    // Code size       90 (0x5a)
    .maxstack  5
    .locals init ([0] int32 i,
             [1] int32 j,
             [2] bool CS$4$0000)
//000110: 
//000111:     private static void matrix_add( 
//000112:         // dimensions of A, B, and C submatrices 
//000113:         int n, int m,
//000114:         // (ax,ay) = origin of A submatrix for multiplicand 
//000115:         int* A, int ax, int ay, int a_s,
//000116:         // (bx,by) = origin of B submatrix for multiplicand 
//000117:         int* B, int bx, int by, int bs,
//000118:         // (cx,cy) = origin of C submatrix for result 
//000119:         int* C, int cx, int cy, int cs)
//000120:     {
    IL_0000:  nop
//000121:         for (int i = 0; i < n; i += 1)
    IL_0001:  ldc.i4.0
    IL_0002:  stloc.0
//000122:             for (int j = 0; j < m; j += 1)
//000123:                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] + B[(i + bx) * bs + j + by];
//000124:     }
//000125: 
//000126:     private static void matrix_sub(
//000127:         // dimensions of A, B, and C submatrices 
//000128:         int n, int m,
//000129:         // (ax,ay) = origin of A submatrix for multiplicand 
//000130:         int* A, int ax, int ay, int a_s,
//000131:         // (bx,by) = origin of B submatrix for multiplicand 
//000132:         int* B, int bx, int by, int bs,
//000133:         // (cx,cy) = origin of C submatrix for result 
//000134:         int* C, int cx, int cy, int cs)
//000135:     {
//000136:         for (int i = 0; i < n; i += 1)
//000137:         {
//000138:             for (int j = 0; j < m; j += 1)
//000139:             {
//000140:                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] - B[(i + bx) * bs + j + by];
//000141:             }
//000142:         }
//000143:     }
//000144: 
//000145:     private static void matrix_mult_serial(
//000146:         CancellationToken cancellationToken, 
//000147:         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
//000148:         int l, int m, int n,
//000149:         // (ax,ay) = origin of A submatrix for multiplicand 
//000150:         int* A, int ax, int ay, int a_s,
//000151:         // (bx,by) = origin of B submatrix for multiplicand 
//000152:         int* B, int bx, int by, int bs,
//000153:         // (cx,cy) = origin of C submatrix for result 
//000154:         int* C, int cx, int cy, int cs)
//000155:     {
//000156:         for (int i = 0; i < l; ++i)
//000157:         {
//000158:             cancellationToken.ThrowIfCancellationRequested();
//000159:             for (int j = 0; j < n; j++)
//000160:             {
//000161:                 int temp = 0;
//000162:                 for (int k = 0; k < m; k++)
//000163:                 {
//000164:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
//000165:                 }
//000166:                 C[(i + cx) * cs + j + cy] = temp;
//000167:             }
//000168:         }
//000169:     }
//000170: 
//000171:     private static void matrix_mult_parallel(
//000172:         CancellationToken cancellationToken, 
//000173:         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
//000174:         int l, int m, int n,
//000175:         // (ax,ay) = origin of A submatrix for multiplicand 
//000176:         int* A, int ax, int ay, int a_s,
//000177:         // (bx,by) = origin of B submatrix for multiplicand 
//000178:         int* B, int bx, int by, int bs,
//000179:         // (cx,cy) = origin of C submatrix for result 
//000180:         int* C, int cx, int cy, int cs)
//000181:     {
//000182:         ParallelOptions options = new ParallelOptions { CancellationToken = cancellationToken };
//000183:         Parallel.For(0, l, options, i =>
//000184:         {
//000185:             for (int j = 0; j < n; j++)
//000186:             {
//000187:                 int temp = 0;
//000188:                 for (int k = 0; k < m; k++)
//000189:                 {
//000190:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
//000191:                 }
//000192:                 C[(i + cx) * cs + j + cy] = temp;
//000193:             }
//000194:         });
//000195:     }
//000196: 
//000197:     private static void strassen_mult_serial(
//000198:         CancellationToken cancellationToken, 
//000199:         // dimensions of A, B, and C submatrices 
//000200:         int n,
//000201:         // (ax,ay) = origin of A submatrix for multiplicand 
//000202:         int* A, int ax, int ay, int a_s,
//000203:         // (bx,by) = origin of B submatrix for multiplicand 
//000204:         int* B, int bx, int by, int bs,
//000205:         // (cx,cy) = origin of C submatrix for result 
//000206:         int* C, int cx, int cy, int cs,
//000207:         // Strassen's recursion limit for array dimensions 
//000208:         int s)
//000209:     {
//000210:         if (n <= s)
//000211:         {
//000212:             matrix_mult_serial(
//000213:                 cancellationToken,
//000214:                 n, n, n,
//000215:                 A, ax, ay, a_s,
//000216:                 B, bx, by, bs,
//000217:                 C, cx, cy, cs);
//000218:         }
//000219:         else
//000220:         {
//000221:             int n_2 = n >> 1;
//000222:             int[] workArr = new int[n_2 * n_2 * 9];
//000223:             fixed (int* work = workArr)
//000224:             {
//000225:                 int* a_cum = work;
//000226:                 int* b_cum = a_cum + n_2 * n_2;
//000227:                 int* p1 = b_cum + n_2 * n_2;
//000228:                 int* p2 = p1 + n_2 * n_2;
//000229:                 int* p3 = p2 + n_2 * n_2;
//000230:                 int* p4 = p3 + n_2 * n_2;
//000231:                 int* p5 = p4 + n_2 * n_2;
//000232:                 int* p6 = p5 + n_2 * n_2;
//000233:                 int* p7 = p6 + n_2 * n_2;
//000234: 
//000235:                 // p1 = (a11 + a22) * (b11 + b22) 
//000236:                 matrix_add(n_2, n_2,
//000237:                     A, ax, ay, a_s,
//000238:                     A, ax + n_2, ay + n_2, a_s,
//000239:                     a_cum, 0, 0, n_2);
//000240:                 matrix_add(n_2, n_2,
//000241:                     B, bx, by, bs,
//000242:                     B, bx + n_2, by + n_2, bs,
//000243:                     b_cum, 0, 0, n_2);
//000244:                 strassen_mult_serial(
//000245:                     cancellationToken,
//000246:                     n_2,
//000247:                     a_cum, 0, 0, n_2,
//000248:                     b_cum, 0, 0, n_2,
//000249:                     p1, 0, 0, n_2,
//000250:                     s);
//000251: 
//000252:                 // p2 = (a21 + a22) * b11 
//000253:                 matrix_add(n_2, n_2,
//000254:                     A, ax + n_2, ay, a_s,
//000255:                     A, ax + n_2, ay + n_2, a_s,
//000256:                     a_cum, 0, 0, n_2);
//000257:                 strassen_mult_serial(
//000258:                     cancellationToken,
//000259:                     n_2,
//000260:                     a_cum, 0, 0, n_2,
//000261:                     B, bx, by, bs,
//000262:                     p2, 0, 0, n_2,
//000263:                     s);
//000264: 
//000265:                 // p3 = a11 x (b12 - b22) 
//000266:                 matrix_sub(n_2, n_2,
//000267:                     B, bx, by + n_2, bs,
//000268:                     B, bx + n_2, by + n_2, bs,
//000269:                     b_cum, 0, 0, n_2);
//000270:                 strassen_mult_serial(
//000271:                     cancellationToken,
//000272:                     n_2,
//000273:                     A, ax, ay, a_s,
//000274:                     b_cum, 0, 0, n_2,
//000275:                     p3, 0, 0, n_2,
//000276:                     s);
//000277: 
//000278:                 // p4 = a22 x (b21 - b11) 
//000279:                 matrix_sub(n_2, n_2,
//000280:                     B, bx + n_2, by, bs,
//000281:                     B, bx, by, bs,
//000282:                     b_cum, 0, 0, n_2);
//000283:                 strassen_mult_serial(
//000284:                     cancellationToken,
//000285:                     n_2,
//000286:                     A, ax + n_2, ay + n_2, a_s,
//000287:                     b_cum, 0, 0, n_2,
//000288:                     p4, 0, 0, n_2,
//000289:                     s);
//000290: 
//000291:                 // p5 = (a11 + a12) x b22 
//000292:                 matrix_add(n_2, n_2,
//000293:                     A, ax, ay, a_s,
//000294:                     A, ax, ay + n_2, a_s,
//000295:                     a_cum, 0, 0, n_2);
//000296:                 strassen_mult_serial(
//000297:                     cancellationToken,
//000298:                     n_2,
//000299:                     a_cum, 0, 0, n_2,
//000300:                     B, bx + n_2, by + n_2, bs,
//000301:                     p5, 0, 0, n_2,
//000302:                     s);
//000303: 
//000304:                 // p6 = (a21 - a11) x (b11 + b12) 
//000305:                 matrix_sub(n_2, n_2,
//000306:                     A, ax + n_2, ay, a_s,
//000307:                     A, ax, ay, a_s,
//000308:                     a_cum, 0, 0, n_2);
//000309:                 matrix_add(n_2, n_2,
//000310:                     B, bx, by, bs,
//000311:                     B, bx, by + n_2, bs,
//000312:                     b_cum, 0, 0, n_2);
//000313:                 strassen_mult_serial(
//000314:                     cancellationToken,
//000315:                     n_2,
//000316:                     a_cum, 0, 0, n_2,
//000317:                     b_cum, 0, 0, n_2,
//000318:                     p6, 0, 0, n_2,
//000319:                     s);
//000320: 
//000321:                 // p7 = (a12 - a22) x (b21 + b22) 
//000322:                 matrix_sub(n_2, n_2,
//000323:                     A, ax, ay + n_2, a_s,
//000324:                     A, ax + n_2, ay + n_2, a_s,
//000325:                     a_cum, 0, 0, n_2);
//000326:                 matrix_add(n_2, n_2,
//000327:                     B, bx + n_2, by, bs,
//000328:                     B, bx + n_2, by + n_2, bs,
//000329:                     b_cum, 0, 0, n_2);
//000330:                 strassen_mult_serial(
//000331:                     cancellationToken,
//000332:                     n_2,
//000333:                     a_cum, 0, 0, n_2,
//000334:                     b_cum, 0, 0, n_2,
//000335:                     p7, 0, 0, n_2,
//000336:                     s);
//000337: 
//000338:                 // c11 = p1 + p4 - p5 + p7 
//000339:                 matrix_add(n_2, n_2,
//000340:                     p1, 0, 0, n_2,
//000341:                     p4, 0, 0, n_2,
//000342:                     C, cx, cy, cs);
//000343:                 matrix_sub(n_2, n_2,
//000344:                     C, cx, cy, cs,
//000345:                     p5, 0, 0, n_2,
//000346:                     C, cx, cy, cs);
//000347:                 matrix_add(n_2, n_2,
//000348:                     C, cx, cy, cs,
//000349:                     p7, 0, 0, n_2,
//000350:                     C, cx, cy, cs);
//000351: 
//000352:                 // c12 = p3 + p5 
//000353:                 matrix_add(n_2, n_2,
//000354:                     p3, 0, 0, n_2,
//000355:                     p5, 0, 0, n_2,
//000356:                     C, cx, cy + n_2, cs);
//000357: 
//000358:                 // c21 = p2 + p4 
//000359:                 matrix_add(n_2, n_2,
//000360:                     p2, 0, 0, n_2,
//000361:                     p4, 0, 0, n_2,
//000362:                     C, cx + n_2, cy, cs);
//000363: 
//000364:                 // c22 = p1 + p3 - p2 + p6 
//000365:                 matrix_add(n_2, n_2,
//000366:                     p1, 0, 0, n_2,
//000367:                     p3, 0, 0, n_2,
//000368:                     C, cx + n_2, cy + n_2, cs);
//000369:                 matrix_sub(n_2, n_2,
//000370:                     C, cx + n_2, cy + n_2, cs,
//000371:                     p2, 0, 0, n_2,
//000372:                     C, cx + n_2, cy + n_2, cs);
//000373:                 matrix_add(n_2, n_2,
//000374:                     C, cx + n_2, cy + n_2, cs,
//000375:                     p6, 0, 0, n_2,
//000376:                     C, cx + n_2, cy + n_2, cs);
//000377:             }
//000378:         }
//000379:     }
//000380: 
//000381:     private static void strassen_mult_parallel(
//000382:         CancellationToken cancellationToken, 
//000383:         // dimensions of A, B, and C submatrices 
//000384:         int n,
//000385:         // (ax,ay) = origin of A submatrix for multiplicand 
//000386:         int* A, int ax, int ay, int a_s,
//000387:         // (bx,by) = origin of B submatrix for multiplicand 
//000388:         int* B, int bx, int by, int bs,
//000389:         // (cx,cy) = origin of C submatrix for result 
//000390:         int* C, int cx, int cy, int cs,
//000391:         // Strassen's recursion limit for array dimensions 
//000392:         int s)
//000393:     {
//000394:         if (n <= s)
//000395:         {
//000396:             matrix_mult_serial(
//000397:                 cancellationToken,
//000398:                 n, n, n,
//000399:                 A, ax, ay, a_s,
//000400:                 B, bx, by, bs,
//000401:                 C, cx, cy, cs);
//000402:         }
//000403:         else
//000404:         {
//000405:             int n_2 = n >> 1;
//000406:             int areaSize = n_2 * n_2;
//000407:             int[] workArr = new int[areaSize * 17];
//000408:             fixed (int* work = workArr)
//000409:             {
//000410:                 int* a_cum = work;
//000411:                 int* b_cum = a_cum + areaSize;
//000412:                 int* c_cum = b_cum + areaSize;
//000413:                 int* d_cum = c_cum + areaSize;
//000414:                 int* e_cum = d_cum + areaSize;
//000415:                 int* f_cum = e_cum + areaSize;
//000416:                 int* g_cum = f_cum + areaSize;
//000417:                 int* h_cum = g_cum + areaSize;
//000418:                 int* i_cum = h_cum + areaSize;
//000419:                 int* j_cum = i_cum + areaSize;
//000420:                 int* p1 = j_cum + areaSize;
//000421:                 int* p2 = p1 + areaSize;
//000422:                 int* p3 = p2 + areaSize;
//000423:                 int* p4 = p3 + areaSize;
//000424:                 int* p5 = p4 + areaSize;
//000425:                 int* p6 = p5 + areaSize;
//000426:                 int* p7 = p6 + areaSize;
//000427: 
//000428:                 // p1 = (a11 + a22) * (b11 + b22) 
//000429:                 Task t_p1 = Task.Factory.StartNew(() =>
//000430:                 {
//000431:                     matrix_add(n_2, n_2,
//000432:                         A, ax, ay, a_s,
//000433:                         A, ax + n_2, ay + n_2, a_s,
//000434:                         a_cum, 0, 0, n_2);
//000435:                     matrix_add(n_2, n_2,
//000436:                         B, bx, by, bs,
//000437:                         B, bx + n_2, by + n_2, bs,
//000438:                         b_cum, 0, 0, n_2);
//000439:                     strassen_mult_parallel(
//000440:                         cancellationToken,
//000441:                         n_2,
//000442:                         a_cum, 0, 0, n_2,
//000443:                         b_cum, 0, 0, n_2,
//000444:                         p1, 0, 0, n_2,
//000445:                         s);
//000446:                 }, cancellationToken);
//000447: 
//000448:                 // p2 = (a21 + a22) * b11 
//000449:                 Task t_p2 = Task.Factory.StartNew(() =>
//000450:                 {
//000451:                     matrix_add(n_2, n_2,
//000452:                         A, ax + n_2, ay, a_s,
//000453:                         A, ax + n_2, ay + n_2, a_s,
//000454:                         c_cum, 0, 0, n_2);
//000455:                     strassen_mult_parallel(
//000456:                         cancellationToken,
//000457:                         n_2,
//000458:                         c_cum, 0, 0, n_2,
//000459:                         B, bx, by, bs,
//000460:                         p2, 0, 0, n_2,
//000461:                         s);
//000462:                 }, cancellationToken);
//000463: 
//000464:                 // p3 = a11 x (b12 - b22) 
//000465:                 Task t_p3 = Task.Factory.StartNew(() =>
//000466:                 {
//000467:                     matrix_sub(n_2, n_2,
//000468:                         B, bx, by + n_2, bs,
//000469:                         B, bx + n_2, by + n_2, bs,
//000470:                         d_cum, 0, 0, n_2);
//000471:                     strassen_mult_parallel(
//000472:                         cancellationToken,
//000473:                         n_2,
//000474:                         A, ax, ay, a_s,
//000475:                         d_cum, 0, 0, n_2,
//000476:                         p3, 0, 0, n_2,
//000477:                         s);
//000478:                 }, cancellationToken);
//000479: 
//000480:                 // p4 = a22 x (b21 - b11) 
//000481:                 Task t_p4 = Task.Factory.StartNew(() =>
//000482:                 {
//000483:                     matrix_sub(n_2, n_2,
//000484:                         B, bx + n_2, by, bs,
//000485:                         B, bx, by, bs,
//000486:                         e_cum, 0, 0, n_2);
//000487:                     strassen_mult_parallel(
//000488:                         cancellationToken,
//000489:                         n_2,
//000490:                         A, ax + n_2, ay + n_2, a_s,
//000491:                         e_cum, 0, 0, n_2,
//000492:                         p4, 0, 0, n_2,
//000493:                         s);
//000494:                 }, cancellationToken);
//000495: 
//000496:                 // p5 = (a11 + a12) x b22 
//000497:                 Task t_p5 = Task.Factory.StartNew(() =>
//000498:                 {
//000499:                     matrix_add(n_2, n_2,
//000500:                         A, ax, ay, a_s,
//000501:                         A, ax, ay + n_2, a_s,
//000502:                         f_cum, 0, 0, n_2);
//000503:                     strassen_mult_parallel(
//000504:                         cancellationToken,
//000505:                         n_2,
//000506:                         f_cum, 0, 0, n_2,
//000507:                         B, bx + n_2, by + n_2, bs,
//000508:                         p5, 0, 0, n_2,
//000509:                         s);
//000510:                 }, cancellationToken);
//000511: 
//000512:                 // p6 = (a21 - a11) x (b11 + b12) 
//000513:                 Task t_p6 = Task.Factory.StartNew(() =>
//000514:                 {
//000515:                     matrix_sub(n_2, n_2,
//000516:                         A, ax + n_2, ay, a_s,
//000517:                         A, ax, ay, a_s,
//000518:                         g_cum, 0, 0, n_2);
//000519:                     matrix_add(n_2, n_2,
//000520:                         B, bx, by, bs,
//000521:                         B, bx, by + n_2, bs,
//000522:                         h_cum, 0, 0, n_2);
//000523:                     strassen_mult_parallel(
//000524:                         cancellationToken,
//000525:                         n_2,
//000526:                         g_cum, 0, 0, n_2,
//000527:                         h_cum, 0, 0, n_2,
//000528:                         p6, 0, 0, n_2,
//000529:                         s);
//000530:                 }, cancellationToken);
//000531: 
//000532:                 // p7 = (a12 - a22) x (b21 + b22) 
//000533:                 Task t_p7 = Task.Factory.StartNew(() =>
//000534:                 {
//000535:                     matrix_sub(n_2, n_2,
//000536:                         A, ax, ay + n_2, a_s,
//000537:                         A, ax + n_2, ay + n_2, a_s,
//000538:                         i_cum, 0, 0, n_2);
//000539:                     matrix_add(n_2, n_2,
//000540:                         B, bx + n_2, by, bs,
//000541:                         B, bx + n_2, by + n_2, bs,
//000542:                         j_cum, 0, 0, n_2);
//000543:                     strassen_mult_parallel(
//000544:                         cancellationToken,
//000545:                         n_2,
//000546:                         i_cum, 0, 0, n_2,
//000547:                         j_cum, 0, 0, n_2,
//000548:                         p7, 0, 0, n_2,
//000549:                         s);
//000550:                 }, cancellationToken);
//000551: 
//000552:                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
//000553:                 catch (AggregateException ae)
//000554:                 {
//000555:                     ae.Flatten().Handle(e => e is TaskCanceledException);
//000556:                     cancellationToken.ThrowIfCancellationRequested();
//000557:                 }
//000558: 
//000559:                 // c11 = p1 + p4 - p5 + p7 
//000560:                 Task t_c11 = Task.Factory.StartNew(() =>
//000561:                 {
//000562:                     matrix_add(n_2, n_2,
//000563:                         p1, 0, 0, n_2,
//000564:                         p4, 0, 0, n_2,
//000565:                         C, cx, cy, cs);
//000566:                     matrix_sub(n_2, n_2,
//000567:                         C, cx, cy, cs,
//000568:                         p5, 0, 0, n_2,
//000569:                         C, cx, cy, cs);
//000570:                     matrix_add(n_2, n_2,
//000571:                         C, cx, cy, cs,
//000572:                         p7, 0, 0, n_2,
//000573:                         C, cx, cy, cs);
//000574:                 });
//000575: 
//000576:                 // c12 = p3 + p5 
//000577:                 Task t_c12 = Task.Factory.StartNew(() =>
//000578:                 {
//000579:                     matrix_add(n_2, n_2,
//000580:                         p3, 0, 0, n_2,
//000581:                         p5, 0, 0, n_2,
//000582:                         C, cx, cy + n_2, cs);
//000583:                 });
//000584: 
//000585:                 // c21 = p2 + p4 
//000586:                 Task t_c21 = Task.Factory.StartNew(() =>
//000587:                 {
//000588:                     matrix_add(n_2, n_2,
//000589:                         p2, 0, 0, n_2,
//000590:                         p4, 0, 0, n_2,
//000591:                         C, cx + n_2, cy, cs);
//000592:                 });
//000593: 
//000594:                 // c22 = p1 + p3 - p2 + p6 
//000595:                 Task t_c22 = Task.Factory.StartNew(() =>
//000596:                 {
//000597:                     matrix_add(n_2, n_2,
//000598:                         p1, 0, 0, n_2,
//000599:                         p3, 0, 0, n_2,
//000600:                         C, cx + n_2, cy + n_2, cs);
//000601:                     matrix_sub(n_2, n_2,
//000602:                         C, cx + n_2, cy + n_2, cs,
//000603:                         p2, 0, 0, n_2,
//000604:                         C, cx + n_2, cy + n_2, cs);
//000605:                     matrix_add(n_2, n_2,
//000606:                         C, cx + n_2, cy + n_2, cs,
//000607:                         p6, 0, 0, n_2,
//000608:                         C, cx + n_2, cy + n_2, cs);
//000609:                 });
//000610: 
//000611:                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
//000612:             }
//000613:         }
//000614:     }
//000615: }
    IL_0003:  br.s       IL_0051

//000122:             for (int j = 0; j < m; j += 1)
    IL_0005:  ldc.i4.0
    IL_0006:  stloc.1
//000123:                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] + B[(i + bx) * bs + j + by];
//000124:     }
//000125: 
//000126:     private static void matrix_sub(
//000127:         // dimensions of A, B, and C submatrices 
//000128:         int n, int m,
//000129:         // (ax,ay) = origin of A submatrix for multiplicand 
//000130:         int* A, int ax, int ay, int a_s,
//000131:         // (bx,by) = origin of B submatrix for multiplicand 
//000132:         int* B, int bx, int by, int bs,
//000133:         // (cx,cy) = origin of C submatrix for result 
//000134:         int* C, int cx, int cy, int cs)
//000135:     {
//000136:         for (int i = 0; i < n; i += 1)
//000137:         {
//000138:             for (int j = 0; j < m; j += 1)
//000139:             {
//000140:                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] - B[(i + bx) * bs + j + by];
//000141:             }
//000142:         }
//000143:     }
//000144: 
//000145:     private static void matrix_mult_serial(
//000146:         CancellationToken cancellationToken, 
//000147:         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
//000148:         int l, int m, int n,
//000149:         // (ax,ay) = origin of A submatrix for multiplicand 
//000150:         int* A, int ax, int ay, int a_s,
//000151:         // (bx,by) = origin of B submatrix for multiplicand 
//000152:         int* B, int bx, int by, int bs,
//000153:         // (cx,cy) = origin of C submatrix for result 
//000154:         int* C, int cx, int cy, int cs)
//000155:     {
//000156:         for (int i = 0; i < l; ++i)
//000157:         {
//000158:             cancellationToken.ThrowIfCancellationRequested();
//000159:             for (int j = 0; j < n; j++)
//000160:             {
//000161:                 int temp = 0;
//000162:                 for (int k = 0; k < m; k++)
//000163:                 {
//000164:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
//000165:                 }
//000166:                 C[(i + cx) * cs + j + cy] = temp;
//000167:             }
//000168:         }
//000169:     }
//000170: 
//000171:     private static void matrix_mult_parallel(
//000172:         CancellationToken cancellationToken, 
//000173:         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
//000174:         int l, int m, int n,
//000175:         // (ax,ay) = origin of A submatrix for multiplicand 
//000176:         int* A, int ax, int ay, int a_s,
//000177:         // (bx,by) = origin of B submatrix for multiplicand 
//000178:         int* B, int bx, int by, int bs,
//000179:         // (cx,cy) = origin of C submatrix for result 
//000180:         int* C, int cx, int cy, int cs)
//000181:     {
//000182:         ParallelOptions options = new ParallelOptions { CancellationToken = cancellationToken };
//000183:         Parallel.For(0, l, options, i =>
//000184:         {
//000185:             for (int j = 0; j < n; j++)
//000186:             {
//000187:                 int temp = 0;
//000188:                 for (int k = 0; k < m; k++)
//000189:                 {
//000190:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
//000191:                 }
//000192:                 C[(i + cx) * cs + j + cy] = temp;
//000193:             }
//000194:         });
//000195:     }
//000196: 
//000197:     private static void strassen_mult_serial(
//000198:         CancellationToken cancellationToken, 
//000199:         // dimensions of A, B, and C submatrices 
//000200:         int n,
//000201:         // (ax,ay) = origin of A submatrix for multiplicand 
//000202:         int* A, int ax, int ay, int a_s,
//000203:         // (bx,by) = origin of B submatrix for multiplicand 
//000204:         int* B, int bx, int by, int bs,
//000205:         // (cx,cy) = origin of C submatrix for result 
//000206:         int* C, int cx, int cy, int cs,
//000207:         // Strassen's recursion limit for array dimensions 
//000208:         int s)
//000209:     {
//000210:         if (n <= s)
//000211:         {
//000212:             matrix_mult_serial(
//000213:                 cancellationToken,
//000214:                 n, n, n,
//000215:                 A, ax, ay, a_s,
//000216:                 B, bx, by, bs,
//000217:                 C, cx, cy, cs);
//000218:         }
//000219:         else
//000220:         {
//000221:             int n_2 = n >> 1;
//000222:             int[] workArr = new int[n_2 * n_2 * 9];
//000223:             fixed (int* work = workArr)
//000224:             {
//000225:                 int* a_cum = work;
//000226:                 int* b_cum = a_cum + n_2 * n_2;
//000227:                 int* p1 = b_cum + n_2 * n_2;
//000228:                 int* p2 = p1 + n_2 * n_2;
//000229:                 int* p3 = p2 + n_2 * n_2;
//000230:                 int* p4 = p3 + n_2 * n_2;
//000231:                 int* p5 = p4 + n_2 * n_2;
//000232:                 int* p6 = p5 + n_2 * n_2;
//000233:                 int* p7 = p6 + n_2 * n_2;
//000234: 
//000235:                 // p1 = (a11 + a22) * (b11 + b22) 
//000236:                 matrix_add(n_2, n_2,
//000237:                     A, ax, ay, a_s,
//000238:                     A, ax + n_2, ay + n_2, a_s,
//000239:                     a_cum, 0, 0, n_2);
//000240:                 matrix_add(n_2, n_2,
//000241:                     B, bx, by, bs,
//000242:                     B, bx + n_2, by + n_2, bs,
//000243:                     b_cum, 0, 0, n_2);
//000244:                 strassen_mult_serial(
//000245:                     cancellationToken,
//000246:                     n_2,
//000247:                     a_cum, 0, 0, n_2,
//000248:                     b_cum, 0, 0, n_2,
//000249:                     p1, 0, 0, n_2,
//000250:                     s);
//000251: 
//000252:                 // p2 = (a21 + a22) * b11 
//000253:                 matrix_add(n_2, n_2,
//000254:                     A, ax + n_2, ay, a_s,
//000255:                     A, ax + n_2, ay + n_2, a_s,
//000256:                     a_cum, 0, 0, n_2);
//000257:                 strassen_mult_serial(
//000258:                     cancellationToken,
//000259:                     n_2,
//000260:                     a_cum, 0, 0, n_2,
//000261:                     B, bx, by, bs,
//000262:                     p2, 0, 0, n_2,
//000263:                     s);
//000264: 
//000265:                 // p3 = a11 x (b12 - b22) 
//000266:                 matrix_sub(n_2, n_2,
//000267:                     B, bx, by + n_2, bs,
//000268:                     B, bx + n_2, by + n_2, bs,
//000269:                     b_cum, 0, 0, n_2);
//000270:                 strassen_mult_serial(
//000271:                     cancellationToken,
//000272:                     n_2,
//000273:                     A, ax, ay, a_s,
//000274:                     b_cum, 0, 0, n_2,
//000275:                     p3, 0, 0, n_2,
//000276:                     s);
//000277: 
//000278:                 // p4 = a22 x (b21 - b11) 
//000279:                 matrix_sub(n_2, n_2,
//000280:                     B, bx + n_2, by, bs,
//000281:                     B, bx, by, bs,
//000282:                     b_cum, 0, 0, n_2);
//000283:                 strassen_mult_serial(
//000284:                     cancellationToken,
//000285:                     n_2,
//000286:                     A, ax + n_2, ay + n_2, a_s,
//000287:                     b_cum, 0, 0, n_2,
//000288:                     p4, 0, 0, n_2,
//000289:                     s);
//000290: 
//000291:                 // p5 = (a11 + a12) x b22 
//000292:                 matrix_add(n_2, n_2,
//000293:                     A, ax, ay, a_s,
//000294:                     A, ax, ay + n_2, a_s,
//000295:                     a_cum, 0, 0, n_2);
//000296:                 strassen_mult_serial(
//000297:                     cancellationToken,
//000298:                     n_2,
//000299:                     a_cum, 0, 0, n_2,
//000300:                     B, bx + n_2, by + n_2, bs,
//000301:                     p5, 0, 0, n_2,
//000302:                     s);
//000303: 
//000304:                 // p6 = (a21 - a11) x (b11 + b12) 
//000305:                 matrix_sub(n_2, n_2,
//000306:                     A, ax + n_2, ay, a_s,
//000307:                     A, ax, ay, a_s,
//000308:                     a_cum, 0, 0, n_2);
//000309:                 matrix_add(n_2, n_2,
//000310:                     B, bx, by, bs,
//000311:                     B, bx, by + n_2, bs,
//000312:                     b_cum, 0, 0, n_2);
//000313:                 strassen_mult_serial(
//000314:                     cancellationToken,
//000315:                     n_2,
//000316:                     a_cum, 0, 0, n_2,
//000317:                     b_cum, 0, 0, n_2,
//000318:                     p6, 0, 0, n_2,
//000319:                     s);
//000320: 
//000321:                 // p7 = (a12 - a22) x (b21 + b22) 
//000322:                 matrix_sub(n_2, n_2,
//000323:                     A, ax, ay + n_2, a_s,
//000324:                     A, ax + n_2, ay + n_2, a_s,
//000325:                     a_cum, 0, 0, n_2);
//000326:                 matrix_add(n_2, n_2,
//000327:                     B, bx + n_2, by, bs,
//000328:                     B, bx + n_2, by + n_2, bs,
//000329:                     b_cum, 0, 0, n_2);
//000330:                 strassen_mult_serial(
//000331:                     cancellationToken,
//000332:                     n_2,
//000333:                     a_cum, 0, 0, n_2,
//000334:                     b_cum, 0, 0, n_2,
//000335:                     p7, 0, 0, n_2,
//000336:                     s);
//000337: 
//000338:                 // c11 = p1 + p4 - p5 + p7 
//000339:                 matrix_add(n_2, n_2,
//000340:                     p1, 0, 0, n_2,
//000341:                     p4, 0, 0, n_2,
//000342:                     C, cx, cy, cs);
//000343:                 matrix_sub(n_2, n_2,
//000344:                     C, cx, cy, cs,
//000345:                     p5, 0, 0, n_2,
//000346:                     C, cx, cy, cs);
//000347:                 matrix_add(n_2, n_2,
//000348:                     C, cx, cy, cs,
//000349:                     p7, 0, 0, n_2,
//000350:                     C, cx, cy, cs);
//000351: 
//000352:                 // c12 = p3 + p5 
//000353:                 matrix_add(n_2, n_2,
//000354:                     p3, 0, 0, n_2,
//000355:                     p5, 0, 0, n_2,
//000356:                     C, cx, cy + n_2, cs);
//000357: 
//000358:                 // c21 = p2 + p4 
//000359:                 matrix_add(n_2, n_2,
//000360:                     p2, 0, 0, n_2,
//000361:                     p4, 0, 0, n_2,
//000362:                     C, cx + n_2, cy, cs);
//000363: 
//000364:                 // c22 = p1 + p3 - p2 + p6 
//000365:                 matrix_add(n_2, n_2,
//000366:                     p1, 0, 0, n_2,
//000367:                     p3, 0, 0, n_2,
//000368:                     C, cx + n_2, cy + n_2, cs);
//000369:                 matrix_sub(n_2, n_2,
//000370:                     C, cx + n_2, cy + n_2, cs,
//000371:                     p2, 0, 0, n_2,
//000372:                     C, cx + n_2, cy + n_2, cs);
//000373:                 matrix_add(n_2, n_2,
//000374:                     C, cx + n_2, cy + n_2, cs,
//000375:                     p6, 0, 0, n_2,
//000376:                     C, cx + n_2, cy + n_2, cs);
//000377:             }
//000378:         }
//000379:     }
//000380: 
//000381:     private static void strassen_mult_parallel(
//000382:         CancellationToken cancellationToken, 
//000383:         // dimensions of A, B, and C submatrices 
//000384:         int n,
//000385:         // (ax,ay) = origin of A submatrix for multiplicand 
//000386:         int* A, int ax, int ay, int a_s,
//000387:         // (bx,by) = origin of B submatrix for multiplicand 
//000388:         int* B, int bx, int by, int bs,
//000389:         // (cx,cy) = origin of C submatrix for result 
//000390:         int* C, int cx, int cy, int cs,
//000391:         // Strassen's recursion limit for array dimensions 
//000392:         int s)
//000393:     {
//000394:         if (n <= s)
//000395:         {
//000396:             matrix_mult_serial(
//000397:                 cancellationToken,
//000398:                 n, n, n,
//000399:                 A, ax, ay, a_s,
//000400:                 B, bx, by, bs,
//000401:                 C, cx, cy, cs);
//000402:         }
//000403:         else
//000404:         {
//000405:             int n_2 = n >> 1;
//000406:             int areaSize = n_2 * n_2;
//000407:             int[] workArr = new int[areaSize * 17];
//000408:             fixed (int* work = workArr)
//000409:             {
//000410:                 int* a_cum = work;
//000411:                 int* b_cum = a_cum + areaSize;
//000412:                 int* c_cum = b_cum + areaSize;
//000413:                 int* d_cum = c_cum + areaSize;
//000414:                 int* e_cum = d_cum + areaSize;
//000415:                 int* f_cum = e_cum + areaSize;
//000416:                 int* g_cum = f_cum + areaSize;
//000417:                 int* h_cum = g_cum + areaSize;
//000418:                 int* i_cum = h_cum + areaSize;
//000419:                 int* j_cum = i_cum + areaSize;
//000420:                 int* p1 = j_cum + areaSize;
//000421:                 int* p2 = p1 + areaSize;
//000422:                 int* p3 = p2 + areaSize;
//000423:                 int* p4 = p3 + areaSize;
//000424:                 int* p5 = p4 + areaSize;
//000425:                 int* p6 = p5 + areaSize;
//000426:                 int* p7 = p6 + areaSize;
//000427: 
//000428:                 // p1 = (a11 + a22) * (b11 + b22) 
//000429:                 Task t_p1 = Task.Factory.StartNew(() =>
//000430:                 {
//000431:                     matrix_add(n_2, n_2,
//000432:                         A, ax, ay, a_s,
//000433:                         A, ax + n_2, ay + n_2, a_s,
//000434:                         a_cum, 0, 0, n_2);
//000435:                     matrix_add(n_2, n_2,
//000436:                         B, bx, by, bs,
//000437:                         B, bx + n_2, by + n_2, bs,
//000438:                         b_cum, 0, 0, n_2);
//000439:                     strassen_mult_parallel(
//000440:                         cancellationToken,
//000441:                         n_2,
//000442:                         a_cum, 0, 0, n_2,
//000443:                         b_cum, 0, 0, n_2,
//000444:                         p1, 0, 0, n_2,
//000445:                         s);
//000446:                 }, cancellationToken);
//000447: 
//000448:                 // p2 = (a21 + a22) * b11 
//000449:                 Task t_p2 = Task.Factory.StartNew(() =>
//000450:                 {
//000451:                     matrix_add(n_2, n_2,
//000452:                         A, ax + n_2, ay, a_s,
//000453:                         A, ax + n_2, ay + n_2, a_s,
//000454:                         c_cum, 0, 0, n_2);
//000455:                     strassen_mult_parallel(
//000456:                         cancellationToken,
//000457:                         n_2,
//000458:                         c_cum, 0, 0, n_2,
//000459:                         B, bx, by, bs,
//000460:                         p2, 0, 0, n_2,
//000461:                         s);
//000462:                 }, cancellationToken);
//000463: 
//000464:                 // p3 = a11 x (b12 - b22) 
//000465:                 Task t_p3 = Task.Factory.StartNew(() =>
//000466:                 {
//000467:                     matrix_sub(n_2, n_2,
//000468:                         B, bx, by + n_2, bs,
//000469:                         B, bx + n_2, by + n_2, bs,
//000470:                         d_cum, 0, 0, n_2);
//000471:                     strassen_mult_parallel(
//000472:                         cancellationToken,
//000473:                         n_2,
//000474:                         A, ax, ay, a_s,
//000475:                         d_cum, 0, 0, n_2,
//000476:                         p3, 0, 0, n_2,
//000477:                         s);
//000478:                 }, cancellationToken);
//000479: 
//000480:                 // p4 = a22 x (b21 - b11) 
//000481:                 Task t_p4 = Task.Factory.StartNew(() =>
//000482:                 {
//000483:                     matrix_sub(n_2, n_2,
//000484:                         B, bx + n_2, by, bs,
//000485:                         B, bx, by, bs,
//000486:                         e_cum, 0, 0, n_2);
//000487:                     strassen_mult_parallel(
//000488:                         cancellationToken,
//000489:                         n_2,
//000490:                         A, ax + n_2, ay + n_2, a_s,
//000491:                         e_cum, 0, 0, n_2,
//000492:                         p4, 0, 0, n_2,
//000493:                         s);
//000494:                 }, cancellationToken);
//000495: 
//000496:                 // p5 = (a11 + a12) x b22 
//000497:                 Task t_p5 = Task.Factory.StartNew(() =>
//000498:                 {
//000499:                     matrix_add(n_2, n_2,
//000500:                         A, ax, ay, a_s,
//000501:                         A, ax, ay + n_2, a_s,
//000502:                         f_cum, 0, 0, n_2);
//000503:                     strassen_mult_parallel(
//000504:                         cancellationToken,
//000505:                         n_2,
//000506:                         f_cum, 0, 0, n_2,
//000507:                         B, bx + n_2, by + n_2, bs,
//000508:                         p5, 0, 0, n_2,
//000509:                         s);
//000510:                 }, cancellationToken);
//000511: 
//000512:                 // p6 = (a21 - a11) x (b11 + b12) 
//000513:                 Task t_p6 = Task.Factory.StartNew(() =>
//000514:                 {
//000515:                     matrix_sub(n_2, n_2,
//000516:                         A, ax + n_2, ay, a_s,
//000517:                         A, ax, ay, a_s,
//000518:                         g_cum, 0, 0, n_2);
//000519:                     matrix_add(n_2, n_2,
//000520:                         B, bx, by, bs,
//000521:                         B, bx, by + n_2, bs,
//000522:                         h_cum, 0, 0, n_2);
//000523:                     strassen_mult_parallel(
//000524:                         cancellationToken,
//000525:                         n_2,
//000526:                         g_cum, 0, 0, n_2,
//000527:                         h_cum, 0, 0, n_2,
//000528:                         p6, 0, 0, n_2,
//000529:                         s);
//000530:                 }, cancellationToken);
//000531: 
//000532:                 // p7 = (a12 - a22) x (b21 + b22) 
//000533:                 Task t_p7 = Task.Factory.StartNew(() =>
//000534:                 {
//000535:                     matrix_sub(n_2, n_2,
//000536:                         A, ax, ay + n_2, a_s,
//000537:                         A, ax + n_2, ay + n_2, a_s,
//000538:                         i_cum, 0, 0, n_2);
//000539:                     matrix_add(n_2, n_2,
//000540:                         B, bx + n_2, by, bs,
//000541:                         B, bx + n_2, by + n_2, bs,
//000542:                         j_cum, 0, 0, n_2);
//000543:                     strassen_mult_parallel(
//000544:                         cancellationToken,
//000545:                         n_2,
//000546:                         i_cum, 0, 0, n_2,
//000547:                         j_cum, 0, 0, n_2,
//000548:                         p7, 0, 0, n_2,
//000549:                         s);
//000550:                 }, cancellationToken);
//000551: 
//000552:                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
//000553:                 catch (AggregateException ae)
//000554:                 {
//000555:                     ae.Flatten().Handle(e => e is TaskCanceledException);
//000556:                     cancellationToken.ThrowIfCancellationRequested();
//000557:                 }
//000558: 
//000559:                 // c11 = p1 + p4 - p5 + p7 
//000560:                 Task t_c11 = Task.Factory.StartNew(() =>
//000561:                 {
//000562:                     matrix_add(n_2, n_2,
//000563:                         p1, 0, 0, n_2,
//000564:                         p4, 0, 0, n_2,
//000565:                         C, cx, cy, cs);
//000566:                     matrix_sub(n_2, n_2,
//000567:                         C, cx, cy, cs,
//000568:                         p5, 0, 0, n_2,
//000569:                         C, cx, cy, cs);
//000570:                     matrix_add(n_2, n_2,
//000571:                         C, cx, cy, cs,
//000572:                         p7, 0, 0, n_2,
//000573:                         C, cx, cy, cs);
//000574:                 });
//000575: 
//000576:                 // c12 = p3 + p5 
//000577:                 Task t_c12 = Task.Factory.StartNew(() =>
//000578:                 {
//000579:                     matrix_add(n_2, n_2,
//000580:                         p3, 0, 0, n_2,
//000581:                         p5, 0, 0, n_2,
//000582:                         C, cx, cy + n_2, cs);
//000583:                 });
//000584: 
//000585:                 // c21 = p2 + p4 
//000586:                 Task t_c21 = Task.Factory.StartNew(() =>
//000587:                 {
//000588:                     matrix_add(n_2, n_2,
//000589:                         p2, 0, 0, n_2,
//000590:                         p4, 0, 0, n_2,
//000591:                         C, cx + n_2, cy, cs);
//000592:                 });
//000593: 
//000594:                 // c22 = p1 + p3 - p2 + p6 
//000595:                 Task t_c22 = Task.Factory.StartNew(() =>
//000596:                 {
//000597:                     matrix_add(n_2, n_2,
//000598:                         p1, 0, 0, n_2,
//000599:                         p3, 0, 0, n_2,
//000600:                         C, cx + n_2, cy + n_2, cs);
//000601:                     matrix_sub(n_2, n_2,
//000602:                         C, cx + n_2, cy + n_2, cs,
//000603:                         p2, 0, 0, n_2,
//000604:                         C, cx + n_2, cy + n_2, cs);
//000605:                     matrix_add(n_2, n_2,
//000606:                         C, cx + n_2, cy + n_2, cs,
//000607:                         p6, 0, 0, n_2,
//000608:                         C, cx + n_2, cy + n_2, cs);
//000609:                 });
//000610: 
//000611:                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
//000612:             }
//000613:         }
//000614:     }
//000615: }
    IL_0007:  br.s       IL_0045

//000123:                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] + B[(i + bx) * bs + j + by];
    IL_0009:  ldarg.s    C
    IL_000b:  ldloc.0
    IL_000c:  ldarg.s    cx
    IL_000e:  add
    IL_000f:  ldarg.s    cs
    IL_0011:  mul
    IL_0012:  ldloc.1
    IL_0013:  add
    IL_0014:  ldarg.s    cy
    IL_0016:  add
    IL_0017:  conv.i
    IL_0018:  ldc.i4.4
    IL_0019:  mul
    IL_001a:  add
    IL_001b:  ldarg.2
    IL_001c:  ldloc.0
    IL_001d:  ldarg.3
    IL_001e:  add
    IL_001f:  ldarg.s    a_s
    IL_0021:  mul
    IL_0022:  ldloc.1
    IL_0023:  add
    IL_0024:  ldarg.s    ay
    IL_0026:  add
    IL_0027:  conv.i
    IL_0028:  ldc.i4.4
    IL_0029:  mul
    IL_002a:  add
    IL_002b:  ldind.i4
    IL_002c:  ldarg.s    B
    IL_002e:  ldloc.0
    IL_002f:  ldarg.s    bx
    IL_0031:  add
    IL_0032:  ldarg.s    bs
    IL_0034:  mul
    IL_0035:  ldloc.1
    IL_0036:  add
    IL_0037:  ldarg.s    by
    IL_0039:  add
    IL_003a:  conv.i
    IL_003b:  ldc.i4.4
    IL_003c:  mul
    IL_003d:  add
    IL_003e:  ldind.i4
    IL_003f:  add
    IL_0040:  stind.i4
//000122:             for (int j = 0; j < m; j += 1)
    IL_0041:  ldloc.1
    IL_0042:  ldc.i4.1
    IL_0043:  add
    IL_0044:  stloc.1
    IL_0045:  ldloc.1
    IL_0046:  ldarg.1
    IL_0047:  clt
    IL_0049:  stloc.2
//000123:                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] + B[(i + bx) * bs + j + by];
//000124:     }
//000125: 
//000126:     private static void matrix_sub(
//000127:         // dimensions of A, B, and C submatrices 
//000128:         int n, int m,
//000129:         // (ax,ay) = origin of A submatrix for multiplicand 
//000130:         int* A, int ax, int ay, int a_s,
//000131:         // (bx,by) = origin of B submatrix for multiplicand 
//000132:         int* B, int bx, int by, int bs,
//000133:         // (cx,cy) = origin of C submatrix for result 
//000134:         int* C, int cx, int cy, int cs)
//000135:     {
//000136:         for (int i = 0; i < n; i += 1)
//000137:         {
//000138:             for (int j = 0; j < m; j += 1)
//000139:             {
//000140:                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] - B[(i + bx) * bs + j + by];
//000141:             }
//000142:         }
//000143:     }
//000144: 
//000145:     private static void matrix_mult_serial(
//000146:         CancellationToken cancellationToken, 
//000147:         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
//000148:         int l, int m, int n,
//000149:         // (ax,ay) = origin of A submatrix for multiplicand 
//000150:         int* A, int ax, int ay, int a_s,
//000151:         // (bx,by) = origin of B submatrix for multiplicand 
//000152:         int* B, int bx, int by, int bs,
//000153:         // (cx,cy) = origin of C submatrix for result 
//000154:         int* C, int cx, int cy, int cs)
//000155:     {
//000156:         for (int i = 0; i < l; ++i)
//000157:         {
//000158:             cancellationToken.ThrowIfCancellationRequested();
//000159:             for (int j = 0; j < n; j++)
//000160:             {
//000161:                 int temp = 0;
//000162:                 for (int k = 0; k < m; k++)
//000163:                 {
//000164:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
//000165:                 }
//000166:                 C[(i + cx) * cs + j + cy] = temp;
//000167:             }
//000168:         }
//000169:     }
//000170: 
//000171:     private static void matrix_mult_parallel(
//000172:         CancellationToken cancellationToken, 
//000173:         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
//000174:         int l, int m, int n,
//000175:         // (ax,ay) = origin of A submatrix for multiplicand 
//000176:         int* A, int ax, int ay, int a_s,
//000177:         // (bx,by) = origin of B submatrix for multiplicand 
//000178:         int* B, int bx, int by, int bs,
//000179:         // (cx,cy) = origin of C submatrix for result 
//000180:         int* C, int cx, int cy, int cs)
//000181:     {
//000182:         ParallelOptions options = new ParallelOptions { CancellationToken = cancellationToken };
//000183:         Parallel.For(0, l, options, i =>
//000184:         {
//000185:             for (int j = 0; j < n; j++)
//000186:             {
//000187:                 int temp = 0;
//000188:                 for (int k = 0; k < m; k++)
//000189:                 {
//000190:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
//000191:                 }
//000192:                 C[(i + cx) * cs + j + cy] = temp;
//000193:             }
//000194:         });
//000195:     }
//000196: 
//000197:     private static void strassen_mult_serial(
//000198:         CancellationToken cancellationToken, 
//000199:         // dimensions of A, B, and C submatrices 
//000200:         int n,
//000201:         // (ax,ay) = origin of A submatrix for multiplicand 
//000202:         int* A, int ax, int ay, int a_s,
//000203:         // (bx,by) = origin of B submatrix for multiplicand 
//000204:         int* B, int bx, int by, int bs,
//000205:         // (cx,cy) = origin of C submatrix for result 
//000206:         int* C, int cx, int cy, int cs,
//000207:         // Strassen's recursion limit for array dimensions 
//000208:         int s)
//000209:     {
//000210:         if (n <= s)
//000211:         {
//000212:             matrix_mult_serial(
//000213:                 cancellationToken,
//000214:                 n, n, n,
//000215:                 A, ax, ay, a_s,
//000216:                 B, bx, by, bs,
//000217:                 C, cx, cy, cs);
//000218:         }
//000219:         else
//000220:         {
//000221:             int n_2 = n >> 1;
//000222:             int[] workArr = new int[n_2 * n_2 * 9];
//000223:             fixed (int* work = workArr)
//000224:             {
//000225:                 int* a_cum = work;
//000226:                 int* b_cum = a_cum + n_2 * n_2;
//000227:                 int* p1 = b_cum + n_2 * n_2;
//000228:                 int* p2 = p1 + n_2 * n_2;
//000229:                 int* p3 = p2 + n_2 * n_2;
//000230:                 int* p4 = p3 + n_2 * n_2;
//000231:                 int* p5 = p4 + n_2 * n_2;
//000232:                 int* p6 = p5 + n_2 * n_2;
//000233:                 int* p7 = p6 + n_2 * n_2;
//000234: 
//000235:                 // p1 = (a11 + a22) * (b11 + b22) 
//000236:                 matrix_add(n_2, n_2,
//000237:                     A, ax, ay, a_s,
//000238:                     A, ax + n_2, ay + n_2, a_s,
//000239:                     a_cum, 0, 0, n_2);
//000240:                 matrix_add(n_2, n_2,
//000241:                     B, bx, by, bs,
//000242:                     B, bx + n_2, by + n_2, bs,
//000243:                     b_cum, 0, 0, n_2);
//000244:                 strassen_mult_serial(
//000245:                     cancellationToken,
//000246:                     n_2,
//000247:                     a_cum, 0, 0, n_2,
//000248:                     b_cum, 0, 0, n_2,
//000249:                     p1, 0, 0, n_2,
//000250:                     s);
//000251: 
//000252:                 // p2 = (a21 + a22) * b11 
//000253:                 matrix_add(n_2, n_2,
//000254:                     A, ax + n_2, ay, a_s,
//000255:                     A, ax + n_2, ay + n_2, a_s,
//000256:                     a_cum, 0, 0, n_2);
//000257:                 strassen_mult_serial(
//000258:                     cancellationToken,
//000259:                     n_2,
//000260:                     a_cum, 0, 0, n_2,
//000261:                     B, bx, by, bs,
//000262:                     p2, 0, 0, n_2,
//000263:                     s);
//000264: 
//000265:                 // p3 = a11 x (b12 - b22) 
//000266:                 matrix_sub(n_2, n_2,
//000267:                     B, bx, by + n_2, bs,
//000268:                     B, bx + n_2, by + n_2, bs,
//000269:                     b_cum, 0, 0, n_2);
//000270:                 strassen_mult_serial(
//000271:                     cancellationToken,
//000272:                     n_2,
//000273:                     A, ax, ay, a_s,
//000274:                     b_cum, 0, 0, n_2,
//000275:                     p3, 0, 0, n_2,
//000276:                     s);
//000277: 
//000278:                 // p4 = a22 x (b21 - b11) 
//000279:                 matrix_sub(n_2, n_2,
//000280:                     B, bx + n_2, by, bs,
//000281:                     B, bx, by, bs,
//000282:                     b_cum, 0, 0, n_2);
//000283:                 strassen_mult_serial(
//000284:                     cancellationToken,
//000285:                     n_2,
//000286:                     A, ax + n_2, ay + n_2, a_s,
//000287:                     b_cum, 0, 0, n_2,
//000288:                     p4, 0, 0, n_2,
//000289:                     s);
//000290: 
//000291:                 // p5 = (a11 + a12) x b22 
//000292:                 matrix_add(n_2, n_2,
//000293:                     A, ax, ay, a_s,
//000294:                     A, ax, ay + n_2, a_s,
//000295:                     a_cum, 0, 0, n_2);
//000296:                 strassen_mult_serial(
//000297:                     cancellationToken,
//000298:                     n_2,
//000299:                     a_cum, 0, 0, n_2,
//000300:                     B, bx + n_2, by + n_2, bs,
//000301:                     p5, 0, 0, n_2,
//000302:                     s);
//000303: 
//000304:                 // p6 = (a21 - a11) x (b11 + b12) 
//000305:                 matrix_sub(n_2, n_2,
//000306:                     A, ax + n_2, ay, a_s,
//000307:                     A, ax, ay, a_s,
//000308:                     a_cum, 0, 0, n_2);
//000309:                 matrix_add(n_2, n_2,
//000310:                     B, bx, by, bs,
//000311:                     B, bx, by + n_2, bs,
//000312:                     b_cum, 0, 0, n_2);
//000313:                 strassen_mult_serial(
//000314:                     cancellationToken,
//000315:                     n_2,
//000316:                     a_cum, 0, 0, n_2,
//000317:                     b_cum, 0, 0, n_2,
//000318:                     p6, 0, 0, n_2,
//000319:                     s);
//000320: 
//000321:                 // p7 = (a12 - a22) x (b21 + b22) 
//000322:                 matrix_sub(n_2, n_2,
//000323:                     A, ax, ay + n_2, a_s,
//000324:                     A, ax + n_2, ay + n_2, a_s,
//000325:                     a_cum, 0, 0, n_2);
//000326:                 matrix_add(n_2, n_2,
//000327:                     B, bx + n_2, by, bs,
//000328:                     B, bx + n_2, by + n_2, bs,
//000329:                     b_cum, 0, 0, n_2);
//000330:                 strassen_mult_serial(
//000331:                     cancellationToken,
//000332:                     n_2,
//000333:                     a_cum, 0, 0, n_2,
//000334:                     b_cum, 0, 0, n_2,
//000335:                     p7, 0, 0, n_2,
//000336:                     s);
//000337: 
//000338:                 // c11 = p1 + p4 - p5 + p7 
//000339:                 matrix_add(n_2, n_2,
//000340:                     p1, 0, 0, n_2,
//000341:                     p4, 0, 0, n_2,
//000342:                     C, cx, cy, cs);
//000343:                 matrix_sub(n_2, n_2,
//000344:                     C, cx, cy, cs,
//000345:                     p5, 0, 0, n_2,
//000346:                     C, cx, cy, cs);
//000347:                 matrix_add(n_2, n_2,
//000348:                     C, cx, cy, cs,
//000349:                     p7, 0, 0, n_2,
//000350:                     C, cx, cy, cs);
//000351: 
//000352:                 // c12 = p3 + p5 
//000353:                 matrix_add(n_2, n_2,
//000354:                     p3, 0, 0, n_2,
//000355:                     p5, 0, 0, n_2,
//000356:                     C, cx, cy + n_2, cs);
//000357: 
//000358:                 // c21 = p2 + p4 
//000359:                 matrix_add(n_2, n_2,
//000360:                     p2, 0, 0, n_2,
//000361:                     p4, 0, 0, n_2,
//000362:                     C, cx + n_2, cy, cs);
//000363: 
//000364:                 // c22 = p1 + p3 - p2 + p6 
//000365:                 matrix_add(n_2, n_2,
//000366:                     p1, 0, 0, n_2,
//000367:                     p3, 0, 0, n_2,
//000368:                     C, cx + n_2, cy + n_2, cs);
//000369:                 matrix_sub(n_2, n_2,
//000370:                     C, cx + n_2, cy + n_2, cs,
//000371:                     p2, 0, 0, n_2,
//000372:                     C, cx + n_2, cy + n_2, cs);
//000373:                 matrix_add(n_2, n_2,
//000374:                     C, cx + n_2, cy + n_2, cs,
//000375:                     p6, 0, 0, n_2,
//000376:                     C, cx + n_2, cy + n_2, cs);
//000377:             }
//000378:         }
//000379:     }
//000380: 
//000381:     private static void strassen_mult_parallel(
//000382:         CancellationToken cancellationToken, 
//000383:         // dimensions of A, B, and C submatrices 
//000384:         int n,
//000385:         // (ax,ay) = origin of A submatrix for multiplicand 
//000386:         int* A, int ax, int ay, int a_s,
//000387:         // (bx,by) = origin of B submatrix for multiplicand 
//000388:         int* B, int bx, int by, int bs,
//000389:         // (cx,cy) = origin of C submatrix for result 
//000390:         int* C, int cx, int cy, int cs,
//000391:         // Strassen's recursion limit for array dimensions 
//000392:         int s)
//000393:     {
//000394:         if (n <= s)
//000395:         {
//000396:             matrix_mult_serial(
//000397:                 cancellationToken,
//000398:                 n, n, n,
//000399:                 A, ax, ay, a_s,
//000400:                 B, bx, by, bs,
//000401:                 C, cx, cy, cs);
//000402:         }
//000403:         else
//000404:         {
//000405:             int n_2 = n >> 1;
//000406:             int areaSize = n_2 * n_2;
//000407:             int[] workArr = new int[areaSize * 17];
//000408:             fixed (int* work = workArr)
//000409:             {
//000410:                 int* a_cum = work;
//000411:                 int* b_cum = a_cum + areaSize;
//000412:                 int* c_cum = b_cum + areaSize;
//000413:                 int* d_cum = c_cum + areaSize;
//000414:                 int* e_cum = d_cum + areaSize;
//000415:                 int* f_cum = e_cum + areaSize;
//000416:                 int* g_cum = f_cum + areaSize;
//000417:                 int* h_cum = g_cum + areaSize;
//000418:                 int* i_cum = h_cum + areaSize;
//000419:                 int* j_cum = i_cum + areaSize;
//000420:                 int* p1 = j_cum + areaSize;
//000421:                 int* p2 = p1 + areaSize;
//000422:                 int* p3 = p2 + areaSize;
//000423:                 int* p4 = p3 + areaSize;
//000424:                 int* p5 = p4 + areaSize;
//000425:                 int* p6 = p5 + areaSize;
//000426:                 int* p7 = p6 + areaSize;
//000427: 
//000428:                 // p1 = (a11 + a22) * (b11 + b22) 
//000429:                 Task t_p1 = Task.Factory.StartNew(() =>
//000430:                 {
//000431:                     matrix_add(n_2, n_2,
//000432:                         A, ax, ay, a_s,
//000433:                         A, ax + n_2, ay + n_2, a_s,
//000434:                         a_cum, 0, 0, n_2);
//000435:                     matrix_add(n_2, n_2,
//000436:                         B, bx, by, bs,
//000437:                         B, bx + n_2, by + n_2, bs,
//000438:                         b_cum, 0, 0, n_2);
//000439:                     strassen_mult_parallel(
//000440:                         cancellationToken,
//000441:                         n_2,
//000442:                         a_cum, 0, 0, n_2,
//000443:                         b_cum, 0, 0, n_2,
//000444:                         p1, 0, 0, n_2,
//000445:                         s);
//000446:                 }, cancellationToken);
//000447: 
//000448:                 // p2 = (a21 + a22) * b11 
//000449:                 Task t_p2 = Task.Factory.StartNew(() =>
//000450:                 {
//000451:                     matrix_add(n_2, n_2,
//000452:                         A, ax + n_2, ay, a_s,
//000453:                         A, ax + n_2, ay + n_2, a_s,
//000454:                         c_cum, 0, 0, n_2);
//000455:                     strassen_mult_parallel(
//000456:                         cancellationToken,
//000457:                         n_2,
//000458:                         c_cum, 0, 0, n_2,
//000459:                         B, bx, by, bs,
//000460:                         p2, 0, 0, n_2,
//000461:                         s);
//000462:                 }, cancellationToken);
//000463: 
//000464:                 // p3 = a11 x (b12 - b22) 
//000465:                 Task t_p3 = Task.Factory.StartNew(() =>
//000466:                 {
//000467:                     matrix_sub(n_2, n_2,
//000468:                         B, bx, by + n_2, bs,
//000469:                         B, bx + n_2, by + n_2, bs,
//000470:                         d_cum, 0, 0, n_2);
//000471:                     strassen_mult_parallel(
//000472:                         cancellationToken,
//000473:                         n_2,
//000474:                         A, ax, ay, a_s,
//000475:                         d_cum, 0, 0, n_2,
//000476:                         p3, 0, 0, n_2,
//000477:                         s);
//000478:                 }, cancellationToken);
//000479: 
//000480:                 // p4 = a22 x (b21 - b11) 
//000481:                 Task t_p4 = Task.Factory.StartNew(() =>
//000482:                 {
//000483:                     matrix_sub(n_2, n_2,
//000484:                         B, bx + n_2, by, bs,
//000485:                         B, bx, by, bs,
//000486:                         e_cum, 0, 0, n_2);
//000487:                     strassen_mult_parallel(
//000488:                         cancellationToken,
//000489:                         n_2,
//000490:                         A, ax + n_2, ay + n_2, a_s,
//000491:                         e_cum, 0, 0, n_2,
//000492:                         p4, 0, 0, n_2,
//000493:                         s);
//000494:                 }, cancellationToken);
//000495: 
//000496:                 // p5 = (a11 + a12) x b22 
//000497:                 Task t_p5 = Task.Factory.StartNew(() =>
//000498:                 {
//000499:                     matrix_add(n_2, n_2,
//000500:                         A, ax, ay, a_s,
//000501:                         A, ax, ay + n_2, a_s,
//000502:                         f_cum, 0, 0, n_2);
//000503:                     strassen_mult_parallel(
//000504:                         cancellationToken,
//000505:                         n_2,
//000506:                         f_cum, 0, 0, n_2,
//000507:                         B, bx + n_2, by + n_2, bs,
//000508:                         p5, 0, 0, n_2,
//000509:                         s);
//000510:                 }, cancellationToken);
//000511: 
//000512:                 // p6 = (a21 - a11) x (b11 + b12) 
//000513:                 Task t_p6 = Task.Factory.StartNew(() =>
//000514:                 {
//000515:                     matrix_sub(n_2, n_2,
//000516:                         A, ax + n_2, ay, a_s,
//000517:                         A, ax, ay, a_s,
//000518:                         g_cum, 0, 0, n_2);
//000519:                     matrix_add(n_2, n_2,
//000520:                         B, bx, by, bs,
//000521:                         B, bx, by + n_2, bs,
//000522:                         h_cum, 0, 0, n_2);
//000523:                     strassen_mult_parallel(
//000524:                         cancellationToken,
//000525:                         n_2,
//000526:                         g_cum, 0, 0, n_2,
//000527:                         h_cum, 0, 0, n_2,
//000528:                         p6, 0, 0, n_2,
//000529:                         s);
//000530:                 }, cancellationToken);
//000531: 
//000532:                 // p7 = (a12 - a22) x (b21 + b22) 
//000533:                 Task t_p7 = Task.Factory.StartNew(() =>
//000534:                 {
//000535:                     matrix_sub(n_2, n_2,
//000536:                         A, ax, ay + n_2, a_s,
//000537:                         A, ax + n_2, ay + n_2, a_s,
//000538:                         i_cum, 0, 0, n_2);
//000539:                     matrix_add(n_2, n_2,
//000540:                         B, bx + n_2, by, bs,
//000541:                         B, bx + n_2, by + n_2, bs,
//000542:                         j_cum, 0, 0, n_2);
//000543:                     strassen_mult_parallel(
//000544:                         cancellationToken,
//000545:                         n_2,
//000546:                         i_cum, 0, 0, n_2,
//000547:                         j_cum, 0, 0, n_2,
//000548:                         p7, 0, 0, n_2,
//000549:                         s);
//000550:                 }, cancellationToken);
//000551: 
//000552:                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
//000553:                 catch (AggregateException ae)
//000554:                 {
//000555:                     ae.Flatten().Handle(e => e is TaskCanceledException);
//000556:                     cancellationToken.ThrowIfCancellationRequested();
//000557:                 }
//000558: 
//000559:                 // c11 = p1 + p4 - p5 + p7 
//000560:                 Task t_c11 = Task.Factory.StartNew(() =>
//000561:                 {
//000562:                     matrix_add(n_2, n_2,
//000563:                         p1, 0, 0, n_2,
//000564:                         p4, 0, 0, n_2,
//000565:                         C, cx, cy, cs);
//000566:                     matrix_sub(n_2, n_2,
//000567:                         C, cx, cy, cs,
//000568:                         p5, 0, 0, n_2,
//000569:                         C, cx, cy, cs);
//000570:                     matrix_add(n_2, n_2,
//000571:                         C, cx, cy, cs,
//000572:                         p7, 0, 0, n_2,
//000573:                         C, cx, cy, cs);
//000574:                 });
//000575: 
//000576:                 // c12 = p3 + p5 
//000577:                 Task t_c12 = Task.Factory.StartNew(() =>
//000578:                 {
//000579:                     matrix_add(n_2, n_2,
//000580:                         p3, 0, 0, n_2,
//000581:                         p5, 0, 0, n_2,
//000582:                         C, cx, cy + n_2, cs);
//000583:                 });
//000584: 
//000585:                 // c21 = p2 + p4 
//000586:                 Task t_c21 = Task.Factory.StartNew(() =>
//000587:                 {
//000588:                     matrix_add(n_2, n_2,
//000589:                         p2, 0, 0, n_2,
//000590:                         p4, 0, 0, n_2,
//000591:                         C, cx + n_2, cy, cs);
//000592:                 });
//000593: 
//000594:                 // c22 = p1 + p3 - p2 + p6 
//000595:                 Task t_c22 = Task.Factory.StartNew(() =>
//000596:                 {
//000597:                     matrix_add(n_2, n_2,
//000598:                         p1, 0, 0, n_2,
//000599:                         p3, 0, 0, n_2,
//000600:                         C, cx + n_2, cy + n_2, cs);
//000601:                     matrix_sub(n_2, n_2,
//000602:                         C, cx + n_2, cy + n_2, cs,
//000603:                         p2, 0, 0, n_2,
//000604:                         C, cx + n_2, cy + n_2, cs);
//000605:                     matrix_add(n_2, n_2,
//000606:                         C, cx + n_2, cy + n_2, cs,
//000607:                         p6, 0, 0, n_2,
//000608:                         C, cx + n_2, cy + n_2, cs);
//000609:                 });
//000610: 
//000611:                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
//000612:             }
//000613:         }
//000614:     }
//000615: }
    IL_004a:  ldloc.2
    IL_004b:  brtrue.s   IL_0009

//000121:         for (int i = 0; i < n; i += 1)
    IL_004d:  ldloc.0
    IL_004e:  ldc.i4.1
    IL_004f:  add
    IL_0050:  stloc.0
    IL_0051:  ldloc.0
    IL_0052:  ldarg.0
    IL_0053:  clt
    IL_0055:  stloc.2
//000122:             for (int j = 0; j < m; j += 1)
//000123:                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] + B[(i + bx) * bs + j + by];
//000124:     }
//000125: 
//000126:     private static void matrix_sub(
//000127:         // dimensions of A, B, and C submatrices 
//000128:         int n, int m,
//000129:         // (ax,ay) = origin of A submatrix for multiplicand 
//000130:         int* A, int ax, int ay, int a_s,
//000131:         // (bx,by) = origin of B submatrix for multiplicand 
//000132:         int* B, int bx, int by, int bs,
//000133:         // (cx,cy) = origin of C submatrix for result 
//000134:         int* C, int cx, int cy, int cs)
//000135:     {
//000136:         for (int i = 0; i < n; i += 1)
//000137:         {
//000138:             for (int j = 0; j < m; j += 1)
//000139:             {
//000140:                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] - B[(i + bx) * bs + j + by];
//000141:             }
//000142:         }
//000143:     }
//000144: 
//000145:     private static void matrix_mult_serial(
//000146:         CancellationToken cancellationToken, 
//000147:         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
//000148:         int l, int m, int n,
//000149:         // (ax,ay) = origin of A submatrix for multiplicand 
//000150:         int* A, int ax, int ay, int a_s,
//000151:         // (bx,by) = origin of B submatrix for multiplicand 
//000152:         int* B, int bx, int by, int bs,
//000153:         // (cx,cy) = origin of C submatrix for result 
//000154:         int* C, int cx, int cy, int cs)
//000155:     {
//000156:         for (int i = 0; i < l; ++i)
//000157:         {
//000158:             cancellationToken.ThrowIfCancellationRequested();
//000159:             for (int j = 0; j < n; j++)
//000160:             {
//000161:                 int temp = 0;
//000162:                 for (int k = 0; k < m; k++)
//000163:                 {
//000164:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
//000165:                 }
//000166:                 C[(i + cx) * cs + j + cy] = temp;
//000167:             }
//000168:         }
//000169:     }
//000170: 
//000171:     private static void matrix_mult_parallel(
//000172:         CancellationToken cancellationToken, 
//000173:         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
//000174:         int l, int m, int n,
//000175:         // (ax,ay) = origin of A submatrix for multiplicand 
//000176:         int* A, int ax, int ay, int a_s,
//000177:         // (bx,by) = origin of B submatrix for multiplicand 
//000178:         int* B, int bx, int by, int bs,
//000179:         // (cx,cy) = origin of C submatrix for result 
//000180:         int* C, int cx, int cy, int cs)
//000181:     {
//000182:         ParallelOptions options = new ParallelOptions { CancellationToken = cancellationToken };
//000183:         Parallel.For(0, l, options, i =>
//000184:         {
//000185:             for (int j = 0; j < n; j++)
//000186:             {
//000187:                 int temp = 0;
//000188:                 for (int k = 0; k < m; k++)
//000189:                 {
//000190:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
//000191:                 }
//000192:                 C[(i + cx) * cs + j + cy] = temp;
//000193:             }
//000194:         });
//000195:     }
//000196: 
//000197:     private static void strassen_mult_serial(
//000198:         CancellationToken cancellationToken, 
//000199:         // dimensions of A, B, and C submatrices 
//000200:         int n,
//000201:         // (ax,ay) = origin of A submatrix for multiplicand 
//000202:         int* A, int ax, int ay, int a_s,
//000203:         // (bx,by) = origin of B submatrix for multiplicand 
//000204:         int* B, int bx, int by, int bs,
//000205:         // (cx,cy) = origin of C submatrix for result 
//000206:         int* C, int cx, int cy, int cs,
//000207:         // Strassen's recursion limit for array dimensions 
//000208:         int s)
//000209:     {
//000210:         if (n <= s)
//000211:         {
//000212:             matrix_mult_serial(
//000213:                 cancellationToken,
//000214:                 n, n, n,
//000215:                 A, ax, ay, a_s,
//000216:                 B, bx, by, bs,
//000217:                 C, cx, cy, cs);
//000218:         }
//000219:         else
//000220:         {
//000221:             int n_2 = n >> 1;
//000222:             int[] workArr = new int[n_2 * n_2 * 9];
//000223:             fixed (int* work = workArr)
//000224:             {
//000225:                 int* a_cum = work;
//000226:                 int* b_cum = a_cum + n_2 * n_2;
//000227:                 int* p1 = b_cum + n_2 * n_2;
//000228:                 int* p2 = p1 + n_2 * n_2;
//000229:                 int* p3 = p2 + n_2 * n_2;
//000230:                 int* p4 = p3 + n_2 * n_2;
//000231:                 int* p5 = p4 + n_2 * n_2;
//000232:                 int* p6 = p5 + n_2 * n_2;
//000233:                 int* p7 = p6 + n_2 * n_2;
//000234: 
//000235:                 // p1 = (a11 + a22) * (b11 + b22) 
//000236:                 matrix_add(n_2, n_2,
//000237:                     A, ax, ay, a_s,
//000238:                     A, ax + n_2, ay + n_2, a_s,
//000239:                     a_cum, 0, 0, n_2);
//000240:                 matrix_add(n_2, n_2,
//000241:                     B, bx, by, bs,
//000242:                     B, bx + n_2, by + n_2, bs,
//000243:                     b_cum, 0, 0, n_2);
//000244:                 strassen_mult_serial(
//000245:                     cancellationToken,
//000246:                     n_2,
//000247:                     a_cum, 0, 0, n_2,
//000248:                     b_cum, 0, 0, n_2,
//000249:                     p1, 0, 0, n_2,
//000250:                     s);
//000251: 
//000252:                 // p2 = (a21 + a22) * b11 
//000253:                 matrix_add(n_2, n_2,
//000254:                     A, ax + n_2, ay, a_s,
//000255:                     A, ax + n_2, ay + n_2, a_s,
//000256:                     a_cum, 0, 0, n_2);
//000257:                 strassen_mult_serial(
//000258:                     cancellationToken,
//000259:                     n_2,
//000260:                     a_cum, 0, 0, n_2,
//000261:                     B, bx, by, bs,
//000262:                     p2, 0, 0, n_2,
//000263:                     s);
//000264: 
//000265:                 // p3 = a11 x (b12 - b22) 
//000266:                 matrix_sub(n_2, n_2,
//000267:                     B, bx, by + n_2, bs,
//000268:                     B, bx + n_2, by + n_2, bs,
//000269:                     b_cum, 0, 0, n_2);
//000270:                 strassen_mult_serial(
//000271:                     cancellationToken,
//000272:                     n_2,
//000273:                     A, ax, ay, a_s,
//000274:                     b_cum, 0, 0, n_2,
//000275:                     p3, 0, 0, n_2,
//000276:                     s);
//000277: 
//000278:                 // p4 = a22 x (b21 - b11) 
//000279:                 matrix_sub(n_2, n_2,
//000280:                     B, bx + n_2, by, bs,
//000281:                     B, bx, by, bs,
//000282:                     b_cum, 0, 0, n_2);
//000283:                 strassen_mult_serial(
//000284:                     cancellationToken,
//000285:                     n_2,
//000286:                     A, ax + n_2, ay + n_2, a_s,
//000287:                     b_cum, 0, 0, n_2,
//000288:                     p4, 0, 0, n_2,
//000289:                     s);
//000290: 
//000291:                 // p5 = (a11 + a12) x b22 
//000292:                 matrix_add(n_2, n_2,
//000293:                     A, ax, ay, a_s,
//000294:                     A, ax, ay + n_2, a_s,
//000295:                     a_cum, 0, 0, n_2);
//000296:                 strassen_mult_serial(
//000297:                     cancellationToken,
//000298:                     n_2,
//000299:                     a_cum, 0, 0, n_2,
//000300:                     B, bx + n_2, by + n_2, bs,
//000301:                     p5, 0, 0, n_2,
//000302:                     s);
//000303: 
//000304:                 // p6 = (a21 - a11) x (b11 + b12) 
//000305:                 matrix_sub(n_2, n_2,
//000306:                     A, ax + n_2, ay, a_s,
//000307:                     A, ax, ay, a_s,
//000308:                     a_cum, 0, 0, n_2);
//000309:                 matrix_add(n_2, n_2,
//000310:                     B, bx, by, bs,
//000311:                     B, bx, by + n_2, bs,
//000312:                     b_cum, 0, 0, n_2);
//000313:                 strassen_mult_serial(
//000314:                     cancellationToken,
//000315:                     n_2,
//000316:                     a_cum, 0, 0, n_2,
//000317:                     b_cum, 0, 0, n_2,
//000318:                     p6, 0, 0, n_2,
//000319:                     s);
//000320: 
//000321:                 // p7 = (a12 - a22) x (b21 + b22) 
//000322:                 matrix_sub(n_2, n_2,
//000323:                     A, ax, ay + n_2, a_s,
//000324:                     A, ax + n_2, ay + n_2, a_s,
//000325:                     a_cum, 0, 0, n_2);
//000326:                 matrix_add(n_2, n_2,
//000327:                     B, bx + n_2, by, bs,
//000328:                     B, bx + n_2, by + n_2, bs,
//000329:                     b_cum, 0, 0, n_2);
//000330:                 strassen_mult_serial(
//000331:                     cancellationToken,
//000332:                     n_2,
//000333:                     a_cum, 0, 0, n_2,
//000334:                     b_cum, 0, 0, n_2,
//000335:                     p7, 0, 0, n_2,
//000336:                     s);
//000337: 
//000338:                 // c11 = p1 + p4 - p5 + p7 
//000339:                 matrix_add(n_2, n_2,
//000340:                     p1, 0, 0, n_2,
//000341:                     p4, 0, 0, n_2,
//000342:                     C, cx, cy, cs);
//000343:                 matrix_sub(n_2, n_2,
//000344:                     C, cx, cy, cs,
//000345:                     p5, 0, 0, n_2,
//000346:                     C, cx, cy, cs);
//000347:                 matrix_add(n_2, n_2,
//000348:                     C, cx, cy, cs,
//000349:                     p7, 0, 0, n_2,
//000350:                     C, cx, cy, cs);
//000351: 
//000352:                 // c12 = p3 + p5 
//000353:                 matrix_add(n_2, n_2,
//000354:                     p3, 0, 0, n_2,
//000355:                     p5, 0, 0, n_2,
//000356:                     C, cx, cy + n_2, cs);
//000357: 
//000358:                 // c21 = p2 + p4 
//000359:                 matrix_add(n_2, n_2,
//000360:                     p2, 0, 0, n_2,
//000361:                     p4, 0, 0, n_2,
//000362:                     C, cx + n_2, cy, cs);
//000363: 
//000364:                 // c22 = p1 + p3 - p2 + p6 
//000365:                 matrix_add(n_2, n_2,
//000366:                     p1, 0, 0, n_2,
//000367:                     p3, 0, 0, n_2,
//000368:                     C, cx + n_2, cy + n_2, cs);
//000369:                 matrix_sub(n_2, n_2,
//000370:                     C, cx + n_2, cy + n_2, cs,
//000371:                     p2, 0, 0, n_2,
//000372:                     C, cx + n_2, cy + n_2, cs);
//000373:                 matrix_add(n_2, n_2,
//000374:                     C, cx + n_2, cy + n_2, cs,
//000375:                     p6, 0, 0, n_2,
//000376:                     C, cx + n_2, cy + n_2, cs);
//000377:             }
//000378:         }
//000379:     }
//000380: 
//000381:     private static void strassen_mult_parallel(
//000382:         CancellationToken cancellationToken, 
//000383:         // dimensions of A, B, and C submatrices 
//000384:         int n,
//000385:         // (ax,ay) = origin of A submatrix for multiplicand 
//000386:         int* A, int ax, int ay, int a_s,
//000387:         // (bx,by) = origin of B submatrix for multiplicand 
//000388:         int* B, int bx, int by, int bs,
//000389:         // (cx,cy) = origin of C submatrix for result 
//000390:         int* C, int cx, int cy, int cs,
//000391:         // Strassen's recursion limit for array dimensions 
//000392:         int s)
//000393:     {
//000394:         if (n <= s)
//000395:         {
//000396:             matrix_mult_serial(
//000397:                 cancellationToken,
//000398:                 n, n, n,
//000399:                 A, ax, ay, a_s,
//000400:                 B, bx, by, bs,
//000401:                 C, cx, cy, cs);
//000402:         }
//000403:         else
//000404:         {
//000405:             int n_2 = n >> 1;
//000406:             int areaSize = n_2 * n_2;
//000407:             int[] workArr = new int[areaSize * 17];
//000408:             fixed (int* work = workArr)
//000409:             {
//000410:                 int* a_cum = work;
//000411:                 int* b_cum = a_cum + areaSize;
//000412:                 int* c_cum = b_cum + areaSize;
//000413:                 int* d_cum = c_cum + areaSize;
//000414:                 int* e_cum = d_cum + areaSize;
//000415:                 int* f_cum = e_cum + areaSize;
//000416:                 int* g_cum = f_cum + areaSize;
//000417:                 int* h_cum = g_cum + areaSize;
//000418:                 int* i_cum = h_cum + areaSize;
//000419:                 int* j_cum = i_cum + areaSize;
//000420:                 int* p1 = j_cum + areaSize;
//000421:                 int* p2 = p1 + areaSize;
//000422:                 int* p3 = p2 + areaSize;
//000423:                 int* p4 = p3 + areaSize;
//000424:                 int* p5 = p4 + areaSize;
//000425:                 int* p6 = p5 + areaSize;
//000426:                 int* p7 = p6 + areaSize;
//000427: 
//000428:                 // p1 = (a11 + a22) * (b11 + b22) 
//000429:                 Task t_p1 = Task.Factory.StartNew(() =>
//000430:                 {
//000431:                     matrix_add(n_2, n_2,
//000432:                         A, ax, ay, a_s,
//000433:                         A, ax + n_2, ay + n_2, a_s,
//000434:                         a_cum, 0, 0, n_2);
//000435:                     matrix_add(n_2, n_2,
//000436:                         B, bx, by, bs,
//000437:                         B, bx + n_2, by + n_2, bs,
//000438:                         b_cum, 0, 0, n_2);
//000439:                     strassen_mult_parallel(
//000440:                         cancellationToken,
//000441:                         n_2,
//000442:                         a_cum, 0, 0, n_2,
//000443:                         b_cum, 0, 0, n_2,
//000444:                         p1, 0, 0, n_2,
//000445:                         s);
//000446:                 }, cancellationToken);
//000447: 
//000448:                 // p2 = (a21 + a22) * b11 
//000449:                 Task t_p2 = Task.Factory.StartNew(() =>
//000450:                 {
//000451:                     matrix_add(n_2, n_2,
//000452:                         A, ax + n_2, ay, a_s,
//000453:                         A, ax + n_2, ay + n_2, a_s,
//000454:                         c_cum, 0, 0, n_2);
//000455:                     strassen_mult_parallel(
//000456:                         cancellationToken,
//000457:                         n_2,
//000458:                         c_cum, 0, 0, n_2,
//000459:                         B, bx, by, bs,
//000460:                         p2, 0, 0, n_2,
//000461:                         s);
//000462:                 }, cancellationToken);
//000463: 
//000464:                 // p3 = a11 x (b12 - b22) 
//000465:                 Task t_p3 = Task.Factory.StartNew(() =>
//000466:                 {
//000467:                     matrix_sub(n_2, n_2,
//000468:                         B, bx, by + n_2, bs,
//000469:                         B, bx + n_2, by + n_2, bs,
//000470:                         d_cum, 0, 0, n_2);
//000471:                     strassen_mult_parallel(
//000472:                         cancellationToken,
//000473:                         n_2,
//000474:                         A, ax, ay, a_s,
//000475:                         d_cum, 0, 0, n_2,
//000476:                         p3, 0, 0, n_2,
//000477:                         s);
//000478:                 }, cancellationToken);
//000479: 
//000480:                 // p4 = a22 x (b21 - b11) 
//000481:                 Task t_p4 = Task.Factory.StartNew(() =>
//000482:                 {
//000483:                     matrix_sub(n_2, n_2,
//000484:                         B, bx + n_2, by, bs,
//000485:                         B, bx, by, bs,
//000486:                         e_cum, 0, 0, n_2);
//000487:                     strassen_mult_parallel(
//000488:                         cancellationToken,
//000489:                         n_2,
//000490:                         A, ax + n_2, ay + n_2, a_s,
//000491:                         e_cum, 0, 0, n_2,
//000492:                         p4, 0, 0, n_2,
//000493:                         s);
//000494:                 }, cancellationToken);
//000495: 
//000496:                 // p5 = (a11 + a12) x b22 
//000497:                 Task t_p5 = Task.Factory.StartNew(() =>
//000498:                 {
//000499:                     matrix_add(n_2, n_2,
//000500:                         A, ax, ay, a_s,
//000501:                         A, ax, ay + n_2, a_s,
//000502:                         f_cum, 0, 0, n_2);
//000503:                     strassen_mult_parallel(
//000504:                         cancellationToken,
//000505:                         n_2,
//000506:                         f_cum, 0, 0, n_2,
//000507:                         B, bx + n_2, by + n_2, bs,
//000508:                         p5, 0, 0, n_2,
//000509:                         s);
//000510:                 }, cancellationToken);
//000511: 
//000512:                 // p6 = (a21 - a11) x (b11 + b12) 
//000513:                 Task t_p6 = Task.Factory.StartNew(() =>
//000514:                 {
//000515:                     matrix_sub(n_2, n_2,
//000516:                         A, ax + n_2, ay, a_s,
//000517:                         A, ax, ay, a_s,
//000518:                         g_cum, 0, 0, n_2);
//000519:                     matrix_add(n_2, n_2,
//000520:                         B, bx, by, bs,
//000521:                         B, bx, by + n_2, bs,
//000522:                         h_cum, 0, 0, n_2);
//000523:                     strassen_mult_parallel(
//000524:                         cancellationToken,
//000525:                         n_2,
//000526:                         g_cum, 0, 0, n_2,
//000527:                         h_cum, 0, 0, n_2,
//000528:                         p6, 0, 0, n_2,
//000529:                         s);
//000530:                 }, cancellationToken);
//000531: 
//000532:                 // p7 = (a12 - a22) x (b21 + b22) 
//000533:                 Task t_p7 = Task.Factory.StartNew(() =>
//000534:                 {
//000535:                     matrix_sub(n_2, n_2,
//000536:                         A, ax, ay + n_2, a_s,
//000537:                         A, ax + n_2, ay + n_2, a_s,
//000538:                         i_cum, 0, 0, n_2);
//000539:                     matrix_add(n_2, n_2,
//000540:                         B, bx + n_2, by, bs,
//000541:                         B, bx + n_2, by + n_2, bs,
//000542:                         j_cum, 0, 0, n_2);
//000543:                     strassen_mult_parallel(
//000544:                         cancellationToken,
//000545:                         n_2,
//000546:                         i_cum, 0, 0, n_2,
//000547:                         j_cum, 0, 0, n_2,
//000548:                         p7, 0, 0, n_2,
//000549:                         s);
//000550:                 }, cancellationToken);
//000551: 
//000552:                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
//000553:                 catch (AggregateException ae)
//000554:                 {
//000555:                     ae.Flatten().Handle(e => e is TaskCanceledException);
//000556:                     cancellationToken.ThrowIfCancellationRequested();
//000557:                 }
//000558: 
//000559:                 // c11 = p1 + p4 - p5 + p7 
//000560:                 Task t_c11 = Task.Factory.StartNew(() =>
//000561:                 {
//000562:                     matrix_add(n_2, n_2,
//000563:                         p1, 0, 0, n_2,
//000564:                         p4, 0, 0, n_2,
//000565:                         C, cx, cy, cs);
//000566:                     matrix_sub(n_2, n_2,
//000567:                         C, cx, cy, cs,
//000568:                         p5, 0, 0, n_2,
//000569:                         C, cx, cy, cs);
//000570:                     matrix_add(n_2, n_2,
//000571:                         C, cx, cy, cs,
//000572:                         p7, 0, 0, n_2,
//000573:                         C, cx, cy, cs);
//000574:                 });
//000575: 
//000576:                 // c12 = p3 + p5 
//000577:                 Task t_c12 = Task.Factory.StartNew(() =>
//000578:                 {
//000579:                     matrix_add(n_2, n_2,
//000580:                         p3, 0, 0, n_2,
//000581:                         p5, 0, 0, n_2,
//000582:                         C, cx, cy + n_2, cs);
//000583:                 });
//000584: 
//000585:                 // c21 = p2 + p4 
//000586:                 Task t_c21 = Task.Factory.StartNew(() =>
//000587:                 {
//000588:                     matrix_add(n_2, n_2,
//000589:                         p2, 0, 0, n_2,
//000590:                         p4, 0, 0, n_2,
//000591:                         C, cx + n_2, cy, cs);
//000592:                 });
//000593: 
//000594:                 // c22 = p1 + p3 - p2 + p6 
//000595:                 Task t_c22 = Task.Factory.StartNew(() =>
//000596:                 {
//000597:                     matrix_add(n_2, n_2,
//000598:                         p1, 0, 0, n_2,
//000599:                         p3, 0, 0, n_2,
//000600:                         C, cx + n_2, cy + n_2, cs);
//000601:                     matrix_sub(n_2, n_2,
//000602:                         C, cx + n_2, cy + n_2, cs,
//000603:                         p2, 0, 0, n_2,
//000604:                         C, cx + n_2, cy + n_2, cs);
//000605:                     matrix_add(n_2, n_2,
//000606:                         C, cx + n_2, cy + n_2, cs,
//000607:                         p6, 0, 0, n_2,
//000608:                         C, cx + n_2, cy + n_2, cs);
//000609:                 });
//000610: 
//000611:                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
//000612:             }
//000613:         }
//000614:     }
//000615: }
    IL_0056:  ldloc.2
    IL_0057:  brtrue.s   IL_0005

//000124:     }
    IL_0059:  ret
  } // end of method Matrix::matrix_add

  .method private hidebysig static void  matrix_sub(int32 n,
                                                    int32 m,
                                                    int32* A,
                                                    int32 ax,
                                                    int32 ay,
                                                    int32 a_s,
                                                    int32* B,
                                                    int32 bx,
                                                    int32 by,
                                                    int32 bs,
                                                    int32* C,
                                                    int32 cx,
                                                    int32 cy,
                                                    int32 cs) cil managed
  {
    // Code size       94 (0x5e)
    .maxstack  5
    .locals init ([0] int32 i,
             [1] int32 j,
             [2] bool CS$4$0000)
//000125: 
//000126:     private static void matrix_sub(
//000127:         // dimensions of A, B, and C submatrices 
//000128:         int n, int m,
//000129:         // (ax,ay) = origin of A submatrix for multiplicand 
//000130:         int* A, int ax, int ay, int a_s,
//000131:         // (bx,by) = origin of B submatrix for multiplicand 
//000132:         int* B, int bx, int by, int bs,
//000133:         // (cx,cy) = origin of C submatrix for result 
//000134:         int* C, int cx, int cy, int cs)
//000135:     {
    IL_0000:  nop
//000136:         for (int i = 0; i < n; i += 1)
    IL_0001:  ldc.i4.0
    IL_0002:  stloc.0
//000137:         {
//000138:             for (int j = 0; j < m; j += 1)
//000139:             {
//000140:                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] - B[(i + bx) * bs + j + by];
//000141:             }
//000142:         }
//000143:     }
//000144: 
//000145:     private static void matrix_mult_serial(
//000146:         CancellationToken cancellationToken, 
//000147:         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
//000148:         int l, int m, int n,
//000149:         // (ax,ay) = origin of A submatrix for multiplicand 
//000150:         int* A, int ax, int ay, int a_s,
//000151:         // (bx,by) = origin of B submatrix for multiplicand 
//000152:         int* B, int bx, int by, int bs,
//000153:         // (cx,cy) = origin of C submatrix for result 
//000154:         int* C, int cx, int cy, int cs)
//000155:     {
//000156:         for (int i = 0; i < l; ++i)
//000157:         {
//000158:             cancellationToken.ThrowIfCancellationRequested();
//000159:             for (int j = 0; j < n; j++)
//000160:             {
//000161:                 int temp = 0;
//000162:                 for (int k = 0; k < m; k++)
//000163:                 {
//000164:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
//000165:                 }
//000166:                 C[(i + cx) * cs + j + cy] = temp;
//000167:             }
//000168:         }
//000169:     }
//000170: 
//000171:     private static void matrix_mult_parallel(
//000172:         CancellationToken cancellationToken, 
//000173:         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
//000174:         int l, int m, int n,
//000175:         // (ax,ay) = origin of A submatrix for multiplicand 
//000176:         int* A, int ax, int ay, int a_s,
//000177:         // (bx,by) = origin of B submatrix for multiplicand 
//000178:         int* B, int bx, int by, int bs,
//000179:         // (cx,cy) = origin of C submatrix for result 
//000180:         int* C, int cx, int cy, int cs)
//000181:     {
//000182:         ParallelOptions options = new ParallelOptions { CancellationToken = cancellationToken };
//000183:         Parallel.For(0, l, options, i =>
//000184:         {
//000185:             for (int j = 0; j < n; j++)
//000186:             {
//000187:                 int temp = 0;
//000188:                 for (int k = 0; k < m; k++)
//000189:                 {
//000190:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
//000191:                 }
//000192:                 C[(i + cx) * cs + j + cy] = temp;
//000193:             }
//000194:         });
//000195:     }
//000196: 
//000197:     private static void strassen_mult_serial(
//000198:         CancellationToken cancellationToken, 
//000199:         // dimensions of A, B, and C submatrices 
//000200:         int n,
//000201:         // (ax,ay) = origin of A submatrix for multiplicand 
//000202:         int* A, int ax, int ay, int a_s,
//000203:         // (bx,by) = origin of B submatrix for multiplicand 
//000204:         int* B, int bx, int by, int bs,
//000205:         // (cx,cy) = origin of C submatrix for result 
//000206:         int* C, int cx, int cy, int cs,
//000207:         // Strassen's recursion limit for array dimensions 
//000208:         int s)
//000209:     {
//000210:         if (n <= s)
//000211:         {
//000212:             matrix_mult_serial(
//000213:                 cancellationToken,
//000214:                 n, n, n,
//000215:                 A, ax, ay, a_s,
//000216:                 B, bx, by, bs,
//000217:                 C, cx, cy, cs);
//000218:         }
//000219:         else
//000220:         {
//000221:             int n_2 = n >> 1;
//000222:             int[] workArr = new int[n_2 * n_2 * 9];
//000223:             fixed (int* work = workArr)
//000224:             {
//000225:                 int* a_cum = work;
//000226:                 int* b_cum = a_cum + n_2 * n_2;
//000227:                 int* p1 = b_cum + n_2 * n_2;
//000228:                 int* p2 = p1 + n_2 * n_2;
//000229:                 int* p3 = p2 + n_2 * n_2;
//000230:                 int* p4 = p3 + n_2 * n_2;
//000231:                 int* p5 = p4 + n_2 * n_2;
//000232:                 int* p6 = p5 + n_2 * n_2;
//000233:                 int* p7 = p6 + n_2 * n_2;
//000234: 
//000235:                 // p1 = (a11 + a22) * (b11 + b22) 
//000236:                 matrix_add(n_2, n_2,
//000237:                     A, ax, ay, a_s,
//000238:                     A, ax + n_2, ay + n_2, a_s,
//000239:                     a_cum, 0, 0, n_2);
//000240:                 matrix_add(n_2, n_2,
//000241:                     B, bx, by, bs,
//000242:                     B, bx + n_2, by + n_2, bs,
//000243:                     b_cum, 0, 0, n_2);
//000244:                 strassen_mult_serial(
//000245:                     cancellationToken,
//000246:                     n_2,
//000247:                     a_cum, 0, 0, n_2,
//000248:                     b_cum, 0, 0, n_2,
//000249:                     p1, 0, 0, n_2,
//000250:                     s);
//000251: 
//000252:                 // p2 = (a21 + a22) * b11 
//000253:                 matrix_add(n_2, n_2,
//000254:                     A, ax + n_2, ay, a_s,
//000255:                     A, ax + n_2, ay + n_2, a_s,
//000256:                     a_cum, 0, 0, n_2);
//000257:                 strassen_mult_serial(
//000258:                     cancellationToken,
//000259:                     n_2,
//000260:                     a_cum, 0, 0, n_2,
//000261:                     B, bx, by, bs,
//000262:                     p2, 0, 0, n_2,
//000263:                     s);
//000264: 
//000265:                 // p3 = a11 x (b12 - b22) 
//000266:                 matrix_sub(n_2, n_2,
//000267:                     B, bx, by + n_2, bs,
//000268:                     B, bx + n_2, by + n_2, bs,
//000269:                     b_cum, 0, 0, n_2);
//000270:                 strassen_mult_serial(
//000271:                     cancellationToken,
//000272:                     n_2,
//000273:                     A, ax, ay, a_s,
//000274:                     b_cum, 0, 0, n_2,
//000275:                     p3, 0, 0, n_2,
//000276:                     s);
//000277: 
//000278:                 // p4 = a22 x (b21 - b11) 
//000279:                 matrix_sub(n_2, n_2,
//000280:                     B, bx + n_2, by, bs,
//000281:                     B, bx, by, bs,
//000282:                     b_cum, 0, 0, n_2);
//000283:                 strassen_mult_serial(
//000284:                     cancellationToken,
//000285:                     n_2,
//000286:                     A, ax + n_2, ay + n_2, a_s,
//000287:                     b_cum, 0, 0, n_2,
//000288:                     p4, 0, 0, n_2,
//000289:                     s);
//000290: 
//000291:                 // p5 = (a11 + a12) x b22 
//000292:                 matrix_add(n_2, n_2,
//000293:                     A, ax, ay, a_s,
//000294:                     A, ax, ay + n_2, a_s,
//000295:                     a_cum, 0, 0, n_2);
//000296:                 strassen_mult_serial(
//000297:                     cancellationToken,
//000298:                     n_2,
//000299:                     a_cum, 0, 0, n_2,
//000300:                     B, bx + n_2, by + n_2, bs,
//000301:                     p5, 0, 0, n_2,
//000302:                     s);
//000303: 
//000304:                 // p6 = (a21 - a11) x (b11 + b12) 
//000305:                 matrix_sub(n_2, n_2,
//000306:                     A, ax + n_2, ay, a_s,
//000307:                     A, ax, ay, a_s,
//000308:                     a_cum, 0, 0, n_2);
//000309:                 matrix_add(n_2, n_2,
//000310:                     B, bx, by, bs,
//000311:                     B, bx, by + n_2, bs,
//000312:                     b_cum, 0, 0, n_2);
//000313:                 strassen_mult_serial(
//000314:                     cancellationToken,
//000315:                     n_2,
//000316:                     a_cum, 0, 0, n_2,
//000317:                     b_cum, 0, 0, n_2,
//000318:                     p6, 0, 0, n_2,
//000319:                     s);
//000320: 
//000321:                 // p7 = (a12 - a22) x (b21 + b22) 
//000322:                 matrix_sub(n_2, n_2,
//000323:                     A, ax, ay + n_2, a_s,
//000324:                     A, ax + n_2, ay + n_2, a_s,
//000325:                     a_cum, 0, 0, n_2);
//000326:                 matrix_add(n_2, n_2,
//000327:                     B, bx + n_2, by, bs,
//000328:                     B, bx + n_2, by + n_2, bs,
//000329:                     b_cum, 0, 0, n_2);
//000330:                 strassen_mult_serial(
//000331:                     cancellationToken,
//000332:                     n_2,
//000333:                     a_cum, 0, 0, n_2,
//000334:                     b_cum, 0, 0, n_2,
//000335:                     p7, 0, 0, n_2,
//000336:                     s);
//000337: 
//000338:                 // c11 = p1 + p4 - p5 + p7 
//000339:                 matrix_add(n_2, n_2,
//000340:                     p1, 0, 0, n_2,
//000341:                     p4, 0, 0, n_2,
//000342:                     C, cx, cy, cs);
//000343:                 matrix_sub(n_2, n_2,
//000344:                     C, cx, cy, cs,
//000345:                     p5, 0, 0, n_2,
//000346:                     C, cx, cy, cs);
//000347:                 matrix_add(n_2, n_2,
//000348:                     C, cx, cy, cs,
//000349:                     p7, 0, 0, n_2,
//000350:                     C, cx, cy, cs);
//000351: 
//000352:                 // c12 = p3 + p5 
//000353:                 matrix_add(n_2, n_2,
//000354:                     p3, 0, 0, n_2,
//000355:                     p5, 0, 0, n_2,
//000356:                     C, cx, cy + n_2, cs);
//000357: 
//000358:                 // c21 = p2 + p4 
//000359:                 matrix_add(n_2, n_2,
//000360:                     p2, 0, 0, n_2,
//000361:                     p4, 0, 0, n_2,
//000362:                     C, cx + n_2, cy, cs);
//000363: 
//000364:                 // c22 = p1 + p3 - p2 + p6 
//000365:                 matrix_add(n_2, n_2,
//000366:                     p1, 0, 0, n_2,
//000367:                     p3, 0, 0, n_2,
//000368:                     C, cx + n_2, cy + n_2, cs);
//000369:                 matrix_sub(n_2, n_2,
//000370:                     C, cx + n_2, cy + n_2, cs,
//000371:                     p2, 0, 0, n_2,
//000372:                     C, cx + n_2, cy + n_2, cs);
//000373:                 matrix_add(n_2, n_2,
//000374:                     C, cx + n_2, cy + n_2, cs,
//000375:                     p6, 0, 0, n_2,
//000376:                     C, cx + n_2, cy + n_2, cs);
//000377:             }
//000378:         }
//000379:     }
//000380: 
//000381:     private static void strassen_mult_parallel(
//000382:         CancellationToken cancellationToken, 
//000383:         // dimensions of A, B, and C submatrices 
//000384:         int n,
//000385:         // (ax,ay) = origin of A submatrix for multiplicand 
//000386:         int* A, int ax, int ay, int a_s,
//000387:         // (bx,by) = origin of B submatrix for multiplicand 
//000388:         int* B, int bx, int by, int bs,
//000389:         // (cx,cy) = origin of C submatrix for result 
//000390:         int* C, int cx, int cy, int cs,
//000391:         // Strassen's recursion limit for array dimensions 
//000392:         int s)
//000393:     {
//000394:         if (n <= s)
//000395:         {
//000396:             matrix_mult_serial(
//000397:                 cancellationToken,
//000398:                 n, n, n,
//000399:                 A, ax, ay, a_s,
//000400:                 B, bx, by, bs,
//000401:                 C, cx, cy, cs);
//000402:         }
//000403:         else
//000404:         {
//000405:             int n_2 = n >> 1;
//000406:             int areaSize = n_2 * n_2;
//000407:             int[] workArr = new int[areaSize * 17];
//000408:             fixed (int* work = workArr)
//000409:             {
//000410:                 int* a_cum = work;
//000411:                 int* b_cum = a_cum + areaSize;
//000412:                 int* c_cum = b_cum + areaSize;
//000413:                 int* d_cum = c_cum + areaSize;
//000414:                 int* e_cum = d_cum + areaSize;
//000415:                 int* f_cum = e_cum + areaSize;
//000416:                 int* g_cum = f_cum + areaSize;
//000417:                 int* h_cum = g_cum + areaSize;
//000418:                 int* i_cum = h_cum + areaSize;
//000419:                 int* j_cum = i_cum + areaSize;
//000420:                 int* p1 = j_cum + areaSize;
//000421:                 int* p2 = p1 + areaSize;
//000422:                 int* p3 = p2 + areaSize;
//000423:                 int* p4 = p3 + areaSize;
//000424:                 int* p5 = p4 + areaSize;
//000425:                 int* p6 = p5 + areaSize;
//000426:                 int* p7 = p6 + areaSize;
//000427: 
//000428:                 // p1 = (a11 + a22) * (b11 + b22) 
//000429:                 Task t_p1 = Task.Factory.StartNew(() =>
//000430:                 {
//000431:                     matrix_add(n_2, n_2,
//000432:                         A, ax, ay, a_s,
//000433:                         A, ax + n_2, ay + n_2, a_s,
//000434:                         a_cum, 0, 0, n_2);
//000435:                     matrix_add(n_2, n_2,
//000436:                         B, bx, by, bs,
//000437:                         B, bx + n_2, by + n_2, bs,
//000438:                         b_cum, 0, 0, n_2);
//000439:                     strassen_mult_parallel(
//000440:                         cancellationToken,
//000441:                         n_2,
//000442:                         a_cum, 0, 0, n_2,
//000443:                         b_cum, 0, 0, n_2,
//000444:                         p1, 0, 0, n_2,
//000445:                         s);
//000446:                 }, cancellationToken);
//000447: 
//000448:                 // p2 = (a21 + a22) * b11 
//000449:                 Task t_p2 = Task.Factory.StartNew(() =>
//000450:                 {
//000451:                     matrix_add(n_2, n_2,
//000452:                         A, ax + n_2, ay, a_s,
//000453:                         A, ax + n_2, ay + n_2, a_s,
//000454:                         c_cum, 0, 0, n_2);
//000455:                     strassen_mult_parallel(
//000456:                         cancellationToken,
//000457:                         n_2,
//000458:                         c_cum, 0, 0, n_2,
//000459:                         B, bx, by, bs,
//000460:                         p2, 0, 0, n_2,
//000461:                         s);
//000462:                 }, cancellationToken);
//000463: 
//000464:                 // p3 = a11 x (b12 - b22) 
//000465:                 Task t_p3 = Task.Factory.StartNew(() =>
//000466:                 {
//000467:                     matrix_sub(n_2, n_2,
//000468:                         B, bx, by + n_2, bs,
//000469:                         B, bx + n_2, by + n_2, bs,
//000470:                         d_cum, 0, 0, n_2);
//000471:                     strassen_mult_parallel(
//000472:                         cancellationToken,
//000473:                         n_2,
//000474:                         A, ax, ay, a_s,
//000475:                         d_cum, 0, 0, n_2,
//000476:                         p3, 0, 0, n_2,
//000477:                         s);
//000478:                 }, cancellationToken);
//000479: 
//000480:                 // p4 = a22 x (b21 - b11) 
//000481:                 Task t_p4 = Task.Factory.StartNew(() =>
//000482:                 {
//000483:                     matrix_sub(n_2, n_2,
//000484:                         B, bx + n_2, by, bs,
//000485:                         B, bx, by, bs,
//000486:                         e_cum, 0, 0, n_2);
//000487:                     strassen_mult_parallel(
//000488:                         cancellationToken,
//000489:                         n_2,
//000490:                         A, ax + n_2, ay + n_2, a_s,
//000491:                         e_cum, 0, 0, n_2,
//000492:                         p4, 0, 0, n_2,
//000493:                         s);
//000494:                 }, cancellationToken);
//000495: 
//000496:                 // p5 = (a11 + a12) x b22 
//000497:                 Task t_p5 = Task.Factory.StartNew(() =>
//000498:                 {
//000499:                     matrix_add(n_2, n_2,
//000500:                         A, ax, ay, a_s,
//000501:                         A, ax, ay + n_2, a_s,
//000502:                         f_cum, 0, 0, n_2);
//000503:                     strassen_mult_parallel(
//000504:                         cancellationToken,
//000505:                         n_2,
//000506:                         f_cum, 0, 0, n_2,
//000507:                         B, bx + n_2, by + n_2, bs,
//000508:                         p5, 0, 0, n_2,
//000509:                         s);
//000510:                 }, cancellationToken);
//000511: 
//000512:                 // p6 = (a21 - a11) x (b11 + b12) 
//000513:                 Task t_p6 = Task.Factory.StartNew(() =>
//000514:                 {
//000515:                     matrix_sub(n_2, n_2,
//000516:                         A, ax + n_2, ay, a_s,
//000517:                         A, ax, ay, a_s,
//000518:                         g_cum, 0, 0, n_2);
//000519:                     matrix_add(n_2, n_2,
//000520:                         B, bx, by, bs,
//000521:                         B, bx, by + n_2, bs,
//000522:                         h_cum, 0, 0, n_2);
//000523:                     strassen_mult_parallel(
//000524:                         cancellationToken,
//000525:                         n_2,
//000526:                         g_cum, 0, 0, n_2,
//000527:                         h_cum, 0, 0, n_2,
//000528:                         p6, 0, 0, n_2,
//000529:                         s);
//000530:                 }, cancellationToken);
//000531: 
//000532:                 // p7 = (a12 - a22) x (b21 + b22) 
//000533:                 Task t_p7 = Task.Factory.StartNew(() =>
//000534:                 {
//000535:                     matrix_sub(n_2, n_2,
//000536:                         A, ax, ay + n_2, a_s,
//000537:                         A, ax + n_2, ay + n_2, a_s,
//000538:                         i_cum, 0, 0, n_2);
//000539:                     matrix_add(n_2, n_2,
//000540:                         B, bx + n_2, by, bs,
//000541:                         B, bx + n_2, by + n_2, bs,
//000542:                         j_cum, 0, 0, n_2);
//000543:                     strassen_mult_parallel(
//000544:                         cancellationToken,
//000545:                         n_2,
//000546:                         i_cum, 0, 0, n_2,
//000547:                         j_cum, 0, 0, n_2,
//000548:                         p7, 0, 0, n_2,
//000549:                         s);
//000550:                 }, cancellationToken);
//000551: 
//000552:                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
//000553:                 catch (AggregateException ae)
//000554:                 {
//000555:                     ae.Flatten().Handle(e => e is TaskCanceledException);
//000556:                     cancellationToken.ThrowIfCancellationRequested();
//000557:                 }
//000558: 
//000559:                 // c11 = p1 + p4 - p5 + p7 
//000560:                 Task t_c11 = Task.Factory.StartNew(() =>
//000561:                 {
//000562:                     matrix_add(n_2, n_2,
//000563:                         p1, 0, 0, n_2,
//000564:                         p4, 0, 0, n_2,
//000565:                         C, cx, cy, cs);
//000566:                     matrix_sub(n_2, n_2,
//000567:                         C, cx, cy, cs,
//000568:                         p5, 0, 0, n_2,
//000569:                         C, cx, cy, cs);
//000570:                     matrix_add(n_2, n_2,
//000571:                         C, cx, cy, cs,
//000572:                         p7, 0, 0, n_2,
//000573:                         C, cx, cy, cs);
//000574:                 });
//000575: 
//000576:                 // c12 = p3 + p5 
//000577:                 Task t_c12 = Task.Factory.StartNew(() =>
//000578:                 {
//000579:                     matrix_add(n_2, n_2,
//000580:                         p3, 0, 0, n_2,
//000581:                         p5, 0, 0, n_2,
//000582:                         C, cx, cy + n_2, cs);
//000583:                 });
//000584: 
//000585:                 // c21 = p2 + p4 
//000586:                 Task t_c21 = Task.Factory.StartNew(() =>
//000587:                 {
//000588:                     matrix_add(n_2, n_2,
//000589:                         p2, 0, 0, n_2,
//000590:                         p4, 0, 0, n_2,
//000591:                         C, cx + n_2, cy, cs);
//000592:                 });
//000593: 
//000594:                 // c22 = p1 + p3 - p2 + p6 
//000595:                 Task t_c22 = Task.Factory.StartNew(() =>
//000596:                 {
//000597:                     matrix_add(n_2, n_2,
//000598:                         p1, 0, 0, n_2,
//000599:                         p3, 0, 0, n_2,
//000600:                         C, cx + n_2, cy + n_2, cs);
//000601:                     matrix_sub(n_2, n_2,
//000602:                         C, cx + n_2, cy + n_2, cs,
//000603:                         p2, 0, 0, n_2,
//000604:                         C, cx + n_2, cy + n_2, cs);
//000605:                     matrix_add(n_2, n_2,
//000606:                         C, cx + n_2, cy + n_2, cs,
//000607:                         p6, 0, 0, n_2,
//000608:                         C, cx + n_2, cy + n_2, cs);
//000609:                 });
//000610: 
//000611:                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
//000612:             }
//000613:         }
//000614:     }
//000615: }
    IL_0003:  br.s       IL_0055

//000137:         {
    IL_0005:  nop
//000138:             for (int j = 0; j < m; j += 1)
    IL_0006:  ldc.i4.0
    IL_0007:  stloc.1
//000139:             {
//000140:                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] - B[(i + bx) * bs + j + by];
//000141:             }
//000142:         }
//000143:     }
//000144: 
//000145:     private static void matrix_mult_serial(
//000146:         CancellationToken cancellationToken, 
//000147:         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
//000148:         int l, int m, int n,
//000149:         // (ax,ay) = origin of A submatrix for multiplicand 
//000150:         int* A, int ax, int ay, int a_s,
//000151:         // (bx,by) = origin of B submatrix for multiplicand 
//000152:         int* B, int bx, int by, int bs,
//000153:         // (cx,cy) = origin of C submatrix for result 
//000154:         int* C, int cx, int cy, int cs)
//000155:     {
//000156:         for (int i = 0; i < l; ++i)
//000157:         {
//000158:             cancellationToken.ThrowIfCancellationRequested();
//000159:             for (int j = 0; j < n; j++)
//000160:             {
//000161:                 int temp = 0;
//000162:                 for (int k = 0; k < m; k++)
//000163:                 {
//000164:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
//000165:                 }
//000166:                 C[(i + cx) * cs + j + cy] = temp;
//000167:             }
//000168:         }
//000169:     }
//000170: 
//000171:     private static void matrix_mult_parallel(
//000172:         CancellationToken cancellationToken, 
//000173:         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
//000174:         int l, int m, int n,
//000175:         // (ax,ay) = origin of A submatrix for multiplicand 
//000176:         int* A, int ax, int ay, int a_s,
//000177:         // (bx,by) = origin of B submatrix for multiplicand 
//000178:         int* B, int bx, int by, int bs,
//000179:         // (cx,cy) = origin of C submatrix for result 
//000180:         int* C, int cx, int cy, int cs)
//000181:     {
//000182:         ParallelOptions options = new ParallelOptions { CancellationToken = cancellationToken };
//000183:         Parallel.For(0, l, options, i =>
//000184:         {
//000185:             for (int j = 0; j < n; j++)
//000186:             {
//000187:                 int temp = 0;
//000188:                 for (int k = 0; k < m; k++)
//000189:                 {
//000190:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
//000191:                 }
//000192:                 C[(i + cx) * cs + j + cy] = temp;
//000193:             }
//000194:         });
//000195:     }
//000196: 
//000197:     private static void strassen_mult_serial(
//000198:         CancellationToken cancellationToken, 
//000199:         // dimensions of A, B, and C submatrices 
//000200:         int n,
//000201:         // (ax,ay) = origin of A submatrix for multiplicand 
//000202:         int* A, int ax, int ay, int a_s,
//000203:         // (bx,by) = origin of B submatrix for multiplicand 
//000204:         int* B, int bx, int by, int bs,
//000205:         // (cx,cy) = origin of C submatrix for result 
//000206:         int* C, int cx, int cy, int cs,
//000207:         // Strassen's recursion limit for array dimensions 
//000208:         int s)
//000209:     {
//000210:         if (n <= s)
//000211:         {
//000212:             matrix_mult_serial(
//000213:                 cancellationToken,
//000214:                 n, n, n,
//000215:                 A, ax, ay, a_s,
//000216:                 B, bx, by, bs,
//000217:                 C, cx, cy, cs);
//000218:         }
//000219:         else
//000220:         {
//000221:             int n_2 = n >> 1;
//000222:             int[] workArr = new int[n_2 * n_2 * 9];
//000223:             fixed (int* work = workArr)
//000224:             {
//000225:                 int* a_cum = work;
//000226:                 int* b_cum = a_cum + n_2 * n_2;
//000227:                 int* p1 = b_cum + n_2 * n_2;
//000228:                 int* p2 = p1 + n_2 * n_2;
//000229:                 int* p3 = p2 + n_2 * n_2;
//000230:                 int* p4 = p3 + n_2 * n_2;
//000231:                 int* p5 = p4 + n_2 * n_2;
//000232:                 int* p6 = p5 + n_2 * n_2;
//000233:                 int* p7 = p6 + n_2 * n_2;
//000234: 
//000235:                 // p1 = (a11 + a22) * (b11 + b22) 
//000236:                 matrix_add(n_2, n_2,
//000237:                     A, ax, ay, a_s,
//000238:                     A, ax + n_2, ay + n_2, a_s,
//000239:                     a_cum, 0, 0, n_2);
//000240:                 matrix_add(n_2, n_2,
//000241:                     B, bx, by, bs,
//000242:                     B, bx + n_2, by + n_2, bs,
//000243:                     b_cum, 0, 0, n_2);
//000244:                 strassen_mult_serial(
//000245:                     cancellationToken,
//000246:                     n_2,
//000247:                     a_cum, 0, 0, n_2,
//000248:                     b_cum, 0, 0, n_2,
//000249:                     p1, 0, 0, n_2,
//000250:                     s);
//000251: 
//000252:                 // p2 = (a21 + a22) * b11 
//000253:                 matrix_add(n_2, n_2,
//000254:                     A, ax + n_2, ay, a_s,
//000255:                     A, ax + n_2, ay + n_2, a_s,
//000256:                     a_cum, 0, 0, n_2);
//000257:                 strassen_mult_serial(
//000258:                     cancellationToken,
//000259:                     n_2,
//000260:                     a_cum, 0, 0, n_2,
//000261:                     B, bx, by, bs,
//000262:                     p2, 0, 0, n_2,
//000263:                     s);
//000264: 
//000265:                 // p3 = a11 x (b12 - b22) 
//000266:                 matrix_sub(n_2, n_2,
//000267:                     B, bx, by + n_2, bs,
//000268:                     B, bx + n_2, by + n_2, bs,
//000269:                     b_cum, 0, 0, n_2);
//000270:                 strassen_mult_serial(
//000271:                     cancellationToken,
//000272:                     n_2,
//000273:                     A, ax, ay, a_s,
//000274:                     b_cum, 0, 0, n_2,
//000275:                     p3, 0, 0, n_2,
//000276:                     s);
//000277: 
//000278:                 // p4 = a22 x (b21 - b11) 
//000279:                 matrix_sub(n_2, n_2,
//000280:                     B, bx + n_2, by, bs,
//000281:                     B, bx, by, bs,
//000282:                     b_cum, 0, 0, n_2);
//000283:                 strassen_mult_serial(
//000284:                     cancellationToken,
//000285:                     n_2,
//000286:                     A, ax + n_2, ay + n_2, a_s,
//000287:                     b_cum, 0, 0, n_2,
//000288:                     p4, 0, 0, n_2,
//000289:                     s);
//000290: 
//000291:                 // p5 = (a11 + a12) x b22 
//000292:                 matrix_add(n_2, n_2,
//000293:                     A, ax, ay, a_s,
//000294:                     A, ax, ay + n_2, a_s,
//000295:                     a_cum, 0, 0, n_2);
//000296:                 strassen_mult_serial(
//000297:                     cancellationToken,
//000298:                     n_2,
//000299:                     a_cum, 0, 0, n_2,
//000300:                     B, bx + n_2, by + n_2, bs,
//000301:                     p5, 0, 0, n_2,
//000302:                     s);
//000303: 
//000304:                 // p6 = (a21 - a11) x (b11 + b12) 
//000305:                 matrix_sub(n_2, n_2,
//000306:                     A, ax + n_2, ay, a_s,
//000307:                     A, ax, ay, a_s,
//000308:                     a_cum, 0, 0, n_2);
//000309:                 matrix_add(n_2, n_2,
//000310:                     B, bx, by, bs,
//000311:                     B, bx, by + n_2, bs,
//000312:                     b_cum, 0, 0, n_2);
//000313:                 strassen_mult_serial(
//000314:                     cancellationToken,
//000315:                     n_2,
//000316:                     a_cum, 0, 0, n_2,
//000317:                     b_cum, 0, 0, n_2,
//000318:                     p6, 0, 0, n_2,
//000319:                     s);
//000320: 
//000321:                 // p7 = (a12 - a22) x (b21 + b22) 
//000322:                 matrix_sub(n_2, n_2,
//000323:                     A, ax, ay + n_2, a_s,
//000324:                     A, ax + n_2, ay + n_2, a_s,
//000325:                     a_cum, 0, 0, n_2);
//000326:                 matrix_add(n_2, n_2,
//000327:                     B, bx + n_2, by, bs,
//000328:                     B, bx + n_2, by + n_2, bs,
//000329:                     b_cum, 0, 0, n_2);
//000330:                 strassen_mult_serial(
//000331:                     cancellationToken,
//000332:                     n_2,
//000333:                     a_cum, 0, 0, n_2,
//000334:                     b_cum, 0, 0, n_2,
//000335:                     p7, 0, 0, n_2,
//000336:                     s);
//000337: 
//000338:                 // c11 = p1 + p4 - p5 + p7 
//000339:                 matrix_add(n_2, n_2,
//000340:                     p1, 0, 0, n_2,
//000341:                     p4, 0, 0, n_2,
//000342:                     C, cx, cy, cs);
//000343:                 matrix_sub(n_2, n_2,
//000344:                     C, cx, cy, cs,
//000345:                     p5, 0, 0, n_2,
//000346:                     C, cx, cy, cs);
//000347:                 matrix_add(n_2, n_2,
//000348:                     C, cx, cy, cs,
//000349:                     p7, 0, 0, n_2,
//000350:                     C, cx, cy, cs);
//000351: 
//000352:                 // c12 = p3 + p5 
//000353:                 matrix_add(n_2, n_2,
//000354:                     p3, 0, 0, n_2,
//000355:                     p5, 0, 0, n_2,
//000356:                     C, cx, cy + n_2, cs);
//000357: 
//000358:                 // c21 = p2 + p4 
//000359:                 matrix_add(n_2, n_2,
//000360:                     p2, 0, 0, n_2,
//000361:                     p4, 0, 0, n_2,
//000362:                     C, cx + n_2, cy, cs);
//000363: 
//000364:                 // c22 = p1 + p3 - p2 + p6 
//000365:                 matrix_add(n_2, n_2,
//000366:                     p1, 0, 0, n_2,
//000367:                     p3, 0, 0, n_2,
//000368:                     C, cx + n_2, cy + n_2, cs);
//000369:                 matrix_sub(n_2, n_2,
//000370:                     C, cx + n_2, cy + n_2, cs,
//000371:                     p2, 0, 0, n_2,
//000372:                     C, cx + n_2, cy + n_2, cs);
//000373:                 matrix_add(n_2, n_2,
//000374:                     C, cx + n_2, cy + n_2, cs,
//000375:                     p6, 0, 0, n_2,
//000376:                     C, cx + n_2, cy + n_2, cs);
//000377:             }
//000378:         }
//000379:     }
//000380: 
//000381:     private static void strassen_mult_parallel(
//000382:         CancellationToken cancellationToken, 
//000383:         // dimensions of A, B, and C submatrices 
//000384:         int n,
//000385:         // (ax,ay) = origin of A submatrix for multiplicand 
//000386:         int* A, int ax, int ay, int a_s,
//000387:         // (bx,by) = origin of B submatrix for multiplicand 
//000388:         int* B, int bx, int by, int bs,
//000389:         // (cx,cy) = origin of C submatrix for result 
//000390:         int* C, int cx, int cy, int cs,
//000391:         // Strassen's recursion limit for array dimensions 
//000392:         int s)
//000393:     {
//000394:         if (n <= s)
//000395:         {
//000396:             matrix_mult_serial(
//000397:                 cancellationToken,
//000398:                 n, n, n,
//000399:                 A, ax, ay, a_s,
//000400:                 B, bx, by, bs,
//000401:                 C, cx, cy, cs);
//000402:         }
//000403:         else
//000404:         {
//000405:             int n_2 = n >> 1;
//000406:             int areaSize = n_2 * n_2;
//000407:             int[] workArr = new int[areaSize * 17];
//000408:             fixed (int* work = workArr)
//000409:             {
//000410:                 int* a_cum = work;
//000411:                 int* b_cum = a_cum + areaSize;
//000412:                 int* c_cum = b_cum + areaSize;
//000413:                 int* d_cum = c_cum + areaSize;
//000414:                 int* e_cum = d_cum + areaSize;
//000415:                 int* f_cum = e_cum + areaSize;
//000416:                 int* g_cum = f_cum + areaSize;
//000417:                 int* h_cum = g_cum + areaSize;
//000418:                 int* i_cum = h_cum + areaSize;
//000419:                 int* j_cum = i_cum + areaSize;
//000420:                 int* p1 = j_cum + areaSize;
//000421:                 int* p2 = p1 + areaSize;
//000422:                 int* p3 = p2 + areaSize;
//000423:                 int* p4 = p3 + areaSize;
//000424:                 int* p5 = p4 + areaSize;
//000425:                 int* p6 = p5 + areaSize;
//000426:                 int* p7 = p6 + areaSize;
//000427: 
//000428:                 // p1 = (a11 + a22) * (b11 + b22) 
//000429:                 Task t_p1 = Task.Factory.StartNew(() =>
//000430:                 {
//000431:                     matrix_add(n_2, n_2,
//000432:                         A, ax, ay, a_s,
//000433:                         A, ax + n_2, ay + n_2, a_s,
//000434:                         a_cum, 0, 0, n_2);
//000435:                     matrix_add(n_2, n_2,
//000436:                         B, bx, by, bs,
//000437:                         B, bx + n_2, by + n_2, bs,
//000438:                         b_cum, 0, 0, n_2);
//000439:                     strassen_mult_parallel(
//000440:                         cancellationToken,
//000441:                         n_2,
//000442:                         a_cum, 0, 0, n_2,
//000443:                         b_cum, 0, 0, n_2,
//000444:                         p1, 0, 0, n_2,
//000445:                         s);
//000446:                 }, cancellationToken);
//000447: 
//000448:                 // p2 = (a21 + a22) * b11 
//000449:                 Task t_p2 = Task.Factory.StartNew(() =>
//000450:                 {
//000451:                     matrix_add(n_2, n_2,
//000452:                         A, ax + n_2, ay, a_s,
//000453:                         A, ax + n_2, ay + n_2, a_s,
//000454:                         c_cum, 0, 0, n_2);
//000455:                     strassen_mult_parallel(
//000456:                         cancellationToken,
//000457:                         n_2,
//000458:                         c_cum, 0, 0, n_2,
//000459:                         B, bx, by, bs,
//000460:                         p2, 0, 0, n_2,
//000461:                         s);
//000462:                 }, cancellationToken);
//000463: 
//000464:                 // p3 = a11 x (b12 - b22) 
//000465:                 Task t_p3 = Task.Factory.StartNew(() =>
//000466:                 {
//000467:                     matrix_sub(n_2, n_2,
//000468:                         B, bx, by + n_2, bs,
//000469:                         B, bx + n_2, by + n_2, bs,
//000470:                         d_cum, 0, 0, n_2);
//000471:                     strassen_mult_parallel(
//000472:                         cancellationToken,
//000473:                         n_2,
//000474:                         A, ax, ay, a_s,
//000475:                         d_cum, 0, 0, n_2,
//000476:                         p3, 0, 0, n_2,
//000477:                         s);
//000478:                 }, cancellationToken);
//000479: 
//000480:                 // p4 = a22 x (b21 - b11) 
//000481:                 Task t_p4 = Task.Factory.StartNew(() =>
//000482:                 {
//000483:                     matrix_sub(n_2, n_2,
//000484:                         B, bx + n_2, by, bs,
//000485:                         B, bx, by, bs,
//000486:                         e_cum, 0, 0, n_2);
//000487:                     strassen_mult_parallel(
//000488:                         cancellationToken,
//000489:                         n_2,
//000490:                         A, ax + n_2, ay + n_2, a_s,
//000491:                         e_cum, 0, 0, n_2,
//000492:                         p4, 0, 0, n_2,
//000493:                         s);
//000494:                 }, cancellationToken);
//000495: 
//000496:                 // p5 = (a11 + a12) x b22 
//000497:                 Task t_p5 = Task.Factory.StartNew(() =>
//000498:                 {
//000499:                     matrix_add(n_2, n_2,
//000500:                         A, ax, ay, a_s,
//000501:                         A, ax, ay + n_2, a_s,
//000502:                         f_cum, 0, 0, n_2);
//000503:                     strassen_mult_parallel(
//000504:                         cancellationToken,
//000505:                         n_2,
//000506:                         f_cum, 0, 0, n_2,
//000507:                         B, bx + n_2, by + n_2, bs,
//000508:                         p5, 0, 0, n_2,
//000509:                         s);
//000510:                 }, cancellationToken);
//000511: 
//000512:                 // p6 = (a21 - a11) x (b11 + b12) 
//000513:                 Task t_p6 = Task.Factory.StartNew(() =>
//000514:                 {
//000515:                     matrix_sub(n_2, n_2,
//000516:                         A, ax + n_2, ay, a_s,
//000517:                         A, ax, ay, a_s,
//000518:                         g_cum, 0, 0, n_2);
//000519:                     matrix_add(n_2, n_2,
//000520:                         B, bx, by, bs,
//000521:                         B, bx, by + n_2, bs,
//000522:                         h_cum, 0, 0, n_2);
//000523:                     strassen_mult_parallel(
//000524:                         cancellationToken,
//000525:                         n_2,
//000526:                         g_cum, 0, 0, n_2,
//000527:                         h_cum, 0, 0, n_2,
//000528:                         p6, 0, 0, n_2,
//000529:                         s);
//000530:                 }, cancellationToken);
//000531: 
//000532:                 // p7 = (a12 - a22) x (b21 + b22) 
//000533:                 Task t_p7 = Task.Factory.StartNew(() =>
//000534:                 {
//000535:                     matrix_sub(n_2, n_2,
//000536:                         A, ax, ay + n_2, a_s,
//000537:                         A, ax + n_2, ay + n_2, a_s,
//000538:                         i_cum, 0, 0, n_2);
//000539:                     matrix_add(n_2, n_2,
//000540:                         B, bx + n_2, by, bs,
//000541:                         B, bx + n_2, by + n_2, bs,
//000542:                         j_cum, 0, 0, n_2);
//000543:                     strassen_mult_parallel(
//000544:                         cancellationToken,
//000545:                         n_2,
//000546:                         i_cum, 0, 0, n_2,
//000547:                         j_cum, 0, 0, n_2,
//000548:                         p7, 0, 0, n_2,
//000549:                         s);
//000550:                 }, cancellationToken);
//000551: 
//000552:                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
//000553:                 catch (AggregateException ae)
//000554:                 {
//000555:                     ae.Flatten().Handle(e => e is TaskCanceledException);
//000556:                     cancellationToken.ThrowIfCancellationRequested();
//000557:                 }
//000558: 
//000559:                 // c11 = p1 + p4 - p5 + p7 
//000560:                 Task t_c11 = Task.Factory.StartNew(() =>
//000561:                 {
//000562:                     matrix_add(n_2, n_2,
//000563:                         p1, 0, 0, n_2,
//000564:                         p4, 0, 0, n_2,
//000565:                         C, cx, cy, cs);
//000566:                     matrix_sub(n_2, n_2,
//000567:                         C, cx, cy, cs,
//000568:                         p5, 0, 0, n_2,
//000569:                         C, cx, cy, cs);
//000570:                     matrix_add(n_2, n_2,
//000571:                         C, cx, cy, cs,
//000572:                         p7, 0, 0, n_2,
//000573:                         C, cx, cy, cs);
//000574:                 });
//000575: 
//000576:                 // c12 = p3 + p5 
//000577:                 Task t_c12 = Task.Factory.StartNew(() =>
//000578:                 {
//000579:                     matrix_add(n_2, n_2,
//000580:                         p3, 0, 0, n_2,
//000581:                         p5, 0, 0, n_2,
//000582:                         C, cx, cy + n_2, cs);
//000583:                 });
//000584: 
//000585:                 // c21 = p2 + p4 
//000586:                 Task t_c21 = Task.Factory.StartNew(() =>
//000587:                 {
//000588:                     matrix_add(n_2, n_2,
//000589:                         p2, 0, 0, n_2,
//000590:                         p4, 0, 0, n_2,
//000591:                         C, cx + n_2, cy, cs);
//000592:                 });
//000593: 
//000594:                 // c22 = p1 + p3 - p2 + p6 
//000595:                 Task t_c22 = Task.Factory.StartNew(() =>
//000596:                 {
//000597:                     matrix_add(n_2, n_2,
//000598:                         p1, 0, 0, n_2,
//000599:                         p3, 0, 0, n_2,
//000600:                         C, cx + n_2, cy + n_2, cs);
//000601:                     matrix_sub(n_2, n_2,
//000602:                         C, cx + n_2, cy + n_2, cs,
//000603:                         p2, 0, 0, n_2,
//000604:                         C, cx + n_2, cy + n_2, cs);
//000605:                     matrix_add(n_2, n_2,
//000606:                         C, cx + n_2, cy + n_2, cs,
//000607:                         p6, 0, 0, n_2,
//000608:                         C, cx + n_2, cy + n_2, cs);
//000609:                 });
//000610: 
//000611:                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
//000612:             }
//000613:         }
//000614:     }
//000615: }
    IL_0008:  br.s       IL_0048

//000139:             {
    IL_000a:  nop
//000140:                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] - B[(i + bx) * bs + j + by];
    IL_000b:  ldarg.s    C
    IL_000d:  ldloc.0
    IL_000e:  ldarg.s    cx
    IL_0010:  add
    IL_0011:  ldarg.s    cs
    IL_0013:  mul
    IL_0014:  ldloc.1
    IL_0015:  add
    IL_0016:  ldarg.s    cy
    IL_0018:  add
    IL_0019:  conv.i
    IL_001a:  ldc.i4.4
    IL_001b:  mul
    IL_001c:  add
    IL_001d:  ldarg.2
    IL_001e:  ldloc.0
    IL_001f:  ldarg.3
    IL_0020:  add
    IL_0021:  ldarg.s    a_s
    IL_0023:  mul
    IL_0024:  ldloc.1
    IL_0025:  add
    IL_0026:  ldarg.s    ay
    IL_0028:  add
    IL_0029:  conv.i
    IL_002a:  ldc.i4.4
    IL_002b:  mul
    IL_002c:  add
    IL_002d:  ldind.i4
    IL_002e:  ldarg.s    B
    IL_0030:  ldloc.0
    IL_0031:  ldarg.s    bx
    IL_0033:  add
    IL_0034:  ldarg.s    bs
    IL_0036:  mul
    IL_0037:  ldloc.1
    IL_0038:  add
    IL_0039:  ldarg.s    by
    IL_003b:  add
    IL_003c:  conv.i
    IL_003d:  ldc.i4.4
    IL_003e:  mul
    IL_003f:  add
    IL_0040:  ldind.i4
    IL_0041:  sub
    IL_0042:  stind.i4
//000141:             }
    IL_0043:  nop
//000138:             for (int j = 0; j < m; j += 1)
    IL_0044:  ldloc.1
    IL_0045:  ldc.i4.1
    IL_0046:  add
    IL_0047:  stloc.1
    IL_0048:  ldloc.1
    IL_0049:  ldarg.1
    IL_004a:  clt
    IL_004c:  stloc.2
//000139:             {
//000140:                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] - B[(i + bx) * bs + j + by];
//000141:             }
//000142:         }
//000143:     }
//000144: 
//000145:     private static void matrix_mult_serial(
//000146:         CancellationToken cancellationToken, 
//000147:         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
//000148:         int l, int m, int n,
//000149:         // (ax,ay) = origin of A submatrix for multiplicand 
//000150:         int* A, int ax, int ay, int a_s,
//000151:         // (bx,by) = origin of B submatrix for multiplicand 
//000152:         int* B, int bx, int by, int bs,
//000153:         // (cx,cy) = origin of C submatrix for result 
//000154:         int* C, int cx, int cy, int cs)
//000155:     {
//000156:         for (int i = 0; i < l; ++i)
//000157:         {
//000158:             cancellationToken.ThrowIfCancellationRequested();
//000159:             for (int j = 0; j < n; j++)
//000160:             {
//000161:                 int temp = 0;
//000162:                 for (int k = 0; k < m; k++)
//000163:                 {
//000164:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
//000165:                 }
//000166:                 C[(i + cx) * cs + j + cy] = temp;
//000167:             }
//000168:         }
//000169:     }
//000170: 
//000171:     private static void matrix_mult_parallel(
//000172:         CancellationToken cancellationToken, 
//000173:         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
//000174:         int l, int m, int n,
//000175:         // (ax,ay) = origin of A submatrix for multiplicand 
//000176:         int* A, int ax, int ay, int a_s,
//000177:         // (bx,by) = origin of B submatrix for multiplicand 
//000178:         int* B, int bx, int by, int bs,
//000179:         // (cx,cy) = origin of C submatrix for result 
//000180:         int* C, int cx, int cy, int cs)
//000181:     {
//000182:         ParallelOptions options = new ParallelOptions { CancellationToken = cancellationToken };
//000183:         Parallel.For(0, l, options, i =>
//000184:         {
//000185:             for (int j = 0; j < n; j++)
//000186:             {
//000187:                 int temp = 0;
//000188:                 for (int k = 0; k < m; k++)
//000189:                 {
//000190:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
//000191:                 }
//000192:                 C[(i + cx) * cs + j + cy] = temp;
//000193:             }
//000194:         });
//000195:     }
//000196: 
//000197:     private static void strassen_mult_serial(
//000198:         CancellationToken cancellationToken, 
//000199:         // dimensions of A, B, and C submatrices 
//000200:         int n,
//000201:         // (ax,ay) = origin of A submatrix for multiplicand 
//000202:         int* A, int ax, int ay, int a_s,
//000203:         // (bx,by) = origin of B submatrix for multiplicand 
//000204:         int* B, int bx, int by, int bs,
//000205:         // (cx,cy) = origin of C submatrix for result 
//000206:         int* C, int cx, int cy, int cs,
//000207:         // Strassen's recursion limit for array dimensions 
//000208:         int s)
//000209:     {
//000210:         if (n <= s)
//000211:         {
//000212:             matrix_mult_serial(
//000213:                 cancellationToken,
//000214:                 n, n, n,
//000215:                 A, ax, ay, a_s,
//000216:                 B, bx, by, bs,
//000217:                 C, cx, cy, cs);
//000218:         }
//000219:         else
//000220:         {
//000221:             int n_2 = n >> 1;
//000222:             int[] workArr = new int[n_2 * n_2 * 9];
//000223:             fixed (int* work = workArr)
//000224:             {
//000225:                 int* a_cum = work;
//000226:                 int* b_cum = a_cum + n_2 * n_2;
//000227:                 int* p1 = b_cum + n_2 * n_2;
//000228:                 int* p2 = p1 + n_2 * n_2;
//000229:                 int* p3 = p2 + n_2 * n_2;
//000230:                 int* p4 = p3 + n_2 * n_2;
//000231:                 int* p5 = p4 + n_2 * n_2;
//000232:                 int* p6 = p5 + n_2 * n_2;
//000233:                 int* p7 = p6 + n_2 * n_2;
//000234: 
//000235:                 // p1 = (a11 + a22) * (b11 + b22) 
//000236:                 matrix_add(n_2, n_2,
//000237:                     A, ax, ay, a_s,
//000238:                     A, ax + n_2, ay + n_2, a_s,
//000239:                     a_cum, 0, 0, n_2);
//000240:                 matrix_add(n_2, n_2,
//000241:                     B, bx, by, bs,
//000242:                     B, bx + n_2, by + n_2, bs,
//000243:                     b_cum, 0, 0, n_2);
//000244:                 strassen_mult_serial(
//000245:                     cancellationToken,
//000246:                     n_2,
//000247:                     a_cum, 0, 0, n_2,
//000248:                     b_cum, 0, 0, n_2,
//000249:                     p1, 0, 0, n_2,
//000250:                     s);
//000251: 
//000252:                 // p2 = (a21 + a22) * b11 
//000253:                 matrix_add(n_2, n_2,
//000254:                     A, ax + n_2, ay, a_s,
//000255:                     A, ax + n_2, ay + n_2, a_s,
//000256:                     a_cum, 0, 0, n_2);
//000257:                 strassen_mult_serial(
//000258:                     cancellationToken,
//000259:                     n_2,
//000260:                     a_cum, 0, 0, n_2,
//000261:                     B, bx, by, bs,
//000262:                     p2, 0, 0, n_2,
//000263:                     s);
//000264: 
//000265:                 // p3 = a11 x (b12 - b22) 
//000266:                 matrix_sub(n_2, n_2,
//000267:                     B, bx, by + n_2, bs,
//000268:                     B, bx + n_2, by + n_2, bs,
//000269:                     b_cum, 0, 0, n_2);
//000270:                 strassen_mult_serial(
//000271:                     cancellationToken,
//000272:                     n_2,
//000273:                     A, ax, ay, a_s,
//000274:                     b_cum, 0, 0, n_2,
//000275:                     p3, 0, 0, n_2,
//000276:                     s);
//000277: 
//000278:                 // p4 = a22 x (b21 - b11) 
//000279:                 matrix_sub(n_2, n_2,
//000280:                     B, bx + n_2, by, bs,
//000281:                     B, bx, by, bs,
//000282:                     b_cum, 0, 0, n_2);
//000283:                 strassen_mult_serial(
//000284:                     cancellationToken,
//000285:                     n_2,
//000286:                     A, ax + n_2, ay + n_2, a_s,
//000287:                     b_cum, 0, 0, n_2,
//000288:                     p4, 0, 0, n_2,
//000289:                     s);
//000290: 
//000291:                 // p5 = (a11 + a12) x b22 
//000292:                 matrix_add(n_2, n_2,
//000293:                     A, ax, ay, a_s,
//000294:                     A, ax, ay + n_2, a_s,
//000295:                     a_cum, 0, 0, n_2);
//000296:                 strassen_mult_serial(
//000297:                     cancellationToken,
//000298:                     n_2,
//000299:                     a_cum, 0, 0, n_2,
//000300:                     B, bx + n_2, by + n_2, bs,
//000301:                     p5, 0, 0, n_2,
//000302:                     s);
//000303: 
//000304:                 // p6 = (a21 - a11) x (b11 + b12) 
//000305:                 matrix_sub(n_2, n_2,
//000306:                     A, ax + n_2, ay, a_s,
//000307:                     A, ax, ay, a_s,
//000308:                     a_cum, 0, 0, n_2);
//000309:                 matrix_add(n_2, n_2,
//000310:                     B, bx, by, bs,
//000311:                     B, bx, by + n_2, bs,
//000312:                     b_cum, 0, 0, n_2);
//000313:                 strassen_mult_serial(
//000314:                     cancellationToken,
//000315:                     n_2,
//000316:                     a_cum, 0, 0, n_2,
//000317:                     b_cum, 0, 0, n_2,
//000318:                     p6, 0, 0, n_2,
//000319:                     s);
//000320: 
//000321:                 // p7 = (a12 - a22) x (b21 + b22) 
//000322:                 matrix_sub(n_2, n_2,
//000323:                     A, ax, ay + n_2, a_s,
//000324:                     A, ax + n_2, ay + n_2, a_s,
//000325:                     a_cum, 0, 0, n_2);
//000326:                 matrix_add(n_2, n_2,
//000327:                     B, bx + n_2, by, bs,
//000328:                     B, bx + n_2, by + n_2, bs,
//000329:                     b_cum, 0, 0, n_2);
//000330:                 strassen_mult_serial(
//000331:                     cancellationToken,
//000332:                     n_2,
//000333:                     a_cum, 0, 0, n_2,
//000334:                     b_cum, 0, 0, n_2,
//000335:                     p7, 0, 0, n_2,
//000336:                     s);
//000337: 
//000338:                 // c11 = p1 + p4 - p5 + p7 
//000339:                 matrix_add(n_2, n_2,
//000340:                     p1, 0, 0, n_2,
//000341:                     p4, 0, 0, n_2,
//000342:                     C, cx, cy, cs);
//000343:                 matrix_sub(n_2, n_2,
//000344:                     C, cx, cy, cs,
//000345:                     p5, 0, 0, n_2,
//000346:                     C, cx, cy, cs);
//000347:                 matrix_add(n_2, n_2,
//000348:                     C, cx, cy, cs,
//000349:                     p7, 0, 0, n_2,
//000350:                     C, cx, cy, cs);
//000351: 
//000352:                 // c12 = p3 + p5 
//000353:                 matrix_add(n_2, n_2,
//000354:                     p3, 0, 0, n_2,
//000355:                     p5, 0, 0, n_2,
//000356:                     C, cx, cy + n_2, cs);
//000357: 
//000358:                 // c21 = p2 + p4 
//000359:                 matrix_add(n_2, n_2,
//000360:                     p2, 0, 0, n_2,
//000361:                     p4, 0, 0, n_2,
//000362:                     C, cx + n_2, cy, cs);
//000363: 
//000364:                 // c22 = p1 + p3 - p2 + p6 
//000365:                 matrix_add(n_2, n_2,
//000366:                     p1, 0, 0, n_2,
//000367:                     p3, 0, 0, n_2,
//000368:                     C, cx + n_2, cy + n_2, cs);
//000369:                 matrix_sub(n_2, n_2,
//000370:                     C, cx + n_2, cy + n_2, cs,
//000371:                     p2, 0, 0, n_2,
//000372:                     C, cx + n_2, cy + n_2, cs);
//000373:                 matrix_add(n_2, n_2,
//000374:                     C, cx + n_2, cy + n_2, cs,
//000375:                     p6, 0, 0, n_2,
//000376:                     C, cx + n_2, cy + n_2, cs);
//000377:             }
//000378:         }
//000379:     }
//000380: 
//000381:     private static void strassen_mult_parallel(
//000382:         CancellationToken cancellationToken, 
//000383:         // dimensions of A, B, and C submatrices 
//000384:         int n,
//000385:         // (ax,ay) = origin of A submatrix for multiplicand 
//000386:         int* A, int ax, int ay, int a_s,
//000387:         // (bx,by) = origin of B submatrix for multiplicand 
//000388:         int* B, int bx, int by, int bs,
//000389:         // (cx,cy) = origin of C submatrix for result 
//000390:         int* C, int cx, int cy, int cs,
//000391:         // Strassen's recursion limit for array dimensions 
//000392:         int s)
//000393:     {
//000394:         if (n <= s)
//000395:         {
//000396:             matrix_mult_serial(
//000397:                 cancellationToken,
//000398:                 n, n, n,
//000399:                 A, ax, ay, a_s,
//000400:                 B, bx, by, bs,
//000401:                 C, cx, cy, cs);
//000402:         }
//000403:         else
//000404:         {
//000405:             int n_2 = n >> 1;
//000406:             int areaSize = n_2 * n_2;
//000407:             int[] workArr = new int[areaSize * 17];
//000408:             fixed (int* work = workArr)
//000409:             {
//000410:                 int* a_cum = work;
//000411:                 int* b_cum = a_cum + areaSize;
//000412:                 int* c_cum = b_cum + areaSize;
//000413:                 int* d_cum = c_cum + areaSize;
//000414:                 int* e_cum = d_cum + areaSize;
//000415:                 int* f_cum = e_cum + areaSize;
//000416:                 int* g_cum = f_cum + areaSize;
//000417:                 int* h_cum = g_cum + areaSize;
//000418:                 int* i_cum = h_cum + areaSize;
//000419:                 int* j_cum = i_cum + areaSize;
//000420:                 int* p1 = j_cum + areaSize;
//000421:                 int* p2 = p1 + areaSize;
//000422:                 int* p3 = p2 + areaSize;
//000423:                 int* p4 = p3 + areaSize;
//000424:                 int* p5 = p4 + areaSize;
//000425:                 int* p6 = p5 + areaSize;
//000426:                 int* p7 = p6 + areaSize;
//000427: 
//000428:                 // p1 = (a11 + a22) * (b11 + b22) 
//000429:                 Task t_p1 = Task.Factory.StartNew(() =>
//000430:                 {
//000431:                     matrix_add(n_2, n_2,
//000432:                         A, ax, ay, a_s,
//000433:                         A, ax + n_2, ay + n_2, a_s,
//000434:                         a_cum, 0, 0, n_2);
//000435:                     matrix_add(n_2, n_2,
//000436:                         B, bx, by, bs,
//000437:                         B, bx + n_2, by + n_2, bs,
//000438:                         b_cum, 0, 0, n_2);
//000439:                     strassen_mult_parallel(
//000440:                         cancellationToken,
//000441:                         n_2,
//000442:                         a_cum, 0, 0, n_2,
//000443:                         b_cum, 0, 0, n_2,
//000444:                         p1, 0, 0, n_2,
//000445:                         s);
//000446:                 }, cancellationToken);
//000447: 
//000448:                 // p2 = (a21 + a22) * b11 
//000449:                 Task t_p2 = Task.Factory.StartNew(() =>
//000450:                 {
//000451:                     matrix_add(n_2, n_2,
//000452:                         A, ax + n_2, ay, a_s,
//000453:                         A, ax + n_2, ay + n_2, a_s,
//000454:                         c_cum, 0, 0, n_2);
//000455:                     strassen_mult_parallel(
//000456:                         cancellationToken,
//000457:                         n_2,
//000458:                         c_cum, 0, 0, n_2,
//000459:                         B, bx, by, bs,
//000460:                         p2, 0, 0, n_2,
//000461:                         s);
//000462:                 }, cancellationToken);
//000463: 
//000464:                 // p3 = a11 x (b12 - b22) 
//000465:                 Task t_p3 = Task.Factory.StartNew(() =>
//000466:                 {
//000467:                     matrix_sub(n_2, n_2,
//000468:                         B, bx, by + n_2, bs,
//000469:                         B, bx + n_2, by + n_2, bs,
//000470:                         d_cum, 0, 0, n_2);
//000471:                     strassen_mult_parallel(
//000472:                         cancellationToken,
//000473:                         n_2,
//000474:                         A, ax, ay, a_s,
//000475:                         d_cum, 0, 0, n_2,
//000476:                         p3, 0, 0, n_2,
//000477:                         s);
//000478:                 }, cancellationToken);
//000479: 
//000480:                 // p4 = a22 x (b21 - b11) 
//000481:                 Task t_p4 = Task.Factory.StartNew(() =>
//000482:                 {
//000483:                     matrix_sub(n_2, n_2,
//000484:                         B, bx + n_2, by, bs,
//000485:                         B, bx, by, bs,
//000486:                         e_cum, 0, 0, n_2);
//000487:                     strassen_mult_parallel(
//000488:                         cancellationToken,
//000489:                         n_2,
//000490:                         A, ax + n_2, ay + n_2, a_s,
//000491:                         e_cum, 0, 0, n_2,
//000492:                         p4, 0, 0, n_2,
//000493:                         s);
//000494:                 }, cancellationToken);
//000495: 
//000496:                 // p5 = (a11 + a12) x b22 
//000497:                 Task t_p5 = Task.Factory.StartNew(() =>
//000498:                 {
//000499:                     matrix_add(n_2, n_2,
//000500:                         A, ax, ay, a_s,
//000501:                         A, ax, ay + n_2, a_s,
//000502:                         f_cum, 0, 0, n_2);
//000503:                     strassen_mult_parallel(
//000504:                         cancellationToken,
//000505:                         n_2,
//000506:                         f_cum, 0, 0, n_2,
//000507:                         B, bx + n_2, by + n_2, bs,
//000508:                         p5, 0, 0, n_2,
//000509:                         s);
//000510:                 }, cancellationToken);
//000511: 
//000512:                 // p6 = (a21 - a11) x (b11 + b12) 
//000513:                 Task t_p6 = Task.Factory.StartNew(() =>
//000514:                 {
//000515:                     matrix_sub(n_2, n_2,
//000516:                         A, ax + n_2, ay, a_s,
//000517:                         A, ax, ay, a_s,
//000518:                         g_cum, 0, 0, n_2);
//000519:                     matrix_add(n_2, n_2,
//000520:                         B, bx, by, bs,
//000521:                         B, bx, by + n_2, bs,
//000522:                         h_cum, 0, 0, n_2);
//000523:                     strassen_mult_parallel(
//000524:                         cancellationToken,
//000525:                         n_2,
//000526:                         g_cum, 0, 0, n_2,
//000527:                         h_cum, 0, 0, n_2,
//000528:                         p6, 0, 0, n_2,
//000529:                         s);
//000530:                 }, cancellationToken);
//000531: 
//000532:                 // p7 = (a12 - a22) x (b21 + b22) 
//000533:                 Task t_p7 = Task.Factory.StartNew(() =>
//000534:                 {
//000535:                     matrix_sub(n_2, n_2,
//000536:                         A, ax, ay + n_2, a_s,
//000537:                         A, ax + n_2, ay + n_2, a_s,
//000538:                         i_cum, 0, 0, n_2);
//000539:                     matrix_add(n_2, n_2,
//000540:                         B, bx + n_2, by, bs,
//000541:                         B, bx + n_2, by + n_2, bs,
//000542:                         j_cum, 0, 0, n_2);
//000543:                     strassen_mult_parallel(
//000544:                         cancellationToken,
//000545:                         n_2,
//000546:                         i_cum, 0, 0, n_2,
//000547:                         j_cum, 0, 0, n_2,
//000548:                         p7, 0, 0, n_2,
//000549:                         s);
//000550:                 }, cancellationToken);
//000551: 
//000552:                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
//000553:                 catch (AggregateException ae)
//000554:                 {
//000555:                     ae.Flatten().Handle(e => e is TaskCanceledException);
//000556:                     cancellationToken.ThrowIfCancellationRequested();
//000557:                 }
//000558: 
//000559:                 // c11 = p1 + p4 - p5 + p7 
//000560:                 Task t_c11 = Task.Factory.StartNew(() =>
//000561:                 {
//000562:                     matrix_add(n_2, n_2,
//000563:                         p1, 0, 0, n_2,
//000564:                         p4, 0, 0, n_2,
//000565:                         C, cx, cy, cs);
//000566:                     matrix_sub(n_2, n_2,
//000567:                         C, cx, cy, cs,
//000568:                         p5, 0, 0, n_2,
//000569:                         C, cx, cy, cs);
//000570:                     matrix_add(n_2, n_2,
//000571:                         C, cx, cy, cs,
//000572:                         p7, 0, 0, n_2,
//000573:                         C, cx, cy, cs);
//000574:                 });
//000575: 
//000576:                 // c12 = p3 + p5 
//000577:                 Task t_c12 = Task.Factory.StartNew(() =>
//000578:                 {
//000579:                     matrix_add(n_2, n_2,
//000580:                         p3, 0, 0, n_2,
//000581:                         p5, 0, 0, n_2,
//000582:                         C, cx, cy + n_2, cs);
//000583:                 });
//000584: 
//000585:                 // c21 = p2 + p4 
//000586:                 Task t_c21 = Task.Factory.StartNew(() =>
//000587:                 {
//000588:                     matrix_add(n_2, n_2,
//000589:                         p2, 0, 0, n_2,
//000590:                         p4, 0, 0, n_2,
//000591:                         C, cx + n_2, cy, cs);
//000592:                 });
//000593: 
//000594:                 // c22 = p1 + p3 - p2 + p6 
//000595:                 Task t_c22 = Task.Factory.StartNew(() =>
//000596:                 {
//000597:                     matrix_add(n_2, n_2,
//000598:                         p1, 0, 0, n_2,
//000599:                         p3, 0, 0, n_2,
//000600:                         C, cx + n_2, cy + n_2, cs);
//000601:                     matrix_sub(n_2, n_2,
//000602:                         C, cx + n_2, cy + n_2, cs,
//000603:                         p2, 0, 0, n_2,
//000604:                         C, cx + n_2, cy + n_2, cs);
//000605:                     matrix_add(n_2, n_2,
//000606:                         C, cx + n_2, cy + n_2, cs,
//000607:                         p6, 0, 0, n_2,
//000608:                         C, cx + n_2, cy + n_2, cs);
//000609:                 });
//000610: 
//000611:                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
//000612:             }
//000613:         }
//000614:     }
//000615: }
    IL_004d:  ldloc.2
    IL_004e:  brtrue.s   IL_000a

//000142:         }
    IL_0050:  nop
//000136:         for (int i = 0; i < n; i += 1)
    IL_0051:  ldloc.0
    IL_0052:  ldc.i4.1
    IL_0053:  add
    IL_0054:  stloc.0
    IL_0055:  ldloc.0
    IL_0056:  ldarg.0
    IL_0057:  clt
    IL_0059:  stloc.2
//000137:         {
//000138:             for (int j = 0; j < m; j += 1)
//000139:             {
//000140:                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] - B[(i + bx) * bs + j + by];
//000141:             }
//000142:         }
//000143:     }
//000144: 
//000145:     private static void matrix_mult_serial(
//000146:         CancellationToken cancellationToken, 
//000147:         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
//000148:         int l, int m, int n,
//000149:         // (ax,ay) = origin of A submatrix for multiplicand 
//000150:         int* A, int ax, int ay, int a_s,
//000151:         // (bx,by) = origin of B submatrix for multiplicand 
//000152:         int* B, int bx, int by, int bs,
//000153:         // (cx,cy) = origin of C submatrix for result 
//000154:         int* C, int cx, int cy, int cs)
//000155:     {
//000156:         for (int i = 0; i < l; ++i)
//000157:         {
//000158:             cancellationToken.ThrowIfCancellationRequested();
//000159:             for (int j = 0; j < n; j++)
//000160:             {
//000161:                 int temp = 0;
//000162:                 for (int k = 0; k < m; k++)
//000163:                 {
//000164:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
//000165:                 }
//000166:                 C[(i + cx) * cs + j + cy] = temp;
//000167:             }
//000168:         }
//000169:     }
//000170: 
//000171:     private static void matrix_mult_parallel(
//000172:         CancellationToken cancellationToken, 
//000173:         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
//000174:         int l, int m, int n,
//000175:         // (ax,ay) = origin of A submatrix for multiplicand 
//000176:         int* A, int ax, int ay, int a_s,
//000177:         // (bx,by) = origin of B submatrix for multiplicand 
//000178:         int* B, int bx, int by, int bs,
//000179:         // (cx,cy) = origin of C submatrix for result 
//000180:         int* C, int cx, int cy, int cs)
//000181:     {
//000182:         ParallelOptions options = new ParallelOptions { CancellationToken = cancellationToken };
//000183:         Parallel.For(0, l, options, i =>
//000184:         {
//000185:             for (int j = 0; j < n; j++)
//000186:             {
//000187:                 int temp = 0;
//000188:                 for (int k = 0; k < m; k++)
//000189:                 {
//000190:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
//000191:                 }
//000192:                 C[(i + cx) * cs + j + cy] = temp;
//000193:             }
//000194:         });
//000195:     }
//000196: 
//000197:     private static void strassen_mult_serial(
//000198:         CancellationToken cancellationToken, 
//000199:         // dimensions of A, B, and C submatrices 
//000200:         int n,
//000201:         // (ax,ay) = origin of A submatrix for multiplicand 
//000202:         int* A, int ax, int ay, int a_s,
//000203:         // (bx,by) = origin of B submatrix for multiplicand 
//000204:         int* B, int bx, int by, int bs,
//000205:         // (cx,cy) = origin of C submatrix for result 
//000206:         int* C, int cx, int cy, int cs,
//000207:         // Strassen's recursion limit for array dimensions 
//000208:         int s)
//000209:     {
//000210:         if (n <= s)
//000211:         {
//000212:             matrix_mult_serial(
//000213:                 cancellationToken,
//000214:                 n, n, n,
//000215:                 A, ax, ay, a_s,
//000216:                 B, bx, by, bs,
//000217:                 C, cx, cy, cs);
//000218:         }
//000219:         else
//000220:         {
//000221:             int n_2 = n >> 1;
//000222:             int[] workArr = new int[n_2 * n_2 * 9];
//000223:             fixed (int* work = workArr)
//000224:             {
//000225:                 int* a_cum = work;
//000226:                 int* b_cum = a_cum + n_2 * n_2;
//000227:                 int* p1 = b_cum + n_2 * n_2;
//000228:                 int* p2 = p1 + n_2 * n_2;
//000229:                 int* p3 = p2 + n_2 * n_2;
//000230:                 int* p4 = p3 + n_2 * n_2;
//000231:                 int* p5 = p4 + n_2 * n_2;
//000232:                 int* p6 = p5 + n_2 * n_2;
//000233:                 int* p7 = p6 + n_2 * n_2;
//000234: 
//000235:                 // p1 = (a11 + a22) * (b11 + b22) 
//000236:                 matrix_add(n_2, n_2,
//000237:                     A, ax, ay, a_s,
//000238:                     A, ax + n_2, ay + n_2, a_s,
//000239:                     a_cum, 0, 0, n_2);
//000240:                 matrix_add(n_2, n_2,
//000241:                     B, bx, by, bs,
//000242:                     B, bx + n_2, by + n_2, bs,
//000243:                     b_cum, 0, 0, n_2);
//000244:                 strassen_mult_serial(
//000245:                     cancellationToken,
//000246:                     n_2,
//000247:                     a_cum, 0, 0, n_2,
//000248:                     b_cum, 0, 0, n_2,
//000249:                     p1, 0, 0, n_2,
//000250:                     s);
//000251: 
//000252:                 // p2 = (a21 + a22) * b11 
//000253:                 matrix_add(n_2, n_2,
//000254:                     A, ax + n_2, ay, a_s,
//000255:                     A, ax + n_2, ay + n_2, a_s,
//000256:                     a_cum, 0, 0, n_2);
//000257:                 strassen_mult_serial(
//000258:                     cancellationToken,
//000259:                     n_2,
//000260:                     a_cum, 0, 0, n_2,
//000261:                     B, bx, by, bs,
//000262:                     p2, 0, 0, n_2,
//000263:                     s);
//000264: 
//000265:                 // p3 = a11 x (b12 - b22) 
//000266:                 matrix_sub(n_2, n_2,
//000267:                     B, bx, by + n_2, bs,
//000268:                     B, bx + n_2, by + n_2, bs,
//000269:                     b_cum, 0, 0, n_2);
//000270:                 strassen_mult_serial(
//000271:                     cancellationToken,
//000272:                     n_2,
//000273:                     A, ax, ay, a_s,
//000274:                     b_cum, 0, 0, n_2,
//000275:                     p3, 0, 0, n_2,
//000276:                     s);
//000277: 
//000278:                 // p4 = a22 x (b21 - b11) 
//000279:                 matrix_sub(n_2, n_2,
//000280:                     B, bx + n_2, by, bs,
//000281:                     B, bx, by, bs,
//000282:                     b_cum, 0, 0, n_2);
//000283:                 strassen_mult_serial(
//000284:                     cancellationToken,
//000285:                     n_2,
//000286:                     A, ax + n_2, ay + n_2, a_s,
//000287:                     b_cum, 0, 0, n_2,
//000288:                     p4, 0, 0, n_2,
//000289:                     s);
//000290: 
//000291:                 // p5 = (a11 + a12) x b22 
//000292:                 matrix_add(n_2, n_2,
//000293:                     A, ax, ay, a_s,
//000294:                     A, ax, ay + n_2, a_s,
//000295:                     a_cum, 0, 0, n_2);
//000296:                 strassen_mult_serial(
//000297:                     cancellationToken,
//000298:                     n_2,
//000299:                     a_cum, 0, 0, n_2,
//000300:                     B, bx + n_2, by + n_2, bs,
//000301:                     p5, 0, 0, n_2,
//000302:                     s);
//000303: 
//000304:                 // p6 = (a21 - a11) x (b11 + b12) 
//000305:                 matrix_sub(n_2, n_2,
//000306:                     A, ax + n_2, ay, a_s,
//000307:                     A, ax, ay, a_s,
//000308:                     a_cum, 0, 0, n_2);
//000309:                 matrix_add(n_2, n_2,
//000310:                     B, bx, by, bs,
//000311:                     B, bx, by + n_2, bs,
//000312:                     b_cum, 0, 0, n_2);
//000313:                 strassen_mult_serial(
//000314:                     cancellationToken,
//000315:                     n_2,
//000316:                     a_cum, 0, 0, n_2,
//000317:                     b_cum, 0, 0, n_2,
//000318:                     p6, 0, 0, n_2,
//000319:                     s);
//000320: 
//000321:                 // p7 = (a12 - a22) x (b21 + b22) 
//000322:                 matrix_sub(n_2, n_2,
//000323:                     A, ax, ay + n_2, a_s,
//000324:                     A, ax + n_2, ay + n_2, a_s,
//000325:                     a_cum, 0, 0, n_2);
//000326:                 matrix_add(n_2, n_2,
//000327:                     B, bx + n_2, by, bs,
//000328:                     B, bx + n_2, by + n_2, bs,
//000329:                     b_cum, 0, 0, n_2);
//000330:                 strassen_mult_serial(
//000331:                     cancellationToken,
//000332:                     n_2,
//000333:                     a_cum, 0, 0, n_2,
//000334:                     b_cum, 0, 0, n_2,
//000335:                     p7, 0, 0, n_2,
//000336:                     s);
//000337: 
//000338:                 // c11 = p1 + p4 - p5 + p7 
//000339:                 matrix_add(n_2, n_2,
//000340:                     p1, 0, 0, n_2,
//000341:                     p4, 0, 0, n_2,
//000342:                     C, cx, cy, cs);
//000343:                 matrix_sub(n_2, n_2,
//000344:                     C, cx, cy, cs,
//000345:                     p5, 0, 0, n_2,
//000346:                     C, cx, cy, cs);
//000347:                 matrix_add(n_2, n_2,
//000348:                     C, cx, cy, cs,
//000349:                     p7, 0, 0, n_2,
//000350:                     C, cx, cy, cs);
//000351: 
//000352:                 // c12 = p3 + p5 
//000353:                 matrix_add(n_2, n_2,
//000354:                     p3, 0, 0, n_2,
//000355:                     p5, 0, 0, n_2,
//000356:                     C, cx, cy + n_2, cs);
//000357: 
//000358:                 // c21 = p2 + p4 
//000359:                 matrix_add(n_2, n_2,
//000360:                     p2, 0, 0, n_2,
//000361:                     p4, 0, 0, n_2,
//000362:                     C, cx + n_2, cy, cs);
//000363: 
//000364:                 // c22 = p1 + p3 - p2 + p6 
//000365:                 matrix_add(n_2, n_2,
//000366:                     p1, 0, 0, n_2,
//000367:                     p3, 0, 0, n_2,
//000368:                     C, cx + n_2, cy + n_2, cs);
//000369:                 matrix_sub(n_2, n_2,
//000370:                     C, cx + n_2, cy + n_2, cs,
//000371:                     p2, 0, 0, n_2,
//000372:                     C, cx + n_2, cy + n_2, cs);
//000373:                 matrix_add(n_2, n_2,
//000374:                     C, cx + n_2, cy + n_2, cs,
//000375:                     p6, 0, 0, n_2,
//000376:                     C, cx + n_2, cy + n_2, cs);
//000377:             }
//000378:         }
//000379:     }
//000380: 
//000381:     private static void strassen_mult_parallel(
//000382:         CancellationToken cancellationToken, 
//000383:         // dimensions of A, B, and C submatrices 
//000384:         int n,
//000385:         // (ax,ay) = origin of A submatrix for multiplicand 
//000386:         int* A, int ax, int ay, int a_s,
//000387:         // (bx,by) = origin of B submatrix for multiplicand 
//000388:         int* B, int bx, int by, int bs,
//000389:         // (cx,cy) = origin of C submatrix for result 
//000390:         int* C, int cx, int cy, int cs,
//000391:         // Strassen's recursion limit for array dimensions 
//000392:         int s)
//000393:     {
//000394:         if (n <= s)
//000395:         {
//000396:             matrix_mult_serial(
//000397:                 cancellationToken,
//000398:                 n, n, n,
//000399:                 A, ax, ay, a_s,
//000400:                 B, bx, by, bs,
//000401:                 C, cx, cy, cs);
//000402:         }
//000403:         else
//000404:         {
//000405:             int n_2 = n >> 1;
//000406:             int areaSize = n_2 * n_2;
//000407:             int[] workArr = new int[areaSize * 17];
//000408:             fixed (int* work = workArr)
//000409:             {
//000410:                 int* a_cum = work;
//000411:                 int* b_cum = a_cum + areaSize;
//000412:                 int* c_cum = b_cum + areaSize;
//000413:                 int* d_cum = c_cum + areaSize;
//000414:                 int* e_cum = d_cum + areaSize;
//000415:                 int* f_cum = e_cum + areaSize;
//000416:                 int* g_cum = f_cum + areaSize;
//000417:                 int* h_cum = g_cum + areaSize;
//000418:                 int* i_cum = h_cum + areaSize;
//000419:                 int* j_cum = i_cum + areaSize;
//000420:                 int* p1 = j_cum + areaSize;
//000421:                 int* p2 = p1 + areaSize;
//000422:                 int* p3 = p2 + areaSize;
//000423:                 int* p4 = p3 + areaSize;
//000424:                 int* p5 = p4 + areaSize;
//000425:                 int* p6 = p5 + areaSize;
//000426:                 int* p7 = p6 + areaSize;
//000427: 
//000428:                 // p1 = (a11 + a22) * (b11 + b22) 
//000429:                 Task t_p1 = Task.Factory.StartNew(() =>
//000430:                 {
//000431:                     matrix_add(n_2, n_2,
//000432:                         A, ax, ay, a_s,
//000433:                         A, ax + n_2, ay + n_2, a_s,
//000434:                         a_cum, 0, 0, n_2);
//000435:                     matrix_add(n_2, n_2,
//000436:                         B, bx, by, bs,
//000437:                         B, bx + n_2, by + n_2, bs,
//000438:                         b_cum, 0, 0, n_2);
//000439:                     strassen_mult_parallel(
//000440:                         cancellationToken,
//000441:                         n_2,
//000442:                         a_cum, 0, 0, n_2,
//000443:                         b_cum, 0, 0, n_2,
//000444:                         p1, 0, 0, n_2,
//000445:                         s);
//000446:                 }, cancellationToken);
//000447: 
//000448:                 // p2 = (a21 + a22) * b11 
//000449:                 Task t_p2 = Task.Factory.StartNew(() =>
//000450:                 {
//000451:                     matrix_add(n_2, n_2,
//000452:                         A, ax + n_2, ay, a_s,
//000453:                         A, ax + n_2, ay + n_2, a_s,
//000454:                         c_cum, 0, 0, n_2);
//000455:                     strassen_mult_parallel(
//000456:                         cancellationToken,
//000457:                         n_2,
//000458:                         c_cum, 0, 0, n_2,
//000459:                         B, bx, by, bs,
//000460:                         p2, 0, 0, n_2,
//000461:                         s);
//000462:                 }, cancellationToken);
//000463: 
//000464:                 // p3 = a11 x (b12 - b22) 
//000465:                 Task t_p3 = Task.Factory.StartNew(() =>
//000466:                 {
//000467:                     matrix_sub(n_2, n_2,
//000468:                         B, bx, by + n_2, bs,
//000469:                         B, bx + n_2, by + n_2, bs,
//000470:                         d_cum, 0, 0, n_2);
//000471:                     strassen_mult_parallel(
//000472:                         cancellationToken,
//000473:                         n_2,
//000474:                         A, ax, ay, a_s,
//000475:                         d_cum, 0, 0, n_2,
//000476:                         p3, 0, 0, n_2,
//000477:                         s);
//000478:                 }, cancellationToken);
//000479: 
//000480:                 // p4 = a22 x (b21 - b11) 
//000481:                 Task t_p4 = Task.Factory.StartNew(() =>
//000482:                 {
//000483:                     matrix_sub(n_2, n_2,
//000484:                         B, bx + n_2, by, bs,
//000485:                         B, bx, by, bs,
//000486:                         e_cum, 0, 0, n_2);
//000487:                     strassen_mult_parallel(
//000488:                         cancellationToken,
//000489:                         n_2,
//000490:                         A, ax + n_2, ay + n_2, a_s,
//000491:                         e_cum, 0, 0, n_2,
//000492:                         p4, 0, 0, n_2,
//000493:                         s);
//000494:                 }, cancellationToken);
//000495: 
//000496:                 // p5 = (a11 + a12) x b22 
//000497:                 Task t_p5 = Task.Factory.StartNew(() =>
//000498:                 {
//000499:                     matrix_add(n_2, n_2,
//000500:                         A, ax, ay, a_s,
//000501:                         A, ax, ay + n_2, a_s,
//000502:                         f_cum, 0, 0, n_2);
//000503:                     strassen_mult_parallel(
//000504:                         cancellationToken,
//000505:                         n_2,
//000506:                         f_cum, 0, 0, n_2,
//000507:                         B, bx + n_2, by + n_2, bs,
//000508:                         p5, 0, 0, n_2,
//000509:                         s);
//000510:                 }, cancellationToken);
//000511: 
//000512:                 // p6 = (a21 - a11) x (b11 + b12) 
//000513:                 Task t_p6 = Task.Factory.StartNew(() =>
//000514:                 {
//000515:                     matrix_sub(n_2, n_2,
//000516:                         A, ax + n_2, ay, a_s,
//000517:                         A, ax, ay, a_s,
//000518:                         g_cum, 0, 0, n_2);
//000519:                     matrix_add(n_2, n_2,
//000520:                         B, bx, by, bs,
//000521:                         B, bx, by + n_2, bs,
//000522:                         h_cum, 0, 0, n_2);
//000523:                     strassen_mult_parallel(
//000524:                         cancellationToken,
//000525:                         n_2,
//000526:                         g_cum, 0, 0, n_2,
//000527:                         h_cum, 0, 0, n_2,
//000528:                         p6, 0, 0, n_2,
//000529:                         s);
//000530:                 }, cancellationToken);
//000531: 
//000532:                 // p7 = (a12 - a22) x (b21 + b22) 
//000533:                 Task t_p7 = Task.Factory.StartNew(() =>
//000534:                 {
//000535:                     matrix_sub(n_2, n_2,
//000536:                         A, ax, ay + n_2, a_s,
//000537:                         A, ax + n_2, ay + n_2, a_s,
//000538:                         i_cum, 0, 0, n_2);
//000539:                     matrix_add(n_2, n_2,
//000540:                         B, bx + n_2, by, bs,
//000541:                         B, bx + n_2, by + n_2, bs,
//000542:                         j_cum, 0, 0, n_2);
//000543:                     strassen_mult_parallel(
//000544:                         cancellationToken,
//000545:                         n_2,
//000546:                         i_cum, 0, 0, n_2,
//000547:                         j_cum, 0, 0, n_2,
//000548:                         p7, 0, 0, n_2,
//000549:                         s);
//000550:                 }, cancellationToken);
//000551: 
//000552:                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
//000553:                 catch (AggregateException ae)
//000554:                 {
//000555:                     ae.Flatten().Handle(e => e is TaskCanceledException);
//000556:                     cancellationToken.ThrowIfCancellationRequested();
//000557:                 }
//000558: 
//000559:                 // c11 = p1 + p4 - p5 + p7 
//000560:                 Task t_c11 = Task.Factory.StartNew(() =>
//000561:                 {
//000562:                     matrix_add(n_2, n_2,
//000563:                         p1, 0, 0, n_2,
//000564:                         p4, 0, 0, n_2,
//000565:                         C, cx, cy, cs);
//000566:                     matrix_sub(n_2, n_2,
//000567:                         C, cx, cy, cs,
//000568:                         p5, 0, 0, n_2,
//000569:                         C, cx, cy, cs);
//000570:                     matrix_add(n_2, n_2,
//000571:                         C, cx, cy, cs,
//000572:                         p7, 0, 0, n_2,
//000573:                         C, cx, cy, cs);
//000574:                 });
//000575: 
//000576:                 // c12 = p3 + p5 
//000577:                 Task t_c12 = Task.Factory.StartNew(() =>
//000578:                 {
//000579:                     matrix_add(n_2, n_2,
//000580:                         p3, 0, 0, n_2,
//000581:                         p5, 0, 0, n_2,
//000582:                         C, cx, cy + n_2, cs);
//000583:                 });
//000584: 
//000585:                 // c21 = p2 + p4 
//000586:                 Task t_c21 = Task.Factory.StartNew(() =>
//000587:                 {
//000588:                     matrix_add(n_2, n_2,
//000589:                         p2, 0, 0, n_2,
//000590:                         p4, 0, 0, n_2,
//000591:                         C, cx + n_2, cy, cs);
//000592:                 });
//000593: 
//000594:                 // c22 = p1 + p3 - p2 + p6 
//000595:                 Task t_c22 = Task.Factory.StartNew(() =>
//000596:                 {
//000597:                     matrix_add(n_2, n_2,
//000598:                         p1, 0, 0, n_2,
//000599:                         p3, 0, 0, n_2,
//000600:                         C, cx + n_2, cy + n_2, cs);
//000601:                     matrix_sub(n_2, n_2,
//000602:                         C, cx + n_2, cy + n_2, cs,
//000603:                         p2, 0, 0, n_2,
//000604:                         C, cx + n_2, cy + n_2, cs);
//000605:                     matrix_add(n_2, n_2,
//000606:                         C, cx + n_2, cy + n_2, cs,
//000607:                         p6, 0, 0, n_2,
//000608:                         C, cx + n_2, cy + n_2, cs);
//000609:                 });
//000610: 
//000611:                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
//000612:             }
//000613:         }
//000614:     }
//000615: }
    IL_005a:  ldloc.2
    IL_005b:  brtrue.s   IL_0005

//000143:     }
    IL_005d:  ret
  } // end of method Matrix::matrix_sub

  .method private hidebysig static void  matrix_mult_serial(valuetype [mscorlib]System.Threading.CancellationToken cancellationToken,
                                                            int32 l,
                                                            int32 m,
                                                            int32 n,
                                                            int32* A,
                                                            int32 ax,
                                                            int32 ay,
                                                            int32 a_s,
                                                            int32* B,
                                                            int32 bx,
                                                            int32 by,
                                                            int32 bs,
                                                            int32* C,
                                                            int32 cx,
                                                            int32 cy,
                                                            int32 cs) cil managed
  {
    // Code size       134 (0x86)
    .maxstack  5
    .locals init ([0] int32 i,
             [1] int32 j,
             [2] int32 temp,
             [3] int32 k,
             [4] bool CS$4$0000)
//000144: 
//000145:     private static void matrix_mult_serial(
//000146:         CancellationToken cancellationToken, 
//000147:         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
//000148:         int l, int m, int n,
//000149:         // (ax,ay) = origin of A submatrix for multiplicand 
//000150:         int* A, int ax, int ay, int a_s,
//000151:         // (bx,by) = origin of B submatrix for multiplicand 
//000152:         int* B, int bx, int by, int bs,
//000153:         // (cx,cy) = origin of C submatrix for result 
//000154:         int* C, int cx, int cy, int cs)
//000155:     {
    IL_0000:  nop
//000156:         for (int i = 0; i < l; ++i)
    IL_0001:  ldc.i4.0
    IL_0002:  stloc.0
//000157:         {
//000158:             cancellationToken.ThrowIfCancellationRequested();
//000159:             for (int j = 0; j < n; j++)
//000160:             {
//000161:                 int temp = 0;
//000162:                 for (int k = 0; k < m; k++)
//000163:                 {
//000164:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
//000165:                 }
//000166:                 C[(i + cx) * cs + j + cy] = temp;
//000167:             }
//000168:         }
//000169:     }
//000170: 
//000171:     private static void matrix_mult_parallel(
//000172:         CancellationToken cancellationToken, 
//000173:         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
//000174:         int l, int m, int n,
//000175:         // (ax,ay) = origin of A submatrix for multiplicand 
//000176:         int* A, int ax, int ay, int a_s,
//000177:         // (bx,by) = origin of B submatrix for multiplicand 
//000178:         int* B, int bx, int by, int bs,
//000179:         // (cx,cy) = origin of C submatrix for result 
//000180:         int* C, int cx, int cy, int cs)
//000181:     {
//000182:         ParallelOptions options = new ParallelOptions { CancellationToken = cancellationToken };
//000183:         Parallel.For(0, l, options, i =>
//000184:         {
//000185:             for (int j = 0; j < n; j++)
//000186:             {
//000187:                 int temp = 0;
//000188:                 for (int k = 0; k < m; k++)
//000189:                 {
//000190:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
//000191:                 }
//000192:                 C[(i + cx) * cs + j + cy] = temp;
//000193:             }
//000194:         });
//000195:     }
//000196: 
//000197:     private static void strassen_mult_serial(
//000198:         CancellationToken cancellationToken, 
//000199:         // dimensions of A, B, and C submatrices 
//000200:         int n,
//000201:         // (ax,ay) = origin of A submatrix for multiplicand 
//000202:         int* A, int ax, int ay, int a_s,
//000203:         // (bx,by) = origin of B submatrix for multiplicand 
//000204:         int* B, int bx, int by, int bs,
//000205:         // (cx,cy) = origin of C submatrix for result 
//000206:         int* C, int cx, int cy, int cs,
//000207:         // Strassen's recursion limit for array dimensions 
//000208:         int s)
//000209:     {
//000210:         if (n <= s)
//000211:         {
//000212:             matrix_mult_serial(
//000213:                 cancellationToken,
//000214:                 n, n, n,
//000215:                 A, ax, ay, a_s,
//000216:                 B, bx, by, bs,
//000217:                 C, cx, cy, cs);
//000218:         }
//000219:         else
//000220:         {
//000221:             int n_2 = n >> 1;
//000222:             int[] workArr = new int[n_2 * n_2 * 9];
//000223:             fixed (int* work = workArr)
//000224:             {
//000225:                 int* a_cum = work;
//000226:                 int* b_cum = a_cum + n_2 * n_2;
//000227:                 int* p1 = b_cum + n_2 * n_2;
//000228:                 int* p2 = p1 + n_2 * n_2;
//000229:                 int* p3 = p2 + n_2 * n_2;
//000230:                 int* p4 = p3 + n_2 * n_2;
//000231:                 int* p5 = p4 + n_2 * n_2;
//000232:                 int* p6 = p5 + n_2 * n_2;
//000233:                 int* p7 = p6 + n_2 * n_2;
//000234: 
//000235:                 // p1 = (a11 + a22) * (b11 + b22) 
//000236:                 matrix_add(n_2, n_2,
//000237:                     A, ax, ay, a_s,
//000238:                     A, ax + n_2, ay + n_2, a_s,
//000239:                     a_cum, 0, 0, n_2);
//000240:                 matrix_add(n_2, n_2,
//000241:                     B, bx, by, bs,
//000242:                     B, bx + n_2, by + n_2, bs,
//000243:                     b_cum, 0, 0, n_2);
//000244:                 strassen_mult_serial(
//000245:                     cancellationToken,
//000246:                     n_2,
//000247:                     a_cum, 0, 0, n_2,
//000248:                     b_cum, 0, 0, n_2,
//000249:                     p1, 0, 0, n_2,
//000250:                     s);
//000251: 
//000252:                 // p2 = (a21 + a22) * b11 
//000253:                 matrix_add(n_2, n_2,
//000254:                     A, ax + n_2, ay, a_s,
//000255:                     A, ax + n_2, ay + n_2, a_s,
//000256:                     a_cum, 0, 0, n_2);
//000257:                 strassen_mult_serial(
//000258:                     cancellationToken,
//000259:                     n_2,
//000260:                     a_cum, 0, 0, n_2,
//000261:                     B, bx, by, bs,
//000262:                     p2, 0, 0, n_2,
//000263:                     s);
//000264: 
//000265:                 // p3 = a11 x (b12 - b22) 
//000266:                 matrix_sub(n_2, n_2,
//000267:                     B, bx, by + n_2, bs,
//000268:                     B, bx + n_2, by + n_2, bs,
//000269:                     b_cum, 0, 0, n_2);
//000270:                 strassen_mult_serial(
//000271:                     cancellationToken,
//000272:                     n_2,
//000273:                     A, ax, ay, a_s,
//000274:                     b_cum, 0, 0, n_2,
//000275:                     p3, 0, 0, n_2,
//000276:                     s);
//000277: 
//000278:                 // p4 = a22 x (b21 - b11) 
//000279:                 matrix_sub(n_2, n_2,
//000280:                     B, bx + n_2, by, bs,
//000281:                     B, bx, by, bs,
//000282:                     b_cum, 0, 0, n_2);
//000283:                 strassen_mult_serial(
//000284:                     cancellationToken,
//000285:                     n_2,
//000286:                     A, ax + n_2, ay + n_2, a_s,
//000287:                     b_cum, 0, 0, n_2,
//000288:                     p4, 0, 0, n_2,
//000289:                     s);
//000290: 
//000291:                 // p5 = (a11 + a12) x b22 
//000292:                 matrix_add(n_2, n_2,
//000293:                     A, ax, ay, a_s,
//000294:                     A, ax, ay + n_2, a_s,
//000295:                     a_cum, 0, 0, n_2);
//000296:                 strassen_mult_serial(
//000297:                     cancellationToken,
//000298:                     n_2,
//000299:                     a_cum, 0, 0, n_2,
//000300:                     B, bx + n_2, by + n_2, bs,
//000301:                     p5, 0, 0, n_2,
//000302:                     s);
//000303: 
//000304:                 // p6 = (a21 - a11) x (b11 + b12) 
//000305:                 matrix_sub(n_2, n_2,
//000306:                     A, ax + n_2, ay, a_s,
//000307:                     A, ax, ay, a_s,
//000308:                     a_cum, 0, 0, n_2);
//000309:                 matrix_add(n_2, n_2,
//000310:                     B, bx, by, bs,
//000311:                     B, bx, by + n_2, bs,
//000312:                     b_cum, 0, 0, n_2);
//000313:                 strassen_mult_serial(
//000314:                     cancellationToken,
//000315:                     n_2,
//000316:                     a_cum, 0, 0, n_2,
//000317:                     b_cum, 0, 0, n_2,
//000318:                     p6, 0, 0, n_2,
//000319:                     s);
//000320: 
//000321:                 // p7 = (a12 - a22) x (b21 + b22) 
//000322:                 matrix_sub(n_2, n_2,
//000323:                     A, ax, ay + n_2, a_s,
//000324:                     A, ax + n_2, ay + n_2, a_s,
//000325:                     a_cum, 0, 0, n_2);
//000326:                 matrix_add(n_2, n_2,
//000327:                     B, bx + n_2, by, bs,
//000328:                     B, bx + n_2, by + n_2, bs,
//000329:                     b_cum, 0, 0, n_2);
//000330:                 strassen_mult_serial(
//000331:                     cancellationToken,
//000332:                     n_2,
//000333:                     a_cum, 0, 0, n_2,
//000334:                     b_cum, 0, 0, n_2,
//000335:                     p7, 0, 0, n_2,
//000336:                     s);
//000337: 
//000338:                 // c11 = p1 + p4 - p5 + p7 
//000339:                 matrix_add(n_2, n_2,
//000340:                     p1, 0, 0, n_2,
//000341:                     p4, 0, 0, n_2,
//000342:                     C, cx, cy, cs);
//000343:                 matrix_sub(n_2, n_2,
//000344:                     C, cx, cy, cs,
//000345:                     p5, 0, 0, n_2,
//000346:                     C, cx, cy, cs);
//000347:                 matrix_add(n_2, n_2,
//000348:                     C, cx, cy, cs,
//000349:                     p7, 0, 0, n_2,
//000350:                     C, cx, cy, cs);
//000351: 
//000352:                 // c12 = p3 + p5 
//000353:                 matrix_add(n_2, n_2,
//000354:                     p3, 0, 0, n_2,
//000355:                     p5, 0, 0, n_2,
//000356:                     C, cx, cy + n_2, cs);
//000357: 
//000358:                 // c21 = p2 + p4 
//000359:                 matrix_add(n_2, n_2,
//000360:                     p2, 0, 0, n_2,
//000361:                     p4, 0, 0, n_2,
//000362:                     C, cx + n_2, cy, cs);
//000363: 
//000364:                 // c22 = p1 + p3 - p2 + p6 
//000365:                 matrix_add(n_2, n_2,
//000366:                     p1, 0, 0, n_2,
//000367:                     p3, 0, 0, n_2,
//000368:                     C, cx + n_2, cy + n_2, cs);
//000369:                 matrix_sub(n_2, n_2,
//000370:                     C, cx + n_2, cy + n_2, cs,
//000371:                     p2, 0, 0, n_2,
//000372:                     C, cx + n_2, cy + n_2, cs);
//000373:                 matrix_add(n_2, n_2,
//000374:                     C, cx + n_2, cy + n_2, cs,
//000375:                     p6, 0, 0, n_2,
//000376:                     C, cx + n_2, cy + n_2, cs);
//000377:             }
//000378:         }
//000379:     }
//000380: 
//000381:     private static void strassen_mult_parallel(
//000382:         CancellationToken cancellationToken, 
//000383:         // dimensions of A, B, and C submatrices 
//000384:         int n,
//000385:         // (ax,ay) = origin of A submatrix for multiplicand 
//000386:         int* A, int ax, int ay, int a_s,
//000387:         // (bx,by) = origin of B submatrix for multiplicand 
//000388:         int* B, int bx, int by, int bs,
//000389:         // (cx,cy) = origin of C submatrix for result 
//000390:         int* C, int cx, int cy, int cs,
//000391:         // Strassen's recursion limit for array dimensions 
//000392:         int s)
//000393:     {
//000394:         if (n <= s)
//000395:         {
//000396:             matrix_mult_serial(
//000397:                 cancellationToken,
//000398:                 n, n, n,
//000399:                 A, ax, ay, a_s,
//000400:                 B, bx, by, bs,
//000401:                 C, cx, cy, cs);
//000402:         }
//000403:         else
//000404:         {
//000405:             int n_2 = n >> 1;
//000406:             int areaSize = n_2 * n_2;
//000407:             int[] workArr = new int[areaSize * 17];
//000408:             fixed (int* work = workArr)
//000409:             {
//000410:                 int* a_cum = work;
//000411:                 int* b_cum = a_cum + areaSize;
//000412:                 int* c_cum = b_cum + areaSize;
//000413:                 int* d_cum = c_cum + areaSize;
//000414:                 int* e_cum = d_cum + areaSize;
//000415:                 int* f_cum = e_cum + areaSize;
//000416:                 int* g_cum = f_cum + areaSize;
//000417:                 int* h_cum = g_cum + areaSize;
//000418:                 int* i_cum = h_cum + areaSize;
//000419:                 int* j_cum = i_cum + areaSize;
//000420:                 int* p1 = j_cum + areaSize;
//000421:                 int* p2 = p1 + areaSize;
//000422:                 int* p3 = p2 + areaSize;
//000423:                 int* p4 = p3 + areaSize;
//000424:                 int* p5 = p4 + areaSize;
//000425:                 int* p6 = p5 + areaSize;
//000426:                 int* p7 = p6 + areaSize;
//000427: 
//000428:                 // p1 = (a11 + a22) * (b11 + b22) 
//000429:                 Task t_p1 = Task.Factory.StartNew(() =>
//000430:                 {
//000431:                     matrix_add(n_2, n_2,
//000432:                         A, ax, ay, a_s,
//000433:                         A, ax + n_2, ay + n_2, a_s,
//000434:                         a_cum, 0, 0, n_2);
//000435:                     matrix_add(n_2, n_2,
//000436:                         B, bx, by, bs,
//000437:                         B, bx + n_2, by + n_2, bs,
//000438:                         b_cum, 0, 0, n_2);
//000439:                     strassen_mult_parallel(
//000440:                         cancellationToken,
//000441:                         n_2,
//000442:                         a_cum, 0, 0, n_2,
//000443:                         b_cum, 0, 0, n_2,
//000444:                         p1, 0, 0, n_2,
//000445:                         s);
//000446:                 }, cancellationToken);
//000447: 
//000448:                 // p2 = (a21 + a22) * b11 
//000449:                 Task t_p2 = Task.Factory.StartNew(() =>
//000450:                 {
//000451:                     matrix_add(n_2, n_2,
//000452:                         A, ax + n_2, ay, a_s,
//000453:                         A, ax + n_2, ay + n_2, a_s,
//000454:                         c_cum, 0, 0, n_2);
//000455:                     strassen_mult_parallel(
//000456:                         cancellationToken,
//000457:                         n_2,
//000458:                         c_cum, 0, 0, n_2,
//000459:                         B, bx, by, bs,
//000460:                         p2, 0, 0, n_2,
//000461:                         s);
//000462:                 }, cancellationToken);
//000463: 
//000464:                 // p3 = a11 x (b12 - b22) 
//000465:                 Task t_p3 = Task.Factory.StartNew(() =>
//000466:                 {
//000467:                     matrix_sub(n_2, n_2,
//000468:                         B, bx, by + n_2, bs,
//000469:                         B, bx + n_2, by + n_2, bs,
//000470:                         d_cum, 0, 0, n_2);
//000471:                     strassen_mult_parallel(
//000472:                         cancellationToken,
//000473:                         n_2,
//000474:                         A, ax, ay, a_s,
//000475:                         d_cum, 0, 0, n_2,
//000476:                         p3, 0, 0, n_2,
//000477:                         s);
//000478:                 }, cancellationToken);
//000479: 
//000480:                 // p4 = a22 x (b21 - b11) 
//000481:                 Task t_p4 = Task.Factory.StartNew(() =>
//000482:                 {
//000483:                     matrix_sub(n_2, n_2,
//000484:                         B, bx + n_2, by, bs,
//000485:                         B, bx, by, bs,
//000486:                         e_cum, 0, 0, n_2);
//000487:                     strassen_mult_parallel(
//000488:                         cancellationToken,
//000489:                         n_2,
//000490:                         A, ax + n_2, ay + n_2, a_s,
//000491:                         e_cum, 0, 0, n_2,
//000492:                         p4, 0, 0, n_2,
//000493:                         s);
//000494:                 }, cancellationToken);
//000495: 
//000496:                 // p5 = (a11 + a12) x b22 
//000497:                 Task t_p5 = Task.Factory.StartNew(() =>
//000498:                 {
//000499:                     matrix_add(n_2, n_2,
//000500:                         A, ax, ay, a_s,
//000501:                         A, ax, ay + n_2, a_s,
//000502:                         f_cum, 0, 0, n_2);
//000503:                     strassen_mult_parallel(
//000504:                         cancellationToken,
//000505:                         n_2,
//000506:                         f_cum, 0, 0, n_2,
//000507:                         B, bx + n_2, by + n_2, bs,
//000508:                         p5, 0, 0, n_2,
//000509:                         s);
//000510:                 }, cancellationToken);
//000511: 
//000512:                 // p6 = (a21 - a11) x (b11 + b12) 
//000513:                 Task t_p6 = Task.Factory.StartNew(() =>
//000514:                 {
//000515:                     matrix_sub(n_2, n_2,
//000516:                         A, ax + n_2, ay, a_s,
//000517:                         A, ax, ay, a_s,
//000518:                         g_cum, 0, 0, n_2);
//000519:                     matrix_add(n_2, n_2,
//000520:                         B, bx, by, bs,
//000521:                         B, bx, by + n_2, bs,
//000522:                         h_cum, 0, 0, n_2);
//000523:                     strassen_mult_parallel(
//000524:                         cancellationToken,
//000525:                         n_2,
//000526:                         g_cum, 0, 0, n_2,
//000527:                         h_cum, 0, 0, n_2,
//000528:                         p6, 0, 0, n_2,
//000529:                         s);
//000530:                 }, cancellationToken);
//000531: 
//000532:                 // p7 = (a12 - a22) x (b21 + b22) 
//000533:                 Task t_p7 = Task.Factory.StartNew(() =>
//000534:                 {
//000535:                     matrix_sub(n_2, n_2,
//000536:                         A, ax, ay + n_2, a_s,
//000537:                         A, ax + n_2, ay + n_2, a_s,
//000538:                         i_cum, 0, 0, n_2);
//000539:                     matrix_add(n_2, n_2,
//000540:                         B, bx + n_2, by, bs,
//000541:                         B, bx + n_2, by + n_2, bs,
//000542:                         j_cum, 0, 0, n_2);
//000543:                     strassen_mult_parallel(
//000544:                         cancellationToken,
//000545:                         n_2,
//000546:                         i_cum, 0, 0, n_2,
//000547:                         j_cum, 0, 0, n_2,
//000548:                         p7, 0, 0, n_2,
//000549:                         s);
//000550:                 }, cancellationToken);
//000551: 
//000552:                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
//000553:                 catch (AggregateException ae)
//000554:                 {
//000555:                     ae.Flatten().Handle(e => e is TaskCanceledException);
//000556:                     cancellationToken.ThrowIfCancellationRequested();
//000557:                 }
//000558: 
//000559:                 // c11 = p1 + p4 - p5 + p7 
//000560:                 Task t_c11 = Task.Factory.StartNew(() =>
//000561:                 {
//000562:                     matrix_add(n_2, n_2,
//000563:                         p1, 0, 0, n_2,
//000564:                         p4, 0, 0, n_2,
//000565:                         C, cx, cy, cs);
//000566:                     matrix_sub(n_2, n_2,
//000567:                         C, cx, cy, cs,
//000568:                         p5, 0, 0, n_2,
//000569:                         C, cx, cy, cs);
//000570:                     matrix_add(n_2, n_2,
//000571:                         C, cx, cy, cs,
//000572:                         p7, 0, 0, n_2,
//000573:                         C, cx, cy, cs);
//000574:                 });
//000575: 
//000576:                 // c12 = p3 + p5 
//000577:                 Task t_c12 = Task.Factory.StartNew(() =>
//000578:                 {
//000579:                     matrix_add(n_2, n_2,
//000580:                         p3, 0, 0, n_2,
//000581:                         p5, 0, 0, n_2,
//000582:                         C, cx, cy + n_2, cs);
//000583:                 });
//000584: 
//000585:                 // c21 = p2 + p4 
//000586:                 Task t_c21 = Task.Factory.StartNew(() =>
//000587:                 {
//000588:                     matrix_add(n_2, n_2,
//000589:                         p2, 0, 0, n_2,
//000590:                         p4, 0, 0, n_2,
//000591:                         C, cx + n_2, cy, cs);
//000592:                 });
//000593: 
//000594:                 // c22 = p1 + p3 - p2 + p6 
//000595:                 Task t_c22 = Task.Factory.StartNew(() =>
//000596:                 {
//000597:                     matrix_add(n_2, n_2,
//000598:                         p1, 0, 0, n_2,
//000599:                         p3, 0, 0, n_2,
//000600:                         C, cx + n_2, cy + n_2, cs);
//000601:                     matrix_sub(n_2, n_2,
//000602:                         C, cx + n_2, cy + n_2, cs,
//000603:                         p2, 0, 0, n_2,
//000604:                         C, cx + n_2, cy + n_2, cs);
//000605:                     matrix_add(n_2, n_2,
//000606:                         C, cx + n_2, cy + n_2, cs,
//000607:                         p6, 0, 0, n_2,
//000608:                         C, cx + n_2, cy + n_2, cs);
//000609:                 });
//000610: 
//000611:                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
//000612:             }
//000613:         }
//000614:     }
//000615: }
    IL_0003:  br.s       IL_007b

//000157:         {
    IL_0005:  nop
//000158:             cancellationToken.ThrowIfCancellationRequested();
    IL_0006:  ldarga.s   cancellationToken
    IL_0008:  call       instance void [mscorlib]System.Threading.CancellationToken::ThrowIfCancellationRequested()
    IL_000d:  nop
//000159:             for (int j = 0; j < n; j++)
    IL_000e:  ldc.i4.0
    IL_000f:  stloc.1
//000160:             {
//000161:                 int temp = 0;
//000162:                 for (int k = 0; k < m; k++)
//000163:                 {
//000164:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
//000165:                 }
//000166:                 C[(i + cx) * cs + j + cy] = temp;
//000167:             }
//000168:         }
//000169:     }
//000170: 
//000171:     private static void matrix_mult_parallel(
//000172:         CancellationToken cancellationToken, 
//000173:         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
//000174:         int l, int m, int n,
//000175:         // (ax,ay) = origin of A submatrix for multiplicand 
//000176:         int* A, int ax, int ay, int a_s,
//000177:         // (bx,by) = origin of B submatrix for multiplicand 
//000178:         int* B, int bx, int by, int bs,
//000179:         // (cx,cy) = origin of C submatrix for result 
//000180:         int* C, int cx, int cy, int cs)
//000181:     {
//000182:         ParallelOptions options = new ParallelOptions { CancellationToken = cancellationToken };
//000183:         Parallel.For(0, l, options, i =>
//000184:         {
//000185:             for (int j = 0; j < n; j++)
//000186:             {
//000187:                 int temp = 0;
//000188:                 for (int k = 0; k < m; k++)
//000189:                 {
//000190:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
//000191:                 }
//000192:                 C[(i + cx) * cs + j + cy] = temp;
//000193:             }
//000194:         });
//000195:     }
//000196: 
//000197:     private static void strassen_mult_serial(
//000198:         CancellationToken cancellationToken, 
//000199:         // dimensions of A, B, and C submatrices 
//000200:         int n,
//000201:         // (ax,ay) = origin of A submatrix for multiplicand 
//000202:         int* A, int ax, int ay, int a_s,
//000203:         // (bx,by) = origin of B submatrix for multiplicand 
//000204:         int* B, int bx, int by, int bs,
//000205:         // (cx,cy) = origin of C submatrix for result 
//000206:         int* C, int cx, int cy, int cs,
//000207:         // Strassen's recursion limit for array dimensions 
//000208:         int s)
//000209:     {
//000210:         if (n <= s)
//000211:         {
//000212:             matrix_mult_serial(
//000213:                 cancellationToken,
//000214:                 n, n, n,
//000215:                 A, ax, ay, a_s,
//000216:                 B, bx, by, bs,
//000217:                 C, cx, cy, cs);
//000218:         }
//000219:         else
//000220:         {
//000221:             int n_2 = n >> 1;
//000222:             int[] workArr = new int[n_2 * n_2 * 9];
//000223:             fixed (int* work = workArr)
//000224:             {
//000225:                 int* a_cum = work;
//000226:                 int* b_cum = a_cum + n_2 * n_2;
//000227:                 int* p1 = b_cum + n_2 * n_2;
//000228:                 int* p2 = p1 + n_2 * n_2;
//000229:                 int* p3 = p2 + n_2 * n_2;
//000230:                 int* p4 = p3 + n_2 * n_2;
//000231:                 int* p5 = p4 + n_2 * n_2;
//000232:                 int* p6 = p5 + n_2 * n_2;
//000233:                 int* p7 = p6 + n_2 * n_2;
//000234: 
//000235:                 // p1 = (a11 + a22) * (b11 + b22) 
//000236:                 matrix_add(n_2, n_2,
//000237:                     A, ax, ay, a_s,
//000238:                     A, ax + n_2, ay + n_2, a_s,
//000239:                     a_cum, 0, 0, n_2);
//000240:                 matrix_add(n_2, n_2,
//000241:                     B, bx, by, bs,
//000242:                     B, bx + n_2, by + n_2, bs,
//000243:                     b_cum, 0, 0, n_2);
//000244:                 strassen_mult_serial(
//000245:                     cancellationToken,
//000246:                     n_2,
//000247:                     a_cum, 0, 0, n_2,
//000248:                     b_cum, 0, 0, n_2,
//000249:                     p1, 0, 0, n_2,
//000250:                     s);
//000251: 
//000252:                 // p2 = (a21 + a22) * b11 
//000253:                 matrix_add(n_2, n_2,
//000254:                     A, ax + n_2, ay, a_s,
//000255:                     A, ax + n_2, ay + n_2, a_s,
//000256:                     a_cum, 0, 0, n_2);
//000257:                 strassen_mult_serial(
//000258:                     cancellationToken,
//000259:                     n_2,
//000260:                     a_cum, 0, 0, n_2,
//000261:                     B, bx, by, bs,
//000262:                     p2, 0, 0, n_2,
//000263:                     s);
//000264: 
//000265:                 // p3 = a11 x (b12 - b22) 
//000266:                 matrix_sub(n_2, n_2,
//000267:                     B, bx, by + n_2, bs,
//000268:                     B, bx + n_2, by + n_2, bs,
//000269:                     b_cum, 0, 0, n_2);
//000270:                 strassen_mult_serial(
//000271:                     cancellationToken,
//000272:                     n_2,
//000273:                     A, ax, ay, a_s,
//000274:                     b_cum, 0, 0, n_2,
//000275:                     p3, 0, 0, n_2,
//000276:                     s);
//000277: 
//000278:                 // p4 = a22 x (b21 - b11) 
//000279:                 matrix_sub(n_2, n_2,
//000280:                     B, bx + n_2, by, bs,
//000281:                     B, bx, by, bs,
//000282:                     b_cum, 0, 0, n_2);
//000283:                 strassen_mult_serial(
//000284:                     cancellationToken,
//000285:                     n_2,
//000286:                     A, ax + n_2, ay + n_2, a_s,
//000287:                     b_cum, 0, 0, n_2,
//000288:                     p4, 0, 0, n_2,
//000289:                     s);
//000290: 
//000291:                 // p5 = (a11 + a12) x b22 
//000292:                 matrix_add(n_2, n_2,
//000293:                     A, ax, ay, a_s,
//000294:                     A, ax, ay + n_2, a_s,
//000295:                     a_cum, 0, 0, n_2);
//000296:                 strassen_mult_serial(
//000297:                     cancellationToken,
//000298:                     n_2,
//000299:                     a_cum, 0, 0, n_2,
//000300:                     B, bx + n_2, by + n_2, bs,
//000301:                     p5, 0, 0, n_2,
//000302:                     s);
//000303: 
//000304:                 // p6 = (a21 - a11) x (b11 + b12) 
//000305:                 matrix_sub(n_2, n_2,
//000306:                     A, ax + n_2, ay, a_s,
//000307:                     A, ax, ay, a_s,
//000308:                     a_cum, 0, 0, n_2);
//000309:                 matrix_add(n_2, n_2,
//000310:                     B, bx, by, bs,
//000311:                     B, bx, by + n_2, bs,
//000312:                     b_cum, 0, 0, n_2);
//000313:                 strassen_mult_serial(
//000314:                     cancellationToken,
//000315:                     n_2,
//000316:                     a_cum, 0, 0, n_2,
//000317:                     b_cum, 0, 0, n_2,
//000318:                     p6, 0, 0, n_2,
//000319:                     s);
//000320: 
//000321:                 // p7 = (a12 - a22) x (b21 + b22) 
//000322:                 matrix_sub(n_2, n_2,
//000323:                     A, ax, ay + n_2, a_s,
//000324:                     A, ax + n_2, ay + n_2, a_s,
//000325:                     a_cum, 0, 0, n_2);
//000326:                 matrix_add(n_2, n_2,
//000327:                     B, bx + n_2, by, bs,
//000328:                     B, bx + n_2, by + n_2, bs,
//000329:                     b_cum, 0, 0, n_2);
//000330:                 strassen_mult_serial(
//000331:                     cancellationToken,
//000332:                     n_2,
//000333:                     a_cum, 0, 0, n_2,
//000334:                     b_cum, 0, 0, n_2,
//000335:                     p7, 0, 0, n_2,
//000336:                     s);
//000337: 
//000338:                 // c11 = p1 + p4 - p5 + p7 
//000339:                 matrix_add(n_2, n_2,
//000340:                     p1, 0, 0, n_2,
//000341:                     p4, 0, 0, n_2,
//000342:                     C, cx, cy, cs);
//000343:                 matrix_sub(n_2, n_2,
//000344:                     C, cx, cy, cs,
//000345:                     p5, 0, 0, n_2,
//000346:                     C, cx, cy, cs);
//000347:                 matrix_add(n_2, n_2,
//000348:                     C, cx, cy, cs,
//000349:                     p7, 0, 0, n_2,
//000350:                     C, cx, cy, cs);
//000351: 
//000352:                 // c12 = p3 + p5 
//000353:                 matrix_add(n_2, n_2,
//000354:                     p3, 0, 0, n_2,
//000355:                     p5, 0, 0, n_2,
//000356:                     C, cx, cy + n_2, cs);
//000357: 
//000358:                 // c21 = p2 + p4 
//000359:                 matrix_add(n_2, n_2,
//000360:                     p2, 0, 0, n_2,
//000361:                     p4, 0, 0, n_2,
//000362:                     C, cx + n_2, cy, cs);
//000363: 
//000364:                 // c22 = p1 + p3 - p2 + p6 
//000365:                 matrix_add(n_2, n_2,
//000366:                     p1, 0, 0, n_2,
//000367:                     p3, 0, 0, n_2,
//000368:                     C, cx + n_2, cy + n_2, cs);
//000369:                 matrix_sub(n_2, n_2,
//000370:                     C, cx + n_2, cy + n_2, cs,
//000371:                     p2, 0, 0, n_2,
//000372:                     C, cx + n_2, cy + n_2, cs);
//000373:                 matrix_add(n_2, n_2,
//000374:                     C, cx + n_2, cy + n_2, cs,
//000375:                     p6, 0, 0, n_2,
//000376:                     C, cx + n_2, cy + n_2, cs);
//000377:             }
//000378:         }
//000379:     }
//000380: 
//000381:     private static void strassen_mult_parallel(
//000382:         CancellationToken cancellationToken, 
//000383:         // dimensions of A, B, and C submatrices 
//000384:         int n,
//000385:         // (ax,ay) = origin of A submatrix for multiplicand 
//000386:         int* A, int ax, int ay, int a_s,
//000387:         // (bx,by) = origin of B submatrix for multiplicand 
//000388:         int* B, int bx, int by, int bs,
//000389:         // (cx,cy) = origin of C submatrix for result 
//000390:         int* C, int cx, int cy, int cs,
//000391:         // Strassen's recursion limit for array dimensions 
//000392:         int s)
//000393:     {
//000394:         if (n <= s)
//000395:         {
//000396:             matrix_mult_serial(
//000397:                 cancellationToken,
//000398:                 n, n, n,
//000399:                 A, ax, ay, a_s,
//000400:                 B, bx, by, bs,
//000401:                 C, cx, cy, cs);
//000402:         }
//000403:         else
//000404:         {
//000405:             int n_2 = n >> 1;
//000406:             int areaSize = n_2 * n_2;
//000407:             int[] workArr = new int[areaSize * 17];
//000408:             fixed (int* work = workArr)
//000409:             {
//000410:                 int* a_cum = work;
//000411:                 int* b_cum = a_cum + areaSize;
//000412:                 int* c_cum = b_cum + areaSize;
//000413:                 int* d_cum = c_cum + areaSize;
//000414:                 int* e_cum = d_cum + areaSize;
//000415:                 int* f_cum = e_cum + areaSize;
//000416:                 int* g_cum = f_cum + areaSize;
//000417:                 int* h_cum = g_cum + areaSize;
//000418:                 int* i_cum = h_cum + areaSize;
//000419:                 int* j_cum = i_cum + areaSize;
//000420:                 int* p1 = j_cum + areaSize;
//000421:                 int* p2 = p1 + areaSize;
//000422:                 int* p3 = p2 + areaSize;
//000423:                 int* p4 = p3 + areaSize;
//000424:                 int* p5 = p4 + areaSize;
//000425:                 int* p6 = p5 + areaSize;
//000426:                 int* p7 = p6 + areaSize;
//000427: 
//000428:                 // p1 = (a11 + a22) * (b11 + b22) 
//000429:                 Task t_p1 = Task.Factory.StartNew(() =>
//000430:                 {
//000431:                     matrix_add(n_2, n_2,
//000432:                         A, ax, ay, a_s,
//000433:                         A, ax + n_2, ay + n_2, a_s,
//000434:                         a_cum, 0, 0, n_2);
//000435:                     matrix_add(n_2, n_2,
//000436:                         B, bx, by, bs,
//000437:                         B, bx + n_2, by + n_2, bs,
//000438:                         b_cum, 0, 0, n_2);
//000439:                     strassen_mult_parallel(
//000440:                         cancellationToken,
//000441:                         n_2,
//000442:                         a_cum, 0, 0, n_2,
//000443:                         b_cum, 0, 0, n_2,
//000444:                         p1, 0, 0, n_2,
//000445:                         s);
//000446:                 }, cancellationToken);
//000447: 
//000448:                 // p2 = (a21 + a22) * b11 
//000449:                 Task t_p2 = Task.Factory.StartNew(() =>
//000450:                 {
//000451:                     matrix_add(n_2, n_2,
//000452:                         A, ax + n_2, ay, a_s,
//000453:                         A, ax + n_2, ay + n_2, a_s,
//000454:                         c_cum, 0, 0, n_2);
//000455:                     strassen_mult_parallel(
//000456:                         cancellationToken,
//000457:                         n_2,
//000458:                         c_cum, 0, 0, n_2,
//000459:                         B, bx, by, bs,
//000460:                         p2, 0, 0, n_2,
//000461:                         s);
//000462:                 }, cancellationToken);
//000463: 
//000464:                 // p3 = a11 x (b12 - b22) 
//000465:                 Task t_p3 = Task.Factory.StartNew(() =>
//000466:                 {
//000467:                     matrix_sub(n_2, n_2,
//000468:                         B, bx, by + n_2, bs,
//000469:                         B, bx + n_2, by + n_2, bs,
//000470:                         d_cum, 0, 0, n_2);
//000471:                     strassen_mult_parallel(
//000472:                         cancellationToken,
//000473:                         n_2,
//000474:                         A, ax, ay, a_s,
//000475:                         d_cum, 0, 0, n_2,
//000476:                         p3, 0, 0, n_2,
//000477:                         s);
//000478:                 }, cancellationToken);
//000479: 
//000480:                 // p4 = a22 x (b21 - b11) 
//000481:                 Task t_p4 = Task.Factory.StartNew(() =>
//000482:                 {
//000483:                     matrix_sub(n_2, n_2,
//000484:                         B, bx + n_2, by, bs,
//000485:                         B, bx, by, bs,
//000486:                         e_cum, 0, 0, n_2);
//000487:                     strassen_mult_parallel(
//000488:                         cancellationToken,
//000489:                         n_2,
//000490:                         A, ax + n_2, ay + n_2, a_s,
//000491:                         e_cum, 0, 0, n_2,
//000492:                         p4, 0, 0, n_2,
//000493:                         s);
//000494:                 }, cancellationToken);
//000495: 
//000496:                 // p5 = (a11 + a12) x b22 
//000497:                 Task t_p5 = Task.Factory.StartNew(() =>
//000498:                 {
//000499:                     matrix_add(n_2, n_2,
//000500:                         A, ax, ay, a_s,
//000501:                         A, ax, ay + n_2, a_s,
//000502:                         f_cum, 0, 0, n_2);
//000503:                     strassen_mult_parallel(
//000504:                         cancellationToken,
//000505:                         n_2,
//000506:                         f_cum, 0, 0, n_2,
//000507:                         B, bx + n_2, by + n_2, bs,
//000508:                         p5, 0, 0, n_2,
//000509:                         s);
//000510:                 }, cancellationToken);
//000511: 
//000512:                 // p6 = (a21 - a11) x (b11 + b12) 
//000513:                 Task t_p6 = Task.Factory.StartNew(() =>
//000514:                 {
//000515:                     matrix_sub(n_2, n_2,
//000516:                         A, ax + n_2, ay, a_s,
//000517:                         A, ax, ay, a_s,
//000518:                         g_cum, 0, 0, n_2);
//000519:                     matrix_add(n_2, n_2,
//000520:                         B, bx, by, bs,
//000521:                         B, bx, by + n_2, bs,
//000522:                         h_cum, 0, 0, n_2);
//000523:                     strassen_mult_parallel(
//000524:                         cancellationToken,
//000525:                         n_2,
//000526:                         g_cum, 0, 0, n_2,
//000527:                         h_cum, 0, 0, n_2,
//000528:                         p6, 0, 0, n_2,
//000529:                         s);
//000530:                 }, cancellationToken);
//000531: 
//000532:                 // p7 = (a12 - a22) x (b21 + b22) 
//000533:                 Task t_p7 = Task.Factory.StartNew(() =>
//000534:                 {
//000535:                     matrix_sub(n_2, n_2,
//000536:                         A, ax, ay + n_2, a_s,
//000537:                         A, ax + n_2, ay + n_2, a_s,
//000538:                         i_cum, 0, 0, n_2);
//000539:                     matrix_add(n_2, n_2,
//000540:                         B, bx + n_2, by, bs,
//000541:                         B, bx + n_2, by + n_2, bs,
//000542:                         j_cum, 0, 0, n_2);
//000543:                     strassen_mult_parallel(
//000544:                         cancellationToken,
//000545:                         n_2,
//000546:                         i_cum, 0, 0, n_2,
//000547:                         j_cum, 0, 0, n_2,
//000548:                         p7, 0, 0, n_2,
//000549:                         s);
//000550:                 }, cancellationToken);
//000551: 
//000552:                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
//000553:                 catch (AggregateException ae)
//000554:                 {
//000555:                     ae.Flatten().Handle(e => e is TaskCanceledException);
//000556:                     cancellationToken.ThrowIfCancellationRequested();
//000557:                 }
//000558: 
//000559:                 // c11 = p1 + p4 - p5 + p7 
//000560:                 Task t_c11 = Task.Factory.StartNew(() =>
//000561:                 {
//000562:                     matrix_add(n_2, n_2,
//000563:                         p1, 0, 0, n_2,
//000564:                         p4, 0, 0, n_2,
//000565:                         C, cx, cy, cs);
//000566:                     matrix_sub(n_2, n_2,
//000567:                         C, cx, cy, cs,
//000568:                         p5, 0, 0, n_2,
//000569:                         C, cx, cy, cs);
//000570:                     matrix_add(n_2, n_2,
//000571:                         C, cx, cy, cs,
//000572:                         p7, 0, 0, n_2,
//000573:                         C, cx, cy, cs);
//000574:                 });
//000575: 
//000576:                 // c12 = p3 + p5 
//000577:                 Task t_c12 = Task.Factory.StartNew(() =>
//000578:                 {
//000579:                     matrix_add(n_2, n_2,
//000580:                         p3, 0, 0, n_2,
//000581:                         p5, 0, 0, n_2,
//000582:                         C, cx, cy + n_2, cs);
//000583:                 });
//000584: 
//000585:                 // c21 = p2 + p4 
//000586:                 Task t_c21 = Task.Factory.StartNew(() =>
//000587:                 {
//000588:                     matrix_add(n_2, n_2,
//000589:                         p2, 0, 0, n_2,
//000590:                         p4, 0, 0, n_2,
//000591:                         C, cx + n_2, cy, cs);
//000592:                 });
//000593: 
//000594:                 // c22 = p1 + p3 - p2 + p6 
//000595:                 Task t_c22 = Task.Factory.StartNew(() =>
//000596:                 {
//000597:                     matrix_add(n_2, n_2,
//000598:                         p1, 0, 0, n_2,
//000599:                         p3, 0, 0, n_2,
//000600:                         C, cx + n_2, cy + n_2, cs);
//000601:                     matrix_sub(n_2, n_2,
//000602:                         C, cx + n_2, cy + n_2, cs,
//000603:                         p2, 0, 0, n_2,
//000604:                         C, cx + n_2, cy + n_2, cs);
//000605:                     matrix_add(n_2, n_2,
//000606:                         C, cx + n_2, cy + n_2, cs,
//000607:                         p6, 0, 0, n_2,
//000608:                         C, cx + n_2, cy + n_2, cs);
//000609:                 });
//000610: 
//000611:                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
//000612:             }
//000613:         }
//000614:     }
//000615: }
    IL_0010:  br.s       IL_006c

//000160:             {
    IL_0012:  nop
//000161:                 int temp = 0;
    IL_0013:  ldc.i4.0
    IL_0014:  stloc.2
//000162:                 for (int k = 0; k < m; k++)
    IL_0015:  ldc.i4.0
    IL_0016:  stloc.3
//000163:                 {
//000164:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
//000165:                 }
//000166:                 C[(i + cx) * cs + j + cy] = temp;
//000167:             }
//000168:         }
//000169:     }
//000170: 
//000171:     private static void matrix_mult_parallel(
//000172:         CancellationToken cancellationToken, 
//000173:         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
//000174:         int l, int m, int n,
//000175:         // (ax,ay) = origin of A submatrix for multiplicand 
//000176:         int* A, int ax, int ay, int a_s,
//000177:         // (bx,by) = origin of B submatrix for multiplicand 
//000178:         int* B, int bx, int by, int bs,
//000179:         // (cx,cy) = origin of C submatrix for result 
//000180:         int* C, int cx, int cy, int cs)
//000181:     {
//000182:         ParallelOptions options = new ParallelOptions { CancellationToken = cancellationToken };
//000183:         Parallel.For(0, l, options, i =>
//000184:         {
//000185:             for (int j = 0; j < n; j++)
//000186:             {
//000187:                 int temp = 0;
//000188:                 for (int k = 0; k < m; k++)
//000189:                 {
//000190:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
//000191:                 }
//000192:                 C[(i + cx) * cs + j + cy] = temp;
//000193:             }
//000194:         });
//000195:     }
//000196: 
//000197:     private static void strassen_mult_serial(
//000198:         CancellationToken cancellationToken, 
//000199:         // dimensions of A, B, and C submatrices 
//000200:         int n,
//000201:         // (ax,ay) = origin of A submatrix for multiplicand 
//000202:         int* A, int ax, int ay, int a_s,
//000203:         // (bx,by) = origin of B submatrix for multiplicand 
//000204:         int* B, int bx, int by, int bs,
//000205:         // (cx,cy) = origin of C submatrix for result 
//000206:         int* C, int cx, int cy, int cs,
//000207:         // Strassen's recursion limit for array dimensions 
//000208:         int s)
//000209:     {
//000210:         if (n <= s)
//000211:         {
//000212:             matrix_mult_serial(
//000213:                 cancellationToken,
//000214:                 n, n, n,
//000215:                 A, ax, ay, a_s,
//000216:                 B, bx, by, bs,
//000217:                 C, cx, cy, cs);
//000218:         }
//000219:         else
//000220:         {
//000221:             int n_2 = n >> 1;
//000222:             int[] workArr = new int[n_2 * n_2 * 9];
//000223:             fixed (int* work = workArr)
//000224:             {
//000225:                 int* a_cum = work;
//000226:                 int* b_cum = a_cum + n_2 * n_2;
//000227:                 int* p1 = b_cum + n_2 * n_2;
//000228:                 int* p2 = p1 + n_2 * n_2;
//000229:                 int* p3 = p2 + n_2 * n_2;
//000230:                 int* p4 = p3 + n_2 * n_2;
//000231:                 int* p5 = p4 + n_2 * n_2;
//000232:                 int* p6 = p5 + n_2 * n_2;
//000233:                 int* p7 = p6 + n_2 * n_2;
//000234: 
//000235:                 // p1 = (a11 + a22) * (b11 + b22) 
//000236:                 matrix_add(n_2, n_2,
//000237:                     A, ax, ay, a_s,
//000238:                     A, ax + n_2, ay + n_2, a_s,
//000239:                     a_cum, 0, 0, n_2);
//000240:                 matrix_add(n_2, n_2,
//000241:                     B, bx, by, bs,
//000242:                     B, bx + n_2, by + n_2, bs,
//000243:                     b_cum, 0, 0, n_2);
//000244:                 strassen_mult_serial(
//000245:                     cancellationToken,
//000246:                     n_2,
//000247:                     a_cum, 0, 0, n_2,
//000248:                     b_cum, 0, 0, n_2,
//000249:                     p1, 0, 0, n_2,
//000250:                     s);
//000251: 
//000252:                 // p2 = (a21 + a22) * b11 
//000253:                 matrix_add(n_2, n_2,
//000254:                     A, ax + n_2, ay, a_s,
//000255:                     A, ax + n_2, ay + n_2, a_s,
//000256:                     a_cum, 0, 0, n_2);
//000257:                 strassen_mult_serial(
//000258:                     cancellationToken,
//000259:                     n_2,
//000260:                     a_cum, 0, 0, n_2,
//000261:                     B, bx, by, bs,
//000262:                     p2, 0, 0, n_2,
//000263:                     s);
//000264: 
//000265:                 // p3 = a11 x (b12 - b22) 
//000266:                 matrix_sub(n_2, n_2,
//000267:                     B, bx, by + n_2, bs,
//000268:                     B, bx + n_2, by + n_2, bs,
//000269:                     b_cum, 0, 0, n_2);
//000270:                 strassen_mult_serial(
//000271:                     cancellationToken,
//000272:                     n_2,
//000273:                     A, ax, ay, a_s,
//000274:                     b_cum, 0, 0, n_2,
//000275:                     p3, 0, 0, n_2,
//000276:                     s);
//000277: 
//000278:                 // p4 = a22 x (b21 - b11) 
//000279:                 matrix_sub(n_2, n_2,
//000280:                     B, bx + n_2, by, bs,
//000281:                     B, bx, by, bs,
//000282:                     b_cum, 0, 0, n_2);
//000283:                 strassen_mult_serial(
//000284:                     cancellationToken,
//000285:                     n_2,
//000286:                     A, ax + n_2, ay + n_2, a_s,
//000287:                     b_cum, 0, 0, n_2,
//000288:                     p4, 0, 0, n_2,
//000289:                     s);
//000290: 
//000291:                 // p5 = (a11 + a12) x b22 
//000292:                 matrix_add(n_2, n_2,
//000293:                     A, ax, ay, a_s,
//000294:                     A, ax, ay + n_2, a_s,
//000295:                     a_cum, 0, 0, n_2);
//000296:                 strassen_mult_serial(
//000297:                     cancellationToken,
//000298:                     n_2,
//000299:                     a_cum, 0, 0, n_2,
//000300:                     B, bx + n_2, by + n_2, bs,
//000301:                     p5, 0, 0, n_2,
//000302:                     s);
//000303: 
//000304:                 // p6 = (a21 - a11) x (b11 + b12) 
//000305:                 matrix_sub(n_2, n_2,
//000306:                     A, ax + n_2, ay, a_s,
//000307:                     A, ax, ay, a_s,
//000308:                     a_cum, 0, 0, n_2);
//000309:                 matrix_add(n_2, n_2,
//000310:                     B, bx, by, bs,
//000311:                     B, bx, by + n_2, bs,
//000312:                     b_cum, 0, 0, n_2);
//000313:                 strassen_mult_serial(
//000314:                     cancellationToken,
//000315:                     n_2,
//000316:                     a_cum, 0, 0, n_2,
//000317:                     b_cum, 0, 0, n_2,
//000318:                     p6, 0, 0, n_2,
//000319:                     s);
//000320: 
//000321:                 // p7 = (a12 - a22) x (b21 + b22) 
//000322:                 matrix_sub(n_2, n_2,
//000323:                     A, ax, ay + n_2, a_s,
//000324:                     A, ax + n_2, ay + n_2, a_s,
//000325:                     a_cum, 0, 0, n_2);
//000326:                 matrix_add(n_2, n_2,
//000327:                     B, bx + n_2, by, bs,
//000328:                     B, bx + n_2, by + n_2, bs,
//000329:                     b_cum, 0, 0, n_2);
//000330:                 strassen_mult_serial(
//000331:                     cancellationToken,
//000332:                     n_2,
//000333:                     a_cum, 0, 0, n_2,
//000334:                     b_cum, 0, 0, n_2,
//000335:                     p7, 0, 0, n_2,
//000336:                     s);
//000337: 
//000338:                 // c11 = p1 + p4 - p5 + p7 
//000339:                 matrix_add(n_2, n_2,
//000340:                     p1, 0, 0, n_2,
//000341:                     p4, 0, 0, n_2,
//000342:                     C, cx, cy, cs);
//000343:                 matrix_sub(n_2, n_2,
//000344:                     C, cx, cy, cs,
//000345:                     p5, 0, 0, n_2,
//000346:                     C, cx, cy, cs);
//000347:                 matrix_add(n_2, n_2,
//000348:                     C, cx, cy, cs,
//000349:                     p7, 0, 0, n_2,
//000350:                     C, cx, cy, cs);
//000351: 
//000352:                 // c12 = p3 + p5 
//000353:                 matrix_add(n_2, n_2,
//000354:                     p3, 0, 0, n_2,
//000355:                     p5, 0, 0, n_2,
//000356:                     C, cx, cy + n_2, cs);
//000357: 
//000358:                 // c21 = p2 + p4 
//000359:                 matrix_add(n_2, n_2,
//000360:                     p2, 0, 0, n_2,
//000361:                     p4, 0, 0, n_2,
//000362:                     C, cx + n_2, cy, cs);
//000363: 
//000364:                 // c22 = p1 + p3 - p2 + p6 
//000365:                 matrix_add(n_2, n_2,
//000366:                     p1, 0, 0, n_2,
//000367:                     p3, 0, 0, n_2,
//000368:                     C, cx + n_2, cy + n_2, cs);
//000369:                 matrix_sub(n_2, n_2,
//000370:                     C, cx + n_2, cy + n_2, cs,
//000371:                     p2, 0, 0, n_2,
//000372:                     C, cx + n_2, cy + n_2, cs);
//000373:                 matrix_add(n_2, n_2,
//000374:                     C, cx + n_2, cy + n_2, cs,
//000375:                     p6, 0, 0, n_2,
//000376:                     C, cx + n_2, cy + n_2, cs);
//000377:             }
//000378:         }
//000379:     }
//000380: 
//000381:     private static void strassen_mult_parallel(
//000382:         CancellationToken cancellationToken, 
//000383:         // dimensions of A, B, and C submatrices 
//000384:         int n,
//000385:         // (ax,ay) = origin of A submatrix for multiplicand 
//000386:         int* A, int ax, int ay, int a_s,
//000387:         // (bx,by) = origin of B submatrix for multiplicand 
//000388:         int* B, int bx, int by, int bs,
//000389:         // (cx,cy) = origin of C submatrix for result 
//000390:         int* C, int cx, int cy, int cs,
//000391:         // Strassen's recursion limit for array dimensions 
//000392:         int s)
//000393:     {
//000394:         if (n <= s)
//000395:         {
//000396:             matrix_mult_serial(
//000397:                 cancellationToken,
//000398:                 n, n, n,
//000399:                 A, ax, ay, a_s,
//000400:                 B, bx, by, bs,
//000401:                 C, cx, cy, cs);
//000402:         }
//000403:         else
//000404:         {
//000405:             int n_2 = n >> 1;
//000406:             int areaSize = n_2 * n_2;
//000407:             int[] workArr = new int[areaSize * 17];
//000408:             fixed (int* work = workArr)
//000409:             {
//000410:                 int* a_cum = work;
//000411:                 int* b_cum = a_cum + areaSize;
//000412:                 int* c_cum = b_cum + areaSize;
//000413:                 int* d_cum = c_cum + areaSize;
//000414:                 int* e_cum = d_cum + areaSize;
//000415:                 int* f_cum = e_cum + areaSize;
//000416:                 int* g_cum = f_cum + areaSize;
//000417:                 int* h_cum = g_cum + areaSize;
//000418:                 int* i_cum = h_cum + areaSize;
//000419:                 int* j_cum = i_cum + areaSize;
//000420:                 int* p1 = j_cum + areaSize;
//000421:                 int* p2 = p1 + areaSize;
//000422:                 int* p3 = p2 + areaSize;
//000423:                 int* p4 = p3 + areaSize;
//000424:                 int* p5 = p4 + areaSize;
//000425:                 int* p6 = p5 + areaSize;
//000426:                 int* p7 = p6 + areaSize;
//000427: 
//000428:                 // p1 = (a11 + a22) * (b11 + b22) 
//000429:                 Task t_p1 = Task.Factory.StartNew(() =>
//000430:                 {
//000431:                     matrix_add(n_2, n_2,
//000432:                         A, ax, ay, a_s,
//000433:                         A, ax + n_2, ay + n_2, a_s,
//000434:                         a_cum, 0, 0, n_2);
//000435:                     matrix_add(n_2, n_2,
//000436:                         B, bx, by, bs,
//000437:                         B, bx + n_2, by + n_2, bs,
//000438:                         b_cum, 0, 0, n_2);
//000439:                     strassen_mult_parallel(
//000440:                         cancellationToken,
//000441:                         n_2,
//000442:                         a_cum, 0, 0, n_2,
//000443:                         b_cum, 0, 0, n_2,
//000444:                         p1, 0, 0, n_2,
//000445:                         s);
//000446:                 }, cancellationToken);
//000447: 
//000448:                 // p2 = (a21 + a22) * b11 
//000449:                 Task t_p2 = Task.Factory.StartNew(() =>
//000450:                 {
//000451:                     matrix_add(n_2, n_2,
//000452:                         A, ax + n_2, ay, a_s,
//000453:                         A, ax + n_2, ay + n_2, a_s,
//000454:                         c_cum, 0, 0, n_2);
//000455:                     strassen_mult_parallel(
//000456:                         cancellationToken,
//000457:                         n_2,
//000458:                         c_cum, 0, 0, n_2,
//000459:                         B, bx, by, bs,
//000460:                         p2, 0, 0, n_2,
//000461:                         s);
//000462:                 }, cancellationToken);
//000463: 
//000464:                 // p3 = a11 x (b12 - b22) 
//000465:                 Task t_p3 = Task.Factory.StartNew(() =>
//000466:                 {
//000467:                     matrix_sub(n_2, n_2,
//000468:                         B, bx, by + n_2, bs,
//000469:                         B, bx + n_2, by + n_2, bs,
//000470:                         d_cum, 0, 0, n_2);
//000471:                     strassen_mult_parallel(
//000472:                         cancellationToken,
//000473:                         n_2,
//000474:                         A, ax, ay, a_s,
//000475:                         d_cum, 0, 0, n_2,
//000476:                         p3, 0, 0, n_2,
//000477:                         s);
//000478:                 }, cancellationToken);
//000479: 
//000480:                 // p4 = a22 x (b21 - b11) 
//000481:                 Task t_p4 = Task.Factory.StartNew(() =>
//000482:                 {
//000483:                     matrix_sub(n_2, n_2,
//000484:                         B, bx + n_2, by, bs,
//000485:                         B, bx, by, bs,
//000486:                         e_cum, 0, 0, n_2);
//000487:                     strassen_mult_parallel(
//000488:                         cancellationToken,
//000489:                         n_2,
//000490:                         A, ax + n_2, ay + n_2, a_s,
//000491:                         e_cum, 0, 0, n_2,
//000492:                         p4, 0, 0, n_2,
//000493:                         s);
//000494:                 }, cancellationToken);
//000495: 
//000496:                 // p5 = (a11 + a12) x b22 
//000497:                 Task t_p5 = Task.Factory.StartNew(() =>
//000498:                 {
//000499:                     matrix_add(n_2, n_2,
//000500:                         A, ax, ay, a_s,
//000501:                         A, ax, ay + n_2, a_s,
//000502:                         f_cum, 0, 0, n_2);
//000503:                     strassen_mult_parallel(
//000504:                         cancellationToken,
//000505:                         n_2,
//000506:                         f_cum, 0, 0, n_2,
//000507:                         B, bx + n_2, by + n_2, bs,
//000508:                         p5, 0, 0, n_2,
//000509:                         s);
//000510:                 }, cancellationToken);
//000511: 
//000512:                 // p6 = (a21 - a11) x (b11 + b12) 
//000513:                 Task t_p6 = Task.Factory.StartNew(() =>
//000514:                 {
//000515:                     matrix_sub(n_2, n_2,
//000516:                         A, ax + n_2, ay, a_s,
//000517:                         A, ax, ay, a_s,
//000518:                         g_cum, 0, 0, n_2);
//000519:                     matrix_add(n_2, n_2,
//000520:                         B, bx, by, bs,
//000521:                         B, bx, by + n_2, bs,
//000522:                         h_cum, 0, 0, n_2);
//000523:                     strassen_mult_parallel(
//000524:                         cancellationToken,
//000525:                         n_2,
//000526:                         g_cum, 0, 0, n_2,
//000527:                         h_cum, 0, 0, n_2,
//000528:                         p6, 0, 0, n_2,
//000529:                         s);
//000530:                 }, cancellationToken);
//000531: 
//000532:                 // p7 = (a12 - a22) x (b21 + b22) 
//000533:                 Task t_p7 = Task.Factory.StartNew(() =>
//000534:                 {
//000535:                     matrix_sub(n_2, n_2,
//000536:                         A, ax, ay + n_2, a_s,
//000537:                         A, ax + n_2, ay + n_2, a_s,
//000538:                         i_cum, 0, 0, n_2);
//000539:                     matrix_add(n_2, n_2,
//000540:                         B, bx + n_2, by, bs,
//000541:                         B, bx + n_2, by + n_2, bs,
//000542:                         j_cum, 0, 0, n_2);
//000543:                     strassen_mult_parallel(
//000544:                         cancellationToken,
//000545:                         n_2,
//000546:                         i_cum, 0, 0, n_2,
//000547:                         j_cum, 0, 0, n_2,
//000548:                         p7, 0, 0, n_2,
//000549:                         s);
//000550:                 }, cancellationToken);
//000551: 
//000552:                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
//000553:                 catch (AggregateException ae)
//000554:                 {
//000555:                     ae.Flatten().Handle(e => e is TaskCanceledException);
//000556:                     cancellationToken.ThrowIfCancellationRequested();
//000557:                 }
//000558: 
//000559:                 // c11 = p1 + p4 - p5 + p7 
//000560:                 Task t_c11 = Task.Factory.StartNew(() =>
//000561:                 {
//000562:                     matrix_add(n_2, n_2,
//000563:                         p1, 0, 0, n_2,
//000564:                         p4, 0, 0, n_2,
//000565:                         C, cx, cy, cs);
//000566:                     matrix_sub(n_2, n_2,
//000567:                         C, cx, cy, cs,
//000568:                         p5, 0, 0, n_2,
//000569:                         C, cx, cy, cs);
//000570:                     matrix_add(n_2, n_2,
//000571:                         C, cx, cy, cs,
//000572:                         p7, 0, 0, n_2,
//000573:                         C, cx, cy, cs);
//000574:                 });
//000575: 
//000576:                 // c12 = p3 + p5 
//000577:                 Task t_c12 = Task.Factory.StartNew(() =>
//000578:                 {
//000579:                     matrix_add(n_2, n_2,
//000580:                         p3, 0, 0, n_2,
//000581:                         p5, 0, 0, n_2,
//000582:                         C, cx, cy + n_2, cs);
//000583:                 });
//000584: 
//000585:                 // c21 = p2 + p4 
//000586:                 Task t_c21 = Task.Factory.StartNew(() =>
//000587:                 {
//000588:                     matrix_add(n_2, n_2,
//000589:                         p2, 0, 0, n_2,
//000590:                         p4, 0, 0, n_2,
//000591:                         C, cx + n_2, cy, cs);
//000592:                 });
//000593: 
//000594:                 // c22 = p1 + p3 - p2 + p6 
//000595:                 Task t_c22 = Task.Factory.StartNew(() =>
//000596:                 {
//000597:                     matrix_add(n_2, n_2,
//000598:                         p1, 0, 0, n_2,
//000599:                         p3, 0, 0, n_2,
//000600:                         C, cx + n_2, cy + n_2, cs);
//000601:                     matrix_sub(n_2, n_2,
//000602:                         C, cx + n_2, cy + n_2, cs,
//000603:                         p2, 0, 0, n_2,
//000604:                         C, cx + n_2, cy + n_2, cs);
//000605:                     matrix_add(n_2, n_2,
//000606:                         C, cx + n_2, cy + n_2, cs,
//000607:                         p6, 0, 0, n_2,
//000608:                         C, cx + n_2, cy + n_2, cs);
//000609:                 });
//000610: 
//000611:                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
//000612:             }
//000613:         }
//000614:     }
//000615: }
    IL_0017:  br.s       IL_0049

//000163:                 {
    IL_0019:  nop
//000164:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
    IL_001a:  ldloc.2
    IL_001b:  ldarg.s    A
    IL_001d:  ldloc.0
    IL_001e:  ldarg.s    ax
    IL_0020:  add
    IL_0021:  ldarg.s    a_s
    IL_0023:  mul
    IL_0024:  ldloc.3
    IL_0025:  add
    IL_0026:  ldarg.s    ay
    IL_0028:  add
    IL_0029:  conv.i
    IL_002a:  ldc.i4.4
    IL_002b:  mul
    IL_002c:  add
    IL_002d:  ldind.i4
    IL_002e:  ldarg.s    B
    IL_0030:  ldloc.3
    IL_0031:  ldarg.s    bx
    IL_0033:  add
    IL_0034:  ldarg.s    bs
    IL_0036:  mul
    IL_0037:  ldloc.1
    IL_0038:  add
    IL_0039:  ldarg.s    by
    IL_003b:  add
    IL_003c:  conv.i
    IL_003d:  ldc.i4.4
    IL_003e:  mul
    IL_003f:  add
    IL_0040:  ldind.i4
    IL_0041:  mul
    IL_0042:  add
    IL_0043:  stloc.2
//000165:                 }
    IL_0044:  nop
//000162:                 for (int k = 0; k < m; k++)
    IL_0045:  ldloc.3
    IL_0046:  ldc.i4.1
    IL_0047:  add
    IL_0048:  stloc.3
    IL_0049:  ldloc.3
    IL_004a:  ldarg.2
    IL_004b:  clt
    IL_004d:  stloc.s    CS$4$0000
//000163:                 {
//000164:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
//000165:                 }
//000166:                 C[(i + cx) * cs + j + cy] = temp;
//000167:             }
//000168:         }
//000169:     }
//000170: 
//000171:     private static void matrix_mult_parallel(
//000172:         CancellationToken cancellationToken, 
//000173:         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
//000174:         int l, int m, int n,
//000175:         // (ax,ay) = origin of A submatrix for multiplicand 
//000176:         int* A, int ax, int ay, int a_s,
//000177:         // (bx,by) = origin of B submatrix for multiplicand 
//000178:         int* B, int bx, int by, int bs,
//000179:         // (cx,cy) = origin of C submatrix for result 
//000180:         int* C, int cx, int cy, int cs)
//000181:     {
//000182:         ParallelOptions options = new ParallelOptions { CancellationToken = cancellationToken };
//000183:         Parallel.For(0, l, options, i =>
//000184:         {
//000185:             for (int j = 0; j < n; j++)
//000186:             {
//000187:                 int temp = 0;
//000188:                 for (int k = 0; k < m; k++)
//000189:                 {
//000190:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
//000191:                 }
//000192:                 C[(i + cx) * cs + j + cy] = temp;
//000193:             }
//000194:         });
//000195:     }
//000196: 
//000197:     private static void strassen_mult_serial(
//000198:         CancellationToken cancellationToken, 
//000199:         // dimensions of A, B, and C submatrices 
//000200:         int n,
//000201:         // (ax,ay) = origin of A submatrix for multiplicand 
//000202:         int* A, int ax, int ay, int a_s,
//000203:         // (bx,by) = origin of B submatrix for multiplicand 
//000204:         int* B, int bx, int by, int bs,
//000205:         // (cx,cy) = origin of C submatrix for result 
//000206:         int* C, int cx, int cy, int cs,
//000207:         // Strassen's recursion limit for array dimensions 
//000208:         int s)
//000209:     {
//000210:         if (n <= s)
//000211:         {
//000212:             matrix_mult_serial(
//000213:                 cancellationToken,
//000214:                 n, n, n,
//000215:                 A, ax, ay, a_s,
//000216:                 B, bx, by, bs,
//000217:                 C, cx, cy, cs);
//000218:         }
//000219:         else
//000220:         {
//000221:             int n_2 = n >> 1;
//000222:             int[] workArr = new int[n_2 * n_2 * 9];
//000223:             fixed (int* work = workArr)
//000224:             {
//000225:                 int* a_cum = work;
//000226:                 int* b_cum = a_cum + n_2 * n_2;
//000227:                 int* p1 = b_cum + n_2 * n_2;
//000228:                 int* p2 = p1 + n_2 * n_2;
//000229:                 int* p3 = p2 + n_2 * n_2;
//000230:                 int* p4 = p3 + n_2 * n_2;
//000231:                 int* p5 = p4 + n_2 * n_2;
//000232:                 int* p6 = p5 + n_2 * n_2;
//000233:                 int* p7 = p6 + n_2 * n_2;
//000234: 
//000235:                 // p1 = (a11 + a22) * (b11 + b22) 
//000236:                 matrix_add(n_2, n_2,
//000237:                     A, ax, ay, a_s,
//000238:                     A, ax + n_2, ay + n_2, a_s,
//000239:                     a_cum, 0, 0, n_2);
//000240:                 matrix_add(n_2, n_2,
//000241:                     B, bx, by, bs,
//000242:                     B, bx + n_2, by + n_2, bs,
//000243:                     b_cum, 0, 0, n_2);
//000244:                 strassen_mult_serial(
//000245:                     cancellationToken,
//000246:                     n_2,
//000247:                     a_cum, 0, 0, n_2,
//000248:                     b_cum, 0, 0, n_2,
//000249:                     p1, 0, 0, n_2,
//000250:                     s);
//000251: 
//000252:                 // p2 = (a21 + a22) * b11 
//000253:                 matrix_add(n_2, n_2,
//000254:                     A, ax + n_2, ay, a_s,
//000255:                     A, ax + n_2, ay + n_2, a_s,
//000256:                     a_cum, 0, 0, n_2);
//000257:                 strassen_mult_serial(
//000258:                     cancellationToken,
//000259:                     n_2,
//000260:                     a_cum, 0, 0, n_2,
//000261:                     B, bx, by, bs,
//000262:                     p2, 0, 0, n_2,
//000263:                     s);
//000264: 
//000265:                 // p3 = a11 x (b12 - b22) 
//000266:                 matrix_sub(n_2, n_2,
//000267:                     B, bx, by + n_2, bs,
//000268:                     B, bx + n_2, by + n_2, bs,
//000269:                     b_cum, 0, 0, n_2);
//000270:                 strassen_mult_serial(
//000271:                     cancellationToken,
//000272:                     n_2,
//000273:                     A, ax, ay, a_s,
//000274:                     b_cum, 0, 0, n_2,
//000275:                     p3, 0, 0, n_2,
//000276:                     s);
//000277: 
//000278:                 // p4 = a22 x (b21 - b11) 
//000279:                 matrix_sub(n_2, n_2,
//000280:                     B, bx + n_2, by, bs,
//000281:                     B, bx, by, bs,
//000282:                     b_cum, 0, 0, n_2);
//000283:                 strassen_mult_serial(
//000284:                     cancellationToken,
//000285:                     n_2,
//000286:                     A, ax + n_2, ay + n_2, a_s,
//000287:                     b_cum, 0, 0, n_2,
//000288:                     p4, 0, 0, n_2,
//000289:                     s);
//000290: 
//000291:                 // p5 = (a11 + a12) x b22 
//000292:                 matrix_add(n_2, n_2,
//000293:                     A, ax, ay, a_s,
//000294:                     A, ax, ay + n_2, a_s,
//000295:                     a_cum, 0, 0, n_2);
//000296:                 strassen_mult_serial(
//000297:                     cancellationToken,
//000298:                     n_2,
//000299:                     a_cum, 0, 0, n_2,
//000300:                     B, bx + n_2, by + n_2, bs,
//000301:                     p5, 0, 0, n_2,
//000302:                     s);
//000303: 
//000304:                 // p6 = (a21 - a11) x (b11 + b12) 
//000305:                 matrix_sub(n_2, n_2,
//000306:                     A, ax + n_2, ay, a_s,
//000307:                     A, ax, ay, a_s,
//000308:                     a_cum, 0, 0, n_2);
//000309:                 matrix_add(n_2, n_2,
//000310:                     B, bx, by, bs,
//000311:                     B, bx, by + n_2, bs,
//000312:                     b_cum, 0, 0, n_2);
//000313:                 strassen_mult_serial(
//000314:                     cancellationToken,
//000315:                     n_2,
//000316:                     a_cum, 0, 0, n_2,
//000317:                     b_cum, 0, 0, n_2,
//000318:                     p6, 0, 0, n_2,
//000319:                     s);
//000320: 
//000321:                 // p7 = (a12 - a22) x (b21 + b22) 
//000322:                 matrix_sub(n_2, n_2,
//000323:                     A, ax, ay + n_2, a_s,
//000324:                     A, ax + n_2, ay + n_2, a_s,
//000325:                     a_cum, 0, 0, n_2);
//000326:                 matrix_add(n_2, n_2,
//000327:                     B, bx + n_2, by, bs,
//000328:                     B, bx + n_2, by + n_2, bs,
//000329:                     b_cum, 0, 0, n_2);
//000330:                 strassen_mult_serial(
//000331:                     cancellationToken,
//000332:                     n_2,
//000333:                     a_cum, 0, 0, n_2,
//000334:                     b_cum, 0, 0, n_2,
//000335:                     p7, 0, 0, n_2,
//000336:                     s);
//000337: 
//000338:                 // c11 = p1 + p4 - p5 + p7 
//000339:                 matrix_add(n_2, n_2,
//000340:                     p1, 0, 0, n_2,
//000341:                     p4, 0, 0, n_2,
//000342:                     C, cx, cy, cs);
//000343:                 matrix_sub(n_2, n_2,
//000344:                     C, cx, cy, cs,
//000345:                     p5, 0, 0, n_2,
//000346:                     C, cx, cy, cs);
//000347:                 matrix_add(n_2, n_2,
//000348:                     C, cx, cy, cs,
//000349:                     p7, 0, 0, n_2,
//000350:                     C, cx, cy, cs);
//000351: 
//000352:                 // c12 = p3 + p5 
//000353:                 matrix_add(n_2, n_2,
//000354:                     p3, 0, 0, n_2,
//000355:                     p5, 0, 0, n_2,
//000356:                     C, cx, cy + n_2, cs);
//000357: 
//000358:                 // c21 = p2 + p4 
//000359:                 matrix_add(n_2, n_2,
//000360:                     p2, 0, 0, n_2,
//000361:                     p4, 0, 0, n_2,
//000362:                     C, cx + n_2, cy, cs);
//000363: 
//000364:                 // c22 = p1 + p3 - p2 + p6 
//000365:                 matrix_add(n_2, n_2,
//000366:                     p1, 0, 0, n_2,
//000367:                     p3, 0, 0, n_2,
//000368:                     C, cx + n_2, cy + n_2, cs);
//000369:                 matrix_sub(n_2, n_2,
//000370:                     C, cx + n_2, cy + n_2, cs,
//000371:                     p2, 0, 0, n_2,
//000372:                     C, cx + n_2, cy + n_2, cs);
//000373:                 matrix_add(n_2, n_2,
//000374:                     C, cx + n_2, cy + n_2, cs,
//000375:                     p6, 0, 0, n_2,
//000376:                     C, cx + n_2, cy + n_2, cs);
//000377:             }
//000378:         }
//000379:     }
//000380: 
//000381:     private static void strassen_mult_parallel(
//000382:         CancellationToken cancellationToken, 
//000383:         // dimensions of A, B, and C submatrices 
//000384:         int n,
//000385:         // (ax,ay) = origin of A submatrix for multiplicand 
//000386:         int* A, int ax, int ay, int a_s,
//000387:         // (bx,by) = origin of B submatrix for multiplicand 
//000388:         int* B, int bx, int by, int bs,
//000389:         // (cx,cy) = origin of C submatrix for result 
//000390:         int* C, int cx, int cy, int cs,
//000391:         // Strassen's recursion limit for array dimensions 
//000392:         int s)
//000393:     {
//000394:         if (n <= s)
//000395:         {
//000396:             matrix_mult_serial(
//000397:                 cancellationToken,
//000398:                 n, n, n,
//000399:                 A, ax, ay, a_s,
//000400:                 B, bx, by, bs,
//000401:                 C, cx, cy, cs);
//000402:         }
//000403:         else
//000404:         {
//000405:             int n_2 = n >> 1;
//000406:             int areaSize = n_2 * n_2;
//000407:             int[] workArr = new int[areaSize * 17];
//000408:             fixed (int* work = workArr)
//000409:             {
//000410:                 int* a_cum = work;
//000411:                 int* b_cum = a_cum + areaSize;
//000412:                 int* c_cum = b_cum + areaSize;
//000413:                 int* d_cum = c_cum + areaSize;
//000414:                 int* e_cum = d_cum + areaSize;
//000415:                 int* f_cum = e_cum + areaSize;
//000416:                 int* g_cum = f_cum + areaSize;
//000417:                 int* h_cum = g_cum + areaSize;
//000418:                 int* i_cum = h_cum + areaSize;
//000419:                 int* j_cum = i_cum + areaSize;
//000420:                 int* p1 = j_cum + areaSize;
//000421:                 int* p2 = p1 + areaSize;
//000422:                 int* p3 = p2 + areaSize;
//000423:                 int* p4 = p3 + areaSize;
//000424:                 int* p5 = p4 + areaSize;
//000425:                 int* p6 = p5 + areaSize;
//000426:                 int* p7 = p6 + areaSize;
//000427: 
//000428:                 // p1 = (a11 + a22) * (b11 + b22) 
//000429:                 Task t_p1 = Task.Factory.StartNew(() =>
//000430:                 {
//000431:                     matrix_add(n_2, n_2,
//000432:                         A, ax, ay, a_s,
//000433:                         A, ax + n_2, ay + n_2, a_s,
//000434:                         a_cum, 0, 0, n_2);
//000435:                     matrix_add(n_2, n_2,
//000436:                         B, bx, by, bs,
//000437:                         B, bx + n_2, by + n_2, bs,
//000438:                         b_cum, 0, 0, n_2);
//000439:                     strassen_mult_parallel(
//000440:                         cancellationToken,
//000441:                         n_2,
//000442:                         a_cum, 0, 0, n_2,
//000443:                         b_cum, 0, 0, n_2,
//000444:                         p1, 0, 0, n_2,
//000445:                         s);
//000446:                 }, cancellationToken);
//000447: 
//000448:                 // p2 = (a21 + a22) * b11 
//000449:                 Task t_p2 = Task.Factory.StartNew(() =>
//000450:                 {
//000451:                     matrix_add(n_2, n_2,
//000452:                         A, ax + n_2, ay, a_s,
//000453:                         A, ax + n_2, ay + n_2, a_s,
//000454:                         c_cum, 0, 0, n_2);
//000455:                     strassen_mult_parallel(
//000456:                         cancellationToken,
//000457:                         n_2,
//000458:                         c_cum, 0, 0, n_2,
//000459:                         B, bx, by, bs,
//000460:                         p2, 0, 0, n_2,
//000461:                         s);
//000462:                 }, cancellationToken);
//000463: 
//000464:                 // p3 = a11 x (b12 - b22) 
//000465:                 Task t_p3 = Task.Factory.StartNew(() =>
//000466:                 {
//000467:                     matrix_sub(n_2, n_2,
//000468:                         B, bx, by + n_2, bs,
//000469:                         B, bx + n_2, by + n_2, bs,
//000470:                         d_cum, 0, 0, n_2);
//000471:                     strassen_mult_parallel(
//000472:                         cancellationToken,
//000473:                         n_2,
//000474:                         A, ax, ay, a_s,
//000475:                         d_cum, 0, 0, n_2,
//000476:                         p3, 0, 0, n_2,
//000477:                         s);
//000478:                 }, cancellationToken);
//000479: 
//000480:                 // p4 = a22 x (b21 - b11) 
//000481:                 Task t_p4 = Task.Factory.StartNew(() =>
//000482:                 {
//000483:                     matrix_sub(n_2, n_2,
//000484:                         B, bx + n_2, by, bs,
//000485:                         B, bx, by, bs,
//000486:                         e_cum, 0, 0, n_2);
//000487:                     strassen_mult_parallel(
//000488:                         cancellationToken,
//000489:                         n_2,
//000490:                         A, ax + n_2, ay + n_2, a_s,
//000491:                         e_cum, 0, 0, n_2,
//000492:                         p4, 0, 0, n_2,
//000493:                         s);
//000494:                 }, cancellationToken);
//000495: 
//000496:                 // p5 = (a11 + a12) x b22 
//000497:                 Task t_p5 = Task.Factory.StartNew(() =>
//000498:                 {
//000499:                     matrix_add(n_2, n_2,
//000500:                         A, ax, ay, a_s,
//000501:                         A, ax, ay + n_2, a_s,
//000502:                         f_cum, 0, 0, n_2);
//000503:                     strassen_mult_parallel(
//000504:                         cancellationToken,
//000505:                         n_2,
//000506:                         f_cum, 0, 0, n_2,
//000507:                         B, bx + n_2, by + n_2, bs,
//000508:                         p5, 0, 0, n_2,
//000509:                         s);
//000510:                 }, cancellationToken);
//000511: 
//000512:                 // p6 = (a21 - a11) x (b11 + b12) 
//000513:                 Task t_p6 = Task.Factory.StartNew(() =>
//000514:                 {
//000515:                     matrix_sub(n_2, n_2,
//000516:                         A, ax + n_2, ay, a_s,
//000517:                         A, ax, ay, a_s,
//000518:                         g_cum, 0, 0, n_2);
//000519:                     matrix_add(n_2, n_2,
//000520:                         B, bx, by, bs,
//000521:                         B, bx, by + n_2, bs,
//000522:                         h_cum, 0, 0, n_2);
//000523:                     strassen_mult_parallel(
//000524:                         cancellationToken,
//000525:                         n_2,
//000526:                         g_cum, 0, 0, n_2,
//000527:                         h_cum, 0, 0, n_2,
//000528:                         p6, 0, 0, n_2,
//000529:                         s);
//000530:                 }, cancellationToken);
//000531: 
//000532:                 // p7 = (a12 - a22) x (b21 + b22) 
//000533:                 Task t_p7 = Task.Factory.StartNew(() =>
//000534:                 {
//000535:                     matrix_sub(n_2, n_2,
//000536:                         A, ax, ay + n_2, a_s,
//000537:                         A, ax + n_2, ay + n_2, a_s,
//000538:                         i_cum, 0, 0, n_2);
//000539:                     matrix_add(n_2, n_2,
//000540:                         B, bx + n_2, by, bs,
//000541:                         B, bx + n_2, by + n_2, bs,
//000542:                         j_cum, 0, 0, n_2);
//000543:                     strassen_mult_parallel(
//000544:                         cancellationToken,
//000545:                         n_2,
//000546:                         i_cum, 0, 0, n_2,
//000547:                         j_cum, 0, 0, n_2,
//000548:                         p7, 0, 0, n_2,
//000549:                         s);
//000550:                 }, cancellationToken);
//000551: 
//000552:                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
//000553:                 catch (AggregateException ae)
//000554:                 {
//000555:                     ae.Flatten().Handle(e => e is TaskCanceledException);
//000556:                     cancellationToken.ThrowIfCancellationRequested();
//000557:                 }
//000558: 
//000559:                 // c11 = p1 + p4 - p5 + p7 
//000560:                 Task t_c11 = Task.Factory.StartNew(() =>
//000561:                 {
//000562:                     matrix_add(n_2, n_2,
//000563:                         p1, 0, 0, n_2,
//000564:                         p4, 0, 0, n_2,
//000565:                         C, cx, cy, cs);
//000566:                     matrix_sub(n_2, n_2,
//000567:                         C, cx, cy, cs,
//000568:                         p5, 0, 0, n_2,
//000569:                         C, cx, cy, cs);
//000570:                     matrix_add(n_2, n_2,
//000571:                         C, cx, cy, cs,
//000572:                         p7, 0, 0, n_2,
//000573:                         C, cx, cy, cs);
//000574:                 });
//000575: 
//000576:                 // c12 = p3 + p5 
//000577:                 Task t_c12 = Task.Factory.StartNew(() =>
//000578:                 {
//000579:                     matrix_add(n_2, n_2,
//000580:                         p3, 0, 0, n_2,
//000581:                         p5, 0, 0, n_2,
//000582:                         C, cx, cy + n_2, cs);
//000583:                 });
//000584: 
//000585:                 // c21 = p2 + p4 
//000586:                 Task t_c21 = Task.Factory.StartNew(() =>
//000587:                 {
//000588:                     matrix_add(n_2, n_2,
//000589:                         p2, 0, 0, n_2,
//000590:                         p4, 0, 0, n_2,
//000591:                         C, cx + n_2, cy, cs);
//000592:                 });
//000593: 
//000594:                 // c22 = p1 + p3 - p2 + p6 
//000595:                 Task t_c22 = Task.Factory.StartNew(() =>
//000596:                 {
//000597:                     matrix_add(n_2, n_2,
//000598:                         p1, 0, 0, n_2,
//000599:                         p3, 0, 0, n_2,
//000600:                         C, cx + n_2, cy + n_2, cs);
//000601:                     matrix_sub(n_2, n_2,
//000602:                         C, cx + n_2, cy + n_2, cs,
//000603:                         p2, 0, 0, n_2,
//000604:                         C, cx + n_2, cy + n_2, cs);
//000605:                     matrix_add(n_2, n_2,
//000606:                         C, cx + n_2, cy + n_2, cs,
//000607:                         p6, 0, 0, n_2,
//000608:                         C, cx + n_2, cy + n_2, cs);
//000609:                 });
//000610: 
//000611:                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
//000612:             }
//000613:         }
//000614:     }
//000615: }
    IL_004f:  ldloc.s    CS$4$0000
    IL_0051:  brtrue.s   IL_0019

//000166:                 C[(i + cx) * cs + j + cy] = temp;
    IL_0053:  ldarg.s    C
    IL_0055:  ldloc.0
    IL_0056:  ldarg.s    cx
    IL_0058:  add
    IL_0059:  ldarg.s    cs
    IL_005b:  mul
    IL_005c:  ldloc.1
    IL_005d:  add
    IL_005e:  ldarg.s    cy
    IL_0060:  add
    IL_0061:  conv.i
    IL_0062:  ldc.i4.4
    IL_0063:  mul
    IL_0064:  add
    IL_0065:  ldloc.2
    IL_0066:  stind.i4
//000167:             }
    IL_0067:  nop
//000159:             for (int j = 0; j < n; j++)
    IL_0068:  ldloc.1
    IL_0069:  ldc.i4.1
    IL_006a:  add
    IL_006b:  stloc.1
    IL_006c:  ldloc.1
    IL_006d:  ldarg.3
    IL_006e:  clt
    IL_0070:  stloc.s    CS$4$0000
//000160:             {
//000161:                 int temp = 0;
//000162:                 for (int k = 0; k < m; k++)
//000163:                 {
//000164:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
//000165:                 }
//000166:                 C[(i + cx) * cs + j + cy] = temp;
//000167:             }
//000168:         }
//000169:     }
//000170: 
//000171:     private static void matrix_mult_parallel(
//000172:         CancellationToken cancellationToken, 
//000173:         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
//000174:         int l, int m, int n,
//000175:         // (ax,ay) = origin of A submatrix for multiplicand 
//000176:         int* A, int ax, int ay, int a_s,
//000177:         // (bx,by) = origin of B submatrix for multiplicand 
//000178:         int* B, int bx, int by, int bs,
//000179:         // (cx,cy) = origin of C submatrix for result 
//000180:         int* C, int cx, int cy, int cs)
//000181:     {
//000182:         ParallelOptions options = new ParallelOptions { CancellationToken = cancellationToken };
//000183:         Parallel.For(0, l, options, i =>
//000184:         {
//000185:             for (int j = 0; j < n; j++)
//000186:             {
//000187:                 int temp = 0;
//000188:                 for (int k = 0; k < m; k++)
//000189:                 {
//000190:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
//000191:                 }
//000192:                 C[(i + cx) * cs + j + cy] = temp;
//000193:             }
//000194:         });
//000195:     }
//000196: 
//000197:     private static void strassen_mult_serial(
//000198:         CancellationToken cancellationToken, 
//000199:         // dimensions of A, B, and C submatrices 
//000200:         int n,
//000201:         // (ax,ay) = origin of A submatrix for multiplicand 
//000202:         int* A, int ax, int ay, int a_s,
//000203:         // (bx,by) = origin of B submatrix for multiplicand 
//000204:         int* B, int bx, int by, int bs,
//000205:         // (cx,cy) = origin of C submatrix for result 
//000206:         int* C, int cx, int cy, int cs,
//000207:         // Strassen's recursion limit for array dimensions 
//000208:         int s)
//000209:     {
//000210:         if (n <= s)
//000211:         {
//000212:             matrix_mult_serial(
//000213:                 cancellationToken,
//000214:                 n, n, n,
//000215:                 A, ax, ay, a_s,
//000216:                 B, bx, by, bs,
//000217:                 C, cx, cy, cs);
//000218:         }
//000219:         else
//000220:         {
//000221:             int n_2 = n >> 1;
//000222:             int[] workArr = new int[n_2 * n_2 * 9];
//000223:             fixed (int* work = workArr)
//000224:             {
//000225:                 int* a_cum = work;
//000226:                 int* b_cum = a_cum + n_2 * n_2;
//000227:                 int* p1 = b_cum + n_2 * n_2;
//000228:                 int* p2 = p1 + n_2 * n_2;
//000229:                 int* p3 = p2 + n_2 * n_2;
//000230:                 int* p4 = p3 + n_2 * n_2;
//000231:                 int* p5 = p4 + n_2 * n_2;
//000232:                 int* p6 = p5 + n_2 * n_2;
//000233:                 int* p7 = p6 + n_2 * n_2;
//000234: 
//000235:                 // p1 = (a11 + a22) * (b11 + b22) 
//000236:                 matrix_add(n_2, n_2,
//000237:                     A, ax, ay, a_s,
//000238:                     A, ax + n_2, ay + n_2, a_s,
//000239:                     a_cum, 0, 0, n_2);
//000240:                 matrix_add(n_2, n_2,
//000241:                     B, bx, by, bs,
//000242:                     B, bx + n_2, by + n_2, bs,
//000243:                     b_cum, 0, 0, n_2);
//000244:                 strassen_mult_serial(
//000245:                     cancellationToken,
//000246:                     n_2,
//000247:                     a_cum, 0, 0, n_2,
//000248:                     b_cum, 0, 0, n_2,
//000249:                     p1, 0, 0, n_2,
//000250:                     s);
//000251: 
//000252:                 // p2 = (a21 + a22) * b11 
//000253:                 matrix_add(n_2, n_2,
//000254:                     A, ax + n_2, ay, a_s,
//000255:                     A, ax + n_2, ay + n_2, a_s,
//000256:                     a_cum, 0, 0, n_2);
//000257:                 strassen_mult_serial(
//000258:                     cancellationToken,
//000259:                     n_2,
//000260:                     a_cum, 0, 0, n_2,
//000261:                     B, bx, by, bs,
//000262:                     p2, 0, 0, n_2,
//000263:                     s);
//000264: 
//000265:                 // p3 = a11 x (b12 - b22) 
//000266:                 matrix_sub(n_2, n_2,
//000267:                     B, bx, by + n_2, bs,
//000268:                     B, bx + n_2, by + n_2, bs,
//000269:                     b_cum, 0, 0, n_2);
//000270:                 strassen_mult_serial(
//000271:                     cancellationToken,
//000272:                     n_2,
//000273:                     A, ax, ay, a_s,
//000274:                     b_cum, 0, 0, n_2,
//000275:                     p3, 0, 0, n_2,
//000276:                     s);
//000277: 
//000278:                 // p4 = a22 x (b21 - b11) 
//000279:                 matrix_sub(n_2, n_2,
//000280:                     B, bx + n_2, by, bs,
//000281:                     B, bx, by, bs,
//000282:                     b_cum, 0, 0, n_2);
//000283:                 strassen_mult_serial(
//000284:                     cancellationToken,
//000285:                     n_2,
//000286:                     A, ax + n_2, ay + n_2, a_s,
//000287:                     b_cum, 0, 0, n_2,
//000288:                     p4, 0, 0, n_2,
//000289:                     s);
//000290: 
//000291:                 // p5 = (a11 + a12) x b22 
//000292:                 matrix_add(n_2, n_2,
//000293:                     A, ax, ay, a_s,
//000294:                     A, ax, ay + n_2, a_s,
//000295:                     a_cum, 0, 0, n_2);
//000296:                 strassen_mult_serial(
//000297:                     cancellationToken,
//000298:                     n_2,
//000299:                     a_cum, 0, 0, n_2,
//000300:                     B, bx + n_2, by + n_2, bs,
//000301:                     p5, 0, 0, n_2,
//000302:                     s);
//000303: 
//000304:                 // p6 = (a21 - a11) x (b11 + b12) 
//000305:                 matrix_sub(n_2, n_2,
//000306:                     A, ax + n_2, ay, a_s,
//000307:                     A, ax, ay, a_s,
//000308:                     a_cum, 0, 0, n_2);
//000309:                 matrix_add(n_2, n_2,
//000310:                     B, bx, by, bs,
//000311:                     B, bx, by + n_2, bs,
//000312:                     b_cum, 0, 0, n_2);
//000313:                 strassen_mult_serial(
//000314:                     cancellationToken,
//000315:                     n_2,
//000316:                     a_cum, 0, 0, n_2,
//000317:                     b_cum, 0, 0, n_2,
//000318:                     p6, 0, 0, n_2,
//000319:                     s);
//000320: 
//000321:                 // p7 = (a12 - a22) x (b21 + b22) 
//000322:                 matrix_sub(n_2, n_2,
//000323:                     A, ax, ay + n_2, a_s,
//000324:                     A, ax + n_2, ay + n_2, a_s,
//000325:                     a_cum, 0, 0, n_2);
//000326:                 matrix_add(n_2, n_2,
//000327:                     B, bx + n_2, by, bs,
//000328:                     B, bx + n_2, by + n_2, bs,
//000329:                     b_cum, 0, 0, n_2);
//000330:                 strassen_mult_serial(
//000331:                     cancellationToken,
//000332:                     n_2,
//000333:                     a_cum, 0, 0, n_2,
//000334:                     b_cum, 0, 0, n_2,
//000335:                     p7, 0, 0, n_2,
//000336:                     s);
//000337: 
//000338:                 // c11 = p1 + p4 - p5 + p7 
//000339:                 matrix_add(n_2, n_2,
//000340:                     p1, 0, 0, n_2,
//000341:                     p4, 0, 0, n_2,
//000342:                     C, cx, cy, cs);
//000343:                 matrix_sub(n_2, n_2,
//000344:                     C, cx, cy, cs,
//000345:                     p5, 0, 0, n_2,
//000346:                     C, cx, cy, cs);
//000347:                 matrix_add(n_2, n_2,
//000348:                     C, cx, cy, cs,
//000349:                     p7, 0, 0, n_2,
//000350:                     C, cx, cy, cs);
//000351: 
//000352:                 // c12 = p3 + p5 
//000353:                 matrix_add(n_2, n_2,
//000354:                     p3, 0, 0, n_2,
//000355:                     p5, 0, 0, n_2,
//000356:                     C, cx, cy + n_2, cs);
//000357: 
//000358:                 // c21 = p2 + p4 
//000359:                 matrix_add(n_2, n_2,
//000360:                     p2, 0, 0, n_2,
//000361:                     p4, 0, 0, n_2,
//000362:                     C, cx + n_2, cy, cs);
//000363: 
//000364:                 // c22 = p1 + p3 - p2 + p6 
//000365:                 matrix_add(n_2, n_2,
//000366:                     p1, 0, 0, n_2,
//000367:                     p3, 0, 0, n_2,
//000368:                     C, cx + n_2, cy + n_2, cs);
//000369:                 matrix_sub(n_2, n_2,
//000370:                     C, cx + n_2, cy + n_2, cs,
//000371:                     p2, 0, 0, n_2,
//000372:                     C, cx + n_2, cy + n_2, cs);
//000373:                 matrix_add(n_2, n_2,
//000374:                     C, cx + n_2, cy + n_2, cs,
//000375:                     p6, 0, 0, n_2,
//000376:                     C, cx + n_2, cy + n_2, cs);
//000377:             }
//000378:         }
//000379:     }
//000380: 
//000381:     private static void strassen_mult_parallel(
//000382:         CancellationToken cancellationToken, 
//000383:         // dimensions of A, B, and C submatrices 
//000384:         int n,
//000385:         // (ax,ay) = origin of A submatrix for multiplicand 
//000386:         int* A, int ax, int ay, int a_s,
//000387:         // (bx,by) = origin of B submatrix for multiplicand 
//000388:         int* B, int bx, int by, int bs,
//000389:         // (cx,cy) = origin of C submatrix for result 
//000390:         int* C, int cx, int cy, int cs,
//000391:         // Strassen's recursion limit for array dimensions 
//000392:         int s)
//000393:     {
//000394:         if (n <= s)
//000395:         {
//000396:             matrix_mult_serial(
//000397:                 cancellationToken,
//000398:                 n, n, n,
//000399:                 A, ax, ay, a_s,
//000400:                 B, bx, by, bs,
//000401:                 C, cx, cy, cs);
//000402:         }
//000403:         else
//000404:         {
//000405:             int n_2 = n >> 1;
//000406:             int areaSize = n_2 * n_2;
//000407:             int[] workArr = new int[areaSize * 17];
//000408:             fixed (int* work = workArr)
//000409:             {
//000410:                 int* a_cum = work;
//000411:                 int* b_cum = a_cum + areaSize;
//000412:                 int* c_cum = b_cum + areaSize;
//000413:                 int* d_cum = c_cum + areaSize;
//000414:                 int* e_cum = d_cum + areaSize;
//000415:                 int* f_cum = e_cum + areaSize;
//000416:                 int* g_cum = f_cum + areaSize;
//000417:                 int* h_cum = g_cum + areaSize;
//000418:                 int* i_cum = h_cum + areaSize;
//000419:                 int* j_cum = i_cum + areaSize;
//000420:                 int* p1 = j_cum + areaSize;
//000421:                 int* p2 = p1 + areaSize;
//000422:                 int* p3 = p2 + areaSize;
//000423:                 int* p4 = p3 + areaSize;
//000424:                 int* p5 = p4 + areaSize;
//000425:                 int* p6 = p5 + areaSize;
//000426:                 int* p7 = p6 + areaSize;
//000427: 
//000428:                 // p1 = (a11 + a22) * (b11 + b22) 
//000429:                 Task t_p1 = Task.Factory.StartNew(() =>
//000430:                 {
//000431:                     matrix_add(n_2, n_2,
//000432:                         A, ax, ay, a_s,
//000433:                         A, ax + n_2, ay + n_2, a_s,
//000434:                         a_cum, 0, 0, n_2);
//000435:                     matrix_add(n_2, n_2,
//000436:                         B, bx, by, bs,
//000437:                         B, bx + n_2, by + n_2, bs,
//000438:                         b_cum, 0, 0, n_2);
//000439:                     strassen_mult_parallel(
//000440:                         cancellationToken,
//000441:                         n_2,
//000442:                         a_cum, 0, 0, n_2,
//000443:                         b_cum, 0, 0, n_2,
//000444:                         p1, 0, 0, n_2,
//000445:                         s);
//000446:                 }, cancellationToken);
//000447: 
//000448:                 // p2 = (a21 + a22) * b11 
//000449:                 Task t_p2 = Task.Factory.StartNew(() =>
//000450:                 {
//000451:                     matrix_add(n_2, n_2,
//000452:                         A, ax + n_2, ay, a_s,
//000453:                         A, ax + n_2, ay + n_2, a_s,
//000454:                         c_cum, 0, 0, n_2);
//000455:                     strassen_mult_parallel(
//000456:                         cancellationToken,
//000457:                         n_2,
//000458:                         c_cum, 0, 0, n_2,
//000459:                         B, bx, by, bs,
//000460:                         p2, 0, 0, n_2,
//000461:                         s);
//000462:                 }, cancellationToken);
//000463: 
//000464:                 // p3 = a11 x (b12 - b22) 
//000465:                 Task t_p3 = Task.Factory.StartNew(() =>
//000466:                 {
//000467:                     matrix_sub(n_2, n_2,
//000468:                         B, bx, by + n_2, bs,
//000469:                         B, bx + n_2, by + n_2, bs,
//000470:                         d_cum, 0, 0, n_2);
//000471:                     strassen_mult_parallel(
//000472:                         cancellationToken,
//000473:                         n_2,
//000474:                         A, ax, ay, a_s,
//000475:                         d_cum, 0, 0, n_2,
//000476:                         p3, 0, 0, n_2,
//000477:                         s);
//000478:                 }, cancellationToken);
//000479: 
//000480:                 // p4 = a22 x (b21 - b11) 
//000481:                 Task t_p4 = Task.Factory.StartNew(() =>
//000482:                 {
//000483:                     matrix_sub(n_2, n_2,
//000484:                         B, bx + n_2, by, bs,
//000485:                         B, bx, by, bs,
//000486:                         e_cum, 0, 0, n_2);
//000487:                     strassen_mult_parallel(
//000488:                         cancellationToken,
//000489:                         n_2,
//000490:                         A, ax + n_2, ay + n_2, a_s,
//000491:                         e_cum, 0, 0, n_2,
//000492:                         p4, 0, 0, n_2,
//000493:                         s);
//000494:                 }, cancellationToken);
//000495: 
//000496:                 // p5 = (a11 + a12) x b22 
//000497:                 Task t_p5 = Task.Factory.StartNew(() =>
//000498:                 {
//000499:                     matrix_add(n_2, n_2,
//000500:                         A, ax, ay, a_s,
//000501:                         A, ax, ay + n_2, a_s,
//000502:                         f_cum, 0, 0, n_2);
//000503:                     strassen_mult_parallel(
//000504:                         cancellationToken,
//000505:                         n_2,
//000506:                         f_cum, 0, 0, n_2,
//000507:                         B, bx + n_2, by + n_2, bs,
//000508:                         p5, 0, 0, n_2,
//000509:                         s);
//000510:                 }, cancellationToken);
//000511: 
//000512:                 // p6 = (a21 - a11) x (b11 + b12) 
//000513:                 Task t_p6 = Task.Factory.StartNew(() =>
//000514:                 {
//000515:                     matrix_sub(n_2, n_2,
//000516:                         A, ax + n_2, ay, a_s,
//000517:                         A, ax, ay, a_s,
//000518:                         g_cum, 0, 0, n_2);
//000519:                     matrix_add(n_2, n_2,
//000520:                         B, bx, by, bs,
//000521:                         B, bx, by + n_2, bs,
//000522:                         h_cum, 0, 0, n_2);
//000523:                     strassen_mult_parallel(
//000524:                         cancellationToken,
//000525:                         n_2,
//000526:                         g_cum, 0, 0, n_2,
//000527:                         h_cum, 0, 0, n_2,
//000528:                         p6, 0, 0, n_2,
//000529:                         s);
//000530:                 }, cancellationToken);
//000531: 
//000532:                 // p7 = (a12 - a22) x (b21 + b22) 
//000533:                 Task t_p7 = Task.Factory.StartNew(() =>
//000534:                 {
//000535:                     matrix_sub(n_2, n_2,
//000536:                         A, ax, ay + n_2, a_s,
//000537:                         A, ax + n_2, ay + n_2, a_s,
//000538:                         i_cum, 0, 0, n_2);
//000539:                     matrix_add(n_2, n_2,
//000540:                         B, bx + n_2, by, bs,
//000541:                         B, bx + n_2, by + n_2, bs,
//000542:                         j_cum, 0, 0, n_2);
//000543:                     strassen_mult_parallel(
//000544:                         cancellationToken,
//000545:                         n_2,
//000546:                         i_cum, 0, 0, n_2,
//000547:                         j_cum, 0, 0, n_2,
//000548:                         p7, 0, 0, n_2,
//000549:                         s);
//000550:                 }, cancellationToken);
//000551: 
//000552:                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
//000553:                 catch (AggregateException ae)
//000554:                 {
//000555:                     ae.Flatten().Handle(e => e is TaskCanceledException);
//000556:                     cancellationToken.ThrowIfCancellationRequested();
//000557:                 }
//000558: 
//000559:                 // c11 = p1 + p4 - p5 + p7 
//000560:                 Task t_c11 = Task.Factory.StartNew(() =>
//000561:                 {
//000562:                     matrix_add(n_2, n_2,
//000563:                         p1, 0, 0, n_2,
//000564:                         p4, 0, 0, n_2,
//000565:                         C, cx, cy, cs);
//000566:                     matrix_sub(n_2, n_2,
//000567:                         C, cx, cy, cs,
//000568:                         p5, 0, 0, n_2,
//000569:                         C, cx, cy, cs);
//000570:                     matrix_add(n_2, n_2,
//000571:                         C, cx, cy, cs,
//000572:                         p7, 0, 0, n_2,
//000573:                         C, cx, cy, cs);
//000574:                 });
//000575: 
//000576:                 // c12 = p3 + p5 
//000577:                 Task t_c12 = Task.Factory.StartNew(() =>
//000578:                 {
//000579:                     matrix_add(n_2, n_2,
//000580:                         p3, 0, 0, n_2,
//000581:                         p5, 0, 0, n_2,
//000582:                         C, cx, cy + n_2, cs);
//000583:                 });
//000584: 
//000585:                 // c21 = p2 + p4 
//000586:                 Task t_c21 = Task.Factory.StartNew(() =>
//000587:                 {
//000588:                     matrix_add(n_2, n_2,
//000589:                         p2, 0, 0, n_2,
//000590:                         p4, 0, 0, n_2,
//000591:                         C, cx + n_2, cy, cs);
//000592:                 });
//000593: 
//000594:                 // c22 = p1 + p3 - p2 + p6 
//000595:                 Task t_c22 = Task.Factory.StartNew(() =>
//000596:                 {
//000597:                     matrix_add(n_2, n_2,
//000598:                         p1, 0, 0, n_2,
//000599:                         p3, 0, 0, n_2,
//000600:                         C, cx + n_2, cy + n_2, cs);
//000601:                     matrix_sub(n_2, n_2,
//000602:                         C, cx + n_2, cy + n_2, cs,
//000603:                         p2, 0, 0, n_2,
//000604:                         C, cx + n_2, cy + n_2, cs);
//000605:                     matrix_add(n_2, n_2,
//000606:                         C, cx + n_2, cy + n_2, cs,
//000607:                         p6, 0, 0, n_2,
//000608:                         C, cx + n_2, cy + n_2, cs);
//000609:                 });
//000610: 
//000611:                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
//000612:             }
//000613:         }
//000614:     }
//000615: }
    IL_0072:  ldloc.s    CS$4$0000
    IL_0074:  brtrue.s   IL_0012

//000168:         }
    IL_0076:  nop
//000156:         for (int i = 0; i < l; ++i)
    IL_0077:  ldloc.0
    IL_0078:  ldc.i4.1
    IL_0079:  add
    IL_007a:  stloc.0
    IL_007b:  ldloc.0
    IL_007c:  ldarg.1
    IL_007d:  clt
    IL_007f:  stloc.s    CS$4$0000
//000157:         {
//000158:             cancellationToken.ThrowIfCancellationRequested();
//000159:             for (int j = 0; j < n; j++)
//000160:             {
//000161:                 int temp = 0;
//000162:                 for (int k = 0; k < m; k++)
//000163:                 {
//000164:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
//000165:                 }
//000166:                 C[(i + cx) * cs + j + cy] = temp;
//000167:             }
//000168:         }
//000169:     }
//000170: 
//000171:     private static void matrix_mult_parallel(
//000172:         CancellationToken cancellationToken, 
//000173:         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
//000174:         int l, int m, int n,
//000175:         // (ax,ay) = origin of A submatrix for multiplicand 
//000176:         int* A, int ax, int ay, int a_s,
//000177:         // (bx,by) = origin of B submatrix for multiplicand 
//000178:         int* B, int bx, int by, int bs,
//000179:         // (cx,cy) = origin of C submatrix for result 
//000180:         int* C, int cx, int cy, int cs)
//000181:     {
//000182:         ParallelOptions options = new ParallelOptions { CancellationToken = cancellationToken };
//000183:         Parallel.For(0, l, options, i =>
//000184:         {
//000185:             for (int j = 0; j < n; j++)
//000186:             {
//000187:                 int temp = 0;
//000188:                 for (int k = 0; k < m; k++)
//000189:                 {
//000190:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
//000191:                 }
//000192:                 C[(i + cx) * cs + j + cy] = temp;
//000193:             }
//000194:         });
//000195:     }
//000196: 
//000197:     private static void strassen_mult_serial(
//000198:         CancellationToken cancellationToken, 
//000199:         // dimensions of A, B, and C submatrices 
//000200:         int n,
//000201:         // (ax,ay) = origin of A submatrix for multiplicand 
//000202:         int* A, int ax, int ay, int a_s,
//000203:         // (bx,by) = origin of B submatrix for multiplicand 
//000204:         int* B, int bx, int by, int bs,
//000205:         // (cx,cy) = origin of C submatrix for result 
//000206:         int* C, int cx, int cy, int cs,
//000207:         // Strassen's recursion limit for array dimensions 
//000208:         int s)
//000209:     {
//000210:         if (n <= s)
//000211:         {
//000212:             matrix_mult_serial(
//000213:                 cancellationToken,
//000214:                 n, n, n,
//000215:                 A, ax, ay, a_s,
//000216:                 B, bx, by, bs,
//000217:                 C, cx, cy, cs);
//000218:         }
//000219:         else
//000220:         {
//000221:             int n_2 = n >> 1;
//000222:             int[] workArr = new int[n_2 * n_2 * 9];
//000223:             fixed (int* work = workArr)
//000224:             {
//000225:                 int* a_cum = work;
//000226:                 int* b_cum = a_cum + n_2 * n_2;
//000227:                 int* p1 = b_cum + n_2 * n_2;
//000228:                 int* p2 = p1 + n_2 * n_2;
//000229:                 int* p3 = p2 + n_2 * n_2;
//000230:                 int* p4 = p3 + n_2 * n_2;
//000231:                 int* p5 = p4 + n_2 * n_2;
//000232:                 int* p6 = p5 + n_2 * n_2;
//000233:                 int* p7 = p6 + n_2 * n_2;
//000234: 
//000235:                 // p1 = (a11 + a22) * (b11 + b22) 
//000236:                 matrix_add(n_2, n_2,
//000237:                     A, ax, ay, a_s,
//000238:                     A, ax + n_2, ay + n_2, a_s,
//000239:                     a_cum, 0, 0, n_2);
//000240:                 matrix_add(n_2, n_2,
//000241:                     B, bx, by, bs,
//000242:                     B, bx + n_2, by + n_2, bs,
//000243:                     b_cum, 0, 0, n_2);
//000244:                 strassen_mult_serial(
//000245:                     cancellationToken,
//000246:                     n_2,
//000247:                     a_cum, 0, 0, n_2,
//000248:                     b_cum, 0, 0, n_2,
//000249:                     p1, 0, 0, n_2,
//000250:                     s);
//000251: 
//000252:                 // p2 = (a21 + a22) * b11 
//000253:                 matrix_add(n_2, n_2,
//000254:                     A, ax + n_2, ay, a_s,
//000255:                     A, ax + n_2, ay + n_2, a_s,
//000256:                     a_cum, 0, 0, n_2);
//000257:                 strassen_mult_serial(
//000258:                     cancellationToken,
//000259:                     n_2,
//000260:                     a_cum, 0, 0, n_2,
//000261:                     B, bx, by, bs,
//000262:                     p2, 0, 0, n_2,
//000263:                     s);
//000264: 
//000265:                 // p3 = a11 x (b12 - b22) 
//000266:                 matrix_sub(n_2, n_2,
//000267:                     B, bx, by + n_2, bs,
//000268:                     B, bx + n_2, by + n_2, bs,
//000269:                     b_cum, 0, 0, n_2);
//000270:                 strassen_mult_serial(
//000271:                     cancellationToken,
//000272:                     n_2,
//000273:                     A, ax, ay, a_s,
//000274:                     b_cum, 0, 0, n_2,
//000275:                     p3, 0, 0, n_2,
//000276:                     s);
//000277: 
//000278:                 // p4 = a22 x (b21 - b11) 
//000279:                 matrix_sub(n_2, n_2,
//000280:                     B, bx + n_2, by, bs,
//000281:                     B, bx, by, bs,
//000282:                     b_cum, 0, 0, n_2);
//000283:                 strassen_mult_serial(
//000284:                     cancellationToken,
//000285:                     n_2,
//000286:                     A, ax + n_2, ay + n_2, a_s,
//000287:                     b_cum, 0, 0, n_2,
//000288:                     p4, 0, 0, n_2,
//000289:                     s);
//000290: 
//000291:                 // p5 = (a11 + a12) x b22 
//000292:                 matrix_add(n_2, n_2,
//000293:                     A, ax, ay, a_s,
//000294:                     A, ax, ay + n_2, a_s,
//000295:                     a_cum, 0, 0, n_2);
//000296:                 strassen_mult_serial(
//000297:                     cancellationToken,
//000298:                     n_2,
//000299:                     a_cum, 0, 0, n_2,
//000300:                     B, bx + n_2, by + n_2, bs,
//000301:                     p5, 0, 0, n_2,
//000302:                     s);
//000303: 
//000304:                 // p6 = (a21 - a11) x (b11 + b12) 
//000305:                 matrix_sub(n_2, n_2,
//000306:                     A, ax + n_2, ay, a_s,
//000307:                     A, ax, ay, a_s,
//000308:                     a_cum, 0, 0, n_2);
//000309:                 matrix_add(n_2, n_2,
//000310:                     B, bx, by, bs,
//000311:                     B, bx, by + n_2, bs,
//000312:                     b_cum, 0, 0, n_2);
//000313:                 strassen_mult_serial(
//000314:                     cancellationToken,
//000315:                     n_2,
//000316:                     a_cum, 0, 0, n_2,
//000317:                     b_cum, 0, 0, n_2,
//000318:                     p6, 0, 0, n_2,
//000319:                     s);
//000320: 
//000321:                 // p7 = (a12 - a22) x (b21 + b22) 
//000322:                 matrix_sub(n_2, n_2,
//000323:                     A, ax, ay + n_2, a_s,
//000324:                     A, ax + n_2, ay + n_2, a_s,
//000325:                     a_cum, 0, 0, n_2);
//000326:                 matrix_add(n_2, n_2,
//000327:                     B, bx + n_2, by, bs,
//000328:                     B, bx + n_2, by + n_2, bs,
//000329:                     b_cum, 0, 0, n_2);
//000330:                 strassen_mult_serial(
//000331:                     cancellationToken,
//000332:                     n_2,
//000333:                     a_cum, 0, 0, n_2,
//000334:                     b_cum, 0, 0, n_2,
//000335:                     p7, 0, 0, n_2,
//000336:                     s);
//000337: 
//000338:                 // c11 = p1 + p4 - p5 + p7 
//000339:                 matrix_add(n_2, n_2,
//000340:                     p1, 0, 0, n_2,
//000341:                     p4, 0, 0, n_2,
//000342:                     C, cx, cy, cs);
//000343:                 matrix_sub(n_2, n_2,
//000344:                     C, cx, cy, cs,
//000345:                     p5, 0, 0, n_2,
//000346:                     C, cx, cy, cs);
//000347:                 matrix_add(n_2, n_2,
//000348:                     C, cx, cy, cs,
//000349:                     p7, 0, 0, n_2,
//000350:                     C, cx, cy, cs);
//000351: 
//000352:                 // c12 = p3 + p5 
//000353:                 matrix_add(n_2, n_2,
//000354:                     p3, 0, 0, n_2,
//000355:                     p5, 0, 0, n_2,
//000356:                     C, cx, cy + n_2, cs);
//000357: 
//000358:                 // c21 = p2 + p4 
//000359:                 matrix_add(n_2, n_2,
//000360:                     p2, 0, 0, n_2,
//000361:                     p4, 0, 0, n_2,
//000362:                     C, cx + n_2, cy, cs);
//000363: 
//000364:                 // c22 = p1 + p3 - p2 + p6 
//000365:                 matrix_add(n_2, n_2,
//000366:                     p1, 0, 0, n_2,
//000367:                     p3, 0, 0, n_2,
//000368:                     C, cx + n_2, cy + n_2, cs);
//000369:                 matrix_sub(n_2, n_2,
//000370:                     C, cx + n_2, cy + n_2, cs,
//000371:                     p2, 0, 0, n_2,
//000372:                     C, cx + n_2, cy + n_2, cs);
//000373:                 matrix_add(n_2, n_2,
//000374:                     C, cx + n_2, cy + n_2, cs,
//000375:                     p6, 0, 0, n_2,
//000376:                     C, cx + n_2, cy + n_2, cs);
//000377:             }
//000378:         }
//000379:     }
//000380: 
//000381:     private static void strassen_mult_parallel(
//000382:         CancellationToken cancellationToken, 
//000383:         // dimensions of A, B, and C submatrices 
//000384:         int n,
//000385:         // (ax,ay) = origin of A submatrix for multiplicand 
//000386:         int* A, int ax, int ay, int a_s,
//000387:         // (bx,by) = origin of B submatrix for multiplicand 
//000388:         int* B, int bx, int by, int bs,
//000389:         // (cx,cy) = origin of C submatrix for result 
//000390:         int* C, int cx, int cy, int cs,
//000391:         // Strassen's recursion limit for array dimensions 
//000392:         int s)
//000393:     {
//000394:         if (n <= s)
//000395:         {
//000396:             matrix_mult_serial(
//000397:                 cancellationToken,
//000398:                 n, n, n,
//000399:                 A, ax, ay, a_s,
//000400:                 B, bx, by, bs,
//000401:                 C, cx, cy, cs);
//000402:         }
//000403:         else
//000404:         {
//000405:             int n_2 = n >> 1;
//000406:             int areaSize = n_2 * n_2;
//000407:             int[] workArr = new int[areaSize * 17];
//000408:             fixed (int* work = workArr)
//000409:             {
//000410:                 int* a_cum = work;
//000411:                 int* b_cum = a_cum + areaSize;
//000412:                 int* c_cum = b_cum + areaSize;
//000413:                 int* d_cum = c_cum + areaSize;
//000414:                 int* e_cum = d_cum + areaSize;
//000415:                 int* f_cum = e_cum + areaSize;
//000416:                 int* g_cum = f_cum + areaSize;
//000417:                 int* h_cum = g_cum + areaSize;
//000418:                 int* i_cum = h_cum + areaSize;
//000419:                 int* j_cum = i_cum + areaSize;
//000420:                 int* p1 = j_cum + areaSize;
//000421:                 int* p2 = p1 + areaSize;
//000422:                 int* p3 = p2 + areaSize;
//000423:                 int* p4 = p3 + areaSize;
//000424:                 int* p5 = p4 + areaSize;
//000425:                 int* p6 = p5 + areaSize;
//000426:                 int* p7 = p6 + areaSize;
//000427: 
//000428:                 // p1 = (a11 + a22) * (b11 + b22) 
//000429:                 Task t_p1 = Task.Factory.StartNew(() =>
//000430:                 {
//000431:                     matrix_add(n_2, n_2,
//000432:                         A, ax, ay, a_s,
//000433:                         A, ax + n_2, ay + n_2, a_s,
//000434:                         a_cum, 0, 0, n_2);
//000435:                     matrix_add(n_2, n_2,
//000436:                         B, bx, by, bs,
//000437:                         B, bx + n_2, by + n_2, bs,
//000438:                         b_cum, 0, 0, n_2);
//000439:                     strassen_mult_parallel(
//000440:                         cancellationToken,
//000441:                         n_2,
//000442:                         a_cum, 0, 0, n_2,
//000443:                         b_cum, 0, 0, n_2,
//000444:                         p1, 0, 0, n_2,
//000445:                         s);
//000446:                 }, cancellationToken);
//000447: 
//000448:                 // p2 = (a21 + a22) * b11 
//000449:                 Task t_p2 = Task.Factory.StartNew(() =>
//000450:                 {
//000451:                     matrix_add(n_2, n_2,
//000452:                         A, ax + n_2, ay, a_s,
//000453:                         A, ax + n_2, ay + n_2, a_s,
//000454:                         c_cum, 0, 0, n_2);
//000455:                     strassen_mult_parallel(
//000456:                         cancellationToken,
//000457:                         n_2,
//000458:                         c_cum, 0, 0, n_2,
//000459:                         B, bx, by, bs,
//000460:                         p2, 0, 0, n_2,
//000461:                         s);
//000462:                 }, cancellationToken);
//000463: 
//000464:                 // p3 = a11 x (b12 - b22) 
//000465:                 Task t_p3 = Task.Factory.StartNew(() =>
//000466:                 {
//000467:                     matrix_sub(n_2, n_2,
//000468:                         B, bx, by + n_2, bs,
//000469:                         B, bx + n_2, by + n_2, bs,
//000470:                         d_cum, 0, 0, n_2);
//000471:                     strassen_mult_parallel(
//000472:                         cancellationToken,
//000473:                         n_2,
//000474:                         A, ax, ay, a_s,
//000475:                         d_cum, 0, 0, n_2,
//000476:                         p3, 0, 0, n_2,
//000477:                         s);
//000478:                 }, cancellationToken);
//000479: 
//000480:                 // p4 = a22 x (b21 - b11) 
//000481:                 Task t_p4 = Task.Factory.StartNew(() =>
//000482:                 {
//000483:                     matrix_sub(n_2, n_2,
//000484:                         B, bx + n_2, by, bs,
//000485:                         B, bx, by, bs,
//000486:                         e_cum, 0, 0, n_2);
//000487:                     strassen_mult_parallel(
//000488:                         cancellationToken,
//000489:                         n_2,
//000490:                         A, ax + n_2, ay + n_2, a_s,
//000491:                         e_cum, 0, 0, n_2,
//000492:                         p4, 0, 0, n_2,
//000493:                         s);
//000494:                 }, cancellationToken);
//000495: 
//000496:                 // p5 = (a11 + a12) x b22 
//000497:                 Task t_p5 = Task.Factory.StartNew(() =>
//000498:                 {
//000499:                     matrix_add(n_2, n_2,
//000500:                         A, ax, ay, a_s,
//000501:                         A, ax, ay + n_2, a_s,
//000502:                         f_cum, 0, 0, n_2);
//000503:                     strassen_mult_parallel(
//000504:                         cancellationToken,
//000505:                         n_2,
//000506:                         f_cum, 0, 0, n_2,
//000507:                         B, bx + n_2, by + n_2, bs,
//000508:                         p5, 0, 0, n_2,
//000509:                         s);
//000510:                 }, cancellationToken);
//000511: 
//000512:                 // p6 = (a21 - a11) x (b11 + b12) 
//000513:                 Task t_p6 = Task.Factory.StartNew(() =>
//000514:                 {
//000515:                     matrix_sub(n_2, n_2,
//000516:                         A, ax + n_2, ay, a_s,
//000517:                         A, ax, ay, a_s,
//000518:                         g_cum, 0, 0, n_2);
//000519:                     matrix_add(n_2, n_2,
//000520:                         B, bx, by, bs,
//000521:                         B, bx, by + n_2, bs,
//000522:                         h_cum, 0, 0, n_2);
//000523:                     strassen_mult_parallel(
//000524:                         cancellationToken,
//000525:                         n_2,
//000526:                         g_cum, 0, 0, n_2,
//000527:                         h_cum, 0, 0, n_2,
//000528:                         p6, 0, 0, n_2,
//000529:                         s);
//000530:                 }, cancellationToken);
//000531: 
//000532:                 // p7 = (a12 - a22) x (b21 + b22) 
//000533:                 Task t_p7 = Task.Factory.StartNew(() =>
//000534:                 {
//000535:                     matrix_sub(n_2, n_2,
//000536:                         A, ax, ay + n_2, a_s,
//000537:                         A, ax + n_2, ay + n_2, a_s,
//000538:                         i_cum, 0, 0, n_2);
//000539:                     matrix_add(n_2, n_2,
//000540:                         B, bx + n_2, by, bs,
//000541:                         B, bx + n_2, by + n_2, bs,
//000542:                         j_cum, 0, 0, n_2);
//000543:                     strassen_mult_parallel(
//000544:                         cancellationToken,
//000545:                         n_2,
//000546:                         i_cum, 0, 0, n_2,
//000547:                         j_cum, 0, 0, n_2,
//000548:                         p7, 0, 0, n_2,
//000549:                         s);
//000550:                 }, cancellationToken);
//000551: 
//000552:                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
//000553:                 catch (AggregateException ae)
//000554:                 {
//000555:                     ae.Flatten().Handle(e => e is TaskCanceledException);
//000556:                     cancellationToken.ThrowIfCancellationRequested();
//000557:                 }
//000558: 
//000559:                 // c11 = p1 + p4 - p5 + p7 
//000560:                 Task t_c11 = Task.Factory.StartNew(() =>
//000561:                 {
//000562:                     matrix_add(n_2, n_2,
//000563:                         p1, 0, 0, n_2,
//000564:                         p4, 0, 0, n_2,
//000565:                         C, cx, cy, cs);
//000566:                     matrix_sub(n_2, n_2,
//000567:                         C, cx, cy, cs,
//000568:                         p5, 0, 0, n_2,
//000569:                         C, cx, cy, cs);
//000570:                     matrix_add(n_2, n_2,
//000571:                         C, cx, cy, cs,
//000572:                         p7, 0, 0, n_2,
//000573:                         C, cx, cy, cs);
//000574:                 });
//000575: 
//000576:                 // c12 = p3 + p5 
//000577:                 Task t_c12 = Task.Factory.StartNew(() =>
//000578:                 {
//000579:                     matrix_add(n_2, n_2,
//000580:                         p3, 0, 0, n_2,
//000581:                         p5, 0, 0, n_2,
//000582:                         C, cx, cy + n_2, cs);
//000583:                 });
//000584: 
//000585:                 // c21 = p2 + p4 
//000586:                 Task t_c21 = Task.Factory.StartNew(() =>
//000587:                 {
//000588:                     matrix_add(n_2, n_2,
//000589:                         p2, 0, 0, n_2,
//000590:                         p4, 0, 0, n_2,
//000591:                         C, cx + n_2, cy, cs);
//000592:                 });
//000593: 
//000594:                 // c22 = p1 + p3 - p2 + p6 
//000595:                 Task t_c22 = Task.Factory.StartNew(() =>
//000596:                 {
//000597:                     matrix_add(n_2, n_2,
//000598:                         p1, 0, 0, n_2,
//000599:                         p3, 0, 0, n_2,
//000600:                         C, cx + n_2, cy + n_2, cs);
//000601:                     matrix_sub(n_2, n_2,
//000602:                         C, cx + n_2, cy + n_2, cs,
//000603:                         p2, 0, 0, n_2,
//000604:                         C, cx + n_2, cy + n_2, cs);
//000605:                     matrix_add(n_2, n_2,
//000606:                         C, cx + n_2, cy + n_2, cs,
//000607:                         p6, 0, 0, n_2,
//000608:                         C, cx + n_2, cy + n_2, cs);
//000609:                 });
//000610: 
//000611:                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
//000612:             }
//000613:         }
//000614:     }
//000615: }
    IL_0081:  ldloc.s    CS$4$0000
    IL_0083:  brtrue.s   IL_0005

//000169:     }
    IL_0085:  ret
  } // end of method Matrix::matrix_mult_serial

  .method private hidebysig static void  matrix_mult_parallel(valuetype [mscorlib]System.Threading.CancellationToken cancellationToken,
                                                              int32 l,
                                                              int32 m,
                                                              int32 n,
                                                              int32* A,
                                                              int32 ax,
                                                              int32 ay,
                                                              int32 a_s,
                                                              int32* B,
                                                              int32 bx,
                                                              int32 by,
                                                              int32 bs,
                                                              int32* C,
                                                              int32 cx,
                                                              int32 cy,
                                                              int32 cs) cil managed
  {
    // Code size       156 (0x9c)
    .maxstack  6
    .locals init ([0] class [mscorlib]System.Threading.Tasks.ParallelOptions options,
             [1] class [mscorlib]System.Threading.Tasks.ParallelOptions '<>g__initLocal0',
             [2] class Matrix/'<>c__DisplayClass2' 'CS$<>8__locals3')
//000170: 
//000171:     private static void matrix_mult_parallel(
//000172:         CancellationToken cancellationToken, 
//000173:         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
//000174:         int l, int m, int n,
//000175:         // (ax,ay) = origin of A submatrix for multiplicand 
//000176:         int* A, int ax, int ay, int a_s,
//000177:         // (bx,by) = origin of B submatrix for multiplicand 
//000178:         int* B, int bx, int by, int bs,
//000179:         // (cx,cy) = origin of C submatrix for result 
//000180:         int* C, int cx, int cy, int cs)
//000181:     {
//000182:         ParallelOptions options = new ParallelOptions { CancellationToken = cancellationToken };
//000183:         Parallel.For(0, l, options, i =>
//000184:         {
//000185:             for (int j = 0; j < n; j++)
//000186:             {
//000187:                 int temp = 0;
//000188:                 for (int k = 0; k < m; k++)
//000189:                 {
//000190:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
//000191:                 }
//000192:                 C[(i + cx) * cs + j + cy] = temp;
//000193:             }
//000194:         });
//000195:     }
//000196: 
//000197:     private static void strassen_mult_serial(
//000198:         CancellationToken cancellationToken, 
//000199:         // dimensions of A, B, and C submatrices 
//000200:         int n,
//000201:         // (ax,ay) = origin of A submatrix for multiplicand 
//000202:         int* A, int ax, int ay, int a_s,
//000203:         // (bx,by) = origin of B submatrix for multiplicand 
//000204:         int* B, int bx, int by, int bs,
//000205:         // (cx,cy) = origin of C submatrix for result 
//000206:         int* C, int cx, int cy, int cs,
//000207:         // Strassen's recursion limit for array dimensions 
//000208:         int s)
//000209:     {
//000210:         if (n <= s)
//000211:         {
//000212:             matrix_mult_serial(
//000213:                 cancellationToken,
//000214:                 n, n, n,
//000215:                 A, ax, ay, a_s,
//000216:                 B, bx, by, bs,
//000217:                 C, cx, cy, cs);
//000218:         }
//000219:         else
//000220:         {
//000221:             int n_2 = n >> 1;
//000222:             int[] workArr = new int[n_2 * n_2 * 9];
//000223:             fixed (int* work = workArr)
//000224:             {
//000225:                 int* a_cum = work;
//000226:                 int* b_cum = a_cum + n_2 * n_2;
//000227:                 int* p1 = b_cum + n_2 * n_2;
//000228:                 int* p2 = p1 + n_2 * n_2;
//000229:                 int* p3 = p2 + n_2 * n_2;
//000230:                 int* p4 = p3 + n_2 * n_2;
//000231:                 int* p5 = p4 + n_2 * n_2;
//000232:                 int* p6 = p5 + n_2 * n_2;
//000233:                 int* p7 = p6 + n_2 * n_2;
//000234: 
//000235:                 // p1 = (a11 + a22) * (b11 + b22) 
//000236:                 matrix_add(n_2, n_2,
//000237:                     A, ax, ay, a_s,
//000238:                     A, ax + n_2, ay + n_2, a_s,
//000239:                     a_cum, 0, 0, n_2);
//000240:                 matrix_add(n_2, n_2,
//000241:                     B, bx, by, bs,
//000242:                     B, bx + n_2, by + n_2, bs,
//000243:                     b_cum, 0, 0, n_2);
//000244:                 strassen_mult_serial(
//000245:                     cancellationToken,
//000246:                     n_2,
//000247:                     a_cum, 0, 0, n_2,
//000248:                     b_cum, 0, 0, n_2,
//000249:                     p1, 0, 0, n_2,
//000250:                     s);
//000251: 
//000252:                 // p2 = (a21 + a22) * b11 
//000253:                 matrix_add(n_2, n_2,
//000254:                     A, ax + n_2, ay, a_s,
//000255:                     A, ax + n_2, ay + n_2, a_s,
//000256:                     a_cum, 0, 0, n_2);
//000257:                 strassen_mult_serial(
//000258:                     cancellationToken,
//000259:                     n_2,
//000260:                     a_cum, 0, 0, n_2,
//000261:                     B, bx, by, bs,
//000262:                     p2, 0, 0, n_2,
//000263:                     s);
//000264: 
//000265:                 // p3 = a11 x (b12 - b22) 
//000266:                 matrix_sub(n_2, n_2,
//000267:                     B, bx, by + n_2, bs,
//000268:                     B, bx + n_2, by + n_2, bs,
//000269:                     b_cum, 0, 0, n_2);
//000270:                 strassen_mult_serial(
//000271:                     cancellationToken,
//000272:                     n_2,
//000273:                     A, ax, ay, a_s,
//000274:                     b_cum, 0, 0, n_2,
//000275:                     p3, 0, 0, n_2,
//000276:                     s);
//000277: 
//000278:                 // p4 = a22 x (b21 - b11) 
//000279:                 matrix_sub(n_2, n_2,
//000280:                     B, bx + n_2, by, bs,
//000281:                     B, bx, by, bs,
//000282:                     b_cum, 0, 0, n_2);
//000283:                 strassen_mult_serial(
//000284:                     cancellationToken,
//000285:                     n_2,
//000286:                     A, ax + n_2, ay + n_2, a_s,
//000287:                     b_cum, 0, 0, n_2,
//000288:                     p4, 0, 0, n_2,
//000289:                     s);
//000290: 
//000291:                 // p5 = (a11 + a12) x b22 
//000292:                 matrix_add(n_2, n_2,
//000293:                     A, ax, ay, a_s,
//000294:                     A, ax, ay + n_2, a_s,
//000295:                     a_cum, 0, 0, n_2);
//000296:                 strassen_mult_serial(
//000297:                     cancellationToken,
//000298:                     n_2,
//000299:                     a_cum, 0, 0, n_2,
//000300:                     B, bx + n_2, by + n_2, bs,
//000301:                     p5, 0, 0, n_2,
//000302:                     s);
//000303: 
//000304:                 // p6 = (a21 - a11) x (b11 + b12) 
//000305:                 matrix_sub(n_2, n_2,
//000306:                     A, ax + n_2, ay, a_s,
//000307:                     A, ax, ay, a_s,
//000308:                     a_cum, 0, 0, n_2);
//000309:                 matrix_add(n_2, n_2,
//000310:                     B, bx, by, bs,
//000311:                     B, bx, by + n_2, bs,
//000312:                     b_cum, 0, 0, n_2);
//000313:                 strassen_mult_serial(
//000314:                     cancellationToken,
//000315:                     n_2,
//000316:                     a_cum, 0, 0, n_2,
//000317:                     b_cum, 0, 0, n_2,
//000318:                     p6, 0, 0, n_2,
//000319:                     s);
//000320: 
//000321:                 // p7 = (a12 - a22) x (b21 + b22) 
//000322:                 matrix_sub(n_2, n_2,
//000323:                     A, ax, ay + n_2, a_s,
//000324:                     A, ax + n_2, ay + n_2, a_s,
//000325:                     a_cum, 0, 0, n_2);
//000326:                 matrix_add(n_2, n_2,
//000327:                     B, bx + n_2, by, bs,
//000328:                     B, bx + n_2, by + n_2, bs,
//000329:                     b_cum, 0, 0, n_2);
//000330:                 strassen_mult_serial(
//000331:                     cancellationToken,
//000332:                     n_2,
//000333:                     a_cum, 0, 0, n_2,
//000334:                     b_cum, 0, 0, n_2,
//000335:                     p7, 0, 0, n_2,
//000336:                     s);
//000337: 
//000338:                 // c11 = p1 + p4 - p5 + p7 
//000339:                 matrix_add(n_2, n_2,
//000340:                     p1, 0, 0, n_2,
//000341:                     p4, 0, 0, n_2,
//000342:                     C, cx, cy, cs);
//000343:                 matrix_sub(n_2, n_2,
//000344:                     C, cx, cy, cs,
//000345:                     p5, 0, 0, n_2,
//000346:                     C, cx, cy, cs);
//000347:                 matrix_add(n_2, n_2,
//000348:                     C, cx, cy, cs,
//000349:                     p7, 0, 0, n_2,
//000350:                     C, cx, cy, cs);
//000351: 
//000352:                 // c12 = p3 + p5 
//000353:                 matrix_add(n_2, n_2,
//000354:                     p3, 0, 0, n_2,
//000355:                     p5, 0, 0, n_2,
//000356:                     C, cx, cy + n_2, cs);
//000357: 
//000358:                 // c21 = p2 + p4 
//000359:                 matrix_add(n_2, n_2,
//000360:                     p2, 0, 0, n_2,
//000361:                     p4, 0, 0, n_2,
//000362:                     C, cx + n_2, cy, cs);
//000363: 
//000364:                 // c22 = p1 + p3 - p2 + p6 
//000365:                 matrix_add(n_2, n_2,
//000366:                     p1, 0, 0, n_2,
//000367:                     p3, 0, 0, n_2,
//000368:                     C, cx + n_2, cy + n_2, cs);
//000369:                 matrix_sub(n_2, n_2,
//000370:                     C, cx + n_2, cy + n_2, cs,
//000371:                     p2, 0, 0, n_2,
//000372:                     C, cx + n_2, cy + n_2, cs);
//000373:                 matrix_add(n_2, n_2,
//000374:                     C, cx + n_2, cy + n_2, cs,
//000375:                     p6, 0, 0, n_2,
//000376:                     C, cx + n_2, cy + n_2, cs);
//000377:             }
//000378:         }
//000379:     }
//000380: 
//000381:     private static void strassen_mult_parallel(
//000382:         CancellationToken cancellationToken, 
//000383:         // dimensions of A, B, and C submatrices 
//000384:         int n,
//000385:         // (ax,ay) = origin of A submatrix for multiplicand 
//000386:         int* A, int ax, int ay, int a_s,
//000387:         // (bx,by) = origin of B submatrix for multiplicand 
//000388:         int* B, int bx, int by, int bs,
//000389:         // (cx,cy) = origin of C submatrix for result 
//000390:         int* C, int cx, int cy, int cs,
//000391:         // Strassen's recursion limit for array dimensions 
//000392:         int s)
//000393:     {
//000394:         if (n <= s)
//000395:         {
//000396:             matrix_mult_serial(
//000397:                 cancellationToken,
//000398:                 n, n, n,
//000399:                 A, ax, ay, a_s,
//000400:                 B, bx, by, bs,
//000401:                 C, cx, cy, cs);
//000402:         }
//000403:         else
//000404:         {
//000405:             int n_2 = n >> 1;
//000406:             int areaSize = n_2 * n_2;
//000407:             int[] workArr = new int[areaSize * 17];
//000408:             fixed (int* work = workArr)
//000409:             {
//000410:                 int* a_cum = work;
//000411:                 int* b_cum = a_cum + areaSize;
//000412:                 int* c_cum = b_cum + areaSize;
//000413:                 int* d_cum = c_cum + areaSize;
//000414:                 int* e_cum = d_cum + areaSize;
//000415:                 int* f_cum = e_cum + areaSize;
//000416:                 int* g_cum = f_cum + areaSize;
//000417:                 int* h_cum = g_cum + areaSize;
//000418:                 int* i_cum = h_cum + areaSize;
//000419:                 int* j_cum = i_cum + areaSize;
//000420:                 int* p1 = j_cum + areaSize;
//000421:                 int* p2 = p1 + areaSize;
//000422:                 int* p3 = p2 + areaSize;
//000423:                 int* p4 = p3 + areaSize;
//000424:                 int* p5 = p4 + areaSize;
//000425:                 int* p6 = p5 + areaSize;
//000426:                 int* p7 = p6 + areaSize;
//000427: 
//000428:                 // p1 = (a11 + a22) * (b11 + b22) 
//000429:                 Task t_p1 = Task.Factory.StartNew(() =>
//000430:                 {
//000431:                     matrix_add(n_2, n_2,
//000432:                         A, ax, ay, a_s,
//000433:                         A, ax + n_2, ay + n_2, a_s,
//000434:                         a_cum, 0, 0, n_2);
//000435:                     matrix_add(n_2, n_2,
//000436:                         B, bx, by, bs,
//000437:                         B, bx + n_2, by + n_2, bs,
//000438:                         b_cum, 0, 0, n_2);
//000439:                     strassen_mult_parallel(
//000440:                         cancellationToken,
//000441:                         n_2,
//000442:                         a_cum, 0, 0, n_2,
//000443:                         b_cum, 0, 0, n_2,
//000444:                         p1, 0, 0, n_2,
//000445:                         s);
//000446:                 }, cancellationToken);
//000447: 
//000448:                 // p2 = (a21 + a22) * b11 
//000449:                 Task t_p2 = Task.Factory.StartNew(() =>
//000450:                 {
//000451:                     matrix_add(n_2, n_2,
//000452:                         A, ax + n_2, ay, a_s,
//000453:                         A, ax + n_2, ay + n_2, a_s,
//000454:                         c_cum, 0, 0, n_2);
//000455:                     strassen_mult_parallel(
//000456:                         cancellationToken,
//000457:                         n_2,
//000458:                         c_cum, 0, 0, n_2,
//000459:                         B, bx, by, bs,
//000460:                         p2, 0, 0, n_2,
//000461:                         s);
//000462:                 }, cancellationToken);
//000463: 
//000464:                 // p3 = a11 x (b12 - b22) 
//000465:                 Task t_p3 = Task.Factory.StartNew(() =>
//000466:                 {
//000467:                     matrix_sub(n_2, n_2,
//000468:                         B, bx, by + n_2, bs,
//000469:                         B, bx + n_2, by + n_2, bs,
//000470:                         d_cum, 0, 0, n_2);
//000471:                     strassen_mult_parallel(
//000472:                         cancellationToken,
//000473:                         n_2,
//000474:                         A, ax, ay, a_s,
//000475:                         d_cum, 0, 0, n_2,
//000476:                         p3, 0, 0, n_2,
//000477:                         s);
//000478:                 }, cancellationToken);
//000479: 
//000480:                 // p4 = a22 x (b21 - b11) 
//000481:                 Task t_p4 = Task.Factory.StartNew(() =>
//000482:                 {
//000483:                     matrix_sub(n_2, n_2,
//000484:                         B, bx + n_2, by, bs,
//000485:                         B, bx, by, bs,
//000486:                         e_cum, 0, 0, n_2);
//000487:                     strassen_mult_parallel(
//000488:                         cancellationToken,
//000489:                         n_2,
//000490:                         A, ax + n_2, ay + n_2, a_s,
//000491:                         e_cum, 0, 0, n_2,
//000492:                         p4, 0, 0, n_2,
//000493:                         s);
//000494:                 }, cancellationToken);
//000495: 
//000496:                 // p5 = (a11 + a12) x b22 
//000497:                 Task t_p5 = Task.Factory.StartNew(() =>
//000498:                 {
//000499:                     matrix_add(n_2, n_2,
//000500:                         A, ax, ay, a_s,
//000501:                         A, ax, ay + n_2, a_s,
//000502:                         f_cum, 0, 0, n_2);
//000503:                     strassen_mult_parallel(
//000504:                         cancellationToken,
//000505:                         n_2,
//000506:                         f_cum, 0, 0, n_2,
//000507:                         B, bx + n_2, by + n_2, bs,
//000508:                         p5, 0, 0, n_2,
//000509:                         s);
//000510:                 }, cancellationToken);
//000511: 
//000512:                 // p6 = (a21 - a11) x (b11 + b12) 
//000513:                 Task t_p6 = Task.Factory.StartNew(() =>
//000514:                 {
//000515:                     matrix_sub(n_2, n_2,
//000516:                         A, ax + n_2, ay, a_s,
//000517:                         A, ax, ay, a_s,
//000518:                         g_cum, 0, 0, n_2);
//000519:                     matrix_add(n_2, n_2,
//000520:                         B, bx, by, bs,
//000521:                         B, bx, by + n_2, bs,
//000522:                         h_cum, 0, 0, n_2);
//000523:                     strassen_mult_parallel(
//000524:                         cancellationToken,
//000525:                         n_2,
//000526:                         g_cum, 0, 0, n_2,
//000527:                         h_cum, 0, 0, n_2,
//000528:                         p6, 0, 0, n_2,
//000529:                         s);
//000530:                 }, cancellationToken);
//000531: 
//000532:                 // p7 = (a12 - a22) x (b21 + b22) 
//000533:                 Task t_p7 = Task.Factory.StartNew(() =>
//000534:                 {
//000535:                     matrix_sub(n_2, n_2,
//000536:                         A, ax, ay + n_2, a_s,
//000537:                         A, ax + n_2, ay + n_2, a_s,
//000538:                         i_cum, 0, 0, n_2);
//000539:                     matrix_add(n_2, n_2,
//000540:                         B, bx + n_2, by, bs,
//000541:                         B, bx + n_2, by + n_2, bs,
//000542:                         j_cum, 0, 0, n_2);
//000543:                     strassen_mult_parallel(
//000544:                         cancellationToken,
//000545:                         n_2,
//000546:                         i_cum, 0, 0, n_2,
//000547:                         j_cum, 0, 0, n_2,
//000548:                         p7, 0, 0, n_2,
//000549:                         s);
//000550:                 }, cancellationToken);
//000551: 
//000552:                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
//000553:                 catch (AggregateException ae)
//000554:                 {
//000555:                     ae.Flatten().Handle(e => e is TaskCanceledException);
//000556:                     cancellationToken.ThrowIfCancellationRequested();
//000557:                 }
//000558: 
//000559:                 // c11 = p1 + p4 - p5 + p7 
//000560:                 Task t_c11 = Task.Factory.StartNew(() =>
//000561:                 {
//000562:                     matrix_add(n_2, n_2,
//000563:                         p1, 0, 0, n_2,
//000564:                         p4, 0, 0, n_2,
//000565:                         C, cx, cy, cs);
//000566:                     matrix_sub(n_2, n_2,
//000567:                         C, cx, cy, cs,
//000568:                         p5, 0, 0, n_2,
//000569:                         C, cx, cy, cs);
//000570:                     matrix_add(n_2, n_2,
//000571:                         C, cx, cy, cs,
//000572:                         p7, 0, 0, n_2,
//000573:                         C, cx, cy, cs);
//000574:                 });
//000575: 
//000576:                 // c12 = p3 + p5 
//000577:                 Task t_c12 = Task.Factory.StartNew(() =>
//000578:                 {
//000579:                     matrix_add(n_2, n_2,
//000580:                         p3, 0, 0, n_2,
//000581:                         p5, 0, 0, n_2,
//000582:                         C, cx, cy + n_2, cs);
//000583:                 });
//000584: 
//000585:                 // c21 = p2 + p4 
//000586:                 Task t_c21 = Task.Factory.StartNew(() =>
//000587:                 {
//000588:                     matrix_add(n_2, n_2,
//000589:                         p2, 0, 0, n_2,
//000590:                         p4, 0, 0, n_2,
//000591:                         C, cx + n_2, cy, cs);
//000592:                 });
//000593: 
//000594:                 // c22 = p1 + p3 - p2 + p6 
//000595:                 Task t_c22 = Task.Factory.StartNew(() =>
//000596:                 {
//000597:                     matrix_add(n_2, n_2,
//000598:                         p1, 0, 0, n_2,
//000599:                         p3, 0, 0, n_2,
//000600:                         C, cx + n_2, cy + n_2, cs);
//000601:                     matrix_sub(n_2, n_2,
//000602:                         C, cx + n_2, cy + n_2, cs,
//000603:                         p2, 0, 0, n_2,
//000604:                         C, cx + n_2, cy + n_2, cs);
//000605:                     matrix_add(n_2, n_2,
//000606:                         C, cx + n_2, cy + n_2, cs,
//000607:                         p6, 0, 0, n_2,
//000608:                         C, cx + n_2, cy + n_2, cs);
//000609:                 });
//000610: 
//000611:                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
//000612:             }
//000613:         }
//000614:     }
//000615: }
    IL_0000:  newobj     instance void Matrix/'<>c__DisplayClass2'::.ctor()
    IL_0005:  stloc.2
    IL_0006:  ldloc.2
    IL_0007:  ldarg.2
    IL_0008:  stfld      int32 Matrix/'<>c__DisplayClass2'::m
    IL_000d:  ldloc.2
    IL_000e:  ldarg.3
    IL_000f:  stfld      int32 Matrix/'<>c__DisplayClass2'::n
    IL_0014:  ldloc.2
    IL_0015:  ldarg.s    A
    IL_0017:  stfld      int32* Matrix/'<>c__DisplayClass2'::A
    IL_001c:  ldloc.2
    IL_001d:  ldarg.s    ax
    IL_001f:  stfld      int32 Matrix/'<>c__DisplayClass2'::ax
    IL_0024:  ldloc.2
    IL_0025:  ldarg.s    ay
    IL_0027:  stfld      int32 Matrix/'<>c__DisplayClass2'::ay
    IL_002c:  ldloc.2
    IL_002d:  ldarg.s    a_s
    IL_002f:  stfld      int32 Matrix/'<>c__DisplayClass2'::a_s
    IL_0034:  ldloc.2
    IL_0035:  ldarg.s    B
    IL_0037:  stfld      int32* Matrix/'<>c__DisplayClass2'::B
    IL_003c:  ldloc.2
    IL_003d:  ldarg.s    bx
    IL_003f:  stfld      int32 Matrix/'<>c__DisplayClass2'::bx
    IL_0044:  ldloc.2
    IL_0045:  ldarg.s    by
    IL_0047:  stfld      int32 Matrix/'<>c__DisplayClass2'::by
    IL_004c:  ldloc.2
    IL_004d:  ldarg.s    bs
    IL_004f:  stfld      int32 Matrix/'<>c__DisplayClass2'::bs
    IL_0054:  ldloc.2
    IL_0055:  ldarg.s    C
    IL_0057:  stfld      int32* Matrix/'<>c__DisplayClass2'::C
    IL_005c:  ldloc.2
    IL_005d:  ldarg.s    cx
    IL_005f:  stfld      int32 Matrix/'<>c__DisplayClass2'::cx
    IL_0064:  ldloc.2
    IL_0065:  ldarg.s    cy
    IL_0067:  stfld      int32 Matrix/'<>c__DisplayClass2'::cy
    IL_006c:  ldloc.2
    IL_006d:  ldarg.s    cs
    IL_006f:  stfld      int32 Matrix/'<>c__DisplayClass2'::cs
//000181:     {
    IL_0074:  nop
//000182:         ParallelOptions options = new ParallelOptions { CancellationToken = cancellationToken };
    IL_0075:  newobj     instance void [mscorlib]System.Threading.Tasks.ParallelOptions::.ctor()
    IL_007a:  stloc.1
    IL_007b:  ldloc.1
    IL_007c:  ldarg.0
    IL_007d:  callvirt   instance void [mscorlib]System.Threading.Tasks.ParallelOptions::set_CancellationToken(valuetype [mscorlib]System.Threading.CancellationToken)
    IL_0082:  nop
    IL_0083:  ldloc.1
    IL_0084:  stloc.0
//000183:         Parallel.For(0, l, options, i =>
    IL_0085:  ldc.i4.0
    IL_0086:  ldarg.1
    IL_0087:  ldloc.0
    IL_0088:  ldloc.2
    IL_0089:  ldftn      instance void Matrix/'<>c__DisplayClass2'::'<matrix_mult_parallel>b__1'(int32)
    IL_008f:  newobj     instance void class [mscorlib]System.Action`1<int32>::.ctor(object,
                                                                                     native int)
    IL_0094:  call       valuetype [mscorlib]System.Threading.Tasks.ParallelLoopResult [mscorlib]System.Threading.Tasks.Parallel::For(int32,
                                                                                                                                      int32,
                                                                                                                                      class [mscorlib]System.Threading.Tasks.ParallelOptions,
                                                                                                                                      class [mscorlib]System.Action`1<int32>)
    IL_0099:  pop
//000184:         {
//000185:             for (int j = 0; j < n; j++)
//000186:             {
//000187:                 int temp = 0;
//000188:                 for (int k = 0; k < m; k++)
//000189:                 {
//000190:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
//000191:                 }
//000192:                 C[(i + cx) * cs + j + cy] = temp;
//000193:             }
//000194:         });
//000195:     }
    IL_009a:  nop
    IL_009b:  ret
  } // end of method Matrix::matrix_mult_parallel

  .method private hidebysig static void  strassen_mult_serial(valuetype [mscorlib]System.Threading.CancellationToken cancellationToken,
                                                              int32 n,
                                                              int32* A,
                                                              int32 ax,
                                                              int32 ay,
                                                              int32 a_s,
                                                              int32* B,
                                                              int32 bx,
                                                              int32 by,
                                                              int32 bs,
                                                              int32* C,
                                                              int32 cx,
                                                              int32 cy,
                                                              int32 cs,
                                                              int32 s) cil managed
  {
    // Code size       926 (0x39e)
    .maxstack  16
    .locals init ([0] int32 n_2,
             [1] int32[] workArr,
             [2] int32& pinned work,
             [3] int32* a_cum,
             [4] int32* b_cum,
             [5] int32* p1,
             [6] int32* p2,
             [7] int32* p3,
             [8] int32* p4,
             [9] int32* p5,
             [10] int32* p6,
             [11] int32* p7,
             [12] bool CS$4$0000,
             [13] int32[] CS$0$0001)
//000196: 
//000197:     private static void strassen_mult_serial(
//000198:         CancellationToken cancellationToken, 
//000199:         // dimensions of A, B, and C submatrices 
//000200:         int n,
//000201:         // (ax,ay) = origin of A submatrix for multiplicand 
//000202:         int* A, int ax, int ay, int a_s,
//000203:         // (bx,by) = origin of B submatrix for multiplicand 
//000204:         int* B, int bx, int by, int bs,
//000205:         // (cx,cy) = origin of C submatrix for result 
//000206:         int* C, int cx, int cy, int cs,
//000207:         // Strassen's recursion limit for array dimensions 
//000208:         int s)
//000209:     {
    IL_0000:  nop
//000210:         if (n <= s)
    IL_0001:  ldarg.1
    IL_0002:  ldarg.s    s
    IL_0004:  cgt
    IL_0006:  stloc.s    CS$4$0000
//000211:         {
//000212:             matrix_mult_serial(
//000213:                 cancellationToken,
//000214:                 n, n, n,
//000215:                 A, ax, ay, a_s,
//000216:                 B, bx, by, bs,
//000217:                 C, cx, cy, cs);
//000218:         }
//000219:         else
//000220:         {
//000221:             int n_2 = n >> 1;
//000222:             int[] workArr = new int[n_2 * n_2 * 9];
//000223:             fixed (int* work = workArr)
//000224:             {
//000225:                 int* a_cum = work;
//000226:                 int* b_cum = a_cum + n_2 * n_2;
//000227:                 int* p1 = b_cum + n_2 * n_2;
//000228:                 int* p2 = p1 + n_2 * n_2;
//000229:                 int* p3 = p2 + n_2 * n_2;
//000230:                 int* p4 = p3 + n_2 * n_2;
//000231:                 int* p5 = p4 + n_2 * n_2;
//000232:                 int* p6 = p5 + n_2 * n_2;
//000233:                 int* p7 = p6 + n_2 * n_2;
//000234: 
//000235:                 // p1 = (a11 + a22) * (b11 + b22) 
//000236:                 matrix_add(n_2, n_2,
//000237:                     A, ax, ay, a_s,
//000238:                     A, ax + n_2, ay + n_2, a_s,
//000239:                     a_cum, 0, 0, n_2);
//000240:                 matrix_add(n_2, n_2,
//000241:                     B, bx, by, bs,
//000242:                     B, bx + n_2, by + n_2, bs,
//000243:                     b_cum, 0, 0, n_2);
//000244:                 strassen_mult_serial(
//000245:                     cancellationToken,
//000246:                     n_2,
//000247:                     a_cum, 0, 0, n_2,
//000248:                     b_cum, 0, 0, n_2,
//000249:                     p1, 0, 0, n_2,
//000250:                     s);
//000251: 
//000252:                 // p2 = (a21 + a22) * b11 
//000253:                 matrix_add(n_2, n_2,
//000254:                     A, ax + n_2, ay, a_s,
//000255:                     A, ax + n_2, ay + n_2, a_s,
//000256:                     a_cum, 0, 0, n_2);
//000257:                 strassen_mult_serial(
//000258:                     cancellationToken,
//000259:                     n_2,
//000260:                     a_cum, 0, 0, n_2,
//000261:                     B, bx, by, bs,
//000262:                     p2, 0, 0, n_2,
//000263:                     s);
//000264: 
//000265:                 // p3 = a11 x (b12 - b22) 
//000266:                 matrix_sub(n_2, n_2,
//000267:                     B, bx, by + n_2, bs,
//000268:                     B, bx + n_2, by + n_2, bs,
//000269:                     b_cum, 0, 0, n_2);
//000270:                 strassen_mult_serial(
//000271:                     cancellationToken,
//000272:                     n_2,
//000273:                     A, ax, ay, a_s,
//000274:                     b_cum, 0, 0, n_2,
//000275:                     p3, 0, 0, n_2,
//000276:                     s);
//000277: 
//000278:                 // p4 = a22 x (b21 - b11) 
//000279:                 matrix_sub(n_2, n_2,
//000280:                     B, bx + n_2, by, bs,
//000281:                     B, bx, by, bs,
//000282:                     b_cum, 0, 0, n_2);
//000283:                 strassen_mult_serial(
//000284:                     cancellationToken,
//000285:                     n_2,
//000286:                     A, ax + n_2, ay + n_2, a_s,
//000287:                     b_cum, 0, 0, n_2,
//000288:                     p4, 0, 0, n_2,
//000289:                     s);
//000290: 
//000291:                 // p5 = (a11 + a12) x b22 
//000292:                 matrix_add(n_2, n_2,
//000293:                     A, ax, ay, a_s,
//000294:                     A, ax, ay + n_2, a_s,
//000295:                     a_cum, 0, 0, n_2);
//000296:                 strassen_mult_serial(
//000297:                     cancellationToken,
//000298:                     n_2,
//000299:                     a_cum, 0, 0, n_2,
//000300:                     B, bx + n_2, by + n_2, bs,
//000301:                     p5, 0, 0, n_2,
//000302:                     s);
//000303: 
//000304:                 // p6 = (a21 - a11) x (b11 + b12) 
//000305:                 matrix_sub(n_2, n_2,
//000306:                     A, ax + n_2, ay, a_s,
//000307:                     A, ax, ay, a_s,
//000308:                     a_cum, 0, 0, n_2);
//000309:                 matrix_add(n_2, n_2,
//000310:                     B, bx, by, bs,
//000311:                     B, bx, by + n_2, bs,
//000312:                     b_cum, 0, 0, n_2);
//000313:                 strassen_mult_serial(
//000314:                     cancellationToken,
//000315:                     n_2,
//000316:                     a_cum, 0, 0, n_2,
//000317:                     b_cum, 0, 0, n_2,
//000318:                     p6, 0, 0, n_2,
//000319:                     s);
//000320: 
//000321:                 // p7 = (a12 - a22) x (b21 + b22) 
//000322:                 matrix_sub(n_2, n_2,
//000323:                     A, ax, ay + n_2, a_s,
//000324:                     A, ax + n_2, ay + n_2, a_s,
//000325:                     a_cum, 0, 0, n_2);
//000326:                 matrix_add(n_2, n_2,
//000327:                     B, bx + n_2, by, bs,
//000328:                     B, bx + n_2, by + n_2, bs,
//000329:                     b_cum, 0, 0, n_2);
//000330:                 strassen_mult_serial(
//000331:                     cancellationToken,
//000332:                     n_2,
//000333:                     a_cum, 0, 0, n_2,
//000334:                     b_cum, 0, 0, n_2,
//000335:                     p7, 0, 0, n_2,
//000336:                     s);
//000337: 
//000338:                 // c11 = p1 + p4 - p5 + p7 
//000339:                 matrix_add(n_2, n_2,
//000340:                     p1, 0, 0, n_2,
//000341:                     p4, 0, 0, n_2,
//000342:                     C, cx, cy, cs);
//000343:                 matrix_sub(n_2, n_2,
//000344:                     C, cx, cy, cs,
//000345:                     p5, 0, 0, n_2,
//000346:                     C, cx, cy, cs);
//000347:                 matrix_add(n_2, n_2,
//000348:                     C, cx, cy, cs,
//000349:                     p7, 0, 0, n_2,
//000350:                     C, cx, cy, cs);
//000351: 
//000352:                 // c12 = p3 + p5 
//000353:                 matrix_add(n_2, n_2,
//000354:                     p3, 0, 0, n_2,
//000355:                     p5, 0, 0, n_2,
//000356:                     C, cx, cy + n_2, cs);
//000357: 
//000358:                 // c21 = p2 + p4 
//000359:                 matrix_add(n_2, n_2,
//000360:                     p2, 0, 0, n_2,
//000361:                     p4, 0, 0, n_2,
//000362:                     C, cx + n_2, cy, cs);
//000363: 
//000364:                 // c22 = p1 + p3 - p2 + p6 
//000365:                 matrix_add(n_2, n_2,
//000366:                     p1, 0, 0, n_2,
//000367:                     p3, 0, 0, n_2,
//000368:                     C, cx + n_2, cy + n_2, cs);
//000369:                 matrix_sub(n_2, n_2,
//000370:                     C, cx + n_2, cy + n_2, cs,
//000371:                     p2, 0, 0, n_2,
//000372:                     C, cx + n_2, cy + n_2, cs);
//000373:                 matrix_add(n_2, n_2,
//000374:                     C, cx + n_2, cy + n_2, cs,
//000375:                     p6, 0, 0, n_2,
//000376:                     C, cx + n_2, cy + n_2, cs);
//000377:             }
//000378:         }
//000379:     }
//000380: 
//000381:     private static void strassen_mult_parallel(
//000382:         CancellationToken cancellationToken, 
//000383:         // dimensions of A, B, and C submatrices 
//000384:         int n,
//000385:         // (ax,ay) = origin of A submatrix for multiplicand 
//000386:         int* A, int ax, int ay, int a_s,
//000387:         // (bx,by) = origin of B submatrix for multiplicand 
//000388:         int* B, int bx, int by, int bs,
//000389:         // (cx,cy) = origin of C submatrix for result 
//000390:         int* C, int cx, int cy, int cs,
//000391:         // Strassen's recursion limit for array dimensions 
//000392:         int s)
//000393:     {
//000394:         if (n <= s)
//000395:         {
//000396:             matrix_mult_serial(
//000397:                 cancellationToken,
//000398:                 n, n, n,
//000399:                 A, ax, ay, a_s,
//000400:                 B, bx, by, bs,
//000401:                 C, cx, cy, cs);
//000402:         }
//000403:         else
//000404:         {
//000405:             int n_2 = n >> 1;
//000406:             int areaSize = n_2 * n_2;
//000407:             int[] workArr = new int[areaSize * 17];
//000408:             fixed (int* work = workArr)
//000409:             {
//000410:                 int* a_cum = work;
//000411:                 int* b_cum = a_cum + areaSize;
//000412:                 int* c_cum = b_cum + areaSize;
//000413:                 int* d_cum = c_cum + areaSize;
//000414:                 int* e_cum = d_cum + areaSize;
//000415:                 int* f_cum = e_cum + areaSize;
//000416:                 int* g_cum = f_cum + areaSize;
//000417:                 int* h_cum = g_cum + areaSize;
//000418:                 int* i_cum = h_cum + areaSize;
//000419:                 int* j_cum = i_cum + areaSize;
//000420:                 int* p1 = j_cum + areaSize;
//000421:                 int* p2 = p1 + areaSize;
//000422:                 int* p3 = p2 + areaSize;
//000423:                 int* p4 = p3 + areaSize;
//000424:                 int* p5 = p4 + areaSize;
//000425:                 int* p6 = p5 + areaSize;
//000426:                 int* p7 = p6 + areaSize;
//000427: 
//000428:                 // p1 = (a11 + a22) * (b11 + b22) 
//000429:                 Task t_p1 = Task.Factory.StartNew(() =>
//000430:                 {
//000431:                     matrix_add(n_2, n_2,
//000432:                         A, ax, ay, a_s,
//000433:                         A, ax + n_2, ay + n_2, a_s,
//000434:                         a_cum, 0, 0, n_2);
//000435:                     matrix_add(n_2, n_2,
//000436:                         B, bx, by, bs,
//000437:                         B, bx + n_2, by + n_2, bs,
//000438:                         b_cum, 0, 0, n_2);
//000439:                     strassen_mult_parallel(
//000440:                         cancellationToken,
//000441:                         n_2,
//000442:                         a_cum, 0, 0, n_2,
//000443:                         b_cum, 0, 0, n_2,
//000444:                         p1, 0, 0, n_2,
//000445:                         s);
//000446:                 }, cancellationToken);
//000447: 
//000448:                 // p2 = (a21 + a22) * b11 
//000449:                 Task t_p2 = Task.Factory.StartNew(() =>
//000450:                 {
//000451:                     matrix_add(n_2, n_2,
//000452:                         A, ax + n_2, ay, a_s,
//000453:                         A, ax + n_2, ay + n_2, a_s,
//000454:                         c_cum, 0, 0, n_2);
//000455:                     strassen_mult_parallel(
//000456:                         cancellationToken,
//000457:                         n_2,
//000458:                         c_cum, 0, 0, n_2,
//000459:                         B, bx, by, bs,
//000460:                         p2, 0, 0, n_2,
//000461:                         s);
//000462:                 }, cancellationToken);
//000463: 
//000464:                 // p3 = a11 x (b12 - b22) 
//000465:                 Task t_p3 = Task.Factory.StartNew(() =>
//000466:                 {
//000467:                     matrix_sub(n_2, n_2,
//000468:                         B, bx, by + n_2, bs,
//000469:                         B, bx + n_2, by + n_2, bs,
//000470:                         d_cum, 0, 0, n_2);
//000471:                     strassen_mult_parallel(
//000472:                         cancellationToken,
//000473:                         n_2,
//000474:                         A, ax, ay, a_s,
//000475:                         d_cum, 0, 0, n_2,
//000476:                         p3, 0, 0, n_2,
//000477:                         s);
//000478:                 }, cancellationToken);
//000479: 
//000480:                 // p4 = a22 x (b21 - b11) 
//000481:                 Task t_p4 = Task.Factory.StartNew(() =>
//000482:                 {
//000483:                     matrix_sub(n_2, n_2,
//000484:                         B, bx + n_2, by, bs,
//000485:                         B, bx, by, bs,
//000486:                         e_cum, 0, 0, n_2);
//000487:                     strassen_mult_parallel(
//000488:                         cancellationToken,
//000489:                         n_2,
//000490:                         A, ax + n_2, ay + n_2, a_s,
//000491:                         e_cum, 0, 0, n_2,
//000492:                         p4, 0, 0, n_2,
//000493:                         s);
//000494:                 }, cancellationToken);
//000495: 
//000496:                 // p5 = (a11 + a12) x b22 
//000497:                 Task t_p5 = Task.Factory.StartNew(() =>
//000498:                 {
//000499:                     matrix_add(n_2, n_2,
//000500:                         A, ax, ay, a_s,
//000501:                         A, ax, ay + n_2, a_s,
//000502:                         f_cum, 0, 0, n_2);
//000503:                     strassen_mult_parallel(
//000504:                         cancellationToken,
//000505:                         n_2,
//000506:                         f_cum, 0, 0, n_2,
//000507:                         B, bx + n_2, by + n_2, bs,
//000508:                         p5, 0, 0, n_2,
//000509:                         s);
//000510:                 }, cancellationToken);
//000511: 
//000512:                 // p6 = (a21 - a11) x (b11 + b12) 
//000513:                 Task t_p6 = Task.Factory.StartNew(() =>
//000514:                 {
//000515:                     matrix_sub(n_2, n_2,
//000516:                         A, ax + n_2, ay, a_s,
//000517:                         A, ax, ay, a_s,
//000518:                         g_cum, 0, 0, n_2);
//000519:                     matrix_add(n_2, n_2,
//000520:                         B, bx, by, bs,
//000521:                         B, bx, by + n_2, bs,
//000522:                         h_cum, 0, 0, n_2);
//000523:                     strassen_mult_parallel(
//000524:                         cancellationToken,
//000525:                         n_2,
//000526:                         g_cum, 0, 0, n_2,
//000527:                         h_cum, 0, 0, n_2,
//000528:                         p6, 0, 0, n_2,
//000529:                         s);
//000530:                 }, cancellationToken);
//000531: 
//000532:                 // p7 = (a12 - a22) x (b21 + b22) 
//000533:                 Task t_p7 = Task.Factory.StartNew(() =>
//000534:                 {
//000535:                     matrix_sub(n_2, n_2,
//000536:                         A, ax, ay + n_2, a_s,
//000537:                         A, ax + n_2, ay + n_2, a_s,
//000538:                         i_cum, 0, 0, n_2);
//000539:                     matrix_add(n_2, n_2,
//000540:                         B, bx + n_2, by, bs,
//000541:                         B, bx + n_2, by + n_2, bs,
//000542:                         j_cum, 0, 0, n_2);
//000543:                     strassen_mult_parallel(
//000544:                         cancellationToken,
//000545:                         n_2,
//000546:                         i_cum, 0, 0, n_2,
//000547:                         j_cum, 0, 0, n_2,
//000548:                         p7, 0, 0, n_2,
//000549:                         s);
//000550:                 }, cancellationToken);
//000551: 
//000552:                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
//000553:                 catch (AggregateException ae)
//000554:                 {
//000555:                     ae.Flatten().Handle(e => e is TaskCanceledException);
//000556:                     cancellationToken.ThrowIfCancellationRequested();
//000557:                 }
//000558: 
//000559:                 // c11 = p1 + p4 - p5 + p7 
//000560:                 Task t_c11 = Task.Factory.StartNew(() =>
//000561:                 {
//000562:                     matrix_add(n_2, n_2,
//000563:                         p1, 0, 0, n_2,
//000564:                         p4, 0, 0, n_2,
//000565:                         C, cx, cy, cs);
//000566:                     matrix_sub(n_2, n_2,
//000567:                         C, cx, cy, cs,
//000568:                         p5, 0, 0, n_2,
//000569:                         C, cx, cy, cs);
//000570:                     matrix_add(n_2, n_2,
//000571:                         C, cx, cy, cs,
//000572:                         p7, 0, 0, n_2,
//000573:                         C, cx, cy, cs);
//000574:                 });
//000575: 
//000576:                 // c12 = p3 + p5 
//000577:                 Task t_c12 = Task.Factory.StartNew(() =>
//000578:                 {
//000579:                     matrix_add(n_2, n_2,
//000580:                         p3, 0, 0, n_2,
//000581:                         p5, 0, 0, n_2,
//000582:                         C, cx, cy + n_2, cs);
//000583:                 });
//000584: 
//000585:                 // c21 = p2 + p4 
//000586:                 Task t_c21 = Task.Factory.StartNew(() =>
//000587:                 {
//000588:                     matrix_add(n_2, n_2,
//000589:                         p2, 0, 0, n_2,
//000590:                         p4, 0, 0, n_2,
//000591:                         C, cx + n_2, cy, cs);
//000592:                 });
//000593: 
//000594:                 // c22 = p1 + p3 - p2 + p6 
//000595:                 Task t_c22 = Task.Factory.StartNew(() =>
//000596:                 {
//000597:                     matrix_add(n_2, n_2,
//000598:                         p1, 0, 0, n_2,
//000599:                         p3, 0, 0, n_2,
//000600:                         C, cx + n_2, cy + n_2, cs);
//000601:                     matrix_sub(n_2, n_2,
//000602:                         C, cx + n_2, cy + n_2, cs,
//000603:                         p2, 0, 0, n_2,
//000604:                         C, cx + n_2, cy + n_2, cs);
//000605:                     matrix_add(n_2, n_2,
//000606:                         C, cx + n_2, cy + n_2, cs,
//000607:                         p6, 0, 0, n_2,
//000608:                         C, cx + n_2, cy + n_2, cs);
//000609:                 });
//000610: 
//000611:                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
//000612:             }
//000613:         }
//000614:     }
//000615: }
    IL_0008:  ldloc.s    CS$4$0000
    IL_000a:  brtrue.s   IL_0033

//000211:         {
    IL_000c:  nop
//000212:             matrix_mult_serial(
    IL_000d:  ldarg.0
    IL_000e:  ldarg.1
    IL_000f:  ldarg.1
    IL_0010:  ldarg.1
    IL_0011:  ldarg.2
    IL_0012:  ldarg.3
    IL_0013:  ldarg.s    ay
    IL_0015:  ldarg.s    a_s
    IL_0017:  ldarg.s    B
    IL_0019:  ldarg.s    bx
    IL_001b:  ldarg.s    by
    IL_001d:  ldarg.s    bs
    IL_001f:  ldarg.s    C
    IL_0021:  ldarg.s    cx
    IL_0023:  ldarg.s    cy
    IL_0025:  ldarg.s    cs
    IL_0027:  call       void Matrix::matrix_mult_serial(valuetype [mscorlib]System.Threading.CancellationToken,
                                                         int32,
                                                         int32,
                                                         int32,
                                                         int32*,
                                                         int32,
                                                         int32,
                                                         int32,
                                                         int32*,
                                                         int32,
                                                         int32,
                                                         int32,
                                                         int32*,
                                                         int32,
                                                         int32,
                                                         int32)
    IL_002c:  nop
//000213:                 cancellationToken,
//000214:                 n, n, n,
//000215:                 A, ax, ay, a_s,
//000216:                 B, bx, by, bs,
//000217:                 C, cx, cy, cs);
//000218:         }
    IL_002d:  nop
//000219:         else
//000220:         {
//000221:             int n_2 = n >> 1;
//000222:             int[] workArr = new int[n_2 * n_2 * 9];
//000223:             fixed (int* work = workArr)
//000224:             {
//000225:                 int* a_cum = work;
//000226:                 int* b_cum = a_cum + n_2 * n_2;
//000227:                 int* p1 = b_cum + n_2 * n_2;
//000228:                 int* p2 = p1 + n_2 * n_2;
//000229:                 int* p3 = p2 + n_2 * n_2;
//000230:                 int* p4 = p3 + n_2 * n_2;
//000231:                 int* p5 = p4 + n_2 * n_2;
//000232:                 int* p6 = p5 + n_2 * n_2;
//000233:                 int* p7 = p6 + n_2 * n_2;
//000234: 
//000235:                 // p1 = (a11 + a22) * (b11 + b22) 
//000236:                 matrix_add(n_2, n_2,
//000237:                     A, ax, ay, a_s,
//000238:                     A, ax + n_2, ay + n_2, a_s,
//000239:                     a_cum, 0, 0, n_2);
//000240:                 matrix_add(n_2, n_2,
//000241:                     B, bx, by, bs,
//000242:                     B, bx + n_2, by + n_2, bs,
//000243:                     b_cum, 0, 0, n_2);
//000244:                 strassen_mult_serial(
//000245:                     cancellationToken,
//000246:                     n_2,
//000247:                     a_cum, 0, 0, n_2,
//000248:                     b_cum, 0, 0, n_2,
//000249:                     p1, 0, 0, n_2,
//000250:                     s);
//000251: 
//000252:                 // p2 = (a21 + a22) * b11 
//000253:                 matrix_add(n_2, n_2,
//000254:                     A, ax + n_2, ay, a_s,
//000255:                     A, ax + n_2, ay + n_2, a_s,
//000256:                     a_cum, 0, 0, n_2);
//000257:                 strassen_mult_serial(
//000258:                     cancellationToken,
//000259:                     n_2,
//000260:                     a_cum, 0, 0, n_2,
//000261:                     B, bx, by, bs,
//000262:                     p2, 0, 0, n_2,
//000263:                     s);
//000264: 
//000265:                 // p3 = a11 x (b12 - b22) 
//000266:                 matrix_sub(n_2, n_2,
//000267:                     B, bx, by + n_2, bs,
//000268:                     B, bx + n_2, by + n_2, bs,
//000269:                     b_cum, 0, 0, n_2);
//000270:                 strassen_mult_serial(
//000271:                     cancellationToken,
//000272:                     n_2,
//000273:                     A, ax, ay, a_s,
//000274:                     b_cum, 0, 0, n_2,
//000275:                     p3, 0, 0, n_2,
//000276:                     s);
//000277: 
//000278:                 // p4 = a22 x (b21 - b11) 
//000279:                 matrix_sub(n_2, n_2,
//000280:                     B, bx + n_2, by, bs,
//000281:                     B, bx, by, bs,
//000282:                     b_cum, 0, 0, n_2);
//000283:                 strassen_mult_serial(
//000284:                     cancellationToken,
//000285:                     n_2,
//000286:                     A, ax + n_2, ay + n_2, a_s,
//000287:                     b_cum, 0, 0, n_2,
//000288:                     p4, 0, 0, n_2,
//000289:                     s);
//000290: 
//000291:                 // p5 = (a11 + a12) x b22 
//000292:                 matrix_add(n_2, n_2,
//000293:                     A, ax, ay, a_s,
//000294:                     A, ax, ay + n_2, a_s,
//000295:                     a_cum, 0, 0, n_2);
//000296:                 strassen_mult_serial(
//000297:                     cancellationToken,
//000298:                     n_2,
//000299:                     a_cum, 0, 0, n_2,
//000300:                     B, bx + n_2, by + n_2, bs,
//000301:                     p5, 0, 0, n_2,
//000302:                     s);
//000303: 
//000304:                 // p6 = (a21 - a11) x (b11 + b12) 
//000305:                 matrix_sub(n_2, n_2,
//000306:                     A, ax + n_2, ay, a_s,
//000307:                     A, ax, ay, a_s,
//000308:                     a_cum, 0, 0, n_2);
//000309:                 matrix_add(n_2, n_2,
//000310:                     B, bx, by, bs,
//000311:                     B, bx, by + n_2, bs,
//000312:                     b_cum, 0, 0, n_2);
//000313:                 strassen_mult_serial(
//000314:                     cancellationToken,
//000315:                     n_2,
//000316:                     a_cum, 0, 0, n_2,
//000317:                     b_cum, 0, 0, n_2,
//000318:                     p6, 0, 0, n_2,
//000319:                     s);
//000320: 
//000321:                 // p7 = (a12 - a22) x (b21 + b22) 
//000322:                 matrix_sub(n_2, n_2,
//000323:                     A, ax, ay + n_2, a_s,
//000324:                     A, ax + n_2, ay + n_2, a_s,
//000325:                     a_cum, 0, 0, n_2);
//000326:                 matrix_add(n_2, n_2,
//000327:                     B, bx + n_2, by, bs,
//000328:                     B, bx + n_2, by + n_2, bs,
//000329:                     b_cum, 0, 0, n_2);
//000330:                 strassen_mult_serial(
//000331:                     cancellationToken,
//000332:                     n_2,
//000333:                     a_cum, 0, 0, n_2,
//000334:                     b_cum, 0, 0, n_2,
//000335:                     p7, 0, 0, n_2,
//000336:                     s);
//000337: 
//000338:                 // c11 = p1 + p4 - p5 + p7 
//000339:                 matrix_add(n_2, n_2,
//000340:                     p1, 0, 0, n_2,
//000341:                     p4, 0, 0, n_2,
//000342:                     C, cx, cy, cs);
//000343:                 matrix_sub(n_2, n_2,
//000344:                     C, cx, cy, cs,
//000345:                     p5, 0, 0, n_2,
//000346:                     C, cx, cy, cs);
//000347:                 matrix_add(n_2, n_2,
//000348:                     C, cx, cy, cs,
//000349:                     p7, 0, 0, n_2,
//000350:                     C, cx, cy, cs);
//000351: 
//000352:                 // c12 = p3 + p5 
//000353:                 matrix_add(n_2, n_2,
//000354:                     p3, 0, 0, n_2,
//000355:                     p5, 0, 0, n_2,
//000356:                     C, cx, cy + n_2, cs);
//000357: 
//000358:                 // c21 = p2 + p4 
//000359:                 matrix_add(n_2, n_2,
//000360:                     p2, 0, 0, n_2,
//000361:                     p4, 0, 0, n_2,
//000362:                     C, cx + n_2, cy, cs);
//000363: 
//000364:                 // c22 = p1 + p3 - p2 + p6 
//000365:                 matrix_add(n_2, n_2,
//000366:                     p1, 0, 0, n_2,
//000367:                     p3, 0, 0, n_2,
//000368:                     C, cx + n_2, cy + n_2, cs);
//000369:                 matrix_sub(n_2, n_2,
//000370:                     C, cx + n_2, cy + n_2, cs,
//000371:                     p2, 0, 0, n_2,
//000372:                     C, cx + n_2, cy + n_2, cs);
//000373:                 matrix_add(n_2, n_2,
//000374:                     C, cx + n_2, cy + n_2, cs,
//000375:                     p6, 0, 0, n_2,
//000376:                     C, cx + n_2, cy + n_2, cs);
//000377:             }
//000378:         }
//000379:     }
//000380: 
//000381:     private static void strassen_mult_parallel(
//000382:         CancellationToken cancellationToken, 
//000383:         // dimensions of A, B, and C submatrices 
//000384:         int n,
//000385:         // (ax,ay) = origin of A submatrix for multiplicand 
//000386:         int* A, int ax, int ay, int a_s,
//000387:         // (bx,by) = origin of B submatrix for multiplicand 
//000388:         int* B, int bx, int by, int bs,
//000389:         // (cx,cy) = origin of C submatrix for result 
//000390:         int* C, int cx, int cy, int cs,
//000391:         // Strassen's recursion limit for array dimensions 
//000392:         int s)
//000393:     {
//000394:         if (n <= s)
//000395:         {
//000396:             matrix_mult_serial(
//000397:                 cancellationToken,
//000398:                 n, n, n,
//000399:                 A, ax, ay, a_s,
//000400:                 B, bx, by, bs,
//000401:                 C, cx, cy, cs);
//000402:         }
//000403:         else
//000404:         {
//000405:             int n_2 = n >> 1;
//000406:             int areaSize = n_2 * n_2;
//000407:             int[] workArr = new int[areaSize * 17];
//000408:             fixed (int* work = workArr)
//000409:             {
//000410:                 int* a_cum = work;
//000411:                 int* b_cum = a_cum + areaSize;
//000412:                 int* c_cum = b_cum + areaSize;
//000413:                 int* d_cum = c_cum + areaSize;
//000414:                 int* e_cum = d_cum + areaSize;
//000415:                 int* f_cum = e_cum + areaSize;
//000416:                 int* g_cum = f_cum + areaSize;
//000417:                 int* h_cum = g_cum + areaSize;
//000418:                 int* i_cum = h_cum + areaSize;
//000419:                 int* j_cum = i_cum + areaSize;
//000420:                 int* p1 = j_cum + areaSize;
//000421:                 int* p2 = p1 + areaSize;
//000422:                 int* p3 = p2 + areaSize;
//000423:                 int* p4 = p3 + areaSize;
//000424:                 int* p5 = p4 + areaSize;
//000425:                 int* p6 = p5 + areaSize;
//000426:                 int* p7 = p6 + areaSize;
//000427: 
//000428:                 // p1 = (a11 + a22) * (b11 + b22) 
//000429:                 Task t_p1 = Task.Factory.StartNew(() =>
//000430:                 {
//000431:                     matrix_add(n_2, n_2,
//000432:                         A, ax, ay, a_s,
//000433:                         A, ax + n_2, ay + n_2, a_s,
//000434:                         a_cum, 0, 0, n_2);
//000435:                     matrix_add(n_2, n_2,
//000436:                         B, bx, by, bs,
//000437:                         B, bx + n_2, by + n_2, bs,
//000438:                         b_cum, 0, 0, n_2);
//000439:                     strassen_mult_parallel(
//000440:                         cancellationToken,
//000441:                         n_2,
//000442:                         a_cum, 0, 0, n_2,
//000443:                         b_cum, 0, 0, n_2,
//000444:                         p1, 0, 0, n_2,
//000445:                         s);
//000446:                 }, cancellationToken);
//000447: 
//000448:                 // p2 = (a21 + a22) * b11 
//000449:                 Task t_p2 = Task.Factory.StartNew(() =>
//000450:                 {
//000451:                     matrix_add(n_2, n_2,
//000452:                         A, ax + n_2, ay, a_s,
//000453:                         A, ax + n_2, ay + n_2, a_s,
//000454:                         c_cum, 0, 0, n_2);
//000455:                     strassen_mult_parallel(
//000456:                         cancellationToken,
//000457:                         n_2,
//000458:                         c_cum, 0, 0, n_2,
//000459:                         B, bx, by, bs,
//000460:                         p2, 0, 0, n_2,
//000461:                         s);
//000462:                 }, cancellationToken);
//000463: 
//000464:                 // p3 = a11 x (b12 - b22) 
//000465:                 Task t_p3 = Task.Factory.StartNew(() =>
//000466:                 {
//000467:                     matrix_sub(n_2, n_2,
//000468:                         B, bx, by + n_2, bs,
//000469:                         B, bx + n_2, by + n_2, bs,
//000470:                         d_cum, 0, 0, n_2);
//000471:                     strassen_mult_parallel(
//000472:                         cancellationToken,
//000473:                         n_2,
//000474:                         A, ax, ay, a_s,
//000475:                         d_cum, 0, 0, n_2,
//000476:                         p3, 0, 0, n_2,
//000477:                         s);
//000478:                 }, cancellationToken);
//000479: 
//000480:                 // p4 = a22 x (b21 - b11) 
//000481:                 Task t_p4 = Task.Factory.StartNew(() =>
//000482:                 {
//000483:                     matrix_sub(n_2, n_2,
//000484:                         B, bx + n_2, by, bs,
//000485:                         B, bx, by, bs,
//000486:                         e_cum, 0, 0, n_2);
//000487:                     strassen_mult_parallel(
//000488:                         cancellationToken,
//000489:                         n_2,
//000490:                         A, ax + n_2, ay + n_2, a_s,
//000491:                         e_cum, 0, 0, n_2,
//000492:                         p4, 0, 0, n_2,
//000493:                         s);
//000494:                 }, cancellationToken);
//000495: 
//000496:                 // p5 = (a11 + a12) x b22 
//000497:                 Task t_p5 = Task.Factory.StartNew(() =>
//000498:                 {
//000499:                     matrix_add(n_2, n_2,
//000500:                         A, ax, ay, a_s,
//000501:                         A, ax, ay + n_2, a_s,
//000502:                         f_cum, 0, 0, n_2);
//000503:                     strassen_mult_parallel(
//000504:                         cancellationToken,
//000505:                         n_2,
//000506:                         f_cum, 0, 0, n_2,
//000507:                         B, bx + n_2, by + n_2, bs,
//000508:                         p5, 0, 0, n_2,
//000509:                         s);
//000510:                 }, cancellationToken);
//000511: 
//000512:                 // p6 = (a21 - a11) x (b11 + b12) 
//000513:                 Task t_p6 = Task.Factory.StartNew(() =>
//000514:                 {
//000515:                     matrix_sub(n_2, n_2,
//000516:                         A, ax + n_2, ay, a_s,
//000517:                         A, ax, ay, a_s,
//000518:                         g_cum, 0, 0, n_2);
//000519:                     matrix_add(n_2, n_2,
//000520:                         B, bx, by, bs,
//000521:                         B, bx, by + n_2, bs,
//000522:                         h_cum, 0, 0, n_2);
//000523:                     strassen_mult_parallel(
//000524:                         cancellationToken,
//000525:                         n_2,
//000526:                         g_cum, 0, 0, n_2,
//000527:                         h_cum, 0, 0, n_2,
//000528:                         p6, 0, 0, n_2,
//000529:                         s);
//000530:                 }, cancellationToken);
//000531: 
//000532:                 // p7 = (a12 - a22) x (b21 + b22) 
//000533:                 Task t_p7 = Task.Factory.StartNew(() =>
//000534:                 {
//000535:                     matrix_sub(n_2, n_2,
//000536:                         A, ax, ay + n_2, a_s,
//000537:                         A, ax + n_2, ay + n_2, a_s,
//000538:                         i_cum, 0, 0, n_2);
//000539:                     matrix_add(n_2, n_2,
//000540:                         B, bx + n_2, by, bs,
//000541:                         B, bx + n_2, by + n_2, bs,
//000542:                         j_cum, 0, 0, n_2);
//000543:                     strassen_mult_parallel(
//000544:                         cancellationToken,
//000545:                         n_2,
//000546:                         i_cum, 0, 0, n_2,
//000547:                         j_cum, 0, 0, n_2,
//000548:                         p7, 0, 0, n_2,
//000549:                         s);
//000550:                 }, cancellationToken);
//000551: 
//000552:                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
//000553:                 catch (AggregateException ae)
//000554:                 {
//000555:                     ae.Flatten().Handle(e => e is TaskCanceledException);
//000556:                     cancellationToken.ThrowIfCancellationRequested();
//000557:                 }
//000558: 
//000559:                 // c11 = p1 + p4 - p5 + p7 
//000560:                 Task t_c11 = Task.Factory.StartNew(() =>
//000561:                 {
//000562:                     matrix_add(n_2, n_2,
//000563:                         p1, 0, 0, n_2,
//000564:                         p4, 0, 0, n_2,
//000565:                         C, cx, cy, cs);
//000566:                     matrix_sub(n_2, n_2,
//000567:                         C, cx, cy, cs,
//000568:                         p5, 0, 0, n_2,
//000569:                         C, cx, cy, cs);
//000570:                     matrix_add(n_2, n_2,
//000571:                         C, cx, cy, cs,
//000572:                         p7, 0, 0, n_2,
//000573:                         C, cx, cy, cs);
//000574:                 });
//000575: 
//000576:                 // c12 = p3 + p5 
//000577:                 Task t_c12 = Task.Factory.StartNew(() =>
//000578:                 {
//000579:                     matrix_add(n_2, n_2,
//000580:                         p3, 0, 0, n_2,
//000581:                         p5, 0, 0, n_2,
//000582:                         C, cx, cy + n_2, cs);
//000583:                 });
//000584: 
//000585:                 // c21 = p2 + p4 
//000586:                 Task t_c21 = Task.Factory.StartNew(() =>
//000587:                 {
//000588:                     matrix_add(n_2, n_2,
//000589:                         p2, 0, 0, n_2,
//000590:                         p4, 0, 0, n_2,
//000591:                         C, cx + n_2, cy, cs);
//000592:                 });
//000593: 
//000594:                 // c22 = p1 + p3 - p2 + p6 
//000595:                 Task t_c22 = Task.Factory.StartNew(() =>
//000596:                 {
//000597:                     matrix_add(n_2, n_2,
//000598:                         p1, 0, 0, n_2,
//000599:                         p3, 0, 0, n_2,
//000600:                         C, cx + n_2, cy + n_2, cs);
//000601:                     matrix_sub(n_2, n_2,
//000602:                         C, cx + n_2, cy + n_2, cs,
//000603:                         p2, 0, 0, n_2,
//000604:                         C, cx + n_2, cy + n_2, cs);
//000605:                     matrix_add(n_2, n_2,
//000606:                         C, cx + n_2, cy + n_2, cs,
//000607:                         p6, 0, 0, n_2,
//000608:                         C, cx + n_2, cy + n_2, cs);
//000609:                 });
//000610: 
//000611:                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
//000612:             }
//000613:         }
//000614:     }
//000615: }
    IL_002e:  br         IL_039d

//000220:         {
    IL_0033:  nop
//000221:             int n_2 = n >> 1;
    IL_0034:  ldarg.1
    IL_0035:  ldc.i4.1
    IL_0036:  shr
    IL_0037:  stloc.0
//000222:             int[] workArr = new int[n_2 * n_2 * 9];
    IL_0038:  ldloc.0
    IL_0039:  ldloc.0
    IL_003a:  mul
    IL_003b:  ldc.i4.s   9
    IL_003d:  mul
    IL_003e:  newarr     [mscorlib]System.Int32
    IL_0043:  stloc.1
//000223:             fixed (int* work = workArr)
    IL_0044:  ldloc.1
    IL_0045:  dup
    IL_0046:  stloc.s    CS$0$0001
    IL_0048:  brfalse.s  IL_0050

    IL_004a:  ldloc.s    CS$0$0001
    IL_004c:  ldlen
    IL_004d:  conv.i4
    IL_004e:  brtrue.s   IL_0055

    IL_0050:  ldc.i4.0
    IL_0051:  conv.u
    IL_0052:  stloc.2
    IL_0053:  br.s       IL_005e

    IL_0055:  ldloc.s    CS$0$0001
    IL_0057:  ldc.i4.0
    IL_0058:  ldelema    [mscorlib]System.Int32
    IL_005d:  stloc.2
//000224:             {
    IL_005e:  nop
//000225:                 int* a_cum = work;
    IL_005f:  ldloc.2
    IL_0060:  conv.i
    IL_0061:  stloc.3
//000226:                 int* b_cum = a_cum + n_2 * n_2;
    IL_0062:  ldloc.3
    IL_0063:  ldloc.0
    IL_0064:  ldloc.0
    IL_0065:  mul
    IL_0066:  conv.i
    IL_0067:  ldc.i4.4
    IL_0068:  mul
    IL_0069:  add
    IL_006a:  stloc.s    b_cum
//000227:                 int* p1 = b_cum + n_2 * n_2;
    IL_006c:  ldloc.s    b_cum
    IL_006e:  ldloc.0
    IL_006f:  ldloc.0
    IL_0070:  mul
    IL_0071:  conv.i
    IL_0072:  ldc.i4.4
    IL_0073:  mul
    IL_0074:  add
    IL_0075:  stloc.s    p1
//000228:                 int* p2 = p1 + n_2 * n_2;
    IL_0077:  ldloc.s    p1
    IL_0079:  ldloc.0
    IL_007a:  ldloc.0
    IL_007b:  mul
    IL_007c:  conv.i
    IL_007d:  ldc.i4.4
    IL_007e:  mul
    IL_007f:  add
    IL_0080:  stloc.s    p2
//000229:                 int* p3 = p2 + n_2 * n_2;
    IL_0082:  ldloc.s    p2
    IL_0084:  ldloc.0
    IL_0085:  ldloc.0
    IL_0086:  mul
    IL_0087:  conv.i
    IL_0088:  ldc.i4.4
    IL_0089:  mul
    IL_008a:  add
    IL_008b:  stloc.s    p3
//000230:                 int* p4 = p3 + n_2 * n_2;
    IL_008d:  ldloc.s    p3
    IL_008f:  ldloc.0
    IL_0090:  ldloc.0
    IL_0091:  mul
    IL_0092:  conv.i
    IL_0093:  ldc.i4.4
    IL_0094:  mul
    IL_0095:  add
    IL_0096:  stloc.s    p4
//000231:                 int* p5 = p4 + n_2 * n_2;
    IL_0098:  ldloc.s    p4
    IL_009a:  ldloc.0
    IL_009b:  ldloc.0
    IL_009c:  mul
    IL_009d:  conv.i
    IL_009e:  ldc.i4.4
    IL_009f:  mul
    IL_00a0:  add
    IL_00a1:  stloc.s    p5
//000232:                 int* p6 = p5 + n_2 * n_2;
    IL_00a3:  ldloc.s    p5
    IL_00a5:  ldloc.0
    IL_00a6:  ldloc.0
    IL_00a7:  mul
    IL_00a8:  conv.i
    IL_00a9:  ldc.i4.4
    IL_00aa:  mul
    IL_00ab:  add
    IL_00ac:  stloc.s    p6
//000233:                 int* p7 = p6 + n_2 * n_2;
    IL_00ae:  ldloc.s    p6
    IL_00b0:  ldloc.0
    IL_00b1:  ldloc.0
    IL_00b2:  mul
    IL_00b3:  conv.i
    IL_00b4:  ldc.i4.4
    IL_00b5:  mul
    IL_00b6:  add
    IL_00b7:  stloc.s    p7
//000234: 
//000235:                 // p1 = (a11 + a22) * (b11 + b22) 
//000236:                 matrix_add(n_2, n_2,
    IL_00b9:  ldloc.0
    IL_00ba:  ldloc.0
    IL_00bb:  ldarg.2
    IL_00bc:  ldarg.3
    IL_00bd:  ldarg.s    ay
    IL_00bf:  ldarg.s    a_s
    IL_00c1:  ldarg.2
    IL_00c2:  ldarg.3
    IL_00c3:  ldloc.0
    IL_00c4:  add
    IL_00c5:  ldarg.s    ay
    IL_00c7:  ldloc.0
    IL_00c8:  add
    IL_00c9:  ldarg.s    a_s
    IL_00cb:  ldloc.3
    IL_00cc:  ldc.i4.0
    IL_00cd:  ldc.i4.0
    IL_00ce:  ldloc.0
    IL_00cf:  call       void Matrix::matrix_add(int32,
                                                 int32,
                                                 int32*,
                                                 int32,
                                                 int32,
                                                 int32,
                                                 int32*,
                                                 int32,
                                                 int32,
                                                 int32,
                                                 int32*,
                                                 int32,
                                                 int32,
                                                 int32)
    IL_00d4:  nop
//000237:                     A, ax, ay, a_s,
//000238:                     A, ax + n_2, ay + n_2, a_s,
//000239:                     a_cum, 0, 0, n_2);
//000240:                 matrix_add(n_2, n_2,
    IL_00d5:  ldloc.0
    IL_00d6:  ldloc.0
    IL_00d7:  ldarg.s    B
    IL_00d9:  ldarg.s    bx
    IL_00db:  ldarg.s    by
    IL_00dd:  ldarg.s    bs
    IL_00df:  ldarg.s    B
    IL_00e1:  ldarg.s    bx
    IL_00e3:  ldloc.0
    IL_00e4:  add
    IL_00e5:  ldarg.s    by
    IL_00e7:  ldloc.0
    IL_00e8:  add
    IL_00e9:  ldarg.s    bs
    IL_00eb:  ldloc.s    b_cum
    IL_00ed:  ldc.i4.0
    IL_00ee:  ldc.i4.0
    IL_00ef:  ldloc.0
    IL_00f0:  call       void Matrix::matrix_add(int32,
                                                 int32,
                                                 int32*,
                                                 int32,
                                                 int32,
                                                 int32,
                                                 int32*,
                                                 int32,
                                                 int32,
                                                 int32,
                                                 int32*,
                                                 int32,
                                                 int32,
                                                 int32)
    IL_00f5:  nop
//000241:                     B, bx, by, bs,
//000242:                     B, bx + n_2, by + n_2, bs,
//000243:                     b_cum, 0, 0, n_2);
//000244:                 strassen_mult_serial(
    IL_00f6:  ldarg.0
    IL_00f7:  ldloc.0
    IL_00f8:  ldloc.3
    IL_00f9:  ldc.i4.0
    IL_00fa:  ldc.i4.0
    IL_00fb:  ldloc.0
    IL_00fc:  ldloc.s    b_cum
    IL_00fe:  ldc.i4.0
    IL_00ff:  ldc.i4.0
    IL_0100:  ldloc.0
    IL_0101:  ldloc.s    p1
    IL_0103:  ldc.i4.0
    IL_0104:  ldc.i4.0
    IL_0105:  ldloc.0
    IL_0106:  ldarg.s    s
    IL_0108:  call       void Matrix::strassen_mult_serial(valuetype [mscorlib]System.Threading.CancellationToken,
                                                           int32,
                                                           int32*,
                                                           int32,
                                                           int32,
                                                           int32,
                                                           int32*,
                                                           int32,
                                                           int32,
                                                           int32,
                                                           int32*,
                                                           int32,
                                                           int32,
                                                           int32,
                                                           int32)
    IL_010d:  nop
//000245:                     cancellationToken,
//000246:                     n_2,
//000247:                     a_cum, 0, 0, n_2,
//000248:                     b_cum, 0, 0, n_2,
//000249:                     p1, 0, 0, n_2,
//000250:                     s);
//000251: 
//000252:                 // p2 = (a21 + a22) * b11 
//000253:                 matrix_add(n_2, n_2,
    IL_010e:  ldloc.0
    IL_010f:  ldloc.0
    IL_0110:  ldarg.2
    IL_0111:  ldarg.3
    IL_0112:  ldloc.0
    IL_0113:  add
    IL_0114:  ldarg.s    ay
    IL_0116:  ldarg.s    a_s
    IL_0118:  ldarg.2
    IL_0119:  ldarg.3
    IL_011a:  ldloc.0
    IL_011b:  add
    IL_011c:  ldarg.s    ay
    IL_011e:  ldloc.0
    IL_011f:  add
    IL_0120:  ldarg.s    a_s
    IL_0122:  ldloc.3
    IL_0123:  ldc.i4.0
    IL_0124:  ldc.i4.0
    IL_0125:  ldloc.0
    IL_0126:  call       void Matrix::matrix_add(int32,
                                                 int32,
                                                 int32*,
                                                 int32,
                                                 int32,
                                                 int32,
                                                 int32*,
                                                 int32,
                                                 int32,
                                                 int32,
                                                 int32*,
                                                 int32,
                                                 int32,
                                                 int32)
    IL_012b:  nop
//000254:                     A, ax + n_2, ay, a_s,
//000255:                     A, ax + n_2, ay + n_2, a_s,
//000256:                     a_cum, 0, 0, n_2);
//000257:                 strassen_mult_serial(
    IL_012c:  ldarg.0
    IL_012d:  ldloc.0
    IL_012e:  ldloc.3
    IL_012f:  ldc.i4.0
    IL_0130:  ldc.i4.0
    IL_0131:  ldloc.0
    IL_0132:  ldarg.s    B
    IL_0134:  ldarg.s    bx
    IL_0136:  ldarg.s    by
    IL_0138:  ldarg.s    bs
    IL_013a:  ldloc.s    p2
    IL_013c:  ldc.i4.0
    IL_013d:  ldc.i4.0
    IL_013e:  ldloc.0
    IL_013f:  ldarg.s    s
    IL_0141:  call       void Matrix::strassen_mult_serial(valuetype [mscorlib]System.Threading.CancellationToken,
                                                           int32,
                                                           int32*,
                                                           int32,
                                                           int32,
                                                           int32,
                                                           int32*,
                                                           int32,
                                                           int32,
                                                           int32,
                                                           int32*,
                                                           int32,
                                                           int32,
                                                           int32,
                                                           int32)
    IL_0146:  nop
//000258:                     cancellationToken,
//000259:                     n_2,
//000260:                     a_cum, 0, 0, n_2,
//000261:                     B, bx, by, bs,
//000262:                     p2, 0, 0, n_2,
//000263:                     s);
//000264: 
//000265:                 // p3 = a11 x (b12 - b22) 
//000266:                 matrix_sub(n_2, n_2,
    IL_0147:  ldloc.0
    IL_0148:  ldloc.0
    IL_0149:  ldarg.s    B
    IL_014b:  ldarg.s    bx
    IL_014d:  ldarg.s    by
    IL_014f:  ldloc.0
    IL_0150:  add
    IL_0151:  ldarg.s    bs
    IL_0153:  ldarg.s    B
    IL_0155:  ldarg.s    bx
    IL_0157:  ldloc.0
    IL_0158:  add
    IL_0159:  ldarg.s    by
    IL_015b:  ldloc.0
    IL_015c:  add
    IL_015d:  ldarg.s    bs
    IL_015f:  ldloc.s    b_cum
    IL_0161:  ldc.i4.0
    IL_0162:  ldc.i4.0
    IL_0163:  ldloc.0
    IL_0164:  call       void Matrix::matrix_sub(int32,
                                                 int32,
                                                 int32*,
                                                 int32,
                                                 int32,
                                                 int32,
                                                 int32*,
                                                 int32,
                                                 int32,
                                                 int32,
                                                 int32*,
                                                 int32,
                                                 int32,
                                                 int32)
    IL_0169:  nop
//000267:                     B, bx, by + n_2, bs,
//000268:                     B, bx + n_2, by + n_2, bs,
//000269:                     b_cum, 0, 0, n_2);
//000270:                 strassen_mult_serial(
    IL_016a:  ldarg.0
    IL_016b:  ldloc.0
    IL_016c:  ldarg.2
    IL_016d:  ldarg.3
    IL_016e:  ldarg.s    ay
    IL_0170:  ldarg.s    a_s
    IL_0172:  ldloc.s    b_cum
    IL_0174:  ldc.i4.0
    IL_0175:  ldc.i4.0
    IL_0176:  ldloc.0
    IL_0177:  ldloc.s    p3
    IL_0179:  ldc.i4.0
    IL_017a:  ldc.i4.0
    IL_017b:  ldloc.0
    IL_017c:  ldarg.s    s
    IL_017e:  call       void Matrix::strassen_mult_serial(valuetype [mscorlib]System.Threading.CancellationToken,
                                                           int32,
                                                           int32*,
                                                           int32,
                                                           int32,
                                                           int32,
                                                           int32*,
                                                           int32,
                                                           int32,
                                                           int32,
                                                           int32*,
                                                           int32,
                                                           int32,
                                                           int32,
                                                           int32)
    IL_0183:  nop
//000271:                     cancellationToken,
//000272:                     n_2,
//000273:                     A, ax, ay, a_s,
//000274:                     b_cum, 0, 0, n_2,
//000275:                     p3, 0, 0, n_2,
//000276:                     s);
//000277: 
//000278:                 // p4 = a22 x (b21 - b11) 
//000279:                 matrix_sub(n_2, n_2,
    IL_0184:  ldloc.0
    IL_0185:  ldloc.0
    IL_0186:  ldarg.s    B
    IL_0188:  ldarg.s    bx
    IL_018a:  ldloc.0
    IL_018b:  add
    IL_018c:  ldarg.s    by
    IL_018e:  ldarg.s    bs
    IL_0190:  ldarg.s    B
    IL_0192:  ldarg.s    bx
    IL_0194:  ldarg.s    by
    IL_0196:  ldarg.s    bs
    IL_0198:  ldloc.s    b_cum
    IL_019a:  ldc.i4.0
    IL_019b:  ldc.i4.0
    IL_019c:  ldloc.0
    IL_019d:  call       void Matrix::matrix_sub(int32,
                                                 int32,
                                                 int32*,
                                                 int32,
                                                 int32,
                                                 int32,
                                                 int32*,
                                                 int32,
                                                 int32,
                                                 int32,
                                                 int32*,
                                                 int32,
                                                 int32,
                                                 int32)
    IL_01a2:  nop
//000280:                     B, bx + n_2, by, bs,
//000281:                     B, bx, by, bs,
//000282:                     b_cum, 0, 0, n_2);
//000283:                 strassen_mult_serial(
    IL_01a3:  ldarg.0
    IL_01a4:  ldloc.0
    IL_01a5:  ldarg.2
    IL_01a6:  ldarg.3
    IL_01a7:  ldloc.0
    IL_01a8:  add
    IL_01a9:  ldarg.s    ay
    IL_01ab:  ldloc.0
    IL_01ac:  add
    IL_01ad:  ldarg.s    a_s
    IL_01af:  ldloc.s    b_cum
    IL_01b1:  ldc.i4.0
    IL_01b2:  ldc.i4.0
    IL_01b3:  ldloc.0
    IL_01b4:  ldloc.s    p4
    IL_01b6:  ldc.i4.0
    IL_01b7:  ldc.i4.0
    IL_01b8:  ldloc.0
    IL_01b9:  ldarg.s    s
    IL_01bb:  call       void Matrix::strassen_mult_serial(valuetype [mscorlib]System.Threading.CancellationToken,
                                                           int32,
                                                           int32*,
                                                           int32,
                                                           int32,
                                                           int32,
                                                           int32*,
                                                           int32,
                                                           int32,
                                                           int32,
                                                           int32*,
                                                           int32,
                                                           int32,
                                                           int32,
                                                           int32)
    IL_01c0:  nop
//000284:                     cancellationToken,
//000285:                     n_2,
//000286:                     A, ax + n_2, ay + n_2, a_s,
//000287:                     b_cum, 0, 0, n_2,
//000288:                     p4, 0, 0, n_2,
//000289:                     s);
//000290: 
//000291:                 // p5 = (a11 + a12) x b22 
//000292:                 matrix_add(n_2, n_2,
    IL_01c1:  ldloc.0
    IL_01c2:  ldloc.0
    IL_01c3:  ldarg.2
    IL_01c4:  ldarg.3
    IL_01c5:  ldarg.s    ay
    IL_01c7:  ldarg.s    a_s
    IL_01c9:  ldarg.2
    IL_01ca:  ldarg.3
    IL_01cb:  ldarg.s    ay
    IL_01cd:  ldloc.0
    IL_01ce:  add
    IL_01cf:  ldarg.s    a_s
    IL_01d1:  ldloc.3
    IL_01d2:  ldc.i4.0
    IL_01d3:  ldc.i4.0
    IL_01d4:  ldloc.0
    IL_01d5:  call       void Matrix::matrix_add(int32,
                                                 int32,
                                                 int32*,
                                                 int32,
                                                 int32,
                                                 int32,
                                                 int32*,
                                                 int32,
                                                 int32,
                                                 int32,
                                                 int32*,
                                                 int32,
                                                 int32,
                                                 int32)
    IL_01da:  nop
//000293:                     A, ax, ay, a_s,
//000294:                     A, ax, ay + n_2, a_s,
//000295:                     a_cum, 0, 0, n_2);
//000296:                 strassen_mult_serial(
    IL_01db:  ldarg.0
    IL_01dc:  ldloc.0
    IL_01dd:  ldloc.3
    IL_01de:  ldc.i4.0
    IL_01df:  ldc.i4.0
    IL_01e0:  ldloc.0
    IL_01e1:  ldarg.s    B
    IL_01e3:  ldarg.s    bx
    IL_01e5:  ldloc.0
    IL_01e6:  add
    IL_01e7:  ldarg.s    by
    IL_01e9:  ldloc.0
    IL_01ea:  add
    IL_01eb:  ldarg.s    bs
    IL_01ed:  ldloc.s    p5
    IL_01ef:  ldc.i4.0
    IL_01f0:  ldc.i4.0
    IL_01f1:  ldloc.0
    IL_01f2:  ldarg.s    s
    IL_01f4:  call       void Matrix::strassen_mult_serial(valuetype [mscorlib]System.Threading.CancellationToken,
                                                           int32,
                                                           int32*,
                                                           int32,
                                                           int32,
                                                           int32,
                                                           int32*,
                                                           int32,
                                                           int32,
                                                           int32,
                                                           int32*,
                                                           int32,
                                                           int32,
                                                           int32,
                                                           int32)
    IL_01f9:  nop
//000297:                     cancellationToken,
//000298:                     n_2,
//000299:                     a_cum, 0, 0, n_2,
//000300:                     B, bx + n_2, by + n_2, bs,
//000301:                     p5, 0, 0, n_2,
//000302:                     s);
//000303: 
//000304:                 // p6 = (a21 - a11) x (b11 + b12) 
//000305:                 matrix_sub(n_2, n_2,
    IL_01fa:  ldloc.0
    IL_01fb:  ldloc.0
    IL_01fc:  ldarg.2
    IL_01fd:  ldarg.3
    IL_01fe:  ldloc.0
    IL_01ff:  add
    IL_0200:  ldarg.s    ay
    IL_0202:  ldarg.s    a_s
    IL_0204:  ldarg.2
    IL_0205:  ldarg.3
    IL_0206:  ldarg.s    ay
    IL_0208:  ldarg.s    a_s
    IL_020a:  ldloc.3
    IL_020b:  ldc.i4.0
    IL_020c:  ldc.i4.0
    IL_020d:  ldloc.0
    IL_020e:  call       void Matrix::matrix_sub(int32,
                                                 int32,
                                                 int32*,
                                                 int32,
                                                 int32,
                                                 int32,
                                                 int32*,
                                                 int32,
                                                 int32,
                                                 int32,
                                                 int32*,
                                                 int32,
                                                 int32,
                                                 int32)
    IL_0213:  nop
//000306:                     A, ax + n_2, ay, a_s,
//000307:                     A, ax, ay, a_s,
//000308:                     a_cum, 0, 0, n_2);
//000309:                 matrix_add(n_2, n_2,
    IL_0214:  ldloc.0
    IL_0215:  ldloc.0
    IL_0216:  ldarg.s    B
    IL_0218:  ldarg.s    bx
    IL_021a:  ldarg.s    by
    IL_021c:  ldarg.s    bs
    IL_021e:  ldarg.s    B
    IL_0220:  ldarg.s    bx
    IL_0222:  ldarg.s    by
    IL_0224:  ldloc.0
    IL_0225:  add
    IL_0226:  ldarg.s    bs
    IL_0228:  ldloc.s    b_cum
    IL_022a:  ldc.i4.0
    IL_022b:  ldc.i4.0
    IL_022c:  ldloc.0
    IL_022d:  call       void Matrix::matrix_add(int32,
                                                 int32,
                                                 int32*,
                                                 int32,
                                                 int32,
                                                 int32,
                                                 int32*,
                                                 int32,
                                                 int32,
                                                 int32,
                                                 int32*,
                                                 int32,
                                                 int32,
                                                 int32)
    IL_0232:  nop
//000310:                     B, bx, by, bs,
//000311:                     B, bx, by + n_2, bs,
//000312:                     b_cum, 0, 0, n_2);
//000313:                 strassen_mult_serial(
    IL_0233:  ldarg.0
    IL_0234:  ldloc.0
    IL_0235:  ldloc.3
    IL_0236:  ldc.i4.0
    IL_0237:  ldc.i4.0
    IL_0238:  ldloc.0
    IL_0239:  ldloc.s    b_cum
    IL_023b:  ldc.i4.0
    IL_023c:  ldc.i4.0
    IL_023d:  ldloc.0
    IL_023e:  ldloc.s    p6
    IL_0240:  ldc.i4.0
    IL_0241:  ldc.i4.0
    IL_0242:  ldloc.0
    IL_0243:  ldarg.s    s
    IL_0245:  call       void Matrix::strassen_mult_serial(valuetype [mscorlib]System.Threading.CancellationToken,
                                                           int32,
                                                           int32*,
                                                           int32,
                                                           int32,
                                                           int32,
                                                           int32*,
                                                           int32,
                                                           int32,
                                                           int32,
                                                           int32*,
                                                           int32,
                                                           int32,
                                                           int32,
                                                           int32)
    IL_024a:  nop
//000314:                     cancellationToken,
//000315:                     n_2,
//000316:                     a_cum, 0, 0, n_2,
//000317:                     b_cum, 0, 0, n_2,
//000318:                     p6, 0, 0, n_2,
//000319:                     s);
//000320: 
//000321:                 // p7 = (a12 - a22) x (b21 + b22) 
//000322:                 matrix_sub(n_2, n_2,
    IL_024b:  ldloc.0
    IL_024c:  ldloc.0
    IL_024d:  ldarg.2
    IL_024e:  ldarg.3
    IL_024f:  ldarg.s    ay
    IL_0251:  ldloc.0
    IL_0252:  add
    IL_0253:  ldarg.s    a_s
    IL_0255:  ldarg.2
    IL_0256:  ldarg.3
    IL_0257:  ldloc.0
    IL_0258:  add
    IL_0259:  ldarg.s    ay
    IL_025b:  ldloc.0
    IL_025c:  add
    IL_025d:  ldarg.s    a_s
    IL_025f:  ldloc.3
    IL_0260:  ldc.i4.0
    IL_0261:  ldc.i4.0
    IL_0262:  ldloc.0
    IL_0263:  call       void Matrix::matrix_sub(int32,
                                                 int32,
                                                 int32*,
                                                 int32,
                                                 int32,
                                                 int32,
                                                 int32*,
                                                 int32,
                                                 int32,
                                                 int32,
                                                 int32*,
                                                 int32,
                                                 int32,
                                                 int32)
    IL_0268:  nop
//000323:                     A, ax, ay + n_2, a_s,
//000324:                     A, ax + n_2, ay + n_2, a_s,
//000325:                     a_cum, 0, 0, n_2);
//000326:                 matrix_add(n_2, n_2,
    IL_0269:  ldloc.0
    IL_026a:  ldloc.0
    IL_026b:  ldarg.s    B
    IL_026d:  ldarg.s    bx
    IL_026f:  ldloc.0
    IL_0270:  add
    IL_0271:  ldarg.s    by
    IL_0273:  ldarg.s    bs
    IL_0275:  ldarg.s    B
    IL_0277:  ldarg.s    bx
    IL_0279:  ldloc.0
    IL_027a:  add
    IL_027b:  ldarg.s    by
    IL_027d:  ldloc.0
    IL_027e:  add
    IL_027f:  ldarg.s    bs
    IL_0281:  ldloc.s    b_cum
    IL_0283:  ldc.i4.0
    IL_0284:  ldc.i4.0
    IL_0285:  ldloc.0
    IL_0286:  call       void Matrix::matrix_add(int32,
                                                 int32,
                                                 int32*,
                                                 int32,
                                                 int32,
                                                 int32,
                                                 int32*,
                                                 int32,
                                                 int32,
                                                 int32,
                                                 int32*,
                                                 int32,
                                                 int32,
                                                 int32)
    IL_028b:  nop
//000327:                     B, bx + n_2, by, bs,
//000328:                     B, bx + n_2, by + n_2, bs,
//000329:                     b_cum, 0, 0, n_2);
//000330:                 strassen_mult_serial(
    IL_028c:  ldarg.0
    IL_028d:  ldloc.0
    IL_028e:  ldloc.3
    IL_028f:  ldc.i4.0
    IL_0290:  ldc.i4.0
    IL_0291:  ldloc.0
    IL_0292:  ldloc.s    b_cum
    IL_0294:  ldc.i4.0
    IL_0295:  ldc.i4.0
    IL_0296:  ldloc.0
    IL_0297:  ldloc.s    p7
    IL_0299:  ldc.i4.0
    IL_029a:  ldc.i4.0
    IL_029b:  ldloc.0
    IL_029c:  ldarg.s    s
    IL_029e:  call       void Matrix::strassen_mult_serial(valuetype [mscorlib]System.Threading.CancellationToken,
                                                           int32,
                                                           int32*,
                                                           int32,
                                                           int32,
                                                           int32,
                                                           int32*,
                                                           int32,
                                                           int32,
                                                           int32,
                                                           int32*,
                                                           int32,
                                                           int32,
                                                           int32,
                                                           int32)
    IL_02a3:  nop
//000331:                     cancellationToken,
//000332:                     n_2,
//000333:                     a_cum, 0, 0, n_2,
//000334:                     b_cum, 0, 0, n_2,
//000335:                     p7, 0, 0, n_2,
//000336:                     s);
//000337: 
//000338:                 // c11 = p1 + p4 - p5 + p7 
//000339:                 matrix_add(n_2, n_2,
    IL_02a4:  ldloc.0
    IL_02a5:  ldloc.0
    IL_02a6:  ldloc.s    p1
    IL_02a8:  ldc.i4.0
    IL_02a9:  ldc.i4.0
    IL_02aa:  ldloc.0
    IL_02ab:  ldloc.s    p4
    IL_02ad:  ldc.i4.0
    IL_02ae:  ldc.i4.0
    IL_02af:  ldloc.0
    IL_02b0:  ldarg.s    C
    IL_02b2:  ldarg.s    cx
    IL_02b4:  ldarg.s    cy
    IL_02b6:  ldarg.s    cs
    IL_02b8:  call       void Matrix::matrix_add(int32,
                                                 int32,
                                                 int32*,
                                                 int32,
                                                 int32,
                                                 int32,
                                                 int32*,
                                                 int32,
                                                 int32,
                                                 int32,
                                                 int32*,
                                                 int32,
                                                 int32,
                                                 int32)
    IL_02bd:  nop
//000340:                     p1, 0, 0, n_2,
//000341:                     p4, 0, 0, n_2,
//000342:                     C, cx, cy, cs);
//000343:                 matrix_sub(n_2, n_2,
    IL_02be:  ldloc.0
    IL_02bf:  ldloc.0
    IL_02c0:  ldarg.s    C
    IL_02c2:  ldarg.s    cx
    IL_02c4:  ldarg.s    cy
    IL_02c6:  ldarg.s    cs
    IL_02c8:  ldloc.s    p5
    IL_02ca:  ldc.i4.0
    IL_02cb:  ldc.i4.0
    IL_02cc:  ldloc.0
    IL_02cd:  ldarg.s    C
    IL_02cf:  ldarg.s    cx
    IL_02d1:  ldarg.s    cy
    IL_02d3:  ldarg.s    cs
    IL_02d5:  call       void Matrix::matrix_sub(int32,
                                                 int32,
                                                 int32*,
                                                 int32,
                                                 int32,
                                                 int32,
                                                 int32*,
                                                 int32,
                                                 int32,
                                                 int32,
                                                 int32*,
                                                 int32,
                                                 int32,
                                                 int32)
    IL_02da:  nop
//000344:                     C, cx, cy, cs,
//000345:                     p5, 0, 0, n_2,
//000346:                     C, cx, cy, cs);
//000347:                 matrix_add(n_2, n_2,
    IL_02db:  ldloc.0
    IL_02dc:  ldloc.0
    IL_02dd:  ldarg.s    C
    IL_02df:  ldarg.s    cx
    IL_02e1:  ldarg.s    cy
    IL_02e3:  ldarg.s    cs
    IL_02e5:  ldloc.s    p7
    IL_02e7:  ldc.i4.0
    IL_02e8:  ldc.i4.0
    IL_02e9:  ldloc.0
    IL_02ea:  ldarg.s    C
    IL_02ec:  ldarg.s    cx
    IL_02ee:  ldarg.s    cy
    IL_02f0:  ldarg.s    cs
    IL_02f2:  call       void Matrix::matrix_add(int32,
                                                 int32,
                                                 int32*,
                                                 int32,
                                                 int32,
                                                 int32,
                                                 int32*,
                                                 int32,
                                                 int32,
                                                 int32,
                                                 int32*,
                                                 int32,
                                                 int32,
                                                 int32)
    IL_02f7:  nop
//000348:                     C, cx, cy, cs,
//000349:                     p7, 0, 0, n_2,
//000350:                     C, cx, cy, cs);
//000351: 
//000352:                 // c12 = p3 + p5 
//000353:                 matrix_add(n_2, n_2,
    IL_02f8:  ldloc.0
    IL_02f9:  ldloc.0
    IL_02fa:  ldloc.s    p3
    IL_02fc:  ldc.i4.0
    IL_02fd:  ldc.i4.0
    IL_02fe:  ldloc.0
    IL_02ff:  ldloc.s    p5
    IL_0301:  ldc.i4.0
    IL_0302:  ldc.i4.0
    IL_0303:  ldloc.0
    IL_0304:  ldarg.s    C
    IL_0306:  ldarg.s    cx
    IL_0308:  ldarg.s    cy
    IL_030a:  ldloc.0
    IL_030b:  add
    IL_030c:  ldarg.s    cs
    IL_030e:  call       void Matrix::matrix_add(int32,
                                                 int32,
                                                 int32*,
                                                 int32,
                                                 int32,
                                                 int32,
                                                 int32*,
                                                 int32,
                                                 int32,
                                                 int32,
                                                 int32*,
                                                 int32,
                                                 int32,
                                                 int32)
    IL_0313:  nop
//000354:                     p3, 0, 0, n_2,
//000355:                     p5, 0, 0, n_2,
//000356:                     C, cx, cy + n_2, cs);
//000357: 
//000358:                 // c21 = p2 + p4 
//000359:                 matrix_add(n_2, n_2,
    IL_0314:  ldloc.0
    IL_0315:  ldloc.0
    IL_0316:  ldloc.s    p2
    IL_0318:  ldc.i4.0
    IL_0319:  ldc.i4.0
    IL_031a:  ldloc.0
    IL_031b:  ldloc.s    p4
    IL_031d:  ldc.i4.0
    IL_031e:  ldc.i4.0
    IL_031f:  ldloc.0
    IL_0320:  ldarg.s    C
    IL_0322:  ldarg.s    cx
    IL_0324:  ldloc.0
    IL_0325:  add
    IL_0326:  ldarg.s    cy
    IL_0328:  ldarg.s    cs
    IL_032a:  call       void Matrix::matrix_add(int32,
                                                 int32,
                                                 int32*,
                                                 int32,
                                                 int32,
                                                 int32,
                                                 int32*,
                                                 int32,
                                                 int32,
                                                 int32,
                                                 int32*,
                                                 int32,
                                                 int32,
                                                 int32)
    IL_032f:  nop
//000360:                     p2, 0, 0, n_2,
//000361:                     p4, 0, 0, n_2,
//000362:                     C, cx + n_2, cy, cs);
//000363: 
//000364:                 // c22 = p1 + p3 - p2 + p6 
//000365:                 matrix_add(n_2, n_2,
    IL_0330:  ldloc.0
    IL_0331:  ldloc.0
    IL_0332:  ldloc.s    p1
    IL_0334:  ldc.i4.0
    IL_0335:  ldc.i4.0
    IL_0336:  ldloc.0
    IL_0337:  ldloc.s    p3
    IL_0339:  ldc.i4.0
    IL_033a:  ldc.i4.0
    IL_033b:  ldloc.0
    IL_033c:  ldarg.s    C
    IL_033e:  ldarg.s    cx
    IL_0340:  ldloc.0
    IL_0341:  add
    IL_0342:  ldarg.s    cy
    IL_0344:  ldloc.0
    IL_0345:  add
    IL_0346:  ldarg.s    cs
    IL_0348:  call       void Matrix::matrix_add(int32,
                                                 int32,
                                                 int32*,
                                                 int32,
                                                 int32,
                                                 int32,
                                                 int32*,
                                                 int32,
                                                 int32,
                                                 int32,
                                                 int32*,
                                                 int32,
                                                 int32,
                                                 int32)
    IL_034d:  nop
//000366:                     p1, 0, 0, n_2,
//000367:                     p3, 0, 0, n_2,
//000368:                     C, cx + n_2, cy + n_2, cs);
//000369:                 matrix_sub(n_2, n_2,
    IL_034e:  ldloc.0
    IL_034f:  ldloc.0
    IL_0350:  ldarg.s    C
    IL_0352:  ldarg.s    cx
    IL_0354:  ldloc.0
    IL_0355:  add
    IL_0356:  ldarg.s    cy
    IL_0358:  ldloc.0
    IL_0359:  add
    IL_035a:  ldarg.s    cs
    IL_035c:  ldloc.s    p2
    IL_035e:  ldc.i4.0
    IL_035f:  ldc.i4.0
    IL_0360:  ldloc.0
    IL_0361:  ldarg.s    C
    IL_0363:  ldarg.s    cx
    IL_0365:  ldloc.0
    IL_0366:  add
    IL_0367:  ldarg.s    cy
    IL_0369:  ldloc.0
    IL_036a:  add
    IL_036b:  ldarg.s    cs
    IL_036d:  call       void Matrix::matrix_sub(int32,
                                                 int32,
                                                 int32*,
                                                 int32,
                                                 int32,
                                                 int32,
                                                 int32*,
                                                 int32,
                                                 int32,
                                                 int32,
                                                 int32*,
                                                 int32,
                                                 int32,
                                                 int32)
    IL_0372:  nop
//000370:                     C, cx + n_2, cy + n_2, cs,
//000371:                     p2, 0, 0, n_2,
//000372:                     C, cx + n_2, cy + n_2, cs);
//000373:                 matrix_add(n_2, n_2,
    IL_0373:  ldloc.0
    IL_0374:  ldloc.0
    IL_0375:  ldarg.s    C
    IL_0377:  ldarg.s    cx
    IL_0379:  ldloc.0
    IL_037a:  add
    IL_037b:  ldarg.s    cy
    IL_037d:  ldloc.0
    IL_037e:  add
    IL_037f:  ldarg.s    cs
    IL_0381:  ldloc.s    p6
    IL_0383:  ldc.i4.0
    IL_0384:  ldc.i4.0
    IL_0385:  ldloc.0
    IL_0386:  ldarg.s    C
    IL_0388:  ldarg.s    cx
    IL_038a:  ldloc.0
    IL_038b:  add
    IL_038c:  ldarg.s    cy
    IL_038e:  ldloc.0
    IL_038f:  add
    IL_0390:  ldarg.s    cs
    IL_0392:  call       void Matrix::matrix_add(int32,
                                                 int32,
                                                 int32*,
                                                 int32,
                                                 int32,
                                                 int32,
                                                 int32*,
                                                 int32,
                                                 int32,
                                                 int32,
                                                 int32*,
                                                 int32,
                                                 int32,
                                                 int32)
    IL_0397:  nop
//000374:                     C, cx + n_2, cy + n_2, cs,
//000375:                     p6, 0, 0, n_2,
//000376:                     C, cx + n_2, cy + n_2, cs);
//000377:             }
    IL_0398:  nop
//000378:         }
//000379:     }
//000380: 
//000381:     private static void strassen_mult_parallel(
//000382:         CancellationToken cancellationToken, 
//000383:         // dimensions of A, B, and C submatrices 
//000384:         int n,
//000385:         // (ax,ay) = origin of A submatrix for multiplicand 
//000386:         int* A, int ax, int ay, int a_s,
//000387:         // (bx,by) = origin of B submatrix for multiplicand 
//000388:         int* B, int bx, int by, int bs,
//000389:         // (cx,cy) = origin of C submatrix for result 
//000390:         int* C, int cx, int cy, int cs,
//000391:         // Strassen's recursion limit for array dimensions 
//000392:         int s)
//000393:     {
//000394:         if (n <= s)
//000395:         {
//000396:             matrix_mult_serial(
//000397:                 cancellationToken,
//000398:                 n, n, n,
//000399:                 A, ax, ay, a_s,
//000400:                 B, bx, by, bs,
//000401:                 C, cx, cy, cs);
//000402:         }
//000403:         else
//000404:         {
//000405:             int n_2 = n >> 1;
//000406:             int areaSize = n_2 * n_2;
//000407:             int[] workArr = new int[areaSize * 17];
//000408:             fixed (int* work = workArr)
//000409:             {
//000410:                 int* a_cum = work;
//000411:                 int* b_cum = a_cum + areaSize;
//000412:                 int* c_cum = b_cum + areaSize;
//000413:                 int* d_cum = c_cum + areaSize;
//000414:                 int* e_cum = d_cum + areaSize;
//000415:                 int* f_cum = e_cum + areaSize;
//000416:                 int* g_cum = f_cum + areaSize;
//000417:                 int* h_cum = g_cum + areaSize;
//000418:                 int* i_cum = h_cum + areaSize;
//000419:                 int* j_cum = i_cum + areaSize;
//000420:                 int* p1 = j_cum + areaSize;
//000421:                 int* p2 = p1 + areaSize;
//000422:                 int* p3 = p2 + areaSize;
//000423:                 int* p4 = p3 + areaSize;
//000424:                 int* p5 = p4 + areaSize;
//000425:                 int* p6 = p5 + areaSize;
//000426:                 int* p7 = p6 + areaSize;
//000427: 
//000428:                 // p1 = (a11 + a22) * (b11 + b22) 
//000429:                 Task t_p1 = Task.Factory.StartNew(() =>
//000430:                 {
//000431:                     matrix_add(n_2, n_2,
//000432:                         A, ax, ay, a_s,
//000433:                         A, ax + n_2, ay + n_2, a_s,
//000434:                         a_cum, 0, 0, n_2);
//000435:                     matrix_add(n_2, n_2,
//000436:                         B, bx, by, bs,
//000437:                         B, bx + n_2, by + n_2, bs,
//000438:                         b_cum, 0, 0, n_2);
//000439:                     strassen_mult_parallel(
//000440:                         cancellationToken,
//000441:                         n_2,
//000442:                         a_cum, 0, 0, n_2,
//000443:                         b_cum, 0, 0, n_2,
//000444:                         p1, 0, 0, n_2,
//000445:                         s);
//000446:                 }, cancellationToken);
//000447: 
//000448:                 // p2 = (a21 + a22) * b11 
//000449:                 Task t_p2 = Task.Factory.StartNew(() =>
//000450:                 {
//000451:                     matrix_add(n_2, n_2,
//000452:                         A, ax + n_2, ay, a_s,
//000453:                         A, ax + n_2, ay + n_2, a_s,
//000454:                         c_cum, 0, 0, n_2);
//000455:                     strassen_mult_parallel(
//000456:                         cancellationToken,
//000457:                         n_2,
//000458:                         c_cum, 0, 0, n_2,
//000459:                         B, bx, by, bs,
//000460:                         p2, 0, 0, n_2,
//000461:                         s);
//000462:                 }, cancellationToken);
//000463: 
//000464:                 // p3 = a11 x (b12 - b22) 
//000465:                 Task t_p3 = Task.Factory.StartNew(() =>
//000466:                 {
//000467:                     matrix_sub(n_2, n_2,
//000468:                         B, bx, by + n_2, bs,
//000469:                         B, bx + n_2, by + n_2, bs,
//000470:                         d_cum, 0, 0, n_2);
//000471:                     strassen_mult_parallel(
//000472:                         cancellationToken,
//000473:                         n_2,
//000474:                         A, ax, ay, a_s,
//000475:                         d_cum, 0, 0, n_2,
//000476:                         p3, 0, 0, n_2,
//000477:                         s);
//000478:                 }, cancellationToken);
//000479: 
//000480:                 // p4 = a22 x (b21 - b11) 
//000481:                 Task t_p4 = Task.Factory.StartNew(() =>
//000482:                 {
//000483:                     matrix_sub(n_2, n_2,
//000484:                         B, bx + n_2, by, bs,
//000485:                         B, bx, by, bs,
//000486:                         e_cum, 0, 0, n_2);
//000487:                     strassen_mult_parallel(
//000488:                         cancellationToken,
//000489:                         n_2,
//000490:                         A, ax + n_2, ay + n_2, a_s,
//000491:                         e_cum, 0, 0, n_2,
//000492:                         p4, 0, 0, n_2,
//000493:                         s);
//000494:                 }, cancellationToken);
//000495: 
//000496:                 // p5 = (a11 + a12) x b22 
//000497:                 Task t_p5 = Task.Factory.StartNew(() =>
//000498:                 {
//000499:                     matrix_add(n_2, n_2,
//000500:                         A, ax, ay, a_s,
//000501:                         A, ax, ay + n_2, a_s,
//000502:                         f_cum, 0, 0, n_2);
//000503:                     strassen_mult_parallel(
//000504:                         cancellationToken,
//000505:                         n_2,
//000506:                         f_cum, 0, 0, n_2,
//000507:                         B, bx + n_2, by + n_2, bs,
//000508:                         p5, 0, 0, n_2,
//000509:                         s);
//000510:                 }, cancellationToken);
//000511: 
//000512:                 // p6 = (a21 - a11) x (b11 + b12) 
//000513:                 Task t_p6 = Task.Factory.StartNew(() =>
//000514:                 {
//000515:                     matrix_sub(n_2, n_2,
//000516:                         A, ax + n_2, ay, a_s,
//000517:                         A, ax, ay, a_s,
//000518:                         g_cum, 0, 0, n_2);
//000519:                     matrix_add(n_2, n_2,
//000520:                         B, bx, by, bs,
//000521:                         B, bx, by + n_2, bs,
//000522:                         h_cum, 0, 0, n_2);
//000523:                     strassen_mult_parallel(
//000524:                         cancellationToken,
//000525:                         n_2,
//000526:                         g_cum, 0, 0, n_2,
//000527:                         h_cum, 0, 0, n_2,
//000528:                         p6, 0, 0, n_2,
//000529:                         s);
//000530:                 }, cancellationToken);
//000531: 
//000532:                 // p7 = (a12 - a22) x (b21 + b22) 
//000533:                 Task t_p7 = Task.Factory.StartNew(() =>
//000534:                 {
//000535:                     matrix_sub(n_2, n_2,
//000536:                         A, ax, ay + n_2, a_s,
//000537:                         A, ax + n_2, ay + n_2, a_s,
//000538:                         i_cum, 0, 0, n_2);
//000539:                     matrix_add(n_2, n_2,
//000540:                         B, bx + n_2, by, bs,
//000541:                         B, bx + n_2, by + n_2, bs,
//000542:                         j_cum, 0, 0, n_2);
//000543:                     strassen_mult_parallel(
//000544:                         cancellationToken,
//000545:                         n_2,
//000546:                         i_cum, 0, 0, n_2,
//000547:                         j_cum, 0, 0, n_2,
//000548:                         p7, 0, 0, n_2,
//000549:                         s);
//000550:                 }, cancellationToken);
//000551: 
//000552:                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
//000553:                 catch (AggregateException ae)
//000554:                 {
//000555:                     ae.Flatten().Handle(e => e is TaskCanceledException);
//000556:                     cancellationToken.ThrowIfCancellationRequested();
//000557:                 }
//000558: 
//000559:                 // c11 = p1 + p4 - p5 + p7 
//000560:                 Task t_c11 = Task.Factory.StartNew(() =>
//000561:                 {
//000562:                     matrix_add(n_2, n_2,
//000563:                         p1, 0, 0, n_2,
//000564:                         p4, 0, 0, n_2,
//000565:                         C, cx, cy, cs);
//000566:                     matrix_sub(n_2, n_2,
//000567:                         C, cx, cy, cs,
//000568:                         p5, 0, 0, n_2,
//000569:                         C, cx, cy, cs);
//000570:                     matrix_add(n_2, n_2,
//000571:                         C, cx, cy, cs,
//000572:                         p7, 0, 0, n_2,
//000573:                         C, cx, cy, cs);
//000574:                 });
//000575: 
//000576:                 // c12 = p3 + p5 
//000577:                 Task t_c12 = Task.Factory.StartNew(() =>
//000578:                 {
//000579:                     matrix_add(n_2, n_2,
//000580:                         p3, 0, 0, n_2,
//000581:                         p5, 0, 0, n_2,
//000582:                         C, cx, cy + n_2, cs);
//000583:                 });
//000584: 
//000585:                 // c21 = p2 + p4 
//000586:                 Task t_c21 = Task.Factory.StartNew(() =>
//000587:                 {
//000588:                     matrix_add(n_2, n_2,
//000589:                         p2, 0, 0, n_2,
//000590:                         p4, 0, 0, n_2,
//000591:                         C, cx + n_2, cy, cs);
//000592:                 });
//000593: 
//000594:                 // c22 = p1 + p3 - p2 + p6 
//000595:                 Task t_c22 = Task.Factory.StartNew(() =>
//000596:                 {
//000597:                     matrix_add(n_2, n_2,
//000598:                         p1, 0, 0, n_2,
//000599:                         p3, 0, 0, n_2,
//000600:                         C, cx + n_2, cy + n_2, cs);
//000601:                     matrix_sub(n_2, n_2,
//000602:                         C, cx + n_2, cy + n_2, cs,
//000603:                         p2, 0, 0, n_2,
//000604:                         C, cx + n_2, cy + n_2, cs);
//000605:                     matrix_add(n_2, n_2,
//000606:                         C, cx + n_2, cy + n_2, cs,
//000607:                         p6, 0, 0, n_2,
//000608:                         C, cx + n_2, cy + n_2, cs);
//000609:                 });
//000610: 
//000611:                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
//000612:             }
//000613:         }
//000614:     }
//000615: }
    IL_0399:  ldc.i4.0
    IL_039a:  conv.u
    IL_039b:  stloc.2
//000378:         }
    IL_039c:  nop
//000379:     }
    IL_039d:  ret
  } // end of method Matrix::strassen_mult_serial

  .method private hidebysig static void  strassen_mult_parallel(valuetype [mscorlib]System.Threading.CancellationToken cancellationToken,
                                                                int32 n,
                                                                int32* A,
                                                                int32 ax,
                                                                int32 ay,
                                                                int32 a_s,
                                                                int32* B,
                                                                int32 bx,
                                                                int32 by,
                                                                int32 bs,
                                                                int32* C,
                                                                int32 cx,
                                                                int32 cy,
                                                                int32 cs,
                                                                int32 s) cil managed
  {
    // Code size       1158 (0x486)
    .maxstack  16
    .locals init ([0] int32 areaSize,
             [1] int32[] workArr,
             [2] int32& pinned work,
             [3] class [mscorlib]System.Threading.Tasks.Task t_p1,
             [4] class [mscorlib]System.Threading.Tasks.Task t_p2,
             [5] class [mscorlib]System.Threading.Tasks.Task t_p3,
             [6] class [mscorlib]System.Threading.Tasks.Task t_p4,
             [7] class [mscorlib]System.Threading.Tasks.Task t_p5,
             [8] class [mscorlib]System.Threading.Tasks.Task t_p6,
             [9] class [mscorlib]System.Threading.Tasks.Task t_p7,
             [10] class [mscorlib]System.AggregateException ae,
             [11] class [mscorlib]System.Threading.Tasks.Task t_c11,
             [12] class [mscorlib]System.Threading.Tasks.Task t_c12,
             [13] class [mscorlib]System.Threading.Tasks.Task t_c21,
             [14] class [mscorlib]System.Threading.Tasks.Task t_c22,
             [15] class Matrix/'<>c__DisplayClass15' 'CS$<>8__locals16',
             [16] class Matrix/'<>c__DisplayClass13' 'CS$<>8__locals14',
             [17] class Matrix/'<>c__DisplayClass11' 'CS$<>8__locals12',
             [18] bool CS$4$0000,
             [19] int32[] CS$0$0001,
             [20] class [mscorlib]System.Threading.Tasks.Task[] CS$0$0002)
//000380: 
//000381:     private static void strassen_mult_parallel(
//000382:         CancellationToken cancellationToken, 
//000383:         // dimensions of A, B, and C submatrices 
//000384:         int n,
//000385:         // (ax,ay) = origin of A submatrix for multiplicand 
//000386:         int* A, int ax, int ay, int a_s,
//000387:         // (bx,by) = origin of B submatrix for multiplicand 
//000388:         int* B, int bx, int by, int bs,
//000389:         // (cx,cy) = origin of C submatrix for result 
//000390:         int* C, int cx, int cy, int cs,
//000391:         // Strassen's recursion limit for array dimensions 
//000392:         int s)
//000393:     {
//000394:         if (n <= s)
//000395:         {
//000396:             matrix_mult_serial(
//000397:                 cancellationToken,
//000398:                 n, n, n,
//000399:                 A, ax, ay, a_s,
//000400:                 B, bx, by, bs,
//000401:                 C, cx, cy, cs);
//000402:         }
//000403:         else
//000404:         {
//000405:             int n_2 = n >> 1;
//000406:             int areaSize = n_2 * n_2;
//000407:             int[] workArr = new int[areaSize * 17];
//000408:             fixed (int* work = workArr)
//000409:             {
//000410:                 int* a_cum = work;
//000411:                 int* b_cum = a_cum + areaSize;
//000412:                 int* c_cum = b_cum + areaSize;
//000413:                 int* d_cum = c_cum + areaSize;
//000414:                 int* e_cum = d_cum + areaSize;
//000415:                 int* f_cum = e_cum + areaSize;
//000416:                 int* g_cum = f_cum + areaSize;
//000417:                 int* h_cum = g_cum + areaSize;
//000418:                 int* i_cum = h_cum + areaSize;
//000419:                 int* j_cum = i_cum + areaSize;
//000420:                 int* p1 = j_cum + areaSize;
//000421:                 int* p2 = p1 + areaSize;
//000422:                 int* p3 = p2 + areaSize;
//000423:                 int* p4 = p3 + areaSize;
//000424:                 int* p5 = p4 + areaSize;
//000425:                 int* p6 = p5 + areaSize;
//000426:                 int* p7 = p6 + areaSize;
//000427: 
//000428:                 // p1 = (a11 + a22) * (b11 + b22) 
//000429:                 Task t_p1 = Task.Factory.StartNew(() =>
//000430:                 {
//000431:                     matrix_add(n_2, n_2,
//000432:                         A, ax, ay, a_s,
//000433:                         A, ax + n_2, ay + n_2, a_s,
//000434:                         a_cum, 0, 0, n_2);
//000435:                     matrix_add(n_2, n_2,
//000436:                         B, bx, by, bs,
//000437:                         B, bx + n_2, by + n_2, bs,
//000438:                         b_cum, 0, 0, n_2);
//000439:                     strassen_mult_parallel(
//000440:                         cancellationToken,
//000441:                         n_2,
//000442:                         a_cum, 0, 0, n_2,
//000443:                         b_cum, 0, 0, n_2,
//000444:                         p1, 0, 0, n_2,
//000445:                         s);
//000446:                 }, cancellationToken);
//000447: 
//000448:                 // p2 = (a21 + a22) * b11 
//000449:                 Task t_p2 = Task.Factory.StartNew(() =>
//000450:                 {
//000451:                     matrix_add(n_2, n_2,
//000452:                         A, ax + n_2, ay, a_s,
//000453:                         A, ax + n_2, ay + n_2, a_s,
//000454:                         c_cum, 0, 0, n_2);
//000455:                     strassen_mult_parallel(
//000456:                         cancellationToken,
//000457:                         n_2,
//000458:                         c_cum, 0, 0, n_2,
//000459:                         B, bx, by, bs,
//000460:                         p2, 0, 0, n_2,
//000461:                         s);
//000462:                 }, cancellationToken);
//000463: 
//000464:                 // p3 = a11 x (b12 - b22) 
//000465:                 Task t_p3 = Task.Factory.StartNew(() =>
//000466:                 {
//000467:                     matrix_sub(n_2, n_2,
//000468:                         B, bx, by + n_2, bs,
//000469:                         B, bx + n_2, by + n_2, bs,
//000470:                         d_cum, 0, 0, n_2);
//000471:                     strassen_mult_parallel(
//000472:                         cancellationToken,
//000473:                         n_2,
//000474:                         A, ax, ay, a_s,
//000475:                         d_cum, 0, 0, n_2,
//000476:                         p3, 0, 0, n_2,
//000477:                         s);
//000478:                 }, cancellationToken);
//000479: 
//000480:                 // p4 = a22 x (b21 - b11) 
//000481:                 Task t_p4 = Task.Factory.StartNew(() =>
//000482:                 {
//000483:                     matrix_sub(n_2, n_2,
//000484:                         B, bx + n_2, by, bs,
//000485:                         B, bx, by, bs,
//000486:                         e_cum, 0, 0, n_2);
//000487:                     strassen_mult_parallel(
//000488:                         cancellationToken,
//000489:                         n_2,
//000490:                         A, ax + n_2, ay + n_2, a_s,
//000491:                         e_cum, 0, 0, n_2,
//000492:                         p4, 0, 0, n_2,
//000493:                         s);
//000494:                 }, cancellationToken);
//000495: 
//000496:                 // p5 = (a11 + a12) x b22 
//000497:                 Task t_p5 = Task.Factory.StartNew(() =>
//000498:                 {
//000499:                     matrix_add(n_2, n_2,
//000500:                         A, ax, ay, a_s,
//000501:                         A, ax, ay + n_2, a_s,
//000502:                         f_cum, 0, 0, n_2);
//000503:                     strassen_mult_parallel(
//000504:                         cancellationToken,
//000505:                         n_2,
//000506:                         f_cum, 0, 0, n_2,
//000507:                         B, bx + n_2, by + n_2, bs,
//000508:                         p5, 0, 0, n_2,
//000509:                         s);
//000510:                 }, cancellationToken);
//000511: 
//000512:                 // p6 = (a21 - a11) x (b11 + b12) 
//000513:                 Task t_p6 = Task.Factory.StartNew(() =>
//000514:                 {
//000515:                     matrix_sub(n_2, n_2,
//000516:                         A, ax + n_2, ay, a_s,
//000517:                         A, ax, ay, a_s,
//000518:                         g_cum, 0, 0, n_2);
//000519:                     matrix_add(n_2, n_2,
//000520:                         B, bx, by, bs,
//000521:                         B, bx, by + n_2, bs,
//000522:                         h_cum, 0, 0, n_2);
//000523:                     strassen_mult_parallel(
//000524:                         cancellationToken,
//000525:                         n_2,
//000526:                         g_cum, 0, 0, n_2,
//000527:                         h_cum, 0, 0, n_2,
//000528:                         p6, 0, 0, n_2,
//000529:                         s);
//000530:                 }, cancellationToken);
//000531: 
//000532:                 // p7 = (a12 - a22) x (b21 + b22) 
//000533:                 Task t_p7 = Task.Factory.StartNew(() =>
//000534:                 {
//000535:                     matrix_sub(n_2, n_2,
//000536:                         A, ax, ay + n_2, a_s,
//000537:                         A, ax + n_2, ay + n_2, a_s,
//000538:                         i_cum, 0, 0, n_2);
//000539:                     matrix_add(n_2, n_2,
//000540:                         B, bx + n_2, by, bs,
//000541:                         B, bx + n_2, by + n_2, bs,
//000542:                         j_cum, 0, 0, n_2);
//000543:                     strassen_mult_parallel(
//000544:                         cancellationToken,
//000545:                         n_2,
//000546:                         i_cum, 0, 0, n_2,
//000547:                         j_cum, 0, 0, n_2,
//000548:                         p7, 0, 0, n_2,
//000549:                         s);
//000550:                 }, cancellationToken);
//000551: 
//000552:                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
//000553:                 catch (AggregateException ae)
//000554:                 {
//000555:                     ae.Flatten().Handle(e => e is TaskCanceledException);
//000556:                     cancellationToken.ThrowIfCancellationRequested();
//000557:                 }
//000558: 
//000559:                 // c11 = p1 + p4 - p5 + p7 
//000560:                 Task t_c11 = Task.Factory.StartNew(() =>
//000561:                 {
//000562:                     matrix_add(n_2, n_2,
//000563:                         p1, 0, 0, n_2,
//000564:                         p4, 0, 0, n_2,
//000565:                         C, cx, cy, cs);
//000566:                     matrix_sub(n_2, n_2,
//000567:                         C, cx, cy, cs,
//000568:                         p5, 0, 0, n_2,
//000569:                         C, cx, cy, cs);
//000570:                     matrix_add(n_2, n_2,
//000571:                         C, cx, cy, cs,
//000572:                         p7, 0, 0, n_2,
//000573:                         C, cx, cy, cs);
//000574:                 });
//000575: 
//000576:                 // c12 = p3 + p5 
//000577:                 Task t_c12 = Task.Factory.StartNew(() =>
//000578:                 {
//000579:                     matrix_add(n_2, n_2,
//000580:                         p3, 0, 0, n_2,
//000581:                         p5, 0, 0, n_2,
//000582:                         C, cx, cy + n_2, cs);
//000583:                 });
//000584: 
//000585:                 // c21 = p2 + p4 
//000586:                 Task t_c21 = Task.Factory.StartNew(() =>
//000587:                 {
//000588:                     matrix_add(n_2, n_2,
//000589:                         p2, 0, 0, n_2,
//000590:                         p4, 0, 0, n_2,
//000591:                         C, cx + n_2, cy, cs);
//000592:                 });
//000593: 
//000594:                 // c22 = p1 + p3 - p2 + p6 
//000595:                 Task t_c22 = Task.Factory.StartNew(() =>
//000596:                 {
//000597:                     matrix_add(n_2, n_2,
//000598:                         p1, 0, 0, n_2,
//000599:                         p3, 0, 0, n_2,
//000600:                         C, cx + n_2, cy + n_2, cs);
//000601:                     matrix_sub(n_2, n_2,
//000602:                         C, cx + n_2, cy + n_2, cs,
//000603:                         p2, 0, 0, n_2,
//000604:                         C, cx + n_2, cy + n_2, cs);
//000605:                     matrix_add(n_2, n_2,
//000606:                         C, cx + n_2, cy + n_2, cs,
//000607:                         p6, 0, 0, n_2,
//000608:                         C, cx + n_2, cy + n_2, cs);
//000609:                 });
//000610: 
//000611:                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
//000612:             }
//000613:         }
//000614:     }
//000615: }
    IL_0000:  newobj     instance void Matrix/'<>c__DisplayClass11'::.ctor()
    IL_0005:  stloc.s    'CS$<>8__locals12'
    IL_0007:  ldloc.s    'CS$<>8__locals12'
    IL_0009:  ldarg.0
    IL_000a:  stfld      valuetype [mscorlib]System.Threading.CancellationToken Matrix/'<>c__DisplayClass11'::cancellationToken
    IL_000f:  ldloc.s    'CS$<>8__locals12'
    IL_0011:  ldarg.2
    IL_0012:  stfld      int32* Matrix/'<>c__DisplayClass11'::A
    IL_0017:  ldloc.s    'CS$<>8__locals12'
    IL_0019:  ldarg.3
    IL_001a:  stfld      int32 Matrix/'<>c__DisplayClass11'::ax
    IL_001f:  ldloc.s    'CS$<>8__locals12'
    IL_0021:  ldarg.s    ay
    IL_0023:  stfld      int32 Matrix/'<>c__DisplayClass11'::ay
    IL_0028:  ldloc.s    'CS$<>8__locals12'
    IL_002a:  ldarg.s    a_s
    IL_002c:  stfld      int32 Matrix/'<>c__DisplayClass11'::a_s
    IL_0031:  ldloc.s    'CS$<>8__locals12'
    IL_0033:  ldarg.s    B
    IL_0035:  stfld      int32* Matrix/'<>c__DisplayClass11'::B
    IL_003a:  ldloc.s    'CS$<>8__locals12'
    IL_003c:  ldarg.s    bx
    IL_003e:  stfld      int32 Matrix/'<>c__DisplayClass11'::bx
    IL_0043:  ldloc.s    'CS$<>8__locals12'
    IL_0045:  ldarg.s    by
    IL_0047:  stfld      int32 Matrix/'<>c__DisplayClass11'::by
    IL_004c:  ldloc.s    'CS$<>8__locals12'
    IL_004e:  ldarg.s    bs
    IL_0050:  stfld      int32 Matrix/'<>c__DisplayClass11'::bs
    IL_0055:  ldloc.s    'CS$<>8__locals12'
    IL_0057:  ldarg.s    C
    IL_0059:  stfld      int32* Matrix/'<>c__DisplayClass11'::C
    IL_005e:  ldloc.s    'CS$<>8__locals12'
    IL_0060:  ldarg.s    cx
    IL_0062:  stfld      int32 Matrix/'<>c__DisplayClass11'::cx
    IL_0067:  ldloc.s    'CS$<>8__locals12'
    IL_0069:  ldarg.s    cy
    IL_006b:  stfld      int32 Matrix/'<>c__DisplayClass11'::cy
    IL_0070:  ldloc.s    'CS$<>8__locals12'
    IL_0072:  ldarg.s    cs
    IL_0074:  stfld      int32 Matrix/'<>c__DisplayClass11'::cs
    IL_0079:  ldloc.s    'CS$<>8__locals12'
    IL_007b:  ldarg.s    s
    IL_007d:  stfld      int32 Matrix/'<>c__DisplayClass11'::s
//000393:     {
    IL_0082:  nop
//000394:         if (n <= s)
    IL_0083:  ldarg.1
    IL_0084:  ldloc.s    'CS$<>8__locals12'
    IL_0086:  ldfld      int32 Matrix/'<>c__DisplayClass11'::s
    IL_008b:  cgt
    IL_008d:  stloc.s    CS$4$0000
//000395:         {
//000396:             matrix_mult_serial(
//000397:                 cancellationToken,
//000398:                 n, n, n,
//000399:                 A, ax, ay, a_s,
//000400:                 B, bx, by, bs,
//000401:                 C, cx, cy, cs);
//000402:         }
//000403:         else
//000404:         {
//000405:             int n_2 = n >> 1;
//000406:             int areaSize = n_2 * n_2;
//000407:             int[] workArr = new int[areaSize * 17];
//000408:             fixed (int* work = workArr)
//000409:             {
//000410:                 int* a_cum = work;
//000411:                 int* b_cum = a_cum + areaSize;
//000412:                 int* c_cum = b_cum + areaSize;
//000413:                 int* d_cum = c_cum + areaSize;
//000414:                 int* e_cum = d_cum + areaSize;
//000415:                 int* f_cum = e_cum + areaSize;
//000416:                 int* g_cum = f_cum + areaSize;
//000417:                 int* h_cum = g_cum + areaSize;
//000418:                 int* i_cum = h_cum + areaSize;
//000419:                 int* j_cum = i_cum + areaSize;
//000420:                 int* p1 = j_cum + areaSize;
//000421:                 int* p2 = p1 + areaSize;
//000422:                 int* p3 = p2 + areaSize;
//000423:                 int* p4 = p3 + areaSize;
//000424:                 int* p5 = p4 + areaSize;
//000425:                 int* p6 = p5 + areaSize;
//000426:                 int* p7 = p6 + areaSize;
//000427: 
//000428:                 // p1 = (a11 + a22) * (b11 + b22) 
//000429:                 Task t_p1 = Task.Factory.StartNew(() =>
//000430:                 {
//000431:                     matrix_add(n_2, n_2,
//000432:                         A, ax, ay, a_s,
//000433:                         A, ax + n_2, ay + n_2, a_s,
//000434:                         a_cum, 0, 0, n_2);
//000435:                     matrix_add(n_2, n_2,
//000436:                         B, bx, by, bs,
//000437:                         B, bx + n_2, by + n_2, bs,
//000438:                         b_cum, 0, 0, n_2);
//000439:                     strassen_mult_parallel(
//000440:                         cancellationToken,
//000441:                         n_2,
//000442:                         a_cum, 0, 0, n_2,
//000443:                         b_cum, 0, 0, n_2,
//000444:                         p1, 0, 0, n_2,
//000445:                         s);
//000446:                 }, cancellationToken);
//000447: 
//000448:                 // p2 = (a21 + a22) * b11 
//000449:                 Task t_p2 = Task.Factory.StartNew(() =>
//000450:                 {
//000451:                     matrix_add(n_2, n_2,
//000452:                         A, ax + n_2, ay, a_s,
//000453:                         A, ax + n_2, ay + n_2, a_s,
//000454:                         c_cum, 0, 0, n_2);
//000455:                     strassen_mult_parallel(
//000456:                         cancellationToken,
//000457:                         n_2,
//000458:                         c_cum, 0, 0, n_2,
//000459:                         B, bx, by, bs,
//000460:                         p2, 0, 0, n_2,
//000461:                         s);
//000462:                 }, cancellationToken);
//000463: 
//000464:                 // p3 = a11 x (b12 - b22) 
//000465:                 Task t_p3 = Task.Factory.StartNew(() =>
//000466:                 {
//000467:                     matrix_sub(n_2, n_2,
//000468:                         B, bx, by + n_2, bs,
//000469:                         B, bx + n_2, by + n_2, bs,
//000470:                         d_cum, 0, 0, n_2);
//000471:                     strassen_mult_parallel(
//000472:                         cancellationToken,
//000473:                         n_2,
//000474:                         A, ax, ay, a_s,
//000475:                         d_cum, 0, 0, n_2,
//000476:                         p3, 0, 0, n_2,
//000477:                         s);
//000478:                 }, cancellationToken);
//000479: 
//000480:                 // p4 = a22 x (b21 - b11) 
//000481:                 Task t_p4 = Task.Factory.StartNew(() =>
//000482:                 {
//000483:                     matrix_sub(n_2, n_2,
//000484:                         B, bx + n_2, by, bs,
//000485:                         B, bx, by, bs,
//000486:                         e_cum, 0, 0, n_2);
//000487:                     strassen_mult_parallel(
//000488:                         cancellationToken,
//000489:                         n_2,
//000490:                         A, ax + n_2, ay + n_2, a_s,
//000491:                         e_cum, 0, 0, n_2,
//000492:                         p4, 0, 0, n_2,
//000493:                         s);
//000494:                 }, cancellationToken);
//000495: 
//000496:                 // p5 = (a11 + a12) x b22 
//000497:                 Task t_p5 = Task.Factory.StartNew(() =>
//000498:                 {
//000499:                     matrix_add(n_2, n_2,
//000500:                         A, ax, ay, a_s,
//000501:                         A, ax, ay + n_2, a_s,
//000502:                         f_cum, 0, 0, n_2);
//000503:                     strassen_mult_parallel(
//000504:                         cancellationToken,
//000505:                         n_2,
//000506:                         f_cum, 0, 0, n_2,
//000507:                         B, bx + n_2, by + n_2, bs,
//000508:                         p5, 0, 0, n_2,
//000509:                         s);
//000510:                 }, cancellationToken);
//000511: 
//000512:                 // p6 = (a21 - a11) x (b11 + b12) 
//000513:                 Task t_p6 = Task.Factory.StartNew(() =>
//000514:                 {
//000515:                     matrix_sub(n_2, n_2,
//000516:                         A, ax + n_2, ay, a_s,
//000517:                         A, ax, ay, a_s,
//000518:                         g_cum, 0, 0, n_2);
//000519:                     matrix_add(n_2, n_2,
//000520:                         B, bx, by, bs,
//000521:                         B, bx, by + n_2, bs,
//000522:                         h_cum, 0, 0, n_2);
//000523:                     strassen_mult_parallel(
//000524:                         cancellationToken,
//000525:                         n_2,
//000526:                         g_cum, 0, 0, n_2,
//000527:                         h_cum, 0, 0, n_2,
//000528:                         p6, 0, 0, n_2,
//000529:                         s);
//000530:                 }, cancellationToken);
//000531: 
//000532:                 // p7 = (a12 - a22) x (b21 + b22) 
//000533:                 Task t_p7 = Task.Factory.StartNew(() =>
//000534:                 {
//000535:                     matrix_sub(n_2, n_2,
//000536:                         A, ax, ay + n_2, a_s,
//000537:                         A, ax + n_2, ay + n_2, a_s,
//000538:                         i_cum, 0, 0, n_2);
//000539:                     matrix_add(n_2, n_2,
//000540:                         B, bx + n_2, by, bs,
//000541:                         B, bx + n_2, by + n_2, bs,
//000542:                         j_cum, 0, 0, n_2);
//000543:                     strassen_mult_parallel(
//000544:                         cancellationToken,
//000545:                         n_2,
//000546:                         i_cum, 0, 0, n_2,
//000547:                         j_cum, 0, 0, n_2,
//000548:                         p7, 0, 0, n_2,
//000549:                         s);
//000550:                 }, cancellationToken);
//000551: 
//000552:                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
//000553:                 catch (AggregateException ae)
//000554:                 {
//000555:                     ae.Flatten().Handle(e => e is TaskCanceledException);
//000556:                     cancellationToken.ThrowIfCancellationRequested();
//000557:                 }
//000558: 
//000559:                 // c11 = p1 + p4 - p5 + p7 
//000560:                 Task t_c11 = Task.Factory.StartNew(() =>
//000561:                 {
//000562:                     matrix_add(n_2, n_2,
//000563:                         p1, 0, 0, n_2,
//000564:                         p4, 0, 0, n_2,
//000565:                         C, cx, cy, cs);
//000566:                     matrix_sub(n_2, n_2,
//000567:                         C, cx, cy, cs,
//000568:                         p5, 0, 0, n_2,
//000569:                         C, cx, cy, cs);
//000570:                     matrix_add(n_2, n_2,
//000571:                         C, cx, cy, cs,
//000572:                         p7, 0, 0, n_2,
//000573:                         C, cx, cy, cs);
//000574:                 });
//000575: 
//000576:                 // c12 = p3 + p5 
//000577:                 Task t_c12 = Task.Factory.StartNew(() =>
//000578:                 {
//000579:                     matrix_add(n_2, n_2,
//000580:                         p3, 0, 0, n_2,
//000581:                         p5, 0, 0, n_2,
//000582:                         C, cx, cy + n_2, cs);
//000583:                 });
//000584: 
//000585:                 // c21 = p2 + p4 
//000586:                 Task t_c21 = Task.Factory.StartNew(() =>
//000587:                 {
//000588:                     matrix_add(n_2, n_2,
//000589:                         p2, 0, 0, n_2,
//000590:                         p4, 0, 0, n_2,
//000591:                         C, cx + n_2, cy, cs);
//000592:                 });
//000593: 
//000594:                 // c22 = p1 + p3 - p2 + p6 
//000595:                 Task t_c22 = Task.Factory.StartNew(() =>
//000596:                 {
//000597:                     matrix_add(n_2, n_2,
//000598:                         p1, 0, 0, n_2,
//000599:                         p3, 0, 0, n_2,
//000600:                         C, cx + n_2, cy + n_2, cs);
//000601:                     matrix_sub(n_2, n_2,
//000602:                         C, cx + n_2, cy + n_2, cs,
//000603:                         p2, 0, 0, n_2,
//000604:                         C, cx + n_2, cy + n_2, cs);
//000605:                     matrix_add(n_2, n_2,
//000606:                         C, cx + n_2, cy + n_2, cs,
//000607:                         p6, 0, 0, n_2,
//000608:                         C, cx + n_2, cy + n_2, cs);
//000609:                 });
//000610: 
//000611:                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
//000612:             }
//000613:         }
//000614:     }
//000615: }
    IL_008f:  ldloc.s    CS$4$0000
    IL_0091:  brtrue.s   IL_00fe

//000395:         {
    IL_0093:  nop
//000396:             matrix_mult_serial(
    IL_0094:  ldloc.s    'CS$<>8__locals12'
    IL_0096:  ldfld      valuetype [mscorlib]System.Threading.CancellationToken Matrix/'<>c__DisplayClass11'::cancellationToken
    IL_009b:  ldarg.1
    IL_009c:  ldarg.1
    IL_009d:  ldarg.1
    IL_009e:  ldloc.s    'CS$<>8__locals12'
    IL_00a0:  ldfld      int32* Matrix/'<>c__DisplayClass11'::A
    IL_00a5:  ldloc.s    'CS$<>8__locals12'
    IL_00a7:  ldfld      int32 Matrix/'<>c__DisplayClass11'::ax
    IL_00ac:  ldloc.s    'CS$<>8__locals12'
    IL_00ae:  ldfld      int32 Matrix/'<>c__DisplayClass11'::ay
    IL_00b3:  ldloc.s    'CS$<>8__locals12'
    IL_00b5:  ldfld      int32 Matrix/'<>c__DisplayClass11'::a_s
    IL_00ba:  ldloc.s    'CS$<>8__locals12'
    IL_00bc:  ldfld      int32* Matrix/'<>c__DisplayClass11'::B
    IL_00c1:  ldloc.s    'CS$<>8__locals12'
    IL_00c3:  ldfld      int32 Matrix/'<>c__DisplayClass11'::bx
    IL_00c8:  ldloc.s    'CS$<>8__locals12'
    IL_00ca:  ldfld      int32 Matrix/'<>c__DisplayClass11'::by
    IL_00cf:  ldloc.s    'CS$<>8__locals12'
    IL_00d1:  ldfld      int32 Matrix/'<>c__DisplayClass11'::bs
    IL_00d6:  ldloc.s    'CS$<>8__locals12'
    IL_00d8:  ldfld      int32* Matrix/'<>c__DisplayClass11'::C
    IL_00dd:  ldloc.s    'CS$<>8__locals12'
    IL_00df:  ldfld      int32 Matrix/'<>c__DisplayClass11'::cx
    IL_00e4:  ldloc.s    'CS$<>8__locals12'
    IL_00e6:  ldfld      int32 Matrix/'<>c__DisplayClass11'::cy
    IL_00eb:  ldloc.s    'CS$<>8__locals12'
    IL_00ed:  ldfld      int32 Matrix/'<>c__DisplayClass11'::cs
    IL_00f2:  call       void Matrix::matrix_mult_serial(valuetype [mscorlib]System.Threading.CancellationToken,
                                                         int32,
                                                         int32,
                                                         int32,
                                                         int32*,
                                                         int32,
                                                         int32,
                                                         int32,
                                                         int32*,
                                                         int32,
                                                         int32,
                                                         int32,
                                                         int32*,
                                                         int32,
                                                         int32,
                                                         int32)
    IL_00f7:  nop
//000397:                 cancellationToken,
//000398:                 n, n, n,
//000399:                 A, ax, ay, a_s,
//000400:                 B, bx, by, bs,
//000401:                 C, cx, cy, cs);
//000402:         }
    IL_00f8:  nop
//000403:         else
//000404:         {
//000405:             int n_2 = n >> 1;
//000406:             int areaSize = n_2 * n_2;
//000407:             int[] workArr = new int[areaSize * 17];
//000408:             fixed (int* work = workArr)
//000409:             {
//000410:                 int* a_cum = work;
//000411:                 int* b_cum = a_cum + areaSize;
//000412:                 int* c_cum = b_cum + areaSize;
//000413:                 int* d_cum = c_cum + areaSize;
//000414:                 int* e_cum = d_cum + areaSize;
//000415:                 int* f_cum = e_cum + areaSize;
//000416:                 int* g_cum = f_cum + areaSize;
//000417:                 int* h_cum = g_cum + areaSize;
//000418:                 int* i_cum = h_cum + areaSize;
//000419:                 int* j_cum = i_cum + areaSize;
//000420:                 int* p1 = j_cum + areaSize;
//000421:                 int* p2 = p1 + areaSize;
//000422:                 int* p3 = p2 + areaSize;
//000423:                 int* p4 = p3 + areaSize;
//000424:                 int* p5 = p4 + areaSize;
//000425:                 int* p6 = p5 + areaSize;
//000426:                 int* p7 = p6 + areaSize;
//000427: 
//000428:                 // p1 = (a11 + a22) * (b11 + b22) 
//000429:                 Task t_p1 = Task.Factory.StartNew(() =>
//000430:                 {
//000431:                     matrix_add(n_2, n_2,
//000432:                         A, ax, ay, a_s,
//000433:                         A, ax + n_2, ay + n_2, a_s,
//000434:                         a_cum, 0, 0, n_2);
//000435:                     matrix_add(n_2, n_2,
//000436:                         B, bx, by, bs,
//000437:                         B, bx + n_2, by + n_2, bs,
//000438:                         b_cum, 0, 0, n_2);
//000439:                     strassen_mult_parallel(
//000440:                         cancellationToken,
//000441:                         n_2,
//000442:                         a_cum, 0, 0, n_2,
//000443:                         b_cum, 0, 0, n_2,
//000444:                         p1, 0, 0, n_2,
//000445:                         s);
//000446:                 }, cancellationToken);
//000447: 
//000448:                 // p2 = (a21 + a22) * b11 
//000449:                 Task t_p2 = Task.Factory.StartNew(() =>
//000450:                 {
//000451:                     matrix_add(n_2, n_2,
//000452:                         A, ax + n_2, ay, a_s,
//000453:                         A, ax + n_2, ay + n_2, a_s,
//000454:                         c_cum, 0, 0, n_2);
//000455:                     strassen_mult_parallel(
//000456:                         cancellationToken,
//000457:                         n_2,
//000458:                         c_cum, 0, 0, n_2,
//000459:                         B, bx, by, bs,
//000460:                         p2, 0, 0, n_2,
//000461:                         s);
//000462:                 }, cancellationToken);
//000463: 
//000464:                 // p3 = a11 x (b12 - b22) 
//000465:                 Task t_p3 = Task.Factory.StartNew(() =>
//000466:                 {
//000467:                     matrix_sub(n_2, n_2,
//000468:                         B, bx, by + n_2, bs,
//000469:                         B, bx + n_2, by + n_2, bs,
//000470:                         d_cum, 0, 0, n_2);
//000471:                     strassen_mult_parallel(
//000472:                         cancellationToken,
//000473:                         n_2,
//000474:                         A, ax, ay, a_s,
//000475:                         d_cum, 0, 0, n_2,
//000476:                         p3, 0, 0, n_2,
//000477:                         s);
//000478:                 }, cancellationToken);
//000479: 
//000480:                 // p4 = a22 x (b21 - b11) 
//000481:                 Task t_p4 = Task.Factory.StartNew(() =>
//000482:                 {
//000483:                     matrix_sub(n_2, n_2,
//000484:                         B, bx + n_2, by, bs,
//000485:                         B, bx, by, bs,
//000486:                         e_cum, 0, 0, n_2);
//000487:                     strassen_mult_parallel(
//000488:                         cancellationToken,
//000489:                         n_2,
//000490:                         A, ax + n_2, ay + n_2, a_s,
//000491:                         e_cum, 0, 0, n_2,
//000492:                         p4, 0, 0, n_2,
//000493:                         s);
//000494:                 }, cancellationToken);
//000495: 
//000496:                 // p5 = (a11 + a12) x b22 
//000497:                 Task t_p5 = Task.Factory.StartNew(() =>
//000498:                 {
//000499:                     matrix_add(n_2, n_2,
//000500:                         A, ax, ay, a_s,
//000501:                         A, ax, ay + n_2, a_s,
//000502:                         f_cum, 0, 0, n_2);
//000503:                     strassen_mult_parallel(
//000504:                         cancellationToken,
//000505:                         n_2,
//000506:                         f_cum, 0, 0, n_2,
//000507:                         B, bx + n_2, by + n_2, bs,
//000508:                         p5, 0, 0, n_2,
//000509:                         s);
//000510:                 }, cancellationToken);
//000511: 
//000512:                 // p6 = (a21 - a11) x (b11 + b12) 
//000513:                 Task t_p6 = Task.Factory.StartNew(() =>
//000514:                 {
//000515:                     matrix_sub(n_2, n_2,
//000516:                         A, ax + n_2, ay, a_s,
//000517:                         A, ax, ay, a_s,
//000518:                         g_cum, 0, 0, n_2);
//000519:                     matrix_add(n_2, n_2,
//000520:                         B, bx, by, bs,
//000521:                         B, bx, by + n_2, bs,
//000522:                         h_cum, 0, 0, n_2);
//000523:                     strassen_mult_parallel(
//000524:                         cancellationToken,
//000525:                         n_2,
//000526:                         g_cum, 0, 0, n_2,
//000527:                         h_cum, 0, 0, n_2,
//000528:                         p6, 0, 0, n_2,
//000529:                         s);
//000530:                 }, cancellationToken);
//000531: 
//000532:                 // p7 = (a12 - a22) x (b21 + b22) 
//000533:                 Task t_p7 = Task.Factory.StartNew(() =>
//000534:                 {
//000535:                     matrix_sub(n_2, n_2,
//000536:                         A, ax, ay + n_2, a_s,
//000537:                         A, ax + n_2, ay + n_2, a_s,
//000538:                         i_cum, 0, 0, n_2);
//000539:                     matrix_add(n_2, n_2,
//000540:                         B, bx + n_2, by, bs,
//000541:                         B, bx + n_2, by + n_2, bs,
//000542:                         j_cum, 0, 0, n_2);
//000543:                     strassen_mult_parallel(
//000544:                         cancellationToken,
//000545:                         n_2,
//000546:                         i_cum, 0, 0, n_2,
//000547:                         j_cum, 0, 0, n_2,
//000548:                         p7, 0, 0, n_2,
//000549:                         s);
//000550:                 }, cancellationToken);
//000551: 
//000552:                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
//000553:                 catch (AggregateException ae)
//000554:                 {
//000555:                     ae.Flatten().Handle(e => e is TaskCanceledException);
//000556:                     cancellationToken.ThrowIfCancellationRequested();
//000557:                 }
//000558: 
//000559:                 // c11 = p1 + p4 - p5 + p7 
//000560:                 Task t_c11 = Task.Factory.StartNew(() =>
//000561:                 {
//000562:                     matrix_add(n_2, n_2,
//000563:                         p1, 0, 0, n_2,
//000564:                         p4, 0, 0, n_2,
//000565:                         C, cx, cy, cs);
//000566:                     matrix_sub(n_2, n_2,
//000567:                         C, cx, cy, cs,
//000568:                         p5, 0, 0, n_2,
//000569:                         C, cx, cy, cs);
//000570:                     matrix_add(n_2, n_2,
//000571:                         C, cx, cy, cs,
//000572:                         p7, 0, 0, n_2,
//000573:                         C, cx, cy, cs);
//000574:                 });
//000575: 
//000576:                 // c12 = p3 + p5 
//000577:                 Task t_c12 = Task.Factory.StartNew(() =>
//000578:                 {
//000579:                     matrix_add(n_2, n_2,
//000580:                         p3, 0, 0, n_2,
//000581:                         p5, 0, 0, n_2,
//000582:                         C, cx, cy + n_2, cs);
//000583:                 });
//000584: 
//000585:                 // c21 = p2 + p4 
//000586:                 Task t_c21 = Task.Factory.StartNew(() =>
//000587:                 {
//000588:                     matrix_add(n_2, n_2,
//000589:                         p2, 0, 0, n_2,
//000590:                         p4, 0, 0, n_2,
//000591:                         C, cx + n_2, cy, cs);
//000592:                 });
//000593: 
//000594:                 // c22 = p1 + p3 - p2 + p6 
//000595:                 Task t_c22 = Task.Factory.StartNew(() =>
//000596:                 {
//000597:                     matrix_add(n_2, n_2,
//000598:                         p1, 0, 0, n_2,
//000599:                         p3, 0, 0, n_2,
//000600:                         C, cx + n_2, cy + n_2, cs);
//000601:                     matrix_sub(n_2, n_2,
//000602:                         C, cx + n_2, cy + n_2, cs,
//000603:                         p2, 0, 0, n_2,
//000604:                         C, cx + n_2, cy + n_2, cs);
//000605:                     matrix_add(n_2, n_2,
//000606:                         C, cx + n_2, cy + n_2, cs,
//000607:                         p6, 0, 0, n_2,
//000608:                         C, cx + n_2, cy + n_2, cs);
//000609:                 });
//000610: 
//000611:                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
//000612:             }
//000613:         }
//000614:     }
//000615: }
    IL_00f9:  br         IL_0484

    IL_00fe:  newobj     instance void Matrix/'<>c__DisplayClass13'::.ctor()
    IL_0103:  stloc.s    'CS$<>8__locals14'
//000404:         {
    IL_0105:  nop
//000405:             int n_2 = n >> 1;
    IL_0106:  ldloc.s    'CS$<>8__locals14'
    IL_0108:  ldarg.1
    IL_0109:  ldc.i4.1
    IL_010a:  shr
    IL_010b:  stfld      int32 Matrix/'<>c__DisplayClass13'::n_2
//000406:             int areaSize = n_2 * n_2;
    IL_0110:  ldloc.s    'CS$<>8__locals14'
    IL_0112:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
    IL_0117:  ldloc.s    'CS$<>8__locals14'
    IL_0119:  ldfld      int32 Matrix/'<>c__DisplayClass13'::n_2
    IL_011e:  mul
    IL_011f:  stloc.0
//000407:             int[] workArr = new int[areaSize * 17];
    IL_0120:  ldloc.0
    IL_0121:  ldc.i4.s   17
    IL_0123:  mul
    IL_0124:  newarr     [mscorlib]System.Int32
    IL_0129:  stloc.1
//000408:             fixed (int* work = workArr)
    IL_012a:  ldloc.1
    IL_012b:  dup
    IL_012c:  stloc.s    CS$0$0001
    IL_012e:  brfalse.s  IL_0136

    IL_0130:  ldloc.s    CS$0$0001
    IL_0132:  ldlen
    IL_0133:  conv.i4
    IL_0134:  brtrue.s   IL_013b

    IL_0136:  ldc.i4.0
    IL_0137:  conv.u
    IL_0138:  stloc.2
    IL_0139:  br.s       IL_0144

    IL_013b:  ldloc.s    CS$0$0001
    IL_013d:  ldc.i4.0
    IL_013e:  ldelema    [mscorlib]System.Int32
    IL_0143:  stloc.2
//000409:             {
//000410:                 int* a_cum = work;
//000411:                 int* b_cum = a_cum + areaSize;
//000412:                 int* c_cum = b_cum + areaSize;
//000413:                 int* d_cum = c_cum + areaSize;
//000414:                 int* e_cum = d_cum + areaSize;
//000415:                 int* f_cum = e_cum + areaSize;
//000416:                 int* g_cum = f_cum + areaSize;
//000417:                 int* h_cum = g_cum + areaSize;
//000418:                 int* i_cum = h_cum + areaSize;
//000419:                 int* j_cum = i_cum + areaSize;
//000420:                 int* p1 = j_cum + areaSize;
//000421:                 int* p2 = p1 + areaSize;
//000422:                 int* p3 = p2 + areaSize;
//000423:                 int* p4 = p3 + areaSize;
//000424:                 int* p5 = p4 + areaSize;
//000425:                 int* p6 = p5 + areaSize;
//000426:                 int* p7 = p6 + areaSize;
//000427: 
//000428:                 // p1 = (a11 + a22) * (b11 + b22) 
//000429:                 Task t_p1 = Task.Factory.StartNew(() =>
//000430:                 {
//000431:                     matrix_add(n_2, n_2,
//000432:                         A, ax, ay, a_s,
//000433:                         A, ax + n_2, ay + n_2, a_s,
//000434:                         a_cum, 0, 0, n_2);
//000435:                     matrix_add(n_2, n_2,
//000436:                         B, bx, by, bs,
//000437:                         B, bx + n_2, by + n_2, bs,
//000438:                         b_cum, 0, 0, n_2);
//000439:                     strassen_mult_parallel(
//000440:                         cancellationToken,
//000441:                         n_2,
//000442:                         a_cum, 0, 0, n_2,
//000443:                         b_cum, 0, 0, n_2,
//000444:                         p1, 0, 0, n_2,
//000445:                         s);
//000446:                 }, cancellationToken);
//000447: 
//000448:                 // p2 = (a21 + a22) * b11 
//000449:                 Task t_p2 = Task.Factory.StartNew(() =>
//000450:                 {
//000451:                     matrix_add(n_2, n_2,
//000452:                         A, ax + n_2, ay, a_s,
//000453:                         A, ax + n_2, ay + n_2, a_s,
//000454:                         c_cum, 0, 0, n_2);
//000455:                     strassen_mult_parallel(
//000456:                         cancellationToken,
//000457:                         n_2,
//000458:                         c_cum, 0, 0, n_2,
//000459:                         B, bx, by, bs,
//000460:                         p2, 0, 0, n_2,
//000461:                         s);
//000462:                 }, cancellationToken);
//000463: 
//000464:                 // p3 = a11 x (b12 - b22) 
//000465:                 Task t_p3 = Task.Factory.StartNew(() =>
//000466:                 {
//000467:                     matrix_sub(n_2, n_2,
//000468:                         B, bx, by + n_2, bs,
//000469:                         B, bx + n_2, by + n_2, bs,
//000470:                         d_cum, 0, 0, n_2);
//000471:                     strassen_mult_parallel(
//000472:                         cancellationToken,
//000473:                         n_2,
//000474:                         A, ax, ay, a_s,
//000475:                         d_cum, 0, 0, n_2,
//000476:                         p3, 0, 0, n_2,
//000477:                         s);
//000478:                 }, cancellationToken);
//000479: 
//000480:                 // p4 = a22 x (b21 - b11) 
//000481:                 Task t_p4 = Task.Factory.StartNew(() =>
//000482:                 {
//000483:                     matrix_sub(n_2, n_2,
//000484:                         B, bx + n_2, by, bs,
//000485:                         B, bx, by, bs,
//000486:                         e_cum, 0, 0, n_2);
//000487:                     strassen_mult_parallel(
//000488:                         cancellationToken,
//000489:                         n_2,
//000490:                         A, ax + n_2, ay + n_2, a_s,
//000491:                         e_cum, 0, 0, n_2,
//000492:                         p4, 0, 0, n_2,
//000493:                         s);
//000494:                 }, cancellationToken);
//000495: 
//000496:                 // p5 = (a11 + a12) x b22 
//000497:                 Task t_p5 = Task.Factory.StartNew(() =>
//000498:                 {
//000499:                     matrix_add(n_2, n_2,
//000500:                         A, ax, ay, a_s,
//000501:                         A, ax, ay + n_2, a_s,
//000502:                         f_cum, 0, 0, n_2);
//000503:                     strassen_mult_parallel(
//000504:                         cancellationToken,
//000505:                         n_2,
//000506:                         f_cum, 0, 0, n_2,
//000507:                         B, bx + n_2, by + n_2, bs,
//000508:                         p5, 0, 0, n_2,
//000509:                         s);
//000510:                 }, cancellationToken);
//000511: 
//000512:                 // p6 = (a21 - a11) x (b11 + b12) 
//000513:                 Task t_p6 = Task.Factory.StartNew(() =>
//000514:                 {
//000515:                     matrix_sub(n_2, n_2,
//000516:                         A, ax + n_2, ay, a_s,
//000517:                         A, ax, ay, a_s,
//000518:                         g_cum, 0, 0, n_2);
//000519:                     matrix_add(n_2, n_2,
//000520:                         B, bx, by, bs,
//000521:                         B, bx, by + n_2, bs,
//000522:                         h_cum, 0, 0, n_2);
//000523:                     strassen_mult_parallel(
//000524:                         cancellationToken,
//000525:                         n_2,
//000526:                         g_cum, 0, 0, n_2,
//000527:                         h_cum, 0, 0, n_2,
//000528:                         p6, 0, 0, n_2,
//000529:                         s);
//000530:                 }, cancellationToken);
//000531: 
//000532:                 // p7 = (a12 - a22) x (b21 + b22) 
//000533:                 Task t_p7 = Task.Factory.StartNew(() =>
//000534:                 {
//000535:                     matrix_sub(n_2, n_2,
//000536:                         A, ax, ay + n_2, a_s,
//000537:                         A, ax + n_2, ay + n_2, a_s,
//000538:                         i_cum, 0, 0, n_2);
//000539:                     matrix_add(n_2, n_2,
//000540:                         B, bx + n_2, by, bs,
//000541:                         B, bx + n_2, by + n_2, bs,
//000542:                         j_cum, 0, 0, n_2);
//000543:                     strassen_mult_parallel(
//000544:                         cancellationToken,
//000545:                         n_2,
//000546:                         i_cum, 0, 0, n_2,
//000547:                         j_cum, 0, 0, n_2,
//000548:                         p7, 0, 0, n_2,
//000549:                         s);
//000550:                 }, cancellationToken);
//000551: 
//000552:                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
//000553:                 catch (AggregateException ae)
//000554:                 {
//000555:                     ae.Flatten().Handle(e => e is TaskCanceledException);
//000556:                     cancellationToken.ThrowIfCancellationRequested();
//000557:                 }
//000558: 
//000559:                 // c11 = p1 + p4 - p5 + p7 
//000560:                 Task t_c11 = Task.Factory.StartNew(() =>
//000561:                 {
//000562:                     matrix_add(n_2, n_2,
//000563:                         p1, 0, 0, n_2,
//000564:                         p4, 0, 0, n_2,
//000565:                         C, cx, cy, cs);
//000566:                     matrix_sub(n_2, n_2,
//000567:                         C, cx, cy, cs,
//000568:                         p5, 0, 0, n_2,
//000569:                         C, cx, cy, cs);
//000570:                     matrix_add(n_2, n_2,
//000571:                         C, cx, cy, cs,
//000572:                         p7, 0, 0, n_2,
//000573:                         C, cx, cy, cs);
//000574:                 });
//000575: 
//000576:                 // c12 = p3 + p5 
//000577:                 Task t_c12 = Task.Factory.StartNew(() =>
//000578:                 {
//000579:                     matrix_add(n_2, n_2,
//000580:                         p3, 0, 0, n_2,
//000581:                         p5, 0, 0, n_2,
//000582:                         C, cx, cy + n_2, cs);
//000583:                 });
//000584: 
//000585:                 // c21 = p2 + p4 
//000586:                 Task t_c21 = Task.Factory.StartNew(() =>
//000587:                 {
//000588:                     matrix_add(n_2, n_2,
//000589:                         p2, 0, 0, n_2,
//000590:                         p4, 0, 0, n_2,
//000591:                         C, cx + n_2, cy, cs);
//000592:                 });
//000593: 
//000594:                 // c22 = p1 + p3 - p2 + p6 
//000595:                 Task t_c22 = Task.Factory.StartNew(() =>
//000596:                 {
//000597:                     matrix_add(n_2, n_2,
//000598:                         p1, 0, 0, n_2,
//000599:                         p3, 0, 0, n_2,
//000600:                         C, cx + n_2, cy + n_2, cs);
//000601:                     matrix_sub(n_2, n_2,
//000602:                         C, cx + n_2, cy + n_2, cs,
//000603:                         p2, 0, 0, n_2,
//000604:                         C, cx + n_2, cy + n_2, cs);
//000605:                     matrix_add(n_2, n_2,
//000606:                         C, cx + n_2, cy + n_2, cs,
//000607:                         p6, 0, 0, n_2,
//000608:                         C, cx + n_2, cy + n_2, cs);
//000609:                 });
//000610: 
//000611:                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
//000612:             }
//000613:         }
//000614:     }
//000615: }
    IL_0144:  newobj     instance void Matrix/'<>c__DisplayClass15'::.ctor()
    IL_0149:  stloc.s    'CS$<>8__locals16'
    IL_014b:  ldloc.s    'CS$<>8__locals16'
    IL_014d:  ldloc.s    'CS$<>8__locals14'
    IL_014f:  stfld      class Matrix/'<>c__DisplayClass13' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals14'
    IL_0154:  ldloc.s    'CS$<>8__locals16'
    IL_0156:  ldloc.s    'CS$<>8__locals12'
    IL_0158:  stfld      class Matrix/'<>c__DisplayClass11' Matrix/'<>c__DisplayClass15'::'CS$<>8__locals12'
//000409:             {
    IL_015d:  nop
//000410:                 int* a_cum = work;
    IL_015e:  ldloc.s    'CS$<>8__locals16'
    IL_0160:  ldloc.2
    IL_0161:  conv.i
    IL_0162:  stfld      int32* Matrix/'<>c__DisplayClass15'::a_cum
//000411:                 int* b_cum = a_cum + areaSize;
    IL_0167:  ldloc.s    'CS$<>8__locals16'
    IL_0169:  ldloc.s    'CS$<>8__locals16'
    IL_016b:  ldfld      int32* Matrix/'<>c__DisplayClass15'::a_cum
    IL_0170:  ldloc.0
    IL_0171:  conv.i
    IL_0172:  ldc.i4.4
    IL_0173:  mul
    IL_0174:  add
    IL_0175:  stfld      int32* Matrix/'<>c__DisplayClass15'::b_cum
//000412:                 int* c_cum = b_cum + areaSize;
    IL_017a:  ldloc.s    'CS$<>8__locals16'
    IL_017c:  ldloc.s    'CS$<>8__locals16'
    IL_017e:  ldfld      int32* Matrix/'<>c__DisplayClass15'::b_cum
    IL_0183:  ldloc.0
    IL_0184:  conv.i
    IL_0185:  ldc.i4.4
    IL_0186:  mul
    IL_0187:  add
    IL_0188:  stfld      int32* Matrix/'<>c__DisplayClass15'::c_cum
//000413:                 int* d_cum = c_cum + areaSize;
    IL_018d:  ldloc.s    'CS$<>8__locals16'
    IL_018f:  ldloc.s    'CS$<>8__locals16'
    IL_0191:  ldfld      int32* Matrix/'<>c__DisplayClass15'::c_cum
    IL_0196:  ldloc.0
    IL_0197:  conv.i
    IL_0198:  ldc.i4.4
    IL_0199:  mul
    IL_019a:  add
    IL_019b:  stfld      int32* Matrix/'<>c__DisplayClass15'::d_cum
//000414:                 int* e_cum = d_cum + areaSize;
    IL_01a0:  ldloc.s    'CS$<>8__locals16'
    IL_01a2:  ldloc.s    'CS$<>8__locals16'
    IL_01a4:  ldfld      int32* Matrix/'<>c__DisplayClass15'::d_cum
    IL_01a9:  ldloc.0
    IL_01aa:  conv.i
    IL_01ab:  ldc.i4.4
    IL_01ac:  mul
    IL_01ad:  add
    IL_01ae:  stfld      int32* Matrix/'<>c__DisplayClass15'::e_cum
//000415:                 int* f_cum = e_cum + areaSize;
    IL_01b3:  ldloc.s    'CS$<>8__locals16'
    IL_01b5:  ldloc.s    'CS$<>8__locals16'
    IL_01b7:  ldfld      int32* Matrix/'<>c__DisplayClass15'::e_cum
    IL_01bc:  ldloc.0
    IL_01bd:  conv.i
    IL_01be:  ldc.i4.4
    IL_01bf:  mul
    IL_01c0:  add
    IL_01c1:  stfld      int32* Matrix/'<>c__DisplayClass15'::f_cum
//000416:                 int* g_cum = f_cum + areaSize;
    IL_01c6:  ldloc.s    'CS$<>8__locals16'
    IL_01c8:  ldloc.s    'CS$<>8__locals16'
    IL_01ca:  ldfld      int32* Matrix/'<>c__DisplayClass15'::f_cum
    IL_01cf:  ldloc.0
    IL_01d0:  conv.i
    IL_01d1:  ldc.i4.4
    IL_01d2:  mul
    IL_01d3:  add
    IL_01d4:  stfld      int32* Matrix/'<>c__DisplayClass15'::g_cum
//000417:                 int* h_cum = g_cum + areaSize;
    IL_01d9:  ldloc.s    'CS$<>8__locals16'
    IL_01db:  ldloc.s    'CS$<>8__locals16'
    IL_01dd:  ldfld      int32* Matrix/'<>c__DisplayClass15'::g_cum
    IL_01e2:  ldloc.0
    IL_01e3:  conv.i
    IL_01e4:  ldc.i4.4
    IL_01e5:  mul
    IL_01e6:  add
    IL_01e7:  stfld      int32* Matrix/'<>c__DisplayClass15'::h_cum
//000418:                 int* i_cum = h_cum + areaSize;
    IL_01ec:  ldloc.s    'CS$<>8__locals16'
    IL_01ee:  ldloc.s    'CS$<>8__locals16'
    IL_01f0:  ldfld      int32* Matrix/'<>c__DisplayClass15'::h_cum
    IL_01f5:  ldloc.0
    IL_01f6:  conv.i
    IL_01f7:  ldc.i4.4
    IL_01f8:  mul
    IL_01f9:  add
    IL_01fa:  stfld      int32* Matrix/'<>c__DisplayClass15'::i_cum
//000419:                 int* j_cum = i_cum + areaSize;
    IL_01ff:  ldloc.s    'CS$<>8__locals16'
    IL_0201:  ldloc.s    'CS$<>8__locals16'
    IL_0203:  ldfld      int32* Matrix/'<>c__DisplayClass15'::i_cum
    IL_0208:  ldloc.0
    IL_0209:  conv.i
    IL_020a:  ldc.i4.4
    IL_020b:  mul
    IL_020c:  add
    IL_020d:  stfld      int32* Matrix/'<>c__DisplayClass15'::j_cum
//000420:                 int* p1 = j_cum + areaSize;
    IL_0212:  ldloc.s    'CS$<>8__locals16'
    IL_0214:  ldloc.s    'CS$<>8__locals16'
    IL_0216:  ldfld      int32* Matrix/'<>c__DisplayClass15'::j_cum
    IL_021b:  ldloc.0
    IL_021c:  conv.i
    IL_021d:  ldc.i4.4
    IL_021e:  mul
    IL_021f:  add
    IL_0220:  stfld      int32* Matrix/'<>c__DisplayClass15'::p1
//000421:                 int* p2 = p1 + areaSize;
    IL_0225:  ldloc.s    'CS$<>8__locals16'
    IL_0227:  ldloc.s    'CS$<>8__locals16'
    IL_0229:  ldfld      int32* Matrix/'<>c__DisplayClass15'::p1
    IL_022e:  ldloc.0
    IL_022f:  conv.i
    IL_0230:  ldc.i4.4
    IL_0231:  mul
    IL_0232:  add
    IL_0233:  stfld      int32* Matrix/'<>c__DisplayClass15'::p2
//000422:                 int* p3 = p2 + areaSize;
    IL_0238:  ldloc.s    'CS$<>8__locals16'
    IL_023a:  ldloc.s    'CS$<>8__locals16'
    IL_023c:  ldfld      int32* Matrix/'<>c__DisplayClass15'::p2
    IL_0241:  ldloc.0
    IL_0242:  conv.i
    IL_0243:  ldc.i4.4
    IL_0244:  mul
    IL_0245:  add
    IL_0246:  stfld      int32* Matrix/'<>c__DisplayClass15'::p3
//000423:                 int* p4 = p3 + areaSize;
    IL_024b:  ldloc.s    'CS$<>8__locals16'
    IL_024d:  ldloc.s    'CS$<>8__locals16'
    IL_024f:  ldfld      int32* Matrix/'<>c__DisplayClass15'::p3
    IL_0254:  ldloc.0
    IL_0255:  conv.i
    IL_0256:  ldc.i4.4
    IL_0257:  mul
    IL_0258:  add
    IL_0259:  stfld      int32* Matrix/'<>c__DisplayClass15'::p4
//000424:                 int* p5 = p4 + areaSize;
    IL_025e:  ldloc.s    'CS$<>8__locals16'
    IL_0260:  ldloc.s    'CS$<>8__locals16'
    IL_0262:  ldfld      int32* Matrix/'<>c__DisplayClass15'::p4
    IL_0267:  ldloc.0
    IL_0268:  conv.i
    IL_0269:  ldc.i4.4
    IL_026a:  mul
    IL_026b:  add
    IL_026c:  stfld      int32* Matrix/'<>c__DisplayClass15'::p5
//000425:                 int* p6 = p5 + areaSize;
    IL_0271:  ldloc.s    'CS$<>8__locals16'
    IL_0273:  ldloc.s    'CS$<>8__locals16'
    IL_0275:  ldfld      int32* Matrix/'<>c__DisplayClass15'::p5
    IL_027a:  ldloc.0
    IL_027b:  conv.i
    IL_027c:  ldc.i4.4
    IL_027d:  mul
    IL_027e:  add
    IL_027f:  stfld      int32* Matrix/'<>c__DisplayClass15'::p6
//000426:                 int* p7 = p6 + areaSize;
    IL_0284:  ldloc.s    'CS$<>8__locals16'
    IL_0286:  ldloc.s    'CS$<>8__locals16'
    IL_0288:  ldfld      int32* Matrix/'<>c__DisplayClass15'::p6
    IL_028d:  ldloc.0
    IL_028e:  conv.i
    IL_028f:  ldc.i4.4
    IL_0290:  mul
    IL_0291:  add
    IL_0292:  stfld      int32* Matrix/'<>c__DisplayClass15'::p7
//000427: 
//000428:                 // p1 = (a11 + a22) * (b11 + b22) 
//000429:                 Task t_p1 = Task.Factory.StartNew(() =>
    IL_0297:  call       class [mscorlib]System.Threading.Tasks.TaskFactory [mscorlib]System.Threading.Tasks.Task::get_Factory()
    IL_029c:  ldloc.s    'CS$<>8__locals16'
    IL_029e:  ldftn      instance void Matrix/'<>c__DisplayClass15'::'<strassen_mult_parallel>b__4'()
    IL_02a4:  newobj     instance void [mscorlib]System.Action::.ctor(object,
                                                                      native int)
    IL_02a9:  ldloc.s    'CS$<>8__locals12'
    IL_02ab:  ldfld      valuetype [mscorlib]System.Threading.CancellationToken Matrix/'<>c__DisplayClass11'::cancellationToken
    IL_02b0:  callvirt   instance class [mscorlib]System.Threading.Tasks.Task [mscorlib]System.Threading.Tasks.TaskFactory::StartNew(class [mscorlib]System.Action,
                                                                                                                                     valuetype [mscorlib]System.Threading.CancellationToken)
    IL_02b5:  stloc.3
//000430:                 {
//000431:                     matrix_add(n_2, n_2,
//000432:                         A, ax, ay, a_s,
//000433:                         A, ax + n_2, ay + n_2, a_s,
//000434:                         a_cum, 0, 0, n_2);
//000435:                     matrix_add(n_2, n_2,
//000436:                         B, bx, by, bs,
//000437:                         B, bx + n_2, by + n_2, bs,
//000438:                         b_cum, 0, 0, n_2);
//000439:                     strassen_mult_parallel(
//000440:                         cancellationToken,
//000441:                         n_2,
//000442:                         a_cum, 0, 0, n_2,
//000443:                         b_cum, 0, 0, n_2,
//000444:                         p1, 0, 0, n_2,
//000445:                         s);
//000446:                 }, cancellationToken);
//000447: 
//000448:                 // p2 = (a21 + a22) * b11 
//000449:                 Task t_p2 = Task.Factory.StartNew(() =>
    IL_02b6:  call       class [mscorlib]System.Threading.Tasks.TaskFactory [mscorlib]System.Threading.Tasks.Task::get_Factory()
    IL_02bb:  ldloc.s    'CS$<>8__locals16'
    IL_02bd:  ldftn      instance void Matrix/'<>c__DisplayClass15'::'<strassen_mult_parallel>b__5'()
    IL_02c3:  newobj     instance void [mscorlib]System.Action::.ctor(object,
                                                                      native int)
    IL_02c8:  ldloc.s    'CS$<>8__locals12'
    IL_02ca:  ldfld      valuetype [mscorlib]System.Threading.CancellationToken Matrix/'<>c__DisplayClass11'::cancellationToken
    IL_02cf:  callvirt   instance class [mscorlib]System.Threading.Tasks.Task [mscorlib]System.Threading.Tasks.TaskFactory::StartNew(class [mscorlib]System.Action,
                                                                                                                                     valuetype [mscorlib]System.Threading.CancellationToken)
    IL_02d4:  stloc.s    t_p2
//000450:                 {
//000451:                     matrix_add(n_2, n_2,
//000452:                         A, ax + n_2, ay, a_s,
//000453:                         A, ax + n_2, ay + n_2, a_s,
//000454:                         c_cum, 0, 0, n_2);
//000455:                     strassen_mult_parallel(
//000456:                         cancellationToken,
//000457:                         n_2,
//000458:                         c_cum, 0, 0, n_2,
//000459:                         B, bx, by, bs,
//000460:                         p2, 0, 0, n_2,
//000461:                         s);
//000462:                 }, cancellationToken);
//000463: 
//000464:                 // p3 = a11 x (b12 - b22) 
//000465:                 Task t_p3 = Task.Factory.StartNew(() =>
    IL_02d6:  call       class [mscorlib]System.Threading.Tasks.TaskFactory [mscorlib]System.Threading.Tasks.Task::get_Factory()
    IL_02db:  ldloc.s    'CS$<>8__locals16'
    IL_02dd:  ldftn      instance void Matrix/'<>c__DisplayClass15'::'<strassen_mult_parallel>b__6'()
    IL_02e3:  newobj     instance void [mscorlib]System.Action::.ctor(object,
                                                                      native int)
    IL_02e8:  ldloc.s    'CS$<>8__locals12'
    IL_02ea:  ldfld      valuetype [mscorlib]System.Threading.CancellationToken Matrix/'<>c__DisplayClass11'::cancellationToken
    IL_02ef:  callvirt   instance class [mscorlib]System.Threading.Tasks.Task [mscorlib]System.Threading.Tasks.TaskFactory::StartNew(class [mscorlib]System.Action,
                                                                                                                                     valuetype [mscorlib]System.Threading.CancellationToken)
    IL_02f4:  stloc.s    t_p3
//000466:                 {
//000467:                     matrix_sub(n_2, n_2,
//000468:                         B, bx, by + n_2, bs,
//000469:                         B, bx + n_2, by + n_2, bs,
//000470:                         d_cum, 0, 0, n_2);
//000471:                     strassen_mult_parallel(
//000472:                         cancellationToken,
//000473:                         n_2,
//000474:                         A, ax, ay, a_s,
//000475:                         d_cum, 0, 0, n_2,
//000476:                         p3, 0, 0, n_2,
//000477:                         s);
//000478:                 }, cancellationToken);
//000479: 
//000480:                 // p4 = a22 x (b21 - b11) 
//000481:                 Task t_p4 = Task.Factory.StartNew(() =>
    IL_02f6:  call       class [mscorlib]System.Threading.Tasks.TaskFactory [mscorlib]System.Threading.Tasks.Task::get_Factory()
    IL_02fb:  ldloc.s    'CS$<>8__locals16'
    IL_02fd:  ldftn      instance void Matrix/'<>c__DisplayClass15'::'<strassen_mult_parallel>b__7'()
    IL_0303:  newobj     instance void [mscorlib]System.Action::.ctor(object,
                                                                      native int)
    IL_0308:  ldloc.s    'CS$<>8__locals12'
    IL_030a:  ldfld      valuetype [mscorlib]System.Threading.CancellationToken Matrix/'<>c__DisplayClass11'::cancellationToken
    IL_030f:  callvirt   instance class [mscorlib]System.Threading.Tasks.Task [mscorlib]System.Threading.Tasks.TaskFactory::StartNew(class [mscorlib]System.Action,
                                                                                                                                     valuetype [mscorlib]System.Threading.CancellationToken)
    IL_0314:  stloc.s    t_p4
//000482:                 {
//000483:                     matrix_sub(n_2, n_2,
//000484:                         B, bx + n_2, by, bs,
//000485:                         B, bx, by, bs,
//000486:                         e_cum, 0, 0, n_2);
//000487:                     strassen_mult_parallel(
//000488:                         cancellationToken,
//000489:                         n_2,
//000490:                         A, ax + n_2, ay + n_2, a_s,
//000491:                         e_cum, 0, 0, n_2,
//000492:                         p4, 0, 0, n_2,
//000493:                         s);
//000494:                 }, cancellationToken);
//000495: 
//000496:                 // p5 = (a11 + a12) x b22 
//000497:                 Task t_p5 = Task.Factory.StartNew(() =>
    IL_0316:  call       class [mscorlib]System.Threading.Tasks.TaskFactory [mscorlib]System.Threading.Tasks.Task::get_Factory()
    IL_031b:  ldloc.s    'CS$<>8__locals16'
    IL_031d:  ldftn      instance void Matrix/'<>c__DisplayClass15'::'<strassen_mult_parallel>b__8'()
    IL_0323:  newobj     instance void [mscorlib]System.Action::.ctor(object,
                                                                      native int)
    IL_0328:  ldloc.s    'CS$<>8__locals12'
    IL_032a:  ldfld      valuetype [mscorlib]System.Threading.CancellationToken Matrix/'<>c__DisplayClass11'::cancellationToken
    IL_032f:  callvirt   instance class [mscorlib]System.Threading.Tasks.Task [mscorlib]System.Threading.Tasks.TaskFactory::StartNew(class [mscorlib]System.Action,
                                                                                                                                     valuetype [mscorlib]System.Threading.CancellationToken)
    IL_0334:  stloc.s    t_p5
//000498:                 {
//000499:                     matrix_add(n_2, n_2,
//000500:                         A, ax, ay, a_s,
//000501:                         A, ax, ay + n_2, a_s,
//000502:                         f_cum, 0, 0, n_2);
//000503:                     strassen_mult_parallel(
//000504:                         cancellationToken,
//000505:                         n_2,
//000506:                         f_cum, 0, 0, n_2,
//000507:                         B, bx + n_2, by + n_2, bs,
//000508:                         p5, 0, 0, n_2,
//000509:                         s);
//000510:                 }, cancellationToken);
//000511: 
//000512:                 // p6 = (a21 - a11) x (b11 + b12) 
//000513:                 Task t_p6 = Task.Factory.StartNew(() =>
    IL_0336:  call       class [mscorlib]System.Threading.Tasks.TaskFactory [mscorlib]System.Threading.Tasks.Task::get_Factory()
    IL_033b:  ldloc.s    'CS$<>8__locals16'
    IL_033d:  ldftn      instance void Matrix/'<>c__DisplayClass15'::'<strassen_mult_parallel>b__9'()
    IL_0343:  newobj     instance void [mscorlib]System.Action::.ctor(object,
                                                                      native int)
    IL_0348:  ldloc.s    'CS$<>8__locals12'
    IL_034a:  ldfld      valuetype [mscorlib]System.Threading.CancellationToken Matrix/'<>c__DisplayClass11'::cancellationToken
    IL_034f:  callvirt   instance class [mscorlib]System.Threading.Tasks.Task [mscorlib]System.Threading.Tasks.TaskFactory::StartNew(class [mscorlib]System.Action,
                                                                                                                                     valuetype [mscorlib]System.Threading.CancellationToken)
    IL_0354:  stloc.s    t_p6
//000514:                 {
//000515:                     matrix_sub(n_2, n_2,
//000516:                         A, ax + n_2, ay, a_s,
//000517:                         A, ax, ay, a_s,
//000518:                         g_cum, 0, 0, n_2);
//000519:                     matrix_add(n_2, n_2,
//000520:                         B, bx, by, bs,
//000521:                         B, bx, by + n_2, bs,
//000522:                         h_cum, 0, 0, n_2);
//000523:                     strassen_mult_parallel(
//000524:                         cancellationToken,
//000525:                         n_2,
//000526:                         g_cum, 0, 0, n_2,
//000527:                         h_cum, 0, 0, n_2,
//000528:                         p6, 0, 0, n_2,
//000529:                         s);
//000530:                 }, cancellationToken);
//000531: 
//000532:                 // p7 = (a12 - a22) x (b21 + b22) 
//000533:                 Task t_p7 = Task.Factory.StartNew(() =>
    IL_0356:  call       class [mscorlib]System.Threading.Tasks.TaskFactory [mscorlib]System.Threading.Tasks.Task::get_Factory()
    IL_035b:  ldloc.s    'CS$<>8__locals16'
    IL_035d:  ldftn      instance void Matrix/'<>c__DisplayClass15'::'<strassen_mult_parallel>b__a'()
    IL_0363:  newobj     instance void [mscorlib]System.Action::.ctor(object,
                                                                      native int)
    IL_0368:  ldloc.s    'CS$<>8__locals12'
    IL_036a:  ldfld      valuetype [mscorlib]System.Threading.CancellationToken Matrix/'<>c__DisplayClass11'::cancellationToken
    IL_036f:  callvirt   instance class [mscorlib]System.Threading.Tasks.Task [mscorlib]System.Threading.Tasks.TaskFactory::StartNew(class [mscorlib]System.Action,
                                                                                                                                     valuetype [mscorlib]System.Threading.CancellationToken)
    IL_0374:  stloc.s    t_p7
//000534:                 {
//000535:                     matrix_sub(n_2, n_2,
//000536:                         A, ax, ay + n_2, a_s,
//000537:                         A, ax + n_2, ay + n_2, a_s,
//000538:                         i_cum, 0, 0, n_2);
//000539:                     matrix_add(n_2, n_2,
//000540:                         B, bx + n_2, by, bs,
//000541:                         B, bx + n_2, by + n_2, bs,
//000542:                         j_cum, 0, 0, n_2);
//000543:                     strassen_mult_parallel(
//000544:                         cancellationToken,
//000545:                         n_2,
//000546:                         i_cum, 0, 0, n_2,
//000547:                         j_cum, 0, 0, n_2,
//000548:                         p7, 0, 0, n_2,
//000549:                         s);
//000550:                 }, cancellationToken);
//000551: 
//000552:                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
    .try
    {
      IL_0376:  nop
      IL_0377:  ldc.i4.7
      IL_0378:  newarr     [mscorlib]System.Threading.Tasks.Task
      IL_037d:  stloc.s    CS$0$0002
      IL_037f:  ldloc.s    CS$0$0002
      IL_0381:  ldc.i4.0
      IL_0382:  ldloc.3
      IL_0383:  stelem.ref
      IL_0384:  ldloc.s    CS$0$0002
      IL_0386:  ldc.i4.1
      IL_0387:  ldloc.s    t_p2
      IL_0389:  stelem.ref
      IL_038a:  ldloc.s    CS$0$0002
      IL_038c:  ldc.i4.2
      IL_038d:  ldloc.s    t_p3
      IL_038f:  stelem.ref
      IL_0390:  ldloc.s    CS$0$0002
      IL_0392:  ldc.i4.3
      IL_0393:  ldloc.s    t_p4
      IL_0395:  stelem.ref
      IL_0396:  ldloc.s    CS$0$0002
      IL_0398:  ldc.i4.4
      IL_0399:  ldloc.s    t_p5
      IL_039b:  stelem.ref
      IL_039c:  ldloc.s    CS$0$0002
      IL_039e:  ldc.i4.5
      IL_039f:  ldloc.s    t_p6
      IL_03a1:  stelem.ref
      IL_03a2:  ldloc.s    CS$0$0002
      IL_03a4:  ldc.i4.6
      IL_03a5:  ldloc.s    t_p7
      IL_03a7:  stelem.ref
      IL_03a8:  ldloc.s    CS$0$0002
      IL_03aa:  call       void [mscorlib]System.Threading.Tasks.Task::WaitAll(class [mscorlib]System.Threading.Tasks.Task[])
      IL_03af:  nop
      IL_03b0:  nop
//000553:                 catch (AggregateException ae)
//000554:                 {
//000555:                     ae.Flatten().Handle(e => e is TaskCanceledException);
//000556:                     cancellationToken.ThrowIfCancellationRequested();
//000557:                 }
//000558: 
//000559:                 // c11 = p1 + p4 - p5 + p7 
//000560:                 Task t_c11 = Task.Factory.StartNew(() =>
//000561:                 {
//000562:                     matrix_add(n_2, n_2,
//000563:                         p1, 0, 0, n_2,
//000564:                         p4, 0, 0, n_2,
//000565:                         C, cx, cy, cs);
//000566:                     matrix_sub(n_2, n_2,
//000567:                         C, cx, cy, cs,
//000568:                         p5, 0, 0, n_2,
//000569:                         C, cx, cy, cs);
//000570:                     matrix_add(n_2, n_2,
//000571:                         C, cx, cy, cs,
//000572:                         p7, 0, 0, n_2,
//000573:                         C, cx, cy, cs);
//000574:                 });
//000575: 
//000576:                 // c12 = p3 + p5 
//000577:                 Task t_c12 = Task.Factory.StartNew(() =>
//000578:                 {
//000579:                     matrix_add(n_2, n_2,
//000580:                         p3, 0, 0, n_2,
//000581:                         p5, 0, 0, n_2,
//000582:                         C, cx, cy + n_2, cs);
//000583:                 });
//000584: 
//000585:                 // c21 = p2 + p4 
//000586:                 Task t_c21 = Task.Factory.StartNew(() =>
//000587:                 {
//000588:                     matrix_add(n_2, n_2,
//000589:                         p2, 0, 0, n_2,
//000590:                         p4, 0, 0, n_2,
//000591:                         C, cx + n_2, cy, cs);
//000592:                 });
//000593: 
//000594:                 // c22 = p1 + p3 - p2 + p6 
//000595:                 Task t_c22 = Task.Factory.StartNew(() =>
//000596:                 {
//000597:                     matrix_add(n_2, n_2,
//000598:                         p1, 0, 0, n_2,
//000599:                         p3, 0, 0, n_2,
//000600:                         C, cx + n_2, cy + n_2, cs);
//000601:                     matrix_sub(n_2, n_2,
//000602:                         C, cx + n_2, cy + n_2, cs,
//000603:                         p2, 0, 0, n_2,
//000604:                         C, cx + n_2, cy + n_2, cs);
//000605:                     matrix_add(n_2, n_2,
//000606:                         C, cx + n_2, cy + n_2, cs,
//000607:                         p6, 0, 0, n_2,
//000608:                         C, cx + n_2, cy + n_2, cs);
//000609:                 });
//000610: 
//000611:                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
//000612:             }
//000613:         }
//000614:     }
//000615: }
      IL_03b1:  leave.s    IL_03f2

//000553:                 catch (AggregateException ae)
    }  // end .try
    catch [mscorlib]System.AggregateException 
    {
      IL_03b3:  stloc.s    ae
//000554:                 {
      IL_03b5:  nop
//000555:                     ae.Flatten().Handle(e => e is TaskCanceledException);
      IL_03b6:  ldloc.s    ae
      IL_03b8:  callvirt   instance class [mscorlib]System.AggregateException [mscorlib]System.AggregateException::Flatten()
      IL_03bd:  ldsfld     class [mscorlib]System.Func`2<class [mscorlib]System.Exception,bool> Matrix::'CS$<>9__CachedAnonymousMethodDelegate10'
      IL_03c2:  brtrue.s   IL_03d7

      IL_03c4:  ldnull
      IL_03c5:  ldftn      bool Matrix::'<strassen_mult_parallel>b__b'(class [mscorlib]System.Exception)
      IL_03cb:  newobj     instance void class [mscorlib]System.Func`2<class [mscorlib]System.Exception,bool>::.ctor(object,
                                                                                                                     native int)
      IL_03d0:  stsfld     class [mscorlib]System.Func`2<class [mscorlib]System.Exception,bool> Matrix::'CS$<>9__CachedAnonymousMethodDelegate10'
      IL_03d5:  br.s       IL_03d7

      IL_03d7:  ldsfld     class [mscorlib]System.Func`2<class [mscorlib]System.Exception,bool> Matrix::'CS$<>9__CachedAnonymousMethodDelegate10'
      IL_03dc:  callvirt   instance void [mscorlib]System.AggregateException::Handle(class [mscorlib]System.Func`2<class [mscorlib]System.Exception,bool>)
      IL_03e1:  nop
//000556:                     cancellationToken.ThrowIfCancellationRequested();
      IL_03e2:  ldloc.s    'CS$<>8__locals12'
      IL_03e4:  ldflda     valuetype [mscorlib]System.Threading.CancellationToken Matrix/'<>c__DisplayClass11'::cancellationToken
      IL_03e9:  call       instance void [mscorlib]System.Threading.CancellationToken::ThrowIfCancellationRequested()
      IL_03ee:  nop
//000557:                 }
      IL_03ef:  nop
//000558: 
//000559:                 // c11 = p1 + p4 - p5 + p7 
//000560:                 Task t_c11 = Task.Factory.StartNew(() =>
//000561:                 {
//000562:                     matrix_add(n_2, n_2,
//000563:                         p1, 0, 0, n_2,
//000564:                         p4, 0, 0, n_2,
//000565:                         C, cx, cy, cs);
//000566:                     matrix_sub(n_2, n_2,
//000567:                         C, cx, cy, cs,
//000568:                         p5, 0, 0, n_2,
//000569:                         C, cx, cy, cs);
//000570:                     matrix_add(n_2, n_2,
//000571:                         C, cx, cy, cs,
//000572:                         p7, 0, 0, n_2,
//000573:                         C, cx, cy, cs);
//000574:                 });
//000575: 
//000576:                 // c12 = p3 + p5 
//000577:                 Task t_c12 = Task.Factory.StartNew(() =>
//000578:                 {
//000579:                     matrix_add(n_2, n_2,
//000580:                         p3, 0, 0, n_2,
//000581:                         p5, 0, 0, n_2,
//000582:                         C, cx, cy + n_2, cs);
//000583:                 });
//000584: 
//000585:                 // c21 = p2 + p4 
//000586:                 Task t_c21 = Task.Factory.StartNew(() =>
//000587:                 {
//000588:                     matrix_add(n_2, n_2,
//000589:                         p2, 0, 0, n_2,
//000590:                         p4, 0, 0, n_2,
//000591:                         C, cx + n_2, cy, cs);
//000592:                 });
//000593: 
//000594:                 // c22 = p1 + p3 - p2 + p6 
//000595:                 Task t_c22 = Task.Factory.StartNew(() =>
//000596:                 {
//000597:                     matrix_add(n_2, n_2,
//000598:                         p1, 0, 0, n_2,
//000599:                         p3, 0, 0, n_2,
//000600:                         C, cx + n_2, cy + n_2, cs);
//000601:                     matrix_sub(n_2, n_2,
//000602:                         C, cx + n_2, cy + n_2, cs,
//000603:                         p2, 0, 0, n_2,
//000604:                         C, cx + n_2, cy + n_2, cs);
//000605:                     matrix_add(n_2, n_2,
//000606:                         C, cx + n_2, cy + n_2, cs,
//000607:                         p6, 0, 0, n_2,
//000608:                         C, cx + n_2, cy + n_2, cs);
//000609:                 });
//000610: 
//000611:                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
//000612:             }
//000613:         }
//000614:     }
//000615: }
      IL_03f0:  leave.s    IL_03f2

    }  // end handler
    IL_03f2:  nop
//000560:                 Task t_c11 = Task.Factory.StartNew(() =>
    IL_03f3:  call       class [mscorlib]System.Threading.Tasks.TaskFactory [mscorlib]System.Threading.Tasks.Task::get_Factory()
    IL_03f8:  ldloc.s    'CS$<>8__locals16'
    IL_03fa:  ldftn      instance void Matrix/'<>c__DisplayClass15'::'<strassen_mult_parallel>b__c'()
    IL_0400:  newobj     instance void [mscorlib]System.Action::.ctor(object,
                                                                      native int)
    IL_0405:  callvirt   instance class [mscorlib]System.Threading.Tasks.Task [mscorlib]System.Threading.Tasks.TaskFactory::StartNew(class [mscorlib]System.Action)
    IL_040a:  stloc.s    t_c11
//000561:                 {
//000562:                     matrix_add(n_2, n_2,
//000563:                         p1, 0, 0, n_2,
//000564:                         p4, 0, 0, n_2,
//000565:                         C, cx, cy, cs);
//000566:                     matrix_sub(n_2, n_2,
//000567:                         C, cx, cy, cs,
//000568:                         p5, 0, 0, n_2,
//000569:                         C, cx, cy, cs);
//000570:                     matrix_add(n_2, n_2,
//000571:                         C, cx, cy, cs,
//000572:                         p7, 0, 0, n_2,
//000573:                         C, cx, cy, cs);
//000574:                 });
//000575: 
//000576:                 // c12 = p3 + p5 
//000577:                 Task t_c12 = Task.Factory.StartNew(() =>
    IL_040c:  call       class [mscorlib]System.Threading.Tasks.TaskFactory [mscorlib]System.Threading.Tasks.Task::get_Factory()
    IL_0411:  ldloc.s    'CS$<>8__locals16'
    IL_0413:  ldftn      instance void Matrix/'<>c__DisplayClass15'::'<strassen_mult_parallel>b__d'()
    IL_0419:  newobj     instance void [mscorlib]System.Action::.ctor(object,
                                                                      native int)
    IL_041e:  callvirt   instance class [mscorlib]System.Threading.Tasks.Task [mscorlib]System.Threading.Tasks.TaskFactory::StartNew(class [mscorlib]System.Action)
    IL_0423:  stloc.s    t_c12
//000578:                 {
//000579:                     matrix_add(n_2, n_2,
//000580:                         p3, 0, 0, n_2,
//000581:                         p5, 0, 0, n_2,
//000582:                         C, cx, cy + n_2, cs);
//000583:                 });
//000584: 
//000585:                 // c21 = p2 + p4 
//000586:                 Task t_c21 = Task.Factory.StartNew(() =>
    IL_0425:  call       class [mscorlib]System.Threading.Tasks.TaskFactory [mscorlib]System.Threading.Tasks.Task::get_Factory()
    IL_042a:  ldloc.s    'CS$<>8__locals16'
    IL_042c:  ldftn      instance void Matrix/'<>c__DisplayClass15'::'<strassen_mult_parallel>b__e'()
    IL_0432:  newobj     instance void [mscorlib]System.Action::.ctor(object,
                                                                      native int)
    IL_0437:  callvirt   instance class [mscorlib]System.Threading.Tasks.Task [mscorlib]System.Threading.Tasks.TaskFactory::StartNew(class [mscorlib]System.Action)
    IL_043c:  stloc.s    t_c21
//000587:                 {
//000588:                     matrix_add(n_2, n_2,
//000589:                         p2, 0, 0, n_2,
//000590:                         p4, 0, 0, n_2,
//000591:                         C, cx + n_2, cy, cs);
//000592:                 });
//000593: 
//000594:                 // c22 = p1 + p3 - p2 + p6 
//000595:                 Task t_c22 = Task.Factory.StartNew(() =>
    IL_043e:  call       class [mscorlib]System.Threading.Tasks.TaskFactory [mscorlib]System.Threading.Tasks.Task::get_Factory()
    IL_0443:  ldloc.s    'CS$<>8__locals16'
    IL_0445:  ldftn      instance void Matrix/'<>c__DisplayClass15'::'<strassen_mult_parallel>b__f'()
    IL_044b:  newobj     instance void [mscorlib]System.Action::.ctor(object,
                                                                      native int)
    IL_0450:  callvirt   instance class [mscorlib]System.Threading.Tasks.Task [mscorlib]System.Threading.Tasks.TaskFactory::StartNew(class [mscorlib]System.Action)
    IL_0455:  stloc.s    t_c22
//000596:                 {
//000597:                     matrix_add(n_2, n_2,
//000598:                         p1, 0, 0, n_2,
//000599:                         p3, 0, 0, n_2,
//000600:                         C, cx + n_2, cy + n_2, cs);
//000601:                     matrix_sub(n_2, n_2,
//000602:                         C, cx + n_2, cy + n_2, cs,
//000603:                         p2, 0, 0, n_2,
//000604:                         C, cx + n_2, cy + n_2, cs);
//000605:                     matrix_add(n_2, n_2,
//000606:                         C, cx + n_2, cy + n_2, cs,
//000607:                         p6, 0, 0, n_2,
//000608:                         C, cx + n_2, cy + n_2, cs);
//000609:                 });
//000610: 
//000611:                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
    IL_0457:  ldc.i4.4
    IL_0458:  newarr     [mscorlib]System.Threading.Tasks.Task
    IL_045d:  stloc.s    CS$0$0002
    IL_045f:  ldloc.s    CS$0$0002
    IL_0461:  ldc.i4.0
    IL_0462:  ldloc.s    t_c11
    IL_0464:  stelem.ref
    IL_0465:  ldloc.s    CS$0$0002
    IL_0467:  ldc.i4.1
    IL_0468:  ldloc.s    t_c12
    IL_046a:  stelem.ref
    IL_046b:  ldloc.s    CS$0$0002
    IL_046d:  ldc.i4.2
    IL_046e:  ldloc.s    t_c21
    IL_0470:  stelem.ref
    IL_0471:  ldloc.s    CS$0$0002
    IL_0473:  ldc.i4.3
    IL_0474:  ldloc.s    t_c22
    IL_0476:  stelem.ref
    IL_0477:  ldloc.s    CS$0$0002
    IL_0479:  call       void [mscorlib]System.Threading.Tasks.Task::WaitAll(class [mscorlib]System.Threading.Tasks.Task[])
    IL_047e:  nop
//000612:             }
    IL_047f:  nop
//000613:         }
//000614:     }
//000615: }
    IL_0480:  ldc.i4.0
    IL_0481:  conv.u
    IL_0482:  stloc.2
//000613:         }
    IL_0483:  nop
//000614:     }
    IL_0484:  nop
    IL_0485:  ret
  } // end of method Matrix::strassen_mult_parallel

  .method private hidebysig static bool  '<strassen_mult_parallel>b__b'(class [mscorlib]System.Exception e) cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       14 (0xe)
    .maxstack  2
    .locals init ([0] bool CS$1$0000)
//000555:                     ae.Flatten().Handle(e => e is TaskCanceledException);
    IL_0000:  ldarg.0
    IL_0001:  isinst     [mscorlib]System.Threading.Tasks.TaskCanceledException
    IL_0006:  ldnull
    IL_0007:  cgt.un
    IL_0009:  stloc.0
    IL_000a:  br.s       IL_000c

//000556:                     cancellationToken.ThrowIfCancellationRequested();
//000557:                 }
//000558: 
//000559:                 // c11 = p1 + p4 - p5 + p7 
//000560:                 Task t_c11 = Task.Factory.StartNew(() =>
//000561:                 {
//000562:                     matrix_add(n_2, n_2,
//000563:                         p1, 0, 0, n_2,
//000564:                         p4, 0, 0, n_2,
//000565:                         C, cx, cy, cs);
//000566:                     matrix_sub(n_2, n_2,
//000567:                         C, cx, cy, cs,
//000568:                         p5, 0, 0, n_2,
//000569:                         C, cx, cy, cs);
//000570:                     matrix_add(n_2, n_2,
//000571:                         C, cx, cy, cs,
//000572:                         p7, 0, 0, n_2,
//000573:                         C, cx, cy, cs);
//000574:                 });
//000575: 
//000576:                 // c12 = p3 + p5 
//000577:                 Task t_c12 = Task.Factory.StartNew(() =>
//000578:                 {
//000579:                     matrix_add(n_2, n_2,
//000580:                         p3, 0, 0, n_2,
//000581:                         p5, 0, 0, n_2,
//000582:                         C, cx, cy + n_2, cs);
//000583:                 });
//000584: 
//000585:                 // c21 = p2 + p4 
//000586:                 Task t_c21 = Task.Factory.StartNew(() =>
//000587:                 {
//000588:                     matrix_add(n_2, n_2,
//000589:                         p2, 0, 0, n_2,
//000590:                         p4, 0, 0, n_2,
//000591:                         C, cx + n_2, cy, cs);
//000592:                 });
//000593: 
//000594:                 // c22 = p1 + p3 - p2 + p6 
//000595:                 Task t_c22 = Task.Factory.StartNew(() =>
//000596:                 {
//000597:                     matrix_add(n_2, n_2,
//000598:                         p1, 0, 0, n_2,
//000599:                         p3, 0, 0, n_2,
//000600:                         C, cx + n_2, cy + n_2, cs);
//000601:                     matrix_sub(n_2, n_2,
//000602:                         C, cx + n_2, cy + n_2, cs,
//000603:                         p2, 0, 0, n_2,
//000604:                         C, cx + n_2, cy + n_2, cs);
//000605:                     matrix_add(n_2, n_2,
//000606:                         C, cx + n_2, cy + n_2, cs,
//000607:                         p6, 0, 0, n_2,
//000608:                         C, cx + n_2, cy + n_2, cs);
//000609:                 });
//000610: 
//000611:                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
//000612:             }
//000613:         }
//000614:     }
//000615: }
    IL_000c:  ldloc.0
    IL_000d:  ret
  } // end of method Matrix::'<strassen_mult_parallel>b__b'

  .method private hidebysig specialname rtspecialname static 
          void  .cctor() cil managed
  {
    // Code size       24 (0x18)
    .maxstack  8
//000018:     private static int[] _validSizes = new[] { 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536 };
    IL_0000:  ldc.i4.s   13
    IL_0002:  newarr     [mscorlib]System.Int32
    IL_0007:  dup
    IL_0008:  ldtoken    field valuetype '<PrivateImplementationDetails>{39DB849E-4637-4782-9601-905307264E9E}'/'__StaticArrayInitTypeSize=52' '<PrivateImplementationDetails>{39DB849E-4637-4782-9601-905307264E9E}'::'$$method0x600003f-1'
    IL_000d:  call       void [mscorlib]System.Runtime.CompilerServices.RuntimeHelpers::InitializeArray(class [mscorlib]System.Array,
                                                                                                        valuetype [mscorlib]System.RuntimeFieldHandle)
    IL_0012:  stsfld     int32[] Matrix::_validSizes
//000019:     private int[] _data;
//000020:     private int* _dataPtr;
//000021:     private GCHandle _dataPtrHandle;
//000022: 
//000023:     public Matrix(int size)
//000024:     {
//000025:         if (!_validSizes.Contains(size)) throw new ArgumentOutOfRangeException("size");
//000026:         _size = size;
//000027:         _data = new int[size * size];
//000028: 
//000029:         _dataPtrHandle = GCHandle.Alloc(_data, GCHandleType.Pinned);
//000030:         _dataPtr = (int*)_dataPtrHandle.AddrOfPinnedObject().ToPointer();
//000031:     }
//000032: 
//000033:     ~Matrix() { Dispose(); }
//000034:     public void Dispose()
//000035:     {
//000036:         if (_data != null)
//000037:         {
//000038:             _dataPtrHandle.Free();
//000039:             _data = null;
//000040:         }
//000041:     }
//000042: 
//000043:     public int[] ValidSizes { get { return _validSizes.ToArray(); } }
//000044: 
//000045:     public void FillWithRandomValues()
//000046:     {
//000047:         Random rand = new Random();
//000048:         for (int i = 0; i < _data.Length; i++)
//000049:         {
//000050:             _data[i] = rand.Next() % 127;
//000051:         }
//000052:     }
//000053: 
//000054:     public bool Equals(Matrix other)
//000055:     {
//000056:         if (_size != other._size) return false;
//000057:         for (int i = 0; i < _data.Length; i++) if (_data[i] != other._data[i]) return false;
//000058:         return true;
//000059:     }
//000060: 
//000061:     public static void Multiply(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
//000062:     {
//000063:         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
//000064:         int N = src1._size;
//000065:         matrix_mult_serial(
//000066:             cancellationToken,
//000067:             N, N, N,
//000068:             src1._dataPtr, 0, 0, N,
//000069:             src2._dataPtr, 0, 0, N,
//000070:             dst._dataPtr, 0, 0, N);
//000071:     }
//000072: 
//000073:     public static void MultiplyParallel(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
//000074:     {
//000075:         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
//000076:         int N = src1._size;
//000077:         matrix_mult_parallel(
//000078:             cancellationToken,
//000079:             N, N, N,
//000080:             src1._dataPtr, 0, 0, N,
//000081:             src2._dataPtr, 0, 0, N,
//000082:             dst._dataPtr, 0, 0, N);
//000083:     }
//000084: 
//000085:     public static void MultiplyStrassens(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
//000086:     {
//000087:         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
//000088:         int N = src1._size;
//000089:         strassen_mult_serial(
//000090:             cancellationToken,
//000091:             N,
//000092:             src1._dataPtr, 0, 0, N,
//000093:             src2._dataPtr, 0, 0, N,
//000094:             dst._dataPtr, 0, 0, N,
//000095:             64);
//000096:     }
//000097: 
//000098:     public static void MultiplyStrassensParallel(CancellationToken cancellationToken, Matrix src1, Matrix src2, Matrix dst)
//000099:     {
//000100:         if (src1._size != src2._size || src1._size != dst._size) throw new ArgumentOutOfRangeException("src1");
//000101:         int N = src1._size;
//000102:         strassen_mult_parallel(
//000103:             cancellationToken,
//000104:             N,
//000105:             src1._dataPtr, 0, 0, N,
//000106:             src2._dataPtr, 0, 0, N,
//000107:             dst._dataPtr, 0, 0, N,
//000108:             64);
//000109:     }
//000110: 
//000111:     private static void matrix_add( 
//000112:         // dimensions of A, B, and C submatrices 
//000113:         int n, int m,
//000114:         // (ax,ay) = origin of A submatrix for multiplicand 
//000115:         int* A, int ax, int ay, int a_s,
//000116:         // (bx,by) = origin of B submatrix for multiplicand 
//000117:         int* B, int bx, int by, int bs,
//000118:         // (cx,cy) = origin of C submatrix for result 
//000119:         int* C, int cx, int cy, int cs)
//000120:     {
//000121:         for (int i = 0; i < n; i += 1)
//000122:             for (int j = 0; j < m; j += 1)
//000123:                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] + B[(i + bx) * bs + j + by];
//000124:     }
//000125: 
//000126:     private static void matrix_sub(
//000127:         // dimensions of A, B, and C submatrices 
//000128:         int n, int m,
//000129:         // (ax,ay) = origin of A submatrix for multiplicand 
//000130:         int* A, int ax, int ay, int a_s,
//000131:         // (bx,by) = origin of B submatrix for multiplicand 
//000132:         int* B, int bx, int by, int bs,
//000133:         // (cx,cy) = origin of C submatrix for result 
//000134:         int* C, int cx, int cy, int cs)
//000135:     {
//000136:         for (int i = 0; i < n; i += 1)
//000137:         {
//000138:             for (int j = 0; j < m; j += 1)
//000139:             {
//000140:                 C[(i + cx) * cs + j + cy] = A[(i + ax) * a_s + j + ay] - B[(i + bx) * bs + j + by];
//000141:             }
//000142:         }
//000143:     }
//000144: 
//000145:     private static void matrix_mult_serial(
//000146:         CancellationToken cancellationToken, 
//000147:         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
//000148:         int l, int m, int n,
//000149:         // (ax,ay) = origin of A submatrix for multiplicand 
//000150:         int* A, int ax, int ay, int a_s,
//000151:         // (bx,by) = origin of B submatrix for multiplicand 
//000152:         int* B, int bx, int by, int bs,
//000153:         // (cx,cy) = origin of C submatrix for result 
//000154:         int* C, int cx, int cy, int cs)
//000155:     {
//000156:         for (int i = 0; i < l; ++i)
//000157:         {
//000158:             cancellationToken.ThrowIfCancellationRequested();
//000159:             for (int j = 0; j < n; j++)
//000160:             {
//000161:                 int temp = 0;
//000162:                 for (int k = 0; k < m; k++)
//000163:                 {
//000164:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
//000165:                 }
//000166:                 C[(i + cx) * cs + j + cy] = temp;
//000167:             }
//000168:         }
//000169:     }
//000170: 
//000171:     private static void matrix_mult_parallel(
//000172:         CancellationToken cancellationToken, 
//000173:         // dimensions of A (lxm), B(mxn), and C(lxn) submatrices 
//000174:         int l, int m, int n,
//000175:         // (ax,ay) = origin of A submatrix for multiplicand 
//000176:         int* A, int ax, int ay, int a_s,
//000177:         // (bx,by) = origin of B submatrix for multiplicand 
//000178:         int* B, int bx, int by, int bs,
//000179:         // (cx,cy) = origin of C submatrix for result 
//000180:         int* C, int cx, int cy, int cs)
//000181:     {
//000182:         ParallelOptions options = new ParallelOptions { CancellationToken = cancellationToken };
//000183:         Parallel.For(0, l, options, i =>
//000184:         {
//000185:             for (int j = 0; j < n; j++)
//000186:             {
//000187:                 int temp = 0;
//000188:                 for (int k = 0; k < m; k++)
//000189:                 {
//000190:                     temp += A[(i + ax) * a_s + k + ay] * B[(k + bx) * bs + j + by];
//000191:                 }
//000192:                 C[(i + cx) * cs + j + cy] = temp;
//000193:             }
//000194:         });
//000195:     }
//000196: 
//000197:     private static void strassen_mult_serial(
//000198:         CancellationToken cancellationToken, 
//000199:         // dimensions of A, B, and C submatrices 
//000200:         int n,
//000201:         // (ax,ay) = origin of A submatrix for multiplicand 
//000202:         int* A, int ax, int ay, int a_s,
//000203:         // (bx,by) = origin of B submatrix for multiplicand 
//000204:         int* B, int bx, int by, int bs,
//000205:         // (cx,cy) = origin of C submatrix for result 
//000206:         int* C, int cx, int cy, int cs,
//000207:         // Strassen's recursion limit for array dimensions 
//000208:         int s)
//000209:     {
//000210:         if (n <= s)
//000211:         {
//000212:             matrix_mult_serial(
//000213:                 cancellationToken,
//000214:                 n, n, n,
//000215:                 A, ax, ay, a_s,
//000216:                 B, bx, by, bs,
//000217:                 C, cx, cy, cs);
//000218:         }
//000219:         else
//000220:         {
//000221:             int n_2 = n >> 1;
//000222:             int[] workArr = new int[n_2 * n_2 * 9];
//000223:             fixed (int* work = workArr)
//000224:             {
//000225:                 int* a_cum = work;
//000226:                 int* b_cum = a_cum + n_2 * n_2;
//000227:                 int* p1 = b_cum + n_2 * n_2;
//000228:                 int* p2 = p1 + n_2 * n_2;
//000229:                 int* p3 = p2 + n_2 * n_2;
//000230:                 int* p4 = p3 + n_2 * n_2;
//000231:                 int* p5 = p4 + n_2 * n_2;
//000232:                 int* p6 = p5 + n_2 * n_2;
//000233:                 int* p7 = p6 + n_2 * n_2;
//000234: 
//000235:                 // p1 = (a11 + a22) * (b11 + b22) 
//000236:                 matrix_add(n_2, n_2,
//000237:                     A, ax, ay, a_s,
//000238:                     A, ax + n_2, ay + n_2, a_s,
//000239:                     a_cum, 0, 0, n_2);
//000240:                 matrix_add(n_2, n_2,
//000241:                     B, bx, by, bs,
//000242:                     B, bx + n_2, by + n_2, bs,
//000243:                     b_cum, 0, 0, n_2);
//000244:                 strassen_mult_serial(
//000245:                     cancellationToken,
//000246:                     n_2,
//000247:                     a_cum, 0, 0, n_2,
//000248:                     b_cum, 0, 0, n_2,
//000249:                     p1, 0, 0, n_2,
//000250:                     s);
//000251: 
//000252:                 // p2 = (a21 + a22) * b11 
//000253:                 matrix_add(n_2, n_2,
//000254:                     A, ax + n_2, ay, a_s,
//000255:                     A, ax + n_2, ay + n_2, a_s,
//000256:                     a_cum, 0, 0, n_2);
//000257:                 strassen_mult_serial(
//000258:                     cancellationToken,
//000259:                     n_2,
//000260:                     a_cum, 0, 0, n_2,
//000261:                     B, bx, by, bs,
//000262:                     p2, 0, 0, n_2,
//000263:                     s);
//000264: 
//000265:                 // p3 = a11 x (b12 - b22) 
//000266:                 matrix_sub(n_2, n_2,
//000267:                     B, bx, by + n_2, bs,
//000268:                     B, bx + n_2, by + n_2, bs,
//000269:                     b_cum, 0, 0, n_2);
//000270:                 strassen_mult_serial(
//000271:                     cancellationToken,
//000272:                     n_2,
//000273:                     A, ax, ay, a_s,
//000274:                     b_cum, 0, 0, n_2,
//000275:                     p3, 0, 0, n_2,
//000276:                     s);
//000277: 
//000278:                 // p4 = a22 x (b21 - b11) 
//000279:                 matrix_sub(n_2, n_2,
//000280:                     B, bx + n_2, by, bs,
//000281:                     B, bx, by, bs,
//000282:                     b_cum, 0, 0, n_2);
//000283:                 strassen_mult_serial(
//000284:                     cancellationToken,
//000285:                     n_2,
//000286:                     A, ax + n_2, ay + n_2, a_s,
//000287:                     b_cum, 0, 0, n_2,
//000288:                     p4, 0, 0, n_2,
//000289:                     s);
//000290: 
//000291:                 // p5 = (a11 + a12) x b22 
//000292:                 matrix_add(n_2, n_2,
//000293:                     A, ax, ay, a_s,
//000294:                     A, ax, ay + n_2, a_s,
//000295:                     a_cum, 0, 0, n_2);
//000296:                 strassen_mult_serial(
//000297:                     cancellationToken,
//000298:                     n_2,
//000299:                     a_cum, 0, 0, n_2,
//000300:                     B, bx + n_2, by + n_2, bs,
//000301:                     p5, 0, 0, n_2,
//000302:                     s);
//000303: 
//000304:                 // p6 = (a21 - a11) x (b11 + b12) 
//000305:                 matrix_sub(n_2, n_2,
//000306:                     A, ax + n_2, ay, a_s,
//000307:                     A, ax, ay, a_s,
//000308:                     a_cum, 0, 0, n_2);
//000309:                 matrix_add(n_2, n_2,
//000310:                     B, bx, by, bs,
//000311:                     B, bx, by + n_2, bs,
//000312:                     b_cum, 0, 0, n_2);
//000313:                 strassen_mult_serial(
//000314:                     cancellationToken,
//000315:                     n_2,
//000316:                     a_cum, 0, 0, n_2,
//000317:                     b_cum, 0, 0, n_2,
//000318:                     p6, 0, 0, n_2,
//000319:                     s);
//000320: 
//000321:                 // p7 = (a12 - a22) x (b21 + b22) 
//000322:                 matrix_sub(n_2, n_2,
//000323:                     A, ax, ay + n_2, a_s,
//000324:                     A, ax + n_2, ay + n_2, a_s,
//000325:                     a_cum, 0, 0, n_2);
//000326:                 matrix_add(n_2, n_2,
//000327:                     B, bx + n_2, by, bs,
//000328:                     B, bx + n_2, by + n_2, bs,
//000329:                     b_cum, 0, 0, n_2);
//000330:                 strassen_mult_serial(
//000331:                     cancellationToken,
//000332:                     n_2,
//000333:                     a_cum, 0, 0, n_2,
//000334:                     b_cum, 0, 0, n_2,
//000335:                     p7, 0, 0, n_2,
//000336:                     s);
//000337: 
//000338:                 // c11 = p1 + p4 - p5 + p7 
//000339:                 matrix_add(n_2, n_2,
//000340:                     p1, 0, 0, n_2,
//000341:                     p4, 0, 0, n_2,
//000342:                     C, cx, cy, cs);
//000343:                 matrix_sub(n_2, n_2,
//000344:                     C, cx, cy, cs,
//000345:                     p5, 0, 0, n_2,
//000346:                     C, cx, cy, cs);
//000347:                 matrix_add(n_2, n_2,
//000348:                     C, cx, cy, cs,
//000349:                     p7, 0, 0, n_2,
//000350:                     C, cx, cy, cs);
//000351: 
//000352:                 // c12 = p3 + p5 
//000353:                 matrix_add(n_2, n_2,
//000354:                     p3, 0, 0, n_2,
//000355:                     p5, 0, 0, n_2,
//000356:                     C, cx, cy + n_2, cs);
//000357: 
//000358:                 // c21 = p2 + p4 
//000359:                 matrix_add(n_2, n_2,
//000360:                     p2, 0, 0, n_2,
//000361:                     p4, 0, 0, n_2,
//000362:                     C, cx + n_2, cy, cs);
//000363: 
//000364:                 // c22 = p1 + p3 - p2 + p6 
//000365:                 matrix_add(n_2, n_2,
//000366:                     p1, 0, 0, n_2,
//000367:                     p3, 0, 0, n_2,
//000368:                     C, cx + n_2, cy + n_2, cs);
//000369:                 matrix_sub(n_2, n_2,
//000370:                     C, cx + n_2, cy + n_2, cs,
//000371:                     p2, 0, 0, n_2,
//000372:                     C, cx + n_2, cy + n_2, cs);
//000373:                 matrix_add(n_2, n_2,
//000374:                     C, cx + n_2, cy + n_2, cs,
//000375:                     p6, 0, 0, n_2,
//000376:                     C, cx + n_2, cy + n_2, cs);
//000377:             }
//000378:         }
//000379:     }
//000380: 
//000381:     private static void strassen_mult_parallel(
//000382:         CancellationToken cancellationToken, 
//000383:         // dimensions of A, B, and C submatrices 
//000384:         int n,
//000385:         // (ax,ay) = origin of A submatrix for multiplicand 
//000386:         int* A, int ax, int ay, int a_s,
//000387:         // (bx,by) = origin of B submatrix for multiplicand 
//000388:         int* B, int bx, int by, int bs,
//000389:         // (cx,cy) = origin of C submatrix for result 
//000390:         int* C, int cx, int cy, int cs,
//000391:         // Strassen's recursion limit for array dimensions 
//000392:         int s)
//000393:     {
//000394:         if (n <= s)
//000395:         {
//000396:             matrix_mult_serial(
//000397:                 cancellationToken,
//000398:                 n, n, n,
//000399:                 A, ax, ay, a_s,
//000400:                 B, bx, by, bs,
//000401:                 C, cx, cy, cs);
//000402:         }
//000403:         else
//000404:         {
//000405:             int n_2 = n >> 1;
//000406:             int areaSize = n_2 * n_2;
//000407:             int[] workArr = new int[areaSize * 17];
//000408:             fixed (int* work = workArr)
//000409:             {
//000410:                 int* a_cum = work;
//000411:                 int* b_cum = a_cum + areaSize;
//000412:                 int* c_cum = b_cum + areaSize;
//000413:                 int* d_cum = c_cum + areaSize;
//000414:                 int* e_cum = d_cum + areaSize;
//000415:                 int* f_cum = e_cum + areaSize;
//000416:                 int* g_cum = f_cum + areaSize;
//000417:                 int* h_cum = g_cum + areaSize;
//000418:                 int* i_cum = h_cum + areaSize;
//000419:                 int* j_cum = i_cum + areaSize;
//000420:                 int* p1 = j_cum + areaSize;
//000421:                 int* p2 = p1 + areaSize;
//000422:                 int* p3 = p2 + areaSize;
//000423:                 int* p4 = p3 + areaSize;
//000424:                 int* p5 = p4 + areaSize;
//000425:                 int* p6 = p5 + areaSize;
//000426:                 int* p7 = p6 + areaSize;
//000427: 
//000428:                 // p1 = (a11 + a22) * (b11 + b22) 
//000429:                 Task t_p1 = Task.Factory.StartNew(() =>
//000430:                 {
//000431:                     matrix_add(n_2, n_2,
//000432:                         A, ax, ay, a_s,
//000433:                         A, ax + n_2, ay + n_2, a_s,
//000434:                         a_cum, 0, 0, n_2);
//000435:                     matrix_add(n_2, n_2,
//000436:                         B, bx, by, bs,
//000437:                         B, bx + n_2, by + n_2, bs,
//000438:                         b_cum, 0, 0, n_2);
//000439:                     strassen_mult_parallel(
//000440:                         cancellationToken,
//000441:                         n_2,
//000442:                         a_cum, 0, 0, n_2,
//000443:                         b_cum, 0, 0, n_2,
//000444:                         p1, 0, 0, n_2,
//000445:                         s);
//000446:                 }, cancellationToken);
//000447: 
//000448:                 // p2 = (a21 + a22) * b11 
//000449:                 Task t_p2 = Task.Factory.StartNew(() =>
//000450:                 {
//000451:                     matrix_add(n_2, n_2,
//000452:                         A, ax + n_2, ay, a_s,
//000453:                         A, ax + n_2, ay + n_2, a_s,
//000454:                         c_cum, 0, 0, n_2);
//000455:                     strassen_mult_parallel(
//000456:                         cancellationToken,
//000457:                         n_2,
//000458:                         c_cum, 0, 0, n_2,
//000459:                         B, bx, by, bs,
//000460:                         p2, 0, 0, n_2,
//000461:                         s);
//000462:                 }, cancellationToken);
//000463: 
//000464:                 // p3 = a11 x (b12 - b22) 
//000465:                 Task t_p3 = Task.Factory.StartNew(() =>
//000466:                 {
//000467:                     matrix_sub(n_2, n_2,
//000468:                         B, bx, by + n_2, bs,
//000469:                         B, bx + n_2, by + n_2, bs,
//000470:                         d_cum, 0, 0, n_2);
//000471:                     strassen_mult_parallel(
//000472:                         cancellationToken,
//000473:                         n_2,
//000474:                         A, ax, ay, a_s,
//000475:                         d_cum, 0, 0, n_2,
//000476:                         p3, 0, 0, n_2,
//000477:                         s);
//000478:                 }, cancellationToken);
//000479: 
//000480:                 // p4 = a22 x (b21 - b11) 
//000481:                 Task t_p4 = Task.Factory.StartNew(() =>
//000482:                 {
//000483:                     matrix_sub(n_2, n_2,
//000484:                         B, bx + n_2, by, bs,
//000485:                         B, bx, by, bs,
//000486:                         e_cum, 0, 0, n_2);
//000487:                     strassen_mult_parallel(
//000488:                         cancellationToken,
//000489:                         n_2,
//000490:                         A, ax + n_2, ay + n_2, a_s,
//000491:                         e_cum, 0, 0, n_2,
//000492:                         p4, 0, 0, n_2,
//000493:                         s);
//000494:                 }, cancellationToken);
//000495: 
//000496:                 // p5 = (a11 + a12) x b22 
//000497:                 Task t_p5 = Task.Factory.StartNew(() =>
//000498:                 {
//000499:                     matrix_add(n_2, n_2,
//000500:                         A, ax, ay, a_s,
//000501:                         A, ax, ay + n_2, a_s,
//000502:                         f_cum, 0, 0, n_2);
//000503:                     strassen_mult_parallel(
//000504:                         cancellationToken,
//000505:                         n_2,
//000506:                         f_cum, 0, 0, n_2,
//000507:                         B, bx + n_2, by + n_2, bs,
//000508:                         p5, 0, 0, n_2,
//000509:                         s);
//000510:                 }, cancellationToken);
//000511: 
//000512:                 // p6 = (a21 - a11) x (b11 + b12) 
//000513:                 Task t_p6 = Task.Factory.StartNew(() =>
//000514:                 {
//000515:                     matrix_sub(n_2, n_2,
//000516:                         A, ax + n_2, ay, a_s,
//000517:                         A, ax, ay, a_s,
//000518:                         g_cum, 0, 0, n_2);
//000519:                     matrix_add(n_2, n_2,
//000520:                         B, bx, by, bs,
//000521:                         B, bx, by + n_2, bs,
//000522:                         h_cum, 0, 0, n_2);
//000523:                     strassen_mult_parallel(
//000524:                         cancellationToken,
//000525:                         n_2,
//000526:                         g_cum, 0, 0, n_2,
//000527:                         h_cum, 0, 0, n_2,
//000528:                         p6, 0, 0, n_2,
//000529:                         s);
//000530:                 }, cancellationToken);
//000531: 
//000532:                 // p7 = (a12 - a22) x (b21 + b22) 
//000533:                 Task t_p7 = Task.Factory.StartNew(() =>
//000534:                 {
//000535:                     matrix_sub(n_2, n_2,
//000536:                         A, ax, ay + n_2, a_s,
//000537:                         A, ax + n_2, ay + n_2, a_s,
//000538:                         i_cum, 0, 0, n_2);
//000539:                     matrix_add(n_2, n_2,
//000540:                         B, bx + n_2, by, bs,
//000541:                         B, bx + n_2, by + n_2, bs,
//000542:                         j_cum, 0, 0, n_2);
//000543:                     strassen_mult_parallel(
//000544:                         cancellationToken,
//000545:                         n_2,
//000546:                         i_cum, 0, 0, n_2,
//000547:                         j_cum, 0, 0, n_2,
//000548:                         p7, 0, 0, n_2,
//000549:                         s);
//000550:                 }, cancellationToken);
//000551: 
//000552:                 try { Task.WaitAll(t_p1, t_p2, t_p3, t_p4, t_p5, t_p6, t_p7); }
//000553:                 catch (AggregateException ae)
//000554:                 {
//000555:                     ae.Flatten().Handle(e => e is TaskCanceledException);
//000556:                     cancellationToken.ThrowIfCancellationRequested();
//000557:                 }
//000558: 
//000559:                 // c11 = p1 + p4 - p5 + p7 
//000560:                 Task t_c11 = Task.Factory.StartNew(() =>
//000561:                 {
//000562:                     matrix_add(n_2, n_2,
//000563:                         p1, 0, 0, n_2,
//000564:                         p4, 0, 0, n_2,
//000565:                         C, cx, cy, cs);
//000566:                     matrix_sub(n_2, n_2,
//000567:                         C, cx, cy, cs,
//000568:                         p5, 0, 0, n_2,
//000569:                         C, cx, cy, cs);
//000570:                     matrix_add(n_2, n_2,
//000571:                         C, cx, cy, cs,
//000572:                         p7, 0, 0, n_2,
//000573:                         C, cx, cy, cs);
//000574:                 });
//000575: 
//000576:                 // c12 = p3 + p5 
//000577:                 Task t_c12 = Task.Factory.StartNew(() =>
//000578:                 {
//000579:                     matrix_add(n_2, n_2,
//000580:                         p3, 0, 0, n_2,
//000581:                         p5, 0, 0, n_2,
//000582:                         C, cx, cy + n_2, cs);
//000583:                 });
//000584: 
//000585:                 // c21 = p2 + p4 
//000586:                 Task t_c21 = Task.Factory.StartNew(() =>
//000587:                 {
//000588:                     matrix_add(n_2, n_2,
//000589:                         p2, 0, 0, n_2,
//000590:                         p4, 0, 0, n_2,
//000591:                         C, cx + n_2, cy, cs);
//000592:                 });
//000593: 
//000594:                 // c22 = p1 + p3 - p2 + p6 
//000595:                 Task t_c22 = Task.Factory.StartNew(() =>
//000596:                 {
//000597:                     matrix_add(n_2, n_2,
//000598:                         p1, 0, 0, n_2,
//000599:                         p3, 0, 0, n_2,
//000600:                         C, cx + n_2, cy + n_2, cs);
//000601:                     matrix_sub(n_2, n_2,
//000602:                         C, cx + n_2, cy + n_2, cs,
//000603:                         p2, 0, 0, n_2,
//000604:                         C, cx + n_2, cy + n_2, cs);
//000605:                     matrix_add(n_2, n_2,
//000606:                         C, cx + n_2, cy + n_2, cs,
//000607:                         p6, 0, 0, n_2,
//000608:                         C, cx + n_2, cy + n_2, cs);
//000609:                 });
//000610: 
//000611:                 Task.WaitAll(t_c11, t_c12, t_c21, t_c22);
//000612:             }
//000613:         }
//000614:     }
//000615: }
    IL_0017:  ret
  } // end of method Matrix::.cctor

  .property instance int32[] ValidSizes()
  {
    .get instance int32[] Matrix::get_ValidSizes()
  } // end of property Matrix::ValidSizes
} // end of class Matrix

.class private auto ansi '<PrivateImplementationDetails>{39DB849E-4637-4782-9601-905307264E9E}'
       extends [mscorlib]System.Object
{
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
  .class explicit ansi sealed nested private '__StaticArrayInitTypeSize=52'
         extends [mscorlib]System.ValueType
  {
    .pack 1
    .size 52
  } // end of class '__StaticArrayInitTypeSize=52'

  .field static assembly valuetype '<PrivateImplementationDetails>{39DB849E-4637-4782-9601-905307264E9E}'/'__StaticArrayInitTypeSize=52' '$$method0x600003f-1' at I_00004BF0
} // end of class '<PrivateImplementationDetails>{39DB849E-4637-4782-9601-905307264E9E}'


// =============================================================

.data cil I_00004BF0 = bytearray (
                 10 00 00 00 20 00 00 00 40 00 00 00 80 00 00 00  // .... ...@.......
                 00 01 00 00 00 02 00 00 00 04 00 00 00 08 00 00
                 00 10 00 00 00 20 00 00 00 40 00 00 00 80 00 00  // ..... ...@......
                 00 00 01 00) 
// *********** DISASSEMBLY COMPLETE ***********************
