<project><name></name><description></description><prog_language></prog_language><source_elements>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\AsyncDownload\AsyncDownload_VisualBasic\My Project\Settings.Designer.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="17d14f5c-a337-4978-8281-53493378c1071.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="17d14f5c-a337-4978-8281-53493378c1071.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="17d14f5c-a337-4978-8281-53493378c1071.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="17d14f5c-a337-4978-8281-53493378c1071.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="17d14f5c-a337-4978-8281-53493378c1071.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="17d14f5c-a337-4978-8281-53493378c1071.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="17d14f5c-a337-4978-8281-53493378c1072.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="17d14f5c-a337-4978-8281-53493378c1072.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="17d14f5c-a337-4978-8281-53493378c1072.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="17d14f5c-a337-4978-8281-53493378c1072.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="17d14f5c-a337-4978-8281-53493378c1072.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="17d14f5c-a337-4978-8281-53493378c1072.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="17d14f5c-a337-4978-8281-53493378c1072.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="17d14f5c-a337-4978-8281-53493378c1072.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="17d14f5c-a337-4978-8281-53493378c1072.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="17d14f5c-a337-4978-8281-53493378c1072.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="17d14f5c-a337-4978-8281-53493378c1072.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="17d14f5c-a337-4978-8281-53493378c1072.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\AsyncDownload\AsyncDownload_VisualBasic\Module1.vb" startline="15" endline="47"><![CDATA[
     Sub Main()
         ' NOTE
 
         ' Single async request
         Download("http
 
         ' Single async request with timeout
         Download("http
 
         ' Concurrent async requests
         Task.Factory.ContinueWhenAll(
         {
             Download("http
             Download("http
             Download("http
             Download("http
             Download("http
         }, AddressOf ConcurrentTasksCompleted).Wait()
 
         ' Serial async requests
         Task.Factory.TrackedSequence(
             Function() Download("http
             Function() Download("http
             Function() Download("http
             Function() Download("http
             Function() Download("http
         ).ContinueWith(AddressOf SerialTasksCompleted).Wait()
 
         ' Done
         Console.WriteLine()
         Console.WriteLine("Press <enter> to exit.")
         Console.ReadLine()
     End Sub
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\AsyncDownload\AsyncDownload_VisualBasic\Module1.vb" startline="48" endline="52"><![CDATA[
 
     Function Download(ByVal url As String) As Task(Of Byte())
         Dim wc As New WebClient
         Return wc.DownloadDataTask(url)
     End Function
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\AsyncDownload\AsyncDownload_VisualBasic\Module1.vb" startline="53" endline="62"><![CDATA[
 
     Sub CompletedDownloadData(ByVal task As Task(Of Byte()))
         If task.Status = TaskStatus.RanToCompletion Then
             Console.WriteLine("Request succeeded
         ElseIf task.Status = TaskStatus.Faulted Then
             Console.WriteLine("Request failed
         ElseIf task.Status = TaskStatus.Canceled Then
             Console.WriteLine("Request was canceled")
         End If
     End Sub
 
     Sub SerialTasksCompleted(ByVal tasks As Task(Of IList(Of Task)))
         Dim failures = tasks.Result.Where(Function(t) t.Exception IsNot Nothing).Count()
         Console.WriteLine("Serial result
     End Sub
 
     Sub ConcurrentTasksCompleted(ByVal tasks As Task(Of Byte())())
         Dim failures = tasks.Where(Function(t) t.Exception IsNot Nothing).Count()
         Console.WriteLine("Concurrent result
     End Sub
 End Module
             Console.WriteLine("Request succeeded
         ElseIf task.Status = TaskStatus.Faulted Then
             Console.WriteLine("Request failed
         ElseIf task.Status = TaskStatus.Canceled Then
             Console.WriteLine("Request was canceled")
         End If
     End Sub
 
     Sub SerialTasksCompleted(ByVal tasks As Task(Of IList(Of Task)))
         Dim failures = tasks.Result.Where(Function(t) t.Exception IsNot Nothing).Count()
         Console.WriteLine("Serial result
     End Sub
 
     Sub ConcurrentTasksCompleted(ByVal tasks As Task(Of Byte())())
         Dim failures = tasks.Where(Function(t) t.Exception IsNot Nothing).Count()
         Console.WriteLine("Concurrent result
     End Sub
 End Module
             Console.WriteLine("Request failed
         ElseIf task.Status = TaskStatus.Canceled Then
             Console.WriteLine("Request was canceled")
         End If
     End Sub
 
     Sub SerialTasksCompleted(ByVal tasks As Task(Of IList(Of Task)))
         Dim failures = tasks.Result.Where(Function(t) t.Exception IsNot Nothing).Count()
         Console.WriteLine("Serial result
     End Sub
 
     Sub ConcurrentTasksCompleted(ByVal tasks As Task(Of Byte())())
         Dim failures = tasks.Where(Function(t) t.Exception IsNot Nothing).Count()
         Console.WriteLine("Concurrent result
     End Sub
 End Module
             Console.WriteLine("Request was canceled")
         End If
     End Sub
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\AsyncDownload\AsyncDownload_VisualBasic\Module1.vb" startline="63" endline="67"><![CDATA[
 
     Sub SerialTasksCompleted(ByVal tasks As Task(Of IList(Of Task)))
         Dim failures = tasks.Result.Where(Function(t) t.Exception IsNot Nothing).Count()
         Console.WriteLine("Serial result
     End Sub
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\AsyncDownload\AsyncDownload_VisualBasic\Module1.vb" startline="68" endline="72"><![CDATA[
 
     Sub ConcurrentTasksCompleted(ByVal tasks As Task(Of Byte())())
         Dim failures = tasks.Where(Function(t) t.Exception IsNot Nothing).Count()
         Console.WriteLine("Concurrent result
     End Sub
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\AsyncDownload\AsyncDownload_VisualBasic\Module1.vb" startline="36" endline="36"><![CDATA[
             Function() Download("http
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\AsyncDownload\AsyncDownload_VisualBasic\Module1.vb" startline="37" endline="37"><![CDATA[
             Function() Download("http
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\AsyncDownload\AsyncDownload_VisualBasic\Module1.vb" startline="38" endline="38"><![CDATA[
             Function() Download("http
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\AsyncDownload\AsyncDownload_VisualBasic\Module1.vb" startline="39" endline="39"><![CDATA[
             Function() Download("http
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\AsyncDownload\AsyncDownload_VisualBasic\Module1.vb" startline="40" endline="40"><![CDATA[
             Function() Download("http
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\AsyncDownload\AsyncDownload_VisualBasic\Module1.vb" startline="41" endline="65"><![CDATA[
         ).ContinueWith(AddressOf SerialTasksCompleted).Wait()
 
         ' Done
         Console.WriteLine()
         Console.WriteLine("Press <enter> to exit.")
         Console.ReadLine()
     End Sub
 
     Function Download(ByVal url As String) As Task(Of Byte())
         Dim wc As New WebClient
         Return wc.DownloadDataTask(url)
     End Function
 
     Sub CompletedDownloadData(ByVal task As Task(Of Byte()))
         If task.Status = TaskStatus.RanToCompletion Then
             Console.WriteLine("Request succeeded
         ElseIf task.Status = TaskStatus.Faulted Then
             Console.WriteLine("Request failed
         ElseIf task.Status = TaskStatus.Canceled Then
             Console.WriteLine("Request was canceled")
         End If
     End Sub
 
     Sub SerialTasksCompleted(ByVal tasks As Task(Of IList(Of Task)))
         Dim failures = tasks.Result.Where(Function(t) t.Exception IsNot Nothing).Count()
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\AsyncDownload\AsyncDownload_VisualBasic\Module1.vb" startline="66" endline="70"><![CDATA[
         Console.WriteLine("Serial result
     End Sub
 
     Sub ConcurrentTasksCompleted(ByVal tasks As Task(Of Byte())())
         Dim failures = tasks.Where(Function(t) t.Exception IsNot Nothing).Count()
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\AsyncDownload\AsyncDownload_VisualBasic\My Project\Resources.Designer.vb" startline="40" endline="46"><![CDATA[
             Get
                 If Object.ReferenceEquals(resourceMan, Nothing) Then
                     Dim temp As Global.System.Resources.ResourceManager = New Global.System.Resources.ResourceManager("AsyncDownload.Resources", GetType(Resources).Assembly)
                     resourceMan = temp
                 End If
                 Return resourceMan
             End Get
         End Property
         
         '''<summary>
         '''  Overrides the current thread's CurrentUICulture property for all
         '''  resource lookups using this strongly typed resource class.
         '''</summary>
         <Global.System.ComponentModel.EditorBrowsableAttribute(Global.System.ComponentModel.EditorBrowsableState.Advanced)>  _
         Friend Property Culture() As Global.System.Globalization.CultureInfo
             Get
                 Return resourceCulture
             End Get
             Set
                 resourceCulture = value
             End Set
         End Property
     End Module
 End Namespace
                     Dim temp As Global.System.Resources.ResourceManager = New Global.System.Resources.ResourceManager("AsyncDownload.Resources", GetType(Resources).Assembly)
                     resourceMan = temp
                 End If
                 Return resourceMan
             End Get
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\AsyncDownload\AsyncDownload_VisualBasic\My Project\Resources.Designer.vb" startline="47" endline="57"><![CDATA[
         End Property
         
         '''<summary>
         '''  Overrides the current thread's CurrentUICulture property for all
         '''  resource lookups using this strongly typed resource class.
         '''</summary>
         <Global.System.ComponentModel.EditorBrowsableAttribute(Global.System.ComponentModel.EditorBrowsableState.Advanced)>  _
         Friend Property Culture() As Global.System.Globalization.CultureInfo
             Get
                 Return resourceCulture
             End Get
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\AsyncDownload\AsyncDownload_VisualBasic\My Project\Resources.Designer.vb" startline="58" endline="60"><![CDATA[
             Set
                 resourceCulture = value
             End Set
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\AsyncDownload\AsyncDownload_VisualBasic\My Project\Settings.Designer.vb" startline="23" endline="23"><![CDATA[
         Private Shared defaultInstance As MySettings = CType(Global.System.Configuration.ApplicationSettingsBase.Synchronized(New MySettings()),MySettings)
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\AsyncDownload\AsyncDownload_VisualBasic\My Project\Settings.Designer.vb" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\AsyncDownload\AsyncDownload_VisualBasic\My Project\Settings.Designer.vb" startline="24" endline="54"><![CDATA[
         
 #Region "My.Settings Auto-Save Functionality"
 #If _MyType = "WindowsForms" Then
     Private Shared addedHandler As Boolean
 
     Private Shared addedHandlerLockObject As New Object
 
     <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.EditorBrowsableAttribute(Global.System.ComponentModel.EditorBrowsableState.Advanced)> _
     Private Shared Sub AutoSaveSettings(ByVal sender As Global.System.Object, ByVal e As Global.System.EventArgs)
         If My.Application.SaveMySettingsOnExit Then
             My.Settings.Save()
         End If
     End Sub
 #End If
 #End Region
         
         Public Shared ReadOnly Property [Default]() As MySettings
             Get
                 
 #If _MyType = "WindowsForms" Then
                If Not addedHandler Then
                     SyncLock addedHandlerLockObject
                         If Not addedHandler Then
                             AddHandler My.Application.Shutdown, AddressOf AutoSaveSettings
                             addedHandler = True
                         End If
                     End SyncLock
                 End If
 #End If
                 Return defaultInstance
             End Get
]]></source>
<source file="C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\AsyncDownload\AsyncDownload_VisualBasic\My Project\Settings.Designer.vb" startline="55" endline="70"><![CDATA[
         End Property
     End Class
 End Namespace
 
 Namespace My
     
     <Global.Microsoft.VisualBasic.HideModuleNameAttribute(),  _
      Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
      Global.System.Runtime.CompilerServices.CompilerGeneratedAttribute()>  _
     Friend Module MySettingsProperty
         
         <Global.System.ComponentModel.Design.HelpKeywordAttribute("My.Settings")>  _
         Friend ReadOnly Property Settings() As Global.AsyncDownload.My.MySettings
             Get
                 Return Global.AsyncDownload.My.MySettings.Default
             End Get
]]></source>
</source_elements></project>
