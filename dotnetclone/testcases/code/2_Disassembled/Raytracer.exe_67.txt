
//  Microsoft (R) .NET Framework IL Disassembler.  Version 4.0.30319.1
//  Copyright (c) Microsoft Corporation.  All rights reserved.



// Metadata version: v4.0.30319
.assembly extern mscorlib
{
  .publickeytoken = (B7 7A 5C 56 19 34 E0 89 )                         // .z\V.4..
  .ver 4:0:0:0
}
.assembly extern Microsoft.VisualBasic
{
  .publickeytoken = (B0 3F 5F 7F 11 D5 0A 3A )                         // .?_....:
  .ver 10:0:0:0
}
.assembly extern System.Windows.Forms
{
  .publickeytoken = (B7 7A 5C 56 19 34 E0 89 )                         // .z\V.4..
  .ver 4:0:0:0
}
.assembly extern System.Drawing
{
  .publickeytoken = (B0 3F 5F 7F 11 D5 0A 3A )                         // .?_....:
  .ver 4:0:0:0
}
.assembly extern System
{
  .publickeytoken = (B7 7A 5C 56 19 34 E0 89 )                         // .z\V.4..
  .ver 4:0:0:0
}
.assembly extern ParallelExtensionsExtras
{
  .ver 1:2:0:0
}
.assembly Raytracer
{
  .custom instance void [mscorlib]System.Reflection.AssemblyCopyrightAttribute::.ctor(string) = ( 01 00 39 43 6F 70 79 72 69 67 68 74 20 C2 A9 20   // ..9Copyright .. 
                                                                                                  4D 69 63 72 6F 73 6F 66 74 20 43 6F 72 70 6F 72   // Microsoft Corpor
                                                                                                  61 74 69 6F 6E 2E 20 20 41 6C 6C 20 72 69 67 68   // ation.  All righ
                                                                                                  74 73 20 72 65 73 65 72 76 65 64 2E 00 00 )       // ts reserved...
  .custom instance void [mscorlib]System.Reflection.AssemblyTrademarkAttribute::.ctor(string) = ( 01 00 00 00 00 ) 
  .custom instance void [mscorlib]System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = ( 01 00 00 00 00 ) 

  // --- The following custom attribute is added automatically, do not uncomment -------
  //  .custom instance void [mscorlib]System.Diagnostics.DebuggableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggableAttribute/DebuggingModes) = ( 01 00 07 01 00 00 00 00 ) 

  .custom instance void [mscorlib]System.Runtime.InteropServices.GuidAttribute::.ctor(string) = ( 01 00 24 31 39 65 62 39 36 38 39 2D 61 62 38 66   // ..$19eb9689-ab8f
                                                                                                  2D 34 63 36 33 2D 61 34 30 37 2D 64 36 35 63 66   // -4c63-a407-d65cf
                                                                                                  66 65 64 36 63 30 62 00 00 )                      // fed6c0b..
  .custom instance void [mscorlib]System.Reflection.AssemblyCompanyAttribute::.ctor(string) = ( 01 00 15 4D 69 63 72 6F 73 6F 66 74 20 43 6F 72   // ...Microsoft Cor
                                                                                                70 6F 72 61 74 69 6F 6E 00 00 )                   // poration..
  .custom instance void [mscorlib]System.Reflection.AssemblyDescriptionAttribute::.ctor(string) = ( 01 00 00 00 00 ) 
  .custom instance void [mscorlib]System.Reflection.AssemblyTitleAttribute::.ctor(string) = ( 01 00 15 52 61 79 74 72 61 63 65 72 5F 56 69 73   // ...Raytracer_Vis
                                                                                              75 61 6C 42 61 73 69 63 00 00 )                   // ualBasic..
  .custom instance void [mscorlib]System.Reflection.AssemblyProductAttribute::.ctor(string) = ( 01 00 15 52 61 79 74 72 61 63 65 72 5F 56 69 73   // ...Raytracer_Vis
                                                                                                75 61 6C 42 61 73 69 63 00 00 )                   // ualBasic..
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilationRelaxationsAttribute::.ctor(int32) = ( 01 00 08 00 00 00 00 00 ) 
  .custom instance void [mscorlib]System.Runtime.CompilerServices.RuntimeCompatibilityAttribute::.ctor() = ( 01 00 01 00 54 02 16 57 72 61 70 4E 6F 6E 45 78   // ....T..WrapNonEx
                                                                                                             63 65 70 74 69 6F 6E 54 68 72 6F 77 73 01 )       // ceptionThrows.
  .custom instance void [mscorlib]System.Runtime.Versioning.TargetFrameworkAttribute::.ctor(string) = ( 01 00 1A 2E 4E 45 54 46 72 61 6D 65 77 6F 72 6B   // ....NETFramework
                                                                                                        2C 56 65 72 73 69 6F 6E 3D 76 34 2E 30 01 00 54   // ,Version=v4.0..T
                                                                                                        0E 14 46 72 61 6D 65 77 6F 72 6B 44 69 73 70 6C   // ..FrameworkDispl
                                                                                                        61 79 4E 61 6D 65 10 2E 4E 45 54 20 46 72 61 6D   // ayName..NET Fram
                                                                                                        65 77 6F 72 6B 20 34 )                            // ework 4
  .custom instance void [mscorlib]System.Reflection.AssemblyFileVersionAttribute::.ctor(string) = ( 01 00 07 31 2E 30 2E 30 2E 30 00 00 )             // ...1.0.0.0..
  .hash algorithm 0x00008004
  .ver 1:0:0:0
}
.mresource public Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Resources.resources
{
  // Offset: 0x00000000 Length: 0x000000B4
}
.mresource public Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main.resources
{
  // Offset: 0x000000B8 Length: 0x000000B4
}
.module Raytracer.exe
// MVID: {20748138-E02E-426B-939E-FBBBD84C327B}
.imagebase 0x00400000
.file alignment 0x00000200
.stackreserve 0x00100000
.subsystem 0x0002       // WINDOWS_GUI
.corflags 0x00000001    //  ILONLY
// Image base: 0x012B0000


// =============== CLASS MEMBERS DECLARATION ===================

.class private auto ansi beforefieldinit Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyApplication
       extends [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase
{
  .custom instance void [System]System.CodeDom.Compiler.GeneratedCodeAttribute::.ctor(string,
                                                                                      string) = ( 01 00 0A 4D 79 54 65 6D 70 6C 61 74 65 08 31 30   // ...MyTemplate.10
                                                                                                  2E 30 2E 30 2E 30 00 00 )                         // .0.0.0..
  .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
  .field private static class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> __ENCList
  .method private specialname rtspecialname static 
          void  .cctor() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       12 (0xc)
    .maxstack  8
    IL_0000:  newobj     instance void class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::.ctor()
    IL_0005:  stsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyApplication::__ENCList
    IL_000a:  nop
    IL_000b:  ret
  } // end of method MyApplication::.cctor

  .method private static void  __ENCAddToList(object 'value') cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       243 (0xf3)
    .maxstack  4
    .locals init (int32 V_0,
             int32 V_1,
             class [mscorlib]System.WeakReference V_2,
             class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> V_3,
             bool V_4,
             int32 V_5,
             bool V_6,
             bool V_7,
             int32 V_8)
    IL_0000:  nop
    IL_0001:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyApplication::__ENCList
    IL_0006:  stloc.3
    IL_0007:  ldc.i4.0
    IL_0008:  stloc.s    V_4
    IL_000a:  nop
    .try
    {
      IL_000b:  ldloc.3
      IL_000c:  ldloca.s   V_4
      IL_000e:  call       void [mscorlib]System.Threading.Monitor::Enter(object,
                                                                          bool&)
      IL_0013:  nop
      IL_0014:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyApplication::__ENCList
      IL_0019:  callvirt   instance int32 class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::get_Count()
      IL_001e:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyApplication::__ENCList
      IL_0023:  callvirt   instance int32 class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::get_Capacity()
      IL_0028:  ceq
      IL_002a:  stloc.s    V_6
      IL_002c:  ldloc.s    V_6
      IL_002e:  brfalse    IL_00c4

      IL_0033:  ldc.i4.0
      IL_0034:  stloc.0
      IL_0035:  ldc.i4.0
      IL_0036:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyApplication::__ENCList
      IL_003b:  callvirt   instance int32 class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::get_Count()
      IL_0040:  ldc.i4.1
      IL_0041:  sub.ovf
      IL_0042:  stloc.s    V_5
      IL_0044:  stloc.1
      IL_0045:  br.s       IL_008e

      IL_0047:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyApplication::__ENCList
      IL_004c:  ldloc.1
      IL_004d:  callvirt   instance !0 class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::get_Item(int32)
      IL_0052:  stloc.2
      IL_0053:  ldloc.2
      IL_0054:  callvirt   instance bool [mscorlib]System.WeakReference::get_IsAlive()
      IL_0059:  stloc.s    V_6
      IL_005b:  ldloc.s    V_6
      IL_005d:  brfalse.s  IL_0088

      IL_005f:  ldloc.1
      IL_0060:  ldloc.0
      IL_0061:  ceq
      IL_0063:  ldc.i4.0
      IL_0064:  ceq
      IL_0066:  stloc.s    V_7
      IL_0068:  ldloc.s    V_7
      IL_006a:  brfalse.s  IL_0083

      IL_006c:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyApplication::__ENCList
      IL_0071:  ldloc.0
      IL_0072:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyApplication::__ENCList
      IL_0077:  ldloc.1
      IL_0078:  callvirt   instance !0 class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::get_Item(int32)
      IL_007d:  callvirt   instance void class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::set_Item(int32,
                                                                                                                                           !0)
      IL_0082:  nop
      IL_0083:  nop
      IL_0084:  ldloc.0
      IL_0085:  ldc.i4.1
      IL_0086:  add.ovf
      IL_0087:  stloc.0
      IL_0088:  nop
      IL_0089:  nop
      IL_008a:  ldloc.1
      IL_008b:  ldc.i4.1
      IL_008c:  add.ovf
      IL_008d:  stloc.1
      IL_008e:  ldloc.1
      IL_008f:  ldloc.s    V_5
      IL_0091:  stloc.s    V_8
      IL_0093:  ldloc.s    V_8
      IL_0095:  ble.s      IL_0047

      IL_0097:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyApplication::__ENCList
      IL_009c:  ldloc.0
      IL_009d:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyApplication::__ENCList
      IL_00a2:  callvirt   instance int32 class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::get_Count()
      IL_00a7:  ldloc.0
      IL_00a8:  sub.ovf
      IL_00a9:  callvirt   instance void class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::RemoveRange(int32,
                                                                                                                                              int32)
      IL_00ae:  nop
      IL_00af:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyApplication::__ENCList
      IL_00b4:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyApplication::__ENCList
      IL_00b9:  callvirt   instance int32 class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::get_Count()
      IL_00be:  callvirt   instance void class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::set_Capacity(int32)
      IL_00c3:  nop
      IL_00c4:  nop
      IL_00c5:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyApplication::__ENCList
      IL_00ca:  ldarg.0
      IL_00cb:  call       object [mscorlib]System.Runtime.CompilerServices.RuntimeHelpers::GetObjectValue(object)
      IL_00d0:  newobj     instance void [mscorlib]System.WeakReference::.ctor(object)
      IL_00d5:  callvirt   instance void class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::Add(!0)
      IL_00da:  nop
      IL_00db:  nop
      IL_00dc:  leave.s    IL_00f0

    }  // end .try
    finally
    {
      IL_00de:  nop
      IL_00df:  ldloc.s    V_4
      IL_00e1:  stloc.s    V_7
      IL_00e3:  ldloc.s    V_7
      IL_00e5:  brfalse.s  IL_00ee

      IL_00e7:  ldloc.3
      IL_00e8:  call       void [mscorlib]System.Threading.Monitor::Exit(object)
      IL_00ed:  nop
      IL_00ee:  nop
      IL_00ef:  endfinally
    }  // end handler
    IL_00f0:  nop
    IL_00f1:  nop
    IL_00f2:  ret
  } // end of method MyApplication::__ENCAddToList

  .method assembly static void  Main(string[] Args) cil managed noinlining nooptimization
  {
    .entrypoint
    .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [mscorlib]System.STAThreadAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 02 00 00 00 00 00 ) 
    // Code size       32 (0x20)
    .maxstack  2
    .language '{3A12D0B8-C26C-11D0-B442-00A0244A1DD2}', '{994B45C4-E6E9-11D2-903F-00C04FA302A1}', '{5A869D0B-6611-11D3-BD2A-0000F80849BD}'
// Source File '17d14f5c-a337-4978-8281-53493378c1071.vb' not found
    IL_0000:  nop
    IL_0001:  nop
    .try
    {
      IL_0002:  call       bool [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase::get_UseCompatibleTextRendering()
      IL_0007:  call       void [System.Windows.Forms]System.Windows.Forms.Application::SetCompatibleTextRenderingDefault(bool)
      IL_000c:  nop
      IL_000d:  leave.s    IL_0011

    }  // end .try
    finally
    {
      IL_000f:  nop
      IL_0010:  endfinally
    }  // end handler
    IL_0011:  nop
    IL_0012:  call       class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyApplication Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject::get_Application()
    IL_0017:  ldarg.0
    IL_0018:  callvirt   instance void [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase::Run(string[])
    IL_001d:  nop
    IL_001e:  nop
    IL_001f:  ret
  } // end of method MyApplication::Main

  .method public specialname rtspecialname 
          instance void  .ctor() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerStepThroughAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       50 (0x32)
    .maxstack  8
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Raytracer\Raytracer_VisualBasic\My Project\Application.Designer.vb' 
//000025:         Public Sub New()
    IL_0000:  nop
//000026:             MyBase.New(Global.Microsoft.VisualBasic.ApplicationServices.AuthenticationMode.Windows)
    IL_0001:  ldarg.0
    IL_0002:  ldc.i4.0
    IL_0003:  call       instance void [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase::.ctor(valuetype [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.AuthenticationMode)
    IL_0008:  nop
//000027:             Me.IsSingleInstance = false
//000028:             Me.EnableVisualStyles = true
//000029:             Me.SaveMySettingsOnExit = false
//000030:             Me.ShutDownStyle = Global.Microsoft.VisualBasic.ApplicationServices.ShutdownMode.AfterMainFormCloses
//000031:         End Sub
//000032:         
//000033:         <Global.System.Diagnostics.DebuggerStepThroughAttribute()>  _
//000034:         Protected Overrides Sub OnCreateMainForm()
//000035:             Me.MainForm = Global.Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main
//000036:         End Sub
//000037:     End Class
//000038: End Namespace
    IL_0009:  ldarg.0
    IL_000a:  call       void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyApplication::__ENCAddToList(object)
    IL_000f:  nop
//000027:             Me.IsSingleInstance = false
    IL_0010:  ldarg.0
    IL_0011:  ldc.i4.0
    IL_0012:  callvirt   instance void [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase::set_IsSingleInstance(bool)
    IL_0017:  nop
//000028:             Me.EnableVisualStyles = true
    IL_0018:  ldarg.0
    IL_0019:  ldc.i4.1
    IL_001a:  callvirt   instance void [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase::set_EnableVisualStyles(bool)
    IL_001f:  nop
//000029:             Me.SaveMySettingsOnExit = false
    IL_0020:  ldarg.0
    IL_0021:  ldc.i4.0
    IL_0022:  callvirt   instance void [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase::set_SaveMySettingsOnExit(bool)
    IL_0027:  nop
//000030:             Me.ShutDownStyle = Global.Microsoft.VisualBasic.ApplicationServices.ShutdownMode.AfterMainFormCloses
    IL_0028:  ldarg.0
    IL_0029:  ldc.i4.0
    IL_002a:  callvirt   instance void [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase::set_ShutdownStyle(valuetype [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.ShutdownMode)
    IL_002f:  nop
//000031:         End Sub
    IL_0030:  nop
    IL_0031:  ret
  } // end of method MyApplication::.ctor

  .method family strict virtual instance void 
          OnCreateMainForm() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerStepThroughAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       20 (0x14)
    .maxstack  8
//000032:         
//000033:         <Global.System.Diagnostics.DebuggerStepThroughAttribute()>  _
//000034:         Protected Overrides Sub OnCreateMainForm()
    IL_0000:  nop
//000035:             Me.MainForm = Global.Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main
    IL_0001:  ldarg.0
    IL_0002:  call       class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject/MyForms Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject::get_Forms()
    IL_0007:  callvirt   instance class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject/MyForms::get_Main()
    IL_000c:  callvirt   instance void [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase::set_MainForm(class [System.Windows.Forms]System.Windows.Forms.Form)
    IL_0011:  nop
//000036:         End Sub
    IL_0012:  nop
    IL_0013:  ret
  } // end of method MyApplication::OnCreateMainForm

} // end of class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyApplication

.class private auto ansi Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyComputer
       extends [Microsoft.VisualBasic]Microsoft.VisualBasic.Devices.Computer
{
  .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
  .custom instance void [System]System.CodeDom.Compiler.GeneratedCodeAttribute::.ctor(string,
                                                                                      string) = ( 01 00 0A 4D 79 54 65 6D 70 6C 61 74 65 08 31 30   // ...MyTemplate.10
                                                                                                  2E 30 2E 30 2E 30 00 00 )                         // .0.0.0..
  .method public specialname rtspecialname 
          instance void  .ctor() cil managed
  {
    .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
    .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       10 (0xa)
    .maxstack  8
// Source File '17d14f5c-a337-4978-8281-53493378c1071.vb' not found
    IL_0000:  nop
    IL_0001:  ldarg.0
    IL_0002:  call       instance void [Microsoft.VisualBasic]Microsoft.VisualBasic.Devices.Computer::.ctor()
    IL_0007:  nop
    IL_0008:  nop
    IL_0009:  ret
  } // end of method MyComputer::.ctor

} // end of class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyComputer

.class private auto ansi sealed beforefieldinit Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject
       extends [mscorlib]System.Object
{
  .custom instance void [Microsoft.VisualBasic]Microsoft.VisualBasic.CompilerServices.StandardModuleAttribute::.ctor() = ( 01 00 00 00 ) 
  .custom instance void [System]System.CodeDom.Compiler.GeneratedCodeAttribute::.ctor(string,
                                                                                      string) = ( 01 00 0A 4D 79 54 65 6D 70 6C 61 74 65 08 31 30   // ...MyTemplate.10
                                                                                                  2E 30 2E 30 2E 30 00 00 )                         // .0.0.0..
  .custom instance void [Microsoft.VisualBasic]Microsoft.VisualBasic.HideModuleNameAttribute::.ctor() = ( 01 00 00 00 ) 
  .class auto ansi sealed nested assembly MyForms
         extends [mscorlib]System.Object
  {
    .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
    .custom instance void [Microsoft.VisualBasic]Microsoft.VisualBasic.MyGroupCollectionAttribute::.ctor(string,
                                                                                                         string,
                                                                                                         string,
                                                                                                         string) = ( 01 00 19 53 79 73 74 65 6D 2E 57 69 6E 64 6F 77   // ...System.Window
                                                                                                                     73 2E 46 6F 72 6D 73 2E 46 6F 72 6D 12 43 72 65   // s.Forms.Form.Cre
                                                                                                                     61 74 65 5F 5F 49 6E 73 74 61 6E 63 65 5F 5F 13   // ate__Instance__.
                                                                                                                     44 69 73 70 6F 73 65 5F 5F 49 6E 73 74 61 6E 63   // Dispose__Instanc
                                                                                                                     65 5F 5F 12 4D 79 2E 4D 79 50 72 6F 6A 65 63 74   // e__.My.MyProject
                                                                                                                     2E 46 6F 72 6D 73 00 00 )                         // .Forms..
    .field public class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main m_Main
    .field private static class [mscorlib]System.Collections.Hashtable m_FormBeingCreated
    .custom instance void [mscorlib]System.ThreadStaticAttribute::.ctor() = ( 01 00 00 00 ) 
    .method public specialname instance class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main 
            get_Main() cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       28 (0x1c)
      .maxstack  2
      .locals init (class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main V_0)
      IL_0000:  ldarg.0
      IL_0001:  ldarg.0
      IL_0002:  ldfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject/MyForms::m_Main
      IL_0007:  call       !!0 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject/MyForms::Create__Instance__<class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main>(!!0)
      IL_000c:  stfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject/MyForms::m_Main
      IL_0011:  ldarg.0
      IL_0012:  ldfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject/MyForms::m_Main
      IL_0017:  stloc.0
      IL_0018:  br.s       IL_001a

      IL_001a:  ldloc.0
      IL_001b:  ret
    } // end of method MyForms::get_Main

    .method public specialname instance void 
            set_Main(class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main Value) cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       55 (0x37)
      .maxstack  2
      .locals init (bool V_0)
      IL_0000:  ldarg.1
      IL_0001:  ldarg.0
      IL_0002:  ldfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject/MyForms::m_Main
      IL_0007:  ceq
      IL_0009:  stloc.0
      IL_000a:  ldloc.0
      IL_000b:  brfalse.s  IL_0010

      IL_000d:  nop
      IL_000e:  br.s       IL_0035

      IL_0010:  nop
      IL_0011:  ldarg.1
      IL_0012:  ldnull
      IL_0013:  ceq
      IL_0015:  ldc.i4.0
      IL_0016:  ceq
      IL_0018:  stloc.0
      IL_0019:  ldloc.0
      IL_001a:  brfalse.s  IL_0027

      IL_001c:  ldstr      "Property can only be set to Nothing"
      IL_0021:  newobj     instance void [mscorlib]System.ArgumentException::.ctor(string)
      IL_0026:  throw

      IL_0027:  nop
      IL_0028:  ldarg.0
      IL_0029:  ldarg.0
      IL_002a:  ldflda     class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject/MyForms::m_Main
      IL_002f:  callvirt   instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject/MyForms::Dispose__Instance__<class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main>(!!0&)
      IL_0034:  nop
      IL_0035:  nop
      IL_0036:  ret
    } // end of method MyForms::set_Main

    .method private static !!T  Create__Instance__<.ctor ([System.Windows.Forms]System.Windows.Forms.Form) T>(!!T Instance) cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       275 (0x113)
      .maxstack  4
      .locals init ([0] !!T Create__Instance__,
               [1] string BetterMessage,
               [2] class [mscorlib]System.Reflection.TargetInvocationException ex,
               [3] string[] VB$t_array$S0,
               [4] bool VB$CG$t_bool$S0,
               [5] bool VB$CG$t_bool$S1,
               [6] bool VB$CG$t_bool$S2)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  box        !!T
      IL_0007:  brfalse.s  IL_001b

      IL_0009:  ldarga.s   Instance
      IL_000b:  constrained. !!T
      IL_0011:  callvirt   instance bool [System.Windows.Forms]System.Windows.Forms.Control::get_IsDisposed()
      IL_0016:  brtrue.s   IL_001b

      IL_0018:  ldc.i4.0
      IL_0019:  br.s       IL_001c

      IL_001b:  ldc.i4.1
      IL_001c:  stloc.s    VB$CG$t_bool$S0
      IL_001e:  ldloc.s    VB$CG$t_bool$S0
      IL_0020:  brfalse    IL_010b

      IL_0025:  ldsfld     class [mscorlib]System.Collections.Hashtable Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject/MyForms::m_FormBeingCreated
      IL_002a:  ldnull
      IL_002b:  ceq
      IL_002d:  ldc.i4.0
      IL_002e:  ceq
      IL_0030:  stloc.s    VB$CG$t_bool$S1
      IL_0032:  ldloc.s    VB$CG$t_bool$S1
      IL_0034:  brfalse.s  IL_0069

      IL_0036:  ldsfld     class [mscorlib]System.Collections.Hashtable Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject/MyForms::m_FormBeingCreated
      IL_003b:  ldtoken    !!T
      IL_0040:  call       class [mscorlib]System.Type [mscorlib]System.Type::GetTypeFromHandle(valuetype [mscorlib]System.RuntimeTypeHandle)
      IL_0045:  callvirt   instance bool [mscorlib]System.Collections.Hashtable::ContainsKey(object)
      IL_004a:  stloc.s    VB$CG$t_bool$S2
      IL_004c:  ldloc.s    VB$CG$t_bool$S2
      IL_004e:  brfalse.s  IL_0066

      IL_0050:  ldstr      "WinForms_RecursiveFormCreate"
      IL_0055:  ldc.i4.0
      IL_0056:  newarr     [mscorlib]System.String
      IL_005b:  call       string [Microsoft.VisualBasic]Microsoft.VisualBasic.CompilerServices.Utils::GetResourceString(string,
                                                                                                                         string[])
      IL_0060:  newobj     instance void [mscorlib]System.InvalidOperationException::.ctor(string)
      IL_0065:  throw

      IL_0066:  nop
      IL_0067:  br.s       IL_0074

      IL_0069:  nop
      IL_006a:  newobj     instance void [mscorlib]System.Collections.Hashtable::.ctor()
      IL_006f:  stsfld     class [mscorlib]System.Collections.Hashtable Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject/MyForms::m_FormBeingCreated
      IL_0074:  nop
      IL_0075:  ldsfld     class [mscorlib]System.Collections.Hashtable Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject/MyForms::m_FormBeingCreated
      IL_007a:  ldtoken    !!T
      IL_007f:  call       class [mscorlib]System.Type [mscorlib]System.Type::GetTypeFromHandle(valuetype [mscorlib]System.RuntimeTypeHandle)
      IL_0084:  ldnull
      IL_0085:  callvirt   instance void [mscorlib]System.Collections.Hashtable::Add(object,
                                                                                     object)
      IL_008a:  nop
      IL_008b:  nop
      .try
      {
        .try
        {
          IL_008c:  call       !!0 [mscorlib]System.Activator::CreateInstance<!!0>()
          IL_0091:  stloc.0
          IL_0092:  leave.s    IL_0111

          IL_0094:  leave.s    IL_0108

        }  // end .try
        filter
        {
          IL_0096:  isinst     [mscorlib]System.Reflection.TargetInvocationException
          IL_009b:  dup
          IL_009c:  brtrue.s   IL_00a2

          IL_009e:  pop
          IL_009f:  ldc.i4.0
          IL_00a0:  br.s       IL_00b8

          IL_00a2:  dup
          IL_00a3:  stloc.2
          IL_00a4:  call       void [Microsoft.VisualBasic]Microsoft.VisualBasic.CompilerServices.ProjectData::SetProjectError(class [mscorlib]System.Exception)
          IL_00a9:  ldloc.2
          IL_00aa:  callvirt   instance class [mscorlib]System.Exception [mscorlib]System.Exception::get_InnerException()
          IL_00af:  ldnull
          IL_00b0:  ceq
          IL_00b2:  ldc.i4.0
          IL_00b3:  ceq
          IL_00b5:  ldc.i4.0
          IL_00b6:  cgt.un
          IL_00b8:  endfilter
        }  // end filter
        {  // handler
          IL_00ba:  pop
          IL_00bb:  ldstr      "WinForms_SeeInnerException"
          IL_00c0:  ldc.i4.1
          IL_00c1:  newarr     [mscorlib]System.String
          IL_00c6:  stloc.3
          IL_00c7:  ldloc.3
          IL_00c8:  ldc.i4.0
          IL_00c9:  ldloc.2
          IL_00ca:  callvirt   instance class [mscorlib]System.Exception [mscorlib]System.Exception::get_InnerException()
          IL_00cf:  callvirt   instance string [mscorlib]System.Exception::get_Message()
          IL_00d4:  stelem.ref
          IL_00d5:  nop
          IL_00d6:  ldloc.3
          IL_00d7:  call       string [Microsoft.VisualBasic]Microsoft.VisualBasic.CompilerServices.Utils::GetResourceString(string,
                                                                                                                             string[])
          IL_00dc:  stloc.1
          IL_00dd:  ldloc.1
          IL_00de:  ldloc.2
          IL_00df:  callvirt   instance class [mscorlib]System.Exception [mscorlib]System.Exception::get_InnerException()
          IL_00e4:  newobj     instance void [mscorlib]System.InvalidOperationException::.ctor(string,
                                                                                               class [mscorlib]System.Exception)
          IL_00e9:  throw

          IL_00ea:  call       void [Microsoft.VisualBasic]Microsoft.VisualBasic.CompilerServices.ProjectData::ClearProjectError()
          IL_00ef:  leave.s    IL_0108

        }  // end handler
      }  // end .try
      finally
      {
        IL_00f1:  nop
        IL_00f2:  ldsfld     class [mscorlib]System.Collections.Hashtable Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject/MyForms::m_FormBeingCreated
        IL_00f7:  ldtoken    !!T
        IL_00fc:  call       class [mscorlib]System.Type [mscorlib]System.Type::GetTypeFromHandle(valuetype [mscorlib]System.RuntimeTypeHandle)
        IL_0101:  callvirt   instance void [mscorlib]System.Collections.Hashtable::Remove(object)
        IL_0106:  nop
        IL_0107:  endfinally
      }  // end handler
      IL_0108:  nop
      IL_0109:  br.s       IL_0110

      IL_010b:  nop
      IL_010c:  ldarg.0
      IL_010d:  stloc.0
      IL_010e:  br.s       IL_0111

      IL_0110:  nop
      IL_0111:  ldloc.0
      IL_0112:  ret
    } // end of method MyForms::Create__Instance__

    .method private instance void  Dispose__Instance__<([System.Windows.Forms]System.Windows.Forms.Form) T>(!!T& 'instance') cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       31 (0x1f)
      .maxstack  2
      .locals init ([0] !!T VB$t_generic$S0)
      IL_0000:  nop
      IL_0001:  ldarg.1
      IL_0002:  constrained. !!T
      IL_0008:  callvirt   instance void [System]System.ComponentModel.Component::Dispose()
      IL_000d:  nop
      IL_000e:  ldarg.1
      IL_000f:  ldloca.s   VB$t_generic$S0
      IL_0011:  initobj    !!T
      IL_0017:  ldloc.0
      IL_0018:  stobj      !!T
      IL_001d:  nop
      IL_001e:  ret
    } // end of method MyForms::Dispose__Instance__

    .method public specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
      // Code size       10 (0xa)
      .maxstack  8
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0007:  nop
      IL_0008:  nop
      IL_0009:  ret
    } // end of method MyForms::.ctor

    .method public strict virtual instance bool 
            Equals(object o) cil managed
    {
      .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
      // Code size       18 (0x12)
      .maxstack  2
      .locals init ([0] bool Equals)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldarg.1
      IL_0003:  call       object [mscorlib]System.Runtime.CompilerServices.RuntimeHelpers::GetObjectValue(object)
      IL_0008:  call       instance bool [mscorlib]System.Object::Equals(object)
      IL_000d:  stloc.0
      IL_000e:  br.s       IL_0010

      IL_0010:  ldloc.0
      IL_0011:  ret
    } // end of method MyForms::Equals

    .method public strict virtual instance int32 
            GetHashCode() cil managed
    {
      .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
      // Code size       12 (0xc)
      .maxstack  1
      .locals init ([0] int32 GetHashCode)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  call       instance int32 [mscorlib]System.Object::GetHashCode()
      IL_0007:  stloc.0
      IL_0008:  br.s       IL_000a

      IL_000a:  ldloc.0
      IL_000b:  ret
    } // end of method MyForms::GetHashCode

    .method assembly hidebysig instance class [mscorlib]System.Type 
            GetType() cil managed
    {
      .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
      // Code size       16 (0x10)
      .maxstack  1
      .locals init ([0] class [mscorlib]System.Type GetType)
      IL_0000:  nop
      IL_0001:  ldtoken    Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject/MyForms
      IL_0006:  call       class [mscorlib]System.Type [mscorlib]System.Type::GetTypeFromHandle(valuetype [mscorlib]System.RuntimeTypeHandle)
      IL_000b:  stloc.0
      IL_000c:  br.s       IL_000e

      IL_000e:  ldloc.0
      IL_000f:  ret
    } // end of method MyForms::GetType

    .method public strict virtual instance string 
            ToString() cil managed
    {
      .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
      // Code size       12 (0xc)
      .maxstack  1
      .locals init ([0] string ToString)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  call       instance string [mscorlib]System.Object::ToString()
      IL_0007:  stloc.0
      IL_0008:  br.s       IL_000a

      IL_000a:  ldloc.0
      IL_000b:  ret
    } // end of method MyForms::ToString

    .property instance class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main
            Main()
    {
      .get instance class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject/MyForms::get_Main()
      .set instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject/MyForms::set_Main(class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main)
    } // end of property MyForms::Main
  } // end of class MyForms

  .class auto ansi sealed nested assembly MyWebServices
         extends [mscorlib]System.Object
  {
    .custom instance void [Microsoft.VisualBasic]Microsoft.VisualBasic.MyGroupCollectionAttribute::.ctor(string,
                                                                                                         string,
                                                                                                         string,
                                                                                                         string) = ( 01 00 34 53 79 73 74 65 6D 2E 57 65 62 2E 53 65   // ..4System.Web.Se
                                                                                                                     72 76 69 63 65 73 2E 50 72 6F 74 6F 63 6F 6C 73   // rvices.Protocols
                                                                                                                     2E 53 6F 61 70 48 74 74 70 43 6C 69 65 6E 74 50   // .SoapHttpClientP
                                                                                                                     72 6F 74 6F 63 6F 6C 12 43 72 65 61 74 65 5F 5F   // rotocol.Create__
                                                                                                                     49 6E 73 74 61 6E 63 65 5F 5F 13 44 69 73 70 6F   // Instance__.Dispo
                                                                                                                     73 65 5F 5F 49 6E 73 74 61 6E 63 65 5F 5F 00 00   // se__Instance__..
                                                                                                                     00 ) 
    .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
    .method public strict virtual instance bool 
            Equals(object o) cil managed
    {
      .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       18 (0x12)
      .maxstack  2
      .locals init ([0] bool Equals)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  ldarg.1
      IL_0003:  call       object [mscorlib]System.Runtime.CompilerServices.RuntimeHelpers::GetObjectValue(object)
      IL_0008:  call       instance bool [mscorlib]System.Object::Equals(object)
      IL_000d:  stloc.0
      IL_000e:  br.s       IL_0010

      IL_0010:  ldloc.0
      IL_0011:  ret
    } // end of method MyWebServices::Equals

    .method public strict virtual instance int32 
            GetHashCode() cil managed
    {
      .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       12 (0xc)
      .maxstack  1
      .locals init ([0] int32 GetHashCode)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  call       instance int32 [mscorlib]System.Object::GetHashCode()
      IL_0007:  stloc.0
      IL_0008:  br.s       IL_000a

      IL_000a:  ldloc.0
      IL_000b:  ret
    } // end of method MyWebServices::GetHashCode

    .method assembly hidebysig instance class [mscorlib]System.Type 
            GetType() cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
      // Code size       16 (0x10)
      .maxstack  1
      .locals init ([0] class [mscorlib]System.Type GetType)
      IL_0000:  nop
      IL_0001:  ldtoken    Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject/MyWebServices
      IL_0006:  call       class [mscorlib]System.Type [mscorlib]System.Type::GetTypeFromHandle(valuetype [mscorlib]System.RuntimeTypeHandle)
      IL_000b:  stloc.0
      IL_000c:  br.s       IL_000e

      IL_000e:  ldloc.0
      IL_000f:  ret
    } // end of method MyWebServices::GetType

    .method public strict virtual instance string 
            ToString() cil managed
    {
      .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       12 (0xc)
      .maxstack  1
      .locals init ([0] string ToString)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  call       instance string [mscorlib]System.Object::ToString()
      IL_0007:  stloc.0
      IL_0008:  br.s       IL_000a

      IL_000a:  ldloc.0
      IL_000b:  ret
    } // end of method MyWebServices::ToString

    .method private static !!T  Create__Instance__<.ctor T>(!!T 'instance') cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       32 (0x20)
      .maxstack  2
      .locals init ([0] !!T Create__Instance__,
               [1] bool VB$CG$t_bool$S0)
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  box        !!T
      IL_0007:  ldnull
      IL_0008:  ceq
      IL_000a:  stloc.1
      IL_000b:  ldloc.1
      IL_000c:  brfalse.s  IL_0018

      IL_000e:  call       !!0 [mscorlib]System.Activator::CreateInstance<!!0>()
      IL_0013:  stloc.0
      IL_0014:  br.s       IL_001e

      IL_0016:  br.s       IL_001d

      IL_0018:  nop
      IL_0019:  ldarg.0
      IL_001a:  stloc.0
      IL_001b:  br.s       IL_001e

      IL_001d:  nop
      IL_001e:  ldloc.0
      IL_001f:  ret
    } // end of method MyWebServices::Create__Instance__

    .method private instance void  Dispose__Instance__<T>(!!T& 'instance') cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       18 (0x12)
      .maxstack  2
      .locals init ([0] !!T VB$t_generic$S0)
      IL_0000:  nop
      IL_0001:  ldarg.1
      IL_0002:  ldloca.s   VB$t_generic$S0
      IL_0004:  initobj    !!T
      IL_000a:  ldloc.0
      IL_000b:  stobj      !!T
      IL_0010:  nop
      IL_0011:  ret
    } // end of method MyWebServices::Dispose__Instance__

    .method public specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
      .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       10 (0xa)
      .maxstack  8
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0007:  nop
      IL_0008:  nop
      IL_0009:  ret
    } // end of method MyWebServices::.ctor

  } // end of class MyWebServices

  .class auto ansi sealed nested assembly ThreadSafeObjectProvider`1<.ctor T>
         extends [mscorlib]System.Object
  {
    .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
    .custom instance void [mscorlib]System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = ( 01 00 00 00 00 ) 
    .field private static !T m_ThreadStaticValue
    .custom instance void [mscorlib]System.ThreadStaticAttribute::.ctor() = ( 01 00 00 00 ) 
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .method assembly specialname instance !T 
            get_GetInstance() cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       38 (0x26)
      .maxstack  2
      .locals init ([0] !T GetInstance,
               [1] bool VB$CG$t_bool$S0)
      IL_0000:  nop
      IL_0001:  ldsfld     !0 class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject/ThreadSafeObjectProvider`1<!T>::m_ThreadStaticValue
      IL_0006:  box        !T
      IL_000b:  ldnull
      IL_000c:  ceq
      IL_000e:  stloc.1
      IL_000f:  ldloc.1
      IL_0010:  brfalse.s  IL_001c

      IL_0012:  call       !!0 [mscorlib]System.Activator::CreateInstance<!T>()
      IL_0017:  stsfld     !0 class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject/ThreadSafeObjectProvider`1<!T>::m_ThreadStaticValue
      IL_001c:  ldsfld     !0 class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject/ThreadSafeObjectProvider`1<!T>::m_ThreadStaticValue
      IL_0021:  stloc.0
      IL_0022:  br.s       IL_0024

      IL_0024:  ldloc.0
      IL_0025:  ret
    } // end of method ThreadSafeObjectProvider`1::get_GetInstance

    .method public specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
      .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 01 00 00 00 00 00 ) 
      // Code size       10 (0xa)
      .maxstack  8
      IL_0000:  nop
      IL_0001:  ldarg.0
      IL_0002:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0007:  nop
      IL_0008:  nop
      IL_0009:  ret
    } // end of method ThreadSafeObjectProvider`1::.ctor

    .property instance !T GetInstance()
    {
      .get instance !T Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject/ThreadSafeObjectProvider`1::get_GetInstance()
    } // end of property ThreadSafeObjectProvider`1::GetInstance
  } // end of class ThreadSafeObjectProvider`1

  .field private static initonly class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject/ThreadSafeObjectProvider`1<class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyComputer> m_ComputerObjectProvider
  .field private static initonly class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject/ThreadSafeObjectProvider`1<class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyApplication> m_AppObjectProvider
  .field private static initonly class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject/ThreadSafeObjectProvider`1<class [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.User> m_UserObjectProvider
  .field private static class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject/ThreadSafeObjectProvider`1<class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject/MyForms> m_MyFormsObjectProvider
  .field private static initonly class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject/ThreadSafeObjectProvider`1<class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject/MyWebServices> m_MyWebServicesObjectProvider
  .method private specialname rtspecialname static 
          void  .cctor() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       52 (0x34)
    .maxstack  8
    IL_0000:  newobj     instance void class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject/ThreadSafeObjectProvider`1<class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyComputer>::.ctor()
    IL_0005:  stsfld     class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject/ThreadSafeObjectProvider`1<class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyComputer> Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject::m_ComputerObjectProvider
    IL_000a:  newobj     instance void class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject/ThreadSafeObjectProvider`1<class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyApplication>::.ctor()
    IL_000f:  stsfld     class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject/ThreadSafeObjectProvider`1<class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyApplication> Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject::m_AppObjectProvider
    IL_0014:  newobj     instance void class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject/ThreadSafeObjectProvider`1<class [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.User>::.ctor()
    IL_0019:  stsfld     class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject/ThreadSafeObjectProvider`1<class [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.User> Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject::m_UserObjectProvider
    IL_001e:  newobj     instance void class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject/ThreadSafeObjectProvider`1<class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject/MyForms>::.ctor()
    IL_0023:  stsfld     class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject/ThreadSafeObjectProvider`1<class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject/MyForms> Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject::m_MyFormsObjectProvider
    IL_0028:  newobj     instance void class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject/ThreadSafeObjectProvider`1<class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject/MyWebServices>::.ctor()
    IL_002d:  stsfld     class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject/ThreadSafeObjectProvider`1<class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject/MyWebServices> Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject::m_MyWebServicesObjectProvider
    IL_0032:  nop
    IL_0033:  ret
  } // end of method MyProject::.cctor

  .method assembly specialname static class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyComputer 
          get_Computer() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       16 (0x10)
    .maxstack  1
    .locals init ([0] class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyComputer Computer)
    IL_0000:  nop
    IL_0001:  ldsfld     class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject/ThreadSafeObjectProvider`1<class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyComputer> Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject::m_ComputerObjectProvider
    IL_0006:  callvirt   instance !0 class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject/ThreadSafeObjectProvider`1<class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyComputer>::get_GetInstance()
    IL_000b:  stloc.0
    IL_000c:  br.s       IL_000e

    IL_000e:  ldloc.0
    IL_000f:  ret
  } // end of method MyProject::get_Computer

  .method assembly specialname static class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyApplication 
          get_Application() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       16 (0x10)
    .maxstack  1
    .locals init ([0] class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyApplication Application)
    IL_0000:  nop
    IL_0001:  ldsfld     class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject/ThreadSafeObjectProvider`1<class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyApplication> Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject::m_AppObjectProvider
    IL_0006:  callvirt   instance !0 class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject/ThreadSafeObjectProvider`1<class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyApplication>::get_GetInstance()
    IL_000b:  stloc.0
    IL_000c:  br.s       IL_000e

    IL_000e:  ldloc.0
    IL_000f:  ret
  } // end of method MyProject::get_Application

  .method assembly specialname static class [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.User 
          get_User() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       16 (0x10)
    .maxstack  1
    .locals init ([0] class [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.User User)
    IL_0000:  nop
    IL_0001:  ldsfld     class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject/ThreadSafeObjectProvider`1<class [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.User> Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject::m_UserObjectProvider
    IL_0006:  callvirt   instance !0 class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject/ThreadSafeObjectProvider`1<class [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.User>::get_GetInstance()
    IL_000b:  stloc.0
    IL_000c:  br.s       IL_000e

    IL_000e:  ldloc.0
    IL_000f:  ret
  } // end of method MyProject::get_User

  .method assembly specialname static class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject/MyForms 
          get_Forms() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       16 (0x10)
    .maxstack  1
    .locals init ([0] class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject/MyForms Forms)
    IL_0000:  nop
    IL_0001:  ldsfld     class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject/ThreadSafeObjectProvider`1<class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject/MyForms> Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject::m_MyFormsObjectProvider
    IL_0006:  callvirt   instance !0 class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject/ThreadSafeObjectProvider`1<class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject/MyForms>::get_GetInstance()
    IL_000b:  stloc.0
    IL_000c:  br.s       IL_000e

    IL_000e:  ldloc.0
    IL_000f:  ret
  } // end of method MyProject::get_Forms

  .method assembly specialname static class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject/MyWebServices 
          get_WebServices() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       16 (0x10)
    .maxstack  1
    .locals init ([0] class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject/MyWebServices WebServices)
    IL_0000:  nop
    IL_0001:  ldsfld     class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject/ThreadSafeObjectProvider`1<class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject/MyWebServices> Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject::m_MyWebServicesObjectProvider
    IL_0006:  callvirt   instance !0 class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject/ThreadSafeObjectProvider`1<class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject/MyWebServices>::get_GetInstance()
    IL_000b:  stloc.0
    IL_000c:  br.s       IL_000e

    IL_000e:  ldloc.0
    IL_000f:  ret
  } // end of method MyProject::get_WebServices

  .property class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyComputer
          Computer()
  {
    .custom instance void [System]System.ComponentModel.Design.HelpKeywordAttribute::.ctor(string) = ( 01 00 0B 4D 79 2E 43 6F 6D 70 75 74 65 72 00 00 ) // ...My.Computer..
    .get class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyComputer Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject::get_Computer()
  } // end of property MyProject::Computer
  .property class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyApplication
          Application()
  {
    .custom instance void [System]System.ComponentModel.Design.HelpKeywordAttribute::.ctor(string) = ( 01 00 0E 4D 79 2E 41 70 70 6C 69 63 61 74 69 6F   // ...My.Applicatio
                                                                                                       6E 00 00 )                                        // n..
    .get class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyApplication Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject::get_Application()
  } // end of property MyProject::Application
  .property class [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.User
          User()
  {
    .custom instance void [System]System.ComponentModel.Design.HelpKeywordAttribute::.ctor(string) = ( 01 00 07 4D 79 2E 55 73 65 72 00 00 )             // ...My.User..
    .get class [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.User Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject::get_User()
  } // end of property MyProject::User
  .property class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject/MyForms
          Forms()
  {
    .custom instance void [System]System.ComponentModel.Design.HelpKeywordAttribute::.ctor(string) = ( 01 00 08 4D 79 2E 46 6F 72 6D 73 00 00 )          // ...My.Forms..
    .get class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject/MyForms Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject::get_Forms()
  } // end of property MyProject::Forms
  .property class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject/MyWebServices
          WebServices()
  {
    .custom instance void [System]System.ComponentModel.Design.HelpKeywordAttribute::.ctor(string) = ( 01 00 0E 4D 79 2E 57 65 62 53 65 72 76 69 63 65   // ...My.WebService
                                                                                                       73 00 00 )                                        // s..
    .get class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject/MyWebServices Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject::get_WebServices()
  } // end of property MyProject::WebServices
} // end of class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject

.class public auto ansi Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Camera
       extends [mscorlib]System.Object
{
  .field public valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Position
  .field public valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Forward
  .field public valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Up
  .field public valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Right
  .method public specialname rtspecialname 
          instance void  .ctor(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector position,
                               valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector forward,
                               valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector up,
                               valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector right) cil managed
  {
    // Code size       39 (0x27)
    .maxstack  8
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Raytracer\Raytracer_VisualBasic\Camera.vb' 
//000015:     Public Sub New(ByVal position As Vector, ByVal forward As Vector, ByVal up As Vector, ByVal right As Vector)
    IL_0000:  nop
//000016:         Me.Position = position
//000017:         Me.Forward = forward
//000018:         Me.Up = up
//000019:         Me.Right = right
//000020:     End Sub
//000021: 
//000022:     Public Shared Function Create(ByVal pos As Vector, ByVal lookat As Vector) As Camera
//000023:         Dim forward = Vector.Norm(Vector.Minus(lookat, pos))
//000024:         Dim down = New Vector(0, -1, 0)
//000025:         Dim right = Vector.Times(1.5, Vector.Norm(Vector.Cross(forward, down)))
//000026:         Dim up = Vector.Times(1.5, Vector.Norm(Vector.Cross(forward, right)))
//000027:         Return New Camera(pos, forward, up, right)
//000028:     End Function
//000029: End Class
    IL_0001:  ldarg.0
    IL_0002:  call       instance void [mscorlib]System.Object::.ctor()
    IL_0007:  nop
//000016:         Me.Position = position
    IL_0008:  ldarg.0
    IL_0009:  ldarg.1
    IL_000a:  stfld      valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Camera::Position
//000017:         Me.Forward = forward
    IL_000f:  ldarg.0
    IL_0010:  ldarg.2
    IL_0011:  stfld      valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Camera::Forward
//000018:         Me.Up = up
    IL_0016:  ldarg.0
    IL_0017:  ldarg.3
    IL_0018:  stfld      valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Camera::Up
//000019:         Me.Right = right
    IL_001d:  ldarg.0
    IL_001e:  ldarg.s    right
    IL_0020:  stfld      valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Camera::Right
//000020:     End Sub
    IL_0025:  nop
    IL_0026:  ret
  } // end of method Camera::.ctor

  .method public static class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Camera 
          Create(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector pos,
                 valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector lookat) cil managed
  {
    // Code size       119 (0x77)
    .maxstack  4
    .locals init ([0] class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Camera Create,
             [1] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector down,
             [2] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector forward,
             [3] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector right,
             [4] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector up)
//000021: 
//000022:     Public Shared Function Create(ByVal pos As Vector, ByVal lookat As Vector) As Camera
    IL_0000:  nop
//000023:         Dim forward = Vector.Norm(Vector.Minus(lookat, pos))
    IL_0001:  ldarg.1
    IL_0002:  ldarg.0
    IL_0003:  call       valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Minus(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,
                                                                                                                                                                                      valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector)
    IL_0008:  call       valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Norm(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector)
    IL_000d:  stloc.2
//000024:         Dim down = New Vector(0, -1, 0)
    IL_000e:  ldloca.s   down
    IL_0010:  ldc.r8     0.0
    IL_0019:  ldc.r8     -1.
    IL_0022:  ldc.r8     0.0
    IL_002b:  call       instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::.ctor(float64,
                                                                                                                    float64,
                                                                                                                    float64)
    IL_0030:  nop
//000025:         Dim right = Vector.Times(1.5, Vector.Norm(Vector.Cross(forward, down)))
    IL_0031:  ldc.r8     1.5
    IL_003a:  ldloc.2
    IL_003b:  ldloc.1
    IL_003c:  call       valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Cross(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,
                                                                                                                                                                                      valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector)
    IL_0041:  call       valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Norm(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector)
    IL_0046:  call       valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Times(float64,
                                                                                                                                                                                      valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector)
    IL_004b:  stloc.3
//000026:         Dim up = Vector.Times(1.5, Vector.Norm(Vector.Cross(forward, right)))
    IL_004c:  ldc.r8     1.5
    IL_0055:  ldloc.2
    IL_0056:  ldloc.3
    IL_0057:  call       valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Cross(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,
                                                                                                                                                                                      valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector)
    IL_005c:  call       valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Norm(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector)
    IL_0061:  call       valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Times(float64,
                                                                                                                                                                                      valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector)
    IL_0066:  stloc.s    up
//000027:         Return New Camera(pos, forward, up, right)
    IL_0068:  ldarg.0
    IL_0069:  ldloc.2
    IL_006a:  ldloc.s    up
    IL_006c:  ldloc.3
    IL_006d:  newobj     instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Camera::.ctor(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,
                                                                                                                    valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,
                                                                                                                    valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,
                                                                                                                    valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector)
    IL_0072:  stloc.0
    IL_0073:  br.s       IL_0075

//000028:     End Function
    IL_0075:  ldloc.0
    IL_0076:  ret
  } // end of method Camera::Create

} // end of class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Camera

.class public sequential ansi sealed beforefieldinit Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color
       extends [mscorlib]System.ValueType
{
  .field public float64 R
  .field public float64 G
  .field public float64 B
  .field public static initonly valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color Background
  .field public static initonly valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color DefaultColor
  .method private specialname rtspecialname static 
          void  .cctor() cil managed
  {
    // Code size       78 (0x4e)
    .maxstack  4
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Raytracer\Raytracer_VisualBasic\Color.vb' 
//000044:     Public Shared ReadOnly Background As Color = New Color(0, 0, 0)
    IL_0000:  ldsflda    valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::Background
    IL_0005:  ldc.r8     0.0
    IL_000e:  ldc.r8     0.0
    IL_0017:  ldc.r8     0.0
    IL_0020:  call       instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::.ctor(float64,
                                                                                                                   float64,
                                                                                                                   float64)
    IL_0025:  nop
//000045:     Public Shared ReadOnly DefaultColor As Color = New Color(0, 0, 0)
    IL_0026:  ldsflda    valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::DefaultColor
    IL_002b:  ldc.r8     0.0
    IL_0034:  ldc.r8     0.0
    IL_003d:  ldc.r8     0.0
    IL_0046:  call       instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::.ctor(float64,
                                                                                                                   float64,
                                                                                                                   float64)
    IL_004b:  nop
    IL_004c:  nop
    IL_004d:  ret
  } // end of method Color::.cctor

  .method public specialname rtspecialname 
          instance void  .ctor(float64 r,
                               float64 g,
                               float64 b) cil managed
  {
    // Code size       31 (0x1f)
    .maxstack  8
//000014:     Public Sub New(ByVal r As Double, ByVal g As Double, ByVal b As Double)
    IL_0000:  nop
//000015:         Me.R = r
//000016:         Me.G = g
//000017:         Me.B = b
//000018:     End Sub
//000019: 
//000020:     Public Sub New(ByVal str As String)
//000021:         Dim nums = str.Split(CChar(","))
//000022:         If nums.Length <> 3 Then Throw New ArgumentException("str")
//000023:         Me.R = Double.Parse(nums(0))
//000024:         Me.G = Double.Parse(nums(1))
//000025:         Me.B = Double.Parse(nums(2))
//000026:     End Sub
//000027: 
//000028:     Public Shared Function Times(ByVal n As Double, ByVal c As Color) As Color
//000029:         Return New Color(n * c.R, n * c.G, n * c.B)
//000030:     End Function
//000031: 
//000032:     Public Shared Function Times(ByVal c1 As Color, ByVal c2 As Color) As Color
//000033:         Return New Color(c1.R * c2.R, c1.G * c2.G, c1.B * c2.B)
//000034:     End Function
//000035: 
//000036:     Public Shared Function Plus(ByVal c1 As Color, ByVal c2 As Color) As Color
//000037:         Return New Color(c1.R + c2.R, c1.G + c2.G, c1.B + c2.B)
//000038:     End Function
//000039: 
//000040:     Public Shared Function Minus(ByVal c1 As Color, ByVal c2 As Color) As Color
//000041:         Return New Color(c1.R - c2.R, c1.G - c2.G, c1.B - c2.B)
//000042:     End Function
//000043: 
//000044:     Public Shared ReadOnly Background As Color = New Color(0, 0, 0)
//000045:     Public Shared ReadOnly DefaultColor As Color = New Color(0, 0, 0)
//000046: 
//000047:     Public Shared Function Legalize(ByVal d As Double) As Double
//000048:         Return If(d > 1, 1, d)
//000049:     End Function
//000050: 
//000051:     Public Shared Function ToByte(ByVal d As Double) As Byte
//000052:         Return CType(255 * Legalize(d), Byte)
//000053:     End Function
//000054: 
//000055:     Public Shared Function ToInt32(ByVal c As Double) As Int32
//000056:         Dim r = CType(255 * c, Int32)
//000057:         Return If(r > 255, 255, r)
//000058:     End Function
//000059: 
//000060:     Public Function ToInt32() As Int32
//000061:         Return ToInt32(B) Or ToInt32(G) << 8 Or ToInt32(R) << 16 Or CType(255 << 24, Int32)
//000062:     End Function
//000063: 
//000064:     Friend Function ToDrawingColor() As System.Drawing.Color
//000065:         Return System.Drawing.Color.FromArgb(ToInt32())
//000066:     End Function
//000067: 
//000068:     Public Sub ChangeHue(ByVal hue As Double)
//000069: 
//000070:         Dim S = 0.9
//000071:         Dim L = ((System.Drawing.Color.FromArgb(ToInt32()).GetBrightness() - 0.5) * 0.5) + 0.5
//000072:         Dim H = hue
//000073: 
//000074:         If L = 0 Then
//000075:             R = 0.0
//000076:             G = 0.0
//000077:             B = 0.0
//000078:         ElseIf S = 0 Then
//000079:             R = L
//000080:             G = L
//000081:             B = L
//000082:         Else
//000083:             Dim temp2 = If(L <= 0.5, L * (1.0 + S), L + S - (L * S))
//000084:             Dim temp1 = 2.0 * L - temp2
//000085: 
//000086:             Dim t3 = New Double() {H + 1.0 / 3.0, H, H - 1.0 / 3.0}
//000087:             Dim clr = New Double() {0, 0, 0}
//000088: 
//000089:             For i = 0 To 2
//000090:                 If (t3(i) < 0) Then t3(i) += 1.0
//000091:                 If (t3(i) > 1) Then t3(i) -= 1.0
//000092:                 If (6.0 * t3(i) < 1.0) Then
//000093:                     clr(i) = temp1 + (temp2 - temp1) * t3(i) * 6.0
//000094:                 ElseIf (2.0 * t3(i) < 1.0) Then
//000095:                     clr(i) = temp2
//000096:                 ElseIf (3.0 * t3(i) < 2.0) Then
//000097:                     clr(i) = (temp1 + (temp2 - temp1) * ((2.0 / 3.0) - t3(i)) * 6.0)
//000098:                 Else
//000099:                     clr(i) = temp1
//000100:                 End If
//000101:             Next
//000102: 
//000103:             R = clr(0)
//000104:             G = clr(1)
//000105:             B = clr(2)
//000106:         End If
//000107:     End Sub
//000108: End Structure
    IL_0001:  ldarg.0
    IL_0002:  initobj    Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color
//000015:         Me.R = r
    IL_0008:  ldarg.0
    IL_0009:  ldarg.1
    IL_000a:  stfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::R
//000016:         Me.G = g
    IL_000f:  ldarg.0
    IL_0010:  ldarg.2
    IL_0011:  stfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::G
//000017:         Me.B = b
    IL_0016:  ldarg.0
    IL_0017:  ldarg.3
    IL_0018:  stfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::B
//000018:     End Sub
    IL_001d:  nop
    IL_001e:  ret
  } // end of method Color::.ctor

  .method public specialname rtspecialname 
          instance void  .ctor(string str) cil managed
  {
    // Code size       96 (0x60)
    .maxstack  4
    .locals init ([0] string[] nums,
             [1] char[] VB$t_array$S0,
             [2] bool VB$CG$t_bool$S0)
//000019: 
//000020:     Public Sub New(ByVal str As String)
    IL_0000:  nop
//000021:         Dim nums = str.Split(CChar(","))
//000022:         If nums.Length <> 3 Then Throw New ArgumentException("str")
//000023:         Me.R = Double.Parse(nums(0))
//000024:         Me.G = Double.Parse(nums(1))
//000025:         Me.B = Double.Parse(nums(2))
//000026:     End Sub
//000027: 
//000028:     Public Shared Function Times(ByVal n As Double, ByVal c As Color) As Color
//000029:         Return New Color(n * c.R, n * c.G, n * c.B)
//000030:     End Function
//000031: 
//000032:     Public Shared Function Times(ByVal c1 As Color, ByVal c2 As Color) As Color
//000033:         Return New Color(c1.R * c2.R, c1.G * c2.G, c1.B * c2.B)
//000034:     End Function
//000035: 
//000036:     Public Shared Function Plus(ByVal c1 As Color, ByVal c2 As Color) As Color
//000037:         Return New Color(c1.R + c2.R, c1.G + c2.G, c1.B + c2.B)
//000038:     End Function
//000039: 
//000040:     Public Shared Function Minus(ByVal c1 As Color, ByVal c2 As Color) As Color
//000041:         Return New Color(c1.R - c2.R, c1.G - c2.G, c1.B - c2.B)
//000042:     End Function
//000043: 
//000044:     Public Shared ReadOnly Background As Color = New Color(0, 0, 0)
//000045:     Public Shared ReadOnly DefaultColor As Color = New Color(0, 0, 0)
//000046: 
//000047:     Public Shared Function Legalize(ByVal d As Double) As Double
//000048:         Return If(d > 1, 1, d)
//000049:     End Function
//000050: 
//000051:     Public Shared Function ToByte(ByVal d As Double) As Byte
//000052:         Return CType(255 * Legalize(d), Byte)
//000053:     End Function
//000054: 
//000055:     Public Shared Function ToInt32(ByVal c As Double) As Int32
//000056:         Dim r = CType(255 * c, Int32)
//000057:         Return If(r > 255, 255, r)
//000058:     End Function
//000059: 
//000060:     Public Function ToInt32() As Int32
//000061:         Return ToInt32(B) Or ToInt32(G) << 8 Or ToInt32(R) << 16 Or CType(255 << 24, Int32)
//000062:     End Function
//000063: 
//000064:     Friend Function ToDrawingColor() As System.Drawing.Color
//000065:         Return System.Drawing.Color.FromArgb(ToInt32())
//000066:     End Function
//000067: 
//000068:     Public Sub ChangeHue(ByVal hue As Double)
//000069: 
//000070:         Dim S = 0.9
//000071:         Dim L = ((System.Drawing.Color.FromArgb(ToInt32()).GetBrightness() - 0.5) * 0.5) + 0.5
//000072:         Dim H = hue
//000073: 
//000074:         If L = 0 Then
//000075:             R = 0.0
//000076:             G = 0.0
//000077:             B = 0.0
//000078:         ElseIf S = 0 Then
//000079:             R = L
//000080:             G = L
//000081:             B = L
//000082:         Else
//000083:             Dim temp2 = If(L <= 0.5, L * (1.0 + S), L + S - (L * S))
//000084:             Dim temp1 = 2.0 * L - temp2
//000085: 
//000086:             Dim t3 = New Double() {H + 1.0 / 3.0, H, H - 1.0 / 3.0}
//000087:             Dim clr = New Double() {0, 0, 0}
//000088: 
//000089:             For i = 0 To 2
//000090:                 If (t3(i) < 0) Then t3(i) += 1.0
//000091:                 If (t3(i) > 1) Then t3(i) -= 1.0
//000092:                 If (6.0 * t3(i) < 1.0) Then
//000093:                     clr(i) = temp1 + (temp2 - temp1) * t3(i) * 6.0
//000094:                 ElseIf (2.0 * t3(i) < 1.0) Then
//000095:                     clr(i) = temp2
//000096:                 ElseIf (3.0 * t3(i) < 2.0) Then
//000097:                     clr(i) = (temp1 + (temp2 - temp1) * ((2.0 / 3.0) - t3(i)) * 6.0)
//000098:                 Else
//000099:                     clr(i) = temp1
//000100:                 End If
//000101:             Next
//000102: 
//000103:             R = clr(0)
//000104:             G = clr(1)
//000105:             B = clr(2)
//000106:         End If
//000107:     End Sub
//000108: End Structure
    IL_0001:  ldarg.0
    IL_0002:  initobj    Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color
//000021:         Dim nums = str.Split(CChar(","))
    IL_0008:  ldarg.1
    IL_0009:  ldc.i4.1
    IL_000a:  newarr     [mscorlib]System.Char
    IL_000f:  stloc.1
    IL_0010:  ldloc.1
    IL_0011:  ldc.i4.0
    IL_0012:  ldc.i4.s   44
    IL_0014:  stelem.i2
    IL_0015:  ldloc.1
    IL_0016:  callvirt   instance string[] [mscorlib]System.String::Split(char[])
    IL_001b:  stloc.0
//000022:         If nums.Length <> 3 Then Throw New ArgumentException("str")
    IL_001c:  ldloc.0
    IL_001d:  ldlen
    IL_001e:  conv.ovf.i4
    IL_001f:  ldc.i4.3
    IL_0020:  ceq
    IL_0022:  ldc.i4.0
    IL_0023:  ceq
    IL_0025:  stloc.2
//000023:         Me.R = Double.Parse(nums(0))
//000024:         Me.G = Double.Parse(nums(1))
//000025:         Me.B = Double.Parse(nums(2))
//000026:     End Sub
//000027: 
//000028:     Public Shared Function Times(ByVal n As Double, ByVal c As Color) As Color
//000029:         Return New Color(n * c.R, n * c.G, n * c.B)
//000030:     End Function
//000031: 
//000032:     Public Shared Function Times(ByVal c1 As Color, ByVal c2 As Color) As Color
//000033:         Return New Color(c1.R * c2.R, c1.G * c2.G, c1.B * c2.B)
//000034:     End Function
//000035: 
//000036:     Public Shared Function Plus(ByVal c1 As Color, ByVal c2 As Color) As Color
//000037:         Return New Color(c1.R + c2.R, c1.G + c2.G, c1.B + c2.B)
//000038:     End Function
//000039: 
//000040:     Public Shared Function Minus(ByVal c1 As Color, ByVal c2 As Color) As Color
//000041:         Return New Color(c1.R - c2.R, c1.G - c2.G, c1.B - c2.B)
//000042:     End Function
//000043: 
//000044:     Public Shared ReadOnly Background As Color = New Color(0, 0, 0)
//000045:     Public Shared ReadOnly DefaultColor As Color = New Color(0, 0, 0)
//000046: 
//000047:     Public Shared Function Legalize(ByVal d As Double) As Double
//000048:         Return If(d > 1, 1, d)
//000049:     End Function
//000050: 
//000051:     Public Shared Function ToByte(ByVal d As Double) As Byte
//000052:         Return CType(255 * Legalize(d), Byte)
//000053:     End Function
//000054: 
//000055:     Public Shared Function ToInt32(ByVal c As Double) As Int32
//000056:         Dim r = CType(255 * c, Int32)
//000057:         Return If(r > 255, 255, r)
//000058:     End Function
//000059: 
//000060:     Public Function ToInt32() As Int32
//000061:         Return ToInt32(B) Or ToInt32(G) << 8 Or ToInt32(R) << 16 Or CType(255 << 24, Int32)
//000062:     End Function
//000063: 
//000064:     Friend Function ToDrawingColor() As System.Drawing.Color
//000065:         Return System.Drawing.Color.FromArgb(ToInt32())
//000066:     End Function
//000067: 
//000068:     Public Sub ChangeHue(ByVal hue As Double)
//000069: 
//000070:         Dim S = 0.9
//000071:         Dim L = ((System.Drawing.Color.FromArgb(ToInt32()).GetBrightness() - 0.5) * 0.5) + 0.5
//000072:         Dim H = hue
//000073: 
//000074:         If L = 0 Then
//000075:             R = 0.0
//000076:             G = 0.0
//000077:             B = 0.0
//000078:         ElseIf S = 0 Then
//000079:             R = L
//000080:             G = L
//000081:             B = L
//000082:         Else
//000083:             Dim temp2 = If(L <= 0.5, L * (1.0 + S), L + S - (L * S))
//000084:             Dim temp1 = 2.0 * L - temp2
//000085: 
//000086:             Dim t3 = New Double() {H + 1.0 / 3.0, H, H - 1.0 / 3.0}
//000087:             Dim clr = New Double() {0, 0, 0}
//000088: 
//000089:             For i = 0 To 2
//000090:                 If (t3(i) < 0) Then t3(i) += 1.0
//000091:                 If (t3(i) > 1) Then t3(i) -= 1.0
//000092:                 If (6.0 * t3(i) < 1.0) Then
//000093:                     clr(i) = temp1 + (temp2 - temp1) * t3(i) * 6.0
//000094:                 ElseIf (2.0 * t3(i) < 1.0) Then
//000095:                     clr(i) = temp2
//000096:                 ElseIf (3.0 * t3(i) < 2.0) Then
//000097:                     clr(i) = (temp1 + (temp2 - temp1) * ((2.0 / 3.0) - t3(i)) * 6.0)
//000098:                 Else
//000099:                     clr(i) = temp1
//000100:                 End If
//000101:             Next
//000102: 
//000103:             R = clr(0)
//000104:             G = clr(1)
//000105:             B = clr(2)
//000106:         End If
//000107:     End Sub
//000108: End Structure
    IL_0026:  ldloc.2
    IL_0027:  brfalse.s  IL_0034

//000022:         If nums.Length <> 3 Then Throw New ArgumentException("str")
    IL_0029:  ldstr      "str"
    IL_002e:  newobj     instance void [mscorlib]System.ArgumentException::.ctor(string)
    IL_0033:  throw

//000023:         Me.R = Double.Parse(nums(0))
    IL_0034:  ldarg.0
    IL_0035:  ldloc.0
    IL_0036:  ldc.i4.0
    IL_0037:  ldelem.ref
    IL_0038:  call       float64 [mscorlib]System.Double::Parse(string)
    IL_003d:  stfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::R
//000024:         Me.G = Double.Parse(nums(1))
    IL_0042:  ldarg.0
    IL_0043:  ldloc.0
    IL_0044:  ldc.i4.1
    IL_0045:  ldelem.ref
    IL_0046:  call       float64 [mscorlib]System.Double::Parse(string)
    IL_004b:  stfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::G
//000025:         Me.B = Double.Parse(nums(2))
    IL_0050:  ldarg.0
    IL_0051:  ldloc.0
    IL_0052:  ldc.i4.2
    IL_0053:  ldelem.ref
    IL_0054:  call       float64 [mscorlib]System.Double::Parse(string)
    IL_0059:  stfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::B
//000026:     End Sub
    IL_005e:  nop
    IL_005f:  ret
  } // end of method Color::.ctor

  .method public static valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color 
          Times(float64 n,
                valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color c) cil managed
  {
    // Code size       42 (0x2a)
    .maxstack  5
    .locals init ([0] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color Times,
             [1] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color VB$t_struct$S0)
//000027: 
//000028:     Public Shared Function Times(ByVal n As Double, ByVal c As Color) As Color
    IL_0000:  nop
//000029:         Return New Color(n * c.R, n * c.G, n * c.B)
    IL_0001:  ldloca.s   VB$t_struct$S0
    IL_0003:  ldarg.0
    IL_0004:  ldarga.s   c
    IL_0006:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::R
    IL_000b:  mul
    IL_000c:  ldarg.0
    IL_000d:  ldarga.s   c
    IL_000f:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::G
    IL_0014:  mul
    IL_0015:  ldarg.0
    IL_0016:  ldarga.s   c
    IL_0018:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::B
    IL_001d:  mul
    IL_001e:  call       instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::.ctor(float64,
                                                                                                                   float64,
                                                                                                                   float64)
    IL_0023:  nop
    IL_0024:  ldloc.1
    IL_0025:  stloc.0
    IL_0026:  br.s       IL_0028

//000030:     End Function
    IL_0028:  ldloc.0
    IL_0029:  ret
  } // end of method Color::Times

  .method public static valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color 
          Times(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color c1,
                valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color c2) cil managed
  {
    // Code size       60 (0x3c)
    .maxstack  5
    .locals init ([0] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color Times,
             [1] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color VB$t_struct$S0)
//000031: 
//000032:     Public Shared Function Times(ByVal c1 As Color, ByVal c2 As Color) As Color
    IL_0000:  nop
//000033:         Return New Color(c1.R * c2.R, c1.G * c2.G, c1.B * c2.B)
    IL_0001:  ldloca.s   VB$t_struct$S0
    IL_0003:  ldarga.s   c1
    IL_0005:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::R
    IL_000a:  ldarga.s   c2
    IL_000c:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::R
    IL_0011:  mul
    IL_0012:  ldarga.s   c1
    IL_0014:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::G
    IL_0019:  ldarga.s   c2
    IL_001b:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::G
    IL_0020:  mul
    IL_0021:  ldarga.s   c1
    IL_0023:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::B
    IL_0028:  ldarga.s   c2
    IL_002a:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::B
    IL_002f:  mul
    IL_0030:  call       instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::.ctor(float64,
                                                                                                                   float64,
                                                                                                                   float64)
    IL_0035:  nop
    IL_0036:  ldloc.1
    IL_0037:  stloc.0
    IL_0038:  br.s       IL_003a

//000034:     End Function
    IL_003a:  ldloc.0
    IL_003b:  ret
  } // end of method Color::Times

  .method public static valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color 
          Plus(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color c1,
               valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color c2) cil managed
  {
    // Code size       60 (0x3c)
    .maxstack  5
    .locals init ([0] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color Plus,
             [1] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color VB$t_struct$S0)
//000035: 
//000036:     Public Shared Function Plus(ByVal c1 As Color, ByVal c2 As Color) As Color
    IL_0000:  nop
//000037:         Return New Color(c1.R + c2.R, c1.G + c2.G, c1.B + c2.B)
    IL_0001:  ldloca.s   VB$t_struct$S0
    IL_0003:  ldarga.s   c1
    IL_0005:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::R
    IL_000a:  ldarga.s   c2
    IL_000c:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::R
    IL_0011:  add
    IL_0012:  ldarga.s   c1
    IL_0014:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::G
    IL_0019:  ldarga.s   c2
    IL_001b:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::G
    IL_0020:  add
    IL_0021:  ldarga.s   c1
    IL_0023:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::B
    IL_0028:  ldarga.s   c2
    IL_002a:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::B
    IL_002f:  add
    IL_0030:  call       instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::.ctor(float64,
                                                                                                                   float64,
                                                                                                                   float64)
    IL_0035:  nop
    IL_0036:  ldloc.1
    IL_0037:  stloc.0
    IL_0038:  br.s       IL_003a

//000038:     End Function
    IL_003a:  ldloc.0
    IL_003b:  ret
  } // end of method Color::Plus

  .method public static valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color 
          Minus(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color c1,
                valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color c2) cil managed
  {
    // Code size       60 (0x3c)
    .maxstack  5
    .locals init ([0] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color Minus,
             [1] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color VB$t_struct$S0)
//000039: 
//000040:     Public Shared Function Minus(ByVal c1 As Color, ByVal c2 As Color) As Color
    IL_0000:  nop
//000041:         Return New Color(c1.R - c2.R, c1.G - c2.G, c1.B - c2.B)
    IL_0001:  ldloca.s   VB$t_struct$S0
    IL_0003:  ldarga.s   c1
    IL_0005:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::R
    IL_000a:  ldarga.s   c2
    IL_000c:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::R
    IL_0011:  sub
    IL_0012:  ldarga.s   c1
    IL_0014:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::G
    IL_0019:  ldarga.s   c2
    IL_001b:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::G
    IL_0020:  sub
    IL_0021:  ldarga.s   c1
    IL_0023:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::B
    IL_0028:  ldarga.s   c2
    IL_002a:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::B
    IL_002f:  sub
    IL_0030:  call       instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::.ctor(float64,
                                                                                                                   float64,
                                                                                                                   float64)
    IL_0035:  nop
    IL_0036:  ldloc.1
    IL_0037:  stloc.0
    IL_0038:  br.s       IL_003a

//000042:     End Function
    IL_003a:  ldloc.0
    IL_003b:  ret
  } // end of method Color::Minus

  .method public static float64  Legalize(float64 d) cil managed
  {
    // Code size       30 (0x1e)
    .maxstack  2
    .locals init ([0] float64 Legalize)
//000043: 
//000044:     Public Shared ReadOnly Background As Color = New Color(0, 0, 0)
//000045:     Public Shared ReadOnly DefaultColor As Color = New Color(0, 0, 0)
//000046: 
//000047:     Public Shared Function Legalize(ByVal d As Double) As Double
    IL_0000:  nop
//000048:         Return If(d > 1, 1, d)
    IL_0001:  ldarg.0
    IL_0002:  ldc.r8     1.
    IL_000b:  bgt.s      IL_0010

    IL_000d:  ldarg.0
    IL_000e:  br.s       IL_0019

    IL_0010:  ldc.r8     1.
    IL_0019:  stloc.0
    IL_001a:  br.s       IL_001c

//000049:     End Function
    IL_001c:  ldloc.0
    IL_001d:  ret
  } // end of method Color::Legalize

  .method public static uint8  ToByte(float64 d) cil managed
  {
    // Code size       28 (0x1c)
    .maxstack  2
    .locals init ([0] uint8 ToByte)
//000050: 
//000051:     Public Shared Function ToByte(ByVal d As Double) As Byte
    IL_0000:  nop
//000052:         Return CType(255 * Legalize(d), Byte)
    IL_0001:  ldc.r8     255.
    IL_000a:  ldarg.0
    IL_000b:  call       float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::Legalize(float64)
    IL_0010:  mul
    IL_0011:  call       float64 [mscorlib]System.Math::Round(float64)
    IL_0016:  conv.ovf.u1
    IL_0017:  stloc.0
    IL_0018:  br.s       IL_001a

//000053:     End Function
    IL_001a:  ldloc.0
    IL_001b:  ret
  } // end of method Color::ToByte

  .method public static int32  ToInt32(float64 c) cil managed
  {
    // Code size       40 (0x28)
    .maxstack  2
    .locals init ([0] int32 r,
             [1] int32 ToInt32)
//000054: 
//000055:     Public Shared Function ToInt32(ByVal c As Double) As Int32
    IL_0000:  nop
//000056:         Dim r = CType(255 * c, Int32)
    IL_0001:  ldc.r8     255.
    IL_000a:  ldarg.0
    IL_000b:  mul
    IL_000c:  call       float64 [mscorlib]System.Math::Round(float64)
    IL_0011:  conv.ovf.i4
    IL_0012:  stloc.0
//000057:         Return If(r > 255, 255, r)
    IL_0013:  ldloc.0
    IL_0014:  ldc.i4     0xff
    IL_0019:  bgt.s      IL_001e

    IL_001b:  ldloc.0
    IL_001c:  br.s       IL_0023

    IL_001e:  ldc.i4     0xff
    IL_0023:  stloc.1
    IL_0024:  br.s       IL_0026

//000058:     End Function
    IL_0026:  ldloc.1
    IL_0027:  ret
  } // end of method Color::ToInt32

  .method public instance int32  ToInt32() cil managed
  {
    // Code size       52 (0x34)
    .maxstack  3
    .locals init ([0] int32 ToInt32)
//000059: 
//000060:     Public Function ToInt32() As Int32
    IL_0000:  nop
//000061:         Return ToInt32(B) Or ToInt32(G) << 8 Or ToInt32(R) << 16 Or CType(255 << 24, Int32)
    IL_0001:  ldarg.0
    IL_0002:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::B
    IL_0007:  call       int32 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::ToInt32(float64)
    IL_000c:  ldarg.0
    IL_000d:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::G
    IL_0012:  call       int32 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::ToInt32(float64)
    IL_0017:  ldc.i4.8
    IL_0018:  shl
    IL_0019:  or
    IL_001a:  ldarg.0
    IL_001b:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::R
    IL_0020:  call       int32 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::ToInt32(float64)
    IL_0025:  ldc.i4.s   16
    IL_0027:  shl
    IL_0028:  or
    IL_0029:  ldc.i4     0xff000000
    IL_002e:  or
    IL_002f:  stloc.0
    IL_0030:  br.s       IL_0032

//000062:     End Function
    IL_0032:  ldloc.0
    IL_0033:  ret
  } // end of method Color::ToInt32

  .method assembly instance valuetype [System.Drawing]System.Drawing.Color 
          ToDrawingColor() cil managed
  {
    // Code size       17 (0x11)
    .maxstack  1
    .locals init ([0] valuetype [System.Drawing]System.Drawing.Color ToDrawingColor)
//000063: 
//000064:     Friend Function ToDrawingColor() As System.Drawing.Color
    IL_0000:  nop
//000065:         Return System.Drawing.Color.FromArgb(ToInt32())
    IL_0001:  ldarg.0
    IL_0002:  call       instance int32 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::ToInt32()
    IL_0007:  call       valuetype [System.Drawing]System.Drawing.Color [System.Drawing]System.Drawing.Color::FromArgb(int32)
    IL_000c:  stloc.0
    IL_000d:  br.s       IL_000f

//000066:     End Function
    IL_000f:  ldloc.0
    IL_0010:  ret
  } // end of method Color::ToDrawingColor

  .method public instance void  ChangeHue(float64 hue) cil managed
  {
    // Code size       661 (0x295)
    .maxstack  7
    .locals init ([0] float64 H,
             [1] float64 L,
             [2] float64 S,
             [3] float64[] clr,
             [4] float64[] t3,
             [5] float64 temp1,
             [6] float64 temp2,
             [7] int32 i,
             [8] valuetype [System.Drawing]System.Drawing.Color VB$t_struct$S0,
             [9] float64[] VB$t_array$S0,
             [10] int32 VB$t_i4$S0,
             [11] bool VB$CG$t_bool$S0,
             [12] int32 VB$CG$t_i4$S0)
//000067: 
//000068:     Public Sub ChangeHue(ByVal hue As Double)
    IL_0000:  nop
//000069: 
//000070:         Dim S = 0.9
    IL_0001:  ldc.r8     0.90000000000000002
    IL_000a:  stloc.2
//000071:         Dim L = ((System.Drawing.Color.FromArgb(ToInt32()).GetBrightness() - 0.5) * 0.5) + 0.5
    IL_000b:  ldarg.0
    IL_000c:  call       instance int32 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::ToInt32()
    IL_0011:  call       valuetype [System.Drawing]System.Drawing.Color [System.Drawing]System.Drawing.Color::FromArgb(int32)
    IL_0016:  stloc.s    VB$t_struct$S0
    IL_0018:  ldloca.s   VB$t_struct$S0
    IL_001a:  call       instance float32 [System.Drawing]System.Drawing.Color::GetBrightness()
    IL_001f:  conv.r8
    IL_0020:  ldc.r8     0.5
    IL_0029:  sub
    IL_002a:  ldc.r8     0.5
    IL_0033:  mul
    IL_0034:  ldc.r8     0.5
    IL_003d:  add
    IL_003e:  stloc.1
//000072:         Dim H = hue
    IL_003f:  ldarg.1
    IL_0040:  stloc.0
//000073: 
//000074:         If L = 0 Then
    IL_0041:  ldloc.1
    IL_0042:  ldc.r8     0.0
    IL_004b:  ceq
    IL_004d:  stloc.s    VB$CG$t_bool$S0
//000075:             R = 0.0
//000076:             G = 0.0
//000077:             B = 0.0
//000078:         ElseIf S = 0 Then
//000079:             R = L
//000080:             G = L
//000081:             B = L
//000082:         Else
//000083:             Dim temp2 = If(L <= 0.5, L * (1.0 + S), L + S - (L * S))
//000084:             Dim temp1 = 2.0 * L - temp2
//000085: 
//000086:             Dim t3 = New Double() {H + 1.0 / 3.0, H, H - 1.0 / 3.0}
//000087:             Dim clr = New Double() {0, 0, 0}
//000088: 
//000089:             For i = 0 To 2
//000090:                 If (t3(i) < 0) Then t3(i) += 1.0
//000091:                 If (t3(i) > 1) Then t3(i) -= 1.0
//000092:                 If (6.0 * t3(i) < 1.0) Then
//000093:                     clr(i) = temp1 + (temp2 - temp1) * t3(i) * 6.0
//000094:                 ElseIf (2.0 * t3(i) < 1.0) Then
//000095:                     clr(i) = temp2
//000096:                 ElseIf (3.0 * t3(i) < 2.0) Then
//000097:                     clr(i) = (temp1 + (temp2 - temp1) * ((2.0 / 3.0) - t3(i)) * 6.0)
//000098:                 Else
//000099:                     clr(i) = temp1
//000100:                 End If
//000101:             Next
//000102: 
//000103:             R = clr(0)
//000104:             G = clr(1)
//000105:             B = clr(2)
//000106:         End If
//000107:     End Sub
//000108: End Structure
    IL_004f:  ldloc.s    VB$CG$t_bool$S0
    IL_0051:  brfalse.s  IL_0085

//000075:             R = 0.0
    IL_0053:  ldarg.0
    IL_0054:  ldc.r8     0.0
    IL_005d:  stfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::R
//000076:             G = 0.0
    IL_0062:  ldarg.0
    IL_0063:  ldc.r8     0.0
    IL_006c:  stfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::G
//000077:             B = 0.0
    IL_0071:  ldarg.0
    IL_0072:  ldc.r8     0.0
    IL_007b:  stfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::B
    IL_0080:  br         IL_0292

//000078:         ElseIf S = 0 Then
    IL_0085:  ldloc.2
    IL_0086:  ldc.r8     0.0
    IL_008f:  ceq
    IL_0091:  stloc.s    VB$CG$t_bool$S0
//000079:             R = L
//000080:             G = L
//000081:             B = L
//000082:         Else
//000083:             Dim temp2 = If(L <= 0.5, L * (1.0 + S), L + S - (L * S))
//000084:             Dim temp1 = 2.0 * L - temp2
//000085: 
//000086:             Dim t3 = New Double() {H + 1.0 / 3.0, H, H - 1.0 / 3.0}
//000087:             Dim clr = New Double() {0, 0, 0}
//000088: 
//000089:             For i = 0 To 2
//000090:                 If (t3(i) < 0) Then t3(i) += 1.0
//000091:                 If (t3(i) > 1) Then t3(i) -= 1.0
//000092:                 If (6.0 * t3(i) < 1.0) Then
//000093:                     clr(i) = temp1 + (temp2 - temp1) * t3(i) * 6.0
//000094:                 ElseIf (2.0 * t3(i) < 1.0) Then
//000095:                     clr(i) = temp2
//000096:                 ElseIf (3.0 * t3(i) < 2.0) Then
//000097:                     clr(i) = (temp1 + (temp2 - temp1) * ((2.0 / 3.0) - t3(i)) * 6.0)
//000098:                 Else
//000099:                     clr(i) = temp1
//000100:                 End If
//000101:             Next
//000102: 
//000103:             R = clr(0)
//000104:             G = clr(1)
//000105:             B = clr(2)
//000106:         End If
//000107:     End Sub
//000108: End Structure
    IL_0093:  ldloc.s    VB$CG$t_bool$S0
    IL_0095:  brfalse.s  IL_00b1

//000079:             R = L
    IL_0097:  ldarg.0
    IL_0098:  ldloc.1
    IL_0099:  stfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::R
//000080:             G = L
    IL_009e:  ldarg.0
    IL_009f:  ldloc.1
    IL_00a0:  stfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::G
//000081:             B = L
    IL_00a5:  ldarg.0
    IL_00a6:  ldloc.1
    IL_00a7:  stfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::B
    IL_00ac:  br         IL_0292

//000082:         Else
    IL_00b1:  nop
//000083:             Dim temp2 = If(L <= 0.5, L * (1.0 + S), L + S - (L * S))
    IL_00b2:  ldloc.1
    IL_00b3:  ldc.r8     0.5
    IL_00bc:  ble.s      IL_00c7

    IL_00be:  ldloc.1
    IL_00bf:  ldloc.2
    IL_00c0:  add
    IL_00c1:  ldloc.1
    IL_00c2:  ldloc.2
    IL_00c3:  mul
    IL_00c4:  sub
    IL_00c5:  br.s       IL_00d4

    IL_00c7:  ldloc.1
    IL_00c8:  ldc.r8     1.
    IL_00d1:  ldloc.2
    IL_00d2:  add
    IL_00d3:  mul
    IL_00d4:  stloc.s    temp2
//000084:             Dim temp1 = 2.0 * L - temp2
    IL_00d6:  ldc.r8     2.
    IL_00df:  ldloc.1
    IL_00e0:  mul
    IL_00e1:  ldloc.s    temp2
    IL_00e3:  sub
    IL_00e4:  stloc.s    temp1
//000085: 
//000086:             Dim t3 = New Double() {H + 1.0 / 3.0, H, H - 1.0 / 3.0}
    IL_00e6:  ldc.i4.3
    IL_00e7:  newarr     [mscorlib]System.Double
    IL_00ec:  stloc.s    VB$t_array$S0
    IL_00ee:  ldloc.s    VB$t_array$S0
    IL_00f0:  ldc.i4.0
    IL_00f1:  ldloc.0
    IL_00f2:  ldc.r8     0.33333333333333331
    IL_00fb:  add
    IL_00fc:  stelem.r8
    IL_00fd:  ldloc.s    VB$t_array$S0
    IL_00ff:  ldc.i4.1
    IL_0100:  ldloc.0
    IL_0101:  stelem.r8
    IL_0102:  ldloc.s    VB$t_array$S0
    IL_0104:  ldc.i4.2
    IL_0105:  ldloc.0
    IL_0106:  ldc.r8     0.33333333333333331
    IL_010f:  sub
    IL_0110:  stelem.r8
    IL_0111:  ldloc.s    VB$t_array$S0
    IL_0113:  stloc.s    t3
//000087:             Dim clr = New Double() {0, 0, 0}
    IL_0115:  ldc.i4.3
    IL_0116:  newarr     [mscorlib]System.Double
    IL_011b:  stloc.s    VB$t_array$S0
    IL_011d:  ldloc.s    VB$t_array$S0
    IL_011f:  ldc.i4.0
    IL_0120:  ldc.r8     0.0
    IL_0129:  stelem.r8
    IL_012a:  ldloc.s    VB$t_array$S0
    IL_012c:  ldc.i4.1
    IL_012d:  ldc.r8     0.0
    IL_0136:  stelem.r8
    IL_0137:  ldloc.s    VB$t_array$S0
    IL_0139:  ldc.i4.2
    IL_013a:  ldc.r8     0.0
    IL_0143:  stelem.r8
    IL_0144:  ldloc.s    VB$t_array$S0
    IL_0146:  stloc.3
//000088: 
//000089:             For i = 0 To 2
    IL_0147:  ldc.i4.0
    IL_0148:  stloc.s    i
//000090:                 If (t3(i) < 0) Then t3(i) += 1.0
    IL_014a:  ldloc.s    t3
    IL_014c:  ldloc.s    i
    IL_014e:  ldelem.r8
    IL_014f:  ldc.r8     0.0
    IL_0158:  clt
    IL_015a:  stloc.s    VB$CG$t_bool$S0
//000091:                 If (t3(i) > 1) Then t3(i) -= 1.0
//000092:                 If (6.0 * t3(i) < 1.0) Then
//000093:                     clr(i) = temp1 + (temp2 - temp1) * t3(i) * 6.0
//000094:                 ElseIf (2.0 * t3(i) < 1.0) Then
//000095:                     clr(i) = temp2
//000096:                 ElseIf (3.0 * t3(i) < 2.0) Then
//000097:                     clr(i) = (temp1 + (temp2 - temp1) * ((2.0 / 3.0) - t3(i)) * 6.0)
//000098:                 Else
//000099:                     clr(i) = temp1
//000100:                 End If
//000101:             Next
//000102: 
//000103:             R = clr(0)
//000104:             G = clr(1)
//000105:             B = clr(2)
//000106:         End If
//000107:     End Sub
//000108: End Structure
    IL_015c:  ldloc.s    VB$CG$t_bool$S0
    IL_015e:  brfalse.s  IL_017c

//000090:                 If (t3(i) < 0) Then t3(i) += 1.0
    IL_0160:  ldloc.s    t3
    IL_0162:  stloc.s    VB$t_array$S0
    IL_0164:  ldloc.s    VB$t_array$S0
    IL_0166:  ldloc.s    i
    IL_0168:  stloc.s    VB$t_i4$S0
    IL_016a:  ldloc.s    VB$t_i4$S0
    IL_016c:  ldloc.s    VB$t_array$S0
    IL_016e:  ldloc.s    VB$t_i4$S0
    IL_0170:  ldelem.r8
    IL_0171:  ldc.r8     1.
    IL_017a:  add
    IL_017b:  stelem.r8
//000091:                 If (t3(i) > 1) Then t3(i) -= 1.0
    IL_017c:  ldloc.s    t3
    IL_017e:  ldloc.s    i
    IL_0180:  ldelem.r8
    IL_0181:  ldc.r8     1.
    IL_018a:  cgt
    IL_018c:  stloc.s    VB$CG$t_bool$S0
//000092:                 If (6.0 * t3(i) < 1.0) Then
//000093:                     clr(i) = temp1 + (temp2 - temp1) * t3(i) * 6.0
//000094:                 ElseIf (2.0 * t3(i) < 1.0) Then
//000095:                     clr(i) = temp2
//000096:                 ElseIf (3.0 * t3(i) < 2.0) Then
//000097:                     clr(i) = (temp1 + (temp2 - temp1) * ((2.0 / 3.0) - t3(i)) * 6.0)
//000098:                 Else
//000099:                     clr(i) = temp1
//000100:                 End If
//000101:             Next
//000102: 
//000103:             R = clr(0)
//000104:             G = clr(1)
//000105:             B = clr(2)
//000106:         End If
//000107:     End Sub
//000108: End Structure
    IL_018e:  ldloc.s    VB$CG$t_bool$S0
    IL_0190:  brfalse.s  IL_01ae

//000091:                 If (t3(i) > 1) Then t3(i) -= 1.0
    IL_0192:  ldloc.s    t3
    IL_0194:  stloc.s    VB$t_array$S0
    IL_0196:  ldloc.s    VB$t_array$S0
    IL_0198:  ldloc.s    i
    IL_019a:  stloc.s    VB$t_i4$S0
    IL_019c:  ldloc.s    VB$t_i4$S0
    IL_019e:  ldloc.s    VB$t_array$S0
    IL_01a0:  ldloc.s    VB$t_i4$S0
    IL_01a2:  ldelem.r8
    IL_01a3:  ldc.r8     1.
    IL_01ac:  sub
    IL_01ad:  stelem.r8
//000092:                 If (6.0 * t3(i) < 1.0) Then
    IL_01ae:  ldc.r8     6.
    IL_01b7:  ldloc.s    t3
    IL_01b9:  ldloc.s    i
    IL_01bb:  ldelem.r8
    IL_01bc:  mul
    IL_01bd:  ldc.r8     1.
    IL_01c6:  clt
    IL_01c8:  stloc.s    VB$CG$t_bool$S0
//000093:                     clr(i) = temp1 + (temp2 - temp1) * t3(i) * 6.0
//000094:                 ElseIf (2.0 * t3(i) < 1.0) Then
//000095:                     clr(i) = temp2
//000096:                 ElseIf (3.0 * t3(i) < 2.0) Then
//000097:                     clr(i) = (temp1 + (temp2 - temp1) * ((2.0 / 3.0) - t3(i)) * 6.0)
//000098:                 Else
//000099:                     clr(i) = temp1
//000100:                 End If
//000101:             Next
//000102: 
//000103:             R = clr(0)
//000104:             G = clr(1)
//000105:             B = clr(2)
//000106:         End If
//000107:     End Sub
//000108: End Structure
    IL_01ca:  ldloc.s    VB$CG$t_bool$S0
    IL_01cc:  brfalse.s  IL_01ec

//000093:                     clr(i) = temp1 + (temp2 - temp1) * t3(i) * 6.0
    IL_01ce:  ldloc.3
    IL_01cf:  ldloc.s    i
    IL_01d1:  ldloc.s    temp1
    IL_01d3:  ldloc.s    temp2
    IL_01d5:  ldloc.s    temp1
    IL_01d7:  sub
    IL_01d8:  ldloc.s    t3
    IL_01da:  ldloc.s    i
    IL_01dc:  ldelem.r8
    IL_01dd:  mul
    IL_01de:  ldc.r8     6.
    IL_01e7:  mul
    IL_01e8:  add
    IL_01e9:  stelem.r8
    IL_01ea:  br.s       IL_0263

//000094:                 ElseIf (2.0 * t3(i) < 1.0) Then
    IL_01ec:  ldc.r8     2.
    IL_01f5:  ldloc.s    t3
    IL_01f7:  ldloc.s    i
    IL_01f9:  ldelem.r8
    IL_01fa:  mul
    IL_01fb:  ldc.r8     1.
    IL_0204:  clt
    IL_0206:  stloc.s    VB$CG$t_bool$S0
//000095:                     clr(i) = temp2
//000096:                 ElseIf (3.0 * t3(i) < 2.0) Then
//000097:                     clr(i) = (temp1 + (temp2 - temp1) * ((2.0 / 3.0) - t3(i)) * 6.0)
//000098:                 Else
//000099:                     clr(i) = temp1
//000100:                 End If
//000101:             Next
//000102: 
//000103:             R = clr(0)
//000104:             G = clr(1)
//000105:             B = clr(2)
//000106:         End If
//000107:     End Sub
//000108: End Structure
    IL_0208:  ldloc.s    VB$CG$t_bool$S0
    IL_020a:  brfalse.s  IL_0214

//000095:                     clr(i) = temp2
    IL_020c:  ldloc.3
    IL_020d:  ldloc.s    i
    IL_020f:  ldloc.s    temp2
    IL_0211:  stelem.r8
    IL_0212:  br.s       IL_0263

//000096:                 ElseIf (3.0 * t3(i) < 2.0) Then
    IL_0214:  ldc.r8     3.
    IL_021d:  ldloc.s    t3
    IL_021f:  ldloc.s    i
    IL_0221:  ldelem.r8
    IL_0222:  mul
    IL_0223:  ldc.r8     2.
    IL_022c:  clt
    IL_022e:  stloc.s    VB$CG$t_bool$S0
//000097:                     clr(i) = (temp1 + (temp2 - temp1) * ((2.0 / 3.0) - t3(i)) * 6.0)
//000098:                 Else
//000099:                     clr(i) = temp1
//000100:                 End If
//000101:             Next
//000102: 
//000103:             R = clr(0)
//000104:             G = clr(1)
//000105:             B = clr(2)
//000106:         End If
//000107:     End Sub
//000108: End Structure
    IL_0230:  ldloc.s    VB$CG$t_bool$S0
    IL_0232:  brfalse.s  IL_025c

//000097:                     clr(i) = (temp1 + (temp2 - temp1) * ((2.0 / 3.0) - t3(i)) * 6.0)
    IL_0234:  ldloc.3
    IL_0235:  ldloc.s    i
    IL_0237:  ldloc.s    temp1
    IL_0239:  ldloc.s    temp2
    IL_023b:  ldloc.s    temp1
    IL_023d:  sub
    IL_023e:  ldc.r8     0.66666666666666663
    IL_0247:  ldloc.s    t3
    IL_0249:  ldloc.s    i
    IL_024b:  ldelem.r8
    IL_024c:  sub
    IL_024d:  mul
    IL_024e:  ldc.r8     6.
    IL_0257:  mul
    IL_0258:  add
    IL_0259:  stelem.r8
    IL_025a:  br.s       IL_0263

//000098:                 Else
    IL_025c:  nop
//000099:                     clr(i) = temp1
    IL_025d:  ldloc.3
    IL_025e:  ldloc.s    i
    IL_0260:  ldloc.s    temp1
    IL_0262:  stelem.r8
//000100:                 End If
    IL_0263:  nop
//000101:             Next
    IL_0264:  nop
    IL_0265:  ldloc.s    i
    IL_0267:  ldc.i4.1
    IL_0268:  add.ovf
    IL_0269:  stloc.s    i
//000102: 
//000103:             R = clr(0)
//000104:             G = clr(1)
//000105:             B = clr(2)
//000106:         End If
//000107:     End Sub
//000108: End Structure
    IL_026b:  ldloc.s    i
    IL_026d:  ldc.i4.2
    IL_026e:  stloc.s    VB$CG$t_i4$S0
    IL_0270:  ldloc.s    VB$CG$t_i4$S0
    IL_0272:  ble        IL_014a

//000103:             R = clr(0)
    IL_0277:  ldarg.0
    IL_0278:  ldloc.3
    IL_0279:  ldc.i4.0
    IL_027a:  ldelem.r8
    IL_027b:  stfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::R
//000104:             G = clr(1)
    IL_0280:  ldarg.0
    IL_0281:  ldloc.3
    IL_0282:  ldc.i4.1
    IL_0283:  ldelem.r8
    IL_0284:  stfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::G
//000105:             B = clr(2)
    IL_0289:  ldarg.0
    IL_028a:  ldloc.3
    IL_028b:  ldc.i4.2
    IL_028c:  ldelem.r8
    IL_028d:  stfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::B
//000106:         End If
    IL_0292:  nop
//000107:     End Sub
    IL_0293:  nop
    IL_0294:  ret
  } // end of method Color::ChangeHue

} // end of class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color

.class public auto ansi Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.ISect
       extends [mscorlib]System.Object
{
  .field public class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.SceneObject Thing
  .field public valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Ray Ray
  .field public float64 Dist
  .method public specialname rtspecialname 
          instance void  .ctor(class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.SceneObject thing,
                               valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Ray ray,
                               float64 dist) cil managed
  {
    // Code size       31 (0x1f)
    .maxstack  8
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Raytracer\Raytracer_VisualBasic\ISect.vb' 
//000014:     Public Sub New(ByVal thing As SceneObject, ByVal ray As Ray, ByVal dist As Double)
    IL_0000:  nop
//000015:         Me.Thing = thing
//000016:         Me.Ray = ray
//000017:         Me.Dist = dist
//000018:     End Sub
//000019: End Class
    IL_0001:  ldarg.0
    IL_0002:  call       instance void [mscorlib]System.Object::.ctor()
    IL_0007:  nop
//000015:         Me.Thing = thing
    IL_0008:  ldarg.0
    IL_0009:  ldarg.1
    IL_000a:  stfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.SceneObject Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.ISect::Thing
//000016:         Me.Ray = ray
    IL_000f:  ldarg.0
    IL_0010:  ldarg.2
    IL_0011:  stfld      valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Ray Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.ISect::Ray
//000017:         Me.Dist = dist
    IL_0016:  ldarg.0
    IL_0017:  ldarg.3
    IL_0018:  stfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.ISect::Dist
//000018:     End Sub
    IL_001d:  nop
    IL_001e:  ret
  } // end of method ISect::.ctor

} // end of class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.ISect

.class public auto ansi Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Light
       extends [mscorlib]System.Object
{
  .field public valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Position
  .field public valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color Color
  .method public specialname rtspecialname 
          instance void  .ctor(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector position,
                               valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color color) cil managed
  {
    // Code size       24 (0x18)
    .maxstack  8
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Raytracer\Raytracer_VisualBasic\Light.vb' 
//000013:     Public Sub New(ByVal position As Vector, ByVal color As Color)
    IL_0000:  nop
//000014:         Me.Position = position
//000015:         Me.Color = color
//000016:     End Sub
//000017: End Class
    IL_0001:  ldarg.0
    IL_0002:  call       instance void [mscorlib]System.Object::.ctor()
    IL_0007:  nop
//000014:         Me.Position = position
    IL_0008:  ldarg.0
    IL_0009:  ldarg.1
    IL_000a:  stfld      valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Light::Position
//000015:         Me.Color = color
    IL_000f:  ldarg.0
    IL_0010:  ldarg.2
    IL_0011:  stfld      valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Light::Color
//000016:     End Sub
    IL_0016:  nop
    IL_0017:  ret
  } // end of method Light::.ctor

} // end of class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Light

.class public auto ansi beforefieldinit Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main
       extends [System.Windows.Forms]System.Windows.Forms.Form
{
  .custom instance void [Microsoft.VisualBasic]Microsoft.VisualBasic.CompilerServices.DesignerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
  .class auto ansi nested assembly _Closure$__1
         extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .field public float64 $VB$Local_framesPerSecond
    .field public int32[] $VB$Local_rgb
    .field public class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main $VB$Me
    .method public specialname rtspecialname 
            instance void  .ctor(class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main/_Closure$__1 other) cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       57 (0x39)
      .maxstack  2
      .locals init (bool V_0)
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  nop
      IL_0007:  ldarg.1
      IL_0008:  ldnull
      IL_0009:  ceq
      IL_000b:  ldc.i4.0
      IL_000c:  ceq
      IL_000e:  stloc.0
      IL_000f:  ldloc.0
      IL_0010:  brfalse.s  IL_0036

      IL_0012:  ldarg.0
      IL_0013:  ldarg.1
      IL_0014:  ldfld      int32[] Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main/_Closure$__1::$VB$Local_rgb
      IL_0019:  stfld      int32[] Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main/_Closure$__1::$VB$Local_rgb
      IL_001e:  ldarg.0
      IL_001f:  ldarg.1
      IL_0020:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main/_Closure$__1::$VB$Local_framesPerSecond
      IL_0025:  stfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main/_Closure$__1::$VB$Local_framesPerSecond
      IL_002a:  ldarg.0
      IL_002b:  ldarg.1
      IL_002c:  ldfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main/_Closure$__1::$VB$Me
      IL_0031:  stfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main/_Closure$__1::$VB$Me
      IL_0036:  nop
      IL_0037:  nop
      IL_0038:  ret
    } // end of method _Closure$__1::.ctor

    .method public specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       9 (0x9)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  nop
      IL_0007:  nop
      IL_0008:  ret
    } // end of method _Closure$__1::.ctor

    .method public specialname instance void 
            _Lambda$__3() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       171 (0xab)
      .maxstack  4
      .locals init ([0] class [System.Drawing]System.Drawing.Imaging.BitmapData bmpData)
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Raytracer\Raytracer_VisualBasic\Main.vb' 
//000130:             Dim a = Sub()
      IL_0000:  nop
//000131:                         ' Copy the pixel array into the bitmap
//000132:                         Dim bmpData = _bitmap.LockBits(_rect, ImageLockMode.WriteOnly, _bitmap.PixelFormat)
      IL_0001:  ldarg.0
      IL_0002:  ldfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main/_Closure$__1::$VB$Me
      IL_0007:  ldfld      class [System.Drawing]System.Drawing.Bitmap Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::_bitmap
      IL_000c:  ldarg.0
      IL_000d:  ldfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main/_Closure$__1::$VB$Me
      IL_0012:  ldfld      valuetype [System.Drawing]System.Drawing.Rectangle Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::_rect
      IL_0017:  ldc.i4.2
      IL_0018:  ldarg.0
      IL_0019:  ldfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main/_Closure$__1::$VB$Me
      IL_001e:  ldfld      class [System.Drawing]System.Drawing.Bitmap Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::_bitmap
      IL_0023:  callvirt   instance valuetype [System.Drawing]System.Drawing.Imaging.PixelFormat [System.Drawing]System.Drawing.Image::get_PixelFormat()
      IL_0028:  callvirt   instance class [System.Drawing]System.Drawing.Imaging.BitmapData [System.Drawing]System.Drawing.Bitmap::LockBits(valuetype [System.Drawing]System.Drawing.Rectangle,
                                                                                                                                            valuetype [System.Drawing]System.Drawing.Imaging.ImageLockMode,
                                                                                                                                            valuetype [System.Drawing]System.Drawing.Imaging.PixelFormat)
      IL_002d:  stloc.0
//000133:                         Marshal.Copy(rgb, 0, bmpData.Scan0, rgb.Length)
      IL_002e:  ldarg.0
      IL_002f:  ldfld      int32[] Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main/_Closure$__1::$VB$Local_rgb
      IL_0034:  ldc.i4.0
      IL_0035:  ldloc.0
      IL_0036:  callvirt   instance native int [System.Drawing]System.Drawing.Imaging.BitmapData::get_Scan0()
      IL_003b:  ldarg.0
      IL_003c:  ldfld      int32[] Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main/_Closure$__1::$VB$Local_rgb
      IL_0041:  ldlen
      IL_0042:  conv.ovf.i4
      IL_0043:  call       void [mscorlib]System.Runtime.InteropServices.Marshal::Copy(int32[],
                                                                                       int32,
                                                                                       native int,
                                                                                       int32)
      IL_0048:  nop
//000134:                         _bitmap.UnlockBits(bmpData)
      IL_0049:  ldarg.0
      IL_004a:  ldfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main/_Closure$__1::$VB$Me
      IL_004f:  ldfld      class [System.Drawing]System.Drawing.Bitmap Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::_bitmap
      IL_0054:  ldloc.0
      IL_0055:  callvirt   instance void [System.Drawing]System.Drawing.Bitmap::UnlockBits(class [System.Drawing]System.Drawing.Imaging.BitmapData)
      IL_005a:  nop
//000135:                         _freeBuffers.PutObject(rgb)
      IL_005b:  ldarg.0
      IL_005c:  ldfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main/_Closure$__1::$VB$Me
      IL_0061:  ldfld      class [ParallelExtensionsExtras]System.Collections.Concurrent.ObjectPool`1<int32[]> Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::_freeBuffers
      IL_0066:  ldarg.0
      IL_0067:  ldfld      int32[] Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main/_Closure$__1::$VB$Local_rgb
      IL_006c:  callvirt   instance void class [ParallelExtensionsExtras]System.Collections.Concurrent.ObjectPool`1<int32[]>::PutObject(!0)
      IL_0071:  nop
//000136: 
//000137:                         ' Refresh the UI
//000138:                         pbRenderedImage.Invalidate()
      IL_0072:  ldarg.0
      IL_0073:  ldfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main/_Closure$__1::$VB$Me
      IL_0078:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_pbRenderedImage()
      IL_007d:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::Invalidate()
      IL_0082:  nop
//000139:                         Text = "Ray Tracer - FPS: " + framesPerSecond.ToString("F1")
      IL_0083:  ldarg.0
      IL_0084:  ldfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main/_Closure$__1::$VB$Me
      IL_0089:  ldstr      "Ray Tracer - FPS: "
      IL_008e:  ldarg.0
      IL_008f:  ldflda     float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main/_Closure$__1::$VB$Local_framesPerSecond
      IL_0094:  ldstr      "F1"
      IL_0099:  call       instance string [mscorlib]System.Double::ToString(string)
      IL_009e:  call       string [mscorlib]System.String::Concat(string,
                                                                  string)
      IL_00a3:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Form::set_Text(string)
      IL_00a8:  nop
//000140:                     End Sub
      IL_00a9:  nop
      IL_00aa:  ret
    } // end of method _Closure$__1::_Lambda$__3

  } // end of class _Closure$__1

  .field private static class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> __ENCList
  .field private class [System]System.ComponentModel.IContainer components
  .field private class [System.Windows.Forms]System.Windows.Forms.Label _lblNumProcs
  .custom instance void [mscorlib]System.Runtime.CompilerServices.AccessedThroughPropertyAttribute::.ctor(string) = ( 01 00 0B 6C 62 6C 4E 75 6D 50 72 6F 63 73 00 00 ) // ...lblNumProcs..
  .field private class [System.Windows.Forms]System.Windows.Forms.TrackBar _tbNumProcs
  .custom instance void [mscorlib]System.Runtime.CompilerServices.AccessedThroughPropertyAttribute::.ctor(string) = ( 01 00 0A 74 62 4E 75 6D 50 72 6F 63 73 00 00 )    // ...tbNumProcs..
  .field private class [System.Windows.Forms]System.Windows.Forms.CheckBox _chkShowThreads
  .custom instance void [mscorlib]System.Runtime.CompilerServices.AccessedThroughPropertyAttribute::.ctor(string) = ( 01 00 0E 63 68 6B 53 68 6F 77 54 68 72 65 61 64   // ...chkShowThread
                                                                                                                      73 00 00 )                                        // s..
  .field private class [System.Windows.Forms]System.Windows.Forms.CheckBox _chkParallel
  .custom instance void [mscorlib]System.Runtime.CompilerServices.AccessedThroughPropertyAttribute::.ctor(string) = ( 01 00 0B 63 68 6B 50 61 72 61 6C 6C 65 6C 00 00 ) // ...chkParallel..
  .field private class [System.Windows.Forms]System.Windows.Forms.Button _btnStartStop
  .custom instance void [mscorlib]System.Runtime.CompilerServices.AccessedThroughPropertyAttribute::.ctor(string) = ( 01 00 0C 62 74 6E 53 74 61 72 74 53 74 6F 70 00   // ...btnStartStop.
                                                                                                                      00 ) 
  .field private class [System.Windows.Forms]System.Windows.Forms.PictureBox _pbRenderedImage
  .custom instance void [mscorlib]System.Runtime.CompilerServices.AccessedThroughPropertyAttribute::.ctor(string) = ( 01 00 0F 70 62 52 65 6E 64 65 72 65 64 49 6D 61   // ...pbRenderedIma
                                                                                                                      67 65 00 00 )                                     // ge..
  .field private bool _showThreads
  .field private bool _parallel
  .field private int32 _degreeOfParallelism
  .field private class [mscorlib]System.Threading.CancellationTokenSource _cancellation
  .field private int32 _width
  .field private int32 _height
  .field private class [System.Drawing]System.Drawing.Bitmap _bitmap
  .field private valuetype [System.Drawing]System.Drawing.Rectangle _rect
  .field private class [ParallelExtensionsExtras]System.Collections.Concurrent.ObjectPool`1<int32[]> _freeBuffers
  .method private specialname rtspecialname static 
          void  .cctor() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       12 (0xc)
    .maxstack  8
    IL_0000:  newobj     instance void class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::.ctor()
    IL_0005:  stsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::__ENCList
    IL_000a:  nop
    IL_000b:  ret
  } // end of method Main::.cctor

  .method public specialname rtspecialname 
          instance void  .ctor() cil managed
  {
    // Code size       54 (0x36)
    .maxstack  8
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Raytracer\Raytracer_VisualBasic\Main.Designer.vb' 
    IL_0000:  ldarg.0
    IL_0001:  call       instance void [System.Windows.Forms]System.Windows.Forms.Form::.ctor()
    IL_0006:  nop
    IL_0007:  ldarg.0
    IL_0008:  ldarg.0
    IL_0009:  dup
    IL_000a:  ldvirtftn  instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::MainForm_Load(object,
                                                                                                                          class [mscorlib]System.EventArgs)
    IL_0010:  newobj     instance void [mscorlib]System.EventHandler::.ctor(object,
                                                                            native int)
    IL_0015:  call       instance void [System.Windows.Forms]System.Windows.Forms.Form::add_Load(class [mscorlib]System.EventHandler)
    IL_001a:  nop
    IL_001b:  ldarg.0
    IL_001c:  call       void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::__ENCAddToList(object)
    IL_0021:  nop
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Raytracer\Raytracer_VisualBasic\Main.vb' 
//000021:     Private _degreeOfParallelism As Int32 = Environment.ProcessorCount
    IL_0022:  ldarg.0
    IL_0023:  call       int32 [mscorlib]System.Environment::get_ProcessorCount()
    IL_0028:  stfld      int32 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::_degreeOfParallelism
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Raytracer\Raytracer_VisualBasic\Main.Designer.vb' 
    IL_002d:  ldarg.0
    IL_002e:  callvirt   instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::InitializeComponent()
    IL_0033:  nop
    IL_0034:  nop
    IL_0035:  ret
  } // end of method Main::.ctor

  .method private static void  __ENCAddToList(object 'value') cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       243 (0xf3)
    .maxstack  4
    .locals init (int32 V_0,
             int32 V_1,
             class [mscorlib]System.WeakReference V_2,
             class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> V_3,
             bool V_4,
             int32 V_5,
             bool V_6,
             bool V_7,
             int32 V_8)
    IL_0000:  nop
    IL_0001:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::__ENCList
    IL_0006:  stloc.3
    IL_0007:  ldc.i4.0
    IL_0008:  stloc.s    V_4
    IL_000a:  nop
    .try
    {
      IL_000b:  ldloc.3
      IL_000c:  ldloca.s   V_4
      IL_000e:  call       void [mscorlib]System.Threading.Monitor::Enter(object,
                                                                          bool&)
      IL_0013:  nop
      IL_0014:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::__ENCList
      IL_0019:  callvirt   instance int32 class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::get_Count()
      IL_001e:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::__ENCList
      IL_0023:  callvirt   instance int32 class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::get_Capacity()
      IL_0028:  ceq
      IL_002a:  stloc.s    V_6
      IL_002c:  ldloc.s    V_6
      IL_002e:  brfalse    IL_00c4

      IL_0033:  ldc.i4.0
      IL_0034:  stloc.0
      IL_0035:  ldc.i4.0
      IL_0036:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::__ENCList
      IL_003b:  callvirt   instance int32 class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::get_Count()
      IL_0040:  ldc.i4.1
      IL_0041:  sub.ovf
      IL_0042:  stloc.s    V_5
      IL_0044:  stloc.1
      IL_0045:  br.s       IL_008e

      IL_0047:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::__ENCList
      IL_004c:  ldloc.1
      IL_004d:  callvirt   instance !0 class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::get_Item(int32)
      IL_0052:  stloc.2
      IL_0053:  ldloc.2
      IL_0054:  callvirt   instance bool [mscorlib]System.WeakReference::get_IsAlive()
      IL_0059:  stloc.s    V_6
      IL_005b:  ldloc.s    V_6
      IL_005d:  brfalse.s  IL_0088

      IL_005f:  ldloc.1
      IL_0060:  ldloc.0
      IL_0061:  ceq
      IL_0063:  ldc.i4.0
      IL_0064:  ceq
      IL_0066:  stloc.s    V_7
      IL_0068:  ldloc.s    V_7
      IL_006a:  brfalse.s  IL_0083

      IL_006c:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::__ENCList
      IL_0071:  ldloc.0
      IL_0072:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::__ENCList
      IL_0077:  ldloc.1
      IL_0078:  callvirt   instance !0 class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::get_Item(int32)
      IL_007d:  callvirt   instance void class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::set_Item(int32,
                                                                                                                                           !0)
      IL_0082:  nop
      IL_0083:  nop
      IL_0084:  ldloc.0
      IL_0085:  ldc.i4.1
      IL_0086:  add.ovf
      IL_0087:  stloc.0
      IL_0088:  nop
      IL_0089:  nop
      IL_008a:  ldloc.1
      IL_008b:  ldc.i4.1
      IL_008c:  add.ovf
      IL_008d:  stloc.1
      IL_008e:  ldloc.1
      IL_008f:  ldloc.s    V_5
      IL_0091:  stloc.s    V_8
      IL_0093:  ldloc.s    V_8
      IL_0095:  ble.s      IL_0047

      IL_0097:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::__ENCList
      IL_009c:  ldloc.0
      IL_009d:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::__ENCList
      IL_00a2:  callvirt   instance int32 class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::get_Count()
      IL_00a7:  ldloc.0
      IL_00a8:  sub.ovf
      IL_00a9:  callvirt   instance void class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::RemoveRange(int32,
                                                                                                                                              int32)
      IL_00ae:  nop
      IL_00af:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::__ENCList
      IL_00b4:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::__ENCList
      IL_00b9:  callvirt   instance int32 class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::get_Count()
      IL_00be:  callvirt   instance void class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::set_Capacity(int32)
      IL_00c3:  nop
      IL_00c4:  nop
      IL_00c5:  ldsfld     class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference> Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::__ENCList
      IL_00ca:  ldarg.0
      IL_00cb:  call       object [mscorlib]System.Runtime.CompilerServices.RuntimeHelpers::GetObjectValue(object)
      IL_00d0:  newobj     instance void [mscorlib]System.WeakReference::.ctor(object)
      IL_00d5:  callvirt   instance void class [mscorlib]System.Collections.Generic.List`1<class [mscorlib]System.WeakReference>::Add(!0)
      IL_00da:  nop
      IL_00db:  nop
      IL_00dc:  leave.s    IL_00f0

    }  // end .try
    finally
    {
      IL_00de:  nop
      IL_00df:  ldloc.s    V_4
      IL_00e1:  stloc.s    V_7
      IL_00e3:  ldloc.s    V_7
      IL_00e5:  brfalse.s  IL_00ee

      IL_00e7:  ldloc.3
      IL_00e8:  call       void [mscorlib]System.Threading.Monitor::Exit(object)
      IL_00ed:  nop
      IL_00ee:  nop
      IL_00ef:  endfinally
    }  // end handler
    IL_00f0:  nop
    IL_00f1:  nop
    IL_00f2:  ret
  } // end of method Main::__ENCAddToList

  .method family strict virtual instance void 
          Dispose(bool disposing) cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       49 (0x31)
    .maxstack  2
    .locals init ([0] bool VB$CG$t_bool$S0)
//000007:     Protected Overrides Sub Dispose(ByVal disposing As Boolean)
    IL_0000:  nop
//000008:         Try
    IL_0001:  nop
//000009:             If disposing AndAlso components IsNot Nothing Then
    .try
    {
      IL_0002:  ldarg.1
      IL_0003:  brfalse.s  IL_000d

      IL_0005:  ldarg.0
      IL_0006:  ldfld      class [System]System.ComponentModel.IContainer Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::components
      IL_000b:  brtrue.s   IL_0010

      IL_000d:  ldc.i4.0
      IL_000e:  br.s       IL_0011

      IL_0010:  ldc.i4.1
      IL_0011:  stloc.0
//000010:                 components.Dispose()
//000011:             End If
//000012:         Finally
//000013:             MyBase.Dispose(disposing)
//000014:         End Try
//000015:     End Sub
//000016: 
//000017:     'Required by the Windows Form Designer
//000018:     Private components As System.ComponentModel.IContainer
//000019: 
//000020:     'NOTE: The following procedure is required by the Windows Form Designer
//000021:     'It can be modified using the Windows Form Designer.  
//000022:     'Do not modify it using the code editor.
//000023:     <System.Diagnostics.DebuggerStepThrough()> _
//000024:     Private Sub InitializeComponent()
//000025:         Me.lblNumProcs = New System.Windows.Forms.Label()
//000026:         Me.tbNumProcs = New System.Windows.Forms.TrackBar()
//000027:         Me.chkShowThreads = New System.Windows.Forms.CheckBox()
//000028:         Me.chkParallel = New System.Windows.Forms.CheckBox()
//000029:         Me.btnStartStop = New System.Windows.Forms.Button()
//000030:         Me.pbRenderedImage = New System.Windows.Forms.PictureBox()
//000031:         CType(Me.tbNumProcs, System.ComponentModel.ISupportInitialize).BeginInit()
//000032:         CType(Me.pbRenderedImage, System.ComponentModel.ISupportInitialize).BeginInit()
//000033:         Me.SuspendLayout()
//000034:         '
//000035:         'lblNumProcs
//000036:         '
//000037:         Me.lblNumProcs.Anchor = CType((System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
//000038:         Me.lblNumProcs.AutoSize = True
//000039:         Me.lblNumProcs.Enabled = False
//000040:         Me.lblNumProcs.Font = New System.Drawing.Font("Microsoft Sans Serif", 8.25!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
//000041:         Me.lblNumProcs.Location = New System.Drawing.Point(294, 428)
//000042:         Me.lblNumProcs.Name = "lblNumProcs"
//000043:         Me.lblNumProcs.Size = New System.Drawing.Size(14, 13)
//000044:         Me.lblNumProcs.TabIndex = 29
//000045:         Me.lblNumProcs.Text = "1"
//000046:         '
//000047:         'tbNumProcs
//000048:         '
//000049:         Me.tbNumProcs.Anchor = CType((System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
//000050:         Me.tbNumProcs.Enabled = False
//000051:         Me.tbNumProcs.Location = New System.Drawing.Point(303, 418)
//000052:         Me.tbNumProcs.Maximum = 24
//000053:         Me.tbNumProcs.Minimum = 1
//000054:         Me.tbNumProcs.Name = "tbNumProcs"
//000055:         Me.tbNumProcs.Size = New System.Drawing.Size(178, 45)
//000056:         Me.tbNumProcs.TabIndex = 28
//000057:         Me.tbNumProcs.Value = 1
//000058:         '
//000059:         'chkShowThreads
//000060:         '
//000061:         Me.chkShowThreads.Anchor = CType((System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left), System.Windows.Forms.AnchorStyles)
//000062:         Me.chkShowThreads.AutoSize = True
//000063:         Me.chkShowThreads.Enabled = False
//000064:         Me.chkShowThreads.Location = New System.Drawing.Point(173, 423)
//000065:         Me.chkShowThreads.Name = "chkShowThreads"
//000066:         Me.chkShowThreads.Size = New System.Drawing.Size(95, 17)
//000067:         Me.chkShowThreads.TabIndex = 27
//000068:         Me.chkShowThreads.Text = "Show Threads"
//000069:         Me.chkShowThreads.UseVisualStyleBackColor = True
//000070:         '
//000071:         'chkParallel
//000072:         '
//000073:         Me.chkParallel.Anchor = CType((System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left), System.Windows.Forms.AnchorStyles)
//000074:         Me.chkParallel.AutoSize = True
//000075:         Me.chkParallel.Location = New System.Drawing.Point(107, 423)
//000076:         Me.chkParallel.Name = "chkParallel"
//000077:         Me.chkParallel.Size = New System.Drawing.Size(60, 17)
//000078:         Me.chkParallel.TabIndex = 26
//000079:         Me.chkParallel.Text = "Parallel"
//000080:         Me.chkParallel.UseVisualStyleBackColor = True
//000081:         '
//000082:         'btnStartStop
//000083:         '
//000084:         Me.btnStartStop.Anchor = CType((System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left), System.Windows.Forms.AnchorStyles)
//000085:         Me.btnStartStop.Location = New System.Drawing.Point(12, 418)
//000086:         Me.btnStartStop.Name = "btnStartStop"
//000087:         Me.btnStartStop.Size = New System.Drawing.Size(88, 23)
//000088:         Me.btnStartStop.TabIndex = 25
//000089:         Me.btnStartStop.Text = "Start"
//000090:         Me.btnStartStop.UseVisualStyleBackColor = True
//000091:         '
//000092:         'pbRenderedImage
//000093:         '
//000094:         Me.pbRenderedImage.Anchor = CType((((System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom) _
//000095:                     Or System.Windows.Forms.AnchorStyles.Left) _
//000096:                     Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
//000097:         Me.pbRenderedImage.BackColor = System.Drawing.Color.Black
//000098:         Me.pbRenderedImage.BackgroundImageLayout = System.Windows.Forms.ImageLayout.None
//000099:         Me.pbRenderedImage.BorderStyle = System.Windows.Forms.BorderStyle.Fixed3D
//000100:         Me.pbRenderedImage.Location = New System.Drawing.Point(12, 12)
//000101:         Me.pbRenderedImage.Name = "pbRenderedImage"
//000102:         Me.pbRenderedImage.Size = New System.Drawing.Size(469, 400)
//000103:         Me.pbRenderedImage.SizeMode = System.Windows.Forms.PictureBoxSizeMode.CenterImage
//000104:         Me.pbRenderedImage.TabIndex = 24
//000105:         Me.pbRenderedImage.TabStop = False
//000106:         '
//000107:         'Main
//000108:         '
//000109:         Me.AutoScaleDimensions = New System.Drawing.SizeF(6.0!, 13.0!)
//000110:         Me.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font
//000111:         Me.ClientSize = New System.Drawing.Size(495, 459)
//000112:         Me.Controls.Add(Me.lblNumProcs)
//000113:         Me.Controls.Add(Me.tbNumProcs)
//000114:         Me.Controls.Add(Me.chkShowThreads)
//000115:         Me.Controls.Add(Me.chkParallel)
//000116:         Me.Controls.Add(Me.btnStartStop)
//000117:         Me.Controls.Add(Me.pbRenderedImage)
//000118:         Me.Name = "Main"
//000119:         Me.Text = "Ray Tracer"
//000120:         CType(Me.tbNumProcs, System.ComponentModel.ISupportInitialize).EndInit()
//000121:         CType(Me.pbRenderedImage, System.ComponentModel.ISupportInitialize).EndInit()
//000122:         Me.ResumeLayout(False)
//000123:         Me.PerformLayout()
//000124: 
//000125:     End Sub
//000126:     Private WithEvents lblNumProcs As System.Windows.Forms.Label
//000127:     Private WithEvents tbNumProcs As System.Windows.Forms.TrackBar
//000128:     Friend WithEvents chkShowThreads As System.Windows.Forms.CheckBox
//000129:     Friend WithEvents chkParallel As System.Windows.Forms.CheckBox
//000130:     Private WithEvents btnStartStop As System.Windows.Forms.Button
//000131:     Private WithEvents pbRenderedImage As System.Windows.Forms.PictureBox
//000132: End Class
      IL_0012:  ldloc.0
      IL_0013:  brfalse.s  IL_0021

//000010:                 components.Dispose()
      IL_0015:  ldarg.0
      IL_0016:  ldfld      class [System]System.ComponentModel.IContainer Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::components
      IL_001b:  callvirt   instance void [mscorlib]System.IDisposable::Dispose()
      IL_0020:  nop
//000011:             End If
      IL_0021:  nop
//000012:         Finally
//000013:             MyBase.Dispose(disposing)
//000014:         End Try
//000015:     End Sub
//000016: 
//000017:     'Required by the Windows Form Designer
//000018:     Private components As System.ComponentModel.IContainer
//000019: 
//000020:     'NOTE: The following procedure is required by the Windows Form Designer
//000021:     'It can be modified using the Windows Form Designer.  
//000022:     'Do not modify it using the code editor.
//000023:     <System.Diagnostics.DebuggerStepThrough()> _
//000024:     Private Sub InitializeComponent()
//000025:         Me.lblNumProcs = New System.Windows.Forms.Label()
//000026:         Me.tbNumProcs = New System.Windows.Forms.TrackBar()
//000027:         Me.chkShowThreads = New System.Windows.Forms.CheckBox()
//000028:         Me.chkParallel = New System.Windows.Forms.CheckBox()
//000029:         Me.btnStartStop = New System.Windows.Forms.Button()
//000030:         Me.pbRenderedImage = New System.Windows.Forms.PictureBox()
//000031:         CType(Me.tbNumProcs, System.ComponentModel.ISupportInitialize).BeginInit()
//000032:         CType(Me.pbRenderedImage, System.ComponentModel.ISupportInitialize).BeginInit()
//000033:         Me.SuspendLayout()
//000034:         '
//000035:         'lblNumProcs
//000036:         '
//000037:         Me.lblNumProcs.Anchor = CType((System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
//000038:         Me.lblNumProcs.AutoSize = True
//000039:         Me.lblNumProcs.Enabled = False
//000040:         Me.lblNumProcs.Font = New System.Drawing.Font("Microsoft Sans Serif", 8.25!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
//000041:         Me.lblNumProcs.Location = New System.Drawing.Point(294, 428)
//000042:         Me.lblNumProcs.Name = "lblNumProcs"
//000043:         Me.lblNumProcs.Size = New System.Drawing.Size(14, 13)
//000044:         Me.lblNumProcs.TabIndex = 29
//000045:         Me.lblNumProcs.Text = "1"
//000046:         '
//000047:         'tbNumProcs
//000048:         '
//000049:         Me.tbNumProcs.Anchor = CType((System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
//000050:         Me.tbNumProcs.Enabled = False
//000051:         Me.tbNumProcs.Location = New System.Drawing.Point(303, 418)
//000052:         Me.tbNumProcs.Maximum = 24
//000053:         Me.tbNumProcs.Minimum = 1
//000054:         Me.tbNumProcs.Name = "tbNumProcs"
//000055:         Me.tbNumProcs.Size = New System.Drawing.Size(178, 45)
//000056:         Me.tbNumProcs.TabIndex = 28
//000057:         Me.tbNumProcs.Value = 1
//000058:         '
//000059:         'chkShowThreads
//000060:         '
//000061:         Me.chkShowThreads.Anchor = CType((System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left), System.Windows.Forms.AnchorStyles)
//000062:         Me.chkShowThreads.AutoSize = True
//000063:         Me.chkShowThreads.Enabled = False
//000064:         Me.chkShowThreads.Location = New System.Drawing.Point(173, 423)
//000065:         Me.chkShowThreads.Name = "chkShowThreads"
//000066:         Me.chkShowThreads.Size = New System.Drawing.Size(95, 17)
//000067:         Me.chkShowThreads.TabIndex = 27
//000068:         Me.chkShowThreads.Text = "Show Threads"
//000069:         Me.chkShowThreads.UseVisualStyleBackColor = True
//000070:         '
//000071:         'chkParallel
//000072:         '
//000073:         Me.chkParallel.Anchor = CType((System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left), System.Windows.Forms.AnchorStyles)
//000074:         Me.chkParallel.AutoSize = True
//000075:         Me.chkParallel.Location = New System.Drawing.Point(107, 423)
//000076:         Me.chkParallel.Name = "chkParallel"
//000077:         Me.chkParallel.Size = New System.Drawing.Size(60, 17)
//000078:         Me.chkParallel.TabIndex = 26
//000079:         Me.chkParallel.Text = "Parallel"
//000080:         Me.chkParallel.UseVisualStyleBackColor = True
//000081:         '
//000082:         'btnStartStop
//000083:         '
//000084:         Me.btnStartStop.Anchor = CType((System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left), System.Windows.Forms.AnchorStyles)
//000085:         Me.btnStartStop.Location = New System.Drawing.Point(12, 418)
//000086:         Me.btnStartStop.Name = "btnStartStop"
//000087:         Me.btnStartStop.Size = New System.Drawing.Size(88, 23)
//000088:         Me.btnStartStop.TabIndex = 25
//000089:         Me.btnStartStop.Text = "Start"
//000090:         Me.btnStartStop.UseVisualStyleBackColor = True
//000091:         '
//000092:         'pbRenderedImage
//000093:         '
//000094:         Me.pbRenderedImage.Anchor = CType((((System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom) _
//000095:                     Or System.Windows.Forms.AnchorStyles.Left) _
//000096:                     Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
//000097:         Me.pbRenderedImage.BackColor = System.Drawing.Color.Black
//000098:         Me.pbRenderedImage.BackgroundImageLayout = System.Windows.Forms.ImageLayout.None
//000099:         Me.pbRenderedImage.BorderStyle = System.Windows.Forms.BorderStyle.Fixed3D
//000100:         Me.pbRenderedImage.Location = New System.Drawing.Point(12, 12)
//000101:         Me.pbRenderedImage.Name = "pbRenderedImage"
//000102:         Me.pbRenderedImage.Size = New System.Drawing.Size(469, 400)
//000103:         Me.pbRenderedImage.SizeMode = System.Windows.Forms.PictureBoxSizeMode.CenterImage
//000104:         Me.pbRenderedImage.TabIndex = 24
//000105:         Me.pbRenderedImage.TabStop = False
//000106:         '
//000107:         'Main
//000108:         '
//000109:         Me.AutoScaleDimensions = New System.Drawing.SizeF(6.0!, 13.0!)
//000110:         Me.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font
//000111:         Me.ClientSize = New System.Drawing.Size(495, 459)
//000112:         Me.Controls.Add(Me.lblNumProcs)
//000113:         Me.Controls.Add(Me.tbNumProcs)
//000114:         Me.Controls.Add(Me.chkShowThreads)
//000115:         Me.Controls.Add(Me.chkParallel)
//000116:         Me.Controls.Add(Me.btnStartStop)
//000117:         Me.Controls.Add(Me.pbRenderedImage)
//000118:         Me.Name = "Main"
//000119:         Me.Text = "Ray Tracer"
//000120:         CType(Me.tbNumProcs, System.ComponentModel.ISupportInitialize).EndInit()
//000121:         CType(Me.pbRenderedImage, System.ComponentModel.ISupportInitialize).EndInit()
//000122:         Me.ResumeLayout(False)
//000123:         Me.PerformLayout()
//000124: 
//000125:     End Sub
//000126:     Private WithEvents lblNumProcs As System.Windows.Forms.Label
//000127:     Private WithEvents tbNumProcs As System.Windows.Forms.TrackBar
//000128:     Friend WithEvents chkShowThreads As System.Windows.Forms.CheckBox
//000129:     Friend WithEvents chkParallel As System.Windows.Forms.CheckBox
//000130:     Private WithEvents btnStartStop As System.Windows.Forms.Button
//000131:     Private WithEvents pbRenderedImage As System.Windows.Forms.PictureBox
//000132: End Class
      IL_0022:  leave.s    IL_002e

//000012:         Finally
    }  // end .try
    finally
    {
      IL_0024:  nop
//000013:             MyBase.Dispose(disposing)
      IL_0025:  ldarg.0
      IL_0026:  ldarg.1
      IL_0027:  call       instance void [System.Windows.Forms]System.Windows.Forms.Form::Dispose(bool)
      IL_002c:  nop
//000014:         End Try
//000015:     End Sub
//000016: 
//000017:     'Required by the Windows Form Designer
//000018:     Private components As System.ComponentModel.IContainer
//000019: 
//000020:     'NOTE: The following procedure is required by the Windows Form Designer
//000021:     'It can be modified using the Windows Form Designer.  
//000022:     'Do not modify it using the code editor.
//000023:     <System.Diagnostics.DebuggerStepThrough()> _
//000024:     Private Sub InitializeComponent()
//000025:         Me.lblNumProcs = New System.Windows.Forms.Label()
//000026:         Me.tbNumProcs = New System.Windows.Forms.TrackBar()
//000027:         Me.chkShowThreads = New System.Windows.Forms.CheckBox()
//000028:         Me.chkParallel = New System.Windows.Forms.CheckBox()
//000029:         Me.btnStartStop = New System.Windows.Forms.Button()
//000030:         Me.pbRenderedImage = New System.Windows.Forms.PictureBox()
//000031:         CType(Me.tbNumProcs, System.ComponentModel.ISupportInitialize).BeginInit()
//000032:         CType(Me.pbRenderedImage, System.ComponentModel.ISupportInitialize).BeginInit()
//000033:         Me.SuspendLayout()
//000034:         '
//000035:         'lblNumProcs
//000036:         '
//000037:         Me.lblNumProcs.Anchor = CType((System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
//000038:         Me.lblNumProcs.AutoSize = True
//000039:         Me.lblNumProcs.Enabled = False
//000040:         Me.lblNumProcs.Font = New System.Drawing.Font("Microsoft Sans Serif", 8.25!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
//000041:         Me.lblNumProcs.Location = New System.Drawing.Point(294, 428)
//000042:         Me.lblNumProcs.Name = "lblNumProcs"
//000043:         Me.lblNumProcs.Size = New System.Drawing.Size(14, 13)
//000044:         Me.lblNumProcs.TabIndex = 29
//000045:         Me.lblNumProcs.Text = "1"
//000046:         '
//000047:         'tbNumProcs
//000048:         '
//000049:         Me.tbNumProcs.Anchor = CType((System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
//000050:         Me.tbNumProcs.Enabled = False
//000051:         Me.tbNumProcs.Location = New System.Drawing.Point(303, 418)
//000052:         Me.tbNumProcs.Maximum = 24
//000053:         Me.tbNumProcs.Minimum = 1
//000054:         Me.tbNumProcs.Name = "tbNumProcs"
//000055:         Me.tbNumProcs.Size = New System.Drawing.Size(178, 45)
//000056:         Me.tbNumProcs.TabIndex = 28
//000057:         Me.tbNumProcs.Value = 1
//000058:         '
//000059:         'chkShowThreads
//000060:         '
//000061:         Me.chkShowThreads.Anchor = CType((System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left), System.Windows.Forms.AnchorStyles)
//000062:         Me.chkShowThreads.AutoSize = True
//000063:         Me.chkShowThreads.Enabled = False
//000064:         Me.chkShowThreads.Location = New System.Drawing.Point(173, 423)
//000065:         Me.chkShowThreads.Name = "chkShowThreads"
//000066:         Me.chkShowThreads.Size = New System.Drawing.Size(95, 17)
//000067:         Me.chkShowThreads.TabIndex = 27
//000068:         Me.chkShowThreads.Text = "Show Threads"
//000069:         Me.chkShowThreads.UseVisualStyleBackColor = True
//000070:         '
//000071:         'chkParallel
//000072:         '
//000073:         Me.chkParallel.Anchor = CType((System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left), System.Windows.Forms.AnchorStyles)
//000074:         Me.chkParallel.AutoSize = True
//000075:         Me.chkParallel.Location = New System.Drawing.Point(107, 423)
//000076:         Me.chkParallel.Name = "chkParallel"
//000077:         Me.chkParallel.Size = New System.Drawing.Size(60, 17)
//000078:         Me.chkParallel.TabIndex = 26
//000079:         Me.chkParallel.Text = "Parallel"
//000080:         Me.chkParallel.UseVisualStyleBackColor = True
//000081:         '
//000082:         'btnStartStop
//000083:         '
//000084:         Me.btnStartStop.Anchor = CType((System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left), System.Windows.Forms.AnchorStyles)
//000085:         Me.btnStartStop.Location = New System.Drawing.Point(12, 418)
//000086:         Me.btnStartStop.Name = "btnStartStop"
//000087:         Me.btnStartStop.Size = New System.Drawing.Size(88, 23)
//000088:         Me.btnStartStop.TabIndex = 25
//000089:         Me.btnStartStop.Text = "Start"
//000090:         Me.btnStartStop.UseVisualStyleBackColor = True
//000091:         '
//000092:         'pbRenderedImage
//000093:         '
//000094:         Me.pbRenderedImage.Anchor = CType((((System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom) _
//000095:                     Or System.Windows.Forms.AnchorStyles.Left) _
//000096:                     Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
//000097:         Me.pbRenderedImage.BackColor = System.Drawing.Color.Black
//000098:         Me.pbRenderedImage.BackgroundImageLayout = System.Windows.Forms.ImageLayout.None
//000099:         Me.pbRenderedImage.BorderStyle = System.Windows.Forms.BorderStyle.Fixed3D
//000100:         Me.pbRenderedImage.Location = New System.Drawing.Point(12, 12)
//000101:         Me.pbRenderedImage.Name = "pbRenderedImage"
//000102:         Me.pbRenderedImage.Size = New System.Drawing.Size(469, 400)
//000103:         Me.pbRenderedImage.SizeMode = System.Windows.Forms.PictureBoxSizeMode.CenterImage
//000104:         Me.pbRenderedImage.TabIndex = 24
//000105:         Me.pbRenderedImage.TabStop = False
//000106:         '
//000107:         'Main
//000108:         '
//000109:         Me.AutoScaleDimensions = New System.Drawing.SizeF(6.0!, 13.0!)
//000110:         Me.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font
//000111:         Me.ClientSize = New System.Drawing.Size(495, 459)
//000112:         Me.Controls.Add(Me.lblNumProcs)
//000113:         Me.Controls.Add(Me.tbNumProcs)
//000114:         Me.Controls.Add(Me.chkShowThreads)
//000115:         Me.Controls.Add(Me.chkParallel)
//000116:         Me.Controls.Add(Me.btnStartStop)
//000117:         Me.Controls.Add(Me.pbRenderedImage)
//000118:         Me.Name = "Main"
//000119:         Me.Text = "Ray Tracer"
//000120:         CType(Me.tbNumProcs, System.ComponentModel.ISupportInitialize).EndInit()
//000121:         CType(Me.pbRenderedImage, System.ComponentModel.ISupportInitialize).EndInit()
//000122:         Me.ResumeLayout(False)
//000123:         Me.PerformLayout()
//000124: 
//000125:     End Sub
//000126:     Private WithEvents lblNumProcs As System.Windows.Forms.Label
//000127:     Private WithEvents tbNumProcs As System.Windows.Forms.TrackBar
//000128:     Friend WithEvents chkShowThreads As System.Windows.Forms.CheckBox
//000129:     Friend WithEvents chkParallel As System.Windows.Forms.CheckBox
//000130:     Private WithEvents btnStartStop As System.Windows.Forms.Button
//000131:     Private WithEvents pbRenderedImage As System.Windows.Forms.PictureBox
//000132: End Class
      IL_002d:  endfinally
//000014:         End Try
    }  // end handler
    IL_002e:  nop
//000015:     End Sub
    IL_002f:  nop
    IL_0030:  ret
  } // end of method Main::Dispose

  .method private instance void  InitializeComponent() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerStepThroughAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       1262 (0x4ee)
    .maxstack  6
    .locals init ([0] valuetype [System.Drawing]System.Drawing.Point VB$t_struct$N0,
             [1] valuetype [System.Drawing]System.Drawing.Point VB$t_struct$S1,
             [2] valuetype [System.Drawing]System.Drawing.Size VB$t_struct$N2,
             [3] valuetype [System.Drawing]System.Drawing.Size VB$t_struct$S3,
             [4] valuetype [System.Drawing]System.Drawing.Color VB$t_struct$N4,
             [5] valuetype [System.Drawing]System.Drawing.SizeF VB$t_struct$N5,
             [6] valuetype [System.Drawing]System.Drawing.SizeF VB$t_struct$S6)
//000016: 
//000017:     'Required by the Windows Form Designer
//000018:     Private components As System.ComponentModel.IContainer
//000019: 
//000020:     'NOTE: The following procedure is required by the Windows Form Designer
//000021:     'It can be modified using the Windows Form Designer.  
//000022:     'Do not modify it using the code editor.
//000023:     <System.Diagnostics.DebuggerStepThrough()> _
//000024:     Private Sub InitializeComponent()
    IL_0000:  nop
//000025:         Me.lblNumProcs = New System.Windows.Forms.Label()
    IL_0001:  ldarg.0
    IL_0002:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.Label::.ctor()
    IL_0007:  callvirt   instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::set_lblNumProcs(class [System.Windows.Forms]System.Windows.Forms.Label)
    IL_000c:  nop
//000026:         Me.tbNumProcs = New System.Windows.Forms.TrackBar()
    IL_000d:  ldarg.0
    IL_000e:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.TrackBar::.ctor()
    IL_0013:  callvirt   instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::set_tbNumProcs(class [System.Windows.Forms]System.Windows.Forms.TrackBar)
    IL_0018:  nop
//000027:         Me.chkShowThreads = New System.Windows.Forms.CheckBox()
    IL_0019:  ldarg.0
    IL_001a:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.CheckBox::.ctor()
    IL_001f:  callvirt   instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::set_chkShowThreads(class [System.Windows.Forms]System.Windows.Forms.CheckBox)
    IL_0024:  nop
//000028:         Me.chkParallel = New System.Windows.Forms.CheckBox()
    IL_0025:  ldarg.0
    IL_0026:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.CheckBox::.ctor()
    IL_002b:  callvirt   instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::set_chkParallel(class [System.Windows.Forms]System.Windows.Forms.CheckBox)
    IL_0030:  nop
//000029:         Me.btnStartStop = New System.Windows.Forms.Button()
    IL_0031:  ldarg.0
    IL_0032:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.Button::.ctor()
    IL_0037:  callvirt   instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::set_btnStartStop(class [System.Windows.Forms]System.Windows.Forms.Button)
    IL_003c:  nop
//000030:         Me.pbRenderedImage = New System.Windows.Forms.PictureBox()
    IL_003d:  ldarg.0
    IL_003e:  newobj     instance void [System.Windows.Forms]System.Windows.Forms.PictureBox::.ctor()
    IL_0043:  callvirt   instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::set_pbRenderedImage(class [System.Windows.Forms]System.Windows.Forms.PictureBox)
    IL_0048:  nop
//000031:         CType(Me.tbNumProcs, System.ComponentModel.ISupportInitialize).BeginInit()
    IL_0049:  ldarg.0
    IL_004a:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.TrackBar Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_tbNumProcs()
    IL_004f:  callvirt   instance void [System]System.ComponentModel.ISupportInitialize::BeginInit()
    IL_0054:  nop
//000032:         CType(Me.pbRenderedImage, System.ComponentModel.ISupportInitialize).BeginInit()
    IL_0055:  ldarg.0
    IL_0056:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_pbRenderedImage()
    IL_005b:  callvirt   instance void [System]System.ComponentModel.ISupportInitialize::BeginInit()
    IL_0060:  nop
//000033:         Me.SuspendLayout()
    IL_0061:  ldarg.0
    IL_0062:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::SuspendLayout()
    IL_0067:  nop
//000034:         '
//000035:         'lblNumProcs
//000036:         '
//000037:         Me.lblNumProcs.Anchor = CType((System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
    IL_0068:  ldarg.0
    IL_0069:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Label Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_lblNumProcs()
    IL_006e:  ldc.i4.s   10
    IL_0070:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Anchor(valuetype [System.Windows.Forms]System.Windows.Forms.AnchorStyles)
    IL_0075:  nop
//000038:         Me.lblNumProcs.AutoSize = True
    IL_0076:  ldarg.0
    IL_0077:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Label Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_lblNumProcs()
    IL_007c:  ldc.i4.1
    IL_007d:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Label::set_AutoSize(bool)
    IL_0082:  nop
//000039:         Me.lblNumProcs.Enabled = False
    IL_0083:  ldarg.0
    IL_0084:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Label Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_lblNumProcs()
    IL_0089:  ldc.i4.0
    IL_008a:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Enabled(bool)
    IL_008f:  nop
//000040:         Me.lblNumProcs.Font = New System.Drawing.Font("Microsoft Sans Serif", 8.25!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
    IL_0090:  ldarg.0
    IL_0091:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Label Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_lblNumProcs()
    IL_0096:  ldstr      "Microsoft Sans Serif"
    IL_009b:  ldc.r4     8.25
    IL_00a0:  ldc.i4.1
    IL_00a1:  ldc.i4.3
    IL_00a2:  ldc.i4.0
    IL_00a3:  newobj     instance void [System.Drawing]System.Drawing.Font::.ctor(string,
                                                                                  float32,
                                                                                  valuetype [System.Drawing]System.Drawing.FontStyle,
                                                                                  valuetype [System.Drawing]System.Drawing.GraphicsUnit,
                                                                                  uint8)
    IL_00a8:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Font(class [System.Drawing]System.Drawing.Font)
    IL_00ad:  nop
//000041:         Me.lblNumProcs.Location = New System.Drawing.Point(294, 428)
    IL_00ae:  ldarg.0
    IL_00af:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Label Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_lblNumProcs()
    IL_00b4:  ldloca.s   VB$t_struct$S1
    IL_00b6:  ldc.i4     0x126
    IL_00bb:  ldc.i4     0x1ac
    IL_00c0:  call       instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_00c5:  nop
    IL_00c6:  ldloc.1
    IL_00c7:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_00cc:  nop
//000042:         Me.lblNumProcs.Name = "lblNumProcs"
    IL_00cd:  ldarg.0
    IL_00ce:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Label Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_lblNumProcs()
    IL_00d3:  ldstr      "lblNumProcs"
    IL_00d8:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_00dd:  nop
//000043:         Me.lblNumProcs.Size = New System.Drawing.Size(14, 13)
    IL_00de:  ldarg.0
    IL_00df:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Label Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_lblNumProcs()
    IL_00e4:  ldloca.s   VB$t_struct$S3
    IL_00e6:  ldc.i4.s   14
    IL_00e8:  ldc.i4.s   13
    IL_00ea:  call       instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_00ef:  nop
    IL_00f0:  ldloc.3
    IL_00f1:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_00f6:  nop
//000044:         Me.lblNumProcs.TabIndex = 29
    IL_00f7:  ldarg.0
    IL_00f8:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Label Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_lblNumProcs()
    IL_00fd:  ldc.i4.s   29
    IL_00ff:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_TabIndex(int32)
    IL_0104:  nop
//000045:         Me.lblNumProcs.Text = "1"
    IL_0105:  ldarg.0
    IL_0106:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Label Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_lblNumProcs()
    IL_010b:  ldstr      "1"
    IL_0110:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Label::set_Text(string)
    IL_0115:  nop
//000046:         '
//000047:         'tbNumProcs
//000048:         '
//000049:         Me.tbNumProcs.Anchor = CType((System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
    IL_0116:  ldarg.0
    IL_0117:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.TrackBar Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_tbNumProcs()
    IL_011c:  ldc.i4.s   10
    IL_011e:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Anchor(valuetype [System.Windows.Forms]System.Windows.Forms.AnchorStyles)
    IL_0123:  nop
//000050:         Me.tbNumProcs.Enabled = False
    IL_0124:  ldarg.0
    IL_0125:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.TrackBar Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_tbNumProcs()
    IL_012a:  ldc.i4.0
    IL_012b:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Enabled(bool)
    IL_0130:  nop
//000051:         Me.tbNumProcs.Location = New System.Drawing.Point(303, 418)
    IL_0131:  ldarg.0
    IL_0132:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.TrackBar Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_tbNumProcs()
    IL_0137:  ldloca.s   VB$t_struct$S1
    IL_0139:  ldc.i4     0x12f
    IL_013e:  ldc.i4     0x1a2
    IL_0143:  call       instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_0148:  nop
    IL_0149:  ldloc.1
    IL_014a:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_014f:  nop
//000052:         Me.tbNumProcs.Maximum = 24
    IL_0150:  ldarg.0
    IL_0151:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.TrackBar Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_tbNumProcs()
    IL_0156:  ldc.i4.s   24
    IL_0158:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.TrackBar::set_Maximum(int32)
    IL_015d:  nop
//000053:         Me.tbNumProcs.Minimum = 1
    IL_015e:  ldarg.0
    IL_015f:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.TrackBar Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_tbNumProcs()
    IL_0164:  ldc.i4.1
    IL_0165:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.TrackBar::set_Minimum(int32)
    IL_016a:  nop
//000054:         Me.tbNumProcs.Name = "tbNumProcs"
    IL_016b:  ldarg.0
    IL_016c:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.TrackBar Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_tbNumProcs()
    IL_0171:  ldstr      "tbNumProcs"
    IL_0176:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_017b:  nop
//000055:         Me.tbNumProcs.Size = New System.Drawing.Size(178, 45)
    IL_017c:  ldarg.0
    IL_017d:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.TrackBar Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_tbNumProcs()
    IL_0182:  ldloca.s   VB$t_struct$S3
    IL_0184:  ldc.i4     0xb2
    IL_0189:  ldc.i4.s   45
    IL_018b:  call       instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_0190:  nop
    IL_0191:  ldloc.3
    IL_0192:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_0197:  nop
//000056:         Me.tbNumProcs.TabIndex = 28
    IL_0198:  ldarg.0
    IL_0199:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.TrackBar Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_tbNumProcs()
    IL_019e:  ldc.i4.s   28
    IL_01a0:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_TabIndex(int32)
    IL_01a5:  nop
//000057:         Me.tbNumProcs.Value = 1
    IL_01a6:  ldarg.0
    IL_01a7:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.TrackBar Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_tbNumProcs()
    IL_01ac:  ldc.i4.1
    IL_01ad:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.TrackBar::set_Value(int32)
    IL_01b2:  nop
//000058:         '
//000059:         'chkShowThreads
//000060:         '
//000061:         Me.chkShowThreads.Anchor = CType((System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left), System.Windows.Forms.AnchorStyles)
    IL_01b3:  ldarg.0
    IL_01b4:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.CheckBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_chkShowThreads()
    IL_01b9:  ldc.i4.6
    IL_01ba:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Anchor(valuetype [System.Windows.Forms]System.Windows.Forms.AnchorStyles)
    IL_01bf:  nop
//000062:         Me.chkShowThreads.AutoSize = True
    IL_01c0:  ldarg.0
    IL_01c1:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.CheckBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_chkShowThreads()
    IL_01c6:  ldc.i4.1
    IL_01c7:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ButtonBase::set_AutoSize(bool)
    IL_01cc:  nop
//000063:         Me.chkShowThreads.Enabled = False
    IL_01cd:  ldarg.0
    IL_01ce:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.CheckBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_chkShowThreads()
    IL_01d3:  ldc.i4.0
    IL_01d4:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Enabled(bool)
    IL_01d9:  nop
//000064:         Me.chkShowThreads.Location = New System.Drawing.Point(173, 423)
    IL_01da:  ldarg.0
    IL_01db:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.CheckBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_chkShowThreads()
    IL_01e0:  ldloca.s   VB$t_struct$S1
    IL_01e2:  ldc.i4     0xad
    IL_01e7:  ldc.i4     0x1a7
    IL_01ec:  call       instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_01f1:  nop
    IL_01f2:  ldloc.1
    IL_01f3:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_01f8:  nop
//000065:         Me.chkShowThreads.Name = "chkShowThreads"
    IL_01f9:  ldarg.0
    IL_01fa:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.CheckBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_chkShowThreads()
    IL_01ff:  ldstr      "chkShowThreads"
    IL_0204:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_0209:  nop
//000066:         Me.chkShowThreads.Size = New System.Drawing.Size(95, 17)
    IL_020a:  ldarg.0
    IL_020b:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.CheckBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_chkShowThreads()
    IL_0210:  ldloca.s   VB$t_struct$S3
    IL_0212:  ldc.i4.s   95
    IL_0214:  ldc.i4.s   17
    IL_0216:  call       instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_021b:  nop
    IL_021c:  ldloc.3
    IL_021d:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_0222:  nop
//000067:         Me.chkShowThreads.TabIndex = 27
    IL_0223:  ldarg.0
    IL_0224:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.CheckBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_chkShowThreads()
    IL_0229:  ldc.i4.s   27
    IL_022b:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_TabIndex(int32)
    IL_0230:  nop
//000068:         Me.chkShowThreads.Text = "Show Threads"
    IL_0231:  ldarg.0
    IL_0232:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.CheckBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_chkShowThreads()
    IL_0237:  ldstr      "Show Threads"
    IL_023c:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ButtonBase::set_Text(string)
    IL_0241:  nop
//000069:         Me.chkShowThreads.UseVisualStyleBackColor = True
    IL_0242:  ldarg.0
    IL_0243:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.CheckBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_chkShowThreads()
    IL_0248:  ldc.i4.1
    IL_0249:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ButtonBase::set_UseVisualStyleBackColor(bool)
    IL_024e:  nop
//000070:         '
//000071:         'chkParallel
//000072:         '
//000073:         Me.chkParallel.Anchor = CType((System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left), System.Windows.Forms.AnchorStyles)
    IL_024f:  ldarg.0
    IL_0250:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.CheckBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_chkParallel()
    IL_0255:  ldc.i4.6
    IL_0256:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Anchor(valuetype [System.Windows.Forms]System.Windows.Forms.AnchorStyles)
    IL_025b:  nop
//000074:         Me.chkParallel.AutoSize = True
    IL_025c:  ldarg.0
    IL_025d:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.CheckBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_chkParallel()
    IL_0262:  ldc.i4.1
    IL_0263:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ButtonBase::set_AutoSize(bool)
    IL_0268:  nop
//000075:         Me.chkParallel.Location = New System.Drawing.Point(107, 423)
    IL_0269:  ldarg.0
    IL_026a:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.CheckBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_chkParallel()
    IL_026f:  ldloca.s   VB$t_struct$S1
    IL_0271:  ldc.i4.s   107
    IL_0273:  ldc.i4     0x1a7
    IL_0278:  call       instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_027d:  nop
    IL_027e:  ldloc.1
    IL_027f:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_0284:  nop
//000076:         Me.chkParallel.Name = "chkParallel"
    IL_0285:  ldarg.0
    IL_0286:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.CheckBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_chkParallel()
    IL_028b:  ldstr      "chkParallel"
    IL_0290:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_0295:  nop
//000077:         Me.chkParallel.Size = New System.Drawing.Size(60, 17)
    IL_0296:  ldarg.0
    IL_0297:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.CheckBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_chkParallel()
    IL_029c:  ldloca.s   VB$t_struct$S3
    IL_029e:  ldc.i4.s   60
    IL_02a0:  ldc.i4.s   17
    IL_02a2:  call       instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_02a7:  nop
    IL_02a8:  ldloc.3
    IL_02a9:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_02ae:  nop
//000078:         Me.chkParallel.TabIndex = 26
    IL_02af:  ldarg.0
    IL_02b0:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.CheckBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_chkParallel()
    IL_02b5:  ldc.i4.s   26
    IL_02b7:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_TabIndex(int32)
    IL_02bc:  nop
//000079:         Me.chkParallel.Text = "Parallel"
    IL_02bd:  ldarg.0
    IL_02be:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.CheckBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_chkParallel()
    IL_02c3:  ldstr      "Parallel"
    IL_02c8:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ButtonBase::set_Text(string)
    IL_02cd:  nop
//000080:         Me.chkParallel.UseVisualStyleBackColor = True
    IL_02ce:  ldarg.0
    IL_02cf:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.CheckBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_chkParallel()
    IL_02d4:  ldc.i4.1
    IL_02d5:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ButtonBase::set_UseVisualStyleBackColor(bool)
    IL_02da:  nop
//000081:         '
//000082:         'btnStartStop
//000083:         '
//000084:         Me.btnStartStop.Anchor = CType((System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left), System.Windows.Forms.AnchorStyles)
    IL_02db:  ldarg.0
    IL_02dc:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Button Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_btnStartStop()
    IL_02e1:  ldc.i4.6
    IL_02e2:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Anchor(valuetype [System.Windows.Forms]System.Windows.Forms.AnchorStyles)
    IL_02e7:  nop
//000085:         Me.btnStartStop.Location = New System.Drawing.Point(12, 418)
    IL_02e8:  ldarg.0
    IL_02e9:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Button Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_btnStartStop()
    IL_02ee:  ldloca.s   VB$t_struct$S1
    IL_02f0:  ldc.i4.s   12
    IL_02f2:  ldc.i4     0x1a2
    IL_02f7:  call       instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_02fc:  nop
    IL_02fd:  ldloc.1
    IL_02fe:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_0303:  nop
//000086:         Me.btnStartStop.Name = "btnStartStop"
    IL_0304:  ldarg.0
    IL_0305:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Button Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_btnStartStop()
    IL_030a:  ldstr      "btnStartStop"
    IL_030f:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_0314:  nop
//000087:         Me.btnStartStop.Size = New System.Drawing.Size(88, 23)
    IL_0315:  ldarg.0
    IL_0316:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Button Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_btnStartStop()
    IL_031b:  ldloca.s   VB$t_struct$S3
    IL_031d:  ldc.i4.s   88
    IL_031f:  ldc.i4.s   23
    IL_0321:  call       instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_0326:  nop
    IL_0327:  ldloc.3
    IL_0328:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_032d:  nop
//000088:         Me.btnStartStop.TabIndex = 25
    IL_032e:  ldarg.0
    IL_032f:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Button Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_btnStartStop()
    IL_0334:  ldc.i4.s   25
    IL_0336:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_TabIndex(int32)
    IL_033b:  nop
//000089:         Me.btnStartStop.Text = "Start"
    IL_033c:  ldarg.0
    IL_033d:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Button Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_btnStartStop()
    IL_0342:  ldstr      "Start"
    IL_0347:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ButtonBase::set_Text(string)
    IL_034c:  nop
//000090:         Me.btnStartStop.UseVisualStyleBackColor = True
    IL_034d:  ldarg.0
    IL_034e:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Button Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_btnStartStop()
    IL_0353:  ldc.i4.1
    IL_0354:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ButtonBase::set_UseVisualStyleBackColor(bool)
    IL_0359:  nop
//000091:         '
//000092:         'pbRenderedImage
//000093:         '
//000094:         Me.pbRenderedImage.Anchor = CType((((System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom) _
    IL_035a:  ldarg.0
    IL_035b:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_pbRenderedImage()
    IL_0360:  ldc.i4.s   15
    IL_0362:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Anchor(valuetype [System.Windows.Forms]System.Windows.Forms.AnchorStyles)
    IL_0367:  nop
//000095:                     Or System.Windows.Forms.AnchorStyles.Left) _
//000096:                     Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
//000097:         Me.pbRenderedImage.BackColor = System.Drawing.Color.Black
    IL_0368:  ldarg.0
    IL_0369:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_pbRenderedImage()
    IL_036e:  call       valuetype [System.Drawing]System.Drawing.Color [System.Drawing]System.Drawing.Color::get_Black()
    IL_0373:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_BackColor(valuetype [System.Drawing]System.Drawing.Color)
    IL_0378:  nop
//000098:         Me.pbRenderedImage.BackgroundImageLayout = System.Windows.Forms.ImageLayout.None
    IL_0379:  ldarg.0
    IL_037a:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_pbRenderedImage()
    IL_037f:  ldc.i4.0
    IL_0380:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_BackgroundImageLayout(valuetype [System.Windows.Forms]System.Windows.Forms.ImageLayout)
    IL_0385:  nop
//000099:         Me.pbRenderedImage.BorderStyle = System.Windows.Forms.BorderStyle.Fixed3D
    IL_0386:  ldarg.0
    IL_0387:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_pbRenderedImage()
    IL_038c:  ldc.i4.2
    IL_038d:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.PictureBox::set_BorderStyle(valuetype [System.Windows.Forms]System.Windows.Forms.BorderStyle)
    IL_0392:  nop
//000100:         Me.pbRenderedImage.Location = New System.Drawing.Point(12, 12)
    IL_0393:  ldarg.0
    IL_0394:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_pbRenderedImage()
    IL_0399:  ldloca.s   VB$t_struct$S1
    IL_039b:  ldc.i4.s   12
    IL_039d:  ldc.i4.s   12
    IL_039f:  call       instance void [System.Drawing]System.Drawing.Point::.ctor(int32,
                                                                                   int32)
    IL_03a4:  nop
    IL_03a5:  ldloc.1
    IL_03a6:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Location(valuetype [System.Drawing]System.Drawing.Point)
    IL_03ab:  nop
//000101:         Me.pbRenderedImage.Name = "pbRenderedImage"
    IL_03ac:  ldarg.0
    IL_03ad:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_pbRenderedImage()
    IL_03b2:  ldstr      "pbRenderedImage"
    IL_03b7:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_03bc:  nop
//000102:         Me.pbRenderedImage.Size = New System.Drawing.Size(469, 400)
    IL_03bd:  ldarg.0
    IL_03be:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_pbRenderedImage()
    IL_03c3:  ldloca.s   VB$t_struct$S3
    IL_03c5:  ldc.i4     0x1d5
    IL_03ca:  ldc.i4     0x190
    IL_03cf:  call       instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_03d4:  nop
    IL_03d5:  ldloc.3
    IL_03d6:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Size(valuetype [System.Drawing]System.Drawing.Size)
    IL_03db:  nop
//000103:         Me.pbRenderedImage.SizeMode = System.Windows.Forms.PictureBoxSizeMode.CenterImage
    IL_03dc:  ldarg.0
    IL_03dd:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_pbRenderedImage()
    IL_03e2:  ldc.i4.3
    IL_03e3:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.PictureBox::set_SizeMode(valuetype [System.Windows.Forms]System.Windows.Forms.PictureBoxSizeMode)
    IL_03e8:  nop
//000104:         Me.pbRenderedImage.TabIndex = 24
    IL_03e9:  ldarg.0
    IL_03ea:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_pbRenderedImage()
    IL_03ef:  ldc.i4.s   24
    IL_03f1:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.PictureBox::set_TabIndex(int32)
    IL_03f6:  nop
//000105:         Me.pbRenderedImage.TabStop = False
    IL_03f7:  ldarg.0
    IL_03f8:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_pbRenderedImage()
    IL_03fd:  ldc.i4.0
    IL_03fe:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.PictureBox::set_TabStop(bool)
    IL_0403:  nop
//000106:         '
//000107:         'Main
//000108:         '
//000109:         Me.AutoScaleDimensions = New System.Drawing.SizeF(6.0!, 13.0!)
    IL_0404:  ldarg.0
    IL_0405:  ldloca.s   VB$t_struct$S6
    IL_0407:  ldc.r4     6.
    IL_040c:  ldc.r4     13.
    IL_0411:  call       instance void [System.Drawing]System.Drawing.SizeF::.ctor(float32,
                                                                                   float32)
    IL_0416:  nop
    IL_0417:  ldloc.s    VB$t_struct$S6
    IL_0419:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ContainerControl::set_AutoScaleDimensions(valuetype [System.Drawing]System.Drawing.SizeF)
    IL_041e:  nop
//000110:         Me.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font
    IL_041f:  ldarg.0
    IL_0420:  ldc.i4.1
    IL_0421:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ContainerControl::set_AutoScaleMode(valuetype [System.Windows.Forms]System.Windows.Forms.AutoScaleMode)
    IL_0426:  nop
//000111:         Me.ClientSize = New System.Drawing.Size(495, 459)
    IL_0427:  ldarg.0
    IL_0428:  ldloca.s   VB$t_struct$S3
    IL_042a:  ldc.i4     0x1ef
    IL_042f:  ldc.i4     0x1cb
    IL_0434:  call       instance void [System.Drawing]System.Drawing.Size::.ctor(int32,
                                                                                  int32)
    IL_0439:  nop
    IL_043a:  ldloc.3
    IL_043b:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Form::set_ClientSize(valuetype [System.Drawing]System.Drawing.Size)
    IL_0440:  nop
//000112:         Me.Controls.Add(Me.lblNumProcs)
    IL_0441:  ldarg.0
    IL_0442:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_0447:  ldarg.0
    IL_0448:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Label Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_lblNumProcs()
    IL_044d:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_0452:  nop
//000113:         Me.Controls.Add(Me.tbNumProcs)
    IL_0453:  ldarg.0
    IL_0454:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_0459:  ldarg.0
    IL_045a:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.TrackBar Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_tbNumProcs()
    IL_045f:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_0464:  nop
//000114:         Me.Controls.Add(Me.chkShowThreads)
    IL_0465:  ldarg.0
    IL_0466:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_046b:  ldarg.0
    IL_046c:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.CheckBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_chkShowThreads()
    IL_0471:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_0476:  nop
//000115:         Me.Controls.Add(Me.chkParallel)
    IL_0477:  ldarg.0
    IL_0478:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_047d:  ldarg.0
    IL_047e:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.CheckBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_chkParallel()
    IL_0483:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_0488:  nop
//000116:         Me.Controls.Add(Me.btnStartStop)
    IL_0489:  ldarg.0
    IL_048a:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_048f:  ldarg.0
    IL_0490:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Button Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_btnStartStop()
    IL_0495:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_049a:  nop
//000117:         Me.Controls.Add(Me.pbRenderedImage)
    IL_049b:  ldarg.0
    IL_049c:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection [System.Windows.Forms]System.Windows.Forms.Control::get_Controls()
    IL_04a1:  ldarg.0
    IL_04a2:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_pbRenderedImage()
    IL_04a7:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control/ControlCollection::Add(class [System.Windows.Forms]System.Windows.Forms.Control)
    IL_04ac:  nop
//000118:         Me.Name = "Main"
    IL_04ad:  ldarg.0
    IL_04ae:  ldstr      "Main"
    IL_04b3:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Name(string)
    IL_04b8:  nop
//000119:         Me.Text = "Ray Tracer"
    IL_04b9:  ldarg.0
    IL_04ba:  ldstr      "Ray Tracer"
    IL_04bf:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Form::set_Text(string)
    IL_04c4:  nop
//000120:         CType(Me.tbNumProcs, System.ComponentModel.ISupportInitialize).EndInit()
    IL_04c5:  ldarg.0
    IL_04c6:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.TrackBar Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_tbNumProcs()
    IL_04cb:  callvirt   instance void [System]System.ComponentModel.ISupportInitialize::EndInit()
    IL_04d0:  nop
//000121:         CType(Me.pbRenderedImage, System.ComponentModel.ISupportInitialize).EndInit()
    IL_04d1:  ldarg.0
    IL_04d2:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_pbRenderedImage()
    IL_04d7:  callvirt   instance void [System]System.ComponentModel.ISupportInitialize::EndInit()
    IL_04dc:  nop
//000122:         Me.ResumeLayout(False)
    IL_04dd:  ldarg.0
    IL_04de:  ldc.i4.0
    IL_04df:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::ResumeLayout(bool)
    IL_04e4:  nop
//000123:         Me.PerformLayout()
    IL_04e5:  ldarg.0
    IL_04e6:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::PerformLayout()
    IL_04eb:  nop
//000124: 
//000125:     End Sub
    IL_04ec:  nop
    IL_04ed:  ret
  } // end of method Main::InitializeComponent

  .method private newslot specialname strict virtual 
          instance class [System.Windows.Forms]System.Windows.Forms.Label 
          get_lblNumProcs() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       11 (0xb)
    .maxstack  1
    .locals init (class [System.Windows.Forms]System.Windows.Forms.Label V_0)
    IL_0000:  ldarg.0
    IL_0001:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Label Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::_lblNumProcs
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method Main::get_lblNumProcs

  .method private newslot specialname strict virtual 
          instance void  set_lblNumProcs(class [System.Windows.Forms]System.Windows.Forms.Label WithEventsValue) cil managed synchronized
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       9 (0x9)
    .maxstack  8
    IL_0000:  ldarg.0
    IL_0001:  ldarg.1
    IL_0002:  stfld      class [System.Windows.Forms]System.Windows.Forms.Label Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::_lblNumProcs
    IL_0007:  nop
    IL_0008:  ret
  } // end of method Main::set_lblNumProcs

  .method private newslot specialname strict virtual 
          instance class [System.Windows.Forms]System.Windows.Forms.TrackBar 
          get_tbNumProcs() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       11 (0xb)
    .maxstack  1
    .locals init (class [System.Windows.Forms]System.Windows.Forms.TrackBar V_0)
    IL_0000:  ldarg.0
    IL_0001:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TrackBar Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::_tbNumProcs
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method Main::get_tbNumProcs

  .method private newslot specialname strict virtual 
          instance void  set_tbNumProcs(class [System.Windows.Forms]System.Windows.Forms.TrackBar WithEventsValue) cil managed synchronized
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       83 (0x53)
    .maxstack  2
    .locals init (class [mscorlib]System.EventHandler V_0,
             bool V_1)
    IL_0000:  ldarg.0
    IL_0001:  dup
    IL_0002:  ldvirtftn  instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::tbNumProcs_ValueChanged(object,
                                                                                                                                    class [mscorlib]System.EventArgs)
    IL_0008:  newobj     instance void [mscorlib]System.EventHandler::.ctor(object,
                                                                            native int)
    IL_000d:  stloc.0
    IL_000e:  ldarg.0
    IL_000f:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TrackBar Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::_tbNumProcs
    IL_0014:  ldnull
    IL_0015:  ceq
    IL_0017:  ldc.i4.0
    IL_0018:  ceq
    IL_001a:  stloc.1
    IL_001b:  ldloc.1
    IL_001c:  brfalse.s  IL_002b

    IL_001e:  ldarg.0
    IL_001f:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TrackBar Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::_tbNumProcs
    IL_0024:  ldloc.0
    IL_0025:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.TrackBar::remove_ValueChanged(class [mscorlib]System.EventHandler)
    IL_002a:  nop
    IL_002b:  nop
    IL_002c:  ldarg.0
    IL_002d:  ldarg.1
    IL_002e:  stfld      class [System.Windows.Forms]System.Windows.Forms.TrackBar Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::_tbNumProcs
    IL_0033:  ldarg.0
    IL_0034:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TrackBar Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::_tbNumProcs
    IL_0039:  ldnull
    IL_003a:  ceq
    IL_003c:  ldc.i4.0
    IL_003d:  ceq
    IL_003f:  stloc.1
    IL_0040:  ldloc.1
    IL_0041:  brfalse.s  IL_0050

    IL_0043:  ldarg.0
    IL_0044:  ldfld      class [System.Windows.Forms]System.Windows.Forms.TrackBar Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::_tbNumProcs
    IL_0049:  ldloc.0
    IL_004a:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.TrackBar::add_ValueChanged(class [mscorlib]System.EventHandler)
    IL_004f:  nop
    IL_0050:  nop
    IL_0051:  nop
    IL_0052:  ret
  } // end of method Main::set_tbNumProcs

  .method assembly newslot specialname strict virtual 
          instance class [System.Windows.Forms]System.Windows.Forms.CheckBox 
          get_chkShowThreads() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       11 (0xb)
    .maxstack  1
    .locals init (class [System.Windows.Forms]System.Windows.Forms.CheckBox V_0)
    IL_0000:  ldarg.0
    IL_0001:  ldfld      class [System.Windows.Forms]System.Windows.Forms.CheckBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::_chkShowThreads
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method Main::get_chkShowThreads

  .method assembly newslot specialname strict virtual 
          instance void  set_chkShowThreads(class [System.Windows.Forms]System.Windows.Forms.CheckBox WithEventsValue) cil managed synchronized
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       9 (0x9)
    .maxstack  8
    IL_0000:  ldarg.0
    IL_0001:  ldarg.1
    IL_0002:  stfld      class [System.Windows.Forms]System.Windows.Forms.CheckBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::_chkShowThreads
    IL_0007:  nop
    IL_0008:  ret
  } // end of method Main::set_chkShowThreads

  .method assembly newslot specialname strict virtual 
          instance class [System.Windows.Forms]System.Windows.Forms.CheckBox 
          get_chkParallel() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       11 (0xb)
    .maxstack  1
    .locals init (class [System.Windows.Forms]System.Windows.Forms.CheckBox V_0)
    IL_0000:  ldarg.0
    IL_0001:  ldfld      class [System.Windows.Forms]System.Windows.Forms.CheckBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::_chkParallel
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method Main::get_chkParallel

  .method assembly newslot specialname strict virtual 
          instance void  set_chkParallel(class [System.Windows.Forms]System.Windows.Forms.CheckBox WithEventsValue) cil managed synchronized
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       83 (0x53)
    .maxstack  2
    .locals init (class [mscorlib]System.EventHandler V_0,
             bool V_1)
    IL_0000:  ldarg.0
    IL_0001:  dup
    IL_0002:  ldvirtftn  instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::chkParallel_CheckedChanged(object,
                                                                                                                                       class [mscorlib]System.EventArgs)
    IL_0008:  newobj     instance void [mscorlib]System.EventHandler::.ctor(object,
                                                                            native int)
    IL_000d:  stloc.0
    IL_000e:  ldarg.0
    IL_000f:  ldfld      class [System.Windows.Forms]System.Windows.Forms.CheckBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::_chkParallel
    IL_0014:  ldnull
    IL_0015:  ceq
    IL_0017:  ldc.i4.0
    IL_0018:  ceq
    IL_001a:  stloc.1
    IL_001b:  ldloc.1
    IL_001c:  brfalse.s  IL_002b

    IL_001e:  ldarg.0
    IL_001f:  ldfld      class [System.Windows.Forms]System.Windows.Forms.CheckBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::_chkParallel
    IL_0024:  ldloc.0
    IL_0025:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.CheckBox::remove_CheckedChanged(class [mscorlib]System.EventHandler)
    IL_002a:  nop
    IL_002b:  nop
    IL_002c:  ldarg.0
    IL_002d:  ldarg.1
    IL_002e:  stfld      class [System.Windows.Forms]System.Windows.Forms.CheckBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::_chkParallel
    IL_0033:  ldarg.0
    IL_0034:  ldfld      class [System.Windows.Forms]System.Windows.Forms.CheckBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::_chkParallel
    IL_0039:  ldnull
    IL_003a:  ceq
    IL_003c:  ldc.i4.0
    IL_003d:  ceq
    IL_003f:  stloc.1
    IL_0040:  ldloc.1
    IL_0041:  brfalse.s  IL_0050

    IL_0043:  ldarg.0
    IL_0044:  ldfld      class [System.Windows.Forms]System.Windows.Forms.CheckBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::_chkParallel
    IL_0049:  ldloc.0
    IL_004a:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.CheckBox::add_CheckedChanged(class [mscorlib]System.EventHandler)
    IL_004f:  nop
    IL_0050:  nop
    IL_0051:  nop
    IL_0052:  ret
  } // end of method Main::set_chkParallel

  .method private newslot specialname strict virtual 
          instance class [System.Windows.Forms]System.Windows.Forms.Button 
          get_btnStartStop() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       11 (0xb)
    .maxstack  1
    .locals init (class [System.Windows.Forms]System.Windows.Forms.Button V_0)
    IL_0000:  ldarg.0
    IL_0001:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Button Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::_btnStartStop
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method Main::get_btnStartStop

  .method private newslot specialname strict virtual 
          instance void  set_btnStartStop(class [System.Windows.Forms]System.Windows.Forms.Button WithEventsValue) cil managed synchronized
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       83 (0x53)
    .maxstack  2
    .locals init (class [mscorlib]System.EventHandler V_0,
             bool V_1)
    IL_0000:  ldarg.0
    IL_0001:  dup
    IL_0002:  ldvirtftn  instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::btnStartStop_Click(object,
                                                                                                                               class [mscorlib]System.EventArgs)
    IL_0008:  newobj     instance void [mscorlib]System.EventHandler::.ctor(object,
                                                                            native int)
    IL_000d:  stloc.0
    IL_000e:  ldarg.0
    IL_000f:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Button Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::_btnStartStop
    IL_0014:  ldnull
    IL_0015:  ceq
    IL_0017:  ldc.i4.0
    IL_0018:  ceq
    IL_001a:  stloc.1
    IL_001b:  ldloc.1
    IL_001c:  brfalse.s  IL_002b

    IL_001e:  ldarg.0
    IL_001f:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Button Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::_btnStartStop
    IL_0024:  ldloc.0
    IL_0025:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::remove_Click(class [mscorlib]System.EventHandler)
    IL_002a:  nop
    IL_002b:  nop
    IL_002c:  ldarg.0
    IL_002d:  ldarg.1
    IL_002e:  stfld      class [System.Windows.Forms]System.Windows.Forms.Button Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::_btnStartStop
    IL_0033:  ldarg.0
    IL_0034:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Button Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::_btnStartStop
    IL_0039:  ldnull
    IL_003a:  ceq
    IL_003c:  ldc.i4.0
    IL_003d:  ceq
    IL_003f:  stloc.1
    IL_0040:  ldloc.1
    IL_0041:  brfalse.s  IL_0050

    IL_0043:  ldarg.0
    IL_0044:  ldfld      class [System.Windows.Forms]System.Windows.Forms.Button Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::_btnStartStop
    IL_0049:  ldloc.0
    IL_004a:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::add_Click(class [mscorlib]System.EventHandler)
    IL_004f:  nop
    IL_0050:  nop
    IL_0051:  nop
    IL_0052:  ret
  } // end of method Main::set_btnStartStop

  .method private newslot specialname strict virtual 
          instance class [System.Windows.Forms]System.Windows.Forms.PictureBox 
          get_pbRenderedImage() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       11 (0xb)
    .maxstack  1
    .locals init (class [System.Windows.Forms]System.Windows.Forms.PictureBox V_0)
    IL_0000:  ldarg.0
    IL_0001:  ldfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::_pbRenderedImage
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method Main::get_pbRenderedImage

  .method private newslot specialname strict virtual 
          instance void  set_pbRenderedImage(class [System.Windows.Forms]System.Windows.Forms.PictureBox WithEventsValue) cil managed synchronized
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       9 (0x9)
    .maxstack  8
    IL_0000:  ldarg.0
    IL_0001:  ldarg.1
    IL_0002:  stfld      class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::_pbRenderedImage
    IL_0007:  nop
    IL_0008:  ret
  } // end of method Main::set_pbRenderedImage

  .method private instance void  btnStartStop_Click(object sender,
                                                    class [mscorlib]System.EventArgs e) cil managed
  {
    // Code size       195 (0xc3)
    .maxstack  4
    .locals init ([0] valuetype [mscorlib]System.Threading.CancellationToken token,
             [1] bool VB$CG$t_bool$S0)
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Raytracer\Raytracer_VisualBasic\Main.vb' 
//000029:     Private Sub btnStartStop_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnStartStop.Click
    IL_0000:  nop
//000030:         ' If we already have the rendering task created, then we're currently running.
//000031:         ' In that case, stop the renderer.
//000032:         If _cancellation IsNot Nothing Then
    IL_0001:  ldarg.0
    IL_0002:  ldfld      class [mscorlib]System.Threading.CancellationTokenSource Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::_cancellation
    IL_0007:  ldnull
    IL_0008:  ceq
    IL_000a:  ldc.i4.0
    IL_000b:  ceq
    IL_000d:  stloc.1
//000033:             btnStartStop.Enabled = False
//000034:             _cancellation.Cancel()
//000035:         Else
//000036:             ' Set up the image in the picture box and start the rendering loop with a new rendering task
//000037:             ConfigureImage()
//000038:             _showThreads = chkShowThreads.Checked
//000039:             _cancellation = New CancellationTokenSource()
//000040:             Dim token = _cancellation.Token
//000041:             Task.Factory.StartNew(AddressOf RenderLoop, token, token).
//000042:                 ContinueWith(Sub(c)
//000043:                                  chkParallel.Enabled = True
//000044:                                  chkShowThreads.Enabled = chkParallel.Checked
//000045:                                  btnStartStop.Enabled = True
//000046:                                  btnStartStop.Text = "Start"
//000047:                                  _cancellation = Nothing
//000048:                              End Sub, TaskScheduler.FromCurrentSynchronizationContext())
//000049:             chkShowThreads.Enabled = False
//000050:             chkParallel.Enabled = False
//000051:             btnStartStop.Text = "Stop"
//000052:         End If
//000053:     End Sub
//000054: 
//000055:     Private Function FixUpFormAfterRendering() As Boolean
//000056:         btnStartStop.Enabled = True
//000057:         chkParallel.Enabled = True
//000058:         btnStartStop.Text = "Start"
//000059:         Return True
//000060:     End Function
//000061: 
//000062:     Private Sub ConfigureImage()
//000063:         ' If we need to create a new bitmap, do so
//000064:         If _bitmap Is Nothing OrElse _bitmap.Width <> pbRenderedImage.Width OrElse _bitmap.Height <> pbRenderedImage.Height Then
//000065:             ' Dispose of the old one if one exists
//000066:             If _bitmap IsNot Nothing Then
//000067:                 pbRenderedImage.Image = Nothing
//000068:                 _bitmap.Dispose()
//000069:             End If
//000070: 
//000071:             ' We always render a square even if the window isn't square
//000072:             Dim min = Math.Min(pbRenderedImage.Width, pbRenderedImage.Height)
//000073:             _width = min
//000074:             _height = min
//000075: 
//000076:             ' Resize the rendering arrays accordingly
//000077:             _freeBuffers = New ObjectPool(Of Int32())(Function() New Int32(_width * _height - 1) {})
//000078: 
//000079:             ' Create a new Bitmap and set it into the picture box
//000080:             _bitmap = New Bitmap(_width, _height, PixelFormat.Format32bppRgb)
//000081:             _rect = New Rectangle(0, 0, _width, _height)
//000082:             pbRenderedImage.Image = _bitmap
//000083:         End If
//000084:     End Sub
//000085: 
//000086:     Private Sub RenderLoop(ByVal boxedToken As Object)
//000087: 
//000088:         Dim token = DirectCast(boxedToken, CancellationToken)
//000089: 
//000090:         ' Create a ray tracer, and create a reference to "sphere2" that we are going to bounce
//000091:         Dim rayTracer = New RayTracer(_width, _height)
//000092:         Dim scene = rayTracer.DefaultScene
//000093:         Dim sphere2 = DirectCast(scene.Things(0), Sphere) ' The first item is assumed to be our sphere
//000094:         Dim baseY = sphere2.Radius
//000095:         sphere2.Center.Y = sphere2.Radius
//000096: 
//000097:         ' Timing determines how fast the ball bounces as well as diagnostics frames/second info
//000098:         Dim renderingTime = New Stopwatch()
//000099:         Dim totalTime = Stopwatch.StartNew()
//000100: 
//000101:         ' Keep rendering until the rendering task has been canceled
//000102:         While True
//000103:             token.ThrowIfCancellationRequested()
//000104: 
//000105:             ' Get the next buffer
//000106:             Dim rgb = _freeBuffers.GetObject()
//000107: 
//000108:             ' Determine the new position of the sphere based on the current time elapsed
//000109:             Dim dy2 = 0.8 * Math.Abs(Math.Sin(totalTime.ElapsedMilliseconds * Math.PI / 3000))
//000110:             sphere2.Center.Y = baseY + dy2
//000111: 
//000112:             ' Render the scene
//000113:             renderingTime.Reset()
//000114:             renderingTime.Start()
//000115:             Try
//000116:                 Dim options = New ParallelOptions() With {.MaxDegreeOfParallelism = _degreeOfParallelism, .CancellationToken = _cancellation.Token}
//000117:                 If Not _parallel Then
//000118:                     rayTracer.RenderSequential(scene, rgb)
//000119:                 ElseIf _showThreads Then
//000120:                     rayTracer.RenderParallelShowingThreads(scene, rgb, options)
//000121:                 Else
//000122:                     rayTracer.RenderParallel(scene, rgb, options)
//000123:                 End If
//000124:             Catch ex As OperationCanceledException
//000125:             End Try
//000126:             renderingTime.Stop()
//000127: 
//000128:             ' Update the bitmap in the UI thread
//000129:             Dim framesPerSecond = (1000.0 / renderingTime.ElapsedMilliseconds)
//000130:             Dim a = Sub()
//000131:                         ' Copy the pixel array into the bitmap
//000132:                         Dim bmpData = _bitmap.LockBits(_rect, ImageLockMode.WriteOnly, _bitmap.PixelFormat)
//000133:                         Marshal.Copy(rgb, 0, bmpData.Scan0, rgb.Length)
//000134:                         _bitmap.UnlockBits(bmpData)
//000135:                         _freeBuffers.PutObject(rgb)
//000136: 
//000137:                         ' Refresh the UI
//000138:                         pbRenderedImage.Invalidate()
//000139:                         Text = "Ray Tracer - FPS: " + framesPerSecond.ToString("F1")
//000140:                     End Sub
//000141:             BeginInvoke(a)
//000142:         End While
//000143:     End Sub
//000144: 
//000145:     Private Sub chkParallel_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles chkParallel.CheckedChanged
//000146:         _parallel = chkParallel.Checked
//000147:         lblNumProcs.Enabled = chkParallel.Checked
//000148:         tbNumProcs.Enabled = chkParallel.Checked
//000149:         chkShowThreads.Enabled = chkParallel.Checked
//000150:     End Sub
//000151: 
//000152:     Private Sub tbNumProcs_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbNumProcs.ValueChanged
//000153:         lblNumProcs.Text = tbNumProcs.Value.ToString()
//000154:         _degreeOfParallelism = tbNumProcs.Value
//000155:     End Sub
//000156: 
//000157:     Private Sub MainForm_Load(ByVal sender As Object, ByVal e As EventArgs) Handles MyBase.Load
//000158:         tbNumProcs.Minimum = 1
//000159:         tbNumProcs.Maximum = Environment.ProcessorCount
//000160:         tbNumProcs.Value = tbNumProcs.Maximum
//000161:         lblNumProcs.Text = tbNumProcs.Value.ToString()
//000162:     End Sub
//000163: End Class
    IL_000e:  ldloc.1
    IL_000f:  brfalse.s  IL_002f

//000033:             btnStartStop.Enabled = False
    IL_0011:  ldarg.0
    IL_0012:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Button Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_btnStartStop()
    IL_0017:  ldc.i4.0
    IL_0018:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Enabled(bool)
    IL_001d:  nop
//000034:             _cancellation.Cancel()
    IL_001e:  ldarg.0
    IL_001f:  ldfld      class [mscorlib]System.Threading.CancellationTokenSource Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::_cancellation
    IL_0024:  callvirt   instance void [mscorlib]System.Threading.CancellationTokenSource::Cancel()
    IL_0029:  nop
    IL_002a:  br         IL_00c0

//000035:         Else
    IL_002f:  nop
//000036:             ' Set up the image in the picture box and start the rendering loop with a new rendering task
//000037:             ConfigureImage()
    IL_0030:  ldarg.0
    IL_0031:  callvirt   instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::ConfigureImage()
    IL_0036:  nop
//000038:             _showThreads = chkShowThreads.Checked
    IL_0037:  ldarg.0
    IL_0038:  ldarg.0
    IL_0039:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.CheckBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_chkShowThreads()
    IL_003e:  callvirt   instance bool [System.Windows.Forms]System.Windows.Forms.CheckBox::get_Checked()
    IL_0043:  stfld      bool Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::_showThreads
//000039:             _cancellation = New CancellationTokenSource()
    IL_0048:  ldarg.0
    IL_0049:  newobj     instance void [mscorlib]System.Threading.CancellationTokenSource::.ctor()
    IL_004e:  stfld      class [mscorlib]System.Threading.CancellationTokenSource Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::_cancellation
//000040:             Dim token = _cancellation.Token
    IL_0053:  ldarg.0
    IL_0054:  ldfld      class [mscorlib]System.Threading.CancellationTokenSource Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::_cancellation
    IL_0059:  callvirt   instance valuetype [mscorlib]System.Threading.CancellationToken [mscorlib]System.Threading.CancellationTokenSource::get_Token()
    IL_005e:  stloc.0
//000041:             Task.Factory.StartNew(AddressOf RenderLoop, token, token).
    IL_005f:  call       class [mscorlib]System.Threading.Tasks.TaskFactory [mscorlib]System.Threading.Tasks.Task::get_Factory()
    IL_0064:  ldarg.0
    IL_0065:  dup
    IL_0066:  ldvirtftn  instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::RenderLoop(object)
    IL_006c:  newobj     instance void class [mscorlib]System.Action`1<object>::.ctor(object,
                                                                                      native int)
    IL_0071:  ldloc.0
    IL_0072:  box        [mscorlib]System.Threading.CancellationToken
    IL_0077:  ldloc.0
    IL_0078:  callvirt   instance class [mscorlib]System.Threading.Tasks.Task [mscorlib]System.Threading.Tasks.TaskFactory::StartNew(class [mscorlib]System.Action`1<object>,
                                                                                                                                     object,
                                                                                                                                     valuetype [mscorlib]System.Threading.CancellationToken)
    IL_007d:  ldarg.0
    IL_007e:  dup
    IL_007f:  ldvirtftn  instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::_Lambda$__1(class [mscorlib]System.Threading.Tasks.Task)
    IL_0085:  newobj     instance void class [mscorlib]System.Action`1<class [mscorlib]System.Threading.Tasks.Task>::.ctor(object,
                                                                                                                           native int)
    IL_008a:  call       class [mscorlib]System.Threading.Tasks.TaskScheduler [mscorlib]System.Threading.Tasks.TaskScheduler::FromCurrentSynchronizationContext()
    IL_008f:  callvirt   instance class [mscorlib]System.Threading.Tasks.Task [mscorlib]System.Threading.Tasks.Task::ContinueWith(class [mscorlib]System.Action`1<class [mscorlib]System.Threading.Tasks.Task>,
                                                                                                                                  class [mscorlib]System.Threading.Tasks.TaskScheduler)
    IL_0094:  pop
//000042:                 ContinueWith(Sub(c)
//000043:                                  chkParallel.Enabled = True
//000044:                                  chkShowThreads.Enabled = chkParallel.Checked
//000045:                                  btnStartStop.Enabled = True
//000046:                                  btnStartStop.Text = "Start"
//000047:                                  _cancellation = Nothing
//000048:                              End Sub, TaskScheduler.FromCurrentSynchronizationContext())
//000049:             chkShowThreads.Enabled = False
    IL_0095:  ldarg.0
    IL_0096:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.CheckBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_chkShowThreads()
    IL_009b:  ldc.i4.0
    IL_009c:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Enabled(bool)
    IL_00a1:  nop
//000050:             chkParallel.Enabled = False
    IL_00a2:  ldarg.0
    IL_00a3:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.CheckBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_chkParallel()
    IL_00a8:  ldc.i4.0
    IL_00a9:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Enabled(bool)
    IL_00ae:  nop
//000051:             btnStartStop.Text = "Stop"
    IL_00af:  ldarg.0
    IL_00b0:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Button Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_btnStartStop()
    IL_00b5:  ldstr      "Stop"
    IL_00ba:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ButtonBase::set_Text(string)
    IL_00bf:  nop
//000052:         End If
    IL_00c0:  nop
//000053:     End Sub
    IL_00c1:  nop
    IL_00c2:  ret
  } // end of method Main::btnStartStop_Click

  .method private instance bool  FixUpFormAfterRendering() cil managed
  {
    // Code size       50 (0x32)
    .maxstack  2
    .locals init ([0] bool FixUpFormAfterRendering)
//000054: 
//000055:     Private Function FixUpFormAfterRendering() As Boolean
    IL_0000:  nop
//000056:         btnStartStop.Enabled = True
    IL_0001:  ldarg.0
    IL_0002:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Button Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_btnStartStop()
    IL_0007:  ldc.i4.1
    IL_0008:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Enabled(bool)
    IL_000d:  nop
//000057:         chkParallel.Enabled = True
    IL_000e:  ldarg.0
    IL_000f:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.CheckBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_chkParallel()
    IL_0014:  ldc.i4.1
    IL_0015:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Enabled(bool)
    IL_001a:  nop
//000058:         btnStartStop.Text = "Start"
    IL_001b:  ldarg.0
    IL_001c:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Button Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_btnStartStop()
    IL_0021:  ldstr      "Start"
    IL_0026:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ButtonBase::set_Text(string)
    IL_002b:  nop
//000059:         Return True
    IL_002c:  ldc.i4.1
    IL_002d:  stloc.0
    IL_002e:  br.s       IL_0030

//000060:     End Function
    IL_0030:  ldloc.0
    IL_0031:  ret
  } // end of method Main::FixUpFormAfterRendering

  .method private instance void  ConfigureImage() cil managed
  {
    // Code size       253 (0xfd)
    .maxstack  5
    .locals init ([0] int32 min,
             [1] bool VB$CG$t_bool$S0,
             [2] bool VB$CG$t_bool$S1)
//000061: 
//000062:     Private Sub ConfigureImage()
    IL_0000:  nop
//000063:         ' If we need to create a new bitmap, do so
//000064:         If _bitmap Is Nothing OrElse _bitmap.Width <> pbRenderedImage.Width OrElse _bitmap.Height <> pbRenderedImage.Height Then
    IL_0001:  ldarg.0
    IL_0002:  ldfld      class [System.Drawing]System.Drawing.Bitmap Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::_bitmap
    IL_0007:  brfalse.s  IL_0021

    IL_0009:  ldarg.0
    IL_000a:  ldfld      class [System.Drawing]System.Drawing.Bitmap Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::_bitmap
    IL_000f:  callvirt   instance int32 [System.Drawing]System.Drawing.Image::get_Width()
    IL_0014:  ldarg.0
    IL_0015:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_pbRenderedImage()
    IL_001a:  callvirt   instance int32 [System.Windows.Forms]System.Windows.Forms.Control::get_Width()
    IL_001f:  beq.s      IL_0023

    IL_0021:  br.s       IL_003e

    IL_0023:  ldarg.0
    IL_0024:  ldfld      class [System.Drawing]System.Drawing.Bitmap Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::_bitmap
    IL_0029:  callvirt   instance int32 [System.Drawing]System.Drawing.Image::get_Height()
    IL_002e:  ldarg.0
    IL_002f:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_pbRenderedImage()
    IL_0034:  callvirt   instance int32 [System.Windows.Forms]System.Windows.Forms.Control::get_Height()
    IL_0039:  bne.un.s   IL_003e

    IL_003b:  ldc.i4.0
    IL_003c:  br.s       IL_003f

    IL_003e:  ldc.i4.1
    IL_003f:  stloc.1
//000065:             ' Dispose of the old one if one exists
//000066:             If _bitmap IsNot Nothing Then
//000067:                 pbRenderedImage.Image = Nothing
//000068:                 _bitmap.Dispose()
//000069:             End If
//000070: 
//000071:             ' We always render a square even if the window isn't square
//000072:             Dim min = Math.Min(pbRenderedImage.Width, pbRenderedImage.Height)
//000073:             _width = min
//000074:             _height = min
//000075: 
//000076:             ' Resize the rendering arrays accordingly
//000077:             _freeBuffers = New ObjectPool(Of Int32())(Function() New Int32(_width * _height - 1) {})
//000078: 
//000079:             ' Create a new Bitmap and set it into the picture box
//000080:             _bitmap = New Bitmap(_width, _height, PixelFormat.Format32bppRgb)
//000081:             _rect = New Rectangle(0, 0, _width, _height)
//000082:             pbRenderedImage.Image = _bitmap
//000083:         End If
//000084:     End Sub
//000085: 
//000086:     Private Sub RenderLoop(ByVal boxedToken As Object)
//000087: 
//000088:         Dim token = DirectCast(boxedToken, CancellationToken)
//000089: 
//000090:         ' Create a ray tracer, and create a reference to "sphere2" that we are going to bounce
//000091:         Dim rayTracer = New RayTracer(_width, _height)
//000092:         Dim scene = rayTracer.DefaultScene
//000093:         Dim sphere2 = DirectCast(scene.Things(0), Sphere) ' The first item is assumed to be our sphere
//000094:         Dim baseY = sphere2.Radius
//000095:         sphere2.Center.Y = sphere2.Radius
//000096: 
//000097:         ' Timing determines how fast the ball bounces as well as diagnostics frames/second info
//000098:         Dim renderingTime = New Stopwatch()
//000099:         Dim totalTime = Stopwatch.StartNew()
//000100: 
//000101:         ' Keep rendering until the rendering task has been canceled
//000102:         While True
//000103:             token.ThrowIfCancellationRequested()
//000104: 
//000105:             ' Get the next buffer
//000106:             Dim rgb = _freeBuffers.GetObject()
//000107: 
//000108:             ' Determine the new position of the sphere based on the current time elapsed
//000109:             Dim dy2 = 0.8 * Math.Abs(Math.Sin(totalTime.ElapsedMilliseconds * Math.PI / 3000))
//000110:             sphere2.Center.Y = baseY + dy2
//000111: 
//000112:             ' Render the scene
//000113:             renderingTime.Reset()
//000114:             renderingTime.Start()
//000115:             Try
//000116:                 Dim options = New ParallelOptions() With {.MaxDegreeOfParallelism = _degreeOfParallelism, .CancellationToken = _cancellation.Token}
//000117:                 If Not _parallel Then
//000118:                     rayTracer.RenderSequential(scene, rgb)
//000119:                 ElseIf _showThreads Then
//000120:                     rayTracer.RenderParallelShowingThreads(scene, rgb, options)
//000121:                 Else
//000122:                     rayTracer.RenderParallel(scene, rgb, options)
//000123:                 End If
//000124:             Catch ex As OperationCanceledException
//000125:             End Try
//000126:             renderingTime.Stop()
//000127: 
//000128:             ' Update the bitmap in the UI thread
//000129:             Dim framesPerSecond = (1000.0 / renderingTime.ElapsedMilliseconds)
//000130:             Dim a = Sub()
//000131:                         ' Copy the pixel array into the bitmap
//000132:                         Dim bmpData = _bitmap.LockBits(_rect, ImageLockMode.WriteOnly, _bitmap.PixelFormat)
//000133:                         Marshal.Copy(rgb, 0, bmpData.Scan0, rgb.Length)
//000134:                         _bitmap.UnlockBits(bmpData)
//000135:                         _freeBuffers.PutObject(rgb)
//000136: 
//000137:                         ' Refresh the UI
//000138:                         pbRenderedImage.Invalidate()
//000139:                         Text = "Ray Tracer - FPS: " + framesPerSecond.ToString("F1")
//000140:                     End Sub
//000141:             BeginInvoke(a)
//000142:         End While
//000143:     End Sub
//000144: 
//000145:     Private Sub chkParallel_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles chkParallel.CheckedChanged
//000146:         _parallel = chkParallel.Checked
//000147:         lblNumProcs.Enabled = chkParallel.Checked
//000148:         tbNumProcs.Enabled = chkParallel.Checked
//000149:         chkShowThreads.Enabled = chkParallel.Checked
//000150:     End Sub
//000151: 
//000152:     Private Sub tbNumProcs_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbNumProcs.ValueChanged
//000153:         lblNumProcs.Text = tbNumProcs.Value.ToString()
//000154:         _degreeOfParallelism = tbNumProcs.Value
//000155:     End Sub
//000156: 
//000157:     Private Sub MainForm_Load(ByVal sender As Object, ByVal e As EventArgs) Handles MyBase.Load
//000158:         tbNumProcs.Minimum = 1
//000159:         tbNumProcs.Maximum = Environment.ProcessorCount
//000160:         tbNumProcs.Value = tbNumProcs.Maximum
//000161:         lblNumProcs.Text = tbNumProcs.Value.ToString()
//000162:     End Sub
//000163: End Class
    IL_0040:  ldloc.1
    IL_0041:  brfalse    IL_00fa

//000066:             If _bitmap IsNot Nothing Then
    IL_0046:  ldarg.0
    IL_0047:  ldfld      class [System.Drawing]System.Drawing.Bitmap Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::_bitmap
    IL_004c:  ldnull
    IL_004d:  ceq
    IL_004f:  ldc.i4.0
    IL_0050:  ceq
    IL_0052:  stloc.2
//000067:                 pbRenderedImage.Image = Nothing
//000068:                 _bitmap.Dispose()
//000069:             End If
//000070: 
//000071:             ' We always render a square even if the window isn't square
//000072:             Dim min = Math.Min(pbRenderedImage.Width, pbRenderedImage.Height)
//000073:             _width = min
//000074:             _height = min
//000075: 
//000076:             ' Resize the rendering arrays accordingly
//000077:             _freeBuffers = New ObjectPool(Of Int32())(Function() New Int32(_width * _height - 1) {})
//000078: 
//000079:             ' Create a new Bitmap and set it into the picture box
//000080:             _bitmap = New Bitmap(_width, _height, PixelFormat.Format32bppRgb)
//000081:             _rect = New Rectangle(0, 0, _width, _height)
//000082:             pbRenderedImage.Image = _bitmap
//000083:         End If
//000084:     End Sub
//000085: 
//000086:     Private Sub RenderLoop(ByVal boxedToken As Object)
//000087: 
//000088:         Dim token = DirectCast(boxedToken, CancellationToken)
//000089: 
//000090:         ' Create a ray tracer, and create a reference to "sphere2" that we are going to bounce
//000091:         Dim rayTracer = New RayTracer(_width, _height)
//000092:         Dim scene = rayTracer.DefaultScene
//000093:         Dim sphere2 = DirectCast(scene.Things(0), Sphere) ' The first item is assumed to be our sphere
//000094:         Dim baseY = sphere2.Radius
//000095:         sphere2.Center.Y = sphere2.Radius
//000096: 
//000097:         ' Timing determines how fast the ball bounces as well as diagnostics frames/second info
//000098:         Dim renderingTime = New Stopwatch()
//000099:         Dim totalTime = Stopwatch.StartNew()
//000100: 
//000101:         ' Keep rendering until the rendering task has been canceled
//000102:         While True
//000103:             token.ThrowIfCancellationRequested()
//000104: 
//000105:             ' Get the next buffer
//000106:             Dim rgb = _freeBuffers.GetObject()
//000107: 
//000108:             ' Determine the new position of the sphere based on the current time elapsed
//000109:             Dim dy2 = 0.8 * Math.Abs(Math.Sin(totalTime.ElapsedMilliseconds * Math.PI / 3000))
//000110:             sphere2.Center.Y = baseY + dy2
//000111: 
//000112:             ' Render the scene
//000113:             renderingTime.Reset()
//000114:             renderingTime.Start()
//000115:             Try
//000116:                 Dim options = New ParallelOptions() With {.MaxDegreeOfParallelism = _degreeOfParallelism, .CancellationToken = _cancellation.Token}
//000117:                 If Not _parallel Then
//000118:                     rayTracer.RenderSequential(scene, rgb)
//000119:                 ElseIf _showThreads Then
//000120:                     rayTracer.RenderParallelShowingThreads(scene, rgb, options)
//000121:                 Else
//000122:                     rayTracer.RenderParallel(scene, rgb, options)
//000123:                 End If
//000124:             Catch ex As OperationCanceledException
//000125:             End Try
//000126:             renderingTime.Stop()
//000127: 
//000128:             ' Update the bitmap in the UI thread
//000129:             Dim framesPerSecond = (1000.0 / renderingTime.ElapsedMilliseconds)
//000130:             Dim a = Sub()
//000131:                         ' Copy the pixel array into the bitmap
//000132:                         Dim bmpData = _bitmap.LockBits(_rect, ImageLockMode.WriteOnly, _bitmap.PixelFormat)
//000133:                         Marshal.Copy(rgb, 0, bmpData.Scan0, rgb.Length)
//000134:                         _bitmap.UnlockBits(bmpData)
//000135:                         _freeBuffers.PutObject(rgb)
//000136: 
//000137:                         ' Refresh the UI
//000138:                         pbRenderedImage.Invalidate()
//000139:                         Text = "Ray Tracer - FPS: " + framesPerSecond.ToString("F1")
//000140:                     End Sub
//000141:             BeginInvoke(a)
//000142:         End While
//000143:     End Sub
//000144: 
//000145:     Private Sub chkParallel_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles chkParallel.CheckedChanged
//000146:         _parallel = chkParallel.Checked
//000147:         lblNumProcs.Enabled = chkParallel.Checked
//000148:         tbNumProcs.Enabled = chkParallel.Checked
//000149:         chkShowThreads.Enabled = chkParallel.Checked
//000150:     End Sub
//000151: 
//000152:     Private Sub tbNumProcs_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbNumProcs.ValueChanged
//000153:         lblNumProcs.Text = tbNumProcs.Value.ToString()
//000154:         _degreeOfParallelism = tbNumProcs.Value
//000155:     End Sub
//000156: 
//000157:     Private Sub MainForm_Load(ByVal sender As Object, ByVal e As EventArgs) Handles MyBase.Load
//000158:         tbNumProcs.Minimum = 1
//000159:         tbNumProcs.Maximum = Environment.ProcessorCount
//000160:         tbNumProcs.Value = tbNumProcs.Maximum
//000161:         lblNumProcs.Text = tbNumProcs.Value.ToString()
//000162:     End Sub
//000163: End Class
    IL_0053:  ldloc.2
    IL_0054:  brfalse.s  IL_006f

//000067:                 pbRenderedImage.Image = Nothing
    IL_0056:  ldarg.0
    IL_0057:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_pbRenderedImage()
    IL_005c:  ldnull
    IL_005d:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.PictureBox::set_Image(class [System.Drawing]System.Drawing.Image)
    IL_0062:  nop
//000068:                 _bitmap.Dispose()
    IL_0063:  ldarg.0
    IL_0064:  ldfld      class [System.Drawing]System.Drawing.Bitmap Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::_bitmap
    IL_0069:  callvirt   instance void [System.Drawing]System.Drawing.Image::Dispose()
    IL_006e:  nop
//000069:             End If
    IL_006f:  nop
//000070: 
//000071:             ' We always render a square even if the window isn't square
//000072:             Dim min = Math.Min(pbRenderedImage.Width, pbRenderedImage.Height)
    IL_0070:  ldarg.0
    IL_0071:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_pbRenderedImage()
    IL_0076:  callvirt   instance int32 [System.Windows.Forms]System.Windows.Forms.Control::get_Width()
    IL_007b:  ldarg.0
    IL_007c:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_pbRenderedImage()
    IL_0081:  callvirt   instance int32 [System.Windows.Forms]System.Windows.Forms.Control::get_Height()
    IL_0086:  call       int32 [mscorlib]System.Math::Min(int32,
                                                          int32)
    IL_008b:  stloc.0
//000073:             _width = min
    IL_008c:  ldarg.0
    IL_008d:  ldloc.0
    IL_008e:  stfld      int32 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::_width
//000074:             _height = min
    IL_0093:  ldarg.0
    IL_0094:  ldloc.0
    IL_0095:  stfld      int32 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::_height
//000075: 
//000076:             ' Resize the rendering arrays accordingly
//000077:             _freeBuffers = New ObjectPool(Of Int32())(Function() New Int32(_width * _height - 1) {})
    IL_009a:  ldarg.0
    IL_009b:  ldarg.0
    IL_009c:  dup
    IL_009d:  ldvirtftn  instance int32[] Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::_Lambda$__2()
    IL_00a3:  newobj     instance void class [mscorlib]System.Func`1<int32[]>::.ctor(object,
                                                                                     native int)
    IL_00a8:  newobj     instance void class [ParallelExtensionsExtras]System.Collections.Concurrent.ObjectPool`1<int32[]>::.ctor(class [mscorlib]System.Func`1<!0>)
    IL_00ad:  stfld      class [ParallelExtensionsExtras]System.Collections.Concurrent.ObjectPool`1<int32[]> Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::_freeBuffers
//000078: 
//000079:             ' Create a new Bitmap and set it into the picture box
//000080:             _bitmap = New Bitmap(_width, _height, PixelFormat.Format32bppRgb)
    IL_00b2:  ldarg.0
    IL_00b3:  ldarg.0
    IL_00b4:  ldfld      int32 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::_width
    IL_00b9:  ldarg.0
    IL_00ba:  ldfld      int32 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::_height
    IL_00bf:  ldc.i4     0x22009
    IL_00c4:  newobj     instance void [System.Drawing]System.Drawing.Bitmap::.ctor(int32,
                                                                                    int32,
                                                                                    valuetype [System.Drawing]System.Drawing.Imaging.PixelFormat)
    IL_00c9:  stfld      class [System.Drawing]System.Drawing.Bitmap Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::_bitmap
//000081:             _rect = New Rectangle(0, 0, _width, _height)
    IL_00ce:  ldarg.0
    IL_00cf:  ldflda     valuetype [System.Drawing]System.Drawing.Rectangle Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::_rect
    IL_00d4:  ldc.i4.0
    IL_00d5:  ldc.i4.0
    IL_00d6:  ldarg.0
    IL_00d7:  ldfld      int32 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::_width
    IL_00dc:  ldarg.0
    IL_00dd:  ldfld      int32 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::_height
    IL_00e2:  call       instance void [System.Drawing]System.Drawing.Rectangle::.ctor(int32,
                                                                                       int32,
                                                                                       int32,
                                                                                       int32)
    IL_00e7:  nop
//000082:             pbRenderedImage.Image = _bitmap
    IL_00e8:  ldarg.0
    IL_00e9:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_pbRenderedImage()
    IL_00ee:  ldarg.0
    IL_00ef:  ldfld      class [System.Drawing]System.Drawing.Bitmap Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::_bitmap
    IL_00f4:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.PictureBox::set_Image(class [System.Drawing]System.Drawing.Image)
    IL_00f9:  nop
//000083:         End If
    IL_00fa:  nop
//000084:     End Sub
    IL_00fb:  nop
    IL_00fc:  ret
  } // end of method Main::ConfigureImage

  .method private instance void  RenderLoop(object boxedToken) cil managed
  {
    // Code size       437 (0x1b5)
    .maxstack  4
    .locals init ([0] float64 baseY,
             [1] class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer rayTracer,
             [2] class [System]System.Diagnostics.Stopwatch renderingTime,
             [3] class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Scene scene,
             [4] class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Sphere sphere2,
             [5] valuetype [mscorlib]System.Threading.CancellationToken token,
             [6] class [System]System.Diagnostics.Stopwatch totalTime,
             [7] class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main/_Closure$__1 $VB$Closure_ClosureVariable_65_8,
             [8] class VB$AnonymousDelegate_2 a,
             [9] float64 dy2,
             [10] class [mscorlib]System.Threading.Tasks.ParallelOptions options,
             [11] class [mscorlib]System.OperationCanceledException ex,
             [12] class [mscorlib]System.Threading.Tasks.ParallelOptions VB$t_ref$S0,
             [13] bool VB$CG$t_bool$S0)
//000085: 
//000086:     Private Sub RenderLoop(ByVal boxedToken As Object)
    IL_0000:  nop
//000087: 
//000088:         Dim token = DirectCast(boxedToken, CancellationToken)
    IL_0001:  ldarg.1
    IL_0002:  unbox      [mscorlib]System.Threading.CancellationToken
    IL_0007:  ldobj      [mscorlib]System.Threading.CancellationToken
    IL_000c:  stloc.s    token
//000089: 
//000090:         ' Create a ray tracer, and create a reference to "sphere2" that we are going to bounce
//000091:         Dim rayTracer = New RayTracer(_width, _height)
    IL_000e:  ldarg.0
    IL_000f:  ldfld      int32 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::_width
    IL_0014:  ldarg.0
    IL_0015:  ldfld      int32 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::_height
    IL_001a:  newobj     instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer::.ctor(int32,
                                                                                                                       int32)
    IL_001f:  stloc.1
//000092:         Dim scene = rayTracer.DefaultScene
    IL_0020:  ldloc.1
    IL_0021:  ldfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Scene Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer::DefaultScene
    IL_0026:  stloc.3
//000093:         Dim sphere2 = DirectCast(scene.Things(0), Sphere) ' The first item is assumed to be our sphere
    IL_0027:  ldloc.3
    IL_0028:  ldfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.SceneObject[] Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Scene::Things
    IL_002d:  ldc.i4.0
    IL_002e:  ldelem.ref
    IL_002f:  castclass  Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Sphere
    IL_0034:  stloc.s    sphere2
//000094:         Dim baseY = sphere2.Radius
    IL_0036:  ldloc.s    sphere2
    IL_0038:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Sphere::Radius
    IL_003d:  stloc.0
//000095:         sphere2.Center.Y = sphere2.Radius
    IL_003e:  ldloc.s    sphere2
    IL_0040:  ldflda     valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Sphere::Center
    IL_0045:  ldloc.s    sphere2
    IL_0047:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Sphere::Radius
    IL_004c:  stfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Y
//000096: 
//000097:         ' Timing determines how fast the ball bounces as well as diagnostics frames/second info
//000098:         Dim renderingTime = New Stopwatch()
    IL_0051:  newobj     instance void [System]System.Diagnostics.Stopwatch::.ctor()
    IL_0056:  stloc.2
//000099:         Dim totalTime = Stopwatch.StartNew()
    IL_0057:  call       class [System]System.Diagnostics.Stopwatch [System]System.Diagnostics.Stopwatch::StartNew()
    IL_005c:  stloc.s    totalTime
//000100: 
//000101:         ' Keep rendering until the rendering task has been canceled
//000102:         While True
//000103:             token.ThrowIfCancellationRequested()
//000104: 
//000105:             ' Get the next buffer
//000106:             Dim rgb = _freeBuffers.GetObject()
//000107: 
//000108:             ' Determine the new position of the sphere based on the current time elapsed
//000109:             Dim dy2 = 0.8 * Math.Abs(Math.Sin(totalTime.ElapsedMilliseconds * Math.PI / 3000))
//000110:             sphere2.Center.Y = baseY + dy2
//000111: 
//000112:             ' Render the scene
//000113:             renderingTime.Reset()
//000114:             renderingTime.Start()
//000115:             Try
//000116:                 Dim options = New ParallelOptions() With {.MaxDegreeOfParallelism = _degreeOfParallelism, .CancellationToken = _cancellation.Token}
//000117:                 If Not _parallel Then
//000118:                     rayTracer.RenderSequential(scene, rgb)
//000119:                 ElseIf _showThreads Then
//000120:                     rayTracer.RenderParallelShowingThreads(scene, rgb, options)
//000121:                 Else
//000122:                     rayTracer.RenderParallel(scene, rgb, options)
//000123:                 End If
//000124:             Catch ex As OperationCanceledException
//000125:             End Try
//000126:             renderingTime.Stop()
//000127: 
//000128:             ' Update the bitmap in the UI thread
//000129:             Dim framesPerSecond = (1000.0 / renderingTime.ElapsedMilliseconds)
//000130:             Dim a = Sub()
//000131:                         ' Copy the pixel array into the bitmap
//000132:                         Dim bmpData = _bitmap.LockBits(_rect, ImageLockMode.WriteOnly, _bitmap.PixelFormat)
//000133:                         Marshal.Copy(rgb, 0, bmpData.Scan0, rgb.Length)
//000134:                         _bitmap.UnlockBits(bmpData)
//000135:                         _freeBuffers.PutObject(rgb)
//000136: 
//000137:                         ' Refresh the UI
//000138:                         pbRenderedImage.Invalidate()
//000139:                         Text = "Ray Tracer - FPS: " + framesPerSecond.ToString("F1")
//000140:                     End Sub
//000141:             BeginInvoke(a)
//000142:         End While
//000143:     End Sub
//000144: 
//000145:     Private Sub chkParallel_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles chkParallel.CheckedChanged
//000146:         _parallel = chkParallel.Checked
//000147:         lblNumProcs.Enabled = chkParallel.Checked
//000148:         tbNumProcs.Enabled = chkParallel.Checked
//000149:         chkShowThreads.Enabled = chkParallel.Checked
//000150:     End Sub
//000151: 
//000152:     Private Sub tbNumProcs_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbNumProcs.ValueChanged
//000153:         lblNumProcs.Text = tbNumProcs.Value.ToString()
//000154:         _degreeOfParallelism = tbNumProcs.Value
//000155:     End Sub
//000156: 
//000157:     Private Sub MainForm_Load(ByVal sender As Object, ByVal e As EventArgs) Handles MyBase.Load
//000158:         tbNumProcs.Minimum = 1
//000159:         tbNumProcs.Maximum = Environment.ProcessorCount
//000160:         tbNumProcs.Value = tbNumProcs.Maximum
//000161:         lblNumProcs.Text = tbNumProcs.Value.ToString()
//000162:     End Sub
//000163: End Class
    IL_005e:  br         IL_01a9

    IL_0063:  ldloc.s    $VB$Closure_ClosureVariable_65_8
    IL_0065:  newobj     instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main/_Closure$__1::.ctor(class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main/_Closure$__1)
    IL_006a:  stloc.s    $VB$Closure_ClosureVariable_65_8
    IL_006c:  ldloc.s    $VB$Closure_ClosureVariable_65_8
    IL_006e:  ldarg.0
    IL_006f:  stfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main/_Closure$__1::$VB$Me
//000103:             token.ThrowIfCancellationRequested()
    IL_0074:  ldloca.s   token
    IL_0076:  call       instance void [mscorlib]System.Threading.CancellationToken::ThrowIfCancellationRequested()
    IL_007b:  nop
//000104: 
//000105:             ' Get the next buffer
//000106:             Dim rgb = _freeBuffers.GetObject()
    IL_007c:  ldloc.s    $VB$Closure_ClosureVariable_65_8
    IL_007e:  ldarg.0
    IL_007f:  ldfld      class [ParallelExtensionsExtras]System.Collections.Concurrent.ObjectPool`1<int32[]> Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::_freeBuffers
    IL_0084:  callvirt   instance !0 class [ParallelExtensionsExtras]System.Collections.Concurrent.ObjectPool`1<int32[]>::GetObject()
    IL_0089:  stfld      int32[] Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main/_Closure$__1::$VB$Local_rgb
//000107: 
//000108:             ' Determine the new position of the sphere based on the current time elapsed
//000109:             Dim dy2 = 0.8 * Math.Abs(Math.Sin(totalTime.ElapsedMilliseconds * Math.PI / 3000))
    IL_008e:  ldc.r8     0.80000000000000004
    IL_0097:  ldloc.s    totalTime
    IL_0099:  callvirt   instance int64 [System]System.Diagnostics.Stopwatch::get_ElapsedMilliseconds()
    IL_009e:  conv.r8
    IL_009f:  ldc.r8     3.1415926535897931
    IL_00a8:  mul
    IL_00a9:  ldc.r8     3000.
    IL_00b2:  div
    IL_00b3:  call       float64 [mscorlib]System.Math::Sin(float64)
    IL_00b8:  call       float64 [mscorlib]System.Math::Abs(float64)
    IL_00bd:  mul
    IL_00be:  stloc.s    dy2
//000110:             sphere2.Center.Y = baseY + dy2
    IL_00c0:  ldloc.s    sphere2
    IL_00c2:  ldflda     valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Sphere::Center
    IL_00c7:  ldloc.0
    IL_00c8:  ldloc.s    dy2
    IL_00ca:  add
    IL_00cb:  stfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Y
//000111: 
//000112:             ' Render the scene
//000113:             renderingTime.Reset()
    IL_00d0:  ldloc.2
    IL_00d1:  callvirt   instance void [System]System.Diagnostics.Stopwatch::Reset()
    IL_00d6:  nop
//000114:             renderingTime.Start()
    IL_00d7:  ldloc.2
    IL_00d8:  callvirt   instance void [System]System.Diagnostics.Stopwatch::Start()
    IL_00dd:  nop
//000115:             Try
    IL_00de:  nop
//000116:                 Dim options = New ParallelOptions() With {.MaxDegreeOfParallelism = _degreeOfParallelism, .CancellationToken = _cancellation.Token}
    .try
    {
      IL_00df:  newobj     instance void [mscorlib]System.Threading.Tasks.ParallelOptions::.ctor()
      IL_00e4:  stloc.s    VB$t_ref$S0
      IL_00e6:  ldloc.s    VB$t_ref$S0
      IL_00e8:  ldarg.0
      IL_00e9:  ldfld      int32 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::_degreeOfParallelism
      IL_00ee:  callvirt   instance void [mscorlib]System.Threading.Tasks.ParallelOptions::set_MaxDegreeOfParallelism(int32)
      IL_00f3:  nop
      IL_00f4:  ldloc.s    VB$t_ref$S0
      IL_00f6:  ldarg.0
      IL_00f7:  ldfld      class [mscorlib]System.Threading.CancellationTokenSource Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::_cancellation
      IL_00fc:  callvirt   instance valuetype [mscorlib]System.Threading.CancellationToken [mscorlib]System.Threading.CancellationTokenSource::get_Token()
      IL_0101:  callvirt   instance void [mscorlib]System.Threading.Tasks.ParallelOptions::set_CancellationToken(valuetype [mscorlib]System.Threading.CancellationToken)
      IL_0106:  nop
      IL_0107:  ldloc.s    VB$t_ref$S0
      IL_0109:  stloc.s    options
//000117:                 If Not _parallel Then
      IL_010b:  ldarg.0
      IL_010c:  ldfld      bool Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::_parallel
      IL_0111:  ldc.i4.0
      IL_0112:  ceq
      IL_0114:  stloc.s    VB$CG$t_bool$S0
//000118:                     rayTracer.RenderSequential(scene, rgb)
//000119:                 ElseIf _showThreads Then
//000120:                     rayTracer.RenderParallelShowingThreads(scene, rgb, options)
//000121:                 Else
//000122:                     rayTracer.RenderParallel(scene, rgb, options)
//000123:                 End If
//000124:             Catch ex As OperationCanceledException
//000125:             End Try
//000126:             renderingTime.Stop()
//000127: 
//000128:             ' Update the bitmap in the UI thread
//000129:             Dim framesPerSecond = (1000.0 / renderingTime.ElapsedMilliseconds)
//000130:             Dim a = Sub()
//000131:                         ' Copy the pixel array into the bitmap
//000132:                         Dim bmpData = _bitmap.LockBits(_rect, ImageLockMode.WriteOnly, _bitmap.PixelFormat)
//000133:                         Marshal.Copy(rgb, 0, bmpData.Scan0, rgb.Length)
//000134:                         _bitmap.UnlockBits(bmpData)
//000135:                         _freeBuffers.PutObject(rgb)
//000136: 
//000137:                         ' Refresh the UI
//000138:                         pbRenderedImage.Invalidate()
//000139:                         Text = "Ray Tracer - FPS: " + framesPerSecond.ToString("F1")
//000140:                     End Sub
//000141:             BeginInvoke(a)
//000142:         End While
//000143:     End Sub
//000144: 
//000145:     Private Sub chkParallel_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles chkParallel.CheckedChanged
//000146:         _parallel = chkParallel.Checked
//000147:         lblNumProcs.Enabled = chkParallel.Checked
//000148:         tbNumProcs.Enabled = chkParallel.Checked
//000149:         chkShowThreads.Enabled = chkParallel.Checked
//000150:     End Sub
//000151: 
//000152:     Private Sub tbNumProcs_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbNumProcs.ValueChanged
//000153:         lblNumProcs.Text = tbNumProcs.Value.ToString()
//000154:         _degreeOfParallelism = tbNumProcs.Value
//000155:     End Sub
//000156: 
//000157:     Private Sub MainForm_Load(ByVal sender As Object, ByVal e As EventArgs) Handles MyBase.Load
//000158:         tbNumProcs.Minimum = 1
//000159:         tbNumProcs.Maximum = Environment.ProcessorCount
//000160:         tbNumProcs.Value = tbNumProcs.Maximum
//000161:         lblNumProcs.Text = tbNumProcs.Value.ToString()
//000162:     End Sub
//000163: End Class
      IL_0116:  ldloc.s    VB$CG$t_bool$S0
      IL_0118:  brfalse.s  IL_012b

//000118:                     rayTracer.RenderSequential(scene, rgb)
      IL_011a:  ldloc.1
      IL_011b:  ldloc.3
      IL_011c:  ldloc.s    $VB$Closure_ClosureVariable_65_8
      IL_011e:  ldfld      int32[] Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main/_Closure$__1::$VB$Local_rgb
      IL_0123:  callvirt   instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer::RenderSequential(class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Scene,
                                                                                                                                    int32[])
      IL_0128:  nop
      IL_0129:  br.s       IL_015c

//000119:                 ElseIf _showThreads Then
      IL_012b:  ldarg.0
      IL_012c:  ldfld      bool Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::_showThreads
      IL_0131:  stloc.s    VB$CG$t_bool$S0
//000120:                     rayTracer.RenderParallelShowingThreads(scene, rgb, options)
//000121:                 Else
//000122:                     rayTracer.RenderParallel(scene, rgb, options)
//000123:                 End If
//000124:             Catch ex As OperationCanceledException
//000125:             End Try
//000126:             renderingTime.Stop()
//000127: 
//000128:             ' Update the bitmap in the UI thread
//000129:             Dim framesPerSecond = (1000.0 / renderingTime.ElapsedMilliseconds)
//000130:             Dim a = Sub()
//000131:                         ' Copy the pixel array into the bitmap
//000132:                         Dim bmpData = _bitmap.LockBits(_rect, ImageLockMode.WriteOnly, _bitmap.PixelFormat)
//000133:                         Marshal.Copy(rgb, 0, bmpData.Scan0, rgb.Length)
//000134:                         _bitmap.UnlockBits(bmpData)
//000135:                         _freeBuffers.PutObject(rgb)
//000136: 
//000137:                         ' Refresh the UI
//000138:                         pbRenderedImage.Invalidate()
//000139:                         Text = "Ray Tracer - FPS: " + framesPerSecond.ToString("F1")
//000140:                     End Sub
//000141:             BeginInvoke(a)
//000142:         End While
//000143:     End Sub
//000144: 
//000145:     Private Sub chkParallel_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles chkParallel.CheckedChanged
//000146:         _parallel = chkParallel.Checked
//000147:         lblNumProcs.Enabled = chkParallel.Checked
//000148:         tbNumProcs.Enabled = chkParallel.Checked
//000149:         chkShowThreads.Enabled = chkParallel.Checked
//000150:     End Sub
//000151: 
//000152:     Private Sub tbNumProcs_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbNumProcs.ValueChanged
//000153:         lblNumProcs.Text = tbNumProcs.Value.ToString()
//000154:         _degreeOfParallelism = tbNumProcs.Value
//000155:     End Sub
//000156: 
//000157:     Private Sub MainForm_Load(ByVal sender As Object, ByVal e As EventArgs) Handles MyBase.Load
//000158:         tbNumProcs.Minimum = 1
//000159:         tbNumProcs.Maximum = Environment.ProcessorCount
//000160:         tbNumProcs.Value = tbNumProcs.Maximum
//000161:         lblNumProcs.Text = tbNumProcs.Value.ToString()
//000162:     End Sub
//000163: End Class
      IL_0133:  ldloc.s    VB$CG$t_bool$S0
      IL_0135:  brfalse.s  IL_014a

//000120:                     rayTracer.RenderParallelShowingThreads(scene, rgb, options)
      IL_0137:  ldloc.1
      IL_0138:  ldloc.3
      IL_0139:  ldloc.s    $VB$Closure_ClosureVariable_65_8
      IL_013b:  ldfld      int32[] Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main/_Closure$__1::$VB$Local_rgb
      IL_0140:  ldloc.s    options
      IL_0142:  callvirt   instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer::RenderParallelShowingThreads(class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Scene,
                                                                                                                                                int32[],
                                                                                                                                                class [mscorlib]System.Threading.Tasks.ParallelOptions)
      IL_0147:  nop
      IL_0148:  br.s       IL_015c

//000121:                 Else
      IL_014a:  nop
//000122:                     rayTracer.RenderParallel(scene, rgb, options)
      IL_014b:  ldloc.1
      IL_014c:  ldloc.3
      IL_014d:  ldloc.s    $VB$Closure_ClosureVariable_65_8
      IL_014f:  ldfld      int32[] Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main/_Closure$__1::$VB$Local_rgb
      IL_0154:  ldloc.s    options
      IL_0156:  callvirt   instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer::RenderParallel(class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Scene,
                                                                                                                                  int32[],
                                                                                                                                  class [mscorlib]System.Threading.Tasks.ParallelOptions)
      IL_015b:  nop
//000123:                 End If
      IL_015c:  nop
//000124:             Catch ex As OperationCanceledException
//000125:             End Try
//000126:             renderingTime.Stop()
//000127: 
//000128:             ' Update the bitmap in the UI thread
//000129:             Dim framesPerSecond = (1000.0 / renderingTime.ElapsedMilliseconds)
//000130:             Dim a = Sub()
//000131:                         ' Copy the pixel array into the bitmap
//000132:                         Dim bmpData = _bitmap.LockBits(_rect, ImageLockMode.WriteOnly, _bitmap.PixelFormat)
//000133:                         Marshal.Copy(rgb, 0, bmpData.Scan0, rgb.Length)
//000134:                         _bitmap.UnlockBits(bmpData)
//000135:                         _freeBuffers.PutObject(rgb)
//000136: 
//000137:                         ' Refresh the UI
//000138:                         pbRenderedImage.Invalidate()
//000139:                         Text = "Ray Tracer - FPS: " + framesPerSecond.ToString("F1")
//000140:                     End Sub
//000141:             BeginInvoke(a)
//000142:         End While
//000143:     End Sub
//000144: 
//000145:     Private Sub chkParallel_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles chkParallel.CheckedChanged
//000146:         _parallel = chkParallel.Checked
//000147:         lblNumProcs.Enabled = chkParallel.Checked
//000148:         tbNumProcs.Enabled = chkParallel.Checked
//000149:         chkShowThreads.Enabled = chkParallel.Checked
//000150:     End Sub
//000151: 
//000152:     Private Sub tbNumProcs_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbNumProcs.ValueChanged
//000153:         lblNumProcs.Text = tbNumProcs.Value.ToString()
//000154:         _degreeOfParallelism = tbNumProcs.Value
//000155:     End Sub
//000156: 
//000157:     Private Sub MainForm_Load(ByVal sender As Object, ByVal e As EventArgs) Handles MyBase.Load
//000158:         tbNumProcs.Minimum = 1
//000159:         tbNumProcs.Maximum = Environment.ProcessorCount
//000160:         tbNumProcs.Value = tbNumProcs.Maximum
//000161:         lblNumProcs.Text = tbNumProcs.Value.ToString()
//000162:     End Sub
//000163: End Class
      IL_015d:  leave.s    IL_016f

    }  // end .try
    catch [mscorlib]System.OperationCanceledException 
    {
      IL_015f:  dup
      IL_0160:  call       void [Microsoft.VisualBasic]Microsoft.VisualBasic.CompilerServices.ProjectData::SetProjectError(class [mscorlib]System.Exception)
      IL_0165:  stloc.s    ex
//000124:             Catch ex As OperationCanceledException
      IL_0167:  nop
      IL_0168:  call       void [Microsoft.VisualBasic]Microsoft.VisualBasic.CompilerServices.ProjectData::ClearProjectError()
//000125:             End Try
//000126:             renderingTime.Stop()
//000127: 
//000128:             ' Update the bitmap in the UI thread
//000129:             Dim framesPerSecond = (1000.0 / renderingTime.ElapsedMilliseconds)
//000130:             Dim a = Sub()
//000131:                         ' Copy the pixel array into the bitmap
//000132:                         Dim bmpData = _bitmap.LockBits(_rect, ImageLockMode.WriteOnly, _bitmap.PixelFormat)
//000133:                         Marshal.Copy(rgb, 0, bmpData.Scan0, rgb.Length)
//000134:                         _bitmap.UnlockBits(bmpData)
//000135:                         _freeBuffers.PutObject(rgb)
//000136: 
//000137:                         ' Refresh the UI
//000138:                         pbRenderedImage.Invalidate()
//000139:                         Text = "Ray Tracer - FPS: " + framesPerSecond.ToString("F1")
//000140:                     End Sub
//000141:             BeginInvoke(a)
//000142:         End While
//000143:     End Sub
//000144: 
//000145:     Private Sub chkParallel_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles chkParallel.CheckedChanged
//000146:         _parallel = chkParallel.Checked
//000147:         lblNumProcs.Enabled = chkParallel.Checked
//000148:         tbNumProcs.Enabled = chkParallel.Checked
//000149:         chkShowThreads.Enabled = chkParallel.Checked
//000150:     End Sub
//000151: 
//000152:     Private Sub tbNumProcs_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbNumProcs.ValueChanged
//000153:         lblNumProcs.Text = tbNumProcs.Value.ToString()
//000154:         _degreeOfParallelism = tbNumProcs.Value
//000155:     End Sub
//000156: 
//000157:     Private Sub MainForm_Load(ByVal sender As Object, ByVal e As EventArgs) Handles MyBase.Load
//000158:         tbNumProcs.Minimum = 1
//000159:         tbNumProcs.Maximum = Environment.ProcessorCount
//000160:         tbNumProcs.Value = tbNumProcs.Maximum
//000161:         lblNumProcs.Text = tbNumProcs.Value.ToString()
//000162:     End Sub
//000163: End Class
      IL_016d:  leave.s    IL_016f

//000125:             End Try
    }  // end handler
    IL_016f:  nop
//000126:             renderingTime.Stop()
    IL_0170:  ldloc.2
    IL_0171:  callvirt   instance void [System]System.Diagnostics.Stopwatch::Stop()
    IL_0176:  nop
//000127: 
//000128:             ' Update the bitmap in the UI thread
//000129:             Dim framesPerSecond = (1000.0 / renderingTime.ElapsedMilliseconds)
    IL_0177:  ldloc.s    $VB$Closure_ClosureVariable_65_8
    IL_0179:  ldc.r8     1000.
    IL_0182:  ldloc.2
    IL_0183:  callvirt   instance int64 [System]System.Diagnostics.Stopwatch::get_ElapsedMilliseconds()
    IL_0188:  conv.r8
    IL_0189:  div
    IL_018a:  stfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main/_Closure$__1::$VB$Local_framesPerSecond
//000130:             Dim a = Sub()
    IL_018f:  ldloc.s    $VB$Closure_ClosureVariable_65_8
    IL_0191:  dup
    IL_0192:  ldvirtftn  instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main/_Closure$__1::_Lambda$__3()
    IL_0198:  newobj     instance void VB$AnonymousDelegate_2::.ctor(object,
                                                                     native int)
    IL_019d:  stloc.s    a
//000131:                         ' Copy the pixel array into the bitmap
//000132:                         Dim bmpData = _bitmap.LockBits(_rect, ImageLockMode.WriteOnly, _bitmap.PixelFormat)
//000133:                         Marshal.Copy(rgb, 0, bmpData.Scan0, rgb.Length)
//000134:                         _bitmap.UnlockBits(bmpData)
//000135:                         _freeBuffers.PutObject(rgb)
//000136: 
//000137:                         ' Refresh the UI
//000138:                         pbRenderedImage.Invalidate()
//000139:                         Text = "Ray Tracer - FPS: " + framesPerSecond.ToString("F1")
//000140:                     End Sub
//000141:             BeginInvoke(a)
    IL_019f:  ldarg.0
    IL_01a0:  ldloc.s    a
    IL_01a2:  callvirt   instance class [mscorlib]System.IAsyncResult [System.Windows.Forms]System.Windows.Forms.Control::BeginInvoke(class [mscorlib]System.Delegate)
    IL_01a7:  pop
//000142:         End While
    IL_01a8:  nop
//000102:         While True
    IL_01a9:  ldc.i4.1
    IL_01aa:  stloc.s    VB$CG$t_bool$S0
//000103:             token.ThrowIfCancellationRequested()
//000104: 
//000105:             ' Get the next buffer
//000106:             Dim rgb = _freeBuffers.GetObject()
//000107: 
//000108:             ' Determine the new position of the sphere based on the current time elapsed
//000109:             Dim dy2 = 0.8 * Math.Abs(Math.Sin(totalTime.ElapsedMilliseconds * Math.PI / 3000))
//000110:             sphere2.Center.Y = baseY + dy2
//000111: 
//000112:             ' Render the scene
//000113:             renderingTime.Reset()
//000114:             renderingTime.Start()
//000115:             Try
//000116:                 Dim options = New ParallelOptions() With {.MaxDegreeOfParallelism = _degreeOfParallelism, .CancellationToken = _cancellation.Token}
//000117:                 If Not _parallel Then
//000118:                     rayTracer.RenderSequential(scene, rgb)
//000119:                 ElseIf _showThreads Then
//000120:                     rayTracer.RenderParallelShowingThreads(scene, rgb, options)
//000121:                 Else
//000122:                     rayTracer.RenderParallel(scene, rgb, options)
//000123:                 End If
//000124:             Catch ex As OperationCanceledException
//000125:             End Try
//000126:             renderingTime.Stop()
//000127: 
//000128:             ' Update the bitmap in the UI thread
//000129:             Dim framesPerSecond = (1000.0 / renderingTime.ElapsedMilliseconds)
//000130:             Dim a = Sub()
//000131:                         ' Copy the pixel array into the bitmap
//000132:                         Dim bmpData = _bitmap.LockBits(_rect, ImageLockMode.WriteOnly, _bitmap.PixelFormat)
//000133:                         Marshal.Copy(rgb, 0, bmpData.Scan0, rgb.Length)
//000134:                         _bitmap.UnlockBits(bmpData)
//000135:                         _freeBuffers.PutObject(rgb)
//000136: 
//000137:                         ' Refresh the UI
//000138:                         pbRenderedImage.Invalidate()
//000139:                         Text = "Ray Tracer - FPS: " + framesPerSecond.ToString("F1")
//000140:                     End Sub
//000141:             BeginInvoke(a)
//000142:         End While
//000143:     End Sub
//000144: 
//000145:     Private Sub chkParallel_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles chkParallel.CheckedChanged
//000146:         _parallel = chkParallel.Checked
//000147:         lblNumProcs.Enabled = chkParallel.Checked
//000148:         tbNumProcs.Enabled = chkParallel.Checked
//000149:         chkShowThreads.Enabled = chkParallel.Checked
//000150:     End Sub
//000151: 
//000152:     Private Sub tbNumProcs_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbNumProcs.ValueChanged
//000153:         lblNumProcs.Text = tbNumProcs.Value.ToString()
//000154:         _degreeOfParallelism = tbNumProcs.Value
//000155:     End Sub
//000156: 
//000157:     Private Sub MainForm_Load(ByVal sender As Object, ByVal e As EventArgs) Handles MyBase.Load
//000158:         tbNumProcs.Minimum = 1
//000159:         tbNumProcs.Maximum = Environment.ProcessorCount
//000160:         tbNumProcs.Value = tbNumProcs.Maximum
//000161:         lblNumProcs.Text = tbNumProcs.Value.ToString()
//000162:     End Sub
//000163: End Class
    IL_01ac:  ldloc.s    VB$CG$t_bool$S0
    IL_01ae:  brtrue     IL_0063

//000143:     End Sub
    IL_01b3:  nop
    IL_01b4:  ret
  } // end of method Main::RenderLoop

  .method private instance void  chkParallel_CheckedChanged(object sender,
                                                            class [mscorlib]System.EventArgs e) cil managed
  {
    // Code size       89 (0x59)
    .maxstack  2
//000144: 
//000145:     Private Sub chkParallel_CheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles chkParallel.CheckedChanged
    IL_0000:  nop
//000146:         _parallel = chkParallel.Checked
    IL_0001:  ldarg.0
    IL_0002:  ldarg.0
    IL_0003:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.CheckBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_chkParallel()
    IL_0008:  callvirt   instance bool [System.Windows.Forms]System.Windows.Forms.CheckBox::get_Checked()
    IL_000d:  stfld      bool Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::_parallel
//000147:         lblNumProcs.Enabled = chkParallel.Checked
    IL_0012:  ldarg.0
    IL_0013:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Label Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_lblNumProcs()
    IL_0018:  ldarg.0
    IL_0019:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.CheckBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_chkParallel()
    IL_001e:  callvirt   instance bool [System.Windows.Forms]System.Windows.Forms.CheckBox::get_Checked()
    IL_0023:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Enabled(bool)
    IL_0028:  nop
//000148:         tbNumProcs.Enabled = chkParallel.Checked
    IL_0029:  ldarg.0
    IL_002a:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.TrackBar Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_tbNumProcs()
    IL_002f:  ldarg.0
    IL_0030:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.CheckBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_chkParallel()
    IL_0035:  callvirt   instance bool [System.Windows.Forms]System.Windows.Forms.CheckBox::get_Checked()
    IL_003a:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Enabled(bool)
    IL_003f:  nop
//000149:         chkShowThreads.Enabled = chkParallel.Checked
    IL_0040:  ldarg.0
    IL_0041:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.CheckBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_chkShowThreads()
    IL_0046:  ldarg.0
    IL_0047:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.CheckBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_chkParallel()
    IL_004c:  callvirt   instance bool [System.Windows.Forms]System.Windows.Forms.CheckBox::get_Checked()
    IL_0051:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Enabled(bool)
    IL_0056:  nop
//000150:     End Sub
    IL_0057:  nop
    IL_0058:  ret
  } // end of method Main::chkParallel_CheckedChanged

  .method private instance void  tbNumProcs_ValueChanged(object sender,
                                                         class [mscorlib]System.EventArgs e) cil managed
  {
    // Code size       51 (0x33)
    .maxstack  2
    .locals init ([0] int32 VB$t_i4$S0)
//000151: 
//000152:     Private Sub tbNumProcs_ValueChanged(ByVal sender As Object, ByVal e As EventArgs) Handles tbNumProcs.ValueChanged
    IL_0000:  nop
//000153:         lblNumProcs.Text = tbNumProcs.Value.ToString()
    IL_0001:  ldarg.0
    IL_0002:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Label Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_lblNumProcs()
    IL_0007:  ldarg.0
    IL_0008:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.TrackBar Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_tbNumProcs()
    IL_000d:  callvirt   instance int32 [System.Windows.Forms]System.Windows.Forms.TrackBar::get_Value()
    IL_0012:  stloc.0
    IL_0013:  ldloca.s   VB$t_i4$S0
    IL_0015:  call       instance string [mscorlib]System.Int32::ToString()
    IL_001a:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Label::set_Text(string)
    IL_001f:  nop
//000154:         _degreeOfParallelism = tbNumProcs.Value
    IL_0020:  ldarg.0
    IL_0021:  ldarg.0
    IL_0022:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.TrackBar Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_tbNumProcs()
    IL_0027:  callvirt   instance int32 [System.Windows.Forms]System.Windows.Forms.TrackBar::get_Value()
    IL_002c:  stfld      int32 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::_degreeOfParallelism
//000155:     End Sub
    IL_0031:  nop
    IL_0032:  ret
  } // end of method Main::tbNumProcs_ValueChanged

  .method private instance void  MainForm_Load(object sender,
                                               class [mscorlib]System.EventArgs e) cil managed
  {
    // Code size       87 (0x57)
    .maxstack  2
    .locals init ([0] int32 VB$t_i4$S0)
//000156: 
//000157:     Private Sub MainForm_Load(ByVal sender As Object, ByVal e As EventArgs) Handles MyBase.Load
    IL_0000:  nop
//000158:         tbNumProcs.Minimum = 1
    IL_0001:  ldarg.0
    IL_0002:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.TrackBar Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_tbNumProcs()
    IL_0007:  ldc.i4.1
    IL_0008:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.TrackBar::set_Minimum(int32)
    IL_000d:  nop
//000159:         tbNumProcs.Maximum = Environment.ProcessorCount
    IL_000e:  ldarg.0
    IL_000f:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.TrackBar Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_tbNumProcs()
    IL_0014:  call       int32 [mscorlib]System.Environment::get_ProcessorCount()
    IL_0019:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.TrackBar::set_Maximum(int32)
    IL_001e:  nop
//000160:         tbNumProcs.Value = tbNumProcs.Maximum
    IL_001f:  ldarg.0
    IL_0020:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.TrackBar Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_tbNumProcs()
    IL_0025:  ldarg.0
    IL_0026:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.TrackBar Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_tbNumProcs()
    IL_002b:  callvirt   instance int32 [System.Windows.Forms]System.Windows.Forms.TrackBar::get_Maximum()
    IL_0030:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.TrackBar::set_Value(int32)
    IL_0035:  nop
//000161:         lblNumProcs.Text = tbNumProcs.Value.ToString()
    IL_0036:  ldarg.0
    IL_0037:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Label Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_lblNumProcs()
    IL_003c:  ldarg.0
    IL_003d:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.TrackBar Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_tbNumProcs()
    IL_0042:  callvirt   instance int32 [System.Windows.Forms]System.Windows.Forms.TrackBar::get_Value()
    IL_0047:  stloc.0
    IL_0048:  ldloca.s   VB$t_i4$S0
    IL_004a:  call       instance string [mscorlib]System.Int32::ToString()
    IL_004f:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Label::set_Text(string)
    IL_0054:  nop
//000162:     End Sub
    IL_0055:  nop
    IL_0056:  ret
  } // end of method Main::MainForm_Load

  .method private specialname instance void 
          _Lambda$__1(class [mscorlib]System.Threading.Tasks.Task c) cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       76 (0x4c)
    .maxstack  2
//000042:                 ContinueWith(Sub(c)
    IL_0000:  nop
//000043:                                  chkParallel.Enabled = True
    IL_0001:  ldarg.0
    IL_0002:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.CheckBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_chkParallel()
    IL_0007:  ldc.i4.1
    IL_0008:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Enabled(bool)
    IL_000d:  nop
//000044:                                  chkShowThreads.Enabled = chkParallel.Checked
    IL_000e:  ldarg.0
    IL_000f:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.CheckBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_chkShowThreads()
    IL_0014:  ldarg.0
    IL_0015:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.CheckBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_chkParallel()
    IL_001a:  callvirt   instance bool [System.Windows.Forms]System.Windows.Forms.CheckBox::get_Checked()
    IL_001f:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Enabled(bool)
    IL_0024:  nop
//000045:                                  btnStartStop.Enabled = True
    IL_0025:  ldarg.0
    IL_0026:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Button Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_btnStartStop()
    IL_002b:  ldc.i4.1
    IL_002c:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.Control::set_Enabled(bool)
    IL_0031:  nop
//000046:                                  btnStartStop.Text = "Start"
    IL_0032:  ldarg.0
    IL_0033:  callvirt   instance class [System.Windows.Forms]System.Windows.Forms.Button Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_btnStartStop()
    IL_0038:  ldstr      "Start"
    IL_003d:  callvirt   instance void [System.Windows.Forms]System.Windows.Forms.ButtonBase::set_Text(string)
    IL_0042:  nop
//000047:                                  _cancellation = Nothing
    IL_0043:  ldarg.0
    IL_0044:  ldnull
    IL_0045:  stfld      class [mscorlib]System.Threading.CancellationTokenSource Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::_cancellation
//000048:                              End Sub, TaskScheduler.FromCurrentSynchronizationContext())
    IL_004a:  nop
    IL_004b:  ret
  } // end of method Main::_Lambda$__1

  .method private specialname instance int32[] 
          _Lambda$__2() cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       27 (0x1b)
    .maxstack  2
    .locals init ([0] int32[] _Lambda$__2)
//000049:             chkShowThreads.Enabled = False
//000050:             chkParallel.Enabled = False
//000051:             btnStartStop.Text = "Stop"
//000052:         End If
//000053:     End Sub
//000054: 
//000055:     Private Function FixUpFormAfterRendering() As Boolean
//000056:         btnStartStop.Enabled = True
//000057:         chkParallel.Enabled = True
//000058:         btnStartStop.Text = "Start"
//000059:         Return True
//000060:     End Function
//000061: 
//000062:     Private Sub ConfigureImage()
//000063:         ' If we need to create a new bitmap, do so
//000064:         If _bitmap Is Nothing OrElse _bitmap.Width <> pbRenderedImage.Width OrElse _bitmap.Height <> pbRenderedImage.Height Then
//000065:             ' Dispose of the old one if one exists
//000066:             If _bitmap IsNot Nothing Then
//000067:                 pbRenderedImage.Image = Nothing
//000068:                 _bitmap.Dispose()
//000069:             End If
//000070: 
//000071:             ' We always render a square even if the window isn't square
//000072:             Dim min = Math.Min(pbRenderedImage.Width, pbRenderedImage.Height)
//000073:             _width = min
//000074:             _height = min
//000075: 
//000076:             ' Resize the rendering arrays accordingly
//000077:             _freeBuffers = New ObjectPool(Of Int32())(Function() New Int32(_width * _height - 1) {})
    IL_0000:  ldarg.0
    IL_0001:  ldfld      int32 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::_width
    IL_0006:  ldarg.0
    IL_0007:  ldfld      int32 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::_height
    IL_000c:  mul.ovf
    IL_000d:  ldc.i4.1
    IL_000e:  sub.ovf
    IL_000f:  ldc.i4.1
    IL_0010:  add.ovf
    IL_0011:  newarr     [mscorlib]System.Int32
    IL_0016:  stloc.0
    IL_0017:  br.s       IL_0019

    IL_0019:  ldloc.0
    IL_001a:  ret
  } // end of method Main::_Lambda$__2

  .property instance class [System.Windows.Forms]System.Windows.Forms.Label
          lblNumProcs()
  {
    .get instance class [System.Windows.Forms]System.Windows.Forms.Label Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_lblNumProcs()
    .set instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::set_lblNumProcs(class [System.Windows.Forms]System.Windows.Forms.Label)
  } // end of property Main::lblNumProcs
  .property instance class [System.Windows.Forms]System.Windows.Forms.TrackBar
          tbNumProcs()
  {
    .get instance class [System.Windows.Forms]System.Windows.Forms.TrackBar Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_tbNumProcs()
    .set instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::set_tbNumProcs(class [System.Windows.Forms]System.Windows.Forms.TrackBar)
  } // end of property Main::tbNumProcs
  .property instance class [System.Windows.Forms]System.Windows.Forms.CheckBox
          chkShowThreads()
  {
    .get instance class [System.Windows.Forms]System.Windows.Forms.CheckBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_chkShowThreads()
    .set instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::set_chkShowThreads(class [System.Windows.Forms]System.Windows.Forms.CheckBox)
  } // end of property Main::chkShowThreads
  .property instance class [System.Windows.Forms]System.Windows.Forms.CheckBox
          chkParallel()
  {
    .set instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::set_chkParallel(class [System.Windows.Forms]System.Windows.Forms.CheckBox)
    .get instance class [System.Windows.Forms]System.Windows.Forms.CheckBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_chkParallel()
  } // end of property Main::chkParallel
  .property instance class [System.Windows.Forms]System.Windows.Forms.Button
          btnStartStop()
  {
    .get instance class [System.Windows.Forms]System.Windows.Forms.Button Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_btnStartStop()
    .set instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::set_btnStartStop(class [System.Windows.Forms]System.Windows.Forms.Button)
  } // end of property Main::btnStartStop
  .property instance class [System.Windows.Forms]System.Windows.Forms.PictureBox
          pbRenderedImage()
  {
    .get instance class [System.Windows.Forms]System.Windows.Forms.PictureBox Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::get_pbRenderedImage()
    .set instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main::set_pbRenderedImage(class [System.Windows.Forms]System.Windows.Forms.PictureBox)
  } // end of property Main::pbRenderedImage
} // end of class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Main

.class private auto ansi sealed Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.Resources.Resources
       extends [mscorlib]System.Object
{
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
  .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
  .custom instance void [Microsoft.VisualBasic]Microsoft.VisualBasic.CompilerServices.StandardModuleAttribute::.ctor() = ( 01 00 00 00 ) 
  .custom instance void [Microsoft.VisualBasic]Microsoft.VisualBasic.HideModuleNameAttribute::.ctor() = ( 01 00 00 00 ) 
  .custom instance void [System]System.CodeDom.Compiler.GeneratedCodeAttribute::.ctor(string,
                                                                                      string) = ( 01 00 33 53 79 73 74 65 6D 2E 52 65 73 6F 75 72   // ..3System.Resour
                                                                                                  63 65 73 2E 54 6F 6F 6C 73 2E 53 74 72 6F 6E 67   // ces.Tools.Strong
                                                                                                  6C 79 54 79 70 65 64 52 65 73 6F 75 72 63 65 42   // lyTypedResourceB
                                                                                                  75 69 6C 64 65 72 07 34 2E 30 2E 30 2E 30 00 00 ) // uilder.4.0.0.0..
  .field private static class [mscorlib]System.Resources.ResourceManager resourceMan
  .field private static class [mscorlib]System.Globalization.CultureInfo resourceCulture
  .method assembly specialname static class [mscorlib]System.Resources.ResourceManager 
          get_ResourceManager() cil managed
  {
    // Code size       59 (0x3b)
    .maxstack  2
    .locals init ([0] class [mscorlib]System.Resources.ResourceManager ResourceManager,
             [1] class [mscorlib]System.Resources.ResourceManager temp,
             [2] bool VB$CG$t_bool$S0)
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Raytracer\Raytracer_VisualBasic\My Project\Resources.Designer.vb' 
//000040:             Get
    IL_0000:  nop
//000041:                 If Object.ReferenceEquals(resourceMan, Nothing) Then
    IL_0001:  ldsfld     class [mscorlib]System.Resources.ResourceManager Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.Resources.Resources::resourceMan
    IL_0006:  ldnull
    IL_0007:  call       bool [mscorlib]System.Object::ReferenceEquals(object,
                                                                       object)
    IL_000c:  stloc.2
//000042:                     Dim temp As Global.System.Resources.ResourceManager = New Global.System.Resources.ResourceManager("Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Resources", GetType(Resources).Assembly)
//000043:                     resourceMan = temp
//000044:                 End If
//000045:                 Return resourceMan
//000046:             End Get
//000047:         End Property
//000048:         
//000049:         '''<summary>
//000050:         '''  Overrides the current thread's CurrentUICulture property for all
//000051:         '''  resource lookups using this strongly typed resource class.
//000052:         '''</summary>
//000053:         <Global.System.ComponentModel.EditorBrowsableAttribute(Global.System.ComponentModel.EditorBrowsableState.Advanced)>  _
//000054:         Friend Property Culture() As Global.System.Globalization.CultureInfo
//000055:             Get
//000056:                 Return resourceCulture
//000057:             End Get
//000058:             Set
//000059:                 resourceCulture = value
//000060:             End Set
//000061:         End Property
//000062:     End Module
//000063: End Namespace
    IL_000d:  ldloc.2
    IL_000e:  brfalse.s  IL_0030

//000042:                     Dim temp As Global.System.Resources.ResourceManager = New Global.System.Resources.ResourceManager("Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Resources", GetType(Resources).Assembly)
    IL_0010:  ldstr      "Microsoft.ParallelComputingPlatform.ParallelExtens"
    + "ions.Samples.Resources"
    IL_0015:  ldtoken    Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.Resources.Resources
    IL_001a:  call       class [mscorlib]System.Type [mscorlib]System.Type::GetTypeFromHandle(valuetype [mscorlib]System.RuntimeTypeHandle)
    IL_001f:  callvirt   instance class [mscorlib]System.Reflection.Assembly [mscorlib]System.Type::get_Assembly()
    IL_0024:  newobj     instance void [mscorlib]System.Resources.ResourceManager::.ctor(string,
                                                                                         class [mscorlib]System.Reflection.Assembly)
    IL_0029:  stloc.1
//000043:                     resourceMan = temp
    IL_002a:  ldloc.1
    IL_002b:  stsfld     class [mscorlib]System.Resources.ResourceManager Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.Resources.Resources::resourceMan
//000044:                 End If
    IL_0030:  nop
//000045:                 Return resourceMan
    IL_0031:  ldsfld     class [mscorlib]System.Resources.ResourceManager Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.Resources.Resources::resourceMan
    IL_0036:  stloc.0
    IL_0037:  br.s       IL_0039

//000046:             End Get
    IL_0039:  ldloc.0
    IL_003a:  ret
  } // end of method Resources::get_ResourceManager

  .method assembly specialname static class [mscorlib]System.Globalization.CultureInfo 
          get_Culture() cil managed
  {
    // Code size       11 (0xb)
    .maxstack  1
    .locals init ([0] class [mscorlib]System.Globalization.CultureInfo Culture)
//000047:         End Property
//000048:         
//000049:         '''<summary>
//000050:         '''  Overrides the current thread's CurrentUICulture property for all
//000051:         '''  resource lookups using this strongly typed resource class.
//000052:         '''</summary>
//000053:         <Global.System.ComponentModel.EditorBrowsableAttribute(Global.System.ComponentModel.EditorBrowsableState.Advanced)>  _
//000054:         Friend Property Culture() As Global.System.Globalization.CultureInfo
//000055:             Get
    IL_0000:  nop
//000056:                 Return resourceCulture
    IL_0001:  ldsfld     class [mscorlib]System.Globalization.CultureInfo Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.Resources.Resources::resourceCulture
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

//000057:             End Get
    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method Resources::get_Culture

  .method assembly specialname static void 
          set_Culture(class [mscorlib]System.Globalization.CultureInfo Value) cil managed
  {
    // Code size       9 (0x9)
    .maxstack  8
//000058:             Set
    IL_0000:  nop
//000059:                 resourceCulture = value
    IL_0001:  ldarg.0
    IL_0002:  stsfld     class [mscorlib]System.Globalization.CultureInfo Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.Resources.Resources::resourceCulture
//000060:             End Set
    IL_0007:  nop
    IL_0008:  ret
  } // end of method Resources::set_Culture

  .property class [mscorlib]System.Resources.ResourceManager
          ResourceManager()
  {
    .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 02 00 00 00 00 00 ) 
    .get class [mscorlib]System.Resources.ResourceManager Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.Resources.Resources::get_ResourceManager()
  } // end of property Resources::ResourceManager
  .property class [mscorlib]System.Globalization.CultureInfo
          Culture()
  {
    .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 02 00 00 00 00 00 ) 
    .get class [mscorlib]System.Globalization.CultureInfo Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.Resources.Resources::get_Culture()
    .set void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.Resources.Resources::set_Culture(class [mscorlib]System.Globalization.CultureInfo)
  } // end of property Resources::Culture
} // end of class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.Resources.Resources

.class private auto ansi sealed beforefieldinit Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MySettings
       extends [System]System.Configuration.ApplicationSettingsBase
{
  .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 02 00 00 00 00 00 ) 
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
  .custom instance void [System]System.CodeDom.Compiler.GeneratedCodeAttribute::.ctor(string,
                                                                                      string) = ( 01 00 4B 4D 69 63 72 6F 73 6F 66 74 2E 56 69 73   // ..KMicrosoft.Vis
                                                                                                  75 61 6C 53 74 75 64 69 6F 2E 45 64 69 74 6F 72   // ualStudio.Editor
                                                                                                  73 2E 53 65 74 74 69 6E 67 73 44 65 73 69 67 6E   // s.SettingsDesign
                                                                                                  65 72 2E 53 65 74 74 69 6E 67 73 53 69 6E 67 6C   // er.SettingsSingl
                                                                                                  65 46 69 6C 65 47 65 6E 65 72 61 74 6F 72 08 31   // eFileGenerator.1
                                                                                                  30 2E 30 2E 30 2E 30 00 00 )                      // 0.0.0.0..
  .field private static class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MySettings defaultInstance
  .field private static bool addedHandler
  .field private static object addedHandlerLockObject
  .method private specialname rtspecialname static 
          void  .cctor() cil managed
  {
    // Code size       37 (0x25)
    .maxstack  8
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Raytracer\Raytracer_VisualBasic\My Project\Settings.Designer.vb' 
//000023:         Private Shared defaultInstance As MySettings = CType(Global.System.Configuration.ApplicationSettingsBase.Synchronized(New MySettings()),MySettings)
    IL_0000:  newobj     instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MySettings::.ctor()
    IL_0005:  call       class [System]System.Configuration.SettingsBase [System]System.Configuration.SettingsBase::Synchronized(class [System]System.Configuration.SettingsBase)
    IL_000a:  castclass  Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MySettings
    IL_000f:  stsfld     class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MySettings Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MySettings::defaultInstance
//000024:         
//000025: #Region "My.Settings Auto-Save Functionality"
//000026: #If _MyType = "WindowsForms" Then
//000027:     Private Shared addedHandler As Boolean
//000028: 
//000029:     Private Shared addedHandlerLockObject As New Object
    IL_0014:  newobj     instance void [mscorlib]System.Object::.ctor()
    IL_0019:  call       object [mscorlib]System.Runtime.CompilerServices.RuntimeHelpers::GetObjectValue(object)
    IL_001e:  stsfld     object Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MySettings::addedHandlerLockObject
    IL_0023:  nop
    IL_0024:  ret
  } // end of method MySettings::.cctor

  .method public specialname rtspecialname 
          instance void  .ctor() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       9 (0x9)
    .maxstack  8
    IL_0000:  ldarg.0
    IL_0001:  call       instance void [System]System.Configuration.ApplicationSettingsBase::.ctor()
    IL_0006:  nop
    IL_0007:  nop
    IL_0008:  ret
  } // end of method MySettings::.ctor

  .method private static void  AutoSaveSettings(object sender,
                                                class [mscorlib]System.EventArgs e) cil managed
  {
    .custom instance void [System]System.ComponentModel.EditorBrowsableAttribute::.ctor(valuetype [System]System.ComponentModel.EditorBrowsableState) = ( 01 00 02 00 00 00 00 00 ) 
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       29 (0x1d)
    .maxstack  1
    .locals init ([0] bool VB$CG$t_bool$S0)
//000030: 
//000031:     <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.EditorBrowsableAttribute(Global.System.ComponentModel.EditorBrowsableState.Advanced)> _
//000032:     Private Shared Sub AutoSaveSettings(ByVal sender As Global.System.Object, ByVal e As Global.System.EventArgs)
    IL_0000:  nop
//000033:         If My.Application.SaveMySettingsOnExit Then
    IL_0001:  call       class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyApplication Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject::get_Application()
    IL_0006:  callvirt   instance bool [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase::get_SaveMySettingsOnExit()
    IL_000b:  stloc.0
//000034:             My.Settings.Save()
//000035:         End If
//000036:     End Sub
//000037: #End If
//000038: #End Region
//000039:         
//000040:         Public Shared ReadOnly Property [Default]() As MySettings
//000041:             Get
//000042:                 
//000043: #If _MyType = "WindowsForms" Then
//000044:                If Not addedHandler Then
//000045:                     SyncLock addedHandlerLockObject
//000046:                         If Not addedHandler Then
//000047:                             AddHandler My.Application.Shutdown, AddressOf AutoSaveSettings
//000048:                             addedHandler = True
//000049:                         End If
//000050:                     End SyncLock
//000051:                 End If
//000052: #End If
//000053:                 Return defaultInstance
//000054:             End Get
//000055:         End Property
//000056:     End Class
//000057: End Namespace
//000058: 
//000059: Namespace My
//000060:     
//000061:     <Global.Microsoft.VisualBasic.HideModuleNameAttribute(),  _
//000062:      Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
//000063:      Global.System.Runtime.CompilerServices.CompilerGeneratedAttribute()>  _
//000064:     Friend Module MySettingsProperty
//000065:         
//000066:         <Global.System.ComponentModel.Design.HelpKeywordAttribute("My.Settings")>  _
//000067:         Friend ReadOnly Property Settings() As Global.Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MySettings
//000068:             Get
//000069:                 Return Global.Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MySettings.Default
//000070:             End Get
//000071:         End Property
//000072:     End Module
//000073: End Namespace
    IL_000c:  ldloc.0
    IL_000d:  brfalse.s  IL_001a

//000034:             My.Settings.Save()
    IL_000f:  call       class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MySettings Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MySettingsProperty::get_Settings()
    IL_0014:  callvirt   instance void [System]System.Configuration.ApplicationSettingsBase::Save()
    IL_0019:  nop
//000035:         End If
    IL_001a:  nop
//000036:     End Sub
    IL_001b:  nop
    IL_001c:  ret
  } // end of method MySettings::AutoSaveSettings

  .method public specialname static class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MySettings 
          get_Default() cil managed
  {
    // Code size       109 (0x6d)
    .maxstack  3
    .locals init ([0] class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MySettings Default,
             [1] object VB$t_ref$L0,
             [2] bool VB$t_bool$L0,
             [3] bool VB$CG$t_bool$S0)
//000037: #End If
//000038: #End Region
//000039:         
//000040:         Public Shared ReadOnly Property [Default]() As MySettings
//000041:             Get
    IL_0000:  nop
//000042:                 
//000043: #If _MyType = "WindowsForms" Then
//000044:                If Not addedHandler Then
    IL_0001:  ldsfld     bool Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MySettings::addedHandler
    IL_0006:  ldc.i4.0
    IL_0007:  ceq
    IL_0009:  stloc.3
//000045:                     SyncLock addedHandlerLockObject
//000046:                         If Not addedHandler Then
//000047:                             AddHandler My.Application.Shutdown, AddressOf AutoSaveSettings
//000048:                             addedHandler = True
//000049:                         End If
//000050:                     End SyncLock
//000051:                 End If
//000052: #End If
//000053:                 Return defaultInstance
//000054:             End Get
//000055:         End Property
//000056:     End Class
//000057: End Namespace
//000058: 
//000059: Namespace My
//000060:     
//000061:     <Global.Microsoft.VisualBasic.HideModuleNameAttribute(),  _
//000062:      Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
//000063:      Global.System.Runtime.CompilerServices.CompilerGeneratedAttribute()>  _
//000064:     Friend Module MySettingsProperty
//000065:         
//000066:         <Global.System.ComponentModel.Design.HelpKeywordAttribute("My.Settings")>  _
//000067:         Friend ReadOnly Property Settings() As Global.Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MySettings
//000068:             Get
//000069:                 Return Global.Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MySettings.Default
//000070:             End Get
//000071:         End Property
//000072:     End Module
//000073: End Namespace
    IL_000a:  ldloc.3
    IL_000b:  brfalse.s  IL_0062

//000045:                     SyncLock addedHandlerLockObject
    IL_000d:  nop
    IL_000e:  ldsfld     object Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MySettings::addedHandlerLockObject
    IL_0013:  stloc.1
    IL_0014:  ldloc.1
    IL_0015:  call       void [Microsoft.VisualBasic]Microsoft.VisualBasic.CompilerServices.ObjectFlowControl::CheckForSyncLockOnValueType(object)
    IL_001a:  nop
    IL_001b:  ldc.i4.0
    IL_001c:  stloc.2
    IL_001d:  nop
    .try
    {
      IL_001e:  ldloc.1
      IL_001f:  ldloca.s   VB$t_bool$L0
      IL_0021:  call       void [mscorlib]System.Threading.Monitor::Enter(object,
                                                                          bool&)
      IL_0026:  nop
//000046:                         If Not addedHandler Then
      IL_0027:  ldsfld     bool Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MySettings::addedHandler
      IL_002c:  ldc.i4.0
      IL_002d:  ceq
      IL_002f:  stloc.3
//000047:                             AddHandler My.Application.Shutdown, AddressOf AutoSaveSettings
//000048:                             addedHandler = True
//000049:                         End If
//000050:                     End SyncLock
//000051:                 End If
//000052: #End If
//000053:                 Return defaultInstance
//000054:             End Get
//000055:         End Property
//000056:     End Class
//000057: End Namespace
//000058: 
//000059: Namespace My
//000060:     
//000061:     <Global.Microsoft.VisualBasic.HideModuleNameAttribute(),  _
//000062:      Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
//000063:      Global.System.Runtime.CompilerServices.CompilerGeneratedAttribute()>  _
//000064:     Friend Module MySettingsProperty
//000065:         
//000066:         <Global.System.ComponentModel.Design.HelpKeywordAttribute("My.Settings")>  _
//000067:         Friend ReadOnly Property Settings() As Global.Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MySettings
//000068:             Get
//000069:                 Return Global.Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MySettings.Default
//000070:             End Get
//000071:         End Property
//000072:     End Module
//000073: End Namespace
      IL_0030:  ldloc.3
      IL_0031:  brfalse.s  IL_0050

//000047:                             AddHandler My.Application.Shutdown, AddressOf AutoSaveSettings
      IL_0033:  call       class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyApplication Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MyProject::get_Application()
      IL_0038:  ldnull
      IL_0039:  ldftn      void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MySettings::AutoSaveSettings(object,
                                                                                                                               class [mscorlib]System.EventArgs)
      IL_003f:  newobj     instance void [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.ShutdownEventHandler::.ctor(object,
                                                                                                                                      native int)
      IL_0044:  callvirt   instance void [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase::add_Shutdown(class [Microsoft.VisualBasic]Microsoft.VisualBasic.ApplicationServices.ShutdownEventHandler)
      IL_0049:  nop
//000048:                             addedHandler = True
      IL_004a:  ldc.i4.1
      IL_004b:  stsfld     bool Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MySettings::addedHandler
//000049:                         End If
      IL_0050:  nop
//000050:                     End SyncLock
      IL_0051:  nop
      IL_0052:  leave.s    IL_0062

    }  // end .try
    finally
    {
      IL_0054:  ldloc.2
      IL_0055:  stloc.3
      IL_0056:  ldloc.3
      IL_0057:  brfalse.s  IL_0060

      IL_0059:  ldloc.1
      IL_005a:  call       void [mscorlib]System.Threading.Monitor::Exit(object)
      IL_005f:  nop
      IL_0060:  nop
//000051:                 End If
//000052: #End If
//000053:                 Return defaultInstance
//000054:             End Get
//000055:         End Property
//000056:     End Class
//000057: End Namespace
//000058: 
//000059: Namespace My
//000060:     
//000061:     <Global.Microsoft.VisualBasic.HideModuleNameAttribute(),  _
//000062:      Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
//000063:      Global.System.Runtime.CompilerServices.CompilerGeneratedAttribute()>  _
//000064:     Friend Module MySettingsProperty
//000065:         
//000066:         <Global.System.ComponentModel.Design.HelpKeywordAttribute("My.Settings")>  _
//000067:         Friend ReadOnly Property Settings() As Global.Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MySettings
//000068:             Get
//000069:                 Return Global.Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MySettings.Default
//000070:             End Get
//000071:         End Property
//000072:     End Module
//000073: End Namespace
      IL_0061:  endfinally
//000051:                 End If
    }  // end handler
    IL_0062:  nop
//000052: #End If
//000053:                 Return defaultInstance
    IL_0063:  ldsfld     class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MySettings Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MySettings::defaultInstance
    IL_0068:  stloc.0
    IL_0069:  br.s       IL_006b

//000054:             End Get
    IL_006b:  ldloc.0
    IL_006c:  ret
  } // end of method MySettings::get_Default

  .property class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MySettings
          Default()
  {
    .get class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MySettings Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MySettings::get_Default()
  } // end of property MySettings::Default
} // end of class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MySettings

.class private auto ansi sealed Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MySettingsProperty
       extends [mscorlib]System.Object
{
  .custom instance void [Microsoft.VisualBasic]Microsoft.VisualBasic.CompilerServices.StandardModuleAttribute::.ctor() = ( 01 00 00 00 ) 
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
  .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
  .custom instance void [Microsoft.VisualBasic]Microsoft.VisualBasic.HideModuleNameAttribute::.ctor() = ( 01 00 00 00 ) 
  .method assembly specialname static class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MySettings 
          get_Settings() cil managed
  {
    // Code size       11 (0xb)
    .maxstack  1
    .locals init ([0] class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MySettings Settings)
//000055:         End Property
//000056:     End Class
//000057: End Namespace
//000058: 
//000059: Namespace My
//000060:     
//000061:     <Global.Microsoft.VisualBasic.HideModuleNameAttribute(),  _
//000062:      Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
//000063:      Global.System.Runtime.CompilerServices.CompilerGeneratedAttribute()>  _
//000064:     Friend Module MySettingsProperty
//000065:         
//000066:         <Global.System.ComponentModel.Design.HelpKeywordAttribute("My.Settings")>  _
//000067:         Friend ReadOnly Property Settings() As Global.Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MySettings
//000068:             Get
    IL_0000:  nop
//000069:                 Return Global.Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MySettings.Default
    IL_0001:  call       class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MySettings Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MySettings::get_Default()
    IL_0006:  stloc.0
    IL_0007:  br.s       IL_0009

//000070:             End Get
    IL_0009:  ldloc.0
    IL_000a:  ret
  } // end of method MySettingsProperty::get_Settings

  .property class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MySettings
          Settings()
  {
    .custom instance void [System]System.ComponentModel.Design.HelpKeywordAttribute::.ctor(string) = ( 01 00 0B 4D 79 2E 53 65 74 74 69 6E 67 73 00 00 ) // ...My.Settings..
    .get class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MySettings Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MySettingsProperty::get_Settings()
  } // end of property MySettingsProperty::Settings
} // end of class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.My.MySettingsProperty

.class public auto ansi Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Plane
       extends Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.SceneObject
{
  .field public valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Norm
  .field public float64 Offset
  .method public specialname rtspecialname 
          instance void  .ctor(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector norm,
                               float64 offset,
                               class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Surface surface) cil managed
  {
    // Code size       25 (0x19)
    .maxstack  8
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Raytracer\Raytracer_VisualBasic\Plane.vb' 
//000014:     Public Sub New(ByVal norm As Vector, ByVal offset As Double, ByVal surface As Surface)
    IL_0000:  nop
//000015:         MyBase.New(surface)
    IL_0001:  ldarg.0
    IL_0002:  ldarg.3
    IL_0003:  call       instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.SceneObject::.ctor(class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Surface)
    IL_0008:  nop
//000016:         Me.Norm = norm
    IL_0009:  ldarg.0
    IL_000a:  ldarg.1
    IL_000b:  stfld      valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Plane::Norm
//000017:         Me.Offset = offset
    IL_0010:  ldarg.0
    IL_0011:  ldarg.2
    IL_0012:  stfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Plane::Offset
//000018:     End Sub
    IL_0017:  nop
    IL_0018:  ret
  } // end of method Plane::.ctor

  .method public strict virtual instance class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.ISect 
          Intersect(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Ray ray) cil managed
  {
    // Code size       80 (0x50)
    .maxstack  4
    .locals init ([0] float64 denom,
             [1] class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.ISect Intersect,
             [2] bool VB$CG$t_bool$S0)
//000019: 
//000020:     Public Overrides Function Intersect(ByVal ray As Ray) As ISect
    IL_0000:  nop
//000021:         Dim denom = Vector.Dot(Norm, ray.Direction)
    IL_0001:  ldarg.0
    IL_0002:  ldfld      valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Plane::Norm
    IL_0007:  ldarga.s   ray
    IL_0009:  ldfld      valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Ray::Direction
    IL_000e:  call       float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Dot(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,
                                                                                                            valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector)
    IL_0013:  stloc.0
//000022:         If denom > 0 Then Return Nothing
    IL_0014:  ldloc.0
    IL_0015:  ldc.r8     0.0
    IL_001e:  cgt
    IL_0020:  stloc.2
//000023:         Return New ISect(Me, ray, (Vector.Dot(Norm, ray.Start) + Offset) / (-denom))
//000024:     End Function
//000025: 
//000026:     Public Overrides Function Normal(ByVal position As Vector) As Vector
//000027:         Return Norm
//000028:     End Function
//000029: 
//000030: End Class
    IL_0021:  ldloc.2
    IL_0022:  brfalse.s  IL_0028

//000022:         If denom > 0 Then Return Nothing
    IL_0024:  ldnull
    IL_0025:  stloc.1
    IL_0026:  br.s       IL_004e

//000023:         Return New ISect(Me, ray, (Vector.Dot(Norm, ray.Start) + Offset) / (-denom))
    IL_0028:  ldarg.0
    IL_0029:  ldarg.1
    IL_002a:  ldarg.0
    IL_002b:  ldfld      valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Plane::Norm
    IL_0030:  ldarga.s   ray
    IL_0032:  ldfld      valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Ray::Start
    IL_0037:  call       float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Dot(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,
                                                                                                            valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector)
    IL_003c:  ldarg.0
    IL_003d:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Plane::Offset
    IL_0042:  add
    IL_0043:  ldloc.0
    IL_0044:  neg
    IL_0045:  div
    IL_0046:  newobj     instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.ISect::.ctor(class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.SceneObject,
                                                                                                                   valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Ray,
                                                                                                                   float64)
    IL_004b:  stloc.1
    IL_004c:  br.s       IL_004e

//000024:     End Function
    IL_004e:  ldloc.1
    IL_004f:  ret
  } // end of method Plane::Intersect

  .method public strict virtual instance valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector 
          Normal(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector position) cil managed
  {
    // Code size       12 (0xc)
    .maxstack  1
    .locals init ([0] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Normal)
//000025: 
//000026:     Public Overrides Function Normal(ByVal position As Vector) As Vector
    IL_0000:  nop
//000027:         Return Norm
    IL_0001:  ldarg.0
    IL_0002:  ldfld      valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Plane::Norm
    IL_0007:  stloc.0
    IL_0008:  br.s       IL_000a

//000028:     End Function
    IL_000a:  ldloc.0
    IL_000b:  ret
  } // end of method Plane::Normal

} // end of class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Plane

.class public sequential ansi sealed Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Ray
       extends [mscorlib]System.ValueType
{
  .field public valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Start
  .field public valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Direction
  .method public specialname rtspecialname 
          instance void  .ctor(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector start,
                               valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector dir) cil managed
  {
    // Code size       24 (0x18)
    .maxstack  8
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Raytracer\Raytracer_VisualBasic\Ray.vb' 
//000014:     Public Sub New(ByVal start As Vector, ByVal dir As Vector)
    IL_0000:  nop
//000015:         Me.Start = start
//000016:         Me.Direction = dir
//000017:     End Sub
//000018: 
//000019: End Structure
    IL_0001:  ldarg.0
    IL_0002:  initobj    Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Ray
//000015:         Me.Start = start
    IL_0008:  ldarg.0
    IL_0009:  ldarg.1
    IL_000a:  stfld      valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Ray::Start
//000016:         Me.Direction = dir
    IL_000f:  ldarg.0
    IL_0010:  ldarg.2
    IL_0011:  stfld      valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Ray::Direction
//000017:     End Sub
    IL_0016:  nop
    IL_0017:  ret
  } // end of method Ray::.ctor

} // end of class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Ray

.class private auto ansi Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer
       extends [mscorlib]System.Object
{
  .class auto ansi nested assembly _Closure$__2
         extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .field public int32[] $VB$Local_rgb
    .field public class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Scene $VB$Local_scene
    .field public class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer $VB$Me
    .method public specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       9 (0x9)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  nop
      IL_0007:  nop
      IL_0008:  ret
    } // end of method _Closure$__2::.ctor

    .method public specialname rtspecialname 
            instance void  .ctor(class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer/_Closure$__2 other) cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       57 (0x39)
      .maxstack  2
      .locals init (bool V_0)
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  nop
      IL_0007:  ldarg.1
      IL_0008:  ldnull
      IL_0009:  ceq
      IL_000b:  ldc.i4.0
      IL_000c:  ceq
      IL_000e:  stloc.0
      IL_000f:  ldloc.0
      IL_0010:  brfalse.s  IL_0036

      IL_0012:  ldarg.0
      IL_0013:  ldarg.1
      IL_0014:  ldfld      int32[] Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer/_Closure$__2::$VB$Local_rgb
      IL_0019:  stfld      int32[] Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer/_Closure$__2::$VB$Local_rgb
      IL_001e:  ldarg.0
      IL_001f:  ldarg.1
      IL_0020:  ldfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer/_Closure$__2::$VB$Me
      IL_0025:  stfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer/_Closure$__2::$VB$Me
      IL_002a:  ldarg.0
      IL_002b:  ldarg.1
      IL_002c:  ldfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Scene Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer/_Closure$__2::$VB$Local_scene
      IL_0031:  stfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Scene Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer/_Closure$__2::$VB$Local_scene
      IL_0036:  nop
      IL_0037:  nop
      IL_0038:  ret
    } // end of method _Closure$__2::.ctor

    .method public specialname instance void 
            _Lambda$__4(int32 y) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       130 (0x82)
      .maxstack  7
      .locals init ([0] class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Camera camera,
               [1] int32 stride,
               [2] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color color,
               [3] int32 x,
               [4] int32 VB$t_i4$L0,
               [5] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Ray VB$t_struct$S0,
               [6] int32 VB$CG$t_i4$S0)
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Raytracer\Raytracer_VisualBasic\Raytracer.vb' 
//000038:             Sub(y)
      IL_0000:  nop
//000039:                 Dim stride = y * screenWidth
      IL_0001:  ldarg.1
      IL_0002:  ldarg.0
      IL_0003:  ldfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer/_Closure$__2::$VB$Me
      IL_0008:  ldfld      int32 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer::screenWidth
      IL_000d:  mul.ovf
      IL_000e:  stloc.1
//000040:                 Dim camera = scene.Camera
      IL_000f:  ldarg.0
      IL_0010:  ldfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Scene Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer/_Closure$__2::$VB$Local_scene
      IL_0015:  ldfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Camera Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Scene::Camera
      IL_001a:  stloc.0
//000041:                 For x = 0 To screenWidth - 1
      IL_001b:  ldc.i4.0
      IL_001c:  ldarg.0
      IL_001d:  ldfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer/_Closure$__2::$VB$Me
      IL_0022:  ldfld      int32 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer::screenWidth
      IL_0027:  ldc.i4.1
      IL_0028:  sub.ovf
      IL_0029:  stloc.s    VB$t_i4$L0
      IL_002b:  stloc.3
      IL_002c:  br.s       IL_0077

//000042:                     Dim color = TraceRay(New Ray(camera.Position, GetPoint(x, y, camera)), scene, 0)
      IL_002e:  ldarg.0
      IL_002f:  ldfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer/_Closure$__2::$VB$Me
      IL_0034:  ldloca.s   VB$t_struct$S0
      IL_0036:  ldloc.0
      IL_0037:  ldfld      valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Camera::Position
      IL_003c:  ldarg.0
      IL_003d:  ldfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer/_Closure$__2::$VB$Me
      IL_0042:  ldloc.3
      IL_0043:  conv.r8
      IL_0044:  ldarg.1
      IL_0045:  conv.r8
      IL_0046:  ldloc.0
      IL_0047:  callvirt   instance valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer::GetPoint(float64,
                                                                                                                                                                                                       float64,
                                                                                                                                                                                                       class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Camera)
      IL_004c:  call       instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Ray::.ctor(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,
                                                                                                                   valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector)
      IL_0051:  nop
      IL_0052:  ldloc.s    VB$t_struct$S0
      IL_0054:  ldarg.0
      IL_0055:  ldfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Scene Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer/_Closure$__2::$VB$Local_scene
      IL_005a:  ldc.i4.0
      IL_005b:  callvirt   instance valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer::TraceRay(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Ray,
                                                                                                                                                                                                      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Scene,
                                                                                                                                                                                                      int32)
      IL_0060:  stloc.2
//000043:                     rgb(x + stride) = color.ToInt32()
      IL_0061:  ldarg.0
      IL_0062:  ldfld      int32[] Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer/_Closure$__2::$VB$Local_rgb
      IL_0067:  ldloc.3
      IL_0068:  ldloc.1
      IL_0069:  add.ovf
      IL_006a:  ldloca.s   color
      IL_006c:  call       instance int32 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::ToInt32()
      IL_0071:  stelem.i4
//000044:                 Next
      IL_0072:  nop
      IL_0073:  ldloc.3
      IL_0074:  ldc.i4.1
      IL_0075:  add.ovf
      IL_0076:  stloc.3
//000045:             End Sub)
//000046:     End Sub
//000047: 
//000048:     Friend Sub RenderParallelShowingThreads(ByVal scene As Scene, ByVal rgb As Int32(), ByVal options As ParallelOptions)
//000049:         Dim id = 0
//000050:         Parallel.For(0, screenHeight, options, Function() GetHueShift(Interlocked.Increment(id)),
//000051:             Function(y, state, hue)
//000052:                 Dim stride = y * screenWidth
//000053:                 Dim camera = scene.Camera
//000054:                 For x = 0 To screenWidth - 1
//000055:                     Dim color = TraceRay(New Ray(camera.Position, GetPoint(x, y, camera)), scene, 0)
//000056:                     color.ChangeHue(hue)
//000057:                     rgb(x + stride) = color.ToInt32()
//000058:                 Next
//000059:                 Return hue
//000060:             End Function,
//000061:             Sub(hue)
//000062:                 Interlocked.Decrement(id)
//000063:             End Sub)
//000064:     End Sub
//000065: 
//000066:     Private _numToHueShiftLookup As New Dictionary(Of Integer, Double)
//000067:     Private _rand As New Random()
//000068: 
//000069:     Private Function GetHueShift(ByVal id As Integer) As Double
//000070:         Dim shift As Double
//000071:         SyncLock _numToHueShiftLookup
//000072:             If Not _numToHueShiftLookup.TryGetValue(id, shift) Then
//000073:                 shift = _rand.NextDouble()
//000074:                 _numToHueShiftLookup.Add(id, shift)
//000075:             End If
//000076:         End SyncLock
//000077:         Return shift
//000078:     End Function
//000079: 
//000080:     Friend ReadOnly DefaultScene As Scene = CreateDefaultScene()
//000081: 
//000082:     Private Shared Function CreateDefaultScene() As Scene
//000083:         Dim things = New SceneObject() {
//000084:                   New Sphere(New Vector(-0.5, 1, 1.5), 0.5, Surfaces.MatteShiny),
//000085:                   New Sphere(New Vector(0, 1, -0.25), 1, Surfaces.Shiny),
//000086:                   New Plane(New Vector(0, 1, 0), 0, Surfaces.CheckerBoard)}
//000087: 
//000088:         Dim lights = New Light() {
//000089:               New Light(New Vector(-2, 2.5, 0), New Color(0.5, 0.45, 0.41)),
//000090:               New Light(New Vector(2, 4.5, 2), New Color(0.99, 0.95, 0.8))}
//000091: 
//000092:         Dim eye = Camera.Create(New Vector(2.75, 2, 3.75), New Vector(-0.6, 0.5, 0))
//000093: 
//000094:         Return New Scene(things, lights, eye)
//000095:     End Function
//000096: 
//000097:     Private Function MinIntersection(ByVal ray As Ray, ByVal scene As Scene) As ISect
//000098:         Dim min As ISect = Nothing
//000099:         For Each obj In scene.Things
//000100:             Dim isect = obj.Intersect(ray)
//000101:             If isect IsNot Nothing Then
//000102:                 If min Is Nothing OrElse min.Dist > isect.Dist Then min = isect
//000103:             End If
//000104:         Next
//000105:         Return min
//000106:     End Function
//000107: 
//000108:     Private Function TestRay(ByVal ray As Ray, ByVal scene As Scene) As Double
//000109:         Dim sect = MinIntersection(ray, scene)
//000110:         If sect Is Nothing Then Return 0
//000111:         Return sect.Dist
//000112:     End Function
//000113: 
//000114:     Private Function TraceRay(ByVal ray As Ray, ByVal scene As Scene, ByVal depth As Integer) As Color
//000115:         Dim sect = MinIntersection(ray, scene)
//000116:         If sect Is Nothing Then Return Color.Background
//000117:         Return Shade(sect, scene, depth)
//000118:     End Function
//000119: 
//000120:     Private Function GetNaturalColor(ByVal thing As SceneObject, ByVal pos As Vector, ByVal norm As Vector, ByVal rd As Vector, ByVal scene As Scene) As Color
//000121:         Dim ret = New Color(0, 0, 0)
//000122:         For Each light In scene.Lights
//000123:             Dim ldis = Vector.Minus(light.Position, pos)
//000124:             Dim livec = Vector.Norm(ldis)
//000125:             Dim neatIsect = TestRay(New Ray(pos, livec), scene)
//000126:             Dim isInShadow = Not (neatIsect > Vector.Mag(ldis) OrElse neatIsect = 0)
//000127:             If Not isInShadow Then
//000128:                 Dim illum = Vector.Dot(livec, norm)
//000129:                 Dim lcolor = If(illum > 0, Color.Times(illum, light.Color), New Color(0, 0, 0))
//000130:                 Dim specular = Vector.Dot(livec, Vector.Norm(rd))
//000131:                 Dim scolor = If(specular > 0, Color.Times(Math.Pow(specular, thing.Surface.Roughness), light.Color), New Color(0, 0, 0))
//000132:                 ret = Color.Plus(ret, Color.Plus(Color.Times(thing.Surface.Diffuse(pos), lcolor),
//000133:                                                  Color.Times(thing.Surface.Specular(pos), scolor)))
//000134:             End If
//000135:         Next
//000136:         Return ret
//000137:     End Function
//000138: 
//000139:     Private Function GetReflectionColor(ByVal thing As SceneObject, ByVal pos As Vector, ByVal norm As Vector, ByVal rd As Vector, ByVal scene As Scene, ByVal depth As Integer) As Color
//000140:         Return Color.Times(thing.Surface.Reflect(pos), TraceRay(New Ray(pos, rd), scene, depth + 1))
//000141:     End Function
//000142: 
//000143:     Private Function Shade(ByVal isect As ISect, ByVal scene As Scene, ByVal depth As Integer) As Color
//000144:         Dim d = isect.Ray.Direction
//000145:         Dim pos = Vector.Plus(Vector.Times(isect.Dist, isect.Ray.Direction), isect.Ray.Start)
//000146:         Dim normal = isect.Thing.Normal(pos)
//000147:         Dim reflectDir = Vector.Minus(d, Vector.Times(2 * Vector.Dot(normal, d), normal))
//000148:         Dim ret = Color.Plus(Color.DefaultColor, GetNaturalColor(isect.Thing, pos, normal, reflectDir, scene))
//000149:         If depth >= MaxDepth Then Return Color.Plus(ret, New Color(0.5, 0.5, 0.5))
//000150:         Return Color.Plus(ret, GetReflectionColor(isect.Thing, Vector.Plus(pos, Vector.Times(0.001, reflectDir)), normal, reflectDir, scene, depth))
//000151:     End Function
//000152: 
//000153:     Private Function RecenterX(ByVal x As Double) As Double
//000154:         Return (x - (screenWidth / 2.0)) / (2.0 * screenWidth)
//000155:     End Function
//000156: 
//000157:     Private Function RecenterY(ByVal y As Double) As Double
//000158:         Return -(y - (screenHeight / 2.0)) / (2.0 * screenHeight)
//000159:     End Function
//000160: 
//000161:     Private Function GetPoint(ByVal x As Double, ByVal y As Double, ByVal camera As Camera) As Vector
//000162:         Return Vector.Norm(Vector.Plus(camera.Forward, Vector.Plus(Vector.Times(RecenterX(x), camera.Right),
//000163:                                                                    Vector.Times(RecenterY(y), camera.Up))))
//000164:     End Function
//000165: End Class
      IL_0077:  ldloc.3
      IL_0078:  ldloc.s    VB$t_i4$L0
      IL_007a:  stloc.s    VB$CG$t_i4$S0
      IL_007c:  ldloc.s    VB$CG$t_i4$S0
      IL_007e:  ble.s      IL_002e

//000045:             End Sub)
      IL_0080:  nop
      IL_0081:  ret
    } // end of method _Closure$__2::_Lambda$__4

  } // end of class _Closure$__2

  .class auto ansi nested assembly _Closure$__3
         extends [mscorlib]System.Object
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    .field public int32 $VB$Local_id
    .field public int32[] $VB$Local_rgb
    .field public class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Scene $VB$Local_scene
    .field public class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer $VB$Me
    .method public specialname rtspecialname 
            instance void  .ctor(class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer/_Closure$__3 other) cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       69 (0x45)
      .maxstack  2
      .locals init (bool V_0)
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  nop
      IL_0007:  ldarg.1
      IL_0008:  ldnull
      IL_0009:  ceq
      IL_000b:  ldc.i4.0
      IL_000c:  ceq
      IL_000e:  stloc.0
      IL_000f:  ldloc.0
      IL_0010:  brfalse.s  IL_0042

      IL_0012:  ldarg.0
      IL_0013:  ldarg.1
      IL_0014:  ldfld      int32[] Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer/_Closure$__3::$VB$Local_rgb
      IL_0019:  stfld      int32[] Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer/_Closure$__3::$VB$Local_rgb
      IL_001e:  ldarg.0
      IL_001f:  ldarg.1
      IL_0020:  ldfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer/_Closure$__3::$VB$Me
      IL_0025:  stfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer/_Closure$__3::$VB$Me
      IL_002a:  ldarg.0
      IL_002b:  ldarg.1
      IL_002c:  ldfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Scene Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer/_Closure$__3::$VB$Local_scene
      IL_0031:  stfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Scene Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer/_Closure$__3::$VB$Local_scene
      IL_0036:  ldarg.0
      IL_0037:  ldarg.1
      IL_0038:  ldfld      int32 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer/_Closure$__3::$VB$Local_id
      IL_003d:  stfld      int32 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer/_Closure$__3::$VB$Local_id
      IL_0042:  nop
      IL_0043:  nop
      IL_0044:  ret
    } // end of method _Closure$__3::.ctor

    .method public specialname rtspecialname 
            instance void  .ctor() cil managed
    {
      .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       9 (0x9)
      .maxstack  8
      IL_0000:  ldarg.0
      IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
      IL_0006:  nop
      IL_0007:  nop
      IL_0008:  ret
    } // end of method _Closure$__3::.ctor

    .method public specialname instance float64 
            _Lambda$__5() cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       27 (0x1b)
      .maxstack  2
      .locals init ([0] float64 _Lambda$__5)
//000046:     End Sub
//000047: 
//000048:     Friend Sub RenderParallelShowingThreads(ByVal scene As Scene, ByVal rgb As Int32(), ByVal options As ParallelOptions)
//000049:         Dim id = 0
//000050:         Parallel.For(0, screenHeight, options, Function() GetHueShift(Interlocked.Increment(id)),
      IL_0000:  ldarg.0
      IL_0001:  ldfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer/_Closure$__3::$VB$Me
      IL_0006:  ldarg.0
      IL_0007:  ldflda     int32 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer/_Closure$__3::$VB$Local_id
      IL_000c:  call       int32 [mscorlib]System.Threading.Interlocked::Increment(int32&)
      IL_0011:  callvirt   instance float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer::GetHueShift(int32)
      IL_0016:  stloc.0
      IL_0017:  br.s       IL_0019

      IL_0019:  ldloc.0
      IL_001a:  ret
    } // end of method _Closure$__3::_Lambda$__5

    .method public specialname instance float64 
            _Lambda$__6(int32 y,
                        class [mscorlib]System.Threading.Tasks.ParallelLoopState state,
                        float64 hue) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       149 (0x95)
      .maxstack  7
      .locals init ([0] float64 _Lambda$__6,
               [1] class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Camera camera,
               [2] int32 stride,
               [3] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color color,
               [4] int32 x,
               [5] int32 VB$t_i4$L0,
               [6] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Ray VB$t_struct$S0,
               [7] int32 VB$CG$t_i4$S0)
//000051:             Function(y, state, hue)
      IL_0000:  nop
//000052:                 Dim stride = y * screenWidth
      IL_0001:  ldarg.1
      IL_0002:  ldarg.0
      IL_0003:  ldfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer/_Closure$__3::$VB$Me
      IL_0008:  ldfld      int32 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer::screenWidth
      IL_000d:  mul.ovf
      IL_000e:  stloc.2
//000053:                 Dim camera = scene.Camera
      IL_000f:  ldarg.0
      IL_0010:  ldfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Scene Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer/_Closure$__3::$VB$Local_scene
      IL_0015:  ldfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Camera Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Scene::Camera
      IL_001a:  stloc.1
//000054:                 For x = 0 To screenWidth - 1
      IL_001b:  ldc.i4.0
      IL_001c:  ldarg.0
      IL_001d:  ldfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer/_Closure$__3::$VB$Me
      IL_0022:  ldfld      int32 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer::screenWidth
      IL_0027:  ldc.i4.1
      IL_0028:  sub.ovf
      IL_0029:  stloc.s    VB$t_i4$L0
      IL_002b:  stloc.s    x
      IL_002d:  br.s       IL_0085

//000055:                     Dim color = TraceRay(New Ray(camera.Position, GetPoint(x, y, camera)), scene, 0)
      IL_002f:  ldarg.0
      IL_0030:  ldfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer/_Closure$__3::$VB$Me
      IL_0035:  ldloca.s   VB$t_struct$S0
      IL_0037:  ldloc.1
      IL_0038:  ldfld      valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Camera::Position
      IL_003d:  ldarg.0
      IL_003e:  ldfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer/_Closure$__3::$VB$Me
      IL_0043:  ldloc.s    x
      IL_0045:  conv.r8
      IL_0046:  ldarg.1
      IL_0047:  conv.r8
      IL_0048:  ldloc.1
      IL_0049:  callvirt   instance valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer::GetPoint(float64,
                                                                                                                                                                                                       float64,
                                                                                                                                                                                                       class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Camera)
      IL_004e:  call       instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Ray::.ctor(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,
                                                                                                                   valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector)
      IL_0053:  nop
      IL_0054:  ldloc.s    VB$t_struct$S0
      IL_0056:  ldarg.0
      IL_0057:  ldfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Scene Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer/_Closure$__3::$VB$Local_scene
      IL_005c:  ldc.i4.0
      IL_005d:  callvirt   instance valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer::TraceRay(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Ray,
                                                                                                                                                                                                      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Scene,
                                                                                                                                                                                                      int32)
      IL_0062:  stloc.3
//000056:                     color.ChangeHue(hue)
      IL_0063:  ldloca.s   color
      IL_0065:  ldarg.3
      IL_0066:  call       instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::ChangeHue(float64)
      IL_006b:  nop
//000057:                     rgb(x + stride) = color.ToInt32()
      IL_006c:  ldarg.0
      IL_006d:  ldfld      int32[] Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer/_Closure$__3::$VB$Local_rgb
      IL_0072:  ldloc.s    x
      IL_0074:  ldloc.2
      IL_0075:  add.ovf
      IL_0076:  ldloca.s   color
      IL_0078:  call       instance int32 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::ToInt32()
      IL_007d:  stelem.i4
//000058:                 Next
      IL_007e:  nop
      IL_007f:  ldloc.s    x
      IL_0081:  ldc.i4.1
      IL_0082:  add.ovf
      IL_0083:  stloc.s    x
//000059:                 Return hue
//000060:             End Function,
//000061:             Sub(hue)
//000062:                 Interlocked.Decrement(id)
//000063:             End Sub)
//000064:     End Sub
//000065: 
//000066:     Private _numToHueShiftLookup As New Dictionary(Of Integer, Double)
//000067:     Private _rand As New Random()
//000068: 
//000069:     Private Function GetHueShift(ByVal id As Integer) As Double
//000070:         Dim shift As Double
//000071:         SyncLock _numToHueShiftLookup
//000072:             If Not _numToHueShiftLookup.TryGetValue(id, shift) Then
//000073:                 shift = _rand.NextDouble()
//000074:                 _numToHueShiftLookup.Add(id, shift)
//000075:             End If
//000076:         End SyncLock
//000077:         Return shift
//000078:     End Function
//000079: 
//000080:     Friend ReadOnly DefaultScene As Scene = CreateDefaultScene()
//000081: 
//000082:     Private Shared Function CreateDefaultScene() As Scene
//000083:         Dim things = New SceneObject() {
//000084:                   New Sphere(New Vector(-0.5, 1, 1.5), 0.5, Surfaces.MatteShiny),
//000085:                   New Sphere(New Vector(0, 1, -0.25), 1, Surfaces.Shiny),
//000086:                   New Plane(New Vector(0, 1, 0), 0, Surfaces.CheckerBoard)}
//000087: 
//000088:         Dim lights = New Light() {
//000089:               New Light(New Vector(-2, 2.5, 0), New Color(0.5, 0.45, 0.41)),
//000090:               New Light(New Vector(2, 4.5, 2), New Color(0.99, 0.95, 0.8))}
//000091: 
//000092:         Dim eye = Camera.Create(New Vector(2.75, 2, 3.75), New Vector(-0.6, 0.5, 0))
//000093: 
//000094:         Return New Scene(things, lights, eye)
//000095:     End Function
//000096: 
//000097:     Private Function MinIntersection(ByVal ray As Ray, ByVal scene As Scene) As ISect
//000098:         Dim min As ISect = Nothing
//000099:         For Each obj In scene.Things
//000100:             Dim isect = obj.Intersect(ray)
//000101:             If isect IsNot Nothing Then
//000102:                 If min Is Nothing OrElse min.Dist > isect.Dist Then min = isect
//000103:             End If
//000104:         Next
//000105:         Return min
//000106:     End Function
//000107: 
//000108:     Private Function TestRay(ByVal ray As Ray, ByVal scene As Scene) As Double
//000109:         Dim sect = MinIntersection(ray, scene)
//000110:         If sect Is Nothing Then Return 0
//000111:         Return sect.Dist
//000112:     End Function
//000113: 
//000114:     Private Function TraceRay(ByVal ray As Ray, ByVal scene As Scene, ByVal depth As Integer) As Color
//000115:         Dim sect = MinIntersection(ray, scene)
//000116:         If sect Is Nothing Then Return Color.Background
//000117:         Return Shade(sect, scene, depth)
//000118:     End Function
//000119: 
//000120:     Private Function GetNaturalColor(ByVal thing As SceneObject, ByVal pos As Vector, ByVal norm As Vector, ByVal rd As Vector, ByVal scene As Scene) As Color
//000121:         Dim ret = New Color(0, 0, 0)
//000122:         For Each light In scene.Lights
//000123:             Dim ldis = Vector.Minus(light.Position, pos)
//000124:             Dim livec = Vector.Norm(ldis)
//000125:             Dim neatIsect = TestRay(New Ray(pos, livec), scene)
//000126:             Dim isInShadow = Not (neatIsect > Vector.Mag(ldis) OrElse neatIsect = 0)
//000127:             If Not isInShadow Then
//000128:                 Dim illum = Vector.Dot(livec, norm)
//000129:                 Dim lcolor = If(illum > 0, Color.Times(illum, light.Color), New Color(0, 0, 0))
//000130:                 Dim specular = Vector.Dot(livec, Vector.Norm(rd))
//000131:                 Dim scolor = If(specular > 0, Color.Times(Math.Pow(specular, thing.Surface.Roughness), light.Color), New Color(0, 0, 0))
//000132:                 ret = Color.Plus(ret, Color.Plus(Color.Times(thing.Surface.Diffuse(pos), lcolor),
//000133:                                                  Color.Times(thing.Surface.Specular(pos), scolor)))
//000134:             End If
//000135:         Next
//000136:         Return ret
//000137:     End Function
//000138: 
//000139:     Private Function GetReflectionColor(ByVal thing As SceneObject, ByVal pos As Vector, ByVal norm As Vector, ByVal rd As Vector, ByVal scene As Scene, ByVal depth As Integer) As Color
//000140:         Return Color.Times(thing.Surface.Reflect(pos), TraceRay(New Ray(pos, rd), scene, depth + 1))
//000141:     End Function
//000142: 
//000143:     Private Function Shade(ByVal isect As ISect, ByVal scene As Scene, ByVal depth As Integer) As Color
//000144:         Dim d = isect.Ray.Direction
//000145:         Dim pos = Vector.Plus(Vector.Times(isect.Dist, isect.Ray.Direction), isect.Ray.Start)
//000146:         Dim normal = isect.Thing.Normal(pos)
//000147:         Dim reflectDir = Vector.Minus(d, Vector.Times(2 * Vector.Dot(normal, d), normal))
//000148:         Dim ret = Color.Plus(Color.DefaultColor, GetNaturalColor(isect.Thing, pos, normal, reflectDir, scene))
//000149:         If depth >= MaxDepth Then Return Color.Plus(ret, New Color(0.5, 0.5, 0.5))
//000150:         Return Color.Plus(ret, GetReflectionColor(isect.Thing, Vector.Plus(pos, Vector.Times(0.001, reflectDir)), normal, reflectDir, scene, depth))
//000151:     End Function
//000152: 
//000153:     Private Function RecenterX(ByVal x As Double) As Double
//000154:         Return (x - (screenWidth / 2.0)) / (2.0 * screenWidth)
//000155:     End Function
//000156: 
//000157:     Private Function RecenterY(ByVal y As Double) As Double
//000158:         Return -(y - (screenHeight / 2.0)) / (2.0 * screenHeight)
//000159:     End Function
//000160: 
//000161:     Private Function GetPoint(ByVal x As Double, ByVal y As Double, ByVal camera As Camera) As Vector
//000162:         Return Vector.Norm(Vector.Plus(camera.Forward, Vector.Plus(Vector.Times(RecenterX(x), camera.Right),
//000163:                                                                    Vector.Times(RecenterY(y), camera.Up))))
//000164:     End Function
//000165: End Class
      IL_0085:  ldloc.s    x
      IL_0087:  ldloc.s    VB$t_i4$L0
      IL_0089:  stloc.s    VB$CG$t_i4$S0
      IL_008b:  ldloc.s    VB$CG$t_i4$S0
      IL_008d:  ble.s      IL_002f

//000059:                 Return hue
      IL_008f:  ldarg.3
      IL_0090:  stloc.0
      IL_0091:  br.s       IL_0093

//000060:             End Function,
      IL_0093:  ldloc.0
      IL_0094:  ret
    } // end of method _Closure$__3::_Lambda$__6

    .method public specialname instance void 
            _Lambda$__7(float64 hue) cil managed
    {
      .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
      // Code size       15 (0xf)
      .maxstack  8
//000061:             Sub(hue)
      IL_0000:  nop
//000062:                 Interlocked.Decrement(id)
      IL_0001:  ldarg.0
      IL_0002:  ldflda     int32 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer/_Closure$__3::$VB$Local_id
      IL_0007:  call       int32 [mscorlib]System.Threading.Interlocked::Decrement(int32&)
      IL_000c:  pop
//000063:             End Sub)
      IL_000d:  nop
      IL_000e:  ret
    } // end of method _Closure$__3::_Lambda$__7

  } // end of class _Closure$__3

  .field private int32 screenWidth
  .field private int32 screenHeight
  .field private int32 viewWidth
  .field private int32 viewHeight
  .field private static literal int32 MaxDepth = int32(0x00000005)
  .field private class [mscorlib]System.Collections.Generic.Dictionary`2<int32,float64> _numToHueShiftLookup
  .field private class [mscorlib]System.Random _rand
  .field assembly initonly class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Scene DefaultScene
  .method public specialname rtspecialname 
          instance void  .ctor(int32 screenWidth,
                               int32 screenHeight) cil managed
  {
    // Code size       57 (0x39)
    .maxstack  8
//000018:     Public Sub New(ByVal screenWidth As Integer, ByVal screenHeight As Integer)
    IL_0000:  nop
//000019:         Me.screenWidth = screenWidth
//000020:         Me.screenHeight = screenHeight
//000021:     End Sub
//000022: 
//000023:     Friend Sub RenderSequential(ByVal scene As Scene, ByVal rgb As Int32())
//000024:         ' Renders the scene sequentially using a standard Visual Basic For loop
//000025:         For y = 0 To screenHeight - 1
//000026:             Dim stride = y * screenWidth
//000027:             Dim camera = scene.Camera
//000028:             For x = 0 To screenWidth - 1
//000029:                 Dim color = TraceRay(New Ray(camera.Position, GetPoint(x, y, camera)), scene, 0)
//000030:                 rgb(x + stride) = color.ToInt32()
//000031:             Next
//000032:         Next
//000033:     End Sub
//000034: 
//000035:     Friend Sub RenderParallel(ByVal scene As Scene, ByVal rgb As Int32(), ByVal options As ParallelOptions)
//000036:         ' Renders the scene in parallel using a Parallel Extensions Parallel.For
//000037:         Parallel.For(0, screenHeight, options,
//000038:             Sub(y)
//000039:                 Dim stride = y * screenWidth
//000040:                 Dim camera = scene.Camera
//000041:                 For x = 0 To screenWidth - 1
//000042:                     Dim color = TraceRay(New Ray(camera.Position, GetPoint(x, y, camera)), scene, 0)
//000043:                     rgb(x + stride) = color.ToInt32()
//000044:                 Next
//000045:             End Sub)
//000046:     End Sub
//000047: 
//000048:     Friend Sub RenderParallelShowingThreads(ByVal scene As Scene, ByVal rgb As Int32(), ByVal options As ParallelOptions)
//000049:         Dim id = 0
//000050:         Parallel.For(0, screenHeight, options, Function() GetHueShift(Interlocked.Increment(id)),
//000051:             Function(y, state, hue)
//000052:                 Dim stride = y * screenWidth
//000053:                 Dim camera = scene.Camera
//000054:                 For x = 0 To screenWidth - 1
//000055:                     Dim color = TraceRay(New Ray(camera.Position, GetPoint(x, y, camera)), scene, 0)
//000056:                     color.ChangeHue(hue)
//000057:                     rgb(x + stride) = color.ToInt32()
//000058:                 Next
//000059:                 Return hue
//000060:             End Function,
//000061:             Sub(hue)
//000062:                 Interlocked.Decrement(id)
//000063:             End Sub)
//000064:     End Sub
//000065: 
//000066:     Private _numToHueShiftLookup As New Dictionary(Of Integer, Double)
//000067:     Private _rand As New Random()
//000068: 
//000069:     Private Function GetHueShift(ByVal id As Integer) As Double
//000070:         Dim shift As Double
//000071:         SyncLock _numToHueShiftLookup
//000072:             If Not _numToHueShiftLookup.TryGetValue(id, shift) Then
//000073:                 shift = _rand.NextDouble()
//000074:                 _numToHueShiftLookup.Add(id, shift)
//000075:             End If
//000076:         End SyncLock
//000077:         Return shift
//000078:     End Function
//000079: 
//000080:     Friend ReadOnly DefaultScene As Scene = CreateDefaultScene()
//000081: 
//000082:     Private Shared Function CreateDefaultScene() As Scene
//000083:         Dim things = New SceneObject() {
//000084:                   New Sphere(New Vector(-0.5, 1, 1.5), 0.5, Surfaces.MatteShiny),
//000085:                   New Sphere(New Vector(0, 1, -0.25), 1, Surfaces.Shiny),
//000086:                   New Plane(New Vector(0, 1, 0), 0, Surfaces.CheckerBoard)}
//000087: 
//000088:         Dim lights = New Light() {
//000089:               New Light(New Vector(-2, 2.5, 0), New Color(0.5, 0.45, 0.41)),
//000090:               New Light(New Vector(2, 4.5, 2), New Color(0.99, 0.95, 0.8))}
//000091: 
//000092:         Dim eye = Camera.Create(New Vector(2.75, 2, 3.75), New Vector(-0.6, 0.5, 0))
//000093: 
//000094:         Return New Scene(things, lights, eye)
//000095:     End Function
//000096: 
//000097:     Private Function MinIntersection(ByVal ray As Ray, ByVal scene As Scene) As ISect
//000098:         Dim min As ISect = Nothing
//000099:         For Each obj In scene.Things
//000100:             Dim isect = obj.Intersect(ray)
//000101:             If isect IsNot Nothing Then
//000102:                 If min Is Nothing OrElse min.Dist > isect.Dist Then min = isect
//000103:             End If
//000104:         Next
//000105:         Return min
//000106:     End Function
//000107: 
//000108:     Private Function TestRay(ByVal ray As Ray, ByVal scene As Scene) As Double
//000109:         Dim sect = MinIntersection(ray, scene)
//000110:         If sect Is Nothing Then Return 0
//000111:         Return sect.Dist
//000112:     End Function
//000113: 
//000114:     Private Function TraceRay(ByVal ray As Ray, ByVal scene As Scene, ByVal depth As Integer) As Color
//000115:         Dim sect = MinIntersection(ray, scene)
//000116:         If sect Is Nothing Then Return Color.Background
//000117:         Return Shade(sect, scene, depth)
//000118:     End Function
//000119: 
//000120:     Private Function GetNaturalColor(ByVal thing As SceneObject, ByVal pos As Vector, ByVal norm As Vector, ByVal rd As Vector, ByVal scene As Scene) As Color
//000121:         Dim ret = New Color(0, 0, 0)
//000122:         For Each light In scene.Lights
//000123:             Dim ldis = Vector.Minus(light.Position, pos)
//000124:             Dim livec = Vector.Norm(ldis)
//000125:             Dim neatIsect = TestRay(New Ray(pos, livec), scene)
//000126:             Dim isInShadow = Not (neatIsect > Vector.Mag(ldis) OrElse neatIsect = 0)
//000127:             If Not isInShadow Then
//000128:                 Dim illum = Vector.Dot(livec, norm)
//000129:                 Dim lcolor = If(illum > 0, Color.Times(illum, light.Color), New Color(0, 0, 0))
//000130:                 Dim specular = Vector.Dot(livec, Vector.Norm(rd))
//000131:                 Dim scolor = If(specular > 0, Color.Times(Math.Pow(specular, thing.Surface.Roughness), light.Color), New Color(0, 0, 0))
//000132:                 ret = Color.Plus(ret, Color.Plus(Color.Times(thing.Surface.Diffuse(pos), lcolor),
//000133:                                                  Color.Times(thing.Surface.Specular(pos), scolor)))
//000134:             End If
//000135:         Next
//000136:         Return ret
//000137:     End Function
//000138: 
//000139:     Private Function GetReflectionColor(ByVal thing As SceneObject, ByVal pos As Vector, ByVal norm As Vector, ByVal rd As Vector, ByVal scene As Scene, ByVal depth As Integer) As Color
//000140:         Return Color.Times(thing.Surface.Reflect(pos), TraceRay(New Ray(pos, rd), scene, depth + 1))
//000141:     End Function
//000142: 
//000143:     Private Function Shade(ByVal isect As ISect, ByVal scene As Scene, ByVal depth As Integer) As Color
//000144:         Dim d = isect.Ray.Direction
//000145:         Dim pos = Vector.Plus(Vector.Times(isect.Dist, isect.Ray.Direction), isect.Ray.Start)
//000146:         Dim normal = isect.Thing.Normal(pos)
//000147:         Dim reflectDir = Vector.Minus(d, Vector.Times(2 * Vector.Dot(normal, d), normal))
//000148:         Dim ret = Color.Plus(Color.DefaultColor, GetNaturalColor(isect.Thing, pos, normal, reflectDir, scene))
//000149:         If depth >= MaxDepth Then Return Color.Plus(ret, New Color(0.5, 0.5, 0.5))
//000150:         Return Color.Plus(ret, GetReflectionColor(isect.Thing, Vector.Plus(pos, Vector.Times(0.001, reflectDir)), normal, reflectDir, scene, depth))
//000151:     End Function
//000152: 
//000153:     Private Function RecenterX(ByVal x As Double) As Double
//000154:         Return (x - (screenWidth / 2.0)) / (2.0 * screenWidth)
//000155:     End Function
//000156: 
//000157:     Private Function RecenterY(ByVal y As Double) As Double
//000158:         Return -(y - (screenHeight / 2.0)) / (2.0 * screenHeight)
//000159:     End Function
//000160: 
//000161:     Private Function GetPoint(ByVal x As Double, ByVal y As Double, ByVal camera As Camera) As Vector
//000162:         Return Vector.Norm(Vector.Plus(camera.Forward, Vector.Plus(Vector.Times(RecenterX(x), camera.Right),
//000163:                                                                    Vector.Times(RecenterY(y), camera.Up))))
//000164:     End Function
//000165: End Class
    IL_0001:  ldarg.0
    IL_0002:  call       instance void [mscorlib]System.Object::.ctor()
    IL_0007:  nop
//000066:     Private _numToHueShiftLookup As New Dictionary(Of Integer, Double)
    IL_0008:  ldarg.0
    IL_0009:  newobj     instance void class [mscorlib]System.Collections.Generic.Dictionary`2<int32,float64>::.ctor()
    IL_000e:  stfld      class [mscorlib]System.Collections.Generic.Dictionary`2<int32,float64> Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer::_numToHueShiftLookup
//000067:     Private _rand As New Random()
    IL_0013:  ldarg.0
    IL_0014:  newobj     instance void [mscorlib]System.Random::.ctor()
    IL_0019:  stfld      class [mscorlib]System.Random Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer::_rand
//000068: 
//000069:     Private Function GetHueShift(ByVal id As Integer) As Double
//000070:         Dim shift As Double
//000071:         SyncLock _numToHueShiftLookup
//000072:             If Not _numToHueShiftLookup.TryGetValue(id, shift) Then
//000073:                 shift = _rand.NextDouble()
//000074:                 _numToHueShiftLookup.Add(id, shift)
//000075:             End If
//000076:         End SyncLock
//000077:         Return shift
//000078:     End Function
//000079: 
//000080:     Friend ReadOnly DefaultScene As Scene = CreateDefaultScene()
    IL_001e:  ldarg.0
    IL_001f:  call       class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Scene Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer::CreateDefaultScene()
    IL_0024:  stfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Scene Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer::DefaultScene
//000019:         Me.screenWidth = screenWidth
    IL_0029:  ldarg.0
    IL_002a:  ldarg.1
    IL_002b:  stfld      int32 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer::screenWidth
//000020:         Me.screenHeight = screenHeight
    IL_0030:  ldarg.0
    IL_0031:  ldarg.2
    IL_0032:  stfld      int32 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer::screenHeight
//000021:     End Sub
    IL_0037:  nop
    IL_0038:  ret
  } // end of method RayTracer::.ctor

  .method assembly instance void  RenderSequential(class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Scene scene,
                                                   int32[] rgb) cil managed
  {
    // Code size       129 (0x81)
    .maxstack  7
    .locals init ([0] class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Camera camera,
             [1] int32 stride,
             [2] int32 y,
             [3] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color color,
             [4] int32 x,
             [5] int32 VB$t_i4$L0,
             [6] int32 VB$t_i4$L1,
             [7] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Ray VB$t_struct$S0,
             [8] int32 VB$CG$t_i4$S0)
//000022: 
//000023:     Friend Sub RenderSequential(ByVal scene As Scene, ByVal rgb As Int32())
    IL_0000:  nop
//000024:         ' Renders the scene sequentially using a standard Visual Basic For loop
//000025:         For y = 0 To screenHeight - 1
    IL_0001:  ldc.i4.0
    IL_0002:  ldarg.0
    IL_0003:  ldfld      int32 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer::screenHeight
    IL_0008:  ldc.i4.1
    IL_0009:  sub.ovf
    IL_000a:  stloc.s    VB$t_i4$L0
    IL_000c:  stloc.2
    IL_000d:  br.s       IL_0076

//000026:             Dim stride = y * screenWidth
    IL_000f:  ldloc.2
    IL_0010:  ldarg.0
    IL_0011:  ldfld      int32 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer::screenWidth
    IL_0016:  mul.ovf
    IL_0017:  stloc.1
//000027:             Dim camera = scene.Camera
    IL_0018:  ldarg.1
    IL_0019:  ldfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Camera Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Scene::Camera
    IL_001e:  stloc.0
//000028:             For x = 0 To screenWidth - 1
    IL_001f:  ldc.i4.0
    IL_0020:  ldarg.0
    IL_0021:  ldfld      int32 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer::screenWidth
    IL_0026:  ldc.i4.1
    IL_0027:  sub.ovf
    IL_0028:  stloc.s    VB$t_i4$L1
    IL_002a:  stloc.s    x
    IL_002c:  br.s       IL_0067

//000029:                 Dim color = TraceRay(New Ray(camera.Position, GetPoint(x, y, camera)), scene, 0)
    IL_002e:  ldarg.0
    IL_002f:  ldloca.s   VB$t_struct$S0
    IL_0031:  ldloc.0
    IL_0032:  ldfld      valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Camera::Position
    IL_0037:  ldarg.0
    IL_0038:  ldloc.s    x
    IL_003a:  conv.r8
    IL_003b:  ldloc.2
    IL_003c:  conv.r8
    IL_003d:  ldloc.0
    IL_003e:  callvirt   instance valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer::GetPoint(float64,
                                                                                                                                                                                                     float64,
                                                                                                                                                                                                     class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Camera)
    IL_0043:  call       instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Ray::.ctor(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,
                                                                                                                 valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector)
    IL_0048:  nop
    IL_0049:  ldloc.s    VB$t_struct$S0
    IL_004b:  ldarg.1
    IL_004c:  ldc.i4.0
    IL_004d:  callvirt   instance valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer::TraceRay(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Ray,
                                                                                                                                                                                                    class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Scene,
                                                                                                                                                                                                    int32)
    IL_0052:  stloc.3
//000030:                 rgb(x + stride) = color.ToInt32()
    IL_0053:  ldarg.2
    IL_0054:  ldloc.s    x
    IL_0056:  ldloc.1
    IL_0057:  add.ovf
    IL_0058:  ldloca.s   color
    IL_005a:  call       instance int32 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::ToInt32()
    IL_005f:  stelem.i4
//000031:             Next
    IL_0060:  nop
    IL_0061:  ldloc.s    x
    IL_0063:  ldc.i4.1
    IL_0064:  add.ovf
    IL_0065:  stloc.s    x
//000032:         Next
//000033:     End Sub
//000034: 
//000035:     Friend Sub RenderParallel(ByVal scene As Scene, ByVal rgb As Int32(), ByVal options As ParallelOptions)
//000036:         ' Renders the scene in parallel using a Parallel Extensions Parallel.For
//000037:         Parallel.For(0, screenHeight, options,
//000038:             Sub(y)
//000039:                 Dim stride = y * screenWidth
//000040:                 Dim camera = scene.Camera
//000041:                 For x = 0 To screenWidth - 1
//000042:                     Dim color = TraceRay(New Ray(camera.Position, GetPoint(x, y, camera)), scene, 0)
//000043:                     rgb(x + stride) = color.ToInt32()
//000044:                 Next
//000045:             End Sub)
//000046:     End Sub
//000047: 
//000048:     Friend Sub RenderParallelShowingThreads(ByVal scene As Scene, ByVal rgb As Int32(), ByVal options As ParallelOptions)
//000049:         Dim id = 0
//000050:         Parallel.For(0, screenHeight, options, Function() GetHueShift(Interlocked.Increment(id)),
//000051:             Function(y, state, hue)
//000052:                 Dim stride = y * screenWidth
//000053:                 Dim camera = scene.Camera
//000054:                 For x = 0 To screenWidth - 1
//000055:                     Dim color = TraceRay(New Ray(camera.Position, GetPoint(x, y, camera)), scene, 0)
//000056:                     color.ChangeHue(hue)
//000057:                     rgb(x + stride) = color.ToInt32()
//000058:                 Next
//000059:                 Return hue
//000060:             End Function,
//000061:             Sub(hue)
//000062:                 Interlocked.Decrement(id)
//000063:             End Sub)
//000064:     End Sub
//000065: 
//000066:     Private _numToHueShiftLookup As New Dictionary(Of Integer, Double)
//000067:     Private _rand As New Random()
//000068: 
//000069:     Private Function GetHueShift(ByVal id As Integer) As Double
//000070:         Dim shift As Double
//000071:         SyncLock _numToHueShiftLookup
//000072:             If Not _numToHueShiftLookup.TryGetValue(id, shift) Then
//000073:                 shift = _rand.NextDouble()
//000074:                 _numToHueShiftLookup.Add(id, shift)
//000075:             End If
//000076:         End SyncLock
//000077:         Return shift
//000078:     End Function
//000079: 
//000080:     Friend ReadOnly DefaultScene As Scene = CreateDefaultScene()
//000081: 
//000082:     Private Shared Function CreateDefaultScene() As Scene
//000083:         Dim things = New SceneObject() {
//000084:                   New Sphere(New Vector(-0.5, 1, 1.5), 0.5, Surfaces.MatteShiny),
//000085:                   New Sphere(New Vector(0, 1, -0.25), 1, Surfaces.Shiny),
//000086:                   New Plane(New Vector(0, 1, 0), 0, Surfaces.CheckerBoard)}
//000087: 
//000088:         Dim lights = New Light() {
//000089:               New Light(New Vector(-2, 2.5, 0), New Color(0.5, 0.45, 0.41)),
//000090:               New Light(New Vector(2, 4.5, 2), New Color(0.99, 0.95, 0.8))}
//000091: 
//000092:         Dim eye = Camera.Create(New Vector(2.75, 2, 3.75), New Vector(-0.6, 0.5, 0))
//000093: 
//000094:         Return New Scene(things, lights, eye)
//000095:     End Function
//000096: 
//000097:     Private Function MinIntersection(ByVal ray As Ray, ByVal scene As Scene) As ISect
//000098:         Dim min As ISect = Nothing
//000099:         For Each obj In scene.Things
//000100:             Dim isect = obj.Intersect(ray)
//000101:             If isect IsNot Nothing Then
//000102:                 If min Is Nothing OrElse min.Dist > isect.Dist Then min = isect
//000103:             End If
//000104:         Next
//000105:         Return min
//000106:     End Function
//000107: 
//000108:     Private Function TestRay(ByVal ray As Ray, ByVal scene As Scene) As Double
//000109:         Dim sect = MinIntersection(ray, scene)
//000110:         If sect Is Nothing Then Return 0
//000111:         Return sect.Dist
//000112:     End Function
//000113: 
//000114:     Private Function TraceRay(ByVal ray As Ray, ByVal scene As Scene, ByVal depth As Integer) As Color
//000115:         Dim sect = MinIntersection(ray, scene)
//000116:         If sect Is Nothing Then Return Color.Background
//000117:         Return Shade(sect, scene, depth)
//000118:     End Function
//000119: 
//000120:     Private Function GetNaturalColor(ByVal thing As SceneObject, ByVal pos As Vector, ByVal norm As Vector, ByVal rd As Vector, ByVal scene As Scene) As Color
//000121:         Dim ret = New Color(0, 0, 0)
//000122:         For Each light In scene.Lights
//000123:             Dim ldis = Vector.Minus(light.Position, pos)
//000124:             Dim livec = Vector.Norm(ldis)
//000125:             Dim neatIsect = TestRay(New Ray(pos, livec), scene)
//000126:             Dim isInShadow = Not (neatIsect > Vector.Mag(ldis) OrElse neatIsect = 0)
//000127:             If Not isInShadow Then
//000128:                 Dim illum = Vector.Dot(livec, norm)
//000129:                 Dim lcolor = If(illum > 0, Color.Times(illum, light.Color), New Color(0, 0, 0))
//000130:                 Dim specular = Vector.Dot(livec, Vector.Norm(rd))
//000131:                 Dim scolor = If(specular > 0, Color.Times(Math.Pow(specular, thing.Surface.Roughness), light.Color), New Color(0, 0, 0))
//000132:                 ret = Color.Plus(ret, Color.Plus(Color.Times(thing.Surface.Diffuse(pos), lcolor),
//000133:                                                  Color.Times(thing.Surface.Specular(pos), scolor)))
//000134:             End If
//000135:         Next
//000136:         Return ret
//000137:     End Function
//000138: 
//000139:     Private Function GetReflectionColor(ByVal thing As SceneObject, ByVal pos As Vector, ByVal norm As Vector, ByVal rd As Vector, ByVal scene As Scene, ByVal depth As Integer) As Color
//000140:         Return Color.Times(thing.Surface.Reflect(pos), TraceRay(New Ray(pos, rd), scene, depth + 1))
//000141:     End Function
//000142: 
//000143:     Private Function Shade(ByVal isect As ISect, ByVal scene As Scene, ByVal depth As Integer) As Color
//000144:         Dim d = isect.Ray.Direction
//000145:         Dim pos = Vector.Plus(Vector.Times(isect.Dist, isect.Ray.Direction), isect.Ray.Start)
//000146:         Dim normal = isect.Thing.Normal(pos)
//000147:         Dim reflectDir = Vector.Minus(d, Vector.Times(2 * Vector.Dot(normal, d), normal))
//000148:         Dim ret = Color.Plus(Color.DefaultColor, GetNaturalColor(isect.Thing, pos, normal, reflectDir, scene))
//000149:         If depth >= MaxDepth Then Return Color.Plus(ret, New Color(0.5, 0.5, 0.5))
//000150:         Return Color.Plus(ret, GetReflectionColor(isect.Thing, Vector.Plus(pos, Vector.Times(0.001, reflectDir)), normal, reflectDir, scene, depth))
//000151:     End Function
//000152: 
//000153:     Private Function RecenterX(ByVal x As Double) As Double
//000154:         Return (x - (screenWidth / 2.0)) / (2.0 * screenWidth)
//000155:     End Function
//000156: 
//000157:     Private Function RecenterY(ByVal y As Double) As Double
//000158:         Return -(y - (screenHeight / 2.0)) / (2.0 * screenHeight)
//000159:     End Function
//000160: 
//000161:     Private Function GetPoint(ByVal x As Double, ByVal y As Double, ByVal camera As Camera) As Vector
//000162:         Return Vector.Norm(Vector.Plus(camera.Forward, Vector.Plus(Vector.Times(RecenterX(x), camera.Right),
//000163:                                                                    Vector.Times(RecenterY(y), camera.Up))))
//000164:     End Function
//000165: End Class
    IL_0067:  ldloc.s    x
    IL_0069:  ldloc.s    VB$t_i4$L1
    IL_006b:  stloc.s    VB$CG$t_i4$S0
    IL_006d:  ldloc.s    VB$CG$t_i4$S0
    IL_006f:  ble.s      IL_002e

//000032:         Next
    IL_0071:  nop
    IL_0072:  ldloc.2
    IL_0073:  ldc.i4.1
    IL_0074:  add.ovf
    IL_0075:  stloc.2
//000033:     End Sub
//000034: 
//000035:     Friend Sub RenderParallel(ByVal scene As Scene, ByVal rgb As Int32(), ByVal options As ParallelOptions)
//000036:         ' Renders the scene in parallel using a Parallel Extensions Parallel.For
//000037:         Parallel.For(0, screenHeight, options,
//000038:             Sub(y)
//000039:                 Dim stride = y * screenWidth
//000040:                 Dim camera = scene.Camera
//000041:                 For x = 0 To screenWidth - 1
//000042:                     Dim color = TraceRay(New Ray(camera.Position, GetPoint(x, y, camera)), scene, 0)
//000043:                     rgb(x + stride) = color.ToInt32()
//000044:                 Next
//000045:             End Sub)
//000046:     End Sub
//000047: 
//000048:     Friend Sub RenderParallelShowingThreads(ByVal scene As Scene, ByVal rgb As Int32(), ByVal options As ParallelOptions)
//000049:         Dim id = 0
//000050:         Parallel.For(0, screenHeight, options, Function() GetHueShift(Interlocked.Increment(id)),
//000051:             Function(y, state, hue)
//000052:                 Dim stride = y * screenWidth
//000053:                 Dim camera = scene.Camera
//000054:                 For x = 0 To screenWidth - 1
//000055:                     Dim color = TraceRay(New Ray(camera.Position, GetPoint(x, y, camera)), scene, 0)
//000056:                     color.ChangeHue(hue)
//000057:                     rgb(x + stride) = color.ToInt32()
//000058:                 Next
//000059:                 Return hue
//000060:             End Function,
//000061:             Sub(hue)
//000062:                 Interlocked.Decrement(id)
//000063:             End Sub)
//000064:     End Sub
//000065: 
//000066:     Private _numToHueShiftLookup As New Dictionary(Of Integer, Double)
//000067:     Private _rand As New Random()
//000068: 
//000069:     Private Function GetHueShift(ByVal id As Integer) As Double
//000070:         Dim shift As Double
//000071:         SyncLock _numToHueShiftLookup
//000072:             If Not _numToHueShiftLookup.TryGetValue(id, shift) Then
//000073:                 shift = _rand.NextDouble()
//000074:                 _numToHueShiftLookup.Add(id, shift)
//000075:             End If
//000076:         End SyncLock
//000077:         Return shift
//000078:     End Function
//000079: 
//000080:     Friend ReadOnly DefaultScene As Scene = CreateDefaultScene()
//000081: 
//000082:     Private Shared Function CreateDefaultScene() As Scene
//000083:         Dim things = New SceneObject() {
//000084:                   New Sphere(New Vector(-0.5, 1, 1.5), 0.5, Surfaces.MatteShiny),
//000085:                   New Sphere(New Vector(0, 1, -0.25), 1, Surfaces.Shiny),
//000086:                   New Plane(New Vector(0, 1, 0), 0, Surfaces.CheckerBoard)}
//000087: 
//000088:         Dim lights = New Light() {
//000089:               New Light(New Vector(-2, 2.5, 0), New Color(0.5, 0.45, 0.41)),
//000090:               New Light(New Vector(2, 4.5, 2), New Color(0.99, 0.95, 0.8))}
//000091: 
//000092:         Dim eye = Camera.Create(New Vector(2.75, 2, 3.75), New Vector(-0.6, 0.5, 0))
//000093: 
//000094:         Return New Scene(things, lights, eye)
//000095:     End Function
//000096: 
//000097:     Private Function MinIntersection(ByVal ray As Ray, ByVal scene As Scene) As ISect
//000098:         Dim min As ISect = Nothing
//000099:         For Each obj In scene.Things
//000100:             Dim isect = obj.Intersect(ray)
//000101:             If isect IsNot Nothing Then
//000102:                 If min Is Nothing OrElse min.Dist > isect.Dist Then min = isect
//000103:             End If
//000104:         Next
//000105:         Return min
//000106:     End Function
//000107: 
//000108:     Private Function TestRay(ByVal ray As Ray, ByVal scene As Scene) As Double
//000109:         Dim sect = MinIntersection(ray, scene)
//000110:         If sect Is Nothing Then Return 0
//000111:         Return sect.Dist
//000112:     End Function
//000113: 
//000114:     Private Function TraceRay(ByVal ray As Ray, ByVal scene As Scene, ByVal depth As Integer) As Color
//000115:         Dim sect = MinIntersection(ray, scene)
//000116:         If sect Is Nothing Then Return Color.Background
//000117:         Return Shade(sect, scene, depth)
//000118:     End Function
//000119: 
//000120:     Private Function GetNaturalColor(ByVal thing As SceneObject, ByVal pos As Vector, ByVal norm As Vector, ByVal rd As Vector, ByVal scene As Scene) As Color
//000121:         Dim ret = New Color(0, 0, 0)
//000122:         For Each light In scene.Lights
//000123:             Dim ldis = Vector.Minus(light.Position, pos)
//000124:             Dim livec = Vector.Norm(ldis)
//000125:             Dim neatIsect = TestRay(New Ray(pos, livec), scene)
//000126:             Dim isInShadow = Not (neatIsect > Vector.Mag(ldis) OrElse neatIsect = 0)
//000127:             If Not isInShadow Then
//000128:                 Dim illum = Vector.Dot(livec, norm)
//000129:                 Dim lcolor = If(illum > 0, Color.Times(illum, light.Color), New Color(0, 0, 0))
//000130:                 Dim specular = Vector.Dot(livec, Vector.Norm(rd))
//000131:                 Dim scolor = If(specular > 0, Color.Times(Math.Pow(specular, thing.Surface.Roughness), light.Color), New Color(0, 0, 0))
//000132:                 ret = Color.Plus(ret, Color.Plus(Color.Times(thing.Surface.Diffuse(pos), lcolor),
//000133:                                                  Color.Times(thing.Surface.Specular(pos), scolor)))
//000134:             End If
//000135:         Next
//000136:         Return ret
//000137:     End Function
//000138: 
//000139:     Private Function GetReflectionColor(ByVal thing As SceneObject, ByVal pos As Vector, ByVal norm As Vector, ByVal rd As Vector, ByVal scene As Scene, ByVal depth As Integer) As Color
//000140:         Return Color.Times(thing.Surface.Reflect(pos), TraceRay(New Ray(pos, rd), scene, depth + 1))
//000141:     End Function
//000142: 
//000143:     Private Function Shade(ByVal isect As ISect, ByVal scene As Scene, ByVal depth As Integer) As Color
//000144:         Dim d = isect.Ray.Direction
//000145:         Dim pos = Vector.Plus(Vector.Times(isect.Dist, isect.Ray.Direction), isect.Ray.Start)
//000146:         Dim normal = isect.Thing.Normal(pos)
//000147:         Dim reflectDir = Vector.Minus(d, Vector.Times(2 * Vector.Dot(normal, d), normal))
//000148:         Dim ret = Color.Plus(Color.DefaultColor, GetNaturalColor(isect.Thing, pos, normal, reflectDir, scene))
//000149:         If depth >= MaxDepth Then Return Color.Plus(ret, New Color(0.5, 0.5, 0.5))
//000150:         Return Color.Plus(ret, GetReflectionColor(isect.Thing, Vector.Plus(pos, Vector.Times(0.001, reflectDir)), normal, reflectDir, scene, depth))
//000151:     End Function
//000152: 
//000153:     Private Function RecenterX(ByVal x As Double) As Double
//000154:         Return (x - (screenWidth / 2.0)) / (2.0 * screenWidth)
//000155:     End Function
//000156: 
//000157:     Private Function RecenterY(ByVal y As Double) As Double
//000158:         Return -(y - (screenHeight / 2.0)) / (2.0 * screenHeight)
//000159:     End Function
//000160: 
//000161:     Private Function GetPoint(ByVal x As Double, ByVal y As Double, ByVal camera As Camera) As Vector
//000162:         Return Vector.Norm(Vector.Plus(camera.Forward, Vector.Plus(Vector.Times(RecenterX(x), camera.Right),
//000163:                                                                    Vector.Times(RecenterY(y), camera.Up))))
//000164:     End Function
//000165: End Class
    IL_0076:  ldloc.2
    IL_0077:  ldloc.s    VB$t_i4$L0
    IL_0079:  stloc.s    VB$CG$t_i4$S0
    IL_007b:  ldloc.s    VB$CG$t_i4$S0
    IL_007d:  ble.s      IL_000f

//000033:     End Sub
    IL_007f:  nop
    IL_0080:  ret
  } // end of method RayTracer::RenderSequential

  .method assembly instance void  RenderParallel(class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Scene scene,
                                                 int32[] rgb,
                                                 class [mscorlib]System.Threading.Tasks.ParallelOptions options) cil managed
  {
    // Code size       57 (0x39)
    .maxstack  5
    .locals init ([0] class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer/_Closure$__2 $VB$Closure_ClosureVariable_22_6B)
//000034: 
//000035:     Friend Sub RenderParallel(ByVal scene As Scene, ByVal rgb As Int32(), ByVal options As ParallelOptions)
    IL_0000:  nop
//000036:         ' Renders the scene in parallel using a Parallel Extensions Parallel.For
//000037:         Parallel.For(0, screenHeight, options,
//000038:             Sub(y)
//000039:                 Dim stride = y * screenWidth
//000040:                 Dim camera = scene.Camera
//000041:                 For x = 0 To screenWidth - 1
//000042:                     Dim color = TraceRay(New Ray(camera.Position, GetPoint(x, y, camera)), scene, 0)
//000043:                     rgb(x + stride) = color.ToInt32()
//000044:                 Next
//000045:             End Sub)
//000046:     End Sub
//000047: 
//000048:     Friend Sub RenderParallelShowingThreads(ByVal scene As Scene, ByVal rgb As Int32(), ByVal options As ParallelOptions)
//000049:         Dim id = 0
//000050:         Parallel.For(0, screenHeight, options, Function() GetHueShift(Interlocked.Increment(id)),
//000051:             Function(y, state, hue)
//000052:                 Dim stride = y * screenWidth
//000053:                 Dim camera = scene.Camera
//000054:                 For x = 0 To screenWidth - 1
//000055:                     Dim color = TraceRay(New Ray(camera.Position, GetPoint(x, y, camera)), scene, 0)
//000056:                     color.ChangeHue(hue)
//000057:                     rgb(x + stride) = color.ToInt32()
//000058:                 Next
//000059:                 Return hue
//000060:             End Function,
//000061:             Sub(hue)
//000062:                 Interlocked.Decrement(id)
//000063:             End Sub)
//000064:     End Sub
//000065: 
//000066:     Private _numToHueShiftLookup As New Dictionary(Of Integer, Double)
//000067:     Private _rand As New Random()
//000068: 
//000069:     Private Function GetHueShift(ByVal id As Integer) As Double
//000070:         Dim shift As Double
//000071:         SyncLock _numToHueShiftLookup
//000072:             If Not _numToHueShiftLookup.TryGetValue(id, shift) Then
//000073:                 shift = _rand.NextDouble()
//000074:                 _numToHueShiftLookup.Add(id, shift)
//000075:             End If
//000076:         End SyncLock
//000077:         Return shift
//000078:     End Function
//000079: 
//000080:     Friend ReadOnly DefaultScene As Scene = CreateDefaultScene()
//000081: 
//000082:     Private Shared Function CreateDefaultScene() As Scene
//000083:         Dim things = New SceneObject() {
//000084:                   New Sphere(New Vector(-0.5, 1, 1.5), 0.5, Surfaces.MatteShiny),
//000085:                   New Sphere(New Vector(0, 1, -0.25), 1, Surfaces.Shiny),
//000086:                   New Plane(New Vector(0, 1, 0), 0, Surfaces.CheckerBoard)}
//000087: 
//000088:         Dim lights = New Light() {
//000089:               New Light(New Vector(-2, 2.5, 0), New Color(0.5, 0.45, 0.41)),
//000090:               New Light(New Vector(2, 4.5, 2), New Color(0.99, 0.95, 0.8))}
//000091: 
//000092:         Dim eye = Camera.Create(New Vector(2.75, 2, 3.75), New Vector(-0.6, 0.5, 0))
//000093: 
//000094:         Return New Scene(things, lights, eye)
//000095:     End Function
//000096: 
//000097:     Private Function MinIntersection(ByVal ray As Ray, ByVal scene As Scene) As ISect
//000098:         Dim min As ISect = Nothing
//000099:         For Each obj In scene.Things
//000100:             Dim isect = obj.Intersect(ray)
//000101:             If isect IsNot Nothing Then
//000102:                 If min Is Nothing OrElse min.Dist > isect.Dist Then min = isect
//000103:             End If
//000104:         Next
//000105:         Return min
//000106:     End Function
//000107: 
//000108:     Private Function TestRay(ByVal ray As Ray, ByVal scene As Scene) As Double
//000109:         Dim sect = MinIntersection(ray, scene)
//000110:         If sect Is Nothing Then Return 0
//000111:         Return sect.Dist
//000112:     End Function
//000113: 
//000114:     Private Function TraceRay(ByVal ray As Ray, ByVal scene As Scene, ByVal depth As Integer) As Color
//000115:         Dim sect = MinIntersection(ray, scene)
//000116:         If sect Is Nothing Then Return Color.Background
//000117:         Return Shade(sect, scene, depth)
//000118:     End Function
//000119: 
//000120:     Private Function GetNaturalColor(ByVal thing As SceneObject, ByVal pos As Vector, ByVal norm As Vector, ByVal rd As Vector, ByVal scene As Scene) As Color
//000121:         Dim ret = New Color(0, 0, 0)
//000122:         For Each light In scene.Lights
//000123:             Dim ldis = Vector.Minus(light.Position, pos)
//000124:             Dim livec = Vector.Norm(ldis)
//000125:             Dim neatIsect = TestRay(New Ray(pos, livec), scene)
//000126:             Dim isInShadow = Not (neatIsect > Vector.Mag(ldis) OrElse neatIsect = 0)
//000127:             If Not isInShadow Then
//000128:                 Dim illum = Vector.Dot(livec, norm)
//000129:                 Dim lcolor = If(illum > 0, Color.Times(illum, light.Color), New Color(0, 0, 0))
//000130:                 Dim specular = Vector.Dot(livec, Vector.Norm(rd))
//000131:                 Dim scolor = If(specular > 0, Color.Times(Math.Pow(specular, thing.Surface.Roughness), light.Color), New Color(0, 0, 0))
//000132:                 ret = Color.Plus(ret, Color.Plus(Color.Times(thing.Surface.Diffuse(pos), lcolor),
//000133:                                                  Color.Times(thing.Surface.Specular(pos), scolor)))
//000134:             End If
//000135:         Next
//000136:         Return ret
//000137:     End Function
//000138: 
//000139:     Private Function GetReflectionColor(ByVal thing As SceneObject, ByVal pos As Vector, ByVal norm As Vector, ByVal rd As Vector, ByVal scene As Scene, ByVal depth As Integer) As Color
//000140:         Return Color.Times(thing.Surface.Reflect(pos), TraceRay(New Ray(pos, rd), scene, depth + 1))
//000141:     End Function
//000142: 
//000143:     Private Function Shade(ByVal isect As ISect, ByVal scene As Scene, ByVal depth As Integer) As Color
//000144:         Dim d = isect.Ray.Direction
//000145:         Dim pos = Vector.Plus(Vector.Times(isect.Dist, isect.Ray.Direction), isect.Ray.Start)
//000146:         Dim normal = isect.Thing.Normal(pos)
//000147:         Dim reflectDir = Vector.Minus(d, Vector.Times(2 * Vector.Dot(normal, d), normal))
//000148:         Dim ret = Color.Plus(Color.DefaultColor, GetNaturalColor(isect.Thing, pos, normal, reflectDir, scene))
//000149:         If depth >= MaxDepth Then Return Color.Plus(ret, New Color(0.5, 0.5, 0.5))
//000150:         Return Color.Plus(ret, GetReflectionColor(isect.Thing, Vector.Plus(pos, Vector.Times(0.001, reflectDir)), normal, reflectDir, scene, depth))
//000151:     End Function
//000152: 
//000153:     Private Function RecenterX(ByVal x As Double) As Double
//000154:         Return (x - (screenWidth / 2.0)) / (2.0 * screenWidth)
//000155:     End Function
//000156: 
//000157:     Private Function RecenterY(ByVal y As Double) As Double
//000158:         Return -(y - (screenHeight / 2.0)) / (2.0 * screenHeight)
//000159:     End Function
//000160: 
//000161:     Private Function GetPoint(ByVal x As Double, ByVal y As Double, ByVal camera As Camera) As Vector
//000162:         Return Vector.Norm(Vector.Plus(camera.Forward, Vector.Plus(Vector.Times(RecenterX(x), camera.Right),
//000163:                                                                    Vector.Times(RecenterY(y), camera.Up))))
//000164:     End Function
//000165: End Class
    IL_0001:  newobj     instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer/_Closure$__2::.ctor()
    IL_0006:  stloc.0
    IL_0007:  ldloc.0
    IL_0008:  ldarg.2
    IL_0009:  stfld      int32[] Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer/_Closure$__2::$VB$Local_rgb
    IL_000e:  ldloc.0
    IL_000f:  ldarg.0
    IL_0010:  stfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer/_Closure$__2::$VB$Me
    IL_0015:  ldloc.0
    IL_0016:  ldarg.1
    IL_0017:  stfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Scene Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer/_Closure$__2::$VB$Local_scene
//000037:         Parallel.For(0, screenHeight, options,
    IL_001c:  ldc.i4.0
    IL_001d:  ldarg.0
    IL_001e:  ldfld      int32 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer::screenHeight
    IL_0023:  ldarg.3
    IL_0024:  ldloc.0
    IL_0025:  dup
    IL_0026:  ldvirtftn  instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer/_Closure$__2::_Lambda$__4(int32)
    IL_002c:  newobj     instance void class [mscorlib]System.Action`1<int32>::.ctor(object,
                                                                                     native int)
    IL_0031:  call       valuetype [mscorlib]System.Threading.Tasks.ParallelLoopResult [mscorlib]System.Threading.Tasks.Parallel::For(int32,
                                                                                                                                      int32,
                                                                                                                                      class [mscorlib]System.Threading.Tasks.ParallelOptions,
                                                                                                                                      class [mscorlib]System.Action`1<int32>)
    IL_0036:  pop
//000038:             Sub(y)
//000039:                 Dim stride = y * screenWidth
//000040:                 Dim camera = scene.Camera
//000041:                 For x = 0 To screenWidth - 1
//000042:                     Dim color = TraceRay(New Ray(camera.Position, GetPoint(x, y, camera)), scene, 0)
//000043:                     rgb(x + stride) = color.ToInt32()
//000044:                 Next
//000045:             End Sub)
//000046:     End Sub
    IL_0037:  nop
    IL_0038:  ret
  } // end of method RayTracer::RenderParallel

  .method assembly instance void  RenderParallelShowingThreads(class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Scene scene,
                                                               int32[] rgb,
                                                               class [mscorlib]System.Threading.Tasks.ParallelOptions options) cil managed
  {
    // Code size       90 (0x5a)
    .maxstack  7
    .locals init ([0] class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer/_Closure$__3 $VB$Closure_ClosureVariable_2F_79)
//000047: 
//000048:     Friend Sub RenderParallelShowingThreads(ByVal scene As Scene, ByVal rgb As Int32(), ByVal options As ParallelOptions)
    IL_0000:  nop
//000049:         Dim id = 0
//000050:         Parallel.For(0, screenHeight, options, Function() GetHueShift(Interlocked.Increment(id)),
//000051:             Function(y, state, hue)
//000052:                 Dim stride = y * screenWidth
//000053:                 Dim camera = scene.Camera
//000054:                 For x = 0 To screenWidth - 1
//000055:                     Dim color = TraceRay(New Ray(camera.Position, GetPoint(x, y, camera)), scene, 0)
//000056:                     color.ChangeHue(hue)
//000057:                     rgb(x + stride) = color.ToInt32()
//000058:                 Next
//000059:                 Return hue
//000060:             End Function,
//000061:             Sub(hue)
//000062:                 Interlocked.Decrement(id)
//000063:             End Sub)
//000064:     End Sub
//000065: 
//000066:     Private _numToHueShiftLookup As New Dictionary(Of Integer, Double)
//000067:     Private _rand As New Random()
//000068: 
//000069:     Private Function GetHueShift(ByVal id As Integer) As Double
//000070:         Dim shift As Double
//000071:         SyncLock _numToHueShiftLookup
//000072:             If Not _numToHueShiftLookup.TryGetValue(id, shift) Then
//000073:                 shift = _rand.NextDouble()
//000074:                 _numToHueShiftLookup.Add(id, shift)
//000075:             End If
//000076:         End SyncLock
//000077:         Return shift
//000078:     End Function
//000079: 
//000080:     Friend ReadOnly DefaultScene As Scene = CreateDefaultScene()
//000081: 
//000082:     Private Shared Function CreateDefaultScene() As Scene
//000083:         Dim things = New SceneObject() {
//000084:                   New Sphere(New Vector(-0.5, 1, 1.5), 0.5, Surfaces.MatteShiny),
//000085:                   New Sphere(New Vector(0, 1, -0.25), 1, Surfaces.Shiny),
//000086:                   New Plane(New Vector(0, 1, 0), 0, Surfaces.CheckerBoard)}
//000087: 
//000088:         Dim lights = New Light() {
//000089:               New Light(New Vector(-2, 2.5, 0), New Color(0.5, 0.45, 0.41)),
//000090:               New Light(New Vector(2, 4.5, 2), New Color(0.99, 0.95, 0.8))}
//000091: 
//000092:         Dim eye = Camera.Create(New Vector(2.75, 2, 3.75), New Vector(-0.6, 0.5, 0))
//000093: 
//000094:         Return New Scene(things, lights, eye)
//000095:     End Function
//000096: 
//000097:     Private Function MinIntersection(ByVal ray As Ray, ByVal scene As Scene) As ISect
//000098:         Dim min As ISect = Nothing
//000099:         For Each obj In scene.Things
//000100:             Dim isect = obj.Intersect(ray)
//000101:             If isect IsNot Nothing Then
//000102:                 If min Is Nothing OrElse min.Dist > isect.Dist Then min = isect
//000103:             End If
//000104:         Next
//000105:         Return min
//000106:     End Function
//000107: 
//000108:     Private Function TestRay(ByVal ray As Ray, ByVal scene As Scene) As Double
//000109:         Dim sect = MinIntersection(ray, scene)
//000110:         If sect Is Nothing Then Return 0
//000111:         Return sect.Dist
//000112:     End Function
//000113: 
//000114:     Private Function TraceRay(ByVal ray As Ray, ByVal scene As Scene, ByVal depth As Integer) As Color
//000115:         Dim sect = MinIntersection(ray, scene)
//000116:         If sect Is Nothing Then Return Color.Background
//000117:         Return Shade(sect, scene, depth)
//000118:     End Function
//000119: 
//000120:     Private Function GetNaturalColor(ByVal thing As SceneObject, ByVal pos As Vector, ByVal norm As Vector, ByVal rd As Vector, ByVal scene As Scene) As Color
//000121:         Dim ret = New Color(0, 0, 0)
//000122:         For Each light In scene.Lights
//000123:             Dim ldis = Vector.Minus(light.Position, pos)
//000124:             Dim livec = Vector.Norm(ldis)
//000125:             Dim neatIsect = TestRay(New Ray(pos, livec), scene)
//000126:             Dim isInShadow = Not (neatIsect > Vector.Mag(ldis) OrElse neatIsect = 0)
//000127:             If Not isInShadow Then
//000128:                 Dim illum = Vector.Dot(livec, norm)
//000129:                 Dim lcolor = If(illum > 0, Color.Times(illum, light.Color), New Color(0, 0, 0))
//000130:                 Dim specular = Vector.Dot(livec, Vector.Norm(rd))
//000131:                 Dim scolor = If(specular > 0, Color.Times(Math.Pow(specular, thing.Surface.Roughness), light.Color), New Color(0, 0, 0))
//000132:                 ret = Color.Plus(ret, Color.Plus(Color.Times(thing.Surface.Diffuse(pos), lcolor),
//000133:                                                  Color.Times(thing.Surface.Specular(pos), scolor)))
//000134:             End If
//000135:         Next
//000136:         Return ret
//000137:     End Function
//000138: 
//000139:     Private Function GetReflectionColor(ByVal thing As SceneObject, ByVal pos As Vector, ByVal norm As Vector, ByVal rd As Vector, ByVal scene As Scene, ByVal depth As Integer) As Color
//000140:         Return Color.Times(thing.Surface.Reflect(pos), TraceRay(New Ray(pos, rd), scene, depth + 1))
//000141:     End Function
//000142: 
//000143:     Private Function Shade(ByVal isect As ISect, ByVal scene As Scene, ByVal depth As Integer) As Color
//000144:         Dim d = isect.Ray.Direction
//000145:         Dim pos = Vector.Plus(Vector.Times(isect.Dist, isect.Ray.Direction), isect.Ray.Start)
//000146:         Dim normal = isect.Thing.Normal(pos)
//000147:         Dim reflectDir = Vector.Minus(d, Vector.Times(2 * Vector.Dot(normal, d), normal))
//000148:         Dim ret = Color.Plus(Color.DefaultColor, GetNaturalColor(isect.Thing, pos, normal, reflectDir, scene))
//000149:         If depth >= MaxDepth Then Return Color.Plus(ret, New Color(0.5, 0.5, 0.5))
//000150:         Return Color.Plus(ret, GetReflectionColor(isect.Thing, Vector.Plus(pos, Vector.Times(0.001, reflectDir)), normal, reflectDir, scene, depth))
//000151:     End Function
//000152: 
//000153:     Private Function RecenterX(ByVal x As Double) As Double
//000154:         Return (x - (screenWidth / 2.0)) / (2.0 * screenWidth)
//000155:     End Function
//000156: 
//000157:     Private Function RecenterY(ByVal y As Double) As Double
//000158:         Return -(y - (screenHeight / 2.0)) / (2.0 * screenHeight)
//000159:     End Function
//000160: 
//000161:     Private Function GetPoint(ByVal x As Double, ByVal y As Double, ByVal camera As Camera) As Vector
//000162:         Return Vector.Norm(Vector.Plus(camera.Forward, Vector.Plus(Vector.Times(RecenterX(x), camera.Right),
//000163:                                                                    Vector.Times(RecenterY(y), camera.Up))))
//000164:     End Function
//000165: End Class
    IL_0001:  newobj     instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer/_Closure$__3::.ctor()
    IL_0006:  stloc.0
    IL_0007:  ldloc.0
    IL_0008:  ldarg.2
    IL_0009:  stfld      int32[] Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer/_Closure$__3::$VB$Local_rgb
    IL_000e:  ldloc.0
    IL_000f:  ldarg.0
    IL_0010:  stfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer/_Closure$__3::$VB$Me
    IL_0015:  ldloc.0
    IL_0016:  ldarg.1
    IL_0017:  stfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Scene Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer/_Closure$__3::$VB$Local_scene
//000049:         Dim id = 0
    IL_001c:  ldloc.0
    IL_001d:  ldc.i4.0
    IL_001e:  stfld      int32 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer/_Closure$__3::$VB$Local_id
//000050:         Parallel.For(0, screenHeight, options, Function() GetHueShift(Interlocked.Increment(id)),
    IL_0023:  ldc.i4.0
    IL_0024:  ldarg.0
    IL_0025:  ldfld      int32 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer::screenHeight
    IL_002a:  ldarg.3
    IL_002b:  ldloc.0
    IL_002c:  dup
    IL_002d:  ldvirtftn  instance float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer/_Closure$__3::_Lambda$__5()
    IL_0033:  newobj     instance void class [mscorlib]System.Func`1<float64>::.ctor(object,
                                                                                     native int)
    IL_0038:  ldloc.0
    IL_0039:  dup
    IL_003a:  ldvirtftn  instance float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer/_Closure$__3::_Lambda$__6(int32,
                                                                                                                                             class [mscorlib]System.Threading.Tasks.ParallelLoopState,
                                                                                                                                             float64)
    IL_0040:  newobj     instance void class [mscorlib]System.Func`4<int32,class [mscorlib]System.Threading.Tasks.ParallelLoopState,float64,float64>::.ctor(object,
                                                                                                                                                            native int)
    IL_0045:  ldloc.0
    IL_0046:  dup
    IL_0047:  ldvirtftn  instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer/_Closure$__3::_Lambda$__7(float64)
    IL_004d:  newobj     instance void class [mscorlib]System.Action`1<float64>::.ctor(object,
                                                                                       native int)
    IL_0052:  call       valuetype [mscorlib]System.Threading.Tasks.ParallelLoopResult [mscorlib]System.Threading.Tasks.Parallel::For<float64>(int32,
                                                                                                                                               int32,
                                                                                                                                               class [mscorlib]System.Threading.Tasks.ParallelOptions,
                                                                                                                                               class [mscorlib]System.Func`1<!!0>,
                                                                                                                                               class [mscorlib]System.Func`4<int32,class [mscorlib]System.Threading.Tasks.ParallelLoopState,!!0,!!0>,
                                                                                                                                               class [mscorlib]System.Action`1<!!0>)
    IL_0057:  pop
//000051:             Function(y, state, hue)
//000052:                 Dim stride = y * screenWidth
//000053:                 Dim camera = scene.Camera
//000054:                 For x = 0 To screenWidth - 1
//000055:                     Dim color = TraceRay(New Ray(camera.Position, GetPoint(x, y, camera)), scene, 0)
//000056:                     color.ChangeHue(hue)
//000057:                     rgb(x + stride) = color.ToInt32()
//000058:                 Next
//000059:                 Return hue
//000060:             End Function,
//000061:             Sub(hue)
//000062:                 Interlocked.Decrement(id)
//000063:             End Sub)
//000064:     End Sub
    IL_0058:  nop
    IL_0059:  ret
  } // end of method RayTracer::RenderParallelShowingThreads

  .method private instance float64  GetHueShift(int32 id) cil managed
  {
    // Code size       96 (0x60)
    .maxstack  3
    .locals init ([0] float64 GetHueShift,
             [1] float64 shift,
             [2] class [mscorlib]System.Collections.Generic.Dictionary`2<int32,float64> VB$t_ref$L0,
             [3] bool VB$t_bool$L0,
             [4] bool VB$CG$t_bool$S0)
//000065: 
//000066:     Private _numToHueShiftLookup As New Dictionary(Of Integer, Double)
//000067:     Private _rand As New Random()
//000068: 
//000069:     Private Function GetHueShift(ByVal id As Integer) As Double
    IL_0000:  nop
//000070:         Dim shift As Double
//000071:         SyncLock _numToHueShiftLookup
    IL_0001:  nop
    IL_0002:  ldarg.0
    IL_0003:  ldfld      class [mscorlib]System.Collections.Generic.Dictionary`2<int32,float64> Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer::_numToHueShiftLookup
    IL_0008:  stloc.2
    IL_0009:  ldc.i4.0
    IL_000a:  stloc.3
    IL_000b:  nop
    .try
    {
      IL_000c:  ldloc.2
      IL_000d:  ldloca.s   VB$t_bool$L0
      IL_000f:  call       void [mscorlib]System.Threading.Monitor::Enter(object,
                                                                          bool&)
      IL_0014:  nop
//000072:             If Not _numToHueShiftLookup.TryGetValue(id, shift) Then
      IL_0015:  ldarg.0
      IL_0016:  ldfld      class [mscorlib]System.Collections.Generic.Dictionary`2<int32,float64> Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer::_numToHueShiftLookup
      IL_001b:  ldarg.1
      IL_001c:  ldloca.s   shift
      IL_001e:  callvirt   instance bool class [mscorlib]System.Collections.Generic.Dictionary`2<int32,float64>::TryGetValue(!0,
                                                                                                                             !1&)
      IL_0023:  ldc.i4.0
      IL_0024:  ceq
      IL_0026:  stloc.s    VB$CG$t_bool$S0
//000073:                 shift = _rand.NextDouble()
//000074:                 _numToHueShiftLookup.Add(id, shift)
//000075:             End If
//000076:         End SyncLock
//000077:         Return shift
//000078:     End Function
//000079: 
//000080:     Friend ReadOnly DefaultScene As Scene = CreateDefaultScene()
//000081: 
//000082:     Private Shared Function CreateDefaultScene() As Scene
//000083:         Dim things = New SceneObject() {
//000084:                   New Sphere(New Vector(-0.5, 1, 1.5), 0.5, Surfaces.MatteShiny),
//000085:                   New Sphere(New Vector(0, 1, -0.25), 1, Surfaces.Shiny),
//000086:                   New Plane(New Vector(0, 1, 0), 0, Surfaces.CheckerBoard)}
//000087: 
//000088:         Dim lights = New Light() {
//000089:               New Light(New Vector(-2, 2.5, 0), New Color(0.5, 0.45, 0.41)),
//000090:               New Light(New Vector(2, 4.5, 2), New Color(0.99, 0.95, 0.8))}
//000091: 
//000092:         Dim eye = Camera.Create(New Vector(2.75, 2, 3.75), New Vector(-0.6, 0.5, 0))
//000093: 
//000094:         Return New Scene(things, lights, eye)
//000095:     End Function
//000096: 
//000097:     Private Function MinIntersection(ByVal ray As Ray, ByVal scene As Scene) As ISect
//000098:         Dim min As ISect = Nothing
//000099:         For Each obj In scene.Things
//000100:             Dim isect = obj.Intersect(ray)
//000101:             If isect IsNot Nothing Then
//000102:                 If min Is Nothing OrElse min.Dist > isect.Dist Then min = isect
//000103:             End If
//000104:         Next
//000105:         Return min
//000106:     End Function
//000107: 
//000108:     Private Function TestRay(ByVal ray As Ray, ByVal scene As Scene) As Double
//000109:         Dim sect = MinIntersection(ray, scene)
//000110:         If sect Is Nothing Then Return 0
//000111:         Return sect.Dist
//000112:     End Function
//000113: 
//000114:     Private Function TraceRay(ByVal ray As Ray, ByVal scene As Scene, ByVal depth As Integer) As Color
//000115:         Dim sect = MinIntersection(ray, scene)
//000116:         If sect Is Nothing Then Return Color.Background
//000117:         Return Shade(sect, scene, depth)
//000118:     End Function
//000119: 
//000120:     Private Function GetNaturalColor(ByVal thing As SceneObject, ByVal pos As Vector, ByVal norm As Vector, ByVal rd As Vector, ByVal scene As Scene) As Color
//000121:         Dim ret = New Color(0, 0, 0)
//000122:         For Each light In scene.Lights
//000123:             Dim ldis = Vector.Minus(light.Position, pos)
//000124:             Dim livec = Vector.Norm(ldis)
//000125:             Dim neatIsect = TestRay(New Ray(pos, livec), scene)
//000126:             Dim isInShadow = Not (neatIsect > Vector.Mag(ldis) OrElse neatIsect = 0)
//000127:             If Not isInShadow Then
//000128:                 Dim illum = Vector.Dot(livec, norm)
//000129:                 Dim lcolor = If(illum > 0, Color.Times(illum, light.Color), New Color(0, 0, 0))
//000130:                 Dim specular = Vector.Dot(livec, Vector.Norm(rd))
//000131:                 Dim scolor = If(specular > 0, Color.Times(Math.Pow(specular, thing.Surface.Roughness), light.Color), New Color(0, 0, 0))
//000132:                 ret = Color.Plus(ret, Color.Plus(Color.Times(thing.Surface.Diffuse(pos), lcolor),
//000133:                                                  Color.Times(thing.Surface.Specular(pos), scolor)))
//000134:             End If
//000135:         Next
//000136:         Return ret
//000137:     End Function
//000138: 
//000139:     Private Function GetReflectionColor(ByVal thing As SceneObject, ByVal pos As Vector, ByVal norm As Vector, ByVal rd As Vector, ByVal scene As Scene, ByVal depth As Integer) As Color
//000140:         Return Color.Times(thing.Surface.Reflect(pos), TraceRay(New Ray(pos, rd), scene, depth + 1))
//000141:     End Function
//000142: 
//000143:     Private Function Shade(ByVal isect As ISect, ByVal scene As Scene, ByVal depth As Integer) As Color
//000144:         Dim d = isect.Ray.Direction
//000145:         Dim pos = Vector.Plus(Vector.Times(isect.Dist, isect.Ray.Direction), isect.Ray.Start)
//000146:         Dim normal = isect.Thing.Normal(pos)
//000147:         Dim reflectDir = Vector.Minus(d, Vector.Times(2 * Vector.Dot(normal, d), normal))
//000148:         Dim ret = Color.Plus(Color.DefaultColor, GetNaturalColor(isect.Thing, pos, normal, reflectDir, scene))
//000149:         If depth >= MaxDepth Then Return Color.Plus(ret, New Color(0.5, 0.5, 0.5))
//000150:         Return Color.Plus(ret, GetReflectionColor(isect.Thing, Vector.Plus(pos, Vector.Times(0.001, reflectDir)), normal, reflectDir, scene, depth))
//000151:     End Function
//000152: 
//000153:     Private Function RecenterX(ByVal x As Double) As Double
//000154:         Return (x - (screenWidth / 2.0)) / (2.0 * screenWidth)
//000155:     End Function
//000156: 
//000157:     Private Function RecenterY(ByVal y As Double) As Double
//000158:         Return -(y - (screenHeight / 2.0)) / (2.0 * screenHeight)
//000159:     End Function
//000160: 
//000161:     Private Function GetPoint(ByVal x As Double, ByVal y As Double, ByVal camera As Camera) As Vector
//000162:         Return Vector.Norm(Vector.Plus(camera.Forward, Vector.Plus(Vector.Times(RecenterX(x), camera.Right),
//000163:                                                                    Vector.Times(RecenterY(y), camera.Up))))
//000164:     End Function
//000165: End Class
      IL_0028:  ldloc.s    VB$CG$t_bool$S0
      IL_002a:  brfalse.s  IL_0046

//000073:                 shift = _rand.NextDouble()
      IL_002c:  ldarg.0
      IL_002d:  ldfld      class [mscorlib]System.Random Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer::_rand
      IL_0032:  callvirt   instance float64 [mscorlib]System.Random::NextDouble()
      IL_0037:  stloc.1
//000074:                 _numToHueShiftLookup.Add(id, shift)
      IL_0038:  ldarg.0
      IL_0039:  ldfld      class [mscorlib]System.Collections.Generic.Dictionary`2<int32,float64> Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer::_numToHueShiftLookup
      IL_003e:  ldarg.1
      IL_003f:  ldloc.1
      IL_0040:  callvirt   instance void class [mscorlib]System.Collections.Generic.Dictionary`2<int32,float64>::Add(!0,
                                                                                                                     !1)
      IL_0045:  nop
//000075:             End If
      IL_0046:  nop
//000076:         End SyncLock
      IL_0047:  nop
      IL_0048:  leave.s    IL_005a

    }  // end .try
    finally
    {
      IL_004a:  ldloc.3
      IL_004b:  stloc.s    VB$CG$t_bool$S0
      IL_004d:  ldloc.s    VB$CG$t_bool$S0
      IL_004f:  brfalse.s  IL_0058

      IL_0051:  ldloc.2
      IL_0052:  call       void [mscorlib]System.Threading.Monitor::Exit(object)
      IL_0057:  nop
      IL_0058:  nop
//000077:         Return shift
//000078:     End Function
//000079: 
//000080:     Friend ReadOnly DefaultScene As Scene = CreateDefaultScene()
//000081: 
//000082:     Private Shared Function CreateDefaultScene() As Scene
//000083:         Dim things = New SceneObject() {
//000084:                   New Sphere(New Vector(-0.5, 1, 1.5), 0.5, Surfaces.MatteShiny),
//000085:                   New Sphere(New Vector(0, 1, -0.25), 1, Surfaces.Shiny),
//000086:                   New Plane(New Vector(0, 1, 0), 0, Surfaces.CheckerBoard)}
//000087: 
//000088:         Dim lights = New Light() {
//000089:               New Light(New Vector(-2, 2.5, 0), New Color(0.5, 0.45, 0.41)),
//000090:               New Light(New Vector(2, 4.5, 2), New Color(0.99, 0.95, 0.8))}
//000091: 
//000092:         Dim eye = Camera.Create(New Vector(2.75, 2, 3.75), New Vector(-0.6, 0.5, 0))
//000093: 
//000094:         Return New Scene(things, lights, eye)
//000095:     End Function
//000096: 
//000097:     Private Function MinIntersection(ByVal ray As Ray, ByVal scene As Scene) As ISect
//000098:         Dim min As ISect = Nothing
//000099:         For Each obj In scene.Things
//000100:             Dim isect = obj.Intersect(ray)
//000101:             If isect IsNot Nothing Then
//000102:                 If min Is Nothing OrElse min.Dist > isect.Dist Then min = isect
//000103:             End If
//000104:         Next
//000105:         Return min
//000106:     End Function
//000107: 
//000108:     Private Function TestRay(ByVal ray As Ray, ByVal scene As Scene) As Double
//000109:         Dim sect = MinIntersection(ray, scene)
//000110:         If sect Is Nothing Then Return 0
//000111:         Return sect.Dist
//000112:     End Function
//000113: 
//000114:     Private Function TraceRay(ByVal ray As Ray, ByVal scene As Scene, ByVal depth As Integer) As Color
//000115:         Dim sect = MinIntersection(ray, scene)
//000116:         If sect Is Nothing Then Return Color.Background
//000117:         Return Shade(sect, scene, depth)
//000118:     End Function
//000119: 
//000120:     Private Function GetNaturalColor(ByVal thing As SceneObject, ByVal pos As Vector, ByVal norm As Vector, ByVal rd As Vector, ByVal scene As Scene) As Color
//000121:         Dim ret = New Color(0, 0, 0)
//000122:         For Each light In scene.Lights
//000123:             Dim ldis = Vector.Minus(light.Position, pos)
//000124:             Dim livec = Vector.Norm(ldis)
//000125:             Dim neatIsect = TestRay(New Ray(pos, livec), scene)
//000126:             Dim isInShadow = Not (neatIsect > Vector.Mag(ldis) OrElse neatIsect = 0)
//000127:             If Not isInShadow Then
//000128:                 Dim illum = Vector.Dot(livec, norm)
//000129:                 Dim lcolor = If(illum > 0, Color.Times(illum, light.Color), New Color(0, 0, 0))
//000130:                 Dim specular = Vector.Dot(livec, Vector.Norm(rd))
//000131:                 Dim scolor = If(specular > 0, Color.Times(Math.Pow(specular, thing.Surface.Roughness), light.Color), New Color(0, 0, 0))
//000132:                 ret = Color.Plus(ret, Color.Plus(Color.Times(thing.Surface.Diffuse(pos), lcolor),
//000133:                                                  Color.Times(thing.Surface.Specular(pos), scolor)))
//000134:             End If
//000135:         Next
//000136:         Return ret
//000137:     End Function
//000138: 
//000139:     Private Function GetReflectionColor(ByVal thing As SceneObject, ByVal pos As Vector, ByVal norm As Vector, ByVal rd As Vector, ByVal scene As Scene, ByVal depth As Integer) As Color
//000140:         Return Color.Times(thing.Surface.Reflect(pos), TraceRay(New Ray(pos, rd), scene, depth + 1))
//000141:     End Function
//000142: 
//000143:     Private Function Shade(ByVal isect As ISect, ByVal scene As Scene, ByVal depth As Integer) As Color
//000144:         Dim d = isect.Ray.Direction
//000145:         Dim pos = Vector.Plus(Vector.Times(isect.Dist, isect.Ray.Direction), isect.Ray.Start)
//000146:         Dim normal = isect.Thing.Normal(pos)
//000147:         Dim reflectDir = Vector.Minus(d, Vector.Times(2 * Vector.Dot(normal, d), normal))
//000148:         Dim ret = Color.Plus(Color.DefaultColor, GetNaturalColor(isect.Thing, pos, normal, reflectDir, scene))
//000149:         If depth >= MaxDepth Then Return Color.Plus(ret, New Color(0.5, 0.5, 0.5))
//000150:         Return Color.Plus(ret, GetReflectionColor(isect.Thing, Vector.Plus(pos, Vector.Times(0.001, reflectDir)), normal, reflectDir, scene, depth))
//000151:     End Function
//000152: 
//000153:     Private Function RecenterX(ByVal x As Double) As Double
//000154:         Return (x - (screenWidth / 2.0)) / (2.0 * screenWidth)
//000155:     End Function
//000156: 
//000157:     Private Function RecenterY(ByVal y As Double) As Double
//000158:         Return -(y - (screenHeight / 2.0)) / (2.0 * screenHeight)
//000159:     End Function
//000160: 
//000161:     Private Function GetPoint(ByVal x As Double, ByVal y As Double, ByVal camera As Camera) As Vector
//000162:         Return Vector.Norm(Vector.Plus(camera.Forward, Vector.Plus(Vector.Times(RecenterX(x), camera.Right),
//000163:                                                                    Vector.Times(RecenterY(y), camera.Up))))
//000164:     End Function
//000165: End Class
      IL_0059:  endfinally
//000077:         Return shift
    }  // end handler
    IL_005a:  ldloc.1
    IL_005b:  stloc.0
    IL_005c:  br.s       IL_005e

//000078:     End Function
    IL_005e:  ldloc.0
    IL_005f:  ret
  } // end of method RayTracer::GetHueShift

  .method private static class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Scene 
          CreateDefaultScene() cil managed
  {
    // Code size       467 (0x1d3)
    .maxstack  7
    .locals init ([0] class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Scene CreateDefaultScene,
             [1] class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Camera eye,
             [2] class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Light[] lights,
             [3] class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.SceneObject[] things,
             [4] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector VB$t_struct$S0,
             [5] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector VB$t_struct$S1,
             [6] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector VB$t_struct$S2,
             [7] class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.SceneObject[] VB$t_array$S0,
             [8] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color VB$t_struct$S3,
             [9] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color VB$t_struct$S4,
             [10] class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Light[] VB$t_array$S1)
//000079: 
//000080:     Friend ReadOnly DefaultScene As Scene = CreateDefaultScene()
//000081: 
//000082:     Private Shared Function CreateDefaultScene() As Scene
    IL_0000:  nop
//000083:         Dim things = New SceneObject() {
    IL_0001:  ldc.i4.3
    IL_0002:  newarr     Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.SceneObject
    IL_0007:  stloc.s    VB$t_array$S0
    IL_0009:  ldloc.s    VB$t_array$S0
    IL_000b:  ldc.i4.0
    IL_000c:  ldloca.s   VB$t_struct$S0
    IL_000e:  ldc.r8     -0.5
    IL_0017:  ldc.r8     1.
    IL_0020:  ldc.r8     1.5
    IL_0029:  call       instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::.ctor(float64,
                                                                                                                    float64,
                                                                                                                    float64)
    IL_002e:  nop
    IL_002f:  ldloc.s    VB$t_struct$S0
    IL_0031:  ldc.r8     0.5
    IL_003a:  ldsfld     class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Surface Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Surfaces::MatteShiny
    IL_003f:  newobj     instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Sphere::.ctor(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,
                                                                                                                    float64,
                                                                                                                    class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Surface)
    IL_0044:  stelem.ref
    IL_0045:  nop
    IL_0046:  ldloc.s    VB$t_array$S0
    IL_0048:  ldc.i4.1
    IL_0049:  ldloca.s   VB$t_struct$S1
    IL_004b:  ldc.r8     0.0
    IL_0054:  ldc.r8     1.
    IL_005d:  ldc.r8     -0.25
    IL_0066:  call       instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::.ctor(float64,
                                                                                                                    float64,
                                                                                                                    float64)
    IL_006b:  nop
    IL_006c:  ldloc.s    VB$t_struct$S1
    IL_006e:  ldc.r8     1.
    IL_0077:  ldsfld     class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Surface Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Surfaces::Shiny
    IL_007c:  newobj     instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Sphere::.ctor(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,
                                                                                                                    float64,
                                                                                                                    class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Surface)
    IL_0081:  stelem.ref
    IL_0082:  nop
    IL_0083:  ldloc.s    VB$t_array$S0
    IL_0085:  ldc.i4.2
    IL_0086:  ldloca.s   VB$t_struct$S2
    IL_0088:  ldc.r8     0.0
    IL_0091:  ldc.r8     1.
    IL_009a:  ldc.r8     0.0
    IL_00a3:  call       instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::.ctor(float64,
                                                                                                                    float64,
                                                                                                                    float64)
    IL_00a8:  nop
    IL_00a9:  ldloc.s    VB$t_struct$S2
    IL_00ab:  ldc.r8     0.0
    IL_00b4:  ldsfld     class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Surface Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Surfaces::CheckerBoard
    IL_00b9:  newobj     instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Plane::.ctor(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,
                                                                                                                   float64,
                                                                                                                   class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Surface)
    IL_00be:  stelem.ref
    IL_00bf:  nop
    IL_00c0:  ldloc.s    VB$t_array$S0
    IL_00c2:  stloc.3
//000084:                   New Sphere(New Vector(-0.5, 1, 1.5), 0.5, Surfaces.MatteShiny),
//000085:                   New Sphere(New Vector(0, 1, -0.25), 1, Surfaces.Shiny),
//000086:                   New Plane(New Vector(0, 1, 0), 0, Surfaces.CheckerBoard)}
//000087: 
//000088:         Dim lights = New Light() {
    IL_00c3:  ldc.i4.2
    IL_00c4:  newarr     Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Light
    IL_00c9:  stloc.s    VB$t_array$S1
    IL_00cb:  ldloc.s    VB$t_array$S1
    IL_00cd:  ldc.i4.0
    IL_00ce:  ldloca.s   VB$t_struct$S2
    IL_00d0:  ldc.r8     -2.
    IL_00d9:  ldc.r8     2.5
    IL_00e2:  ldc.r8     0.0
    IL_00eb:  call       instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::.ctor(float64,
                                                                                                                    float64,
                                                                                                                    float64)
    IL_00f0:  nop
    IL_00f1:  ldloc.s    VB$t_struct$S2
    IL_00f3:  ldloca.s   VB$t_struct$S3
    IL_00f5:  ldc.r8     0.5
    IL_00fe:  ldc.r8     0.45000000000000001
    IL_0107:  ldc.r8     0.40999999999999998
    IL_0110:  call       instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::.ctor(float64,
                                                                                                                   float64,
                                                                                                                   float64)
    IL_0115:  nop
    IL_0116:  ldloc.s    VB$t_struct$S3
    IL_0118:  newobj     instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Light::.ctor(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,
                                                                                                                   valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color)
    IL_011d:  stelem.ref
    IL_011e:  nop
    IL_011f:  ldloc.s    VB$t_array$S1
    IL_0121:  ldc.i4.1
    IL_0122:  ldloca.s   VB$t_struct$S1
    IL_0124:  ldc.r8     2.
    IL_012d:  ldc.r8     4.5
    IL_0136:  ldc.r8     2.
    IL_013f:  call       instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::.ctor(float64,
                                                                                                                    float64,
                                                                                                                    float64)
    IL_0144:  nop
    IL_0145:  ldloc.s    VB$t_struct$S1
    IL_0147:  ldloca.s   VB$t_struct$S4
    IL_0149:  ldc.r8     0.98999999999999999
    IL_0152:  ldc.r8     0.94999999999999996
    IL_015b:  ldc.r8     0.80000000000000004
    IL_0164:  call       instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::.ctor(float64,
                                                                                                                   float64,
                                                                                                                   float64)
    IL_0169:  nop
    IL_016a:  ldloc.s    VB$t_struct$S4
    IL_016c:  newobj     instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Light::.ctor(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,
                                                                                                                   valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color)
    IL_0171:  stelem.ref
    IL_0172:  nop
    IL_0173:  ldloc.s    VB$t_array$S1
    IL_0175:  stloc.2
//000089:               New Light(New Vector(-2, 2.5, 0), New Color(0.5, 0.45, 0.41)),
//000090:               New Light(New Vector(2, 4.5, 2), New Color(0.99, 0.95, 0.8))}
//000091: 
//000092:         Dim eye = Camera.Create(New Vector(2.75, 2, 3.75), New Vector(-0.6, 0.5, 0))
    IL_0176:  ldloca.s   VB$t_struct$S2
    IL_0178:  ldc.r8     2.75
    IL_0181:  ldc.r8     2.
    IL_018a:  ldc.r8     3.75
    IL_0193:  call       instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::.ctor(float64,
                                                                                                                    float64,
                                                                                                                    float64)
    IL_0198:  nop
    IL_0199:  ldloc.s    VB$t_struct$S2
    IL_019b:  ldloca.s   VB$t_struct$S1
    IL_019d:  ldc.r8     -0.59999999999999998
    IL_01a6:  ldc.r8     0.5
    IL_01af:  ldc.r8     0.0
    IL_01b8:  call       instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::.ctor(float64,
                                                                                                                    float64,
                                                                                                                    float64)
    IL_01bd:  nop
    IL_01be:  ldloc.s    VB$t_struct$S1
    IL_01c0:  call       class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Camera Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Camera::Create(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,
                                                                                                                                                                                   valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector)
    IL_01c5:  stloc.1
//000093: 
//000094:         Return New Scene(things, lights, eye)
    IL_01c6:  ldloc.3
    IL_01c7:  ldloc.2
    IL_01c8:  ldloc.1
    IL_01c9:  newobj     instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Scene::.ctor(class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.SceneObject[],
                                                                                                                   class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Light[],
                                                                                                                   class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Camera)
    IL_01ce:  stloc.0
    IL_01cf:  br.s       IL_01d1

//000095:     End Function
    IL_01d1:  ldloc.0
    IL_01d2:  ret
  } // end of method RayTracer::CreateDefaultScene

  .method private instance class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.ISect 
          MinIntersection(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Ray ray,
                          class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Scene scene) cil managed
  {
    // Code size       100 (0x64)
    .maxstack  2
    .locals init ([0] class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.ISect min,
             [1] class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.ISect MinIntersection,
             [2] class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.ISect isect,
             [3] class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.SceneObject obj,
             [4] int32 VB$t_i4$L0,
             [5] class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.SceneObject[] VB$t_array$L0,
             [6] bool VB$CG$t_bool$S0,
             [7] bool VB$CG$t_bool$S1)
//000096: 
//000097:     Private Function MinIntersection(ByVal ray As Ray, ByVal scene As Scene) As ISect
    IL_0000:  nop
//000098:         Dim min As ISect = Nothing
    IL_0001:  ldnull
    IL_0002:  stloc.0
//000099:         For Each obj In scene.Things
    IL_0003:  ldarg.2
    IL_0004:  ldfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.SceneObject[] Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Scene::Things
    IL_0009:  stloc.s    VB$t_array$L0
    IL_000b:  ldc.i4.0
    IL_000c:  stloc.s    VB$t_i4$L0
    IL_000e:  br.s       IL_0050

//000100:             Dim isect = obj.Intersect(ray)
//000101:             If isect IsNot Nothing Then
//000102:                 If min Is Nothing OrElse min.Dist > isect.Dist Then min = isect
//000103:             End If
//000104:         Next
//000105:         Return min
//000106:     End Function
//000107: 
//000108:     Private Function TestRay(ByVal ray As Ray, ByVal scene As Scene) As Double
//000109:         Dim sect = MinIntersection(ray, scene)
//000110:         If sect Is Nothing Then Return 0
//000111:         Return sect.Dist
//000112:     End Function
//000113: 
//000114:     Private Function TraceRay(ByVal ray As Ray, ByVal scene As Scene, ByVal depth As Integer) As Color
//000115:         Dim sect = MinIntersection(ray, scene)
//000116:         If sect Is Nothing Then Return Color.Background
//000117:         Return Shade(sect, scene, depth)
//000118:     End Function
//000119: 
//000120:     Private Function GetNaturalColor(ByVal thing As SceneObject, ByVal pos As Vector, ByVal norm As Vector, ByVal rd As Vector, ByVal scene As Scene) As Color
//000121:         Dim ret = New Color(0, 0, 0)
//000122:         For Each light In scene.Lights
//000123:             Dim ldis = Vector.Minus(light.Position, pos)
//000124:             Dim livec = Vector.Norm(ldis)
//000125:             Dim neatIsect = TestRay(New Ray(pos, livec), scene)
//000126:             Dim isInShadow = Not (neatIsect > Vector.Mag(ldis) OrElse neatIsect = 0)
//000127:             If Not isInShadow Then
//000128:                 Dim illum = Vector.Dot(livec, norm)
//000129:                 Dim lcolor = If(illum > 0, Color.Times(illum, light.Color), New Color(0, 0, 0))
//000130:                 Dim specular = Vector.Dot(livec, Vector.Norm(rd))
//000131:                 Dim scolor = If(specular > 0, Color.Times(Math.Pow(specular, thing.Surface.Roughness), light.Color), New Color(0, 0, 0))
//000132:                 ret = Color.Plus(ret, Color.Plus(Color.Times(thing.Surface.Diffuse(pos), lcolor),
//000133:                                                  Color.Times(thing.Surface.Specular(pos), scolor)))
//000134:             End If
//000135:         Next
//000136:         Return ret
//000137:     End Function
//000138: 
//000139:     Private Function GetReflectionColor(ByVal thing As SceneObject, ByVal pos As Vector, ByVal norm As Vector, ByVal rd As Vector, ByVal scene As Scene, ByVal depth As Integer) As Color
//000140:         Return Color.Times(thing.Surface.Reflect(pos), TraceRay(New Ray(pos, rd), scene, depth + 1))
//000141:     End Function
//000142: 
//000143:     Private Function Shade(ByVal isect As ISect, ByVal scene As Scene, ByVal depth As Integer) As Color
//000144:         Dim d = isect.Ray.Direction
//000145:         Dim pos = Vector.Plus(Vector.Times(isect.Dist, isect.Ray.Direction), isect.Ray.Start)
//000146:         Dim normal = isect.Thing.Normal(pos)
//000147:         Dim reflectDir = Vector.Minus(d, Vector.Times(2 * Vector.Dot(normal, d), normal))
//000148:         Dim ret = Color.Plus(Color.DefaultColor, GetNaturalColor(isect.Thing, pos, normal, reflectDir, scene))
//000149:         If depth >= MaxDepth Then Return Color.Plus(ret, New Color(0.5, 0.5, 0.5))
//000150:         Return Color.Plus(ret, GetReflectionColor(isect.Thing, Vector.Plus(pos, Vector.Times(0.001, reflectDir)), normal, reflectDir, scene, depth))
//000151:     End Function
//000152: 
//000153:     Private Function RecenterX(ByVal x As Double) As Double
//000154:         Return (x - (screenWidth / 2.0)) / (2.0 * screenWidth)
//000155:     End Function
//000156: 
//000157:     Private Function RecenterY(ByVal y As Double) As Double
//000158:         Return -(y - (screenHeight / 2.0)) / (2.0 * screenHeight)
//000159:     End Function
//000160: 
//000161:     Private Function GetPoint(ByVal x As Double, ByVal y As Double, ByVal camera As Camera) As Vector
//000162:         Return Vector.Norm(Vector.Plus(camera.Forward, Vector.Plus(Vector.Times(RecenterX(x), camera.Right),
//000163:                                                                    Vector.Times(RecenterY(y), camera.Up))))
//000164:     End Function
//000165: End Class
    IL_0010:  ldloc.s    VB$t_array$L0
    IL_0012:  ldloc.s    VB$t_i4$L0
    IL_0014:  ldelem.ref
    IL_0015:  stloc.3
//000100:             Dim isect = obj.Intersect(ray)
    IL_0016:  ldloc.3
    IL_0017:  ldarg.1
    IL_0018:  callvirt   instance class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.ISect Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.SceneObject::Intersect(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Ray)
    IL_001d:  stloc.2
//000101:             If isect IsNot Nothing Then
    IL_001e:  ldloc.2
    IL_001f:  ldnull
    IL_0020:  ceq
    IL_0022:  ldc.i4.0
    IL_0023:  ceq
    IL_0025:  stloc.s    VB$CG$t_bool$S0
//000102:                 If min Is Nothing OrElse min.Dist > isect.Dist Then min = isect
//000103:             End If
//000104:         Next
//000105:         Return min
//000106:     End Function
//000107: 
//000108:     Private Function TestRay(ByVal ray As Ray, ByVal scene As Scene) As Double
//000109:         Dim sect = MinIntersection(ray, scene)
//000110:         If sect Is Nothing Then Return 0
//000111:         Return sect.Dist
//000112:     End Function
//000113: 
//000114:     Private Function TraceRay(ByVal ray As Ray, ByVal scene As Scene, ByVal depth As Integer) As Color
//000115:         Dim sect = MinIntersection(ray, scene)
//000116:         If sect Is Nothing Then Return Color.Background
//000117:         Return Shade(sect, scene, depth)
//000118:     End Function
//000119: 
//000120:     Private Function GetNaturalColor(ByVal thing As SceneObject, ByVal pos As Vector, ByVal norm As Vector, ByVal rd As Vector, ByVal scene As Scene) As Color
//000121:         Dim ret = New Color(0, 0, 0)
//000122:         For Each light In scene.Lights
//000123:             Dim ldis = Vector.Minus(light.Position, pos)
//000124:             Dim livec = Vector.Norm(ldis)
//000125:             Dim neatIsect = TestRay(New Ray(pos, livec), scene)
//000126:             Dim isInShadow = Not (neatIsect > Vector.Mag(ldis) OrElse neatIsect = 0)
//000127:             If Not isInShadow Then
//000128:                 Dim illum = Vector.Dot(livec, norm)
//000129:                 Dim lcolor = If(illum > 0, Color.Times(illum, light.Color), New Color(0, 0, 0))
//000130:                 Dim specular = Vector.Dot(livec, Vector.Norm(rd))
//000131:                 Dim scolor = If(specular > 0, Color.Times(Math.Pow(specular, thing.Surface.Roughness), light.Color), New Color(0, 0, 0))
//000132:                 ret = Color.Plus(ret, Color.Plus(Color.Times(thing.Surface.Diffuse(pos), lcolor),
//000133:                                                  Color.Times(thing.Surface.Specular(pos), scolor)))
//000134:             End If
//000135:         Next
//000136:         Return ret
//000137:     End Function
//000138: 
//000139:     Private Function GetReflectionColor(ByVal thing As SceneObject, ByVal pos As Vector, ByVal norm As Vector, ByVal rd As Vector, ByVal scene As Scene, ByVal depth As Integer) As Color
//000140:         Return Color.Times(thing.Surface.Reflect(pos), TraceRay(New Ray(pos, rd), scene, depth + 1))
//000141:     End Function
//000142: 
//000143:     Private Function Shade(ByVal isect As ISect, ByVal scene As Scene, ByVal depth As Integer) As Color
//000144:         Dim d = isect.Ray.Direction
//000145:         Dim pos = Vector.Plus(Vector.Times(isect.Dist, isect.Ray.Direction), isect.Ray.Start)
//000146:         Dim normal = isect.Thing.Normal(pos)
//000147:         Dim reflectDir = Vector.Minus(d, Vector.Times(2 * Vector.Dot(normal, d), normal))
//000148:         Dim ret = Color.Plus(Color.DefaultColor, GetNaturalColor(isect.Thing, pos, normal, reflectDir, scene))
//000149:         If depth >= MaxDepth Then Return Color.Plus(ret, New Color(0.5, 0.5, 0.5))
//000150:         Return Color.Plus(ret, GetReflectionColor(isect.Thing, Vector.Plus(pos, Vector.Times(0.001, reflectDir)), normal, reflectDir, scene, depth))
//000151:     End Function
//000152: 
//000153:     Private Function RecenterX(ByVal x As Double) As Double
//000154:         Return (x - (screenWidth / 2.0)) / (2.0 * screenWidth)
//000155:     End Function
//000156: 
//000157:     Private Function RecenterY(ByVal y As Double) As Double
//000158:         Return -(y - (screenHeight / 2.0)) / (2.0 * screenHeight)
//000159:     End Function
//000160: 
//000161:     Private Function GetPoint(ByVal x As Double, ByVal y As Double, ByVal camera As Camera) As Vector
//000162:         Return Vector.Norm(Vector.Plus(camera.Forward, Vector.Plus(Vector.Times(RecenterX(x), camera.Right),
//000163:                                                                    Vector.Times(RecenterY(y), camera.Up))))
//000164:     End Function
//000165: End Class
    IL_0027:  ldloc.s    VB$CG$t_bool$S0
    IL_0029:  brfalse.s  IL_0048

//000102:                 If min Is Nothing OrElse min.Dist > isect.Dist Then min = isect
    IL_002b:  ldloc.0
    IL_002c:  brfalse.s  IL_003f

    IL_002e:  ldloc.0
    IL_002f:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.ISect::Dist
    IL_0034:  ldloc.2
    IL_0035:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.ISect::Dist
    IL_003a:  bgt.s      IL_003f

    IL_003c:  ldc.i4.0
    IL_003d:  br.s       IL_0040

    IL_003f:  ldc.i4.1
    IL_0040:  stloc.s    VB$CG$t_bool$S1
//000103:             End If
//000104:         Next
//000105:         Return min
//000106:     End Function
//000107: 
//000108:     Private Function TestRay(ByVal ray As Ray, ByVal scene As Scene) As Double
//000109:         Dim sect = MinIntersection(ray, scene)
//000110:         If sect Is Nothing Then Return 0
//000111:         Return sect.Dist
//000112:     End Function
//000113: 
//000114:     Private Function TraceRay(ByVal ray As Ray, ByVal scene As Scene, ByVal depth As Integer) As Color
//000115:         Dim sect = MinIntersection(ray, scene)
//000116:         If sect Is Nothing Then Return Color.Background
//000117:         Return Shade(sect, scene, depth)
//000118:     End Function
//000119: 
//000120:     Private Function GetNaturalColor(ByVal thing As SceneObject, ByVal pos As Vector, ByVal norm As Vector, ByVal rd As Vector, ByVal scene As Scene) As Color
//000121:         Dim ret = New Color(0, 0, 0)
//000122:         For Each light In scene.Lights
//000123:             Dim ldis = Vector.Minus(light.Position, pos)
//000124:             Dim livec = Vector.Norm(ldis)
//000125:             Dim neatIsect = TestRay(New Ray(pos, livec), scene)
//000126:             Dim isInShadow = Not (neatIsect > Vector.Mag(ldis) OrElse neatIsect = 0)
//000127:             If Not isInShadow Then
//000128:                 Dim illum = Vector.Dot(livec, norm)
//000129:                 Dim lcolor = If(illum > 0, Color.Times(illum, light.Color), New Color(0, 0, 0))
//000130:                 Dim specular = Vector.Dot(livec, Vector.Norm(rd))
//000131:                 Dim scolor = If(specular > 0, Color.Times(Math.Pow(specular, thing.Surface.Roughness), light.Color), New Color(0, 0, 0))
//000132:                 ret = Color.Plus(ret, Color.Plus(Color.Times(thing.Surface.Diffuse(pos), lcolor),
//000133:                                                  Color.Times(thing.Surface.Specular(pos), scolor)))
//000134:             End If
//000135:         Next
//000136:         Return ret
//000137:     End Function
//000138: 
//000139:     Private Function GetReflectionColor(ByVal thing As SceneObject, ByVal pos As Vector, ByVal norm As Vector, ByVal rd As Vector, ByVal scene As Scene, ByVal depth As Integer) As Color
//000140:         Return Color.Times(thing.Surface.Reflect(pos), TraceRay(New Ray(pos, rd), scene, depth + 1))
//000141:     End Function
//000142: 
//000143:     Private Function Shade(ByVal isect As ISect, ByVal scene As Scene, ByVal depth As Integer) As Color
//000144:         Dim d = isect.Ray.Direction
//000145:         Dim pos = Vector.Plus(Vector.Times(isect.Dist, isect.Ray.Direction), isect.Ray.Start)
//000146:         Dim normal = isect.Thing.Normal(pos)
//000147:         Dim reflectDir = Vector.Minus(d, Vector.Times(2 * Vector.Dot(normal, d), normal))
//000148:         Dim ret = Color.Plus(Color.DefaultColor, GetNaturalColor(isect.Thing, pos, normal, reflectDir, scene))
//000149:         If depth >= MaxDepth Then Return Color.Plus(ret, New Color(0.5, 0.5, 0.5))
//000150:         Return Color.Plus(ret, GetReflectionColor(isect.Thing, Vector.Plus(pos, Vector.Times(0.001, reflectDir)), normal, reflectDir, scene, depth))
//000151:     End Function
//000152: 
//000153:     Private Function RecenterX(ByVal x As Double) As Double
//000154:         Return (x - (screenWidth / 2.0)) / (2.0 * screenWidth)
//000155:     End Function
//000156: 
//000157:     Private Function RecenterY(ByVal y As Double) As Double
//000158:         Return -(y - (screenHeight / 2.0)) / (2.0 * screenHeight)
//000159:     End Function
//000160: 
//000161:     Private Function GetPoint(ByVal x As Double, ByVal y As Double, ByVal camera As Camera) As Vector
//000162:         Return Vector.Norm(Vector.Plus(camera.Forward, Vector.Plus(Vector.Times(RecenterX(x), camera.Right),
//000163:                                                                    Vector.Times(RecenterY(y), camera.Up))))
//000164:     End Function
//000165: End Class
    IL_0042:  ldloc.s    VB$CG$t_bool$S1
    IL_0044:  brfalse.s  IL_0048

//000102:                 If min Is Nothing OrElse min.Dist > isect.Dist Then min = isect
    IL_0046:  ldloc.2
    IL_0047:  stloc.0
//000103:             End If
    IL_0048:  nop
//000104:         Next
//000105:         Return min
//000106:     End Function
//000107: 
//000108:     Private Function TestRay(ByVal ray As Ray, ByVal scene As Scene) As Double
//000109:         Dim sect = MinIntersection(ray, scene)
//000110:         If sect Is Nothing Then Return 0
//000111:         Return sect.Dist
//000112:     End Function
//000113: 
//000114:     Private Function TraceRay(ByVal ray As Ray, ByVal scene As Scene, ByVal depth As Integer) As Color
//000115:         Dim sect = MinIntersection(ray, scene)
//000116:         If sect Is Nothing Then Return Color.Background
//000117:         Return Shade(sect, scene, depth)
//000118:     End Function
//000119: 
//000120:     Private Function GetNaturalColor(ByVal thing As SceneObject, ByVal pos As Vector, ByVal norm As Vector, ByVal rd As Vector, ByVal scene As Scene) As Color
//000121:         Dim ret = New Color(0, 0, 0)
//000122:         For Each light In scene.Lights
//000123:             Dim ldis = Vector.Minus(light.Position, pos)
//000124:             Dim livec = Vector.Norm(ldis)
//000125:             Dim neatIsect = TestRay(New Ray(pos, livec), scene)
//000126:             Dim isInShadow = Not (neatIsect > Vector.Mag(ldis) OrElse neatIsect = 0)
//000127:             If Not isInShadow Then
//000128:                 Dim illum = Vector.Dot(livec, norm)
//000129:                 Dim lcolor = If(illum > 0, Color.Times(illum, light.Color), New Color(0, 0, 0))
//000130:                 Dim specular = Vector.Dot(livec, Vector.Norm(rd))
//000131:                 Dim scolor = If(specular > 0, Color.Times(Math.Pow(specular, thing.Surface.Roughness), light.Color), New Color(0, 0, 0))
//000132:                 ret = Color.Plus(ret, Color.Plus(Color.Times(thing.Surface.Diffuse(pos), lcolor),
//000133:                                                  Color.Times(thing.Surface.Specular(pos), scolor)))
//000134:             End If
//000135:         Next
//000136:         Return ret
//000137:     End Function
//000138: 
//000139:     Private Function GetReflectionColor(ByVal thing As SceneObject, ByVal pos As Vector, ByVal norm As Vector, ByVal rd As Vector, ByVal scene As Scene, ByVal depth As Integer) As Color
//000140:         Return Color.Times(thing.Surface.Reflect(pos), TraceRay(New Ray(pos, rd), scene, depth + 1))
//000141:     End Function
//000142: 
//000143:     Private Function Shade(ByVal isect As ISect, ByVal scene As Scene, ByVal depth As Integer) As Color
//000144:         Dim d = isect.Ray.Direction
//000145:         Dim pos = Vector.Plus(Vector.Times(isect.Dist, isect.Ray.Direction), isect.Ray.Start)
//000146:         Dim normal = isect.Thing.Normal(pos)
//000147:         Dim reflectDir = Vector.Minus(d, Vector.Times(2 * Vector.Dot(normal, d), normal))
//000148:         Dim ret = Color.Plus(Color.DefaultColor, GetNaturalColor(isect.Thing, pos, normal, reflectDir, scene))
//000149:         If depth >= MaxDepth Then Return Color.Plus(ret, New Color(0.5, 0.5, 0.5))
//000150:         Return Color.Plus(ret, GetReflectionColor(isect.Thing, Vector.Plus(pos, Vector.Times(0.001, reflectDir)), normal, reflectDir, scene, depth))
//000151:     End Function
//000152: 
//000153:     Private Function RecenterX(ByVal x As Double) As Double
//000154:         Return (x - (screenWidth / 2.0)) / (2.0 * screenWidth)
//000155:     End Function
//000156: 
//000157:     Private Function RecenterY(ByVal y As Double) As Double
//000158:         Return -(y - (screenHeight / 2.0)) / (2.0 * screenHeight)
//000159:     End Function
//000160: 
//000161:     Private Function GetPoint(ByVal x As Double, ByVal y As Double, ByVal camera As Camera) As Vector
//000162:         Return Vector.Norm(Vector.Plus(camera.Forward, Vector.Plus(Vector.Times(RecenterX(x), camera.Right),
//000163:                                                                    Vector.Times(RecenterY(y), camera.Up))))
//000164:     End Function
//000165: End Class
    IL_0049:  ldloc.s    VB$t_i4$L0
    IL_004b:  ldc.i4.1
    IL_004c:  add.ovf
    IL_004d:  stloc.s    VB$t_i4$L0
//000104:         Next
    IL_004f:  nop
//000105:         Return min
//000106:     End Function
//000107: 
//000108:     Private Function TestRay(ByVal ray As Ray, ByVal scene As Scene) As Double
//000109:         Dim sect = MinIntersection(ray, scene)
//000110:         If sect Is Nothing Then Return 0
//000111:         Return sect.Dist
//000112:     End Function
//000113: 
//000114:     Private Function TraceRay(ByVal ray As Ray, ByVal scene As Scene, ByVal depth As Integer) As Color
//000115:         Dim sect = MinIntersection(ray, scene)
//000116:         If sect Is Nothing Then Return Color.Background
//000117:         Return Shade(sect, scene, depth)
//000118:     End Function
//000119: 
//000120:     Private Function GetNaturalColor(ByVal thing As SceneObject, ByVal pos As Vector, ByVal norm As Vector, ByVal rd As Vector, ByVal scene As Scene) As Color
//000121:         Dim ret = New Color(0, 0, 0)
//000122:         For Each light In scene.Lights
//000123:             Dim ldis = Vector.Minus(light.Position, pos)
//000124:             Dim livec = Vector.Norm(ldis)
//000125:             Dim neatIsect = TestRay(New Ray(pos, livec), scene)
//000126:             Dim isInShadow = Not (neatIsect > Vector.Mag(ldis) OrElse neatIsect = 0)
//000127:             If Not isInShadow Then
//000128:                 Dim illum = Vector.Dot(livec, norm)
//000129:                 Dim lcolor = If(illum > 0, Color.Times(illum, light.Color), New Color(0, 0, 0))
//000130:                 Dim specular = Vector.Dot(livec, Vector.Norm(rd))
//000131:                 Dim scolor = If(specular > 0, Color.Times(Math.Pow(specular, thing.Surface.Roughness), light.Color), New Color(0, 0, 0))
//000132:                 ret = Color.Plus(ret, Color.Plus(Color.Times(thing.Surface.Diffuse(pos), lcolor),
//000133:                                                  Color.Times(thing.Surface.Specular(pos), scolor)))
//000134:             End If
//000135:         Next
//000136:         Return ret
//000137:     End Function
//000138: 
//000139:     Private Function GetReflectionColor(ByVal thing As SceneObject, ByVal pos As Vector, ByVal norm As Vector, ByVal rd As Vector, ByVal scene As Scene, ByVal depth As Integer) As Color
//000140:         Return Color.Times(thing.Surface.Reflect(pos), TraceRay(New Ray(pos, rd), scene, depth + 1))
//000141:     End Function
//000142: 
//000143:     Private Function Shade(ByVal isect As ISect, ByVal scene As Scene, ByVal depth As Integer) As Color
//000144:         Dim d = isect.Ray.Direction
//000145:         Dim pos = Vector.Plus(Vector.Times(isect.Dist, isect.Ray.Direction), isect.Ray.Start)
//000146:         Dim normal = isect.Thing.Normal(pos)
//000147:         Dim reflectDir = Vector.Minus(d, Vector.Times(2 * Vector.Dot(normal, d), normal))
//000148:         Dim ret = Color.Plus(Color.DefaultColor, GetNaturalColor(isect.Thing, pos, normal, reflectDir, scene))
//000149:         If depth >= MaxDepth Then Return Color.Plus(ret, New Color(0.5, 0.5, 0.5))
//000150:         Return Color.Plus(ret, GetReflectionColor(isect.Thing, Vector.Plus(pos, Vector.Times(0.001, reflectDir)), normal, reflectDir, scene, depth))
//000151:     End Function
//000152: 
//000153:     Private Function RecenterX(ByVal x As Double) As Double
//000154:         Return (x - (screenWidth / 2.0)) / (2.0 * screenWidth)
//000155:     End Function
//000156: 
//000157:     Private Function RecenterY(ByVal y As Double) As Double
//000158:         Return -(y - (screenHeight / 2.0)) / (2.0 * screenHeight)
//000159:     End Function
//000160: 
//000161:     Private Function GetPoint(ByVal x As Double, ByVal y As Double, ByVal camera As Camera) As Vector
//000162:         Return Vector.Norm(Vector.Plus(camera.Forward, Vector.Plus(Vector.Times(RecenterX(x), camera.Right),
//000163:                                                                    Vector.Times(RecenterY(y), camera.Up))))
//000164:     End Function
//000165: End Class
    IL_0050:  ldloc.s    VB$t_i4$L0
    IL_0052:  ldloc.s    VB$t_array$L0
    IL_0054:  ldlen
    IL_0055:  conv.ovf.i4
    IL_0056:  clt
    IL_0058:  stloc.s    VB$CG$t_bool$S1
    IL_005a:  ldloc.s    VB$CG$t_bool$S1
    IL_005c:  brtrue.s   IL_0010

//000105:         Return min
    IL_005e:  ldloc.0
    IL_005f:  stloc.1
    IL_0060:  br.s       IL_0062

//000106:     End Function
    IL_0062:  ldloc.1
    IL_0063:  ret
  } // end of method RayTracer::MinIntersection

  .method private instance float64  TestRay(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Ray ray,
                                            class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Scene scene) cil managed
  {
    // Code size       41 (0x29)
    .maxstack  3
    .locals init ([0] class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.ISect sect,
             [1] float64 TestRay,
             [2] bool VB$CG$t_bool$S0)
//000107: 
//000108:     Private Function TestRay(ByVal ray As Ray, ByVal scene As Scene) As Double
    IL_0000:  nop
//000109:         Dim sect = MinIntersection(ray, scene)
    IL_0001:  ldarg.0
    IL_0002:  ldarg.1
    IL_0003:  ldarg.2
    IL_0004:  callvirt   instance class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.ISect Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer::MinIntersection(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Ray,
                                                                                                                                                                                                       class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Scene)
    IL_0009:  stloc.0
//000110:         If sect Is Nothing Then Return 0
    IL_000a:  ldloc.0
    IL_000b:  ldnull
    IL_000c:  ceq
    IL_000e:  stloc.2
//000111:         Return sect.Dist
//000112:     End Function
//000113: 
//000114:     Private Function TraceRay(ByVal ray As Ray, ByVal scene As Scene, ByVal depth As Integer) As Color
//000115:         Dim sect = MinIntersection(ray, scene)
//000116:         If sect Is Nothing Then Return Color.Background
//000117:         Return Shade(sect, scene, depth)
//000118:     End Function
//000119: 
//000120:     Private Function GetNaturalColor(ByVal thing As SceneObject, ByVal pos As Vector, ByVal norm As Vector, ByVal rd As Vector, ByVal scene As Scene) As Color
//000121:         Dim ret = New Color(0, 0, 0)
//000122:         For Each light In scene.Lights
//000123:             Dim ldis = Vector.Minus(light.Position, pos)
//000124:             Dim livec = Vector.Norm(ldis)
//000125:             Dim neatIsect = TestRay(New Ray(pos, livec), scene)
//000126:             Dim isInShadow = Not (neatIsect > Vector.Mag(ldis) OrElse neatIsect = 0)
//000127:             If Not isInShadow Then
//000128:                 Dim illum = Vector.Dot(livec, norm)
//000129:                 Dim lcolor = If(illum > 0, Color.Times(illum, light.Color), New Color(0, 0, 0))
//000130:                 Dim specular = Vector.Dot(livec, Vector.Norm(rd))
//000131:                 Dim scolor = If(specular > 0, Color.Times(Math.Pow(specular, thing.Surface.Roughness), light.Color), New Color(0, 0, 0))
//000132:                 ret = Color.Plus(ret, Color.Plus(Color.Times(thing.Surface.Diffuse(pos), lcolor),
//000133:                                                  Color.Times(thing.Surface.Specular(pos), scolor)))
//000134:             End If
//000135:         Next
//000136:         Return ret
//000137:     End Function
//000138: 
//000139:     Private Function GetReflectionColor(ByVal thing As SceneObject, ByVal pos As Vector, ByVal norm As Vector, ByVal rd As Vector, ByVal scene As Scene, ByVal depth As Integer) As Color
//000140:         Return Color.Times(thing.Surface.Reflect(pos), TraceRay(New Ray(pos, rd), scene, depth + 1))
//000141:     End Function
//000142: 
//000143:     Private Function Shade(ByVal isect As ISect, ByVal scene As Scene, ByVal depth As Integer) As Color
//000144:         Dim d = isect.Ray.Direction
//000145:         Dim pos = Vector.Plus(Vector.Times(isect.Dist, isect.Ray.Direction), isect.Ray.Start)
//000146:         Dim normal = isect.Thing.Normal(pos)
//000147:         Dim reflectDir = Vector.Minus(d, Vector.Times(2 * Vector.Dot(normal, d), normal))
//000148:         Dim ret = Color.Plus(Color.DefaultColor, GetNaturalColor(isect.Thing, pos, normal, reflectDir, scene))
//000149:         If depth >= MaxDepth Then Return Color.Plus(ret, New Color(0.5, 0.5, 0.5))
//000150:         Return Color.Plus(ret, GetReflectionColor(isect.Thing, Vector.Plus(pos, Vector.Times(0.001, reflectDir)), normal, reflectDir, scene, depth))
//000151:     End Function
//000152: 
//000153:     Private Function RecenterX(ByVal x As Double) As Double
//000154:         Return (x - (screenWidth / 2.0)) / (2.0 * screenWidth)
//000155:     End Function
//000156: 
//000157:     Private Function RecenterY(ByVal y As Double) As Double
//000158:         Return -(y - (screenHeight / 2.0)) / (2.0 * screenHeight)
//000159:     End Function
//000160: 
//000161:     Private Function GetPoint(ByVal x As Double, ByVal y As Double, ByVal camera As Camera) As Vector
//000162:         Return Vector.Norm(Vector.Plus(camera.Forward, Vector.Plus(Vector.Times(RecenterX(x), camera.Right),
//000163:                                                                    Vector.Times(RecenterY(y), camera.Up))))
//000164:     End Function
//000165: End Class
    IL_000f:  ldloc.2
    IL_0010:  brfalse.s  IL_001e

//000110:         If sect Is Nothing Then Return 0
    IL_0012:  ldc.r8     0.0
    IL_001b:  stloc.1
    IL_001c:  br.s       IL_0027

//000111:         Return sect.Dist
    IL_001e:  ldloc.0
    IL_001f:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.ISect::Dist
    IL_0024:  stloc.1
    IL_0025:  br.s       IL_0027

//000112:     End Function
    IL_0027:  ldloc.1
    IL_0028:  ret
  } // end of method RayTracer::TestRay

  .method private instance valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color 
          TraceRay(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Ray ray,
                   class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Scene scene,
                   int32 depth) cil managed
  {
    // Code size       40 (0x28)
    .maxstack  4
    .locals init ([0] class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.ISect sect,
             [1] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color TraceRay,
             [2] bool VB$CG$t_bool$S0)
//000113: 
//000114:     Private Function TraceRay(ByVal ray As Ray, ByVal scene As Scene, ByVal depth As Integer) As Color
    IL_0000:  nop
//000115:         Dim sect = MinIntersection(ray, scene)
    IL_0001:  ldarg.0
    IL_0002:  ldarg.1
    IL_0003:  ldarg.2
    IL_0004:  callvirt   instance class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.ISect Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer::MinIntersection(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Ray,
                                                                                                                                                                                                       class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Scene)
    IL_0009:  stloc.0
//000116:         If sect Is Nothing Then Return Color.Background
    IL_000a:  ldloc.0
    IL_000b:  ldnull
    IL_000c:  ceq
    IL_000e:  stloc.2
//000117:         Return Shade(sect, scene, depth)
//000118:     End Function
//000119: 
//000120:     Private Function GetNaturalColor(ByVal thing As SceneObject, ByVal pos As Vector, ByVal norm As Vector, ByVal rd As Vector, ByVal scene As Scene) As Color
//000121:         Dim ret = New Color(0, 0, 0)
//000122:         For Each light In scene.Lights
//000123:             Dim ldis = Vector.Minus(light.Position, pos)
//000124:             Dim livec = Vector.Norm(ldis)
//000125:             Dim neatIsect = TestRay(New Ray(pos, livec), scene)
//000126:             Dim isInShadow = Not (neatIsect > Vector.Mag(ldis) OrElse neatIsect = 0)
//000127:             If Not isInShadow Then
//000128:                 Dim illum = Vector.Dot(livec, norm)
//000129:                 Dim lcolor = If(illum > 0, Color.Times(illum, light.Color), New Color(0, 0, 0))
//000130:                 Dim specular = Vector.Dot(livec, Vector.Norm(rd))
//000131:                 Dim scolor = If(specular > 0, Color.Times(Math.Pow(specular, thing.Surface.Roughness), light.Color), New Color(0, 0, 0))
//000132:                 ret = Color.Plus(ret, Color.Plus(Color.Times(thing.Surface.Diffuse(pos), lcolor),
//000133:                                                  Color.Times(thing.Surface.Specular(pos), scolor)))
//000134:             End If
//000135:         Next
//000136:         Return ret
//000137:     End Function
//000138: 
//000139:     Private Function GetReflectionColor(ByVal thing As SceneObject, ByVal pos As Vector, ByVal norm As Vector, ByVal rd As Vector, ByVal scene As Scene, ByVal depth As Integer) As Color
//000140:         Return Color.Times(thing.Surface.Reflect(pos), TraceRay(New Ray(pos, rd), scene, depth + 1))
//000141:     End Function
//000142: 
//000143:     Private Function Shade(ByVal isect As ISect, ByVal scene As Scene, ByVal depth As Integer) As Color
//000144:         Dim d = isect.Ray.Direction
//000145:         Dim pos = Vector.Plus(Vector.Times(isect.Dist, isect.Ray.Direction), isect.Ray.Start)
//000146:         Dim normal = isect.Thing.Normal(pos)
//000147:         Dim reflectDir = Vector.Minus(d, Vector.Times(2 * Vector.Dot(normal, d), normal))
//000148:         Dim ret = Color.Plus(Color.DefaultColor, GetNaturalColor(isect.Thing, pos, normal, reflectDir, scene))
//000149:         If depth >= MaxDepth Then Return Color.Plus(ret, New Color(0.5, 0.5, 0.5))
//000150:         Return Color.Plus(ret, GetReflectionColor(isect.Thing, Vector.Plus(pos, Vector.Times(0.001, reflectDir)), normal, reflectDir, scene, depth))
//000151:     End Function
//000152: 
//000153:     Private Function RecenterX(ByVal x As Double) As Double
//000154:         Return (x - (screenWidth / 2.0)) / (2.0 * screenWidth)
//000155:     End Function
//000156: 
//000157:     Private Function RecenterY(ByVal y As Double) As Double
//000158:         Return -(y - (screenHeight / 2.0)) / (2.0 * screenHeight)
//000159:     End Function
//000160: 
//000161:     Private Function GetPoint(ByVal x As Double, ByVal y As Double, ByVal camera As Camera) As Vector
//000162:         Return Vector.Norm(Vector.Plus(camera.Forward, Vector.Plus(Vector.Times(RecenterX(x), camera.Right),
//000163:                                                                    Vector.Times(RecenterY(y), camera.Up))))
//000164:     End Function
//000165: End Class
    IL_000f:  ldloc.2
    IL_0010:  brfalse.s  IL_001a

//000116:         If sect Is Nothing Then Return Color.Background
    IL_0012:  ldsfld     valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::Background
    IL_0017:  stloc.1
    IL_0018:  br.s       IL_0026

//000117:         Return Shade(sect, scene, depth)
    IL_001a:  ldarg.0
    IL_001b:  ldloc.0
    IL_001c:  ldarg.2
    IL_001d:  ldarg.3
    IL_001e:  callvirt   instance valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer::Shade(class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.ISect,
                                                                                                                                                                                                 class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Scene,
                                                                                                                                                                                                 int32)
    IL_0023:  stloc.1
    IL_0024:  br.s       IL_0026

//000118:     End Function
    IL_0026:  ldloc.1
    IL_0027:  ret
  } // end of method RayTracer::TraceRay

  .method private instance valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color 
          GetNaturalColor(class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.SceneObject thing,
                          valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector pos,
                          valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector norm,
                          valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector rd,
                          class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Scene scene) cil managed
  {
    // Code size       415 (0x19f)
    .maxstack  4
    .locals init ([0] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color GetNaturalColor,
             [1] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color 'ret',
             [2] bool isInShadow,
             [3] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector ldis,
             [4] class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Light light,
             [5] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector livec,
             [6] float64 neatIsect,
             [7] float64 illum,
             [8] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color lcolor,
             [9] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color scolor,
             [10] float64 specular,
             [11] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color VB$t_struct$S0,
             [12] int32 VB$t_i4$L0,
             [13] class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Light[] VB$t_array$L0,
             [14] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Ray VB$t_struct$S1,
             [15] bool VB$CG$t_bool$S0)
//000119: 
//000120:     Private Function GetNaturalColor(ByVal thing As SceneObject, ByVal pos As Vector, ByVal norm As Vector, ByVal rd As Vector, ByVal scene As Scene) As Color
    IL_0000:  nop
//000121:         Dim ret = New Color(0, 0, 0)
    IL_0001:  ldloca.s   'ret'
    IL_0003:  ldc.r8     0.0
    IL_000c:  ldc.r8     0.0
    IL_0015:  ldc.r8     0.0
    IL_001e:  call       instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::.ctor(float64,
                                                                                                                   float64,
                                                                                                                   float64)
    IL_0023:  nop
//000122:         For Each light In scene.Lights
    IL_0024:  ldarg.s    scene
    IL_0026:  ldfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Light[] Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Scene::Lights
    IL_002b:  stloc.s    VB$t_array$L0
    IL_002d:  ldc.i4.0
    IL_002e:  stloc.s    VB$t_i4$L0
    IL_0030:  br         IL_0188

//000123:             Dim ldis = Vector.Minus(light.Position, pos)
//000124:             Dim livec = Vector.Norm(ldis)
//000125:             Dim neatIsect = TestRay(New Ray(pos, livec), scene)
//000126:             Dim isInShadow = Not (neatIsect > Vector.Mag(ldis) OrElse neatIsect = 0)
//000127:             If Not isInShadow Then
//000128:                 Dim illum = Vector.Dot(livec, norm)
//000129:                 Dim lcolor = If(illum > 0, Color.Times(illum, light.Color), New Color(0, 0, 0))
//000130:                 Dim specular = Vector.Dot(livec, Vector.Norm(rd))
//000131:                 Dim scolor = If(specular > 0, Color.Times(Math.Pow(specular, thing.Surface.Roughness), light.Color), New Color(0, 0, 0))
//000132:                 ret = Color.Plus(ret, Color.Plus(Color.Times(thing.Surface.Diffuse(pos), lcolor),
//000133:                                                  Color.Times(thing.Surface.Specular(pos), scolor)))
//000134:             End If
//000135:         Next
//000136:         Return ret
//000137:     End Function
//000138: 
//000139:     Private Function GetReflectionColor(ByVal thing As SceneObject, ByVal pos As Vector, ByVal norm As Vector, ByVal rd As Vector, ByVal scene As Scene, ByVal depth As Integer) As Color
//000140:         Return Color.Times(thing.Surface.Reflect(pos), TraceRay(New Ray(pos, rd), scene, depth + 1))
//000141:     End Function
//000142: 
//000143:     Private Function Shade(ByVal isect As ISect, ByVal scene As Scene, ByVal depth As Integer) As Color
//000144:         Dim d = isect.Ray.Direction
//000145:         Dim pos = Vector.Plus(Vector.Times(isect.Dist, isect.Ray.Direction), isect.Ray.Start)
//000146:         Dim normal = isect.Thing.Normal(pos)
//000147:         Dim reflectDir = Vector.Minus(d, Vector.Times(2 * Vector.Dot(normal, d), normal))
//000148:         Dim ret = Color.Plus(Color.DefaultColor, GetNaturalColor(isect.Thing, pos, normal, reflectDir, scene))
//000149:         If depth >= MaxDepth Then Return Color.Plus(ret, New Color(0.5, 0.5, 0.5))
//000150:         Return Color.Plus(ret, GetReflectionColor(isect.Thing, Vector.Plus(pos, Vector.Times(0.001, reflectDir)), normal, reflectDir, scene, depth))
//000151:     End Function
//000152: 
//000153:     Private Function RecenterX(ByVal x As Double) As Double
//000154:         Return (x - (screenWidth / 2.0)) / (2.0 * screenWidth)
//000155:     End Function
//000156: 
//000157:     Private Function RecenterY(ByVal y As Double) As Double
//000158:         Return -(y - (screenHeight / 2.0)) / (2.0 * screenHeight)
//000159:     End Function
//000160: 
//000161:     Private Function GetPoint(ByVal x As Double, ByVal y As Double, ByVal camera As Camera) As Vector
//000162:         Return Vector.Norm(Vector.Plus(camera.Forward, Vector.Plus(Vector.Times(RecenterX(x), camera.Right),
//000163:                                                                    Vector.Times(RecenterY(y), camera.Up))))
//000164:     End Function
//000165: End Class
    IL_0035:  ldloc.s    VB$t_array$L0
    IL_0037:  ldloc.s    VB$t_i4$L0
    IL_0039:  ldelem.ref
    IL_003a:  stloc.s    light
//000123:             Dim ldis = Vector.Minus(light.Position, pos)
    IL_003c:  ldloc.s    light
    IL_003e:  ldfld      valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Light::Position
    IL_0043:  ldarg.2
    IL_0044:  call       valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Minus(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,
                                                                                                                                                                                      valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector)
    IL_0049:  stloc.3
//000124:             Dim livec = Vector.Norm(ldis)
    IL_004a:  ldloc.3
    IL_004b:  call       valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Norm(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector)
    IL_0050:  stloc.s    livec
//000125:             Dim neatIsect = TestRay(New Ray(pos, livec), scene)
    IL_0052:  ldarg.0
    IL_0053:  ldloca.s   VB$t_struct$S1
    IL_0055:  ldarg.2
    IL_0056:  ldloc.s    livec
    IL_0058:  call       instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Ray::.ctor(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,
                                                                                                                 valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector)
    IL_005d:  nop
    IL_005e:  ldloc.s    VB$t_struct$S1
    IL_0060:  ldarg.s    scene
    IL_0062:  callvirt   instance float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer::TestRay(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Ray,
                                                                                                                            class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Scene)
    IL_0067:  stloc.s    neatIsect
//000126:             Dim isInShadow = Not (neatIsect > Vector.Mag(ldis) OrElse neatIsect = 0)
    IL_0069:  ldloc.s    neatIsect
    IL_006b:  ldloc.3
    IL_006c:  call       float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Mag(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector)
    IL_0071:  bgt.s      IL_0080

    IL_0073:  ldloc.s    neatIsect
    IL_0075:  ldc.r8     0.0
    IL_007e:  bne.un.s   IL_0083

    IL_0080:  ldc.i4.0
    IL_0081:  br.s       IL_0084

    IL_0083:  ldc.i4.1
    IL_0084:  stloc.2
//000127:             If Not isInShadow Then
    IL_0085:  ldloc.2
    IL_0086:  ldc.i4.0
    IL_0087:  ceq
    IL_0089:  stloc.s    VB$CG$t_bool$S0
//000128:                 Dim illum = Vector.Dot(livec, norm)
//000129:                 Dim lcolor = If(illum > 0, Color.Times(illum, light.Color), New Color(0, 0, 0))
//000130:                 Dim specular = Vector.Dot(livec, Vector.Norm(rd))
//000131:                 Dim scolor = If(specular > 0, Color.Times(Math.Pow(specular, thing.Surface.Roughness), light.Color), New Color(0, 0, 0))
//000132:                 ret = Color.Plus(ret, Color.Plus(Color.Times(thing.Surface.Diffuse(pos), lcolor),
//000133:                                                  Color.Times(thing.Surface.Specular(pos), scolor)))
//000134:             End If
//000135:         Next
//000136:         Return ret
//000137:     End Function
//000138: 
//000139:     Private Function GetReflectionColor(ByVal thing As SceneObject, ByVal pos As Vector, ByVal norm As Vector, ByVal rd As Vector, ByVal scene As Scene, ByVal depth As Integer) As Color
//000140:         Return Color.Times(thing.Surface.Reflect(pos), TraceRay(New Ray(pos, rd), scene, depth + 1))
//000141:     End Function
//000142: 
//000143:     Private Function Shade(ByVal isect As ISect, ByVal scene As Scene, ByVal depth As Integer) As Color
//000144:         Dim d = isect.Ray.Direction
//000145:         Dim pos = Vector.Plus(Vector.Times(isect.Dist, isect.Ray.Direction), isect.Ray.Start)
//000146:         Dim normal = isect.Thing.Normal(pos)
//000147:         Dim reflectDir = Vector.Minus(d, Vector.Times(2 * Vector.Dot(normal, d), normal))
//000148:         Dim ret = Color.Plus(Color.DefaultColor, GetNaturalColor(isect.Thing, pos, normal, reflectDir, scene))
//000149:         If depth >= MaxDepth Then Return Color.Plus(ret, New Color(0.5, 0.5, 0.5))
//000150:         Return Color.Plus(ret, GetReflectionColor(isect.Thing, Vector.Plus(pos, Vector.Times(0.001, reflectDir)), normal, reflectDir, scene, depth))
//000151:     End Function
//000152: 
//000153:     Private Function RecenterX(ByVal x As Double) As Double
//000154:         Return (x - (screenWidth / 2.0)) / (2.0 * screenWidth)
//000155:     End Function
//000156: 
//000157:     Private Function RecenterY(ByVal y As Double) As Double
//000158:         Return -(y - (screenHeight / 2.0)) / (2.0 * screenHeight)
//000159:     End Function
//000160: 
//000161:     Private Function GetPoint(ByVal x As Double, ByVal y As Double, ByVal camera As Camera) As Vector
//000162:         Return Vector.Norm(Vector.Plus(camera.Forward, Vector.Plus(Vector.Times(RecenterX(x), camera.Right),
//000163:                                                                    Vector.Times(RecenterY(y), camera.Up))))
//000164:     End Function
//000165: End Class
    IL_008b:  ldloc.s    VB$CG$t_bool$S0
    IL_008d:  brfalse    IL_0180

//000128:                 Dim illum = Vector.Dot(livec, norm)
    IL_0092:  ldloc.s    livec
    IL_0094:  ldarg.3
    IL_0095:  call       float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Dot(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,
                                                                                                            valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector)
    IL_009a:  stloc.s    illum
//000129:                 Dim lcolor = If(illum > 0, Color.Times(illum, light.Color), New Color(0, 0, 0))
    IL_009c:  ldloc.s    illum
    IL_009e:  ldc.r8     0.0
    IL_00a7:  bgt.s      IL_00d0

    IL_00a9:  ldloca.s   VB$t_struct$S0
    IL_00ab:  ldc.r8     0.0
    IL_00b4:  ldc.r8     0.0
    IL_00bd:  ldc.r8     0.0
    IL_00c6:  call       instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::.ctor(float64,
                                                                                                                   float64,
                                                                                                                   float64)
    IL_00cb:  nop
    IL_00cc:  ldloc.s    VB$t_struct$S0
    IL_00ce:  br.s       IL_00de

    IL_00d0:  ldloc.s    illum
    IL_00d2:  ldloc.s    light
    IL_00d4:  ldfld      valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Light::Color
    IL_00d9:  call       valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::Times(float64,
                                                                                                                                                                                    valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color)
    IL_00de:  stloc.s    lcolor
//000130:                 Dim specular = Vector.Dot(livec, Vector.Norm(rd))
    IL_00e0:  ldloc.s    livec
    IL_00e2:  ldarg.s    rd
    IL_00e4:  call       valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Norm(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector)
    IL_00e9:  call       float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Dot(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,
                                                                                                            valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector)
    IL_00ee:  stloc.s    specular
//000131:                 Dim scolor = If(specular > 0, Color.Times(Math.Pow(specular, thing.Surface.Roughness), light.Color), New Color(0, 0, 0))
    IL_00f0:  ldloc.s    specular
    IL_00f2:  ldc.r8     0.0
    IL_00fb:  bgt.s      IL_0124

    IL_00fd:  ldloca.s   VB$t_struct$S0
    IL_00ff:  ldc.r8     0.0
    IL_0108:  ldc.r8     0.0
    IL_0111:  ldc.r8     0.0
    IL_011a:  call       instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::.ctor(float64,
                                                                                                                   float64,
                                                                                                                   float64)
    IL_011f:  nop
    IL_0120:  ldloc.s    VB$t_struct$S0
    IL_0122:  br.s       IL_0142

    IL_0124:  ldloc.s    specular
    IL_0126:  ldarg.1
    IL_0127:  ldfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Surface Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.SceneObject::Surface
    IL_012c:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Surface::Roughness
    IL_0131:  call       float64 [mscorlib]System.Math::Pow(float64,
                                                            float64)
    IL_0136:  ldloc.s    light
    IL_0138:  ldfld      valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Light::Color
    IL_013d:  call       valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::Times(float64,
                                                                                                                                                                                    valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color)
    IL_0142:  stloc.s    scolor
//000132:                 ret = Color.Plus(ret, Color.Plus(Color.Times(thing.Surface.Diffuse(pos), lcolor),
    IL_0144:  ldloc.1
    IL_0145:  ldarg.1
    IL_0146:  ldfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Surface Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.SceneObject::Surface
    IL_014b:  ldfld      class [mscorlib]System.Func`2<valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color> Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Surface::Diffuse
    IL_0150:  ldarg.2
    IL_0151:  callvirt   instance !1 class [mscorlib]System.Func`2<valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color>::Invoke(!0)
    IL_0156:  ldloc.s    lcolor
    IL_0158:  call       valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::Times(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color,
                                                                                                                                                                                    valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color)
    IL_015d:  ldarg.1
    IL_015e:  ldfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Surface Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.SceneObject::Surface
    IL_0163:  ldfld      class [mscorlib]System.Func`2<valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color> Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Surface::Specular
    IL_0168:  ldarg.2
    IL_0169:  callvirt   instance !1 class [mscorlib]System.Func`2<valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color>::Invoke(!0)
    IL_016e:  ldloc.s    scolor
    IL_0170:  call       valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::Times(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color,
                                                                                                                                                                                    valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color)
    IL_0175:  call       valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::Plus(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color,
                                                                                                                                                                                   valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color)
    IL_017a:  call       valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::Plus(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color,
                                                                                                                                                                                   valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color)
    IL_017f:  stloc.1
//000133:                                                  Color.Times(thing.Surface.Specular(pos), scolor)))
//000134:             End If
    IL_0180:  nop
//000135:         Next
//000136:         Return ret
//000137:     End Function
//000138: 
//000139:     Private Function GetReflectionColor(ByVal thing As SceneObject, ByVal pos As Vector, ByVal norm As Vector, ByVal rd As Vector, ByVal scene As Scene, ByVal depth As Integer) As Color
//000140:         Return Color.Times(thing.Surface.Reflect(pos), TraceRay(New Ray(pos, rd), scene, depth + 1))
//000141:     End Function
//000142: 
//000143:     Private Function Shade(ByVal isect As ISect, ByVal scene As Scene, ByVal depth As Integer) As Color
//000144:         Dim d = isect.Ray.Direction
//000145:         Dim pos = Vector.Plus(Vector.Times(isect.Dist, isect.Ray.Direction), isect.Ray.Start)
//000146:         Dim normal = isect.Thing.Normal(pos)
//000147:         Dim reflectDir = Vector.Minus(d, Vector.Times(2 * Vector.Dot(normal, d), normal))
//000148:         Dim ret = Color.Plus(Color.DefaultColor, GetNaturalColor(isect.Thing, pos, normal, reflectDir, scene))
//000149:         If depth >= MaxDepth Then Return Color.Plus(ret, New Color(0.5, 0.5, 0.5))
//000150:         Return Color.Plus(ret, GetReflectionColor(isect.Thing, Vector.Plus(pos, Vector.Times(0.001, reflectDir)), normal, reflectDir, scene, depth))
//000151:     End Function
//000152: 
//000153:     Private Function RecenterX(ByVal x As Double) As Double
//000154:         Return (x - (screenWidth / 2.0)) / (2.0 * screenWidth)
//000155:     End Function
//000156: 
//000157:     Private Function RecenterY(ByVal y As Double) As Double
//000158:         Return -(y - (screenHeight / 2.0)) / (2.0 * screenHeight)
//000159:     End Function
//000160: 
//000161:     Private Function GetPoint(ByVal x As Double, ByVal y As Double, ByVal camera As Camera) As Vector
//000162:         Return Vector.Norm(Vector.Plus(camera.Forward, Vector.Plus(Vector.Times(RecenterX(x), camera.Right),
//000163:                                                                    Vector.Times(RecenterY(y), camera.Up))))
//000164:     End Function
//000165: End Class
    IL_0181:  ldloc.s    VB$t_i4$L0
    IL_0183:  ldc.i4.1
    IL_0184:  add.ovf
    IL_0185:  stloc.s    VB$t_i4$L0
//000135:         Next
    IL_0187:  nop
//000136:         Return ret
//000137:     End Function
//000138: 
//000139:     Private Function GetReflectionColor(ByVal thing As SceneObject, ByVal pos As Vector, ByVal norm As Vector, ByVal rd As Vector, ByVal scene As Scene, ByVal depth As Integer) As Color
//000140:         Return Color.Times(thing.Surface.Reflect(pos), TraceRay(New Ray(pos, rd), scene, depth + 1))
//000141:     End Function
//000142: 
//000143:     Private Function Shade(ByVal isect As ISect, ByVal scene As Scene, ByVal depth As Integer) As Color
//000144:         Dim d = isect.Ray.Direction
//000145:         Dim pos = Vector.Plus(Vector.Times(isect.Dist, isect.Ray.Direction), isect.Ray.Start)
//000146:         Dim normal = isect.Thing.Normal(pos)
//000147:         Dim reflectDir = Vector.Minus(d, Vector.Times(2 * Vector.Dot(normal, d), normal))
//000148:         Dim ret = Color.Plus(Color.DefaultColor, GetNaturalColor(isect.Thing, pos, normal, reflectDir, scene))
//000149:         If depth >= MaxDepth Then Return Color.Plus(ret, New Color(0.5, 0.5, 0.5))
//000150:         Return Color.Plus(ret, GetReflectionColor(isect.Thing, Vector.Plus(pos, Vector.Times(0.001, reflectDir)), normal, reflectDir, scene, depth))
//000151:     End Function
//000152: 
//000153:     Private Function RecenterX(ByVal x As Double) As Double
//000154:         Return (x - (screenWidth / 2.0)) / (2.0 * screenWidth)
//000155:     End Function
//000156: 
//000157:     Private Function RecenterY(ByVal y As Double) As Double
//000158:         Return -(y - (screenHeight / 2.0)) / (2.0 * screenHeight)
//000159:     End Function
//000160: 
//000161:     Private Function GetPoint(ByVal x As Double, ByVal y As Double, ByVal camera As Camera) As Vector
//000162:         Return Vector.Norm(Vector.Plus(camera.Forward, Vector.Plus(Vector.Times(RecenterX(x), camera.Right),
//000163:                                                                    Vector.Times(RecenterY(y), camera.Up))))
//000164:     End Function
//000165: End Class
    IL_0188:  ldloc.s    VB$t_i4$L0
    IL_018a:  ldloc.s    VB$t_array$L0
    IL_018c:  ldlen
    IL_018d:  conv.ovf.i4
    IL_018e:  clt
    IL_0190:  stloc.s    VB$CG$t_bool$S0
    IL_0192:  ldloc.s    VB$CG$t_bool$S0
    IL_0194:  brtrue     IL_0035

//000136:         Return ret
    IL_0199:  ldloc.1
    IL_019a:  stloc.0
    IL_019b:  br.s       IL_019d

//000137:     End Function
    IL_019d:  ldloc.0
    IL_019e:  ret
  } // end of method RayTracer::GetNaturalColor

  .method private instance valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color 
          GetReflectionColor(class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.SceneObject thing,
                             valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector pos,
                             valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector norm,
                             valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector rd,
                             class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Scene scene,
                             int32 depth) cil managed
  {
    // Code size       52 (0x34)
    .maxstack  6
    .locals init ([0] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color GetReflectionColor,
             [1] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Ray VB$t_struct$S0)
//000138: 
//000139:     Private Function GetReflectionColor(ByVal thing As SceneObject, ByVal pos As Vector, ByVal norm As Vector, ByVal rd As Vector, ByVal scene As Scene, ByVal depth As Integer) As Color
    IL_0000:  nop
//000140:         Return Color.Times(thing.Surface.Reflect(pos), TraceRay(New Ray(pos, rd), scene, depth + 1))
    IL_0001:  ldarg.1
    IL_0002:  ldfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Surface Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.SceneObject::Surface
    IL_0007:  ldfld      class [mscorlib]System.Func`2<valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,float64> Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Surface::Reflect
    IL_000c:  ldarg.2
    IL_000d:  callvirt   instance !1 class [mscorlib]System.Func`2<valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,float64>::Invoke(!0)
    IL_0012:  ldarg.0
    IL_0013:  ldloca.s   VB$t_struct$S0
    IL_0015:  ldarg.2
    IL_0016:  ldarg.s    rd
    IL_0018:  call       instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Ray::.ctor(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,
                                                                                                                 valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector)
    IL_001d:  nop
    IL_001e:  ldloc.1
    IL_001f:  ldarg.s    scene
    IL_0021:  ldarg.s    depth
    IL_0023:  ldc.i4.1
    IL_0024:  add.ovf
    IL_0025:  callvirt   instance valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer::TraceRay(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Ray,
                                                                                                                                                                                                    class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Scene,
                                                                                                                                                                                                    int32)
    IL_002a:  call       valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::Times(float64,
                                                                                                                                                                                    valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color)
    IL_002f:  stloc.0
    IL_0030:  br.s       IL_0032

//000141:     End Function
    IL_0032:  ldloc.0
    IL_0033:  ret
  } // end of method RayTracer::GetReflectionColor

  .method private instance valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color 
          Shade(class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.ISect isect,
                class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Scene scene,
                int32 depth) cil managed
  {
    // Code size       235 (0xeb)
    .maxstack  8
    .locals init ([0] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector d,
             [1] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector normal,
             [2] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector pos,
             [3] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector reflectDir,
             [4] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color 'ret',
             [5] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color Shade,
             [6] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color VB$t_struct$S0,
             [7] bool VB$CG$t_bool$S0)
//000142: 
//000143:     Private Function Shade(ByVal isect As ISect, ByVal scene As Scene, ByVal depth As Integer) As Color
    IL_0000:  nop
//000144:         Dim d = isect.Ray.Direction
    IL_0001:  ldarg.1
    IL_0002:  ldflda     valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Ray Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.ISect::Ray
    IL_0007:  ldfld      valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Ray::Direction
    IL_000c:  stloc.0
//000145:         Dim pos = Vector.Plus(Vector.Times(isect.Dist, isect.Ray.Direction), isect.Ray.Start)
    IL_000d:  ldarg.1
    IL_000e:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.ISect::Dist
    IL_0013:  ldarg.1
    IL_0014:  ldflda     valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Ray Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.ISect::Ray
    IL_0019:  ldfld      valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Ray::Direction
    IL_001e:  call       valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Times(float64,
                                                                                                                                                                                      valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector)
    IL_0023:  ldarg.1
    IL_0024:  ldflda     valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Ray Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.ISect::Ray
    IL_0029:  ldfld      valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Ray::Start
    IL_002e:  call       valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Plus(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,
                                                                                                                                                                                     valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector)
    IL_0033:  stloc.2
//000146:         Dim normal = isect.Thing.Normal(pos)
    IL_0034:  ldarg.1
    IL_0035:  ldfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.SceneObject Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.ISect::Thing
    IL_003a:  ldloc.2
    IL_003b:  callvirt   instance valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.SceneObject::Normal(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector)
    IL_0040:  stloc.1
//000147:         Dim reflectDir = Vector.Minus(d, Vector.Times(2 * Vector.Dot(normal, d), normal))
    IL_0041:  ldloc.0
    IL_0042:  ldc.r8     2.
    IL_004b:  ldloc.1
    IL_004c:  ldloc.0
    IL_004d:  call       float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Dot(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,
                                                                                                            valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector)
    IL_0052:  mul
    IL_0053:  ldloc.1
    IL_0054:  call       valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Times(float64,
                                                                                                                                                                                      valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector)
    IL_0059:  call       valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Minus(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,
                                                                                                                                                                                      valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector)
    IL_005e:  stloc.3
//000148:         Dim ret = Color.Plus(Color.DefaultColor, GetNaturalColor(isect.Thing, pos, normal, reflectDir, scene))
    IL_005f:  ldsfld     valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::DefaultColor
    IL_0064:  ldarg.0
    IL_0065:  ldarg.1
    IL_0066:  ldfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.SceneObject Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.ISect::Thing
    IL_006b:  ldloc.2
    IL_006c:  ldloc.1
    IL_006d:  ldloc.3
    IL_006e:  ldarg.2
    IL_006f:  callvirt   instance valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer::GetNaturalColor(class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.SceneObject,
                                                                                                                                                                                                           valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,
                                                                                                                                                                                                           valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,
                                                                                                                                                                                                           valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,
                                                                                                                                                                                                           class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Scene)
    IL_0074:  call       valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::Plus(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color,
                                                                                                                                                                                   valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color)
    IL_0079:  stloc.s    'ret'
//000149:         If depth >= MaxDepth Then Return Color.Plus(ret, New Color(0.5, 0.5, 0.5))
    IL_007b:  ldarg.3
    IL_007c:  ldc.i4.5
    IL_007d:  clt
    IL_007f:  ldc.i4.0
    IL_0080:  ceq
    IL_0082:  stloc.s    VB$CG$t_bool$S0
//000150:         Return Color.Plus(ret, GetReflectionColor(isect.Thing, Vector.Plus(pos, Vector.Times(0.001, reflectDir)), normal, reflectDir, scene, depth))
//000151:     End Function
//000152: 
//000153:     Private Function RecenterX(ByVal x As Double) As Double
//000154:         Return (x - (screenWidth / 2.0)) / (2.0 * screenWidth)
//000155:     End Function
//000156: 
//000157:     Private Function RecenterY(ByVal y As Double) As Double
//000158:         Return -(y - (screenHeight / 2.0)) / (2.0 * screenHeight)
//000159:     End Function
//000160: 
//000161:     Private Function GetPoint(ByVal x As Double, ByVal y As Double, ByVal camera As Camera) As Vector
//000162:         Return Vector.Norm(Vector.Plus(camera.Forward, Vector.Plus(Vector.Times(RecenterX(x), camera.Right),
//000163:                                                                    Vector.Times(RecenterY(y), camera.Up))))
//000164:     End Function
//000165: End Class
    IL_0084:  ldloc.s    VB$CG$t_bool$S0
    IL_0086:  brfalse.s  IL_00b8

//000149:         If depth >= MaxDepth Then Return Color.Plus(ret, New Color(0.5, 0.5, 0.5))
    IL_0088:  ldloc.s    'ret'
    IL_008a:  ldloca.s   VB$t_struct$S0
    IL_008c:  ldc.r8     0.5
    IL_0095:  ldc.r8     0.5
    IL_009e:  ldc.r8     0.5
    IL_00a7:  call       instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::.ctor(float64,
                                                                                                                   float64,
                                                                                                                   float64)
    IL_00ac:  nop
    IL_00ad:  ldloc.s    VB$t_struct$S0
    IL_00af:  call       valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::Plus(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color,
                                                                                                                                                                                   valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color)
    IL_00b4:  stloc.s    Shade
    IL_00b6:  br.s       IL_00e8

//000150:         Return Color.Plus(ret, GetReflectionColor(isect.Thing, Vector.Plus(pos, Vector.Times(0.001, reflectDir)), normal, reflectDir, scene, depth))
    IL_00b8:  ldloc.s    'ret'
    IL_00ba:  ldarg.0
    IL_00bb:  ldarg.1
    IL_00bc:  ldfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.SceneObject Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.ISect::Thing
    IL_00c1:  ldloc.2
    IL_00c2:  ldc.r8     1.e-003
    IL_00cb:  ldloc.3
    IL_00cc:  call       valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Times(float64,
                                                                                                                                                                                      valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector)
    IL_00d1:  call       valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Plus(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,
                                                                                                                                                                                     valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector)
    IL_00d6:  ldloc.1
    IL_00d7:  ldloc.3
    IL_00d8:  ldarg.2
    IL_00d9:  ldarg.3
    IL_00da:  callvirt   instance valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer::GetReflectionColor(class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.SceneObject,
                                                                                                                                                                                                              valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,
                                                                                                                                                                                                              valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,
                                                                                                                                                                                                              valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,
                                                                                                                                                                                                              class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Scene,
                                                                                                                                                                                                              int32)
    IL_00df:  call       valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::Plus(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color,
                                                                                                                                                                                   valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color)
    IL_00e4:  stloc.s    Shade
    IL_00e6:  br.s       IL_00e8

//000151:     End Function
    IL_00e8:  ldloc.s    Shade
    IL_00ea:  ret
  } // end of method RayTracer::Shade

  .method private instance float64  RecenterX(float64 x) cil managed
  {
    // Code size       43 (0x2b)
    .maxstack  3
    .locals init ([0] float64 RecenterX)
//000152: 
//000153:     Private Function RecenterX(ByVal x As Double) As Double
    IL_0000:  nop
//000154:         Return (x - (screenWidth / 2.0)) / (2.0 * screenWidth)
    IL_0001:  ldarg.1
    IL_0002:  ldarg.0
    IL_0003:  ldfld      int32 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer::screenWidth
    IL_0008:  conv.r8
    IL_0009:  ldc.r8     2.
    IL_0012:  div
    IL_0013:  sub
    IL_0014:  ldc.r8     2.
    IL_001d:  ldarg.0
    IL_001e:  ldfld      int32 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer::screenWidth
    IL_0023:  conv.r8
    IL_0024:  mul
    IL_0025:  div
    IL_0026:  stloc.0
    IL_0027:  br.s       IL_0029

//000155:     End Function
    IL_0029:  ldloc.0
    IL_002a:  ret
  } // end of method RayTracer::RecenterX

  .method private instance float64  RecenterY(float64 y) cil managed
  {
    // Code size       44 (0x2c)
    .maxstack  3
    .locals init ([0] float64 RecenterY)
//000156: 
//000157:     Private Function RecenterY(ByVal y As Double) As Double
    IL_0000:  nop
//000158:         Return -(y - (screenHeight / 2.0)) / (2.0 * screenHeight)
    IL_0001:  ldarg.1
    IL_0002:  ldarg.0
    IL_0003:  ldfld      int32 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer::screenHeight
    IL_0008:  conv.r8
    IL_0009:  ldc.r8     2.
    IL_0012:  div
    IL_0013:  sub
    IL_0014:  neg
    IL_0015:  ldc.r8     2.
    IL_001e:  ldarg.0
    IL_001f:  ldfld      int32 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer::screenHeight
    IL_0024:  conv.r8
    IL_0025:  mul
    IL_0026:  div
    IL_0027:  stloc.0
    IL_0028:  br.s       IL_002a

//000159:     End Function
    IL_002a:  ldloc.0
    IL_002b:  ret
  } // end of method RayTracer::RecenterY

  .method private instance valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector 
          GetPoint(float64 x,
                   float64 y,
                   class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Camera camera) cil managed
  {
    // Code size       63 (0x3f)
    .maxstack  4
    .locals init ([0] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector GetPoint)
//000160: 
//000161:     Private Function GetPoint(ByVal x As Double, ByVal y As Double, ByVal camera As Camera) As Vector
    IL_0000:  nop
//000162:         Return Vector.Norm(Vector.Plus(camera.Forward, Vector.Plus(Vector.Times(RecenterX(x), camera.Right),
    IL_0001:  ldarg.3
    IL_0002:  ldfld      valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Camera::Forward
    IL_0007:  ldarg.0
    IL_0008:  ldarg.1
    IL_0009:  callvirt   instance float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer::RecenterX(float64)
    IL_000e:  ldarg.3
    IL_000f:  ldfld      valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Camera::Right
    IL_0014:  call       valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Times(float64,
                                                                                                                                                                                      valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector)
    IL_0019:  ldarg.0
    IL_001a:  ldarg.2
    IL_001b:  callvirt   instance float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer::RecenterY(float64)
    IL_0020:  ldarg.3
    IL_0021:  ldfld      valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Camera::Up
    IL_0026:  call       valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Times(float64,
                                                                                                                                                                                      valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector)
    IL_002b:  call       valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Plus(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,
                                                                                                                                                                                     valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector)
    IL_0030:  call       valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Plus(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,
                                                                                                                                                                                     valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector)
    IL_0035:  call       valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Norm(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector)
    IL_003a:  stloc.0
    IL_003b:  br.s       IL_003d

//000163:                                                                    Vector.Times(RecenterY(y), camera.Up))))
//000164:     End Function
    IL_003d:  ldloc.0
    IL_003e:  ret
  } // end of method RayTracer::GetPoint

} // end of class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.RayTracer

.class public auto ansi Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Scene
       extends [mscorlib]System.Object
{
  .field public class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.SceneObject[] Things
  .field public class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Light[] Lights
  .field public class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Camera Camera
  .method public specialname rtspecialname 
          instance void  .ctor(class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.SceneObject[] things,
                               class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Light[] lights,
                               class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Camera camera) cil managed
  {
    // Code size       31 (0x1f)
    .maxstack  8
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Raytracer\Raytracer_VisualBasic\Scene.vb' 
//000016:     Public Sub New(ByVal things As SceneObject(), ByVal lights As Light(), ByVal camera As Camera)
    IL_0000:  nop
//000017:         Me.Things = things
//000018:         Me.Lights = lights
//000019:         Me.Camera = camera
//000020:     End Sub
//000021: 
//000022:     Public Function Intersect(ByVal r As Ray) As IEnumerable(Of ISect)
//000023:         Dim objects = New List(Of ISect)()
//000024:         For Each obj In Things
//000025:             objects.Add(obj.Intersect(r))
//000026:         Next
//000027:         Return objects
//000028:     End Function
//000029: End Class
    IL_0001:  ldarg.0
    IL_0002:  call       instance void [mscorlib]System.Object::.ctor()
    IL_0007:  nop
//000017:         Me.Things = things
    IL_0008:  ldarg.0
    IL_0009:  ldarg.1
    IL_000a:  stfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.SceneObject[] Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Scene::Things
//000018:         Me.Lights = lights
    IL_000f:  ldarg.0
    IL_0010:  ldarg.2
    IL_0011:  stfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Light[] Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Scene::Lights
//000019:         Me.Camera = camera
    IL_0016:  ldarg.0
    IL_0017:  ldarg.3
    IL_0018:  stfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Camera Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Scene::Camera
//000020:     End Sub
    IL_001d:  nop
    IL_001e:  ret
  } // end of method Scene::.ctor

  .method public instance class [mscorlib]System.Collections.Generic.IEnumerable`1<class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.ISect> 
          Intersect(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Ray r) cil managed
  {
    // Code size       62 (0x3e)
    .maxstack  3
    .locals init ([0] class [mscorlib]System.Collections.Generic.IEnumerable`1<class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.ISect> Intersect,
             [1] class [mscorlib]System.Collections.Generic.List`1<class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.ISect> objects,
             [2] class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.SceneObject obj,
             [3] int32 VB$t_i4$L0,
             [4] class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.SceneObject[] VB$t_array$L0,
             [5] bool VB$CG$t_bool$S0)
//000021: 
//000022:     Public Function Intersect(ByVal r As Ray) As IEnumerable(Of ISect)
    IL_0000:  nop
//000023:         Dim objects = New List(Of ISect)()
    IL_0001:  newobj     instance void class [mscorlib]System.Collections.Generic.List`1<class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.ISect>::.ctor()
    IL_0006:  stloc.1
//000024:         For Each obj In Things
    IL_0007:  ldarg.0
    IL_0008:  ldfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.SceneObject[] Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Scene::Things
    IL_000d:  stloc.s    VB$t_array$L0
    IL_000f:  ldc.i4.0
    IL_0010:  stloc.3
    IL_0011:  br.s       IL_002b

//000025:             objects.Add(obj.Intersect(r))
//000026:         Next
//000027:         Return objects
//000028:     End Function
//000029: End Class
    IL_0013:  ldloc.s    VB$t_array$L0
    IL_0015:  ldloc.3
    IL_0016:  ldelem.ref
    IL_0017:  stloc.2
//000025:             objects.Add(obj.Intersect(r))
    IL_0018:  ldloc.1
    IL_0019:  ldloc.2
    IL_001a:  ldarg.1
    IL_001b:  callvirt   instance class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.ISect Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.SceneObject::Intersect(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Ray)
    IL_0020:  callvirt   instance void class [mscorlib]System.Collections.Generic.List`1<class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.ISect>::Add(!0)
    IL_0025:  nop
//000026:         Next
//000027:         Return objects
//000028:     End Function
//000029: End Class
    IL_0026:  ldloc.3
    IL_0027:  ldc.i4.1
    IL_0028:  add.ovf
    IL_0029:  stloc.3
//000026:         Next
    IL_002a:  nop
//000027:         Return objects
//000028:     End Function
//000029: End Class
    IL_002b:  ldloc.3
    IL_002c:  ldloc.s    VB$t_array$L0
    IL_002e:  ldlen
    IL_002f:  conv.ovf.i4
    IL_0030:  clt
    IL_0032:  stloc.s    VB$CG$t_bool$S0
    IL_0034:  ldloc.s    VB$CG$t_bool$S0
    IL_0036:  brtrue.s   IL_0013

//000027:         Return objects
    IL_0038:  ldloc.1
    IL_0039:  stloc.0
    IL_003a:  br.s       IL_003c

//000028:     End Function
    IL_003c:  ldloc.0
    IL_003d:  ret
  } // end of method Scene::Intersect

} // end of class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Scene

.class public abstract auto ansi Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.SceneObject
       extends [mscorlib]System.Object
{
  .field public class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Surface Surface
  .method public newslot abstract strict virtual 
          instance class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.ISect 
          Intersect(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Ray ray) cil managed
  {
  } // end of method SceneObject::Intersect

  .method public newslot abstract strict virtual 
          instance valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector 
          Normal(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector position) cil managed
  {
  } // end of method SceneObject::Normal

  .method public specialname rtspecialname 
          instance void  .ctor(class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Surface surface) cil managed
  {
    // Code size       17 (0x11)
    .maxstack  8
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Raytracer\Raytracer_VisualBasic\SceneObject.vb' 
//000014:     Public Sub New(ByVal surface As Surface)
    IL_0000:  nop
//000015:         Me.Surface = surface
//000016:     End Sub
//000017: End Class
    IL_0001:  ldarg.0
    IL_0002:  call       instance void [mscorlib]System.Object::.ctor()
    IL_0007:  nop
//000015:         Me.Surface = surface
    IL_0008:  ldarg.0
    IL_0009:  ldarg.1
    IL_000a:  stfld      class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Surface Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.SceneObject::Surface
//000016:     End Sub
    IL_000f:  nop
    IL_0010:  ret
  } // end of method SceneObject::.ctor

} // end of class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.SceneObject

.class public auto ansi Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Sphere
       extends Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.SceneObject
{
  .field public valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Center
  .field public float64 Radius
  .method public specialname rtspecialname 
          instance void  .ctor(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector center,
                               float64 radius,
                               class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Surface surface) cil managed
  {
    // Code size       25 (0x19)
    .maxstack  8
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Raytracer\Raytracer_VisualBasic\Sphere.vb' 
//000015:     Public Sub New(ByVal center As Vector, ByVal radius As Double, ByVal surface As Surface)
    IL_0000:  nop
//000016:         MyBase.New(surface)
    IL_0001:  ldarg.0
    IL_0002:  ldarg.3
    IL_0003:  call       instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.SceneObject::.ctor(class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Surface)
    IL_0008:  nop
//000017:         Me.Center = center
    IL_0009:  ldarg.0
    IL_000a:  ldarg.1
    IL_000b:  stfld      valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Sphere::Center
//000018:         Me.Radius = radius
    IL_0010:  ldarg.0
    IL_0011:  ldarg.2
    IL_0012:  stfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Sphere::Radius
//000019:     End Sub
    IL_0017:  nop
    IL_0018:  ret
  } // end of method Sphere::.ctor

  .method public strict virtual instance class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.ISect 
          Intersect(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Ray ray) cil managed
  {
    // Code size       181 (0xb5)
    .maxstack  4
    .locals init ([0] float64 dist,
             [1] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector eo,
             [2] class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.ISect Intersect,
             [3] float64 v,
             [4] float64 disc,
             [5] bool VB$CG$t_bool$S0)
//000020: 
//000021:     Public Overrides Function Intersect(ByVal ray As Ray) As ISect
    IL_0000:  nop
//000022:         Dim eo = Vector.Minus(Center, ray.Start)
    IL_0001:  ldarg.0
    IL_0002:  ldfld      valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Sphere::Center
    IL_0007:  ldarga.s   ray
    IL_0009:  ldfld      valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Ray::Start
    IL_000e:  call       valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Minus(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,
                                                                                                                                                                                      valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector)
    IL_0013:  stloc.1
//000023:         Dim v = Vector.Dot(eo, ray.Direction)
    IL_0014:  ldloc.1
    IL_0015:  ldarga.s   ray
    IL_0017:  ldfld      valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Ray::Direction
    IL_001c:  call       float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Dot(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,
                                                                                                            valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector)
    IL_0021:  stloc.3
//000024:         Dim dist As Double
//000025:         If v < 0 Then
    IL_0022:  ldloc.3
    IL_0023:  ldc.r8     0.0
    IL_002c:  clt
    IL_002e:  stloc.s    VB$CG$t_bool$S0
//000026:             dist = 0
//000027:         Else
//000028:             Dim disc = Math.Pow(Radius, 2) - (Vector.Dot(eo, eo) - Math.Pow(v, 2))
//000029:             dist = If(disc < 0, 0, v - Math.Sqrt(disc))
//000030:         End If
//000031:         If dist = 0 Then Return Nothing
//000032:         Return New ISect(Me, ray, dist)
//000033:     End Function
//000034: 
//000035:     Public Overrides Function Normal(ByVal position As Vector) As Vector
//000036:         Return Vector.Norm(Vector.Minus(position, Center))
//000037:     End Function
//000038: End Class
    IL_0030:  ldloc.s    VB$CG$t_bool$S0
    IL_0032:  brfalse.s  IL_0040

//000026:             dist = 0
    IL_0034:  ldc.r8     0.0
    IL_003d:  stloc.0
    IL_003e:  br.s       IL_0091

//000027:         Else
    IL_0040:  nop
//000028:             Dim disc = Math.Pow(Radius, 2) - (Vector.Dot(eo, eo) - Math.Pow(v, 2))
    IL_0041:  ldarg.0
    IL_0042:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Sphere::Radius
    IL_0047:  ldc.r8     2.
    IL_0050:  call       float64 [mscorlib]System.Math::Pow(float64,
                                                            float64)
    IL_0055:  ldloc.1
    IL_0056:  ldloc.1
    IL_0057:  call       float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Dot(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,
                                                                                                            valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector)
    IL_005c:  ldloc.3
    IL_005d:  ldc.r8     2.
    IL_0066:  call       float64 [mscorlib]System.Math::Pow(float64,
                                                            float64)
    IL_006b:  sub
    IL_006c:  sub
    IL_006d:  stloc.s    disc
//000029:             dist = If(disc < 0, 0, v - Math.Sqrt(disc))
    IL_006f:  ldloc.s    disc
    IL_0071:  ldc.r8     0.0
    IL_007a:  blt.s      IL_0087

    IL_007c:  ldloc.3
    IL_007d:  ldloc.s    disc
    IL_007f:  call       float64 [mscorlib]System.Math::Sqrt(float64)
    IL_0084:  sub
    IL_0085:  br.s       IL_0090

    IL_0087:  ldc.r8     0.0
    IL_0090:  stloc.0
//000030:         End If
    IL_0091:  nop
//000031:         If dist = 0 Then Return Nothing
    IL_0092:  ldloc.0
    IL_0093:  ldc.r8     0.0
    IL_009c:  ceq
    IL_009e:  stloc.s    VB$CG$t_bool$S0
//000032:         Return New ISect(Me, ray, dist)
//000033:     End Function
//000034: 
//000035:     Public Overrides Function Normal(ByVal position As Vector) As Vector
//000036:         Return Vector.Norm(Vector.Minus(position, Center))
//000037:     End Function
//000038: End Class
    IL_00a0:  ldloc.s    VB$CG$t_bool$S0
    IL_00a2:  brfalse.s  IL_00a8

//000031:         If dist = 0 Then Return Nothing
    IL_00a4:  ldnull
    IL_00a5:  stloc.2
    IL_00a6:  br.s       IL_00b3

//000032:         Return New ISect(Me, ray, dist)
    IL_00a8:  ldarg.0
    IL_00a9:  ldarg.1
    IL_00aa:  ldloc.0
    IL_00ab:  newobj     instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.ISect::.ctor(class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.SceneObject,
                                                                                                                   valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Ray,
                                                                                                                   float64)
    IL_00b0:  stloc.2
    IL_00b1:  br.s       IL_00b3

//000033:     End Function
    IL_00b3:  ldloc.2
    IL_00b4:  ret
  } // end of method Sphere::Intersect

  .method public strict virtual instance valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector 
          Normal(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector position) cil managed
  {
    // Code size       23 (0x17)
    .maxstack  2
    .locals init ([0] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Normal)
//000034: 
//000035:     Public Overrides Function Normal(ByVal position As Vector) As Vector
    IL_0000:  nop
//000036:         Return Vector.Norm(Vector.Minus(position, Center))
    IL_0001:  ldarg.1
    IL_0002:  ldarg.0
    IL_0003:  ldfld      valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Sphere::Center
    IL_0008:  call       valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Minus(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,
                                                                                                                                                                                      valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector)
    IL_000d:  call       valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Norm(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector)
    IL_0012:  stloc.0
    IL_0013:  br.s       IL_0015

//000037:     End Function
    IL_0015:  ldloc.0
    IL_0016:  ret
  } // end of method Sphere::Normal

} // end of class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Sphere

.class public auto ansi Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Surface
       extends [mscorlib]System.Object
{
  .field public class [mscorlib]System.Func`2<valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color> Diffuse
  .field public class [mscorlib]System.Func`2<valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color> Specular
  .field public class [mscorlib]System.Func`2<valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,float64> Reflect
  .field public float64 Roughness
  .method public specialname rtspecialname 
          instance void  .ctor(class [mscorlib]System.Func`2<valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color> diffuse,
                               class [mscorlib]System.Func`2<valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color> specular,
                               class [mscorlib]System.Func`2<valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,float64> reflect,
                               float64 roughness) cil managed
  {
    // Code size       39 (0x27)
    .maxstack  8
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Raytracer\Raytracer_VisualBasic\Surface.vb' 
//000015:     Public Sub New(ByVal diffuse As Func(Of Vector, Color), ByVal specular As Func(Of Vector, Color),
    IL_0000:  nop
//000016:                    ByVal reflect As Func(Of Vector, Double), ByVal roughness As Double)
//000017:         Me.Diffuse = diffuse
//000018:         Me.Specular = specular
//000019:         Me.Reflect = reflect
//000020:         Me.Roughness = roughness
//000021:     End Sub
//000022: End Class
    IL_0001:  ldarg.0
    IL_0002:  call       instance void [mscorlib]System.Object::.ctor()
    IL_0007:  nop
//000017:         Me.Diffuse = diffuse
    IL_0008:  ldarg.0
    IL_0009:  ldarg.1
    IL_000a:  stfld      class [mscorlib]System.Func`2<valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color> Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Surface::Diffuse
//000018:         Me.Specular = specular
    IL_000f:  ldarg.0
    IL_0010:  ldarg.2
    IL_0011:  stfld      class [mscorlib]System.Func`2<valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color> Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Surface::Specular
//000019:         Me.Reflect = reflect
    IL_0016:  ldarg.0
    IL_0017:  ldarg.3
    IL_0018:  stfld      class [mscorlib]System.Func`2<valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,float64> Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Surface::Reflect
//000020:         Me.Roughness = roughness
    IL_001d:  ldarg.0
    IL_001e:  ldarg.s    roughness
    IL_0020:  stfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Surface::Roughness
//000021:     End Sub
    IL_0025:  nop
    IL_0026:  ret
  } // end of method Surface::.ctor

} // end of class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Surface

.class public auto ansi beforefieldinit Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Surfaces
       extends [mscorlib]System.Object
{
  .field public static initonly class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Surface CheckerBoard
  .field public static initonly class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Surface Shiny
  .field public static initonly class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Surface MatteShiny
  .method private specialname rtspecialname static 
          void  .cctor() cil managed
  {
    // Code size       167 (0xa7)
    .maxstack  4
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Raytracer\Raytracer_VisualBasic\Surfaces.vb' 
//000011:     Public Shared ReadOnly CheckerBoard As Surface = New Surface(
    IL_0000:  ldnull
    IL_0001:  ldftn      valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Surfaces::_Lambda$__8(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector)
    IL_0007:  newobj     instance void class [mscorlib]System.Func`2<valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color>::.ctor(object,
                                                                                                                                                                                                                                            native int)
    IL_000c:  ldnull
    IL_000d:  ldftn      valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Surfaces::_Lambda$__9(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector)
    IL_0013:  newobj     instance void class [mscorlib]System.Func`2<valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color>::.ctor(object,
                                                                                                                                                                                                                                            native int)
    IL_0018:  ldnull
    IL_0019:  ldftn      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Surfaces::_Lambda$__10(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector)
    IL_001f:  newobj     instance void class [mscorlib]System.Func`2<valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,float64>::.ctor(object,
                                                                                                                                                                     native int)
    IL_0024:  ldc.r8     150.
    IL_002d:  newobj     instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Surface::.ctor(class [mscorlib]System.Func`2<valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color>,
                                                                                                                     class [mscorlib]System.Func`2<valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color>,
                                                                                                                     class [mscorlib]System.Func`2<valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,float64>,
                                                                                                                     float64)
    IL_0032:  stsfld     class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Surface Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Surfaces::CheckerBoard
//000012:         Function(pos) If(((Math.Floor(pos.Z) + Math.Floor(pos.X)) Mod 2 <> 0), New Color(1, 1, 1), New Color(0.02, 0.0, 0.14)),
//000013:         Function(pos) New Color(1, 1, 1),
//000014:         Function(pos) If(((Math.Floor(pos.Z) + Math.Floor(pos.X)) Mod 2 <> 0), 0.1, 0.5),
//000015:         150)
//000016: 
//000017:     Public Shared ReadOnly Shiny As Surface = New Surface(
    IL_0037:  ldnull
    IL_0038:  ldftn      valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Surfaces::_Lambda$__11(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector)
    IL_003e:  newobj     instance void class [mscorlib]System.Func`2<valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color>::.ctor(object,
                                                                                                                                                                                                                                            native int)
    IL_0043:  ldnull
    IL_0044:  ldftn      valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Surfaces::_Lambda$__12(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector)
    IL_004a:  newobj     instance void class [mscorlib]System.Func`2<valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color>::.ctor(object,
                                                                                                                                                                                                                                            native int)
    IL_004f:  ldnull
    IL_0050:  ldftn      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Surfaces::_Lambda$__13(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector)
    IL_0056:  newobj     instance void class [mscorlib]System.Func`2<valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,float64>::.ctor(object,
                                                                                                                                                                     native int)
    IL_005b:  ldc.r8     250.
    IL_0064:  newobj     instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Surface::.ctor(class [mscorlib]System.Func`2<valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color>,
                                                                                                                     class [mscorlib]System.Func`2<valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color>,
                                                                                                                     class [mscorlib]System.Func`2<valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,float64>,
                                                                                                                     float64)
    IL_0069:  stsfld     class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Surface Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Surfaces::Shiny
//000018:         Function(pos) New Color(1, 1, 1),
//000019:         Function(pos) New Color(0.5, 0.5, 0.5),
//000020:         Function(pos) 0.7,
//000021:         250)
//000022: 
//000023:     Public Shared ReadOnly MatteShiny As Surface = New Surface(
    IL_006e:  ldnull
    IL_006f:  ldftn      valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Surfaces::_Lambda$__14(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector)
    IL_0075:  newobj     instance void class [mscorlib]System.Func`2<valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color>::.ctor(object,
                                                                                                                                                                                                                                            native int)
    IL_007a:  ldnull
    IL_007b:  ldftn      valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Surfaces::_Lambda$__15(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector)
    IL_0081:  newobj     instance void class [mscorlib]System.Func`2<valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color>::.ctor(object,
                                                                                                                                                                                                                                            native int)
    IL_0086:  ldnull
    IL_0087:  ldftn      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Surfaces::_Lambda$__16(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector)
    IL_008d:  newobj     instance void class [mscorlib]System.Func`2<valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,float64>::.ctor(object,
                                                                                                                                                                     native int)
    IL_0092:  ldc.r8     250.
    IL_009b:  newobj     instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Surface::.ctor(class [mscorlib]System.Func`2<valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color>,
                                                                                                                     class [mscorlib]System.Func`2<valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color>,
                                                                                                                     class [mscorlib]System.Func`2<valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,float64>,
                                                                                                                     float64)
    IL_00a0:  stsfld     class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Surface Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Surfaces::MatteShiny
    IL_00a5:  nop
    IL_00a6:  ret
  } // end of method Surfaces::.cctor

  .method public specialname rtspecialname 
          instance void  .ctor() cil managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       9 (0x9)
    .maxstack  8
    IL_0000:  ldarg.0
    IL_0001:  call       instance void [mscorlib]System.Object::.ctor()
    IL_0006:  nop
    IL_0007:  nop
    IL_0008:  ret
  } // end of method Surfaces::.ctor

  .method private specialname static valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color 
          _Lambda$__8(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector pos) cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       125 (0x7d)
    .maxstack  4
    .locals init ([0] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color _Lambda$__8,
             [1] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color VB$t_struct$S0,
             [2] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color VB$t_struct$S1)
//000012:         Function(pos) If(((Math.Floor(pos.Z) + Math.Floor(pos.X)) Mod 2 <> 0), New Color(1, 1, 1), New Color(0.02, 0.0, 0.14)),
    IL_0000:  ldarga.s   pos
    IL_0002:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Z
    IL_0007:  call       float64 [mscorlib]System.Math::Floor(float64)
    IL_000c:  ldarga.s   pos
    IL_000e:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::X
    IL_0013:  call       float64 [mscorlib]System.Math::Floor(float64)
    IL_0018:  add
    IL_0019:  ldc.r8     2.
    IL_0022:  rem
    IL_0023:  ldc.r8     0.0
    IL_002c:  bne.un.s   IL_0054

    IL_002e:  ldloca.s   VB$t_struct$S1
    IL_0030:  ldc.r8     2.e-002
    IL_0039:  ldc.r8     0.0
    IL_0042:  ldc.r8     0.14000000000000001
    IL_004b:  call       instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::.ctor(float64,
                                                                                                                   float64,
                                                                                                                   float64)
    IL_0050:  nop
    IL_0051:  ldloc.2
    IL_0052:  br.s       IL_0078

    IL_0054:  ldloca.s   VB$t_struct$S0
    IL_0056:  ldc.r8     1.
    IL_005f:  ldc.r8     1.
    IL_0068:  ldc.r8     1.
    IL_0071:  call       instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::.ctor(float64,
                                                                                                                   float64,
                                                                                                                   float64)
    IL_0076:  nop
    IL_0077:  ldloc.1
    IL_0078:  stloc.0
    IL_0079:  br.s       IL_007b

    IL_007b:  ldloc.0
    IL_007c:  ret
  } // end of method Surfaces::_Lambda$__8

  .method private specialname static valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color 
          _Lambda$__9(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector pos) cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       41 (0x29)
    .maxstack  4
    .locals init ([0] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color _Lambda$__9,
             [1] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color VB$t_struct$S0)
//000013:         Function(pos) New Color(1, 1, 1),
    IL_0000:  ldloca.s   VB$t_struct$S0
    IL_0002:  ldc.r8     1.
    IL_000b:  ldc.r8     1.
    IL_0014:  ldc.r8     1.
    IL_001d:  call       instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::.ctor(float64,
                                                                                                                   float64,
                                                                                                                   float64)
    IL_0022:  nop
    IL_0023:  ldloc.1
    IL_0024:  stloc.0
    IL_0025:  br.s       IL_0027

    IL_0027:  ldloc.0
    IL_0028:  ret
  } // end of method Surfaces::_Lambda$__9

  .method private specialname static float64 
          _Lambda$__10(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector pos) cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       71 (0x47)
    .maxstack  2
    .locals init ([0] float64 _Lambda$__10)
//000014:         Function(pos) If(((Math.Floor(pos.Z) + Math.Floor(pos.X)) Mod 2 <> 0), 0.1, 0.5),
    IL_0000:  ldarga.s   pos
    IL_0002:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Z
    IL_0007:  call       float64 [mscorlib]System.Math::Floor(float64)
    IL_000c:  ldarga.s   pos
    IL_000e:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::X
    IL_0013:  call       float64 [mscorlib]System.Math::Floor(float64)
    IL_0018:  add
    IL_0019:  ldc.r8     2.
    IL_0022:  rem
    IL_0023:  ldc.r8     0.0
    IL_002c:  bne.un.s   IL_0039

    IL_002e:  ldc.r8     0.5
    IL_0037:  br.s       IL_0042

    IL_0039:  ldc.r8     0.10000000000000001
    IL_0042:  stloc.0
    IL_0043:  br.s       IL_0045

    IL_0045:  ldloc.0
    IL_0046:  ret
  } // end of method Surfaces::_Lambda$__10

  .method private specialname static valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color 
          _Lambda$__11(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector pos) cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       41 (0x29)
    .maxstack  4
    .locals init ([0] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color _Lambda$__11,
             [1] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color VB$t_struct$S0)
//000015:         150)
//000016: 
//000017:     Public Shared ReadOnly Shiny As Surface = New Surface(
//000018:         Function(pos) New Color(1, 1, 1),
    IL_0000:  ldloca.s   VB$t_struct$S0
    IL_0002:  ldc.r8     1.
    IL_000b:  ldc.r8     1.
    IL_0014:  ldc.r8     1.
    IL_001d:  call       instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::.ctor(float64,
                                                                                                                   float64,
                                                                                                                   float64)
    IL_0022:  nop
    IL_0023:  ldloc.1
    IL_0024:  stloc.0
    IL_0025:  br.s       IL_0027

    IL_0027:  ldloc.0
    IL_0028:  ret
  } // end of method Surfaces::_Lambda$__11

  .method private specialname static valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color 
          _Lambda$__12(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector pos) cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       41 (0x29)
    .maxstack  4
    .locals init ([0] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color _Lambda$__12,
             [1] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color VB$t_struct$S0)
//000019:         Function(pos) New Color(0.5, 0.5, 0.5),
    IL_0000:  ldloca.s   VB$t_struct$S0
    IL_0002:  ldc.r8     0.5
    IL_000b:  ldc.r8     0.5
    IL_0014:  ldc.r8     0.5
    IL_001d:  call       instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::.ctor(float64,
                                                                                                                   float64,
                                                                                                                   float64)
    IL_0022:  nop
    IL_0023:  ldloc.1
    IL_0024:  stloc.0
    IL_0025:  br.s       IL_0027

    IL_0027:  ldloc.0
    IL_0028:  ret
  } // end of method Surfaces::_Lambda$__12

  .method private specialname static float64 
          _Lambda$__13(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector pos) cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       14 (0xe)
    .maxstack  1
    .locals init ([0] float64 _Lambda$__13)
//000020:         Function(pos) 0.7,
    IL_0000:  ldc.r8     0.69999999999999996
    IL_0009:  stloc.0
    IL_000a:  br.s       IL_000c

    IL_000c:  ldloc.0
    IL_000d:  ret
  } // end of method Surfaces::_Lambda$__13

  .method private specialname static valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color 
          _Lambda$__14(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector pos) cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       41 (0x29)
    .maxstack  4
    .locals init ([0] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color _Lambda$__14,
             [1] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color VB$t_struct$S0)
//000021:         250)
//000022: 
//000023:     Public Shared ReadOnly MatteShiny As Surface = New Surface(
//000024:         Function(pos) New Color(1, 1, 1),
    IL_0000:  ldloca.s   VB$t_struct$S0
    IL_0002:  ldc.r8     1.
    IL_000b:  ldc.r8     1.
    IL_0014:  ldc.r8     1.
    IL_001d:  call       instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::.ctor(float64,
                                                                                                                   float64,
                                                                                                                   float64)
    IL_0022:  nop
    IL_0023:  ldloc.1
    IL_0024:  stloc.0
    IL_0025:  br.s       IL_0027

    IL_0027:  ldloc.0
    IL_0028:  ret
  } // end of method Surfaces::_Lambda$__14

  .method private specialname static valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color 
          _Lambda$__15(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector pos) cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       41 (0x29)
    .maxstack  4
    .locals init ([0] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color _Lambda$__15,
             [1] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color VB$t_struct$S0)
//000025:         Function(pos) New Color(0.25, 0.25, 0.25),
    IL_0000:  ldloca.s   VB$t_struct$S0
    IL_0002:  ldc.r8     0.25
    IL_000b:  ldc.r8     0.25
    IL_0014:  ldc.r8     0.25
    IL_001d:  call       instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Color::.ctor(float64,
                                                                                                                   float64,
                                                                                                                   float64)
    IL_0022:  nop
    IL_0023:  ldloc.1
    IL_0024:  stloc.0
    IL_0025:  br.s       IL_0027

    IL_0027:  ldloc.0
    IL_0028:  ret
  } // end of method Surfaces::_Lambda$__15

  .method private specialname static float64 
          _Lambda$__16(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector pos) cil managed
  {
    .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
    // Code size       14 (0xe)
    .maxstack  1
    .locals init ([0] float64 _Lambda$__16)
//000026:         Function(pos) 0.7,
    IL_0000:  ldc.r8     0.69999999999999996
    IL_0009:  stloc.0
    IL_000a:  br.s       IL_000c

    IL_000c:  ldloc.0
    IL_000d:  ret
  } // end of method Surfaces::_Lambda$__16

} // end of class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Surfaces

.class public sequential ansi sealed Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector
       extends [mscorlib]System.ValueType
{
  .field public float64 X
  .field public float64 Y
  .field public float64 Z
  .method public specialname rtspecialname 
          instance void  .ctor(float64 x,
                               float64 y,
                               float64 z) cil managed
  {
    // Code size       31 (0x1f)
    .maxstack  8
// Source File 'C:\Users\faa634\Desktop\book codes\couples\C#,C++,F#,VB\Raytracer\Raytracer_VisualBasic\Vector.vb' 
//000014:     Public Sub New(ByVal x As Double, ByVal y As Double, ByVal z As Double)
    IL_0000:  nop
//000015:         Me.X = x
//000016:         Me.Y = y
//000017:         Me.Z = z
//000018:     End Sub
//000019: 
//000020:     Public Sub New(ByVal str As String)
//000021:         Dim nums = str.Split(CChar(","))
//000022:         If nums.Length <> 3 Then Throw New ArgumentException("str")
//000023:         Me.X = Double.Parse(nums(0))
//000024:         Me.Y = Double.Parse(nums(1))
//000025:         Me.Z = Double.Parse(nums(2))
//000026:     End Sub
//000027: 
//000028:     Public Shared Function Times(ByVal n As Double, ByVal v As Vector) As Vector
//000029:         Return New Vector(v.X * n, v.Y * n, v.Z * n)
//000030:     End Function
//000031: 
//000032:     Public Shared Function Minus(ByVal v1 As Vector, ByVal v2 As Vector) As Vector
//000033:         Return New Vector(v1.X - v2.X, v1.Y - v2.Y, v1.Z - v2.Z)
//000034:     End Function
//000035: 
//000036:     Public Shared Function Plus(ByVal v1 As Vector, ByVal v2 As Vector) As Vector
//000037:         Return New Vector(v1.X + v2.X, v1.Y + v2.Y, v1.Z + v2.Z)
//000038:     End Function
//000039: 
//000040:     Public Shared Function Dot(ByVal v1 As Vector, ByVal v2 As Vector) As Double
//000041:         Return (v1.X * v2.X) + (v1.Y * v2.Y) + (v1.Z * v2.Z)
//000042:     End Function
//000043: 
//000044:     Public Shared Function Mag(ByVal v As Vector) As Double
//000045:         Return Math.Sqrt(Dot(v, v))
//000046:     End Function
//000047: 
//000048:     Public Shared Function Norm(ByVal v As Vector) As Vector
//000049:         Dim magnitude = Mag(v)
//000050:         Dim div = If(magnitude = 0, Double.PositiveInfinity, 1 / magnitude)
//000051:         Return Times(div, v)
//000052:     End Function
//000053: 
//000054:     Public Shared Function Cross(ByVal v1 As Vector, ByVal v2 As Vector) As Vector
//000055:         Return New Vector(((v1.Y * v2.Z) - (v1.Z * v2.Y)),
//000056:                           ((v1.Z * v2.X) - (v1.X * v2.Z)),
//000057:                           ((v1.X * v2.Y) - (v1.Y * v2.X)))
//000058:     End Function
//000059: End Structure
    IL_0001:  ldarg.0
    IL_0002:  initobj    Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector
//000015:         Me.X = x
    IL_0008:  ldarg.0
    IL_0009:  ldarg.1
    IL_000a:  stfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::X
//000016:         Me.Y = y
    IL_000f:  ldarg.0
    IL_0010:  ldarg.2
    IL_0011:  stfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Y
//000017:         Me.Z = z
    IL_0016:  ldarg.0
    IL_0017:  ldarg.3
    IL_0018:  stfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Z
//000018:     End Sub
    IL_001d:  nop
    IL_001e:  ret
  } // end of method Vector::.ctor

  .method public specialname rtspecialname 
          instance void  .ctor(string str) cil managed
  {
    // Code size       96 (0x60)
    .maxstack  4
    .locals init ([0] string[] nums,
             [1] char[] VB$t_array$S0,
             [2] bool VB$CG$t_bool$S0)
//000019: 
//000020:     Public Sub New(ByVal str As String)
    IL_0000:  nop
//000021:         Dim nums = str.Split(CChar(","))
//000022:         If nums.Length <> 3 Then Throw New ArgumentException("str")
//000023:         Me.X = Double.Parse(nums(0))
//000024:         Me.Y = Double.Parse(nums(1))
//000025:         Me.Z = Double.Parse(nums(2))
//000026:     End Sub
//000027: 
//000028:     Public Shared Function Times(ByVal n As Double, ByVal v As Vector) As Vector
//000029:         Return New Vector(v.X * n, v.Y * n, v.Z * n)
//000030:     End Function
//000031: 
//000032:     Public Shared Function Minus(ByVal v1 As Vector, ByVal v2 As Vector) As Vector
//000033:         Return New Vector(v1.X - v2.X, v1.Y - v2.Y, v1.Z - v2.Z)
//000034:     End Function
//000035: 
//000036:     Public Shared Function Plus(ByVal v1 As Vector, ByVal v2 As Vector) As Vector
//000037:         Return New Vector(v1.X + v2.X, v1.Y + v2.Y, v1.Z + v2.Z)
//000038:     End Function
//000039: 
//000040:     Public Shared Function Dot(ByVal v1 As Vector, ByVal v2 As Vector) As Double
//000041:         Return (v1.X * v2.X) + (v1.Y * v2.Y) + (v1.Z * v2.Z)
//000042:     End Function
//000043: 
//000044:     Public Shared Function Mag(ByVal v As Vector) As Double
//000045:         Return Math.Sqrt(Dot(v, v))
//000046:     End Function
//000047: 
//000048:     Public Shared Function Norm(ByVal v As Vector) As Vector
//000049:         Dim magnitude = Mag(v)
//000050:         Dim div = If(magnitude = 0, Double.PositiveInfinity, 1 / magnitude)
//000051:         Return Times(div, v)
//000052:     End Function
//000053: 
//000054:     Public Shared Function Cross(ByVal v1 As Vector, ByVal v2 As Vector) As Vector
//000055:         Return New Vector(((v1.Y * v2.Z) - (v1.Z * v2.Y)),
//000056:                           ((v1.Z * v2.X) - (v1.X * v2.Z)),
//000057:                           ((v1.X * v2.Y) - (v1.Y * v2.X)))
//000058:     End Function
//000059: End Structure
    IL_0001:  ldarg.0
    IL_0002:  initobj    Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector
//000021:         Dim nums = str.Split(CChar(","))
    IL_0008:  ldarg.1
    IL_0009:  ldc.i4.1
    IL_000a:  newarr     [mscorlib]System.Char
    IL_000f:  stloc.1
    IL_0010:  ldloc.1
    IL_0011:  ldc.i4.0
    IL_0012:  ldc.i4.s   44
    IL_0014:  stelem.i2
    IL_0015:  ldloc.1
    IL_0016:  callvirt   instance string[] [mscorlib]System.String::Split(char[])
    IL_001b:  stloc.0
//000022:         If nums.Length <> 3 Then Throw New ArgumentException("str")
    IL_001c:  ldloc.0
    IL_001d:  ldlen
    IL_001e:  conv.ovf.i4
    IL_001f:  ldc.i4.3
    IL_0020:  ceq
    IL_0022:  ldc.i4.0
    IL_0023:  ceq
    IL_0025:  stloc.2
//000023:         Me.X = Double.Parse(nums(0))
//000024:         Me.Y = Double.Parse(nums(1))
//000025:         Me.Z = Double.Parse(nums(2))
//000026:     End Sub
//000027: 
//000028:     Public Shared Function Times(ByVal n As Double, ByVal v As Vector) As Vector
//000029:         Return New Vector(v.X * n, v.Y * n, v.Z * n)
//000030:     End Function
//000031: 
//000032:     Public Shared Function Minus(ByVal v1 As Vector, ByVal v2 As Vector) As Vector
//000033:         Return New Vector(v1.X - v2.X, v1.Y - v2.Y, v1.Z - v2.Z)
//000034:     End Function
//000035: 
//000036:     Public Shared Function Plus(ByVal v1 As Vector, ByVal v2 As Vector) As Vector
//000037:         Return New Vector(v1.X + v2.X, v1.Y + v2.Y, v1.Z + v2.Z)
//000038:     End Function
//000039: 
//000040:     Public Shared Function Dot(ByVal v1 As Vector, ByVal v2 As Vector) As Double
//000041:         Return (v1.X * v2.X) + (v1.Y * v2.Y) + (v1.Z * v2.Z)
//000042:     End Function
//000043: 
//000044:     Public Shared Function Mag(ByVal v As Vector) As Double
//000045:         Return Math.Sqrt(Dot(v, v))
//000046:     End Function
//000047: 
//000048:     Public Shared Function Norm(ByVal v As Vector) As Vector
//000049:         Dim magnitude = Mag(v)
//000050:         Dim div = If(magnitude = 0, Double.PositiveInfinity, 1 / magnitude)
//000051:         Return Times(div, v)
//000052:     End Function
//000053: 
//000054:     Public Shared Function Cross(ByVal v1 As Vector, ByVal v2 As Vector) As Vector
//000055:         Return New Vector(((v1.Y * v2.Z) - (v1.Z * v2.Y)),
//000056:                           ((v1.Z * v2.X) - (v1.X * v2.Z)),
//000057:                           ((v1.X * v2.Y) - (v1.Y * v2.X)))
//000058:     End Function
//000059: End Structure
    IL_0026:  ldloc.2
    IL_0027:  brfalse.s  IL_0034

//000022:         If nums.Length <> 3 Then Throw New ArgumentException("str")
    IL_0029:  ldstr      "str"
    IL_002e:  newobj     instance void [mscorlib]System.ArgumentException::.ctor(string)
    IL_0033:  throw

//000023:         Me.X = Double.Parse(nums(0))
    IL_0034:  ldarg.0
    IL_0035:  ldloc.0
    IL_0036:  ldc.i4.0
    IL_0037:  ldelem.ref
    IL_0038:  call       float64 [mscorlib]System.Double::Parse(string)
    IL_003d:  stfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::X
//000024:         Me.Y = Double.Parse(nums(1))
    IL_0042:  ldarg.0
    IL_0043:  ldloc.0
    IL_0044:  ldc.i4.1
    IL_0045:  ldelem.ref
    IL_0046:  call       float64 [mscorlib]System.Double::Parse(string)
    IL_004b:  stfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Y
//000025:         Me.Z = Double.Parse(nums(2))
    IL_0050:  ldarg.0
    IL_0051:  ldloc.0
    IL_0052:  ldc.i4.2
    IL_0053:  ldelem.ref
    IL_0054:  call       float64 [mscorlib]System.Double::Parse(string)
    IL_0059:  stfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Z
//000026:     End Sub
    IL_005e:  nop
    IL_005f:  ret
  } // end of method Vector::.ctor

  .method public static valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector 
          Times(float64 n,
                valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector v) cil managed
  {
    // Code size       42 (0x2a)
    .maxstack  5
    .locals init ([0] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Times,
             [1] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector VB$t_struct$S0)
//000027: 
//000028:     Public Shared Function Times(ByVal n As Double, ByVal v As Vector) As Vector
    IL_0000:  nop
//000029:         Return New Vector(v.X * n, v.Y * n, v.Z * n)
    IL_0001:  ldloca.s   VB$t_struct$S0
    IL_0003:  ldarga.s   v
    IL_0005:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::X
    IL_000a:  ldarg.0
    IL_000b:  mul
    IL_000c:  ldarga.s   v
    IL_000e:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Y
    IL_0013:  ldarg.0
    IL_0014:  mul
    IL_0015:  ldarga.s   v
    IL_0017:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Z
    IL_001c:  ldarg.0
    IL_001d:  mul
    IL_001e:  call       instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::.ctor(float64,
                                                                                                                    float64,
                                                                                                                    float64)
    IL_0023:  nop
    IL_0024:  ldloc.1
    IL_0025:  stloc.0
    IL_0026:  br.s       IL_0028

//000030:     End Function
    IL_0028:  ldloc.0
    IL_0029:  ret
  } // end of method Vector::Times

  .method public static valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector 
          Minus(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector v1,
                valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector v2) cil managed
  {
    // Code size       60 (0x3c)
    .maxstack  5
    .locals init ([0] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Minus,
             [1] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector VB$t_struct$S0)
//000031: 
//000032:     Public Shared Function Minus(ByVal v1 As Vector, ByVal v2 As Vector) As Vector
    IL_0000:  nop
//000033:         Return New Vector(v1.X - v2.X, v1.Y - v2.Y, v1.Z - v2.Z)
    IL_0001:  ldloca.s   VB$t_struct$S0
    IL_0003:  ldarga.s   v1
    IL_0005:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::X
    IL_000a:  ldarga.s   v2
    IL_000c:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::X
    IL_0011:  sub
    IL_0012:  ldarga.s   v1
    IL_0014:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Y
    IL_0019:  ldarga.s   v2
    IL_001b:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Y
    IL_0020:  sub
    IL_0021:  ldarga.s   v1
    IL_0023:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Z
    IL_0028:  ldarga.s   v2
    IL_002a:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Z
    IL_002f:  sub
    IL_0030:  call       instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::.ctor(float64,
                                                                                                                    float64,
                                                                                                                    float64)
    IL_0035:  nop
    IL_0036:  ldloc.1
    IL_0037:  stloc.0
    IL_0038:  br.s       IL_003a

//000034:     End Function
    IL_003a:  ldloc.0
    IL_003b:  ret
  } // end of method Vector::Minus

  .method public static valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector 
          Plus(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector v1,
               valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector v2) cil managed
  {
    // Code size       60 (0x3c)
    .maxstack  5
    .locals init ([0] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Plus,
             [1] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector VB$t_struct$S0)
//000035: 
//000036:     Public Shared Function Plus(ByVal v1 As Vector, ByVal v2 As Vector) As Vector
    IL_0000:  nop
//000037:         Return New Vector(v1.X + v2.X, v1.Y + v2.Y, v1.Z + v2.Z)
    IL_0001:  ldloca.s   VB$t_struct$S0
    IL_0003:  ldarga.s   v1
    IL_0005:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::X
    IL_000a:  ldarga.s   v2
    IL_000c:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::X
    IL_0011:  add
    IL_0012:  ldarga.s   v1
    IL_0014:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Y
    IL_0019:  ldarga.s   v2
    IL_001b:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Y
    IL_0020:  add
    IL_0021:  ldarga.s   v1
    IL_0023:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Z
    IL_0028:  ldarga.s   v2
    IL_002a:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Z
    IL_002f:  add
    IL_0030:  call       instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::.ctor(float64,
                                                                                                                    float64,
                                                                                                                    float64)
    IL_0035:  nop
    IL_0036:  ldloc.1
    IL_0037:  stloc.0
    IL_0038:  br.s       IL_003a

//000038:     End Function
    IL_003a:  ldloc.0
    IL_003b:  ret
  } // end of method Vector::Plus

  .method public static float64  Dot(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector v1,
                                     valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector v2) cil managed
  {
    // Code size       53 (0x35)
    .maxstack  3
    .locals init ([0] float64 Dot)
//000039: 
//000040:     Public Shared Function Dot(ByVal v1 As Vector, ByVal v2 As Vector) As Double
    IL_0000:  nop
//000041:         Return (v1.X * v2.X) + (v1.Y * v2.Y) + (v1.Z * v2.Z)
    IL_0001:  ldarga.s   v1
    IL_0003:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::X
    IL_0008:  ldarga.s   v2
    IL_000a:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::X
    IL_000f:  mul
    IL_0010:  ldarga.s   v1
    IL_0012:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Y
    IL_0017:  ldarga.s   v2
    IL_0019:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Y
    IL_001e:  mul
    IL_001f:  add
    IL_0020:  ldarga.s   v1
    IL_0022:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Z
    IL_0027:  ldarga.s   v2
    IL_0029:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Z
    IL_002e:  mul
    IL_002f:  add
    IL_0030:  stloc.0
    IL_0031:  br.s       IL_0033

//000042:     End Function
    IL_0033:  ldloc.0
    IL_0034:  ret
  } // end of method Vector::Dot

  .method public static float64  Mag(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector v) cil managed
  {
    // Code size       18 (0x12)
    .maxstack  2
    .locals init ([0] float64 Mag)
//000043: 
//000044:     Public Shared Function Mag(ByVal v As Vector) As Double
    IL_0000:  nop
//000045:         Return Math.Sqrt(Dot(v, v))
    IL_0001:  ldarg.0
    IL_0002:  ldarg.0
    IL_0003:  call       float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Dot(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector,
                                                                                                            valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector)
    IL_0008:  call       float64 [mscorlib]System.Math::Sqrt(float64)
    IL_000d:  stloc.0
    IL_000e:  br.s       IL_0010

//000046:     End Function
    IL_0010:  ldloc.0
    IL_0011:  ret
  } // end of method Vector::Mag

  .method public static valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector 
          Norm(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector v) cil managed
  {
    // Code size       55 (0x37)
    .maxstack  2
    .locals init ([0] float64 'div',
             [1] float64 magnitude,
             [2] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Norm)
//000047: 
//000048:     Public Shared Function Norm(ByVal v As Vector) As Vector
    IL_0000:  nop
//000049:         Dim magnitude = Mag(v)
    IL_0001:  ldarg.0
    IL_0002:  call       float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Mag(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector)
    IL_0007:  stloc.1
//000050:         Dim div = If(magnitude = 0, Double.PositiveInfinity, 1 / magnitude)
    IL_0008:  ldloc.1
    IL_0009:  ldc.r8     0.0
    IL_0012:  beq.s      IL_0021

    IL_0014:  ldc.r8     1.
    IL_001d:  ldloc.1
    IL_001e:  div
    IL_001f:  br.s       IL_002a

    IL_0021:  ldc.r8     (00 00 00 00 00 00 F0 7F)
    IL_002a:  stloc.0
//000051:         Return Times(div, v)
    IL_002b:  ldloc.0
    IL_002c:  ldarg.0
    IL_002d:  call       valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Times(float64,
                                                                                                                                                                                      valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector)
    IL_0032:  stloc.2
    IL_0033:  br.s       IL_0035

//000052:     End Function
    IL_0035:  ldloc.2
    IL_0036:  ret
  } // end of method Vector::Norm

  .method public static valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector 
          Cross(valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector v1,
                valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector v2) cil managed
  {
    // Code size       108 (0x6c)
    .maxstack  6
    .locals init ([0] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector Cross,
             [1] valuetype Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector VB$t_struct$S0)
//000053: 
//000054:     Public Shared Function Cross(ByVal v1 As Vector, ByVal v2 As Vector) As Vector
    IL_0000:  nop
//000055:         Return New Vector(((v1.Y * v2.Z) - (v1.Z * v2.Y)),
    IL_0001:  ldloca.s   VB$t_struct$S0
    IL_0003:  ldarga.s   v1
    IL_0005:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Y
    IL_000a:  ldarga.s   v2
    IL_000c:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Z
    IL_0011:  mul
    IL_0012:  ldarga.s   v1
    IL_0014:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Z
    IL_0019:  ldarga.s   v2
    IL_001b:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Y
    IL_0020:  mul
    IL_0021:  sub
    IL_0022:  ldarga.s   v1
    IL_0024:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Z
    IL_0029:  ldarga.s   v2
    IL_002b:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::X
    IL_0030:  mul
    IL_0031:  ldarga.s   v1
    IL_0033:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::X
    IL_0038:  ldarga.s   v2
    IL_003a:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Z
    IL_003f:  mul
    IL_0040:  sub
    IL_0041:  ldarga.s   v1
    IL_0043:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::X
    IL_0048:  ldarga.s   v2
    IL_004a:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Y
    IL_004f:  mul
    IL_0050:  ldarga.s   v1
    IL_0052:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::Y
    IL_0057:  ldarga.s   v2
    IL_0059:  ldfld      float64 Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::X
    IL_005e:  mul
    IL_005f:  sub
    IL_0060:  call       instance void Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector::.ctor(float64,
                                                                                                                    float64,
                                                                                                                    float64)
    IL_0065:  nop
    IL_0066:  ldloc.1
    IL_0067:  stloc.0
    IL_0068:  br.s       IL_006a

//000056:                           ((v1.Z * v2.X) - (v1.X * v2.Z)),
//000057:                           ((v1.X * v2.Y) - (v1.Y * v2.X)))
//000058:     End Function
    IL_006a:  ldloc.0
    IL_006b:  ret
  } // end of method Vector::Cross

} // end of class Microsoft.ParallelComputingPlatform.ParallelExtensions.Samples.Vector

.class private auto ansi sealed VB$AnonymousDelegate_2
       extends [mscorlib]System.MulticastDelegate
{
  .custom instance void [mscorlib]System.Diagnostics.DebuggerDisplayAttribute::.ctor(string) = ( 01 00 12 3C 67 65 6E 65 72 61 74 65 64 20 6D 65   // ...<generated me
                                                                                                 74 68 6F 64 3E 01 00 54 0E 04 54 79 70 65 12 3C   // thod>..T..Type.<
                                                                                                 67 65 6E 65 72 61 74 65 64 20 6D 65 74 68 6F 64   // generated method
                                                                                                 3E )                                              // >
  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) 
  .method public specialname rtspecialname 
          instance void  .ctor(object TargetObject,
                               native int TargetMethod) runtime managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
  } // end of method VB$AnonymousDelegate_2::.ctor

  .method public newslot strict virtual instance class [mscorlib]System.IAsyncResult 
          BeginInvoke(class [mscorlib]System.AsyncCallback DelegateCallback,
                      object DelegateAsyncState) runtime managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
  } // end of method VB$AnonymousDelegate_2::BeginInvoke

  .method public newslot strict virtual instance void 
          EndInvoke(class [mscorlib]System.IAsyncResult DelegateAsyncResult) runtime managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
  } // end of method VB$AnonymousDelegate_2::EndInvoke

  .method public newslot strict virtual instance void 
          Invoke() runtime managed
  {
    .custom instance void [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 ) 
  } // end of method VB$AnonymousDelegate_2::Invoke

} // end of class VB$AnonymousDelegate_2


// =============================================================

// *********** DISASSEMBLY COMPLETE ***********************
