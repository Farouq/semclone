<clones>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\EVO.xaml.cs" startline="27" endline="33">
<![CDATA[
 
         private void Window_Loaded(object sender, RoutedEventArgs e)
         {
             timer.Interval = TimeSpan.FromMilliseconds(100);
             timer.Tick += new EventHandler(timer_Tick);
             timer.IsEnabled = true;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\My Project\Application.Designer.vb" startline="25" endline="31">
<![CDATA[
         Public Sub New()
             MyBase.New(Global.Microsoft.VisualBasic.ApplicationServices.AuthenticationMode.Windows)
             Me.IsSingleInstance = false
             Me.EnableVisualStyles = true
             Me.SaveMySettingsOnExit = true
             Me.ShutDownStyle = Global.Microsoft.VisualBasic.ApplicationServices.ShutdownMode.AfterMainFormCloses
         End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\EVO.xaml.cs" startline="27" endline="33">
<![CDATA[
 
         private void Window_Loaded(object sender, RoutedEventArgs e)
         {
             timer.Interval = TimeSpan.FromMilliseconds(100);
             timer.Tick += new EventHandler(timer_Tick);
             timer.IsEnabled = true;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\About.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\EVO.xaml.cs" startline="27" endline="33">
<![CDATA[
 
         private void Window_Loaded(object sender, RoutedEventArgs e)
         {
             timer.Interval = TimeSpan.FromMilliseconds(100);
             timer.Tick += new EventHandler(timer_Tick);
             timer.IsEnabled = true;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\AVSWAV.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\EVO.xaml.cs" startline="27" endline="33">
<![CDATA[
 
         private void Window_Loaded(object sender, RoutedEventArgs e)
         {
             timer.Interval = TimeSpan.FromMilliseconds(100);
             timer.Tick += new EventHandler(timer_Tick);
             timer.IsEnabled = true;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Checking.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\EVO.xaml.cs" startline="27" endline="33">
<![CDATA[
 
         private void Window_Loaded(object sender, RoutedEventArgs e)
         {
             timer.Interval = TimeSpan.FromMilliseconds(100);
             timer.Tick += new EventHandler(timer_Tick);
             timer.IsEnabled = true;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Crop.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\EVO.xaml.cs" startline="27" endline="33">
<![CDATA[
 
         private void Window_Loaded(object sender, RoutedEventArgs e)
         {
             timer.Interval = TimeSpan.FromMilliseconds(100);
             timer.Tick += new EventHandler(timer_Tick);
             timer.IsEnabled = true;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\ImportProfile.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\EVO.xaml.cs" startline="27" endline="33">
<![CDATA[
 
         private void Window_Loaded(object sender, RoutedEventArgs e)
         {
             timer.Interval = TimeSpan.FromMilliseconds(100);
             timer.Tick += new EventHandler(timer_Tick);
             timer.IsEnabled = true;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MPEG.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\EVO.xaml.cs" startline="27" endline="33">
<![CDATA[
 
         private void Window_Loaded(object sender, RoutedEventArgs e)
         {
             timer.Interval = TimeSpan.FromMilliseconds(100);
             timer.Tick += new EventHandler(timer_Tick);
             timer.IsEnabled = true;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Player.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\EVO.xaml.cs" startline="27" endline="33">
<![CDATA[
 
         private void Window_Loaded(object sender, RoutedEventArgs e)
         {
             timer.Interval = TimeSpan.FromMilliseconds(100);
             timer.Tick += new EventHandler(timer_Tick);
             timer.IsEnabled = true;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Profiles.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\EVO.xaml.cs" startline="27" endline="33">
<![CDATA[
 
         private void Window_Loaded(object sender, RoutedEventArgs e)
         {
             timer.Interval = TimeSpan.FromMilliseconds(100);
             timer.Tick += new EventHandler(timer_Tick);
             timer.IsEnabled = true;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Testing.vb" startline="12" endline="19">
<![CDATA[
 	Public Sub New()
 	dim edittracklist as New List(Of track), currenttrack as Integer
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\EVO.xaml.cs" startline="27" endline="33">
<![CDATA[
 
         private void Window_Loaded(object sender, RoutedEventArgs e)
         {
             timer.Interval = TimeSpan.FromMilliseconds(100);
             timer.Tick += new EventHandler(timer_Tick);
             timer.IsEnabled = true;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Updating.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\EVO.xaml.cs" startline="27" endline="33">
<![CDATA[
 
         private void Window_Loaded(object sender, RoutedEventArgs e)
         {
             timer.Interval = TimeSpan.FromMilliseconds(100);
             timer.Tick += new EventHandler(timer_Tick);
             timer.IsEnabled = true;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Wizard.vb" startline="2934" endline="2941">
<![CDATA[
 
     Private Sub ExportProfileToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ExportProfileToolStripMenuItem1.Click
         Dim frmExport As New ExportProfile
         Me.Enabled = False
         frmExport.ShowDialog()
         Me.Enabled = True
 
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Options.xaml.cs" startline="109" endline="115">
<![CDATA[
 
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\About.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Options.xaml.cs" startline="109" endline="115">
<![CDATA[
 
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\AVSWAV.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Options.xaml.cs" startline="109" endline="115">
<![CDATA[
 
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Checking.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Options.xaml.cs" startline="109" endline="115">
<![CDATA[
 
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Crop.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Options.xaml.cs" startline="109" endline="115">
<![CDATA[
 
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\ExportProfile.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Options.xaml.cs" startline="109" endline="115">
<![CDATA[
 
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\ImportProfile.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Options.xaml.cs" startline="109" endline="115">
<![CDATA[
 
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MPEG.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Options.xaml.cs" startline="109" endline="115">
<![CDATA[
 
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Options.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Options.xaml.cs" startline="109" endline="115">
<![CDATA[
 
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Player.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Options.xaml.cs" startline="109" endline="115">
<![CDATA[
 
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Profiles.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Options.xaml.cs" startline="109" endline="115">
<![CDATA[
 
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Testing.vb" startline="12" endline="19">
<![CDATA[
 	Public Sub New()
 	dim edittracklist as New List(Of track), currenttrack as Integer
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Options.xaml.cs" startline="109" endline="115">
<![CDATA[
 
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Updating.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Options.xaml.cs" startline="109" endline="115">
<![CDATA[
 
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\x264.vb" startline="12" endline="19">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Options.xaml.cs" startline="179" endline="189">
<![CDATA[
 
         private void optMPGOff_Checked(object sender, RoutedEventArgs e)
         {
             if (this.IsLoaded)
             {
                 bool c = (bool)optMPGOn.IsChecked;
                 chkVOB.IsEnabled = c;
                 chkMPG.IsEnabled = c;
                 lblMPG.IsEnabled = c;
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MainForm.Designer.vb" startline="3008" endline="3016">
<![CDATA[
 
     Sub ChkABitrateCheckedChanged(ByVal sender As Object, ByVal e As EventArgs)
         cboABitrate.Visible = chkABitrate.Checked
         editVid.CustomABitrate = chkABitrate.Checked
         If editVid.usetracks = False Then Exit Sub
         Dim newtrack As track = edittracklist.Item(currenttrack)
         newtrack.custombitrate = chkABitrate.Checked
         edittracklist.Item(currenttrack) = newtrack
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Options.xaml.cs" startline="190" endline="198">
<![CDATA[
 
         private void optAVCOff_Checked(object sender, RoutedEventArgs e)
         {
             if (this.IsLoaded)
             {
                 bool c = (bool)optAVCOn.IsChecked;
                 chkAVC.IsEnabled = c;
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\About.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Options.xaml.cs" startline="190" endline="198">
<![CDATA[
 
         private void optAVCOff_Checked(object sender, RoutedEventArgs e)
         {
             if (this.IsLoaded)
             {
                 bool c = (bool)optAVCOn.IsChecked;
                 chkAVC.IsEnabled = c;
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\AVSWAV.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Options.xaml.cs" startline="190" endline="198">
<![CDATA[
 
         private void optAVCOff_Checked(object sender, RoutedEventArgs e)
         {
             if (this.IsLoaded)
             {
                 bool c = (bool)optAVCOn.IsChecked;
                 chkAVC.IsEnabled = c;
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Checking.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Options.xaml.cs" startline="190" endline="198">
<![CDATA[
 
         private void optAVCOff_Checked(object sender, RoutedEventArgs e)
         {
             if (this.IsLoaded)
             {
                 bool c = (bool)optAVCOn.IsChecked;
                 chkAVC.IsEnabled = c;
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Crop.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Options.xaml.cs" startline="190" endline="198">
<![CDATA[
 
         private void optAVCOff_Checked(object sender, RoutedEventArgs e)
         {
             if (this.IsLoaded)
             {
                 bool c = (bool)optAVCOn.IsChecked;
                 chkAVC.IsEnabled = c;
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MPEG.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Options.xaml.cs" startline="190" endline="198">
<![CDATA[
 
         private void optAVCOff_Checked(object sender, RoutedEventArgs e)
         {
             if (this.IsLoaded)
             {
                 bool c = (bool)optAVCOn.IsChecked;
                 chkAVC.IsEnabled = c;
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Player.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Options.xaml.cs" startline="257" endline="266">
<![CDATA[
 
         private void cmdTemp_Click(object sender, RoutedEventArgs e)
         {
             folderbrowser.SelectedPath = tempdir;
             if (folderbrowser.ShowDialog() != System.Windows.Forms.DialogResult.Cancel)
             {
                 tempdir = folderbrowser.SelectedPath;
                 txtTemp.Text = tempdir;
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MainForm.Designer.vb" startline="3008" endline="3016">
<![CDATA[
 
     Sub ChkABitrateCheckedChanged(ByVal sender As Object, ByVal e As EventArgs)
         cboABitrate.Visible = chkABitrate.Checked
         editVid.CustomABitrate = chkABitrate.Checked
         If editVid.usetracks = False Then Exit Sub
         Dim newtrack As track = edittracklist.Item(currenttrack)
         newtrack.custombitrate = chkABitrate.Checked
         edittracklist.Item(currenttrack) = newtrack
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Options.xaml.cs" startline="267" endline="278">
<![CDATA[
 
         private void clear_temp()
         {
             Process del = new Process();
             del.StartInfo.WorkingDirectory = MainForm.tempDir;
             del.StartInfo.UseShellExecute = false;
             del.StartInfo.CreateNoWindow = true;
             del.StartInfo.FileName = "cmd.exe";
             del.StartInfo.Arguments = "/c ECHO y | del *.*";
             del.Start();
             MainForm.videolist.Clear();
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Append.vb" startline="494" endline="501">
<![CDATA[
 
     Private Sub RadioButton2_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs)
         lblBitrate.Visible = False
         txtBitrate.Visible = False
         chkFileSize.Enabled = True
         txtFileSize.Enabled = True
         cboFileSize.Enabled = True
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Options.xaml.cs" startline="267" endline="278">
<![CDATA[
 
         private void clear_temp()
         {
             Process del = new Process();
             del.StartInfo.WorkingDirectory = MainForm.tempDir;
             del.StartInfo.UseShellExecute = false;
             del.StartInfo.CreateNoWindow = true;
             del.StartInfo.FileName = "cmd.exe";
             del.StartInfo.Arguments = "/c ECHO y | del *.*";
             del.Start();
             MainForm.videolist.Clear();
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Edit.vb" startline="431" endline="438">
<![CDATA[
 	
     Sub OptCustomBitrateCheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles optCustomBitrate.CheckedChanged
         lblBitrate.Visible = True
         txtBitrate.Visible = True
         chkFileSize.Enabled = False
         txtFileSize.Enabled = False
         cboFileSize.Enabled = False
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Options.xaml.cs" startline="267" endline="278">
<![CDATA[
 
         private void clear_temp()
         {
             Process del = new Process();
             del.StartInfo.WorkingDirectory = MainForm.tempDir;
             del.StartInfo.UseShellExecute = false;
             del.StartInfo.CreateNoWindow = true;
             del.StartInfo.FileName = "cmd.exe";
             del.StartInfo.Arguments = "/c ECHO y | del *.*";
             del.Start();
             MainForm.videolist.Clear();
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Edit.vb" startline="439" endline="446">
<![CDATA[
 	
     Sub OptAutoBitrateCheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles optAutoBitrate.CheckedChanged
         lblBitrate.Visible = False
         txtBitrate.Visible = False
         chkFileSize.Enabled = True
         txtFileSize.Enabled = True
         cboFileSize.Enabled = True
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Options.xaml.cs" startline="267" endline="278">
<![CDATA[
 
         private void clear_temp()
         {
             Process del = new Process();
             del.StartInfo.WorkingDirectory = MainForm.tempDir;
             del.StartInfo.UseShellExecute = false;
             del.StartInfo.CreateNoWindow = true;
             del.StartInfo.FileName = "cmd.exe";
             del.StartInfo.Arguments = "/c ECHO y | del *.*";
             del.Start();
             MainForm.videolist.Clear();
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MainForm.vb" startline="235" endline="242">
<![CDATA[
 	
     Sub OptCustomBitrateCheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles optCustomBitrate.CheckedChanged
         lblBitrate.Visible = True
         txtBitrate.Visible = True
         chkFileSize.Enabled = False
         txtFileSize.Enabled = False
         cboFileSize.Enabled = False
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Options.xaml.cs" startline="267" endline="278">
<![CDATA[
 
         private void clear_temp()
         {
             Process del = new Process();
             del.StartInfo.WorkingDirectory = MainForm.tempDir;
             del.StartInfo.UseShellExecute = false;
             del.StartInfo.CreateNoWindow = true;
             del.StartInfo.FileName = "cmd.exe";
             del.StartInfo.Arguments = "/c ECHO y | del *.*";
             del.Start();
             MainForm.videolist.Clear();
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MainForm.vb" startline="243" endline="250">
<![CDATA[
 	
     Sub OptAutoBitrateCheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles optAutoBitrate.CheckedChanged
         lblBitrate.Visible = False
         txtBitrate.Visible = False
         chkFileSize.Enabled = True
         txtFileSize.Enabled = True
         cboFileSize.Enabled = True
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Options.xaml.cs" startline="279" endline="285">
<![CDATA[
 
         private void cmdOutput_Click(object sender, RoutedEventArgs e)
         {
             folderbrowser.SelectedPath = txtOutput.Text;
             if (folderbrowser.ShowDialog() != System.Windows.Forms.DialogResult.Cancel)
                 txtOutput.Text = folderbrowser.SelectedPath;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MainForm.Designer.vb" startline="3008" endline="3016">
<![CDATA[
 
     Sub ChkABitrateCheckedChanged(ByVal sender As Object, ByVal e As EventArgs)
         cboABitrate.Visible = chkABitrate.Checked
         editVid.CustomABitrate = chkABitrate.Checked
         If editVid.usetracks = False Then Exit Sub
         Dim newtrack As track = edittracklist.Item(currenttrack)
         newtrack.custombitrate = chkABitrate.Checked
         edittracklist.Item(currenttrack) = newtrack
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Options.xaml.cs" startline="286" endline="295">
<![CDATA[
 
         private void cmdLog_Click(object sender, RoutedEventArgs e)
         {
             folderbrowser.SelectedPath = logdir;
             if (folderbrowser.ShowDialog() != System.Windows.Forms.DialogResult.Cancel)
             {
                 logdir = folderbrowser.SelectedPath;
                 txtLog.Text = logdir;
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MainForm.Designer.vb" startline="3008" endline="3016">
<![CDATA[
 
     Sub ChkABitrateCheckedChanged(ByVal sender As Object, ByVal e As EventArgs)
         cboABitrate.Visible = chkABitrate.Checked
         editVid.CustomABitrate = chkABitrate.Checked
         If editVid.usetracks = False Then Exit Sub
         Dim newtrack As track = edittracklist.Item(currenttrack)
         newtrack.custombitrate = chkABitrate.Checked
         edittracklist.Item(currenttrack) = newtrack
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Options.xaml.cs" startline="296" endline="305">
<![CDATA[
 
         private void cboFilm_SelectionChanged(object sender, SelectionChangedEventArgs e)
         {
             if (this.IsLoaded)
             {
                 bool f = (cboFilm.SelectedIndex != 2);
                 lblFilm.IsEnabled = f;
                 cboFilmMode.IsEnabled = f;
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\About.Designer.vb" startline="21" endline="28">
<![CDATA[
 	Protected Overrides Sub Dispose(ByVal disposing As Boolean)
 		If disposing Then
 			If components IsNot Nothing Then
 				components.Dispose()
 			End If
 		End If
 		MyBase.Dispose(disposing)
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Options.xaml.cs" startline="296" endline="305">
<![CDATA[
 
         private void cboFilm_SelectionChanged(object sender, SelectionChangedEventArgs e)
         {
             if (this.IsLoaded)
             {
                 bool f = (cboFilm.SelectedIndex != 2);
                 lblFilm.IsEnabled = f;
                 cboFilmMode.IsEnabled = f;
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\AVSWAV.Designer.vb" startline="21" endline="28">
<![CDATA[
 	Protected Overrides Sub Dispose(ByVal disposing As Boolean)
 		If disposing Then
 			If components IsNot Nothing Then
 				components.Dispose()
 			End If
 		End If
 		MyBase.Dispose(disposing)
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Options.xaml.cs" startline="296" endline="305">
<![CDATA[
 
         private void cboFilm_SelectionChanged(object sender, SelectionChangedEventArgs e)
         {
             if (this.IsLoaded)
             {
                 bool f = (cboFilm.SelectedIndex != 2);
                 lblFilm.IsEnabled = f;
                 cboFilmMode.IsEnabled = f;
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Checking.Designer.vb" startline="21" endline="28">
<![CDATA[
 	Protected Overrides Sub Dispose(ByVal disposing As Boolean)
 		If disposing Then
 			If components IsNot Nothing Then
 				components.Dispose()
 			End If
 		End If
 		MyBase.Dispose(disposing)
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Options.xaml.cs" startline="296" endline="305">
<![CDATA[
 
         private void cboFilm_SelectionChanged(object sender, SelectionChangedEventArgs e)
         {
             if (this.IsLoaded)
             {
                 bool f = (cboFilm.SelectedIndex != 2);
                 lblFilm.IsEnabled = f;
                 cboFilmMode.IsEnabled = f;
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Crop.Designer.vb" startline="21" endline="28">
<![CDATA[
 	Protected Overrides Sub Dispose(ByVal disposing As Boolean)
 		If disposing Then
 			If components IsNot Nothing Then
 				components.Dispose()
 			End If
 		End If
 		MyBase.Dispose(disposing)
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Options.xaml.cs" startline="296" endline="305">
<![CDATA[
 
         private void cboFilm_SelectionChanged(object sender, SelectionChangedEventArgs e)
         {
             if (this.IsLoaded)
             {
                 bool f = (cboFilm.SelectedIndex != 2);
                 lblFilm.IsEnabled = f;
                 cboFilmMode.IsEnabled = f;
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Edit.Designer.vb" startline="21" endline="28">
<![CDATA[
 	Protected Overrides Sub Dispose(ByVal disposing As Boolean)
 		If disposing Then
 			If components IsNot Nothing Then
 				components.Dispose()
 			End If
 		End If
 		MyBase.Dispose(disposing)
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Options.xaml.cs" startline="296" endline="305">
<![CDATA[
 
         private void cboFilm_SelectionChanged(object sender, SelectionChangedEventArgs e)
         {
             if (this.IsLoaded)
             {
                 bool f = (cboFilm.SelectedIndex != 2);
                 lblFilm.IsEnabled = f;
                 cboFilmMode.IsEnabled = f;
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\ExportProfile.Designer.vb" startline="21" endline="28">
<![CDATA[
 	Protected Overrides Sub Dispose(ByVal disposing As Boolean)
 		If disposing Then
 			If components IsNot Nothing Then
 				components.Dispose()
 			End If
 		End If
 		MyBase.Dispose(disposing)
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Options.xaml.cs" startline="296" endline="305">
<![CDATA[
 
         private void cboFilm_SelectionChanged(object sender, SelectionChangedEventArgs e)
         {
             if (this.IsLoaded)
             {
                 bool f = (cboFilm.SelectedIndex != 2);
                 lblFilm.IsEnabled = f;
                 cboFilmMode.IsEnabled = f;
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\ImportProfile.Designer.vb" startline="21" endline="28">
<![CDATA[
 	Protected Overrides Sub Dispose(ByVal disposing As Boolean)
 		If disposing Then
 			If components IsNot Nothing Then
 				components.Dispose()
 			End If
 		End If
 		MyBase.Dispose(disposing)
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Options.xaml.cs" startline="296" endline="305">
<![CDATA[
 
         private void cboFilm_SelectionChanged(object sender, SelectionChangedEventArgs e)
         {
             if (this.IsLoaded)
             {
                 bool f = (cboFilm.SelectedIndex != 2);
                 lblFilm.IsEnabled = f;
                 cboFilmMode.IsEnabled = f;
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MainForm.Designer.vb" startline="21" endline="28">
<![CDATA[
 	Protected Overrides Sub Dispose(ByVal disposing As Boolean)
 		If disposing Then
 			If components IsNot Nothing Then
 				components.Dispose()
 			End If
 		End If
 		MyBase.Dispose(disposing)
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Options.xaml.cs" startline="296" endline="305">
<![CDATA[
 
         private void cboFilm_SelectionChanged(object sender, SelectionChangedEventArgs e)
         {
             if (this.IsLoaded)
             {
                 bool f = (cboFilm.SelectedIndex != 2);
                 lblFilm.IsEnabled = f;
                 cboFilmMode.IsEnabled = f;
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MPEG.Designer.vb" startline="21" endline="28">
<![CDATA[
 	Protected Overrides Sub Dispose(ByVal disposing As Boolean)
 		If disposing Then
 			If components IsNot Nothing Then
 				components.Dispose()
 			End If
 		End If
 		MyBase.Dispose(disposing)
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Options.xaml.cs" startline="296" endline="305">
<![CDATA[
 
         private void cboFilm_SelectionChanged(object sender, SelectionChangedEventArgs e)
         {
             if (this.IsLoaded)
             {
                 bool f = (cboFilm.SelectedIndex != 2);
                 lblFilm.IsEnabled = f;
                 cboFilmMode.IsEnabled = f;
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Options.Designer.vb" startline="21" endline="28">
<![CDATA[
 	Protected Overrides Sub Dispose(ByVal disposing As Boolean)
 		If disposing Then
 			If components IsNot Nothing Then
 				components.Dispose()
 			End If
 		End If
 		MyBase.Dispose(disposing)
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Options.xaml.cs" startline="296" endline="305">
<![CDATA[
 
         private void cboFilm_SelectionChanged(object sender, SelectionChangedEventArgs e)
         {
             if (this.IsLoaded)
             {
                 bool f = (cboFilm.SelectedIndex != 2);
                 lblFilm.IsEnabled = f;
                 cboFilmMode.IsEnabled = f;
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Player.Designer.vb" startline="21" endline="28">
<![CDATA[
 	Protected Overrides Sub Dispose(ByVal disposing As Boolean)
 		If disposing Then
 			If components IsNot Nothing Then
 				components.Dispose()
 			End If
 		End If
 		MyBase.Dispose(disposing)
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Options.xaml.cs" startline="296" endline="305">
<![CDATA[
 
         private void cboFilm_SelectionChanged(object sender, SelectionChangedEventArgs e)
         {
             if (this.IsLoaded)
             {
                 bool f = (cboFilm.SelectedIndex != 2);
                 lblFilm.IsEnabled = f;
                 cboFilmMode.IsEnabled = f;
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Profiles.Designer.vb" startline="21" endline="28">
<![CDATA[
 	Protected Overrides Sub Dispose(ByVal disposing As Boolean)
 		If disposing Then
 			If components IsNot Nothing Then
 				components.Dispose()
 			End If
 		End If
 		MyBase.Dispose(disposing)
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Options.xaml.cs" startline="296" endline="305">
<![CDATA[
 
         private void cboFilm_SelectionChanged(object sender, SelectionChangedEventArgs e)
         {
             if (this.IsLoaded)
             {
                 bool f = (cboFilm.SelectedIndex != 2);
                 lblFilm.IsEnabled = f;
                 cboFilmMode.IsEnabled = f;
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Testing.Designer.vb" startline="21" endline="28">
<![CDATA[
 	Protected Overrides Sub Dispose(ByVal disposing As Boolean)
 		If disposing Then
 			If components IsNot Nothing Then
 				components.Dispose()
 			End If
 		End If
 		MyBase.Dispose(disposing)
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Options.xaml.cs" startline="296" endline="305">
<![CDATA[
 
         private void cboFilm_SelectionChanged(object sender, SelectionChangedEventArgs e)
         {
             if (this.IsLoaded)
             {
                 bool f = (cboFilm.SelectedIndex != 2);
                 lblFilm.IsEnabled = f;
                 cboFilmMode.IsEnabled = f;
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Updating.Designer.vb" startline="21" endline="28">
<![CDATA[
 	Protected Overrides Sub Dispose(ByVal disposing As Boolean)
 		If disposing Then
 			If components IsNot Nothing Then
 				components.Dispose()
 			End If
 		End If
 		MyBase.Dispose(disposing)
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Options.xaml.cs" startline="296" endline="305">
<![CDATA[
 
         private void cboFilm_SelectionChanged(object sender, SelectionChangedEventArgs e)
         {
             if (this.IsLoaded)
             {
                 bool f = (cboFilm.SelectedIndex != 2);
                 lblFilm.IsEnabled = f;
                 cboFilmMode.IsEnabled = f;
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Wizard.Designer.vb" startline="21" endline="28">
<![CDATA[
 	Protected Overrides Sub Dispose(ByVal disposing As Boolean)
 		If disposing Then
 			If components IsNot Nothing Then
 				components.Dispose()
 			End If
 		End If
 		MyBase.Dispose(disposing)
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Options.xaml.cs" startline="296" endline="305">
<![CDATA[
 
         private void cboFilm_SelectionChanged(object sender, SelectionChangedEventArgs e)
         {
             if (this.IsLoaded)
             {
                 bool f = (cboFilm.SelectedIndex != 2);
                 lblFilm.IsEnabled = f;
                 cboFilmMode.IsEnabled = f;
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\x264.Designer.vb" startline="21" endline="28">
<![CDATA[
 	Protected Overrides Sub Dispose(ByVal disposing As Boolean)
 		If disposing Then
 			If components IsNot Nothing Then
 				components.Dispose()
 			End If
 		End If
 		MyBase.Dispose(disposing)
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Options.xaml.cs" startline="296" endline="305">
<![CDATA[
 
         private void cboFilm_SelectionChanged(object sender, SelectionChangedEventArgs e)
         {
             if (this.IsLoaded)
             {
                 bool f = (cboFilm.SelectedIndex != 2);
                 lblFilm.IsEnabled = f;
                 cboFilmMode.IsEnabled = f;
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\x264.Designer.vb" startline="1884" endline="1981">
<![CDATA[
     Private WithEvents timer1 As System.Windows.Forms.Timer
     Private WithEvents saveFile As System.Windows.Forms.SaveFileDialog
     Private WithEvents lblBias As System.Windows.Forms.Label
     Private WithEvents lblBMode As System.Windows.Forms.Label
     Private WithEvents lblWeighted As System.Windows.Forms.Label
     Private WithEvents lblAdaptive As System.Windows.Forms.Label
     Private WithEvents lblnumBFrames As System.Windows.Forms.Label
     Private WithEvents lblTrellis As System.Windows.Forms.Label
     Private WithEvents lblRefFrames As System.Windows.Forms.Label
     Private WithEvents cmdCancel As System.Windows.Forms.Button
     Private WithEvents numBias As System.Windows.Forms.NumericUpDown
     Private WithEvents numQBlur As System.Windows.Forms.NumericUpDown
     Private WithEvents chkWeighted As System.Windows.Forms.CheckBox
     Private WithEvents cboBFrame As System.Windows.Forms.ComboBox
     Private WithEvents numBFrames As System.Windows.Forms.NumericUpDown
     Private WithEvents numChromaQP As System.Windows.Forms.NumericUpDown
     Private WithEvents numPandB As System.Windows.Forms.NumericUpDown
     Private WithEvents groupBox8 As System.Windows.Forms.GroupBox
     Private WithEvents label32 As System.Windows.Forms.Label
     Private WithEvents numIandP As System.Windows.Forms.NumericUpDown
     Private WithEvents numQuantDelta As System.Windows.Forms.NumericUpDown
     Private WithEvents label30 As System.Windows.Forms.Label
     Private WithEvents numMaxQuant As System.Windows.Forms.NumericUpDown
     Private WithEvents numMinQuant As System.Windows.Forms.NumericUpDown
     Private WithEvents label4 As System.Windows.Forms.Label
     Private WithEvents quantizers As System.Windows.Forms.GroupBox
     Private WithEvents chkB8x8 As System.Windows.Forms.CheckBox
     Private WithEvents chkI8x8 As System.Windows.Forms.CheckBox
     Private WithEvents chkP8x8 As System.Windows.Forms.CheckBox
     Private WithEvents chkADCT As System.Windows.Forms.CheckBox
     Private WithEvents chkI4x4 As System.Windows.Forms.CheckBox
     Private WithEvents chkP4x4 As System.Windows.Forms.CheckBox
     Private WithEvents numStrength As System.Windows.Forms.NumericUpDown
     Private WithEvents numThresh As System.Windows.Forms.NumericUpDown
     Private WithEvents groupBox6 As System.Windows.Forms.GroupBox
     Private WithEvents lblStrength As System.Windows.Forms.Label
     Private WithEvents lblThresh As System.Windows.Forms.Label
     Private WithEvents chkPSkip As System.Windows.Forms.CheckBox
     Private WithEvents label28 As System.Windows.Forms.Label
     Private WithEvents numRefFrames As System.Windows.Forms.NumericUpDown
     Private WithEvents chkMixedRef As System.Windows.Forms.CheckBox
     Private WithEvents lblmixed As System.Windows.Forms.Label
     Private WithEvents chkDCT As System.Windows.Forms.CheckBox
     Private WithEvents label27 As System.Windows.Forms.Label
     Private WithEvents cboTrellis As System.Windows.Forms.ComboBox
     Private WithEvents groupBox5 As System.Windows.Forms.GroupBox
     Private WithEvents cboSubPixel As System.Windows.Forms.ComboBox
     Private WithEvents label22 As System.Windows.Forms.Label
     Private WithEvents chkChromaME As System.Windows.Forms.CheckBox
     Private WithEvents label18 As System.Windows.Forms.Label
     Private WithEvents label19 As System.Windows.Forms.Label
     Private WithEvents numMERange As System.Windows.Forms.NumericUpDown
     Private WithEvents lblSceneCut As System.Windows.Forms.Label
     Private WithEvents numSceneChange As System.Windows.Forms.NumericUpDown
     Private WithEvents cboAlgorithm As System.Windows.Forms.ComboBox
     Private WithEvents label21 As System.Windows.Forms.Label
     Private WithEvents groupBox4 As System.Windows.Forms.GroupBox
     Private WithEvents txtNoise As System.Windows.Forms.TextBox
     Private WithEvents label16 As System.Windows.Forms.Label
     Private WithEvents chkInterlace As System.Windows.Forms.CheckBox
     Private WithEvents label17 As System.Windows.Forms.Label
     Private WithEvents label12 As System.Windows.Forms.Label
     Private WithEvents label13 As System.Windows.Forms.Label
     Private WithEvents label15 As System.Windows.Forms.Label
     Private WithEvents txtKeyframe As System.Windows.Forms.TextBox
     Private WithEvents txtMinGOP As System.Windows.Forms.TextBox
     Private WithEvents label14 As System.Windows.Forms.Label
     Private WithEvents label11 As System.Windows.Forms.Label
     Private WithEvents label10 As System.Windows.Forms.Label
     Private WithEvents numBlur As System.Windows.Forms.NumericUpDown
     Private WithEvents label9 As System.Windows.Forms.Label
     Private WithEvents numCompression As System.Windows.Forms.NumericUpDown
     Private WithEvents numVariance As System.Windows.Forms.NumericUpDown
     Private WithEvents label8 As System.Windows.Forms.Label
     Private WithEvents numBuffer As System.Windows.Forms.NumericUpDown
     Private WithEvents label6 As System.Windows.Forms.Label
     Private WithEvents txtBuffer As System.Windows.Forms.TextBox
     Private WithEvents label7 As System.Windows.Forms.Label
     Private WithEvents ratecontrol As System.Windows.Forms.GroupBox
     Private WithEvents chkDeblocking As System.Windows.Forms.CheckBox
     Private WithEvents label3 As System.Windows.Forms.Label
     Private WithEvents groupBox2 As System.Windows.Forms.GroupBox
     Private WithEvents groupBox1 As System.Windows.Forms.GroupBox
     Private WithEvents numThreads As System.Windows.Forms.NumericUpDown
     Private WithEvents label2 As System.Windows.Forms.Label
     Private WithEvents chkSSIM As System.Windows.Forms.CheckBox
     Private WithEvents chkPNSR As System.Windows.Forms.CheckBox
     Private WithEvents label1 As System.Windows.Forms.Label
     Private WithEvents txtLogFile As System.Windows.Forms.TextBox
     Private WithEvents cmdLogFile As System.Windows.Forms.Button
     Private WithEvents cmdOK As System.Windows.Forms.Button
     Private WithEvents pictureBox1 As System.Windows.Forms.PictureBox
 
 
 
     Sub NumRefFramesValueChanged(ByVal sender As Object, ByVal e As EventArgs)
         If numRefFrames.Value <= 1 Then chkMixedRef.Enabled = False Else chkMixedRef.Enabled = True
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Updating.xaml.cs" startline="34" endline="42">
<![CDATA[
 
         private void Timer_Tick(object sender, EventArgs e)
         {
             timer.IsEnabled = false;
             Thread updater = new Thread(update);
             updater.Priority = ThreadPriority.Lowest;
             updater.Start();
             tmrExit.IsEnabled = true;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\My Project\Application.Designer.vb" startline="25" endline="31">
<![CDATA[
         Public Sub New()
             MyBase.New(Global.Microsoft.VisualBasic.ApplicationServices.AuthenticationMode.Windows)
             Me.IsSingleInstance = false
             Me.EnableVisualStyles = true
             Me.SaveMySettingsOnExit = true
             Me.ShutDownStyle = Global.Microsoft.VisualBasic.ApplicationServices.ShutdownMode.AfterMainFormCloses
         End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Updating.xaml.cs" startline="34" endline="42">
<![CDATA[
 
         private void Timer_Tick(object sender, EventArgs e)
         {
             timer.IsEnabled = false;
             Thread updater = new Thread(update);
             updater.Priority = ThreadPriority.Lowest;
             updater.Start();
             tmrExit.IsEnabled = true;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Append.vb" startline="494" endline="501">
<![CDATA[
 
     Private Sub RadioButton2_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs)
         lblBitrate.Visible = False
         txtBitrate.Visible = False
         chkFileSize.Enabled = True
         txtFileSize.Enabled = True
         cboFileSize.Enabled = True
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Updating.xaml.cs" startline="34" endline="42">
<![CDATA[
 
         private void Timer_Tick(object sender, EventArgs e)
         {
             timer.IsEnabled = false;
             Thread updater = new Thread(update);
             updater.Priority = ThreadPriority.Lowest;
             updater.Start();
             tmrExit.IsEnabled = true;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Edit.vb" startline="431" endline="438">
<![CDATA[
 	
     Sub OptCustomBitrateCheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles optCustomBitrate.CheckedChanged
         lblBitrate.Visible = True
         txtBitrate.Visible = True
         chkFileSize.Enabled = False
         txtFileSize.Enabled = False
         cboFileSize.Enabled = False
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Updating.xaml.cs" startline="34" endline="42">
<![CDATA[
 
         private void Timer_Tick(object sender, EventArgs e)
         {
             timer.IsEnabled = false;
             Thread updater = new Thread(update);
             updater.Priority = ThreadPriority.Lowest;
             updater.Start();
             tmrExit.IsEnabled = true;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Edit.vb" startline="439" endline="446">
<![CDATA[
 	
     Sub OptAutoBitrateCheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles optAutoBitrate.CheckedChanged
         lblBitrate.Visible = False
         txtBitrate.Visible = False
         chkFileSize.Enabled = True
         txtFileSize.Enabled = True
         cboFileSize.Enabled = True
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Updating.xaml.cs" startline="34" endline="42">
<![CDATA[
 
         private void Timer_Tick(object sender, EventArgs e)
         {
             timer.IsEnabled = false;
             Thread updater = new Thread(update);
             updater.Priority = ThreadPriority.Lowest;
             updater.Start();
             tmrExit.IsEnabled = true;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MainForm.vb" startline="235" endline="242">
<![CDATA[
 	
     Sub OptCustomBitrateCheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles optCustomBitrate.CheckedChanged
         lblBitrate.Visible = True
         txtBitrate.Visible = True
         chkFileSize.Enabled = False
         txtFileSize.Enabled = False
         cboFileSize.Enabled = False
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Updating.xaml.cs" startline="34" endline="42">
<![CDATA[
 
         private void Timer_Tick(object sender, EventArgs e)
         {
             timer.IsEnabled = false;
             Thread updater = new Thread(update);
             updater.Priority = ThreadPriority.Lowest;
             updater.Start();
             tmrExit.IsEnabled = true;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MainForm.vb" startline="243" endline="250">
<![CDATA[
 	
     Sub OptAutoBitrateCheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles optAutoBitrate.CheckedChanged
         lblBitrate.Visible = False
         txtBitrate.Visible = False
         chkFileSize.Enabled = True
         txtFileSize.Enabled = True
         cboFileSize.Enabled = True
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Updating.xaml.cs" startline="34" endline="42">
<![CDATA[
 
         private void Timer_Tick(object sender, EventArgs e)
         {
             timer.IsEnabled = false;
             Thread updater = new Thread(update);
             updater.Priority = ThreadPriority.Lowest;
             updater.Start();
             tmrExit.IsEnabled = true;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MainForm.vb" startline="4245" endline="4252">
<![CDATA[
 
     Sub OptionsToolStripMenuItemClick(ByVal sender As Object, ByVal e As EventArgs) Handles optionsToolStripMenuItem.Click
         Dim frmOptions As New Options
         frmOptions.Show()
         boolEdit = True
         Me.Enabled = False
         tmrOptions.Enabled = True
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Updating.xaml.cs" startline="34" endline="42">
<![CDATA[
 
         private void Timer_Tick(object sender, EventArgs e)
         {
             timer.IsEnabled = false;
             Thread updater = new Thread(update);
             updater.Priority = ThreadPriority.Lowest;
             updater.Start();
             tmrExit.IsEnabled = true;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MainForm.vb" startline="6170" endline="6177">
<![CDATA[
 
     Private Sub ExportProfileToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ExportProfileToolStripMenuItem.Click
         Dim frmExport As New ExportProfile
         frmExport.Show()
         boolEdit = True
         Me.Enabled = False
         tmrImport.Enabled = True
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Updating.xaml.cs" startline="34" endline="42">
<![CDATA[
 
         private void Timer_Tick(object sender, EventArgs e)
         {
             timer.IsEnabled = false;
             Thread updater = new Thread(update);
             updater.Priority = ThreadPriority.Lowest;
             updater.Start();
             tmrExit.IsEnabled = true;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Wizard.vb" startline="2934" endline="2941">
<![CDATA[
 
     Private Sub ExportProfileToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ExportProfileToolStripMenuItem1.Click
         Dim frmExport As New ExportProfile
         Me.Enabled = False
         frmExport.ShowDialog()
         Me.Enabled = True
 
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Updating.xaml.cs" startline="34" endline="42">
<![CDATA[
 
         private void Timer_Tick(object sender, EventArgs e)
         {
             timer.IsEnabled = false;
             Thread updater = new Thread(update);
             updater.Priority = ThreadPriority.Lowest;
             updater.Start();
             tmrExit.IsEnabled = true;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Wizard.vb" startline="2946" endline="2953">
<![CDATA[
 
     Private Sub OptionsToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles OptionsToolStripMenuItem.Click
         Dim frmOptions As New Options
         frmOptions.Show()
         boolEdit = True
         Me.Enabled = False
         tmrOptions.Enabled = True
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Updating.xaml.cs" startline="64" endline="74">
<![CDATA[
 
         private void update()
         {
             foreach (string prof in profilelist)
             {
                 editvid = new MainForm.video();
                 editvid = MainForm.Profile_Change(prof, editvid);
                 MainForm.profile_save(editvid, prof);
             }
             foreach (string prof in profilelist)
             {
                 editvid = new MainForm.video();
                 editvid = MainForm.Profile_Change(prof, editvid);
                 MainForm.profile_save(editvid, prof);
             }
             exit = true;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\ProfileUpdater.vb" startline="741" endline="750">
<![CDATA[
 
     Sub UpdateProfiles()
         Dim pdir As String = appdir & "\Profiles.bak"
         For Each p As String In updating
             Dim prof As video = Profile_Change(p, pdir)
             Profile_save(prof)
         Next
         IO.File.Delete(pdir)
         Me.Close()
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Updating.xaml.cs" startline="75" endline="81">
<![CDATA[
 
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\About.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Updating.xaml.cs" startline="75" endline="81">
<![CDATA[
 
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\AVSWAV.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Updating.xaml.cs" startline="75" endline="81">
<![CDATA[
 
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Checking.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Updating.xaml.cs" startline="75" endline="81">
<![CDATA[
 
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Crop.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Updating.xaml.cs" startline="75" endline="81">
<![CDATA[
 
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\ExportProfile.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Updating.xaml.cs" startline="75" endline="81">
<![CDATA[
 
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\ImportProfile.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Updating.xaml.cs" startline="75" endline="81">
<![CDATA[
 
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MPEG.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Updating.xaml.cs" startline="75" endline="81">
<![CDATA[
 
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Options.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Updating.xaml.cs" startline="75" endline="81">
<![CDATA[
 
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Player.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Updating.xaml.cs" startline="75" endline="81">
<![CDATA[
 
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Profiles.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Updating.xaml.cs" startline="75" endline="81">
<![CDATA[
 
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Testing.vb" startline="12" endline="19">
<![CDATA[
 	Public Sub New()
 	dim edittracklist as New List(Of track), currenttrack as Integer
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Updating.xaml.cs" startline="75" endline="81">
<![CDATA[
 
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Updating.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Updating.xaml.cs" startline="75" endline="81">
<![CDATA[
 
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\x264.vb" startline="12" endline="19">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Properties\Resources.Designer.cs" startline="34" endline="46">
<![CDATA[
         
         /// <summary>
         ///   Returns the cached ResourceManager instance used by this class.
         /// </summary>
         [global
         internal static global
             get {
                 if (object.ReferenceEquals(resourceMan, null)) {
                     global
                     resourceMan = temp;
                 }
                 return resourceMan;
             }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\My Project\Resources.Designer.vb" startline="40" endline="46">
<![CDATA[
             Get
                 If Object.ReferenceEquals(resourceMan, Nothing) Then
                     Dim temp As Global.System.Resources.ResourceManager = New Global.System.Resources.ResourceManager("ASXGui.Resources", GetType(Resources).Assembly)
                     resourceMan = temp
                 End If
                 Return resourceMan
             End Get
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ImportProfile.xaml.cs" startline="49" endline="110">
<![CDATA[
 
         private void cmdImport_Click(object sender, RoutedEventArgs e)
         {
             string f = txtFile.Text, p = appdir + "\\profiles.ini", prof = "", data, t = appdir + "\\profiles.tmp";
             if ((bool)optFile.IsChecked)
             {
                 if (File.Exists(f))
                 {
                     StreamReader i = File.OpenText(f);
                     StreamWriter o;
                     if (File.Exists(p))
                         o = File.AppendText(p);
                     else
                         o = File.CreateText(p);
                     while (i.Peek() > -1)
                     {
                         data = i.ReadLine();
                         if (data.Length > 8)
                             if (data.Substring(0, 8) == "Profile=")
                                 if (prof == "")
                                     prof = data.Substring(8, data.Length - 8);
                                 else
                                     prof += "\n" + data.Substring(8, data.Length - 8);
                         o.WriteLine(data);
                     }
                     while (i.Peek() > -1)
                     {
                         data = i.ReadLine();
                         if (data.Length > 8)
                             if (data.Substring(0, 8) == "Profile=")
                                 if (prof == "")
                                     prof = data.Substring(8, data.Length - 8);
                                 else
                                     prof += "\n" + data.Substring(8, data.Length - 8);
                         o.WriteLine(data);
                     }
                     i.Close();
                     o.Close();
                     MessageBox.Show("The following profiles were imported successfully
                     txtFile.Text = "";
                 }
                 else
                     MessageBox.Show("File not found!");
             }
             else
             {
                 StreamWriter o;
                 if (File.Exists(p))
                     o = File.AppendText(p);
                 else
                     o = File.CreateText(p);
                 StreamWriter tmp = File.CreateText(t);
                 tmp.WriteLine(txtText.Text);
                 tmp.Close();
                 StreamReader i = File.OpenText(t);
                 while (i.Peek() > -1)
                 {
                     data = i.ReadLine();
                     if (data.Length > 8)
                         if (data.Substring(0, 8) == "Profile=")
                             if (prof == "")
                                 prof = data.Substring(8, data.Length - 8);
                             else
                                 prof += "\n" + data.Substring(8, data.Length - 8);
                     o.WriteLine(data);
                 }
                 while (i.Peek() > -1)
                 {
                     data = i.ReadLine();
                     if (data.Length > 8)
                         if (data.Substring(0, 8) == "Profile=")
                             if (prof == "")
                                 prof = data.Substring(8, data.Length - 8);
                             else
                                 prof += "\n" + data.Substring(8, data.Length - 8);
                     o.WriteLine(data);
                 }
                 i.Close();
                 o.Close();
                 MessageBox.Show("The following profiles were imported successfully
                 txtFile.Text = "";
                 File.Delete(t);
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\ImportProfile.vb" startline="41" endline="99">
<![CDATA[
 
     Private Sub cmdImport_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdImport.Click
         If optFile.Checked Then
             If IO.File.Exists(txtFile.Text) Then
                 Dim strProfile As String = "", pRead As IO.StreamReader = IO.File.OpenText(txtFile.Text), strData As String, pWrite As IO.StreamWriter
                 If IO.File.Exists(appdir & "\Profiles.ini") Then pWrite = IO.File.AppendText(appdir & "\Profiles.ini") Else pWrite = IO.File.CreateText(appdir & "\Profiles.ini")
                 Do While pRead.Peek > -1
                     Application.DoEvents()
                     strData = pRead.ReadLine
                     If Len(strData) > 8 Then
                         If Mid(strData, 1, 8) = "Profile=" Then
                             If strProfile = "" Then
                                 strProfile = Mid(strData, 9, Len(strData) - 8)
                             Else
                                 strProfile = strProfile & vbNewLine & Mid(strData, 9, Len(strData) - 8)
                             End If
                             profilelist.Add(Mid(strData, 9, Len(strData) - 8))
                         End If
                     End If
                     pWrite.WriteLine(strData)
                 Loop
                 Do While pRead.Peek > -1
                     Application.DoEvents()
                     strData = pRead.ReadLine
                     If Len(strData) > 8 Then
                         If Mid(strData, 1, 8) = "Profile=" Then
                             If strProfile = "" Then
                                 strProfile = Mid(strData, 9, Len(strData) - 8)
                             Else
                                 strProfile = strProfile & vbNewLine & Mid(strData, 9, Len(strData) - 8)
                             End If
                             profilelist.Add(Mid(strData, 9, Len(strData) - 8))
                         End If
                     End If
                     pWrite.WriteLine(strData)
                 Loop
                 pWrite.Close()
                 pRead.Close()
                 MsgBox("The following profiles were added successfully
                 txtFile.Text = ""
             Else
                 MsgBox("File not found!")
             End If
         Else
             Dim strprofile As String = ""
             Dim tWrite As IO.StreamWriter = IO.File.CreateText(appdir & "\profiles.tmp")
             tWrite.WriteLine(txtText.Text)
             tWrite.Close()
             Dim pRead As IO.StreamReader = IO.File.OpenText(appdir & "\profiles.tmp"), strdata As String, pWrite As IO.StreamWriter
             If IO.File.Exists(appdir & "\Profiles.ini") Then pWrite = IO.File.AppendText(appdir & "\Profiles.ini") Else pWrite = IO.File.CreateText(appdir & "\Profiles.ini")
             Do While pRead.Peek > -1
                 Application.DoEvents()
                 strdata = pRead.ReadLine
                 If Len(strdata) > 8 Then
                     If Mid(strdata, 1, 8) = "Profile=" Then
                         If strprofile = "" Then
                             strprofile = Mid(strdata, 9, Len(strdata) - 8)
                         Else
                             strprofile = strprofile & vbNewLine & Mid(strdata, 9, Len(strdata) - 8)
                         End If
                         profilelist.Add(Mid(strdata, 9, Len(strdata) - 8))
                     End If
                 End If
                 pWrite.WriteLine(strdata)
             Loop
             Do While pRead.Peek > -1
                 Application.DoEvents()
                 strdata = pRead.ReadLine
                 If Len(strdata) > 8 Then
                     If Mid(strdata, 1, 8) = "Profile=" Then
                         If strprofile = "" Then
                             strprofile = Mid(strdata, 9, Len(strdata) - 8)
                         Else
                             strprofile = strprofile & vbNewLine & Mid(strdata, 9, Len(strdata) - 8)
                         End If
                         profilelist.Add(Mid(strdata, 9, Len(strdata) - 8))
                     End If
                 End If
                 pWrite.WriteLine(strdata)
             Loop
             pWrite.Close()
             pRead.Close()
             IO.File.Delete(appdir & "\profiles.tmp")
             MsgBox("The following profiles were added successfully
             txtText.Text = ""
         End If
         
 
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ImportProfile.xaml.cs" startline="111" endline="119">
<![CDATA[
 
         private void cmdOpen_Click(object sender, RoutedEventArgs e)
         {
             OpenFileDialog openfile = new OpenFileDialog();
             openfile.Filter = "ASXGui Profile|*.ini|Text File|*.txt|All Files|*.*";
             openfile.FileName = txtFile.Text;
             if ((bool)openfile.ShowDialog())
                 txtFile.Text = openfile.FileName;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Append.vb" startline="456" endline="463">
<![CDATA[
     Sub Test_Videos()
         Dim frmtest As New Testing
         frmtest.Show()
         frmtest.Refresh()
         Do While frmtest.Visible
             Application.DoEvents()
         Loop
         Do While frmtest.Visible
             Application.DoEvents()
         Loop
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ImportProfile.xaml.cs" startline="111" endline="119">
<![CDATA[
 
         private void cmdOpen_Click(object sender, RoutedEventArgs e)
         {
             OpenFileDialog openfile = new OpenFileDialog();
             openfile.Filter = "ASXGui Profile|*.ini|Text File|*.txt|All Files|*.*";
             openfile.FileName = txtFile.Text;
             if ((bool)openfile.ShowDialog())
                 txtFile.Text = openfile.FileName;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Append.vb" startline="520" endline="530">
<![CDATA[
 
     Private Sub lblAdvanced_LinkClicked(ByVal sender As System.Object, ByVal e As System.Windows.Forms.LinkLabelLinkClickedEventArgs) Handles lblAdvanced.LinkClicked
         Dim frmX264 As New x264
         Me.Enabled = False
         frmX264.Show()
         Do While frmX264.Visible
             Application.DoEvents()
         Loop
         Do While frmX264.Visible
             Application.DoEvents()
         Loop
         Me.Enabled = True
         Me.Focus()
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ImportProfile.xaml.cs" startline="111" endline="119">
<![CDATA[
 
         private void cmdOpen_Click(object sender, RoutedEventArgs e)
         {
             OpenFileDialog openfile = new OpenFileDialog();
             openfile.Filter = "ASXGui Profile|*.ini|Text File|*.txt|All Files|*.*";
             openfile.FileName = txtFile.Text;
             if ((bool)openfile.ShowDialog())
                 txtFile.Text = openfile.FileName;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Edit.vb" startline="516" endline="526">
<![CDATA[
 	
     Sub LblAdvancedLinkClicked(ByVal sender As Object, ByVal e As LinkLabelLinkClickedEventArgs) Handles lblAdvanced.LinkClicked
         Dim frmX264 As New x264
         Me.Enabled = False
         frmX264.Show()
         Do While frmX264.Visible
             Application.DoEvents()
         Loop
         Do While frmX264.Visible
             Application.DoEvents()
         Loop
         Me.Enabled = True
         Me.Focus()
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ImportProfile.xaml.cs" startline="111" endline="119">
<![CDATA[
 
         private void cmdOpen_Click(object sender, RoutedEventArgs e)
         {
             OpenFileDialog openfile = new OpenFileDialog();
             openfile.Filter = "ASXGui Profile|*.ini|Text File|*.txt|All Files|*.*";
             openfile.FileName = txtFile.Text;
             if ((bool)openfile.ShowDialog())
                 txtFile.Text = openfile.FileName;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MainForm.vb" startline="2420" endline="2431">
<![CDATA[
 
     Sub LblAdvancedLinkClicked(ByVal sender As Object, ByVal e As LinkLabelLinkClickedEventArgs) Handles lblAdvanced.LinkClicked
 
         Dim frmx264 As New x264
         Me.Enabled = False
         frmX264.Show()
         Do While frmX264.Visible
             Application.DoEvents()
         Loop
         Do While frmX264.Visible
             Application.DoEvents()
         Loop
         Me.Enabled = True
         Me.Focus()
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ImportProfile.xaml.cs" startline="111" endline="119">
<![CDATA[
 
         private void cmdOpen_Click(object sender, RoutedEventArgs e)
         {
             OpenFileDialog openfile = new OpenFileDialog();
             openfile.Filter = "ASXGui Profile|*.ini|Text File|*.txt|All Files|*.*";
             openfile.FileName = txtFile.Text;
             if ((bool)openfile.ShowDialog())
                 txtFile.Text = openfile.FileName;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MainForm.vb" startline="4413" endline="4424">
<![CDATA[
 
     Sub Test_Videos()
         Dim frmtest As New Testing
         frmtest.Show()
         'Me.Enabled = False
         frmtest.Refresh()
         Do While frmtest.Visible
             Application.DoEvents()
         Loop
         Do While frmtest.Visible
             Application.DoEvents()
         Loop
         'Me.Enabled = True
         'Me.Select()
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ImportProfile.xaml.cs" startline="111" endline="119">
<![CDATA[
 
         private void cmdOpen_Click(object sender, RoutedEventArgs e)
         {
             OpenFileDialog openfile = new OpenFileDialog();
             openfile.Filter = "ASXGui Profile|*.ini|Text File|*.txt|All Files|*.*";
             openfile.FileName = txtFile.Text;
             if ((bool)openfile.ShowDialog())
                 txtFile.Text = openfile.FileName;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Wizard.vb" startline="955" endline="966">
<![CDATA[
 
     Sub Test_Videos()
         Dim frmtest As New Testing
         frmtest.Show()
         'me.Enabled=false
         frmtest.Refresh()
         Do While frmtest.Visible
             Application.DoEvents()
         Loop
         Do While frmtest.Visible
             Application.DoEvents()
         Loop
         'Me.Enabled=True		
         'Me.Select
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ImportProfile.xaml.cs" startline="134" endline="140">
<![CDATA[
 
         private void optText_Checked(object sender, RoutedEventArgs e)
         {
             txtText.IsEnabled = true;
             txtFile.IsEnabled = false;
             cmdOpen.IsEnabled = false;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\My Project\Application.Designer.vb" startline="25" endline="31">
<![CDATA[
         Public Sub New()
             MyBase.New(Global.Microsoft.VisualBasic.ApplicationServices.AuthenticationMode.Windows)
             Me.IsSingleInstance = false
             Me.EnableVisualStyles = true
             Me.SaveMySettingsOnExit = true
             Me.ShutDownStyle = Global.Microsoft.VisualBasic.ApplicationServices.ShutdownMode.AfterMainFormCloses
         End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ImportProfile.xaml.cs" startline="134" endline="140">
<![CDATA[
 
         private void optText_Checked(object sender, RoutedEventArgs e)
         {
             txtText.IsEnabled = true;
             txtFile.IsEnabled = false;
             cmdOpen.IsEnabled = false;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\About.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ImportProfile.xaml.cs" startline="134" endline="140">
<![CDATA[
 
         private void optText_Checked(object sender, RoutedEventArgs e)
         {
             txtText.IsEnabled = true;
             txtFile.IsEnabled = false;
             cmdOpen.IsEnabled = false;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Append.vb" startline="494" endline="501">
<![CDATA[
 
     Private Sub RadioButton2_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs)
         lblBitrate.Visible = False
         txtBitrate.Visible = False
         chkFileSize.Enabled = True
         txtFileSize.Enabled = True
         cboFileSize.Enabled = True
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ImportProfile.xaml.cs" startline="134" endline="140">
<![CDATA[
 
         private void optText_Checked(object sender, RoutedEventArgs e)
         {
             txtText.IsEnabled = true;
             txtFile.IsEnabled = false;
             cmdOpen.IsEnabled = false;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\AVSWAV.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ImportProfile.xaml.cs" startline="134" endline="140">
<![CDATA[
 
         private void optText_Checked(object sender, RoutedEventArgs e)
         {
             txtText.IsEnabled = true;
             txtFile.IsEnabled = false;
             cmdOpen.IsEnabled = false;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Checking.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ImportProfile.xaml.cs" startline="134" endline="140">
<![CDATA[
 
         private void optText_Checked(object sender, RoutedEventArgs e)
         {
             txtText.IsEnabled = true;
             txtFile.IsEnabled = false;
             cmdOpen.IsEnabled = false;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Crop.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ImportProfile.xaml.cs" startline="134" endline="140">
<![CDATA[
 
         private void optText_Checked(object sender, RoutedEventArgs e)
         {
             txtText.IsEnabled = true;
             txtFile.IsEnabled = false;
             cmdOpen.IsEnabled = false;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Edit.vb" startline="431" endline="438">
<![CDATA[
 	
     Sub OptCustomBitrateCheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles optCustomBitrate.CheckedChanged
         lblBitrate.Visible = True
         txtBitrate.Visible = True
         chkFileSize.Enabled = False
         txtFileSize.Enabled = False
         cboFileSize.Enabled = False
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ImportProfile.xaml.cs" startline="134" endline="140">
<![CDATA[
 
         private void optText_Checked(object sender, RoutedEventArgs e)
         {
             txtText.IsEnabled = true;
             txtFile.IsEnabled = false;
             cmdOpen.IsEnabled = false;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Edit.vb" startline="439" endline="446">
<![CDATA[
 	
     Sub OptAutoBitrateCheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles optAutoBitrate.CheckedChanged
         lblBitrate.Visible = False
         txtBitrate.Visible = False
         chkFileSize.Enabled = True
         txtFileSize.Enabled = True
         cboFileSize.Enabled = True
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ImportProfile.xaml.cs" startline="134" endline="140">
<![CDATA[
 
         private void optText_Checked(object sender, RoutedEventArgs e)
         {
             txtText.IsEnabled = true;
             txtFile.IsEnabled = false;
             cmdOpen.IsEnabled = false;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MainForm.vb" startline="235" endline="242">
<![CDATA[
 	
     Sub OptCustomBitrateCheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles optCustomBitrate.CheckedChanged
         lblBitrate.Visible = True
         txtBitrate.Visible = True
         chkFileSize.Enabled = False
         txtFileSize.Enabled = False
         cboFileSize.Enabled = False
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ImportProfile.xaml.cs" startline="134" endline="140">
<![CDATA[
 
         private void optText_Checked(object sender, RoutedEventArgs e)
         {
             txtText.IsEnabled = true;
             txtFile.IsEnabled = false;
             cmdOpen.IsEnabled = false;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MainForm.vb" startline="243" endline="250">
<![CDATA[
 	
     Sub OptAutoBitrateCheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles optAutoBitrate.CheckedChanged
         lblBitrate.Visible = False
         txtBitrate.Visible = False
         chkFileSize.Enabled = True
         txtFileSize.Enabled = True
         cboFileSize.Enabled = True
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ImportProfile.xaml.cs" startline="134" endline="140">
<![CDATA[
 
         private void optText_Checked(object sender, RoutedEventArgs e)
         {
             txtText.IsEnabled = true;
             txtFile.IsEnabled = false;
             cmdOpen.IsEnabled = false;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MainForm.vb" startline="4245" endline="4252">
<![CDATA[
 
     Sub OptionsToolStripMenuItemClick(ByVal sender As Object, ByVal e As EventArgs) Handles optionsToolStripMenuItem.Click
         Dim frmOptions As New Options
         frmOptions.Show()
         boolEdit = True
         Me.Enabled = False
         tmrOptions.Enabled = True
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ImportProfile.xaml.cs" startline="134" endline="140">
<![CDATA[
 
         private void optText_Checked(object sender, RoutedEventArgs e)
         {
             txtText.IsEnabled = true;
             txtFile.IsEnabled = false;
             cmdOpen.IsEnabled = false;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MainForm.vb" startline="6143" endline="6151">
<![CDATA[
 
     Private Sub ImportProfileToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ImportProfileToolStripMenuItem.Click
         Dim frmImport As New ImportProfile
         profilecount = profilelist.Count
         frmImport.Show()
         boolEdit = True
         Me.Enabled = False
         tmrImport.enabled = True
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ImportProfile.xaml.cs" startline="134" endline="140">
<![CDATA[
 
         private void optText_Checked(object sender, RoutedEventArgs e)
         {
             txtText.IsEnabled = true;
             txtFile.IsEnabled = false;
             cmdOpen.IsEnabled = false;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MainForm.vb" startline="6170" endline="6177">
<![CDATA[
 
     Private Sub ExportProfileToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ExportProfileToolStripMenuItem.Click
         Dim frmExport As New ExportProfile
         frmExport.Show()
         boolEdit = True
         Me.Enabled = False
         tmrImport.Enabled = True
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ImportProfile.xaml.cs" startline="134" endline="140">
<![CDATA[
 
         private void optText_Checked(object sender, RoutedEventArgs e)
         {
             txtText.IsEnabled = true;
             txtFile.IsEnabled = false;
             cmdOpen.IsEnabled = false;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MPEG.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ImportProfile.xaml.cs" startline="134" endline="140">
<![CDATA[
 
         private void optText_Checked(object sender, RoutedEventArgs e)
         {
             txtText.IsEnabled = true;
             txtFile.IsEnabled = false;
             cmdOpen.IsEnabled = false;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Player.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ImportProfile.xaml.cs" startline="134" endline="140">
<![CDATA[
 
         private void optText_Checked(object sender, RoutedEventArgs e)
         {
             txtText.IsEnabled = true;
             txtFile.IsEnabled = false;
             cmdOpen.IsEnabled = false;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Wizard.vb" startline="2907" endline="2915">
<![CDATA[
 
     Private Sub ImportProfileToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ImportProfileToolStripMenuItem1.Click
         Dim frmImport As New ImportProfile
         profilecount = profilelist.Count
         frmImport.Show()
         boolEdit = True
         Me.Enabled = False
         tmrImport.Enabled = True
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ImportProfile.xaml.cs" startline="134" endline="140">
<![CDATA[
 
         private void optText_Checked(object sender, RoutedEventArgs e)
         {
             txtText.IsEnabled = true;
             txtFile.IsEnabled = false;
             cmdOpen.IsEnabled = false;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Wizard.vb" startline="2934" endline="2941">
<![CDATA[
 
     Private Sub ExportProfileToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ExportProfileToolStripMenuItem1.Click
         Dim frmExport As New ExportProfile
         Me.Enabled = False
         frmExport.ShowDialog()
         Me.Enabled = True
 
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ImportProfile.xaml.cs" startline="134" endline="140">
<![CDATA[
 
         private void optText_Checked(object sender, RoutedEventArgs e)
         {
             txtText.IsEnabled = true;
             txtFile.IsEnabled = false;
             cmdOpen.IsEnabled = false;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Wizard.vb" startline="2946" endline="2953">
<![CDATA[
 
     Private Sub OptionsToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles OptionsToolStripMenuItem.Click
         Dim frmOptions As New Options
         frmOptions.Show()
         boolEdit = True
         Me.Enabled = False
         tmrOptions.Enabled = True
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ImportProfile.xaml.cs" startline="141" endline="150">
<![CDATA[
 
         private void optFile_Checked(object sender, RoutedEventArgs e)
         {
             if (this.IsLoaded)
             {
                 txtText.IsEnabled = false;
                 txtFile.IsEnabled = true;
                 cmdOpen.IsEnabled = true;
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\My Project\Application.Designer.vb" startline="25" endline="31">
<![CDATA[
         Public Sub New()
             MyBase.New(Global.Microsoft.VisualBasic.ApplicationServices.AuthenticationMode.Windows)
             Me.IsSingleInstance = false
             Me.EnableVisualStyles = true
             Me.SaveMySettingsOnExit = true
             Me.ShutDownStyle = Global.Microsoft.VisualBasic.ApplicationServices.ShutdownMode.AfterMainFormCloses
         End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ImportProfile.xaml.cs" startline="141" endline="150">
<![CDATA[
 
         private void optFile_Checked(object sender, RoutedEventArgs e)
         {
             if (this.IsLoaded)
             {
                 txtText.IsEnabled = false;
                 txtFile.IsEnabled = true;
                 cmdOpen.IsEnabled = true;
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Append.vb" startline="494" endline="501">
<![CDATA[
 
     Private Sub RadioButton2_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs)
         lblBitrate.Visible = False
         txtBitrate.Visible = False
         chkFileSize.Enabled = True
         txtFileSize.Enabled = True
         cboFileSize.Enabled = True
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ImportProfile.xaml.cs" startline="141" endline="150">
<![CDATA[
 
         private void optFile_Checked(object sender, RoutedEventArgs e)
         {
             if (this.IsLoaded)
             {
                 txtText.IsEnabled = false;
                 txtFile.IsEnabled = true;
                 cmdOpen.IsEnabled = true;
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Edit.vb" startline="431" endline="438">
<![CDATA[
 	
     Sub OptCustomBitrateCheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles optCustomBitrate.CheckedChanged
         lblBitrate.Visible = True
         txtBitrate.Visible = True
         chkFileSize.Enabled = False
         txtFileSize.Enabled = False
         cboFileSize.Enabled = False
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ImportProfile.xaml.cs" startline="141" endline="150">
<![CDATA[
 
         private void optFile_Checked(object sender, RoutedEventArgs e)
         {
             if (this.IsLoaded)
             {
                 txtText.IsEnabled = false;
                 txtFile.IsEnabled = true;
                 cmdOpen.IsEnabled = true;
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Edit.vb" startline="439" endline="446">
<![CDATA[
 	
     Sub OptAutoBitrateCheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles optAutoBitrate.CheckedChanged
         lblBitrate.Visible = False
         txtBitrate.Visible = False
         chkFileSize.Enabled = True
         txtFileSize.Enabled = True
         cboFileSize.Enabled = True
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ImportProfile.xaml.cs" startline="141" endline="150">
<![CDATA[
 
         private void optFile_Checked(object sender, RoutedEventArgs e)
         {
             if (this.IsLoaded)
             {
                 txtText.IsEnabled = false;
                 txtFile.IsEnabled = true;
                 cmdOpen.IsEnabled = true;
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MainForm.vb" startline="235" endline="242">
<![CDATA[
 	
     Sub OptCustomBitrateCheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles optCustomBitrate.CheckedChanged
         lblBitrate.Visible = True
         txtBitrate.Visible = True
         chkFileSize.Enabled = False
         txtFileSize.Enabled = False
         cboFileSize.Enabled = False
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ImportProfile.xaml.cs" startline="141" endline="150">
<![CDATA[
 
         private void optFile_Checked(object sender, RoutedEventArgs e)
         {
             if (this.IsLoaded)
             {
                 txtText.IsEnabled = false;
                 txtFile.IsEnabled = true;
                 cmdOpen.IsEnabled = true;
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MainForm.vb" startline="243" endline="250">
<![CDATA[
 	
     Sub OptAutoBitrateCheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles optAutoBitrate.CheckedChanged
         lblBitrate.Visible = False
         txtBitrate.Visible = False
         chkFileSize.Enabled = True
         txtFileSize.Enabled = True
         cboFileSize.Enabled = True
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ImportProfile.xaml.cs" startline="141" endline="150">
<![CDATA[
 
         private void optFile_Checked(object sender, RoutedEventArgs e)
         {
             if (this.IsLoaded)
             {
                 txtText.IsEnabled = false;
                 txtFile.IsEnabled = true;
                 cmdOpen.IsEnabled = true;
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MainForm.vb" startline="4245" endline="4252">
<![CDATA[
 
     Sub OptionsToolStripMenuItemClick(ByVal sender As Object, ByVal e As EventArgs) Handles optionsToolStripMenuItem.Click
         Dim frmOptions As New Options
         frmOptions.Show()
         boolEdit = True
         Me.Enabled = False
         tmrOptions.Enabled = True
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ImportProfile.xaml.cs" startline="141" endline="150">
<![CDATA[
 
         private void optFile_Checked(object sender, RoutedEventArgs e)
         {
             if (this.IsLoaded)
             {
                 txtText.IsEnabled = false;
                 txtFile.IsEnabled = true;
                 cmdOpen.IsEnabled = true;
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MainForm.vb" startline="6143" endline="6151">
<![CDATA[
 
     Private Sub ImportProfileToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ImportProfileToolStripMenuItem.Click
         Dim frmImport As New ImportProfile
         profilecount = profilelist.Count
         frmImport.Show()
         boolEdit = True
         Me.Enabled = False
         tmrImport.enabled = True
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ImportProfile.xaml.cs" startline="141" endline="150">
<![CDATA[
 
         private void optFile_Checked(object sender, RoutedEventArgs e)
         {
             if (this.IsLoaded)
             {
                 txtText.IsEnabled = false;
                 txtFile.IsEnabled = true;
                 cmdOpen.IsEnabled = true;
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MainForm.vb" startline="6170" endline="6177">
<![CDATA[
 
     Private Sub ExportProfileToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ExportProfileToolStripMenuItem.Click
         Dim frmExport As New ExportProfile
         frmExport.Show()
         boolEdit = True
         Me.Enabled = False
         tmrImport.Enabled = True
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ImportProfile.xaml.cs" startline="141" endline="150">
<![CDATA[
 
         private void optFile_Checked(object sender, RoutedEventArgs e)
         {
             if (this.IsLoaded)
             {
                 txtText.IsEnabled = false;
                 txtFile.IsEnabled = true;
                 cmdOpen.IsEnabled = true;
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Wizard.vb" startline="2907" endline="2915">
<![CDATA[
 
     Private Sub ImportProfileToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ImportProfileToolStripMenuItem1.Click
         Dim frmImport As New ImportProfile
         profilecount = profilelist.Count
         frmImport.Show()
         boolEdit = True
         Me.Enabled = False
         tmrImport.Enabled = True
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ImportProfile.xaml.cs" startline="141" endline="150">
<![CDATA[
 
         private void optFile_Checked(object sender, RoutedEventArgs e)
         {
             if (this.IsLoaded)
             {
                 txtText.IsEnabled = false;
                 txtFile.IsEnabled = true;
                 cmdOpen.IsEnabled = true;
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Wizard.vb" startline="2934" endline="2941">
<![CDATA[
 
     Private Sub ExportProfileToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ExportProfileToolStripMenuItem1.Click
         Dim frmExport As New ExportProfile
         Me.Enabled = False
         frmExport.ShowDialog()
         Me.Enabled = True
 
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ImportProfile.xaml.cs" startline="141" endline="150">
<![CDATA[
 
         private void optFile_Checked(object sender, RoutedEventArgs e)
         {
             if (this.IsLoaded)
             {
                 txtText.IsEnabled = false;
                 txtFile.IsEnabled = true;
                 cmdOpen.IsEnabled = true;
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Wizard.vb" startline="2946" endline="2953">
<![CDATA[
 
     Private Sub OptionsToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles OptionsToolStripMenuItem.Click
         Dim frmOptions As New Options
         frmOptions.Show()
         boolEdit = True
         Me.Enabled = False
         tmrOptions.Enabled = True
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ImportProfile.xaml.cs" startline="141" endline="150">
<![CDATA[
 
         private void optFile_Checked(object sender, RoutedEventArgs e)
         {
             if (this.IsLoaded)
             {
                 txtText.IsEnabled = false;
                 txtFile.IsEnabled = true;
                 cmdOpen.IsEnabled = true;
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\x264.Designer.vb" startline="1884" endline="1981">
<![CDATA[
     Private WithEvents timer1 As System.Windows.Forms.Timer
     Private WithEvents saveFile As System.Windows.Forms.SaveFileDialog
     Private WithEvents lblBias As System.Windows.Forms.Label
     Private WithEvents lblBMode As System.Windows.Forms.Label
     Private WithEvents lblWeighted As System.Windows.Forms.Label
     Private WithEvents lblAdaptive As System.Windows.Forms.Label
     Private WithEvents lblnumBFrames As System.Windows.Forms.Label
     Private WithEvents lblTrellis As System.Windows.Forms.Label
     Private WithEvents lblRefFrames As System.Windows.Forms.Label
     Private WithEvents cmdCancel As System.Windows.Forms.Button
     Private WithEvents numBias As System.Windows.Forms.NumericUpDown
     Private WithEvents numQBlur As System.Windows.Forms.NumericUpDown
     Private WithEvents chkWeighted As System.Windows.Forms.CheckBox
     Private WithEvents cboBFrame As System.Windows.Forms.ComboBox
     Private WithEvents numBFrames As System.Windows.Forms.NumericUpDown
     Private WithEvents numChromaQP As System.Windows.Forms.NumericUpDown
     Private WithEvents numPandB As System.Windows.Forms.NumericUpDown
     Private WithEvents groupBox8 As System.Windows.Forms.GroupBox
     Private WithEvents label32 As System.Windows.Forms.Label
     Private WithEvents numIandP As System.Windows.Forms.NumericUpDown
     Private WithEvents numQuantDelta As System.Windows.Forms.NumericUpDown
     Private WithEvents label30 As System.Windows.Forms.Label
     Private WithEvents numMaxQuant As System.Windows.Forms.NumericUpDown
     Private WithEvents numMinQuant As System.Windows.Forms.NumericUpDown
     Private WithEvents label4 As System.Windows.Forms.Label
     Private WithEvents quantizers As System.Windows.Forms.GroupBox
     Private WithEvents chkB8x8 As System.Windows.Forms.CheckBox
     Private WithEvents chkI8x8 As System.Windows.Forms.CheckBox
     Private WithEvents chkP8x8 As System.Windows.Forms.CheckBox
     Private WithEvents chkADCT As System.Windows.Forms.CheckBox
     Private WithEvents chkI4x4 As System.Windows.Forms.CheckBox
     Private WithEvents chkP4x4 As System.Windows.Forms.CheckBox
     Private WithEvents numStrength As System.Windows.Forms.NumericUpDown
     Private WithEvents numThresh As System.Windows.Forms.NumericUpDown
     Private WithEvents groupBox6 As System.Windows.Forms.GroupBox
     Private WithEvents lblStrength As System.Windows.Forms.Label
     Private WithEvents lblThresh As System.Windows.Forms.Label
     Private WithEvents chkPSkip As System.Windows.Forms.CheckBox
     Private WithEvents label28 As System.Windows.Forms.Label
     Private WithEvents numRefFrames As System.Windows.Forms.NumericUpDown
     Private WithEvents chkMixedRef As System.Windows.Forms.CheckBox
     Private WithEvents lblmixed As System.Windows.Forms.Label
     Private WithEvents chkDCT As System.Windows.Forms.CheckBox
     Private WithEvents label27 As System.Windows.Forms.Label
     Private WithEvents cboTrellis As System.Windows.Forms.ComboBox
     Private WithEvents groupBox5 As System.Windows.Forms.GroupBox
     Private WithEvents cboSubPixel As System.Windows.Forms.ComboBox
     Private WithEvents label22 As System.Windows.Forms.Label
     Private WithEvents chkChromaME As System.Windows.Forms.CheckBox
     Private WithEvents label18 As System.Windows.Forms.Label
     Private WithEvents label19 As System.Windows.Forms.Label
     Private WithEvents numMERange As System.Windows.Forms.NumericUpDown
     Private WithEvents lblSceneCut As System.Windows.Forms.Label
     Private WithEvents numSceneChange As System.Windows.Forms.NumericUpDown
     Private WithEvents cboAlgorithm As System.Windows.Forms.ComboBox
     Private WithEvents label21 As System.Windows.Forms.Label
     Private WithEvents groupBox4 As System.Windows.Forms.GroupBox
     Private WithEvents txtNoise As System.Windows.Forms.TextBox
     Private WithEvents label16 As System.Windows.Forms.Label
     Private WithEvents chkInterlace As System.Windows.Forms.CheckBox
     Private WithEvents label17 As System.Windows.Forms.Label
     Private WithEvents label12 As System.Windows.Forms.Label
     Private WithEvents label13 As System.Windows.Forms.Label
     Private WithEvents label15 As System.Windows.Forms.Label
     Private WithEvents txtKeyframe As System.Windows.Forms.TextBox
     Private WithEvents txtMinGOP As System.Windows.Forms.TextBox
     Private WithEvents label14 As System.Windows.Forms.Label
     Private WithEvents label11 As System.Windows.Forms.Label
     Private WithEvents label10 As System.Windows.Forms.Label
     Private WithEvents numBlur As System.Windows.Forms.NumericUpDown
     Private WithEvents label9 As System.Windows.Forms.Label
     Private WithEvents numCompression As System.Windows.Forms.NumericUpDown
     Private WithEvents numVariance As System.Windows.Forms.NumericUpDown
     Private WithEvents label8 As System.Windows.Forms.Label
     Private WithEvents numBuffer As System.Windows.Forms.NumericUpDown
     Private WithEvents label6 As System.Windows.Forms.Label
     Private WithEvents txtBuffer As System.Windows.Forms.TextBox
     Private WithEvents label7 As System.Windows.Forms.Label
     Private WithEvents ratecontrol As System.Windows.Forms.GroupBox
     Private WithEvents chkDeblocking As System.Windows.Forms.CheckBox
     Private WithEvents label3 As System.Windows.Forms.Label
     Private WithEvents groupBox2 As System.Windows.Forms.GroupBox
     Private WithEvents groupBox1 As System.Windows.Forms.GroupBox
     Private WithEvents numThreads As System.Windows.Forms.NumericUpDown
     Private WithEvents label2 As System.Windows.Forms.Label
     Private WithEvents chkSSIM As System.Windows.Forms.CheckBox
     Private WithEvents chkPNSR As System.Windows.Forms.CheckBox
     Private WithEvents label1 As System.Windows.Forms.Label
     Private WithEvents txtLogFile As System.Windows.Forms.TextBox
     Private WithEvents cmdLogFile As System.Windows.Forms.Button
     Private WithEvents cmdOK As System.Windows.Forms.Button
     Private WithEvents pictureBox1 As System.Windows.Forms.PictureBox
 
 
 
     Sub NumRefFramesValueChanged(ByVal sender As Object, ByVal e As EventArgs)
         If numRefFrames.Value <= 1 Then chkMixedRef.Enabled = False Else chkMixedRef.Enabled = True
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ImportProfile.xaml.cs" startline="156" endline="162">
<![CDATA[
 
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\About.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ImportProfile.xaml.cs" startline="156" endline="162">
<![CDATA[
 
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\AVSWAV.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ImportProfile.xaml.cs" startline="156" endline="162">
<![CDATA[
 
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Checking.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ImportProfile.xaml.cs" startline="156" endline="162">
<![CDATA[
 
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Crop.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ImportProfile.xaml.cs" startline="156" endline="162">
<![CDATA[
 
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\ExportProfile.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ImportProfile.xaml.cs" startline="156" endline="162">
<![CDATA[
 
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\ImportProfile.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ImportProfile.xaml.cs" startline="156" endline="162">
<![CDATA[
 
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MPEG.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ImportProfile.xaml.cs" startline="156" endline="162">
<![CDATA[
 
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Options.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ImportProfile.xaml.cs" startline="156" endline="162">
<![CDATA[
 
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Player.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ImportProfile.xaml.cs" startline="156" endline="162">
<![CDATA[
 
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Profiles.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ImportProfile.xaml.cs" startline="156" endline="162">
<![CDATA[
 
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Testing.vb" startline="12" endline="19">
<![CDATA[
 	Public Sub New()
 	dim edittracklist as New List(Of track), currenttrack as Integer
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ImportProfile.xaml.cs" startline="156" endline="162">
<![CDATA[
 
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Updating.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ImportProfile.xaml.cs" startline="156" endline="162">
<![CDATA[
 
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\x264.vb" startline="12" endline="19">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\FirstLoad.xaml.cs" startline="53" endline="63">
<![CDATA[
 
         private void imgiPhone_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
         {
             device = 1;
             imgiPhone.Source = new BitmapImage(new Uri("Images/iPhone-check-highlight.png", UriKind.Relative));
             imgiPhone4.Source = new BitmapImage(new Uri("Images/iphone4.png", UriKind.Relative));
             imgPSP.Source = new BitmapImage(new Uri("Images/psp.png", UriKind.Relative));
             imgVita.Source = new BitmapImage(new Uri("Images/vita.png", UriKind.Relative));
             imgBlu.Source = new BitmapImage(new Uri("Images/blu.png", UriKind.Relative));
             cmdReset.Visibility = Visibility.Visible;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\My Project\Application.Designer.vb" startline="25" endline="31">
<![CDATA[
         Public Sub New()
             MyBase.New(Global.Microsoft.VisualBasic.ApplicationServices.AuthenticationMode.Windows)
             Me.IsSingleInstance = false
             Me.EnableVisualStyles = true
             Me.SaveMySettingsOnExit = true
             Me.ShutDownStyle = Global.Microsoft.VisualBasic.ApplicationServices.ShutdownMode.AfterMainFormCloses
         End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\FirstLoad.xaml.cs" startline="90" endline="100">
<![CDATA[
 
         private void imgiPhone4_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
         {
             device = 2;
             imgiPhone.Source = new BitmapImage(new Uri("Images/iPhone.png", UriKind.Relative));
             imgiPhone4.Source = new BitmapImage(new Uri("Images/iphone4-check-highlight.png", UriKind.Relative));
             imgPSP.Source = new BitmapImage(new Uri("Images/psp.png", UriKind.Relative));
             imgVita.Source = new BitmapImage(new Uri("Images/vita.png", UriKind.Relative));
             imgBlu.Source = new BitmapImage(new Uri("Images/blu.png", UriKind.Relative));
             cmdReset.Visibility = Visibility.Visible;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\My Project\Application.Designer.vb" startline="25" endline="31">
<![CDATA[
         Public Sub New()
             MyBase.New(Global.Microsoft.VisualBasic.ApplicationServices.AuthenticationMode.Windows)
             Me.IsSingleInstance = false
             Me.EnableVisualStyles = true
             Me.SaveMySettingsOnExit = true
             Me.ShutDownStyle = Global.Microsoft.VisualBasic.ApplicationServices.ShutdownMode.AfterMainFormCloses
         End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\FirstLoad.xaml.cs" startline="127" endline="137">
<![CDATA[
 
         private void imgPSP_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
         {
             device = 3;
             imgiPhone.Source = new BitmapImage(new Uri("Images/iPhone.png", UriKind.Relative));
             imgiPhone4.Source = new BitmapImage(new Uri("Images/iphone4.png", UriKind.Relative));
             imgPSP.Source = new BitmapImage(new Uri("Images/psp-check-highlight.png", UriKind.Relative));
             imgVita.Source = new BitmapImage(new Uri("Images/vita.png", UriKind.Relative));
             imgBlu.Source = new BitmapImage(new Uri("Images/blu.png", UriKind.Relative));
             cmdReset.Visibility = Visibility.Visible;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\My Project\Application.Designer.vb" startline="25" endline="31">
<![CDATA[
         Public Sub New()
             MyBase.New(Global.Microsoft.VisualBasic.ApplicationServices.AuthenticationMode.Windows)
             Me.IsSingleInstance = false
             Me.EnableVisualStyles = true
             Me.SaveMySettingsOnExit = true
             Me.ShutDownStyle = Global.Microsoft.VisualBasic.ApplicationServices.ShutdownMode.AfterMainFormCloses
         End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\FirstLoad.xaml.cs" startline="164" endline="174">
<![CDATA[
 
         private void imgBlu_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
         {
             device = 5;
             imgiPhone.Source = new BitmapImage(new Uri("Images/iPhone.png", UriKind.Relative));
             imgiPhone4.Source = new BitmapImage(new Uri("Images/iphone4.png", UriKind.Relative));
             imgPSP.Source = new BitmapImage(new Uri("Images/psp.png", UriKind.Relative));
             imgVita.Source = new BitmapImage(new Uri("Images/vita.png", UriKind.Relative));
             imgBlu.Source = new BitmapImage(new Uri("Images/blu-check-highlight.png", UriKind.Relative));
             cmdReset.Visibility = Visibility.Visible;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\My Project\Application.Designer.vb" startline="25" endline="31">
<![CDATA[
         Public Sub New()
             MyBase.New(Global.Microsoft.VisualBasic.ApplicationServices.AuthenticationMode.Windows)
             Me.IsSingleInstance = false
             Me.EnableVisualStyles = true
             Me.SaveMySettingsOnExit = true
             Me.ShutDownStyle = Global.Microsoft.VisualBasic.ApplicationServices.ShutdownMode.AfterMainFormCloses
         End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\FirstLoad.xaml.cs" startline="175" endline="185">
<![CDATA[
 
         private void cmdReset_Click(object sender, RoutedEventArgs e)
         {
             device = 0;
             cmdReset.Visibility = Visibility.Hidden;
             imgiPhone.Source = new BitmapImage(new Uri("Images/iPhone.png", UriKind.Relative));
             imgiPhone4.Source = new BitmapImage(new Uri("Images/iphone4.png", UriKind.Relative));
             imgPSP.Source = new BitmapImage(new Uri("Images/psp.png", UriKind.Relative));
             imgVita.Source = new BitmapImage(new Uri("Images/vita.png", UriKind.Relative));
             imgBlu.Source = new BitmapImage(new Uri("Images/blu.png", UriKind.Relative));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\My Project\Application.Designer.vb" startline="25" endline="31">
<![CDATA[
         Public Sub New()
             MyBase.New(Global.Microsoft.VisualBasic.ApplicationServices.AuthenticationMode.Windows)
             Me.IsSingleInstance = false
             Me.EnableVisualStyles = true
             Me.SaveMySettingsOnExit = true
             Me.ShutDownStyle = Global.Microsoft.VisualBasic.ApplicationServices.ShutdownMode.AfterMainFormCloses
         End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\FirstLoad.xaml.cs" startline="212" endline="222">
<![CDATA[
 
         private void imgVita_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
         {
             device = 4;
             imgiPhone.Source = new BitmapImage(new Uri("Images/iPhone.png", UriKind.Relative));
             imgiPhone4.Source = new BitmapImage(new Uri("Images/iphone4.png", UriKind.Relative));
             imgPSP.Source = new BitmapImage(new Uri("Images/psp.png", UriKind.Relative));
             imgVita.Source = new BitmapImage(new Uri("Images/vita-highlight-check.png", UriKind.Relative));
             imgBlu.Source = new BitmapImage(new Uri("Images/blu.png", UriKind.Relative));
             cmdReset.Visibility = Visibility.Visible;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\My Project\Application.Designer.vb" startline="25" endline="31">
<![CDATA[
         Public Sub New()
             MyBase.New(Global.Microsoft.VisualBasic.ApplicationServices.AuthenticationMode.Windows)
             Me.IsSingleInstance = false
             Me.EnableVisualStyles = true
             Me.SaveMySettingsOnExit = true
             Me.ShutDownStyle = Global.Microsoft.VisualBasic.ApplicationServices.ShutdownMode.AfterMainFormCloses
         End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ExportProfile.xaml.cs" startline="32" endline="44">
<![CDATA[
              if (slider.IsMouseOver || videoPreview.IsMouseOver)
              {
                  cmdPlay.Opacity = 1;
                  slider.Opacity = 1;
              }
              else
              {
                  if (!cmdPlay.IsMouseOver)
                  {
                      cmdPlay.Opacity = 0.1;
                      slider.Opacity = 0.1;
                  }
              {
                  if (!cmdPlay.IsMouseOver)
                  {
                      cmdPlay.Opacity = 0.1;
                      slider.Opacity = 0.1;
                  }
              }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\ProfileUpdater.vb" startline="741" endline="750">
<![CDATA[
 
     Sub UpdateProfiles()
         Dim pdir As String = appdir & "\Profiles.bak"
         For Each p As String In updating
             Dim prof As video = Profile_Change(p, pdir)
             Profile_save(prof)
         Next
         IO.File.Delete(pdir)
         Me.Close()
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ExportProfile.xaml.cs" startline="45" endline="51">
<![CDATA[
          }
 
 
 
 
 
 
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\About.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ExportProfile.xaml.cs" startline="45" endline="51">
<![CDATA[
          }
 
 
 
 
 
 
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\AVSWAV.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ExportProfile.xaml.cs" startline="45" endline="51">
<![CDATA[
          }
 
 
 
 
 
 
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Checking.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ExportProfile.xaml.cs" startline="45" endline="51">
<![CDATA[
          }
 
 
 
 
 
 
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Crop.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ExportProfile.xaml.cs" startline="45" endline="51">
<![CDATA[
          }
 
 
 
 
 
 
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\ExportProfile.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ExportProfile.xaml.cs" startline="45" endline="51">
<![CDATA[
          }
 
 
 
 
 
 
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\ImportProfile.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ExportProfile.xaml.cs" startline="45" endline="51">
<![CDATA[
          }
 
 
 
 
 
 
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MPEG.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ExportProfile.xaml.cs" startline="45" endline="51">
<![CDATA[
          }
 
 
 
 
 
 
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Options.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ExportProfile.xaml.cs" startline="45" endline="51">
<![CDATA[
          }
 
 
 
 
 
 
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Player.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ExportProfile.xaml.cs" startline="45" endline="51">
<![CDATA[
          }
 
 
 
 
 
 
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Profiles.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ExportProfile.xaml.cs" startline="45" endline="51">
<![CDATA[
          }
 
 
 
 
 
 
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Testing.vb" startline="12" endline="19">
<![CDATA[
 	Public Sub New()
 	dim edittracklist as New List(Of track), currenttrack as Integer
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ExportProfile.xaml.cs" startline="45" endline="51">
<![CDATA[
          }
 
 
 
 
 
 
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Updating.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ExportProfile.xaml.cs" startline="45" endline="51">
<![CDATA[
          }
 
 
 
 
 
 
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\x264.vb" startline="12" endline="19">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ExportProfile.xaml.cs" startline="94" endline="102">
<![CDATA[
         private IntPtr WndProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, ref bool handled)
         {
             if (msg == 0x031E)
             {
                 if (win6)
                 {
                     int aero = 0;
                     MainForm.DwmIsCompositionEnabled(ref aero);
                     win6 = (aero > 0);
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Append.vb" startline="456" endline="463">
<![CDATA[
     Sub Test_Videos()
         Dim frmtest As New Testing
         frmtest.Show()
         frmtest.Refresh()
         Do While frmtest.Visible
             Application.DoEvents()
         Loop
         Do While frmtest.Visible
             Application.DoEvents()
         Loop
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ExportProfile.xaml.cs" startline="94" endline="102">
<![CDATA[
         private IntPtr WndProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, ref bool handled)
         {
             if (msg == 0x031E)
             {
                 if (win6)
                 {
                     int aero = 0;
                     MainForm.DwmIsCompositionEnabled(ref aero);
                     win6 = (aero > 0);
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Append.vb" startline="520" endline="530">
<![CDATA[
 
     Private Sub lblAdvanced_LinkClicked(ByVal sender As System.Object, ByVal e As System.Windows.Forms.LinkLabelLinkClickedEventArgs) Handles lblAdvanced.LinkClicked
         Dim frmX264 As New x264
         Me.Enabled = False
         frmX264.Show()
         Do While frmX264.Visible
             Application.DoEvents()
         Loop
         Do While frmX264.Visible
             Application.DoEvents()
         Loop
         Me.Enabled = True
         Me.Focus()
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ExportProfile.xaml.cs" startline="94" endline="102">
<![CDATA[
         private IntPtr WndProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, ref bool handled)
         {
             if (msg == 0x031E)
             {
                 if (win6)
                 {
                     int aero = 0;
                     MainForm.DwmIsCompositionEnabled(ref aero);
                     win6 = (aero > 0);
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Edit.vb" startline="516" endline="526">
<![CDATA[
 	
     Sub LblAdvancedLinkClicked(ByVal sender As Object, ByVal e As LinkLabelLinkClickedEventArgs) Handles lblAdvanced.LinkClicked
         Dim frmX264 As New x264
         Me.Enabled = False
         frmX264.Show()
         Do While frmX264.Visible
             Application.DoEvents()
         Loop
         Do While frmX264.Visible
             Application.DoEvents()
         Loop
         Me.Enabled = True
         Me.Focus()
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ExportProfile.xaml.cs" startline="94" endline="102">
<![CDATA[
         private IntPtr WndProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, ref bool handled)
         {
             if (msg == 0x031E)
             {
                 if (win6)
                 {
                     int aero = 0;
                     MainForm.DwmIsCompositionEnabled(ref aero);
                     win6 = (aero > 0);
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MainForm.vb" startline="2420" endline="2431">
<![CDATA[
 
     Sub LblAdvancedLinkClicked(ByVal sender As Object, ByVal e As LinkLabelLinkClickedEventArgs) Handles lblAdvanced.LinkClicked
 
         Dim frmx264 As New x264
         Me.Enabled = False
         frmX264.Show()
         Do While frmX264.Visible
             Application.DoEvents()
         Loop
         Do While frmX264.Visible
             Application.DoEvents()
         Loop
         Me.Enabled = True
         Me.Focus()
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ExportProfile.xaml.cs" startline="94" endline="102">
<![CDATA[
         private IntPtr WndProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, ref bool handled)
         {
             if (msg == 0x031E)
             {
                 if (win6)
                 {
                     int aero = 0;
                     MainForm.DwmIsCompositionEnabled(ref aero);
                     win6 = (aero > 0);
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MainForm.vb" startline="4413" endline="4424">
<![CDATA[
 
     Sub Test_Videos()
         Dim frmtest As New Testing
         frmtest.Show()
         'Me.Enabled = False
         frmtest.Refresh()
         Do While frmtest.Visible
             Application.DoEvents()
         Loop
         Do While frmtest.Visible
             Application.DoEvents()
         Loop
         'Me.Enabled = True
         'Me.Select()
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ExportProfile.xaml.cs" startline="94" endline="102">
<![CDATA[
         private IntPtr WndProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, ref bool handled)
         {
             if (msg == 0x031E)
             {
                 if (win6)
                 {
                     int aero = 0;
                     MainForm.DwmIsCompositionEnabled(ref aero);
                     win6 = (aero > 0);
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Wizard.vb" startline="955" endline="966">
<![CDATA[
 
     Sub Test_Videos()
         Dim frmtest As New Testing
         frmtest.Show()
         'me.Enabled=false
         frmtest.Refresh()
         Do While frmtest.Visible
             Application.DoEvents()
         Loop
         Do While frmtest.Visible
             Application.DoEvents()
         Loop
         'Me.Enabled=True		
         'Me.Select
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ExportProfile.xaml.cs" startline="103" endline="109">
<![CDATA[
                     if (win6) this.Background = Brushes.Transparent; else this.Background = SystemColors.ControlBrush;
                     if (win6) MainForm.setGlass(this);
                 }
                 handled = true;
             }
             return IntPtr.Zero;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\My Project\Application.Designer.vb" startline="25" endline="31">
<![CDATA[
         Public Sub New()
             MyBase.New(Global.Microsoft.VisualBasic.ApplicationServices.AuthenticationMode.Windows)
             Me.IsSingleInstance = false
             Me.EnableVisualStyles = true
             Me.SaveMySettingsOnExit = true
             Me.ShutDownStyle = Global.Microsoft.VisualBasic.ApplicationServices.ShutdownMode.AfterMainFormCloses
         End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ExportProfile.xaml.cs" startline="103" endline="109">
<![CDATA[
                     if (win6) this.Background = Brushes.Transparent; else this.Background = SystemColors.ControlBrush;
                     if (win6) MainForm.setGlass(this);
                 }
                 handled = true;
             }
             return IntPtr.Zero;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\About.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ExportProfile.xaml.cs" startline="103" endline="109">
<![CDATA[
                     if (win6) this.Background = Brushes.Transparent; else this.Background = SystemColors.ControlBrush;
                     if (win6) MainForm.setGlass(this);
                 }
                 handled = true;
             }
             return IntPtr.Zero;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Append.vb" startline="494" endline="501">
<![CDATA[
 
     Private Sub RadioButton2_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs)
         lblBitrate.Visible = False
         txtBitrate.Visible = False
         chkFileSize.Enabled = True
         txtFileSize.Enabled = True
         cboFileSize.Enabled = True
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ExportProfile.xaml.cs" startline="103" endline="109">
<![CDATA[
                     if (win6) this.Background = Brushes.Transparent; else this.Background = SystemColors.ControlBrush;
                     if (win6) MainForm.setGlass(this);
                 }
                 handled = true;
             }
             return IntPtr.Zero;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\AVSWAV.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ExportProfile.xaml.cs" startline="103" endline="109">
<![CDATA[
                     if (win6) this.Background = Brushes.Transparent; else this.Background = SystemColors.ControlBrush;
                     if (win6) MainForm.setGlass(this);
                 }
                 handled = true;
             }
             return IntPtr.Zero;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Checking.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ExportProfile.xaml.cs" startline="103" endline="109">
<![CDATA[
                     if (win6) this.Background = Brushes.Transparent; else this.Background = SystemColors.ControlBrush;
                     if (win6) MainForm.setGlass(this);
                 }
                 handled = true;
             }
             return IntPtr.Zero;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Crop.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ExportProfile.xaml.cs" startline="103" endline="109">
<![CDATA[
                     if (win6) this.Background = Brushes.Transparent; else this.Background = SystemColors.ControlBrush;
                     if (win6) MainForm.setGlass(this);
                 }
                 handled = true;
             }
             return IntPtr.Zero;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Edit.vb" startline="431" endline="438">
<![CDATA[
 	
     Sub OptCustomBitrateCheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles optCustomBitrate.CheckedChanged
         lblBitrate.Visible = True
         txtBitrate.Visible = True
         chkFileSize.Enabled = False
         txtFileSize.Enabled = False
         cboFileSize.Enabled = False
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ExportProfile.xaml.cs" startline="103" endline="109">
<![CDATA[
                     if (win6) this.Background = Brushes.Transparent; else this.Background = SystemColors.ControlBrush;
                     if (win6) MainForm.setGlass(this);
                 }
                 handled = true;
             }
             return IntPtr.Zero;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Edit.vb" startline="439" endline="446">
<![CDATA[
 	
     Sub OptAutoBitrateCheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles optAutoBitrate.CheckedChanged
         lblBitrate.Visible = False
         txtBitrate.Visible = False
         chkFileSize.Enabled = True
         txtFileSize.Enabled = True
         cboFileSize.Enabled = True
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ExportProfile.xaml.cs" startline="103" endline="109">
<![CDATA[
                     if (win6) this.Background = Brushes.Transparent; else this.Background = SystemColors.ControlBrush;
                     if (win6) MainForm.setGlass(this);
                 }
                 handled = true;
             }
             return IntPtr.Zero;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MainForm.vb" startline="235" endline="242">
<![CDATA[
 	
     Sub OptCustomBitrateCheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles optCustomBitrate.CheckedChanged
         lblBitrate.Visible = True
         txtBitrate.Visible = True
         chkFileSize.Enabled = False
         txtFileSize.Enabled = False
         cboFileSize.Enabled = False
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ExportProfile.xaml.cs" startline="103" endline="109">
<![CDATA[
                     if (win6) this.Background = Brushes.Transparent; else this.Background = SystemColors.ControlBrush;
                     if (win6) MainForm.setGlass(this);
                 }
                 handled = true;
             }
             return IntPtr.Zero;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MainForm.vb" startline="243" endline="250">
<![CDATA[
 	
     Sub OptAutoBitrateCheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles optAutoBitrate.CheckedChanged
         lblBitrate.Visible = False
         txtBitrate.Visible = False
         chkFileSize.Enabled = True
         txtFileSize.Enabled = True
         cboFileSize.Enabled = True
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ExportProfile.xaml.cs" startline="103" endline="109">
<![CDATA[
                     if (win6) this.Background = Brushes.Transparent; else this.Background = SystemColors.ControlBrush;
                     if (win6) MainForm.setGlass(this);
                 }
                 handled = true;
             }
             return IntPtr.Zero;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MainForm.vb" startline="4245" endline="4252">
<![CDATA[
 
     Sub OptionsToolStripMenuItemClick(ByVal sender As Object, ByVal e As EventArgs) Handles optionsToolStripMenuItem.Click
         Dim frmOptions As New Options
         frmOptions.Show()
         boolEdit = True
         Me.Enabled = False
         tmrOptions.Enabled = True
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ExportProfile.xaml.cs" startline="103" endline="109">
<![CDATA[
                     if (win6) this.Background = Brushes.Transparent; else this.Background = SystemColors.ControlBrush;
                     if (win6) MainForm.setGlass(this);
                 }
                 handled = true;
             }
             return IntPtr.Zero;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MainForm.vb" startline="6143" endline="6151">
<![CDATA[
 
     Private Sub ImportProfileToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ImportProfileToolStripMenuItem.Click
         Dim frmImport As New ImportProfile
         profilecount = profilelist.Count
         frmImport.Show()
         boolEdit = True
         Me.Enabled = False
         tmrImport.enabled = True
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ExportProfile.xaml.cs" startline="103" endline="109">
<![CDATA[
                     if (win6) this.Background = Brushes.Transparent; else this.Background = SystemColors.ControlBrush;
                     if (win6) MainForm.setGlass(this);
                 }
                 handled = true;
             }
             return IntPtr.Zero;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MainForm.vb" startline="6170" endline="6177">
<![CDATA[
 
     Private Sub ExportProfileToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ExportProfileToolStripMenuItem.Click
         Dim frmExport As New ExportProfile
         frmExport.Show()
         boolEdit = True
         Me.Enabled = False
         tmrImport.Enabled = True
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ExportProfile.xaml.cs" startline="103" endline="109">
<![CDATA[
                     if (win6) this.Background = Brushes.Transparent; else this.Background = SystemColors.ControlBrush;
                     if (win6) MainForm.setGlass(this);
                 }
                 handled = true;
             }
             return IntPtr.Zero;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MPEG.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ExportProfile.xaml.cs" startline="103" endline="109">
<![CDATA[
                     if (win6) this.Background = Brushes.Transparent; else this.Background = SystemColors.ControlBrush;
                     if (win6) MainForm.setGlass(this);
                 }
                 handled = true;
             }
             return IntPtr.Zero;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Player.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ExportProfile.xaml.cs" startline="103" endline="109">
<![CDATA[
                     if (win6) this.Background = Brushes.Transparent; else this.Background = SystemColors.ControlBrush;
                     if (win6) MainForm.setGlass(this);
                 }
                 handled = true;
             }
             return IntPtr.Zero;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Wizard.vb" startline="2907" endline="2915">
<![CDATA[
 
     Private Sub ImportProfileToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ImportProfileToolStripMenuItem1.Click
         Dim frmImport As New ImportProfile
         profilecount = profilelist.Count
         frmImport.Show()
         boolEdit = True
         Me.Enabled = False
         tmrImport.Enabled = True
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ExportProfile.xaml.cs" startline="103" endline="109">
<![CDATA[
                     if (win6) this.Background = Brushes.Transparent; else this.Background = SystemColors.ControlBrush;
                     if (win6) MainForm.setGlass(this);
                 }
                 handled = true;
             }
             return IntPtr.Zero;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Wizard.vb" startline="2934" endline="2941">
<![CDATA[
 
     Private Sub ExportProfileToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ExportProfileToolStripMenuItem1.Click
         Dim frmExport As New ExportProfile
         Me.Enabled = False
         frmExport.ShowDialog()
         Me.Enabled = True
 
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ExportProfile.xaml.cs" startline="103" endline="109">
<![CDATA[
                     if (win6) this.Background = Brushes.Transparent; else this.Background = SystemColors.ControlBrush;
                     if (win6) MainForm.setGlass(this);
                 }
                 handled = true;
             }
             return IntPtr.Zero;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Wizard.vb" startline="2946" endline="2953">
<![CDATA[
 
     Private Sub OptionsToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles OptionsToolStripMenuItem.Click
         Dim frmOptions As New Options
         frmOptions.Show()
         boolEdit = True
         Me.Enabled = False
         tmrOptions.Enabled = True
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ExportProfile.xaml.cs" startline="110" endline="119">
<![CDATA[
 
         private void Window_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
         {
             this.DragMove();
         }
 
         private void Window_MouseDoubleClick(object sender, MouseButtonEventArgs e)
         {
             bool stop = false;
             if (cboSettings.IsMouseOver) stop = true;
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\My Project\Application.Designer.vb" startline="25" endline="31">
<![CDATA[
         Public Sub New()
             MyBase.New(Global.Microsoft.VisualBasic.ApplicationServices.AuthenticationMode.Windows)
             Me.IsSingleInstance = false
             Me.EnableVisualStyles = true
             Me.SaveMySettingsOnExit = true
             Me.ShutDownStyle = Global.Microsoft.VisualBasic.ApplicationServices.ShutdownMode.AfterMainFormCloses
         End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ExportProfile.xaml.cs" startline="110" endline="119">
<![CDATA[
 
         private void Window_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
         {
             this.DragMove();
         }
 
         private void Window_MouseDoubleClick(object sender, MouseButtonEventArgs e)
         {
             bool stop = false;
             if (cboSettings.IsMouseOver) stop = true;
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Append.vb" startline="494" endline="501">
<![CDATA[
 
     Private Sub RadioButton2_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs)
         lblBitrate.Visible = False
         txtBitrate.Visible = False
         chkFileSize.Enabled = True
         txtFileSize.Enabled = True
         cboFileSize.Enabled = True
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ExportProfile.xaml.cs" startline="110" endline="119">
<![CDATA[
 
         private void Window_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
         {
             this.DragMove();
         }
 
         private void Window_MouseDoubleClick(object sender, MouseButtonEventArgs e)
         {
             bool stop = false;
             if (cboSettings.IsMouseOver) stop = true;
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Edit.vb" startline="431" endline="438">
<![CDATA[
 	
     Sub OptCustomBitrateCheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles optCustomBitrate.CheckedChanged
         lblBitrate.Visible = True
         txtBitrate.Visible = True
         chkFileSize.Enabled = False
         txtFileSize.Enabled = False
         cboFileSize.Enabled = False
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ExportProfile.xaml.cs" startline="110" endline="119">
<![CDATA[
 
         private void Window_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
         {
             this.DragMove();
         }
 
         private void Window_MouseDoubleClick(object sender, MouseButtonEventArgs e)
         {
             bool stop = false;
             if (cboSettings.IsMouseOver) stop = true;
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Edit.vb" startline="439" endline="446">
<![CDATA[
 	
     Sub OptAutoBitrateCheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles optAutoBitrate.CheckedChanged
         lblBitrate.Visible = False
         txtBitrate.Visible = False
         chkFileSize.Enabled = True
         txtFileSize.Enabled = True
         cboFileSize.Enabled = True
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ExportProfile.xaml.cs" startline="110" endline="119">
<![CDATA[
 
         private void Window_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
         {
             this.DragMove();
         }
 
         private void Window_MouseDoubleClick(object sender, MouseButtonEventArgs e)
         {
             bool stop = false;
             if (cboSettings.IsMouseOver) stop = true;
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MainForm.vb" startline="235" endline="242">
<![CDATA[
 	
     Sub OptCustomBitrateCheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles optCustomBitrate.CheckedChanged
         lblBitrate.Visible = True
         txtBitrate.Visible = True
         chkFileSize.Enabled = False
         txtFileSize.Enabled = False
         cboFileSize.Enabled = False
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ExportProfile.xaml.cs" startline="110" endline="119">
<![CDATA[
 
         private void Window_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
         {
             this.DragMove();
         }
 
         private void Window_MouseDoubleClick(object sender, MouseButtonEventArgs e)
         {
             bool stop = false;
             if (cboSettings.IsMouseOver) stop = true;
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MainForm.vb" startline="243" endline="250">
<![CDATA[
 	
     Sub OptAutoBitrateCheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles optAutoBitrate.CheckedChanged
         lblBitrate.Visible = False
         txtBitrate.Visible = False
         chkFileSize.Enabled = True
         txtFileSize.Enabled = True
         cboFileSize.Enabled = True
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ExportProfile.xaml.cs" startline="110" endline="119">
<![CDATA[
 
         private void Window_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
         {
             this.DragMove();
         }
 
         private void Window_MouseDoubleClick(object sender, MouseButtonEventArgs e)
         {
             bool stop = false;
             if (cboSettings.IsMouseOver) stop = true;
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MainForm.vb" startline="4245" endline="4252">
<![CDATA[
 
     Sub OptionsToolStripMenuItemClick(ByVal sender As Object, ByVal e As EventArgs) Handles optionsToolStripMenuItem.Click
         Dim frmOptions As New Options
         frmOptions.Show()
         boolEdit = True
         Me.Enabled = False
         tmrOptions.Enabled = True
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ExportProfile.xaml.cs" startline="110" endline="119">
<![CDATA[
 
         private void Window_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
         {
             this.DragMove();
         }
 
         private void Window_MouseDoubleClick(object sender, MouseButtonEventArgs e)
         {
             bool stop = false;
             if (cboSettings.IsMouseOver) stop = true;
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MainForm.vb" startline="6143" endline="6151">
<![CDATA[
 
     Private Sub ImportProfileToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ImportProfileToolStripMenuItem.Click
         Dim frmImport As New ImportProfile
         profilecount = profilelist.Count
         frmImport.Show()
         boolEdit = True
         Me.Enabled = False
         tmrImport.enabled = True
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ExportProfile.xaml.cs" startline="110" endline="119">
<![CDATA[
 
         private void Window_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
         {
             this.DragMove();
         }
 
         private void Window_MouseDoubleClick(object sender, MouseButtonEventArgs e)
         {
             bool stop = false;
             if (cboSettings.IsMouseOver) stop = true;
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MainForm.vb" startline="6170" endline="6177">
<![CDATA[
 
     Private Sub ExportProfileToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ExportProfileToolStripMenuItem.Click
         Dim frmExport As New ExportProfile
         frmExport.Show()
         boolEdit = True
         Me.Enabled = False
         tmrImport.Enabled = True
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ExportProfile.xaml.cs" startline="110" endline="119">
<![CDATA[
 
         private void Window_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
         {
             this.DragMove();
         }
 
         private void Window_MouseDoubleClick(object sender, MouseButtonEventArgs e)
         {
             bool stop = false;
             if (cboSettings.IsMouseOver) stop = true;
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Wizard.vb" startline="2907" endline="2915">
<![CDATA[
 
     Private Sub ImportProfileToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ImportProfileToolStripMenuItem1.Click
         Dim frmImport As New ImportProfile
         profilecount = profilelist.Count
         frmImport.Show()
         boolEdit = True
         Me.Enabled = False
         tmrImport.Enabled = True
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ExportProfile.xaml.cs" startline="110" endline="119">
<![CDATA[
 
         private void Window_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
         {
             this.DragMove();
         }
 
         private void Window_MouseDoubleClick(object sender, MouseButtonEventArgs e)
         {
             bool stop = false;
             if (cboSettings.IsMouseOver) stop = true;
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Wizard.vb" startline="2934" endline="2941">
<![CDATA[
 
     Private Sub ExportProfileToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ExportProfileToolStripMenuItem1.Click
         Dim frmExport As New ExportProfile
         Me.Enabled = False
         frmExport.ShowDialog()
         Me.Enabled = True
 
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ExportProfile.xaml.cs" startline="110" endline="119">
<![CDATA[
 
         private void Window_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
         {
             this.DragMove();
         }
 
         private void Window_MouseDoubleClick(object sender, MouseButtonEventArgs e)
         {
             bool stop = false;
             if (cboSettings.IsMouseOver) stop = true;
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Wizard.vb" startline="2946" endline="2953">
<![CDATA[
 
     Private Sub OptionsToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles OptionsToolStripMenuItem.Click
         Dim frmOptions As New Options
         frmOptions.Show()
         boolEdit = True
         Me.Enabled = False
         tmrOptions.Enabled = True
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\ExportProfile.xaml.cs" startline="110" endline="119">
<![CDATA[
 
         private void Window_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
         {
             this.DragMove();
         }
 
         private void Window_MouseDoubleClick(object sender, MouseButtonEventArgs e)
         {
             bool stop = false;
             if (cboSettings.IsMouseOver) stop = true;
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\x264.Designer.vb" startline="1884" endline="1981">
<![CDATA[
     Private WithEvents timer1 As System.Windows.Forms.Timer
     Private WithEvents saveFile As System.Windows.Forms.SaveFileDialog
     Private WithEvents lblBias As System.Windows.Forms.Label
     Private WithEvents lblBMode As System.Windows.Forms.Label
     Private WithEvents lblWeighted As System.Windows.Forms.Label
     Private WithEvents lblAdaptive As System.Windows.Forms.Label
     Private WithEvents lblnumBFrames As System.Windows.Forms.Label
     Private WithEvents lblTrellis As System.Windows.Forms.Label
     Private WithEvents lblRefFrames As System.Windows.Forms.Label
     Private WithEvents cmdCancel As System.Windows.Forms.Button
     Private WithEvents numBias As System.Windows.Forms.NumericUpDown
     Private WithEvents numQBlur As System.Windows.Forms.NumericUpDown
     Private WithEvents chkWeighted As System.Windows.Forms.CheckBox
     Private WithEvents cboBFrame As System.Windows.Forms.ComboBox
     Private WithEvents numBFrames As System.Windows.Forms.NumericUpDown
     Private WithEvents numChromaQP As System.Windows.Forms.NumericUpDown
     Private WithEvents numPandB As System.Windows.Forms.NumericUpDown
     Private WithEvents groupBox8 As System.Windows.Forms.GroupBox
     Private WithEvents label32 As System.Windows.Forms.Label
     Private WithEvents numIandP As System.Windows.Forms.NumericUpDown
     Private WithEvents numQuantDelta As System.Windows.Forms.NumericUpDown
     Private WithEvents label30 As System.Windows.Forms.Label
     Private WithEvents numMaxQuant As System.Windows.Forms.NumericUpDown
     Private WithEvents numMinQuant As System.Windows.Forms.NumericUpDown
     Private WithEvents label4 As System.Windows.Forms.Label
     Private WithEvents quantizers As System.Windows.Forms.GroupBox
     Private WithEvents chkB8x8 As System.Windows.Forms.CheckBox
     Private WithEvents chkI8x8 As System.Windows.Forms.CheckBox
     Private WithEvents chkP8x8 As System.Windows.Forms.CheckBox
     Private WithEvents chkADCT As System.Windows.Forms.CheckBox
     Private WithEvents chkI4x4 As System.Windows.Forms.CheckBox
     Private WithEvents chkP4x4 As System.Windows.Forms.CheckBox
     Private WithEvents numStrength As System.Windows.Forms.NumericUpDown
     Private WithEvents numThresh As System.Windows.Forms.NumericUpDown
     Private WithEvents groupBox6 As System.Windows.Forms.GroupBox
     Private WithEvents lblStrength As System.Windows.Forms.Label
     Private WithEvents lblThresh As System.Windows.Forms.Label
     Private WithEvents chkPSkip As System.Windows.Forms.CheckBox
     Private WithEvents label28 As System.Windows.Forms.Label
     Private WithEvents numRefFrames As System.Windows.Forms.NumericUpDown
     Private WithEvents chkMixedRef As System.Windows.Forms.CheckBox
     Private WithEvents lblmixed As System.Windows.Forms.Label
     Private WithEvents chkDCT As System.Windows.Forms.CheckBox
     Private WithEvents label27 As System.Windows.Forms.Label
     Private WithEvents cboTrellis As System.Windows.Forms.ComboBox
     Private WithEvents groupBox5 As System.Windows.Forms.GroupBox
     Private WithEvents cboSubPixel As System.Windows.Forms.ComboBox
     Private WithEvents label22 As System.Windows.Forms.Label
     Private WithEvents chkChromaME As System.Windows.Forms.CheckBox
     Private WithEvents label18 As System.Windows.Forms.Label
     Private WithEvents label19 As System.Windows.Forms.Label
     Private WithEvents numMERange As System.Windows.Forms.NumericUpDown
     Private WithEvents lblSceneCut As System.Windows.Forms.Label
     Private WithEvents numSceneChange As System.Windows.Forms.NumericUpDown
     Private WithEvents cboAlgorithm As System.Windows.Forms.ComboBox
     Private WithEvents label21 As System.Windows.Forms.Label
     Private WithEvents groupBox4 As System.Windows.Forms.GroupBox
     Private WithEvents txtNoise As System.Windows.Forms.TextBox
     Private WithEvents label16 As System.Windows.Forms.Label
     Private WithEvents chkInterlace As System.Windows.Forms.CheckBox
     Private WithEvents label17 As System.Windows.Forms.Label
     Private WithEvents label12 As System.Windows.Forms.Label
     Private WithEvents label13 As System.Windows.Forms.Label
     Private WithEvents label15 As System.Windows.Forms.Label
     Private WithEvents txtKeyframe As System.Windows.Forms.TextBox
     Private WithEvents txtMinGOP As System.Windows.Forms.TextBox
     Private WithEvents label14 As System.Windows.Forms.Label
     Private WithEvents label11 As System.Windows.Forms.Label
     Private WithEvents label10 As System.Windows.Forms.Label
     Private WithEvents numBlur As System.Windows.Forms.NumericUpDown
     Private WithEvents label9 As System.Windows.Forms.Label
     Private WithEvents numCompression As System.Windows.Forms.NumericUpDown
     Private WithEvents numVariance As System.Windows.Forms.NumericUpDown
     Private WithEvents label8 As System.Windows.Forms.Label
     Private WithEvents numBuffer As System.Windows.Forms.NumericUpDown
     Private WithEvents label6 As System.Windows.Forms.Label
     Private WithEvents txtBuffer As System.Windows.Forms.TextBox
     Private WithEvents label7 As System.Windows.Forms.Label
     Private WithEvents ratecontrol As System.Windows.Forms.GroupBox
     Private WithEvents chkDeblocking As System.Windows.Forms.CheckBox
     Private WithEvents label3 As System.Windows.Forms.Label
     Private WithEvents groupBox2 As System.Windows.Forms.GroupBox
     Private WithEvents groupBox1 As System.Windows.Forms.GroupBox
     Private WithEvents numThreads As System.Windows.Forms.NumericUpDown
     Private WithEvents label2 As System.Windows.Forms.Label
     Private WithEvents chkSSIM As System.Windows.Forms.CheckBox
     Private WithEvents chkPNSR As System.Windows.Forms.CheckBox
     Private WithEvents label1 As System.Windows.Forms.Label
     Private WithEvents txtLogFile As System.Windows.Forms.TextBox
     Private WithEvents cmdLogFile As System.Windows.Forms.Button
     Private WithEvents cmdOK As System.Windows.Forms.Button
     Private WithEvents pictureBox1 As System.Windows.Forms.PictureBox
 
 
 
     Sub NumRefFramesValueChanged(ByVal sender As Object, ByVal e As EventArgs)
         If numRefFrames.Value <= 1 Then chkMixedRef.Enabled = False Else chkMixedRef.Enabled = True
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\MainForm.xaml.cs" startline="545" endline="552">
<![CDATA[
 
 
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\About.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\MainForm.xaml.cs" startline="545" endline="552">
<![CDATA[
 
 
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\AVSWAV.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\MainForm.xaml.cs" startline="545" endline="552">
<![CDATA[
 
 
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Checking.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\MainForm.xaml.cs" startline="545" endline="552">
<![CDATA[
 
 
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Crop.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\MainForm.xaml.cs" startline="545" endline="552">
<![CDATA[
 
 
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\ExportProfile.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\MainForm.xaml.cs" startline="545" endline="552">
<![CDATA[
 
 
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\ImportProfile.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\MainForm.xaml.cs" startline="545" endline="552">
<![CDATA[
 
 
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MPEG.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\MainForm.xaml.cs" startline="545" endline="552">
<![CDATA[
 
 
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Options.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\MainForm.xaml.cs" startline="545" endline="552">
<![CDATA[
 
 
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Player.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\MainForm.xaml.cs" startline="545" endline="552">
<![CDATA[
 
 
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Profiles.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\MainForm.xaml.cs" startline="545" endline="552">
<![CDATA[
 
 
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Testing.vb" startline="12" endline="19">
<![CDATA[
 	Public Sub New()
 	dim edittracklist as New List(Of track), currenttrack as Integer
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\MainForm.xaml.cs" startline="545" endline="552">
<![CDATA[
 
 
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Updating.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\MainForm.xaml.cs" startline="545" endline="552">
<![CDATA[
 
 
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\x264.vb" startline="12" endline="19">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\MainForm.xaml.cs" startline="567" endline="697">
<![CDATA[
 
         public static video Set_defaults(video editvid)
         {
             editvid.MKV = false;
             editvid.iPod = false;
             editvid.remuxaudio = false;
             editvid.passes = 2;
             editvid.CQ = false;
             editvid.quality = 0;
             editvid.CustomSize = false;
             editvid.UseAspect = false;
             editvid.aspectRatio = 16 / 9;
             editvid.customX = 0;
             editvid.customY = 0;
             editvid.MaxSize = false;
             editvid.maxX = 0;
             editvid.maxY = 0;
             editvid.autocrop = false;
             editvid.CustomCrop = false;
             editvid.cropL = 0;
             editvid.cropR = 0;
             editvid.cropT = 0;
             editvid.cropB = 0;
             editvid.Deinterlace = false;
             editvid.DoubleFPS = false;
             editvid.fieldorder = "TFF";
             editvid.CustomBitrate = false;
             editvid.CustomABitrate = false;
             editvid.aBitrate = 192;
             editvid.vBitrate = 0;
             editvid.Downmix = false;
             editvid.EnforceProfile = false;
             editvid.x264profile = "High";
             editvid.x264level = 0;
             editvid.usemaxrate = false;
             editvid.maxBitrate = 0;
             editvid.usetargetsize = false;
             editvid.changefps = false;
             editvid.customFPS = 23.976;
             editvid.filesize = 0;
             editvid.filesizebytes = "MiB";
             editvid.directshow = false;
             editvid.upscale = false;
             editvid.AAC = false;
             editvid.blackbars = false;
             editvid.UseOAspect = false;
             editvid.oAspect = 16 / 9;
             editvid.NoResize = false;
             editvid.NoAudio = false;
             editvid.usesubs = false;
             editvid.fastpass1 = false;
             editvid.remuxvideo = false;
             editvid.ADirectshow = false;
             editvid.bluray = false;
             editvid.AACMode = 0;
             editvid.forcesample = false;
             editvid.outputsample = 48000;
             editvid.fpspitch = true;
 
             editvid.deblocking = true;
             editvid.chroma = true;
             editvid.pyramid = 2;
             editvid.rdo = true;
             editvid.weighted = true;
             editvid.bidirectional = true;
             editvid.adct = true;
             editvid.i4x4 = true;
             editvid.p4x4 = true;
             editvid.i8x8 = true;
             editvid.p8x8 = true;
             editvid.b8x8 = true;
             editvid.pnsr = false;
             editvid.ssim = false;
             editvid.interlaced = false;
             editvid.mixed = true;
             editvid.cabac = true;
             editvid.dct = false;
             editvid.pskip = true;
             editvid.strength = 0;
             editvid.thresh = 0;
             editvid.buffer = 0;
             editvid.blur = 20;
             editvid.range = 24;
             editvid.scene = 40;
             editvid.minQ = 1;
             editvid.maxQ = 51;
             editvid.maxQD = 4;
             editvid.chromaQP = 0;
             editvid.bframes = 3;
             editvid.bias = 0;
             editvid.keyframe = 250;
             editvid.gop = 25;
             editvid.noise = 0;
             editvid.threads = 0;
             editvid.refframes = 3;
             editvid.aqmode = 1;
             editvid.algorithm = 1;
             editvid.subpixel = 6;
             editvid.bmode = 1;
             editvid.trellis = 1;
             editvid.adaptive = 1;
             editvid.inter = 21;
             editvid.intra = 11;
             editvid.ibuffer = 0.9;
             editvid.variance = 1;
             editvid.QC = 0.6;
             editvid.blurq = 0.5;
             editvid.iandp = 1.4;
             editvid.pandb = 1.3;
             editvid.psyrd = 1;
             editvid.psytrellis = 0;
             editvid.stats = "video.stats";
             editvid.aqstrength = 1;
             editvid.fullrange = false;
             editvid.partitions = "All";
             editvid.lookahead = 40;
             editvid.mbtree = true;
             editvid.psychovisual = false;
             editvid.preset = 4;
             editvid.tuning = "Default";
             editvid.custom = "";
             editvid.slices = 0;
             editvid.maxslice = 0;
             editvid.maxslicembs = 0;
             editvid.weightp = 2;
             editvid.scenecut = true;
             editvid.aud = false;
             editvid.nalhrd = false;
 
             return editvid;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Append.vb" startline="1165" endline="1292">
<![CDATA[
 
     Sub Set_defaults()
         editVid.MKV = False
         editVid.iPod = False
         editVid.remuxaudio = False
         editVid.onepass = False
         editVid.CQ = False
         editVid.Quality = 0
         editVid.CustomSize = False
         editVid.UseAspect = False
         editVid.AspectRatio = 16 / 9
         editVid.CustomX = 0
         editVid.CustomY = 0
         editVid.MaxSize = False
         editVid.MaxX = 0
         editVid.MaxY = 0
         editVid.autocrop = False
         editVid.CustomCrop = False
         editVid.CropL = 0
         editVid.CropR = 0
         editVid.CropT = 0
         editVid.CropB = 0
         editVid.Deinterlace = False
         editVid.DoubleFPS = False
         editVid.fieldorder = "TFF"
         editVid.CustomBitrate = False
         editVid.CustomABitrate = False
         editVid.ABitrate = 192
         editVid.VBitrate = 0
         editVid.Downmix = False
         editVid.EnforceProfile = False
         editVid.X264Profile = "High"
         editVid.x264level = 0
         editVid.usemaxrate = False
         editVid.maxbitrate = 0
         editVid.usetargetsize = False
         editVid.changefps = False
         editVid.customfps = 23.976
         editVid.filesize = 0
         editVid.filesizebytes = "MiB"
         editVid.directshow = False
         editVid.upscale = False
         editVid.AAC = False
         editVid.blackbars = False
         editVid.UseOAspect = False
         editVid.OAspect = 16 / 9
         editVid.NoResize = False
         editVid.NoAudio = False
         editVid.usesubs = False
         editVid.fastpass1 = False
         editVid.remuxvideo = False
         editVid.ADirectshow = False
         editVid.bluray = False
         editVid.AACMode = 0
         editVid.forcesample = False
         editVid.samplerate = 48000
 
         editVid.deblocking = True
         editVid.chroma = True
         editVid.pyramid = 2
         editVid.rdo = True
         editVid.weighted = True
         editVid.bidirectional = True
         editVid.adct = True
         editVid.i4x4 = True
         editVid.p4x4 = True
         editVid.i8x8 = True
         editVid.p8x8 = True
         editVid.b8x8 = True
         editVid.pnsr = False
         editVid.ssim = False
         editVid.interlaced = False
         editVid.mixed = True
         editVid.cabac = True
         editVid.dct = False
         editVid.pskip = True
         editVid.fullrange = False
         editVid.strength = 0
         editVid.thresh = 0
         editVid.buffer = 0
         editVid.blur = 20
         editVid.range = 24
         editVid.scene = 40
         editVid.minQ = 1
         editVid.maxQ = 51
         editVid.MaxQD = 4
         editVid.chromaQP = 0
         editVid.bframes = 3
         editVid.bias = 0
         editVid.keyframe = 250
         editVid.gop = 25
         editVid.noise = 0
         editVid.threads = 0
         editVid.refframes = 3
         editVid.aqmode = 1
         editVid.algorithm = 1
         editVid.subpixel = 6
         editVid.bmode = 1
         editVid.trellis = 1
         editVid.adaptive = 1
         editVid.inter = 21
         editVid.intra = 11
         editVid.ibuffer = 0.9
         editVid.variance = 1
         editVid.QC = 0.6
         editVid.blurq = 0.5
         editVid.iandp = 1.4
         editVid.pandb = 1.3
         editVid.psyrd = 1
         editVid.psytrellis = 0
         editVid.stats = "video.stats"
         editVid.aqstrength = 1
         editVid.fullrange = False
         editVid.partitions = "All"
         editVid.lookahead = 40
         editVid.mbtree = True
         editVid.psychovisual = False
         editVid.preset = 4
         editVid.tuning = "Default"
         editVid.custom = ""
         editVid.slices = 0
         editVid.maxslice = 0
         editVid.maxslicembs = 0
         editVid.weightp = 2
         editVid.scenecut = True
         editVid.aud = False
         editVid.nalhrd = False
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\MainForm.xaml.cs" startline="567" endline="697">
<![CDATA[
 
         public static video Set_defaults(video editvid)
         {
             editvid.MKV = false;
             editvid.iPod = false;
             editvid.remuxaudio = false;
             editvid.passes = 2;
             editvid.CQ = false;
             editvid.quality = 0;
             editvid.CustomSize = false;
             editvid.UseAspect = false;
             editvid.aspectRatio = 16 / 9;
             editvid.customX = 0;
             editvid.customY = 0;
             editvid.MaxSize = false;
             editvid.maxX = 0;
             editvid.maxY = 0;
             editvid.autocrop = false;
             editvid.CustomCrop = false;
             editvid.cropL = 0;
             editvid.cropR = 0;
             editvid.cropT = 0;
             editvid.cropB = 0;
             editvid.Deinterlace = false;
             editvid.DoubleFPS = false;
             editvid.fieldorder = "TFF";
             editvid.CustomBitrate = false;
             editvid.CustomABitrate = false;
             editvid.aBitrate = 192;
             editvid.vBitrate = 0;
             editvid.Downmix = false;
             editvid.EnforceProfile = false;
             editvid.x264profile = "High";
             editvid.x264level = 0;
             editvid.usemaxrate = false;
             editvid.maxBitrate = 0;
             editvid.usetargetsize = false;
             editvid.changefps = false;
             editvid.customFPS = 23.976;
             editvid.filesize = 0;
             editvid.filesizebytes = "MiB";
             editvid.directshow = false;
             editvid.upscale = false;
             editvid.AAC = false;
             editvid.blackbars = false;
             editvid.UseOAspect = false;
             editvid.oAspect = 16 / 9;
             editvid.NoResize = false;
             editvid.NoAudio = false;
             editvid.usesubs = false;
             editvid.fastpass1 = false;
             editvid.remuxvideo = false;
             editvid.ADirectshow = false;
             editvid.bluray = false;
             editvid.AACMode = 0;
             editvid.forcesample = false;
             editvid.outputsample = 48000;
             editvid.fpspitch = true;
 
             editvid.deblocking = true;
             editvid.chroma = true;
             editvid.pyramid = 2;
             editvid.rdo = true;
             editvid.weighted = true;
             editvid.bidirectional = true;
             editvid.adct = true;
             editvid.i4x4 = true;
             editvid.p4x4 = true;
             editvid.i8x8 = true;
             editvid.p8x8 = true;
             editvid.b8x8 = true;
             editvid.pnsr = false;
             editvid.ssim = false;
             editvid.interlaced = false;
             editvid.mixed = true;
             editvid.cabac = true;
             editvid.dct = false;
             editvid.pskip = true;
             editvid.strength = 0;
             editvid.thresh = 0;
             editvid.buffer = 0;
             editvid.blur = 20;
             editvid.range = 24;
             editvid.scene = 40;
             editvid.minQ = 1;
             editvid.maxQ = 51;
             editvid.maxQD = 4;
             editvid.chromaQP = 0;
             editvid.bframes = 3;
             editvid.bias = 0;
             editvid.keyframe = 250;
             editvid.gop = 25;
             editvid.noise = 0;
             editvid.threads = 0;
             editvid.refframes = 3;
             editvid.aqmode = 1;
             editvid.algorithm = 1;
             editvid.subpixel = 6;
             editvid.bmode = 1;
             editvid.trellis = 1;
             editvid.adaptive = 1;
             editvid.inter = 21;
             editvid.intra = 11;
             editvid.ibuffer = 0.9;
             editvid.variance = 1;
             editvid.QC = 0.6;
             editvid.blurq = 0.5;
             editvid.iandp = 1.4;
             editvid.pandb = 1.3;
             editvid.psyrd = 1;
             editvid.psytrellis = 0;
             editvid.stats = "video.stats";
             editvid.aqstrength = 1;
             editvid.fullrange = false;
             editvid.partitions = "All";
             editvid.lookahead = 40;
             editvid.mbtree = true;
             editvid.psychovisual = false;
             editvid.preset = 4;
             editvid.tuning = "Default";
             editvid.custom = "";
             editvid.slices = 0;
             editvid.maxslice = 0;
             editvid.maxslicembs = 0;
             editvid.weightp = 2;
             editvid.scenecut = true;
             editvid.aud = false;
             editvid.nalhrd = false;
 
             return editvid;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Edit.vb" startline="3581" endline="3707">
<![CDATA[
     Sub Set_defaults()
         editVid.MKV = False
         editVid.iPod = False
         editVid.remuxaudio = False
         editVid.onepass = False
         editVid.CQ = False
         editVid.Quality = 0
         editVid.CustomSize = False
         editVid.UseAspect = False
         editVid.AspectRatio = 16 / 9
         editVid.CustomX = 0
         editVid.CustomY = 0
         editVid.MaxSize = False
         editVid.MaxX = 0
         editVid.MaxY = 0
         editVid.autocrop = False
         editVid.CustomCrop = False
         editVid.CropL = 0
         editVid.CropR = 0
         editVid.CropT = 0
         editVid.CropB = 0
         editVid.Deinterlace = False
         editVid.DoubleFPS = False
         editVid.fieldorder = "TFF"
         editVid.CustomBitrate = False
         editVid.CustomABitrate = False
         editVid.ABitrate = 192
         editVid.VBitrate = 0
         editVid.Downmix = False
         editVid.EnforceProfile = False
         editVid.X264Profile = "High"
         editVid.x264level = 0
         editVid.usemaxrate = False
         editVid.maxbitrate = 0
         editVid.usetargetsize = False
         editVid.changefps = False
         editVid.customfps = 23.976
         editVid.filesize = 0
         editVid.filesizebytes = "MiB"
         editVid.directshow = False
         editVid.upscale = False
         editVid.AAC = False
         editVid.blackbars = False
         editVid.UseOAspect = False
         editVid.OAspect = 16 / 9
         editVid.NoResize = False
         editVid.NoAudio = False
         editVid.usesubs = False
         editVid.fastpass1 = False
         editVid.remuxvideo = False
         editVid.ADirectshow = False
         editVid.bluray = False
         editVid.AACMode = 0
         editVid.forcesample = False
         editVid.samplerate = 48000
 
         editVid.deblocking = True
         editVid.chroma = True
         editVid.pyramid = 2
         editVid.rdo = True
         editVid.weighted = True
         editVid.bidirectional = True
         editVid.adct = True
         editVid.i4x4 = True
         editVid.p4x4 = True
         editVid.i8x8 = True
         editVid.p8x8 = True
         editVid.b8x8 = True
         editVid.pnsr = False
         editVid.ssim = False
         editVid.interlaced = False
         editVid.mixed = True
         editVid.cabac = True
         editVid.dct = False
         editVid.pskip = True
         editVid.fullrange = False
         editVid.strength = 0
         editVid.thresh = 0
         editVid.buffer = 0
         editVid.blur = 20
         editVid.range = 24
         editVid.scene = 40
         editVid.minQ = 1
         editVid.maxQ = 51
         editVid.MaxQD = 4
         editVid.chromaQP = 0
         editVid.bframes = 3
         editVid.bias = 0
         editVid.keyframe = 250
         editVid.gop = 25
         editVid.noise = 0
         editVid.threads = 0
         editVid.refframes = 3
         editVid.aqmode = 1
         editVid.algorithm = 1
         editVid.subpixel = 6
         editVid.bmode = 1
         editVid.trellis = 1
         editVid.adaptive = 1
         editVid.inter = 21
         editVid.intra = 11
         editVid.ibuffer = 0.9
         editVid.variance = 1
         editVid.QC = 0.6
         editVid.blurq = 0.5
         editVid.iandp = 1.4
         editVid.pandb = 1.3
         editVid.psyrd = 1
         editVid.psytrellis = 0
         editVid.stats = "video.stats"
         editVid.aqstrength = 1
         editVid.fullrange = False
         editVid.partitions = "All"
         editVid.lookahead = 40
         editVid.mbtree = True
         editVid.psychovisual = False
         editVid.preset = 4
         editVid.tuning = "Default"
         editVid.custom = ""
         editVid.slices = 0
         editVid.maxslice = 0
         editVid.maxslicembs = 0
         editVid.weightp = 2
         editVid.scenecut = True
         editVid.aud = False
         editVid.nalhrd = False
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\MainForm.xaml.cs" startline="567" endline="697">
<![CDATA[
 
         public static video Set_defaults(video editvid)
         {
             editvid.MKV = false;
             editvid.iPod = false;
             editvid.remuxaudio = false;
             editvid.passes = 2;
             editvid.CQ = false;
             editvid.quality = 0;
             editvid.CustomSize = false;
             editvid.UseAspect = false;
             editvid.aspectRatio = 16 / 9;
             editvid.customX = 0;
             editvid.customY = 0;
             editvid.MaxSize = false;
             editvid.maxX = 0;
             editvid.maxY = 0;
             editvid.autocrop = false;
             editvid.CustomCrop = false;
             editvid.cropL = 0;
             editvid.cropR = 0;
             editvid.cropT = 0;
             editvid.cropB = 0;
             editvid.Deinterlace = false;
             editvid.DoubleFPS = false;
             editvid.fieldorder = "TFF";
             editvid.CustomBitrate = false;
             editvid.CustomABitrate = false;
             editvid.aBitrate = 192;
             editvid.vBitrate = 0;
             editvid.Downmix = false;
             editvid.EnforceProfile = false;
             editvid.x264profile = "High";
             editvid.x264level = 0;
             editvid.usemaxrate = false;
             editvid.maxBitrate = 0;
             editvid.usetargetsize = false;
             editvid.changefps = false;
             editvid.customFPS = 23.976;
             editvid.filesize = 0;
             editvid.filesizebytes = "MiB";
             editvid.directshow = false;
             editvid.upscale = false;
             editvid.AAC = false;
             editvid.blackbars = false;
             editvid.UseOAspect = false;
             editvid.oAspect = 16 / 9;
             editvid.NoResize = false;
             editvid.NoAudio = false;
             editvid.usesubs = false;
             editvid.fastpass1 = false;
             editvid.remuxvideo = false;
             editvid.ADirectshow = false;
             editvid.bluray = false;
             editvid.AACMode = 0;
             editvid.forcesample = false;
             editvid.outputsample = 48000;
             editvid.fpspitch = true;
 
             editvid.deblocking = true;
             editvid.chroma = true;
             editvid.pyramid = 2;
             editvid.rdo = true;
             editvid.weighted = true;
             editvid.bidirectional = true;
             editvid.adct = true;
             editvid.i4x4 = true;
             editvid.p4x4 = true;
             editvid.i8x8 = true;
             editvid.p8x8 = true;
             editvid.b8x8 = true;
             editvid.pnsr = false;
             editvid.ssim = false;
             editvid.interlaced = false;
             editvid.mixed = true;
             editvid.cabac = true;
             editvid.dct = false;
             editvid.pskip = true;
             editvid.strength = 0;
             editvid.thresh = 0;
             editvid.buffer = 0;
             editvid.blur = 20;
             editvid.range = 24;
             editvid.scene = 40;
             editvid.minQ = 1;
             editvid.maxQ = 51;
             editvid.maxQD = 4;
             editvid.chromaQP = 0;
             editvid.bframes = 3;
             editvid.bias = 0;
             editvid.keyframe = 250;
             editvid.gop = 25;
             editvid.noise = 0;
             editvid.threads = 0;
             editvid.refframes = 3;
             editvid.aqmode = 1;
             editvid.algorithm = 1;
             editvid.subpixel = 6;
             editvid.bmode = 1;
             editvid.trellis = 1;
             editvid.adaptive = 1;
             editvid.inter = 21;
             editvid.intra = 11;
             editvid.ibuffer = 0.9;
             editvid.variance = 1;
             editvid.QC = 0.6;
             editvid.blurq = 0.5;
             editvid.iandp = 1.4;
             editvid.pandb = 1.3;
             editvid.psyrd = 1;
             editvid.psytrellis = 0;
             editvid.stats = "video.stats";
             editvid.aqstrength = 1;
             editvid.fullrange = false;
             editvid.partitions = "All";
             editvid.lookahead = 40;
             editvid.mbtree = true;
             editvid.psychovisual = false;
             editvid.preset = 4;
             editvid.tuning = "Default";
             editvid.custom = "";
             editvid.slices = 0;
             editvid.maxslice = 0;
             editvid.maxslicembs = 0;
             editvid.weightp = 2;
             editvid.scenecut = true;
             editvid.aud = false;
             editvid.nalhrd = false;
 
             return editvid;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MainForm.vb" startline="6373" endline="6499">
<![CDATA[
     Sub Set_defaults()
         editVid.MKV = False
         editVid.iPod = False
         editVid.remuxaudio = False
         editVid.onepass = False
         editVid.CQ = False
         editVid.Quality = 0
         editVid.CustomSize = False
         editVid.UseAspect = False
         editVid.AspectRatio = 16 / 9
         editVid.CustomX = 0
         editVid.CustomY = 0
         editVid.MaxSize = False
         editVid.MaxX = 0
         editVid.MaxY = 0
         editVid.autocrop = False
         editVid.CustomCrop = False
         editVid.CropL = 0
         editVid.CropR = 0
         editVid.CropT = 0
         editVid.CropB = 0
         editVid.Deinterlace = False
         editVid.DoubleFPS = False
         editVid.fieldorder = "TFF"
         editVid.CustomBitrate = False
         editVid.CustomABitrate = False
         editVid.ABitrate = 192
         editVid.VBitrate = 0
         editVid.Downmix = False
         editVid.EnforceProfile = False
         editVid.X264Profile = "High"
         editVid.x264level = 0
         editVid.usemaxrate = False
         editVid.maxbitrate = 0
         editVid.usetargetsize = False
         editVid.changefps = False
         editVid.customfps = 23.976
         editVid.filesize = 0
         editVid.filesizebytes = "MiB"
         editVid.directshow = False
         editVid.upscale = False
         editVid.AAC = False
         editVid.blackbars = False
         editVid.UseOAspect = False
         editVid.OAspect = 16 / 9
         editVid.NoResize = False
         editVid.NoAudio = False
         editVid.usesubs = False
         editVid.fastpass1 = False
         editVid.remuxvideo = False
         editVid.ADirectshow = False
         editVid.bluray = False
         editVid.AACMode = 0
         editVid.forcesample = False
         editVid.samplerate = 48000
 
         editVid.deblocking = True
         editVid.chroma = True
         editVid.pyramid = 2
         editVid.rdo = True
         editVid.weighted = True
         editVid.bidirectional = True
         editVid.adct = True
         editVid.i4x4 = True
         editVid.p4x4 = True
         editVid.i8x8 = True
         editVid.p8x8 = True
         editVid.b8x8 = True
         editVid.pnsr = False
         editVid.ssim = False
         editVid.interlaced = False
         editVid.mixed = True
         editVid.cabac = True
         editVid.dct = False
         editVid.pskip = True
         editVid.fullrange = False
         editVid.strength = 0
         editVid.thresh = 0
         editVid.buffer = 0
         editVid.blur = 20
         editVid.range = 24
         editVid.scene = 40
         editVid.minQ = 1
         editVid.maxQ = 51
         editVid.MaxQD = 4
         editVid.chromaQP = 0
         editVid.bframes = 3
         editVid.bias = 0
         editVid.keyframe = 250
         editVid.gop = 25
         editVid.noise = 0
         editVid.threads = 0
         editVid.refframes = 3
         editVid.aqmode = 1
         editVid.algorithm = 1
         editVid.subpixel = 6
         editVid.bmode = 1
         editVid.trellis = 1
         editVid.adaptive = 1
         editVid.inter = 21
         editVid.intra = 11
         editVid.ibuffer = 0.9
         editVid.variance = 1
         editVid.QC = 0.6
         editVid.blurq = 0.5
         editVid.iandp = 1.4
         editVid.pandb = 1.3
         editVid.psyrd = 1
         editVid.psytrellis = 0
         editVid.stats = "video.stats"
         editVid.aqstrength = 1
         editVid.fullrange = False
         editVid.partitions = "All"
         editVid.lookahead = 40
         editVid.mbtree = True
         editVid.psychovisual = False
         editVid.preset = 4
         editVid.tuning = "Default"
         editVid.custom = ""
         editVid.slices = 0
         editVid.maxslice = 0
         editVid.maxslicembs = 0
         editVid.weightp = 2
         editVid.scenecut = True
         editVid.aud = False
         editVid.nalhrd = False
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\MainForm.xaml.cs" startline="567" endline="697">
<![CDATA[
 
         public static video Set_defaults(video editvid)
         {
             editvid.MKV = false;
             editvid.iPod = false;
             editvid.remuxaudio = false;
             editvid.passes = 2;
             editvid.CQ = false;
             editvid.quality = 0;
             editvid.CustomSize = false;
             editvid.UseAspect = false;
             editvid.aspectRatio = 16 / 9;
             editvid.customX = 0;
             editvid.customY = 0;
             editvid.MaxSize = false;
             editvid.maxX = 0;
             editvid.maxY = 0;
             editvid.autocrop = false;
             editvid.CustomCrop = false;
             editvid.cropL = 0;
             editvid.cropR = 0;
             editvid.cropT = 0;
             editvid.cropB = 0;
             editvid.Deinterlace = false;
             editvid.DoubleFPS = false;
             editvid.fieldorder = "TFF";
             editvid.CustomBitrate = false;
             editvid.CustomABitrate = false;
             editvid.aBitrate = 192;
             editvid.vBitrate = 0;
             editvid.Downmix = false;
             editvid.EnforceProfile = false;
             editvid.x264profile = "High";
             editvid.x264level = 0;
             editvid.usemaxrate = false;
             editvid.maxBitrate = 0;
             editvid.usetargetsize = false;
             editvid.changefps = false;
             editvid.customFPS = 23.976;
             editvid.filesize = 0;
             editvid.filesizebytes = "MiB";
             editvid.directshow = false;
             editvid.upscale = false;
             editvid.AAC = false;
             editvid.blackbars = false;
             editvid.UseOAspect = false;
             editvid.oAspect = 16 / 9;
             editvid.NoResize = false;
             editvid.NoAudio = false;
             editvid.usesubs = false;
             editvid.fastpass1 = false;
             editvid.remuxvideo = false;
             editvid.ADirectshow = false;
             editvid.bluray = false;
             editvid.AACMode = 0;
             editvid.forcesample = false;
             editvid.outputsample = 48000;
             editvid.fpspitch = true;
 
             editvid.deblocking = true;
             editvid.chroma = true;
             editvid.pyramid = 2;
             editvid.rdo = true;
             editvid.weighted = true;
             editvid.bidirectional = true;
             editvid.adct = true;
             editvid.i4x4 = true;
             editvid.p4x4 = true;
             editvid.i8x8 = true;
             editvid.p8x8 = true;
             editvid.b8x8 = true;
             editvid.pnsr = false;
             editvid.ssim = false;
             editvid.interlaced = false;
             editvid.mixed = true;
             editvid.cabac = true;
             editvid.dct = false;
             editvid.pskip = true;
             editvid.strength = 0;
             editvid.thresh = 0;
             editvid.buffer = 0;
             editvid.blur = 20;
             editvid.range = 24;
             editvid.scene = 40;
             editvid.minQ = 1;
             editvid.maxQ = 51;
             editvid.maxQD = 4;
             editvid.chromaQP = 0;
             editvid.bframes = 3;
             editvid.bias = 0;
             editvid.keyframe = 250;
             editvid.gop = 25;
             editvid.noise = 0;
             editvid.threads = 0;
             editvid.refframes = 3;
             editvid.aqmode = 1;
             editvid.algorithm = 1;
             editvid.subpixel = 6;
             editvid.bmode = 1;
             editvid.trellis = 1;
             editvid.adaptive = 1;
             editvid.inter = 21;
             editvid.intra = 11;
             editvid.ibuffer = 0.9;
             editvid.variance = 1;
             editvid.QC = 0.6;
             editvid.blurq = 0.5;
             editvid.iandp = 1.4;
             editvid.pandb = 1.3;
             editvid.psyrd = 1;
             editvid.psytrellis = 0;
             editvid.stats = "video.stats";
             editvid.aqstrength = 1;
             editvid.fullrange = false;
             editvid.partitions = "All";
             editvid.lookahead = 40;
             editvid.mbtree = true;
             editvid.psychovisual = false;
             editvid.preset = 4;
             editvid.tuning = "Default";
             editvid.custom = "";
             editvid.slices = 0;
             editvid.maxslice = 0;
             editvid.maxslicembs = 0;
             editvid.weightp = 2;
             editvid.scenecut = true;
             editvid.aud = false;
             editvid.nalhrd = false;
 
             return editvid;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\ProfileUpdater.vb" startline="281" endline="409">
<![CDATA[
     Function Set_defaults(ByVal editvid As video) As video
         editvid.MKV = False
         editvid.iPod = False
         editvid.remuxaudio = False
         editvid.onepass = False
         editvid.CQ = False
         editvid.Quality = 0
         editvid.CustomSize = False
         editvid.UseAspect = False
         editvid.AspectRatio = 16 / 9
         editvid.CustomX = 0
         editvid.CustomY = 0
         editvid.MaxSize = False
         editvid.MaxX = 0
         editvid.MaxY = 0
         editvid.autocrop = False
         editvid.CustomCrop = False
         editvid.CropL = 0
         editvid.CropR = 0
         editvid.CropT = 0
         editvid.CropB = 0
         editvid.Deinterlace = False
         editvid.DoubleFPS = False
         editvid.fieldorder = "TFF"
         editvid.CustomBitrate = False
         editvid.CustomABitrate = False
         editvid.ABitrate = 192
         editvid.VBitrate = 0
         editvid.Downmix = False
         editvid.EnforceProfile = False
         editvid.X264Profile = "High"
         editvid.x264level = 0
         editvid.usemaxrate = False
         editvid.maxbitrate = 0
         editvid.usetargetsize = False
         editvid.changefps = False
         editvid.customfps = 23.976
         editvid.filesize = 0
         editvid.filesizebytes = "MiB"
         editvid.directshow = False
         editvid.upscale = False
         editvid.AAC = False
         editvid.blackbars = False
         editvid.UseOAspect = False
         editvid.OAspect = 16 / 9
         editvid.NoResize = False
         editvid.NoAudio = False
         editvid.usesubs = False
         editvid.fastpass1 = False
         editvid.remuxvideo = False
         editvid.ADirectshow = False
         editvid.bluray = False
         editvid.AACMode = 0
         editvid.forcesample = False
         editvid.samplerate = 48000
 
         editvid.deblocking = True
         editvid.chroma = True
         editvid.pyramid = 2
         editvid.rdo = True
         editvid.weighted = True
         editvid.bidirectional = True
         editvid.adct = True
         editvid.i4x4 = True
         editvid.p4x4 = True
         editvid.i8x8 = True
         editvid.p8x8 = True
         editvid.b8x8 = True
         editvid.pnsr = False
         editvid.ssim = False
         editvid.interlaced = False
         editvid.mixed = True
         editvid.cabac = True
         editvid.dct = False
         editvid.pskip = True
         editvid.fullrange = False
         editvid.strength = 0
         editvid.thresh = 0
         editvid.buffer = 0
         editvid.blur = 20
         editvid.range = 24
         editvid.scene = 40
         editvid.minQ = 1
         editvid.maxQ = 51
         editvid.MaxQD = 4
         editvid.chromaQP = 0
         editvid.bframes = 3
         editvid.bias = 0
         editvid.keyframe = 250
         editvid.gop = 25
         editvid.noise = 0
         editvid.threads = 0
         editvid.refframes = 3
         editvid.aqmode = 1
         editvid.algorithm = 1
         editvid.subpixel = 6
         editvid.bmode = 1
         editvid.trellis = 1
         editvid.adaptive = 1
         editvid.inter = 21
         editvid.intra = 11
         editvid.ibuffer = 0.9
         editvid.variance = 1
         editvid.QC = 0.6
         editvid.blurq = 0.5
         editvid.iandp = 1.4
         editvid.pandb = 1.3
         editvid.psyrd = 1
         editvid.psytrellis = 0
         editvid.stats = "video.stats"
         editvid.aqstrength = 1
         editvid.fullrange = False
         editvid.partitions = "All"
         editvid.lookahead = 40
         editvid.mbtree = True
         editvid.psychovisual = False
         editvid.preset = 4
         editvid.tuning = "Default"
         editvid.custom = ""
         editvid.slices = 0
         editvid.maxslice = 0
         editvid.maxslicembs = 0
         editvid.weightp = 2
         editvid.scenecut = True
         editvid.aud = False
         editvid.nalhrd = False
 
         Return editvid
     End Function
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\MainForm.xaml.cs" startline="567" endline="697">
<![CDATA[
 
         public static video Set_defaults(video editvid)
         {
             editvid.MKV = false;
             editvid.iPod = false;
             editvid.remuxaudio = false;
             editvid.passes = 2;
             editvid.CQ = false;
             editvid.quality = 0;
             editvid.CustomSize = false;
             editvid.UseAspect = false;
             editvid.aspectRatio = 16 / 9;
             editvid.customX = 0;
             editvid.customY = 0;
             editvid.MaxSize = false;
             editvid.maxX = 0;
             editvid.maxY = 0;
             editvid.autocrop = false;
             editvid.CustomCrop = false;
             editvid.cropL = 0;
             editvid.cropR = 0;
             editvid.cropT = 0;
             editvid.cropB = 0;
             editvid.Deinterlace = false;
             editvid.DoubleFPS = false;
             editvid.fieldorder = "TFF";
             editvid.CustomBitrate = false;
             editvid.CustomABitrate = false;
             editvid.aBitrate = 192;
             editvid.vBitrate = 0;
             editvid.Downmix = false;
             editvid.EnforceProfile = false;
             editvid.x264profile = "High";
             editvid.x264level = 0;
             editvid.usemaxrate = false;
             editvid.maxBitrate = 0;
             editvid.usetargetsize = false;
             editvid.changefps = false;
             editvid.customFPS = 23.976;
             editvid.filesize = 0;
             editvid.filesizebytes = "MiB";
             editvid.directshow = false;
             editvid.upscale = false;
             editvid.AAC = false;
             editvid.blackbars = false;
             editvid.UseOAspect = false;
             editvid.oAspect = 16 / 9;
             editvid.NoResize = false;
             editvid.NoAudio = false;
             editvid.usesubs = false;
             editvid.fastpass1 = false;
             editvid.remuxvideo = false;
             editvid.ADirectshow = false;
             editvid.bluray = false;
             editvid.AACMode = 0;
             editvid.forcesample = false;
             editvid.outputsample = 48000;
             editvid.fpspitch = true;
 
             editvid.deblocking = true;
             editvid.chroma = true;
             editvid.pyramid = 2;
             editvid.rdo = true;
             editvid.weighted = true;
             editvid.bidirectional = true;
             editvid.adct = true;
             editvid.i4x4 = true;
             editvid.p4x4 = true;
             editvid.i8x8 = true;
             editvid.p8x8 = true;
             editvid.b8x8 = true;
             editvid.pnsr = false;
             editvid.ssim = false;
             editvid.interlaced = false;
             editvid.mixed = true;
             editvid.cabac = true;
             editvid.dct = false;
             editvid.pskip = true;
             editvid.strength = 0;
             editvid.thresh = 0;
             editvid.buffer = 0;
             editvid.blur = 20;
             editvid.range = 24;
             editvid.scene = 40;
             editvid.minQ = 1;
             editvid.maxQ = 51;
             editvid.maxQD = 4;
             editvid.chromaQP = 0;
             editvid.bframes = 3;
             editvid.bias = 0;
             editvid.keyframe = 250;
             editvid.gop = 25;
             editvid.noise = 0;
             editvid.threads = 0;
             editvid.refframes = 3;
             editvid.aqmode = 1;
             editvid.algorithm = 1;
             editvid.subpixel = 6;
             editvid.bmode = 1;
             editvid.trellis = 1;
             editvid.adaptive = 1;
             editvid.inter = 21;
             editvid.intra = 11;
             editvid.ibuffer = 0.9;
             editvid.variance = 1;
             editvid.QC = 0.6;
             editvid.blurq = 0.5;
             editvid.iandp = 1.4;
             editvid.pandb = 1.3;
             editvid.psyrd = 1;
             editvid.psytrellis = 0;
             editvid.stats = "video.stats";
             editvid.aqstrength = 1;
             editvid.fullrange = false;
             editvid.partitions = "All";
             editvid.lookahead = 40;
             editvid.mbtree = true;
             editvid.psychovisual = false;
             editvid.preset = 4;
             editvid.tuning = "Default";
             editvid.custom = "";
             editvid.slices = 0;
             editvid.maxslice = 0;
             editvid.maxslicembs = 0;
             editvid.weightp = 2;
             editvid.scenecut = true;
             editvid.aud = false;
             editvid.nalhrd = false;
 
             return editvid;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Updating.vb" startline="563" endline="689">
<![CDATA[
     Sub Set_defaults()
         editVid.MKV = False
         editVid.iPod = False
         editVid.remuxaudio = False
         editVid.onepass = False
         editVid.CQ = False
         editVid.Quality = 0
         editVid.CustomSize = False
         editVid.UseAspect = False
         editVid.AspectRatio = 16 / 9
         editVid.CustomX = 0
         editVid.CustomY = 0
         editVid.MaxSize = False
         editVid.MaxX = 0
         editVid.MaxY = 0
         editVid.autocrop = False
         editVid.CustomCrop = False
         editVid.CropL = 0
         editVid.CropR = 0
         editVid.CropT = 0
         editVid.CropB = 0
         editVid.Deinterlace = False
         editVid.DoubleFPS = False
         editVid.fieldorder = "TFF"
         editVid.CustomBitrate = False
         editVid.CustomABitrate = False
         editVid.ABitrate = 192
         editVid.VBitrate = 0
         editVid.Downmix = False
         editVid.EnforceProfile = False
         editVid.X264Profile = "High"
         editVid.x264level = 0
         editVid.usemaxrate = False
         editVid.maxbitrate = 0
         editVid.usetargetsize = False
         editVid.changefps = False
         editVid.customfps = 23.976
         editVid.filesize = 0
         editVid.filesizebytes = "MiB"
         editVid.directshow = False
         editVid.upscale = False
         editVid.AAC = False
         editVid.blackbars = False
         editVid.UseOAspect = False
         editVid.OAspect = 16 / 9
         editVid.NoResize = False
         editVid.NoAudio = False
         editVid.usesubs = False
         editVid.fastpass1 = False
         editVid.remuxvideo = False
         editVid.ADirectshow = False
         editVid.bluray = False
         editVid.AACMode = 0
         editVid.forcesample = False
         editVid.samplerate = 48000
 
         editVid.deblocking = True
         editVid.chroma = True
         editVid.pyramid = 2
         editVid.rdo = True
         editVid.weighted = True
         editVid.bidirectional = True
         editVid.adct = True
         editVid.i4x4 = True
         editVid.p4x4 = True
         editVid.i8x8 = True
         editVid.p8x8 = True
         editVid.b8x8 = True
         editVid.pnsr = False
         editVid.ssim = False
         editVid.interlaced = False
         editVid.mixed = True
         editVid.cabac = True
         editVid.dct = False
         editVid.pskip = True
         editVid.fullrange = False
         editVid.strength = 0
         editVid.thresh = 0
         editVid.buffer = 0
         editVid.blur = 20
         editVid.range = 24
         editVid.scene = 40
         editVid.minQ = 1
         editVid.maxQ = 51
         editVid.MaxQD = 4
         editVid.chromaQP = 0
         editVid.bframes = 3
         editVid.bias = 0
         editVid.keyframe = 250
         editVid.gop = 25
         editVid.noise = 0
         editVid.threads = 0
         editVid.refframes = 3
         editVid.aqmode = 1
         editVid.algorithm = 1
         editVid.subpixel = 6
         editVid.bmode = 1
         editVid.trellis = 1
         editVid.adaptive = 1
         editVid.inter = 21
         editVid.intra = 11
         editVid.ibuffer = 0.9
         editVid.variance = 1
         editVid.QC = 0.6
         editVid.blurq = 0.5
         editVid.iandp = 1.4
         editVid.pandb = 1.3
         editVid.psyrd = 1
         editVid.psytrellis = 0
         editVid.stats = "video.stats"
         editVid.aqstrength = 1
         editVid.fullrange = False
         editVid.partitions = "All"
         editVid.lookahead = 40
         editVid.mbtree = True
         editVid.psychovisual = False
         editVid.preset = 4
         editVid.tuning = "Default"
         editVid.custom = ""
         editVid.slices = 0
         editVid.maxslice = 0
         editVid.maxslicembs = 0
         editVid.weightp = 2
         editVid.scenecut = True
         editVid.aud = False
         editVid.nalhrd = False
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\MainForm.xaml.cs" startline="567" endline="697">
<![CDATA[
 
         public static video Set_defaults(video editvid)
         {
             editvid.MKV = false;
             editvid.iPod = false;
             editvid.remuxaudio = false;
             editvid.passes = 2;
             editvid.CQ = false;
             editvid.quality = 0;
             editvid.CustomSize = false;
             editvid.UseAspect = false;
             editvid.aspectRatio = 16 / 9;
             editvid.customX = 0;
             editvid.customY = 0;
             editvid.MaxSize = false;
             editvid.maxX = 0;
             editvid.maxY = 0;
             editvid.autocrop = false;
             editvid.CustomCrop = false;
             editvid.cropL = 0;
             editvid.cropR = 0;
             editvid.cropT = 0;
             editvid.cropB = 0;
             editvid.Deinterlace = false;
             editvid.DoubleFPS = false;
             editvid.fieldorder = "TFF";
             editvid.CustomBitrate = false;
             editvid.CustomABitrate = false;
             editvid.aBitrate = 192;
             editvid.vBitrate = 0;
             editvid.Downmix = false;
             editvid.EnforceProfile = false;
             editvid.x264profile = "High";
             editvid.x264level = 0;
             editvid.usemaxrate = false;
             editvid.maxBitrate = 0;
             editvid.usetargetsize = false;
             editvid.changefps = false;
             editvid.customFPS = 23.976;
             editvid.filesize = 0;
             editvid.filesizebytes = "MiB";
             editvid.directshow = false;
             editvid.upscale = false;
             editvid.AAC = false;
             editvid.blackbars = false;
             editvid.UseOAspect = false;
             editvid.oAspect = 16 / 9;
             editvid.NoResize = false;
             editvid.NoAudio = false;
             editvid.usesubs = false;
             editvid.fastpass1 = false;
             editvid.remuxvideo = false;
             editvid.ADirectshow = false;
             editvid.bluray = false;
             editvid.AACMode = 0;
             editvid.forcesample = false;
             editvid.outputsample = 48000;
             editvid.fpspitch = true;
 
             editvid.deblocking = true;
             editvid.chroma = true;
             editvid.pyramid = 2;
             editvid.rdo = true;
             editvid.weighted = true;
             editvid.bidirectional = true;
             editvid.adct = true;
             editvid.i4x4 = true;
             editvid.p4x4 = true;
             editvid.i8x8 = true;
             editvid.p8x8 = true;
             editvid.b8x8 = true;
             editvid.pnsr = false;
             editvid.ssim = false;
             editvid.interlaced = false;
             editvid.mixed = true;
             editvid.cabac = true;
             editvid.dct = false;
             editvid.pskip = true;
             editvid.strength = 0;
             editvid.thresh = 0;
             editvid.buffer = 0;
             editvid.blur = 20;
             editvid.range = 24;
             editvid.scene = 40;
             editvid.minQ = 1;
             editvid.maxQ = 51;
             editvid.maxQD = 4;
             editvid.chromaQP = 0;
             editvid.bframes = 3;
             editvid.bias = 0;
             editvid.keyframe = 250;
             editvid.gop = 25;
             editvid.noise = 0;
             editvid.threads = 0;
             editvid.refframes = 3;
             editvid.aqmode = 1;
             editvid.algorithm = 1;
             editvid.subpixel = 6;
             editvid.bmode = 1;
             editvid.trellis = 1;
             editvid.adaptive = 1;
             editvid.inter = 21;
             editvid.intra = 11;
             editvid.ibuffer = 0.9;
             editvid.variance = 1;
             editvid.QC = 0.6;
             editvid.blurq = 0.5;
             editvid.iandp = 1.4;
             editvid.pandb = 1.3;
             editvid.psyrd = 1;
             editvid.psytrellis = 0;
             editvid.stats = "video.stats";
             editvid.aqstrength = 1;
             editvid.fullrange = false;
             editvid.partitions = "All";
             editvid.lookahead = 40;
             editvid.mbtree = true;
             editvid.psychovisual = false;
             editvid.preset = 4;
             editvid.tuning = "Default";
             editvid.custom = "";
             editvid.slices = 0;
             editvid.maxslice = 0;
             editvid.maxslicembs = 0;
             editvid.weightp = 2;
             editvid.scenecut = true;
             editvid.aud = false;
             editvid.nalhrd = false;
 
             return editvid;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Wizard.vb" startline="2996" endline="3122">
<![CDATA[
     Sub Set_defaults()
         editVid.MKV = False
         editVid.iPod = False
         editVid.remuxaudio = False
         editVid.onepass = False
         editVid.CQ = False
         editVid.Quality = 0
         editVid.CustomSize = False
         editVid.UseAspect = False
         editVid.AspectRatio = 16 / 9
         editVid.CustomX = 0
         editVid.CustomY = 0
         editVid.MaxSize = False
         editVid.MaxX = 0
         editVid.MaxY = 0
         editVid.autocrop = False
         editVid.CustomCrop = False
         editVid.CropL = 0
         editVid.CropR = 0
         editVid.CropT = 0
         editVid.CropB = 0
         editVid.Deinterlace = False
         editVid.DoubleFPS = False
         editVid.fieldorder = "TFF"
         editVid.CustomBitrate = False
         editVid.CustomABitrate = False
         editVid.ABitrate = 192
         editVid.VBitrate = 0
         editVid.Downmix = False
         editVid.EnforceProfile = False
         editVid.X264Profile = "High"
         editVid.x264level = 0
         editVid.usemaxrate = False
         editVid.maxbitrate = 0
         editVid.usetargetsize = False
         editVid.changefps = False
         editVid.customfps = 23.976
         editVid.filesize = 0
         editVid.filesizebytes = "MiB"
         editVid.directshow = False
         editVid.upscale = False
         editVid.AAC = False
         editVid.blackbars = False
         editVid.UseOAspect = False
         editVid.OAspect = 16 / 9
         editVid.NoResize = False
         editVid.NoAudio = False
         editVid.usesubs = False
         editVid.fastpass1 = False
         editVid.remuxvideo = False
         editVid.ADirectshow = False
         editVid.bluray = False
         editVid.AACMode = 0
         editVid.forcesample = False
         editVid.samplerate = 48000
 
         editVid.deblocking = True
         editVid.chroma = True
         editVid.pyramid = 2
         editVid.rdo = True
         editVid.weighted = True
         editVid.bidirectional = True
         editVid.adct = True
         editVid.i4x4 = True
         editVid.p4x4 = True
         editVid.i8x8 = True
         editVid.p8x8 = True
         editVid.b8x8 = True
         editVid.pnsr = False
         editVid.ssim = False
         editVid.interlaced = False
         editVid.mixed = True
         editVid.cabac = True
         editVid.dct = False
         editVid.pskip = True
         editVid.fullrange = False
         editVid.strength = 0
         editVid.thresh = 0
         editVid.buffer = 0
         editVid.blur = 20
         editVid.range = 24
         editVid.scene = 40
         editVid.minQ = 1
         editVid.maxQ = 51
         editVid.MaxQD = 4
         editVid.chromaQP = 0
         editVid.bframes = 3
         editVid.bias = 0
         editVid.keyframe = 250
         editVid.gop = 25
         editVid.noise = 0
         editVid.threads = 0
         editVid.refframes = 3
         editVid.aqmode = 1
         editVid.algorithm = 1
         editVid.subpixel = 6
         editVid.bmode = 1
         editVid.trellis = 1
         editVid.adaptive = 1
         editVid.inter = 21
         editVid.intra = 11
         editVid.ibuffer = 0.9
         editVid.variance = 1
         editVid.QC = 0.6
         editVid.blurq = 0.5
         editVid.iandp = 1.4
         editVid.pandb = 1.3
         editVid.psyrd = 1
         editVid.psytrellis = 0
         editVid.stats = "video.stats"
         editVid.aqstrength = 1
         editVid.fullrange = False
         editVid.partitions = "All"
         editVid.lookahead = 40
         editVid.mbtree = True
         editVid.psychovisual = False
         editVid.preset = 4
         editVid.tuning = "Default"
         editVid.custom = ""
         editVid.slices = 0
         editVid.maxslice = 0
         editVid.maxslicembs = 0
         editVid.weightp = 2
         editVid.scenecut = True
         editVid.aud = False
         editVid.nalhrd = False
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\MainForm.xaml.cs" startline="758" endline="765">
<![CDATA[
 
         private void profile_updater()
         {
             setBlur(true);
             Updating frmUpdating = new Updating();
             frmUpdating.ShowDialog();
             setBlur(false);
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Wizard.vb" startline="2934" endline="2941">
<![CDATA[
 
     Private Sub ExportProfileToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ExportProfileToolStripMenuItem1.Click
         Dim frmExport As New ExportProfile
         Me.Enabled = False
         frmExport.ShowDialog()
         Me.Enabled = True
 
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\MainForm.xaml.cs" startline="782" endline="794">
<![CDATA[
 
         private void Update_Profiles()
         {
             cboSettings.Items.Clear();
             if (!noprofiles)
             {
                 foreach (string prof in profileList)
                 {
                     cboSettings.Items.Add(prof);
                 }
                 foreach (string prof in profileList)
                 {
                     cboSettings.Items.Add(prof);
                 }
             }
             cboSettings.Text = strDefaultProfile;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\ProfileUpdater.vb" startline="741" endline="750">
<![CDATA[
 
     Sub UpdateProfiles()
         Dim pdir As String = appdir & "\Profiles.bak"
         For Each p As String In updating
             Dim prof As video = Profile_Change(p, pdir)
             Profile_save(prof)
         Next
         IO.File.Delete(pdir)
         Me.Close()
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\MainForm.xaml.cs" startline="1434" endline="1451">
<![CDATA[
 
         private void Update_Jobs()
         {
             lstVideos.Items.Clear();
             string[] q = new string[1];
             ListViewItem itm;
             foreach (video v in videolist)
             {
                 itm = new ListViewItem();
                 q[0]= v.jobname;
                 if (v.encoded)
                     q[1] = "Done";
                 else
                     q[1] = "Waiting...";
                 itm.Content = q;
                 lstVideos.Items.Add(itm);
             }
             foreach (video v in videolist)
             {
                 itm = new ListViewItem();
                 q[0]= v.jobname;
                 if (v.encoded)
                     q[1] = "Done";
                 else
                     q[1] = "Waiting...";
                 itm.Content = q;
                 lstVideos.Items.Add(itm);
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MainForm.vb" startline="3906" endline="3915">
<![CDATA[
     Sub UpdateJobs()
         JobQueue.Items.Clear()
         Dim count As Integer, strq(1) As String, itm As ListViewItem
         For count = 0 To videoList.Count - 1
             strq(0) = videoList.Item(count).Jobname
             If videoList.Item(count).encoded Then strq(1) = "Done" Else strq(1) = "Waiting..."
             itm = New ListViewItem(strq)
             JobQueue.Items.Add(itm)
         Next
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\MainForm.xaml.cs" startline="1434" endline="1451">
<![CDATA[
 
         private void Update_Jobs()
         {
             lstVideos.Items.Clear();
             string[] q = new string[1];
             ListViewItem itm;
             foreach (video v in videolist)
             {
                 itm = new ListViewItem();
                 q[0]= v.jobname;
                 if (v.encoded)
                     q[1] = "Done";
                 else
                     q[1] = "Waiting...";
                 itm.Content = q;
                 lstVideos.Items.Add(itm);
             }
             foreach (video v in videolist)
             {
                 itm = new ListViewItem();
                 q[0]= v.jobname;
                 if (v.encoded)
                     q[1] = "Done";
                 else
                     q[1] = "Waiting...";
                 itm.Content = q;
                 lstVideos.Items.Add(itm);
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Wizard.vb" startline="441" endline="451">
<![CDATA[
 
     Sub UpdateJobs()
         lstVideos.Items.Clear()
         Dim count As Integer, strq(2) As String, itm As ListViewItem
         For count = 0 To videoList.Count - 1
             strq(0) = videoList.Item(count).Jobname
             If videoList.Item(count).encoded Then strq(1) = "Done" Else strq(1) = "Waiting..."
             itm = New ListViewItem(strq)
             lstVideos.Items.Add(itm)
         Next
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\MainForm.xaml.cs" startline="1574" endline="1586">
<![CDATA[
 
         private static string filename_nodir(string name)
         {
             int slash = -1, len = name.Length;
             for (int i = 0; i < len; i++)
             {
                 string sub = name.Substring(i, 1);
                 if (sub == "\\" || sub == "/")
                     slash = i;
             }
             for (int i = 0; i < len; i++)
             {
                 string sub = name.Substring(i, 1);
                 if (sub == "\\" || sub == "/")
                     slash = i;
             }
             slash++;
             return name.Substring(slash, len - slash);
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Edit.vb" startline="2893" endline="2902">
<![CDATA[
     Function Filename_Nodir() As String
         Dim intFileName As Integer, intSlash As Integer
         strfilename = editVid.Video
         For intFileName = 1 To Len(strfilename)
             If Mid(strfilename, intFileName, 1) = "\" Or Mid(strfilename, intFileName, 1) = "/" Then
                 intSlash = intFileName
             End If
         Next
         Return Mid(strfilename, intSlash + 1, Len(strfilename) - intSlash)
     End Function
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\MainForm.xaml.cs" startline="1574" endline="1586">
<![CDATA[
 
         private static string filename_nodir(string name)
         {
             int slash = -1, len = name.Length;
             for (int i = 0; i < len; i++)
             {
                 string sub = name.Substring(i, 1);
                 if (sub == "\\" || sub == "/")
                     slash = i;
             }
             for (int i = 0; i < len; i++)
             {
                 string sub = name.Substring(i, 1);
                 if (sub == "\\" || sub == "/")
                     slash = i;
             }
             slash++;
             return name.Substring(slash, len - slash);
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MainForm.vb" startline="3128" endline="3138">
<![CDATA[
 
     Function Filename_Nodir() As String
         Dim intFileName As Integer, intSlash As Integer
         strFileName = editvid.video
         For intFilename = 1 To len(strFileName)
             If mid(strfilename, intfilename, 1) = "\" Or mid(strfilename, intfilename, 1) = "/" Then
                 intslash = intFilename
             End If
         Next
         Return mid(strFileName, intSlash + 1, len(strFilename) - intSlash)
     End Function
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\MainForm.xaml.cs" startline="1574" endline="1586">
<![CDATA[
 
         private static string filename_nodir(string name)
         {
             int slash = -1, len = name.Length;
             for (int i = 0; i < len; i++)
             {
                 string sub = name.Substring(i, 1);
                 if (sub == "\\" || sub == "/")
                     slash = i;
             }
             for (int i = 0; i < len; i++)
             {
                 string sub = name.Substring(i, 1);
                 if (sub == "\\" || sub == "/")
                     slash = i;
             }
             slash++;
             return name.Substring(slash, len - slash);
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Wizard.vb" startline="419" endline="429">
<![CDATA[
 
     Function Filename_Nodir() As String
         Dim intFileName As Integer, intSlash As Integer, strFilename As String
         strFileName = editvid.video
         For intFilename = 1 To len(strFileName)
             If mid(strfilename, intfilename, 1) = "\" Or mid(strfilename, intfilename, 1) = "/" Then
                 intslash = intFilename
             End If
         Next
         Return mid(strFileName, intSlash + 1, len(strFilename) - intSlash)
     End Function
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\MainForm.xaml.cs" startline="1597" endline="1609">
<![CDATA[
 
         public static string randomstring(int size)
         {
             StringBuilder builder = new StringBuilder();
             Random rnd = new Random();
             Char ch;
             for (int i = 0; i < size; i++)
             {
                 ch = Convert.ToChar(Convert.ToInt32(26 * rnd.NextDouble() + 64));
                 builder.Append(ch);
             }
             for (int i = 0; i < size; i++)
             {
                 ch = Convert.ToChar(Convert.ToInt32(26 * rnd.NextDouble() + 64));
                 builder.Append(ch);
             }
             return builder.ToString().ToLower();
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Edit.vb" startline="527" endline="541">
<![CDATA[
 	
 	Private Function RandomString(size As Integer, lowerCase As Boolean) As String
 		   Dim builder As New system.Text.StringBuilder()
 		   Dim random As New Random()
 		   Dim ch As Char
 		   Dim i As Integer
 		   For i = 0 To size - 1
 		      ch = Convert.ToChar(Convert.ToInt32((26 * random.NextDouble() + 65)))
 		      builder.Append(ch)
 		   Next
 		   If lowerCase Then
 		      Return builder.ToString().ToLower()
 		   End If
 		   Return builder.ToString()
 	End Function 'RandomString 
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\MainForm.xaml.cs" startline="1597" endline="1609">
<![CDATA[
 
         public static string randomstring(int size)
         {
             StringBuilder builder = new StringBuilder();
             Random rnd = new Random();
             Char ch;
             for (int i = 0; i < size; i++)
             {
                 ch = Convert.ToChar(Convert.ToInt32(26 * rnd.NextDouble() + 64));
                 builder.Append(ch);
             }
             for (int i = 0; i < size; i++)
             {
                 ch = Convert.ToChar(Convert.ToInt32(26 * rnd.NextDouble() + 64));
                 builder.Append(ch);
             }
             return builder.ToString().ToLower();
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MainForm.vb" startline="3139" endline="3153">
<![CDATA[
 
     Function RandomString(ByVal size As Integer, ByVal lowerCase As Boolean) As String
         Dim builder As New system.Text.StringBuilder()
         Dim random As New Random()
         Dim ch As Char
         Dim i As Integer
         For i = 0 To size - 1
             ch = Convert.ToChar(Convert.ToInt32((26 * random.NextDouble() + 65)))
             builder.Append(ch)
         Next
         If lowerCase Then
             Return builder.ToString().ToLower()
         End If
         Return builder.ToString()
     End Function 'RandomString 
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\MainForm.xaml.cs" startline="1597" endline="1609">
<![CDATA[
 
         public static string randomstring(int size)
         {
             StringBuilder builder = new StringBuilder();
             Random rnd = new Random();
             Char ch;
             for (int i = 0; i < size; i++)
             {
                 ch = Convert.ToChar(Convert.ToInt32(26 * rnd.NextDouble() + 64));
                 builder.Append(ch);
             }
             for (int i = 0; i < size; i++)
             {
                 ch = Convert.ToChar(Convert.ToInt32(26 * rnd.NextDouble() + 64));
                 builder.Append(ch);
             }
             return builder.ToString().ToLower();
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Testing.vb" startline="1123" endline="1137">
<![CDATA[
 	
 	Private Function RandomString(size As Integer, lowerCase As Boolean) As String
 		   Dim builder As New system.Text.StringBuilder()
 		   Dim random As New Random()
 		   Dim ch As Char
 		   Dim i As Integer
 		   For i = 0 To size - 1
 		      ch = Convert.ToChar(Convert.ToInt32((26 * random.NextDouble() + 65)))
 		      builder.Append(ch)
 		   Next
 		   If lowerCase Then
 		      Return builder.ToString().ToLower()
 		   End If
 		   Return builder.ToString()
 	End Function 'RandomString 
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\MainForm.xaml.cs" startline="1597" endline="1609">
<![CDATA[
 
         public static string randomstring(int size)
         {
             StringBuilder builder = new StringBuilder();
             Random rnd = new Random();
             Char ch;
             for (int i = 0; i < size; i++)
             {
                 ch = Convert.ToChar(Convert.ToInt32(26 * rnd.NextDouble() + 64));
                 builder.Append(ch);
             }
             for (int i = 0; i < size; i++)
             {
                 ch = Convert.ToChar(Convert.ToInt32(26 * rnd.NextDouble() + 64));
                 builder.Append(ch);
             }
             return builder.ToString().ToLower();
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Wizard.vb" startline="832" endline="845">
<![CDATA[
     Private Function RandomString(ByVal size As Integer, ByVal lowerCase As Boolean) As String
         Dim builder As New system.Text.StringBuilder()
         Dim random As New Random()
         Dim ch As Char
         Dim i As Integer
         For i = 0 To size - 1
             ch = Convert.ToChar(Convert.ToInt32((26 * random.NextDouble() + 65)))
             builder.Append(ch)
         Next
         If lowerCase Then
             Return builder.ToString().ToLower()
         End If
         Return builder.ToString()
     End Function 'RandomString 
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\MainForm.xaml.cs" startline="1619" endline="1654">
<![CDATA[
 
         public static video videoinfo(video editvid)
         {
             string path = editvid.path;
             editvid.avs = path.Substring(path.Length - 3, 3).ToLower() == "avs";
             //Generate unique job key (Over 200 billion possibilities)
             if (editvid.key == "")
             {
                 bool used = false;
                 while (!used)
                 {
                     editvid.key = randomstring(8);
                     used = false;
                     for (int i = 0; i < videolist.Count; i++)
                         if (videolist[i].key == editvid.key)
                             used = true;
                     for (int i = 0; i < videolist.Count; i++)
                         if (videolist[i].key == editvid.key)
                             used = true;
                 }
                 while (!used)
                 {
                     editvid.key = randomstring(8);
                     used = false;
                     for (int i = 0; i < videolist.Count; i++)
                         if (videolist[i].key == editvid.key)
                             used = true;
                 }
             }
 
             //Generate videoinfo file for current job
             if (editvid.avs)
             {
                 editvid.avsaudio = 0;
                 shell.StartInfo.Arguments = " /c ECHO y | avs2avi \"" + editvid.path + "\" \"" + tempDir + "\\avs2avi.avi\" && mediainfo \"" + tempDir + "\\avs2avi.avi\" \"--Language=file
                 shell.Start();
                 shell.WaitForExit();
             }
             else
             {
                 shell.StartInfo.Arguments = " /c mediainfo \"" + editvid.path + "\" \"--Language=file
                 shell.Start();
                 shell.WaitForExit();
             }
             editvid.videoinfo = tempDir + "\\" + editvid.key + ".videoinfo";
             return editvid;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Edit.vb" startline="542" endline="564">
<![CDATA[
 	
 	Function VideoInfo() as String
 		Dim count As Integer, used As Boolean
 		If mid(editvid.video.ToLower,len(editvid.video)-2,3) = "avs" Then editVid.avs=True Else editvid.avs=False
 		If editvid.key="" Then
 			keygen
 			editvid.key=randomstring(8,True)
 			used=False		
 			For count = 0 To videolist.Count-1
 				if videolist.Item(count).key=editvid.key then used=true
 			Next
 			If used=True Then GoTo keygen
 		End If
 		If editvid.avs=True Then
 			editvid.avsaudio=0
 			io.Directory.SetCurrentDirectory(tooldir)
             Shell("cmd /c ECHO y  | avs2avi " & """" & editVid.Video & """" & " " & """" & tempDir & "\avs2avi.avi" & """" & " && mediainfo " & """" & tempDir & "\avs2avi.avi" & """" & " " & """" & "--Language=file
 		Else
 			io.Directory.SetCurrentDirectory(tooldir)
             Shell("cmd /c mediainfo " & """" & editVid.Video & """" & " " & """" & "--Language=file
 		End If
 		Return tempdir & "\" & editvid.key & ".videoinfo"		
 	End Function
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\MainForm.xaml.cs" startline="1619" endline="1654">
<![CDATA[
 
         public static video videoinfo(video editvid)
         {
             string path = editvid.path;
             editvid.avs = path.Substring(path.Length - 3, 3).ToLower() == "avs";
             //Generate unique job key (Over 200 billion possibilities)
             if (editvid.key == "")
             {
                 bool used = false;
                 while (!used)
                 {
                     editvid.key = randomstring(8);
                     used = false;
                     for (int i = 0; i < videolist.Count; i++)
                         if (videolist[i].key == editvid.key)
                             used = true;
                     for (int i = 0; i < videolist.Count; i++)
                         if (videolist[i].key == editvid.key)
                             used = true;
                 }
                 while (!used)
                 {
                     editvid.key = randomstring(8);
                     used = false;
                     for (int i = 0; i < videolist.Count; i++)
                         if (videolist[i].key == editvid.key)
                             used = true;
                 }
             }
 
             //Generate videoinfo file for current job
             if (editvid.avs)
             {
                 editvid.avsaudio = 0;
                 shell.StartInfo.Arguments = " /c ECHO y | avs2avi \"" + editvid.path + "\" \"" + tempDir + "\\avs2avi.avi\" && mediainfo \"" + tempDir + "\\avs2avi.avi\" \"--Language=file
                 shell.Start();
                 shell.WaitForExit();
             }
             else
             {
                 shell.StartInfo.Arguments = " /c mediainfo \"" + editvid.path + "\" \"--Language=file
                 shell.Start();
                 shell.WaitForExit();
             }
             editvid.videoinfo = tempDir + "\\" + editvid.key + ".videoinfo";
             return editvid;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MainForm.vb" startline="3154" endline="3176">
<![CDATA[
 
     Function VideoInfo() As String
         Dim count As Integer, used As Boolean
         If mid(editvid.video.ToLower, len(editvid.video) - 2, 3) = "avs" Then editVid.avs = True Else editvid.avs = False
         If editvid.key = "" Then
 keygen
             editvid.key = randomstring(8, True)
             used = False
             For count = 0 To videolist.Count - 1
                 If videolist.Item(count).key = editvid.key Then used = True
             Next
             If used = True Then GoTo keygen
         End If
         If editVid.avs = True Then
             editVid.avsaudio = 0
             IO.Directory.SetCurrentDirectory(toolDir)
             Shell("cmd /c ECHO y  | avs2avi " & """" & editVid.Video & """" & " " & """" & tempDir & "\avs2avi.avi" & """" & " && mediainfo " & """" & tempDir & "\avs2avi.avi" & """" & " " & """" & "--Language=file
         Else
             IO.Directory.SetCurrentDirectory(toolDir)
             Shell("cmd /c mediainfo " & """" & editVid.Video & """" & " " & """" & "--Language=file
         End If
         Return tempdir & "\" & editvid.key & ".videoinfo"
     End Function
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\MainForm.xaml.cs" startline="1619" endline="1654">
<![CDATA[
 
         public static video videoinfo(video editvid)
         {
             string path = editvid.path;
             editvid.avs = path.Substring(path.Length - 3, 3).ToLower() == "avs";
             //Generate unique job key (Over 200 billion possibilities)
             if (editvid.key == "")
             {
                 bool used = false;
                 while (!used)
                 {
                     editvid.key = randomstring(8);
                     used = false;
                     for (int i = 0; i < videolist.Count; i++)
                         if (videolist[i].key == editvid.key)
                             used = true;
                     for (int i = 0; i < videolist.Count; i++)
                         if (videolist[i].key == editvid.key)
                             used = true;
                 }
                 while (!used)
                 {
                     editvid.key = randomstring(8);
                     used = false;
                     for (int i = 0; i < videolist.Count; i++)
                         if (videolist[i].key == editvid.key)
                             used = true;
                 }
             }
 
             //Generate videoinfo file for current job
             if (editvid.avs)
             {
                 editvid.avsaudio = 0;
                 shell.StartInfo.Arguments = " /c ECHO y | avs2avi \"" + editvid.path + "\" \"" + tempDir + "\\avs2avi.avi\" && mediainfo \"" + tempDir + "\\avs2avi.avi\" \"--Language=file
                 shell.Start();
                 shell.WaitForExit();
             }
             else
             {
                 shell.StartInfo.Arguments = " /c mediainfo \"" + editvid.path + "\" \"--Language=file
                 shell.Start();
                 shell.WaitForExit();
             }
             editvid.videoinfo = tempDir + "\\" + editvid.key + ".videoinfo";
             return editvid;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Testing.vb" startline="633" endline="655">
<![CDATA[
 	
 	Function VideoInfo() as String
 		Dim count As Integer, used As Boolean
 		If mid(editvid.video.ToLower,len(editvid.video)-2,3) = "avs" Then editVid.avs=True Else editvid.avs=False
 		If editvid.key="" Then
 			keygen
 			editvid.key=randomstring(8,True)
 			used=False		
 			For count = 0 To videolist.Count-1
 				if videolist.Item(count).key=editvid.key then used=true
 			Next
 			If used=True Then GoTo keygen
 		End If
 		If editvid.avs=True Then
 			editvid.avsaudio=0
 			io.Directory.SetCurrentDirectory(tooldir)
 			shell("cmd /c ECHO y  | avs2avi " & """" & editvid.video & """" & " " & """" & tempdir & "\avs2avi.avi" & """" & " && mediainfo " & """" & tempdir & "\avs2avi.avi" & """" & " > " & """" & tempdir & "\" & editvid.key & ".videoinfo" & """", AppWinStyle.Hide,True)
 		Else
 			io.Directory.SetCurrentDirectory(tooldir)
 			shell("cmd /c mediainfo " & """" & editvid.video & """" & " > " & """" & tempdir & "\" & editvid.key & ".videoinfo" & """", AppWinStyle.Hide,True)
 		End If
 		Return tempdir & "\" & editvid.key & ".videoinfo"		
 	End Function
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\MainForm.xaml.cs" startline="2144" endline="2250">
<![CDATA[
 
         public static video MPEGInfo(video editvid)
         {
             MPEG frmMPEG = new MPEG();
             string key = editvid.key;
             frmMPEG.Show();
             if (!File.Exists(editvid.mpeginfo) || editvid.mpeginfo == null)
             {
                 shell.StartInfo.Arguments = "/c DGIndex -HIDE -EXIT -AT=[" + toolDir + "\\template.avs] -AIF=[" + editvid.path + "] -OF=[" + tempDir + "\\" + key + "]";
                 shell.Start();
                 shell.WaitForExit();
             }
             shell.StartInfo.WorkingDirectory = tempDir;
             shell.StartInfo.Arguments = " /c dir /b " + key + "*.ac3 " + key + "*.wav " + key + "*.dts " + key + "*.pcm " + key + "*.mp* " + key + "*.aac > " + key + ".trackinfo";
             shell.Start();
             shell.WaitForExit();
             shell.StartInfo.WorkingDirectory = toolDir;
             editvid.trackinfo = tempDir + "\\" + key + ".trackinfo";
             string avs = tempDir + "\\" + key + ".avs";
             if (File.Exists(avs))
             {
                 StreamReader mread = File.OpenText(avs);
                 editvid.mpgaudio = (mread.Peek() > -1) ? mread.ReadLine() 
                 editvid.defaultmpgaudio = editvid.mpgaudio;
                 string s = (mread.Peek() > -1) ? mread.ReadLine() 
                 double d;
                 editvid.delay = Double.TryParse(s, out d) ? d 
                 editvid = AudioInfo(-1, editvid);
                 //Read_AudioInfo();
                 mread.Close();
                 File.Delete(avs);
             }
             else
                 MessageBox.Show("Error reading MPEG file!");
             StreamWriter awrite = File.CreateText(avs);
             editvid.mpeginfo = tempDir + "\\" + key + ".d2v";
             awrite.WriteLine(
                 "LoadPlugin(\"" + toolDir + "\\DGDecode.dll\")\r\n" +
                 "mpeg2source(\"" + editvid.mpeginfo + "\")");
             awrite.Close();
             string avi = tempDir + "\\" + key + ".avi", ml = tempDir + "\\" + key + ".mpeglength";
             shell.StartInfo.Arguments = " /c ECHO y | avs2avi \"" + avs + "\" \"" + avi + "\" && mediainfo \"" + avi + "\" > \"" + ml + "\"";
             shell.Start();
             shell.WaitForExit();
             File.Delete(avs);
             File.Delete(avi);
             if (File.Exists(ml))
             {
                 StreamReader sread = File.OpenText(ml);
                 string info = "";
                 while (sread.Peek() > -1 && info != "Duration            ")
                 {
                     info = sread.ReadLine();
                     if (info.Length > 35)
                     {
                         string sub = info.Substring(35, info.Length - 35);
                         if (info.Substring(0, 20) == "Duration            ")
                         {
                             double hours = 0, minutes = 0, seconds = 0;
                             int cursor = 0;
                             int i;
                             for (i = 1; i < sub.Length; i++)
                                 if (sub.Substring(i, 1) == "h")
                                 {
                                     hours = Convert.ToDouble(sub.Substring(0, i));
                                     cursor = i + 1;
                                 }
                             for (i = 1; i < sub.Length; i++)
                                 if (sub.Substring(i, 1) == "h")
                                 {
                                     hours = Convert.ToDouble(sub.Substring(0, i));
                                     cursor = i + 1;
                                 }
                             for (i = cursor + 1; i < (sub.Length - 1); i++)
                                 if (sub.Substring(i, 2) == "mn")
                                 {
                                     minutes = Convert.ToDouble(sub.Substring(cursor, i - cursor));
                                     cursor = i + 3;
                                 }
                             for (i = cursor + 1; i < (sub.Length - 1); i++)
                                 if (sub.Substring(i, 2) == "mn")
                                 {
                                     minutes = Convert.ToDouble(sub.Substring(cursor, i - cursor));
                                     cursor = i + 3;
                                 }
                             for (i = cursor + 1; i < sub.Length; i++)
                                 if (sub.Substring(i, 1) == "s" && sub.Substring(i - 1, 2) != "ms")
                                 {
                                     seconds = Convert.ToDouble(sub.Substring(cursor, i - cursor));
                                     cursor = i + 1;
                                 }
                             for (i = cursor + 1; i < sub.Length; i++)
                                 if (sub.Substring(i, 1) == "s" && sub.Substring(i - 1, 2) != "ms")
                                 {
                                     seconds = Convert.ToDouble(sub.Substring(cursor, i - cursor));
                                     cursor = i + 1;
                                 }
                             editvid.length = hours * 3600 + minutes * 60 + seconds;
                             editvid.mpeglength = editvid.length;
                         }
                     }
                 }
                 while (sread.Peek() > -1 && info != "Duration            ")
                 {
                     info = sread.ReadLine();
                     if (info.Length > 35)
                     {
                         string sub = info.Substring(35, info.Length - 35);
                         if (info.Substring(0, 20) == "Duration            ")
                         {
                             double hours = 0, minutes = 0, seconds = 0;
                             int cursor = 0;
                             int i;
                             for (i = 1; i < sub.Length; i++)
                                 if (sub.Substring(i, 1) == "h")
                                 {
                                     hours = Convert.ToDouble(sub.Substring(0, i));
                                     cursor = i + 1;
                                 }
                             for (i = cursor + 1; i < (sub.Length - 1); i++)
                                 if (sub.Substring(i, 2) == "mn")
                                 {
                                     minutes = Convert.ToDouble(sub.Substring(cursor, i - cursor));
                                     cursor = i + 3;
                                 }
                             for (i = cursor + 1; i < sub.Length; i++)
                                 if (sub.Substring(i, 1) == "s" && sub.Substring(i - 1, 2) != "ms")
                                 {
                                     seconds = Convert.ToDouble(sub.Substring(cursor, i - cursor));
                                     cursor = i + 1;
                                 }
                             editvid.length = hours * 3600 + minutes * 60 + seconds;
                             editvid.mpeglength = editvid.length;
                         }
                     }
                 }
                 sread.Close();
                 File.Delete(ml);
             }
             if (!editvid.film && File.Exists(editvid.mpeginfo))
             {
                 StreamReader dfile = File.OpenText(editvid.mpeginfo);
                 while (dfile.Peek() > -1)
                 {
                     string d2v = dfile.ReadLine();
                     if (d2v.Length > 8)
                         if (d2v.Substring(0, 8) == "FINISHED" && d2v.Substring(d2v.Length - 4, 4) == "FILM")
                         {
                             editvid.film = true;
                             editvid.percentfilm = d2v.Substring(8, d2v.Length - 8);
                             editvid.isinterlaced = true;
                         }
                 }
                 while (dfile.Peek() > -1)
                 {
                     string d2v = dfile.ReadLine();
                     if (d2v.Length > 8)
                         if (d2v.Substring(0, 8) == "FINISHED" && d2v.Substring(d2v.Length - 4, 4) == "FILM")
                         {
                             editvid.film = true;
                             editvid.percentfilm = d2v.Substring(8, d2v.Length - 8);
                             editvid.isinterlaced = true;
                         }
                 }
                 dfile.Close();
             }
 
             frmMPEG.Close();
             return editvid;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Edit.vb" startline="3033" endline="3141">
<![CDATA[
     Function MPEGInfo() As String
         Dim frmMPEG As New MPEG
         Me.Enabled = False
         frmMPEG.Show()
         Application.DoEvents()
         If Not IO.File.Exists(editVid.mpeginfo) Then
             IO.Directory.SetCurrentDirectory(toolDir)
             Shell("cmd /c DGIndex -HIDE -EXIT -AT=[" & toolDir & "\template.avs] -AIF=[" & editVid.Video & "] -OF=[" & tempDir & "\" & editVid.key & "]", AppWinStyle.Hide, True)
         End If
         IO.Directory.SetCurrentDirectory(tempDir)
         Shell("cmd /c dir /b " & editVid.key & "*.ac3 " & editVid.key & "*.wav " & editVid.key & "*.dts " & editVid.key & "*.pcm " & editVid.key & "*.mp* " & editVid.key & "*.aac > " & editVid.key & ".trackinfo", AppWinStyle.Hide, True)
         editVid.trackinfo = tempDir & "\" & editVid.key & ".trackinfo"
         Dim tfile As IO.StreamReader = IO.File.OpenText(editVid.trackinfo), strtrack As String
         cboATrack.Items.Clear()
         cboATrack.Items.Add("Default")
         cboATrack.SelectedIndex = 0
         Do While tfile.Peek > -1
             strtrack = tfile.ReadLine
             cboATrack.Items.Add(Mid(strtrack, 9, Len(strtrack) - 8))
         Loop
         Do While tfile.Peek > -1
             strtrack = tfile.ReadLine
             cboATrack.Items.Add(Mid(strtrack, 9, Len(strtrack) - 8))
         Loop
         tfile.Close()
         If cboATrack.Items.Count > 2 Then
             lblATrack.Visible = True
             cboATrack.Visible = True
         End If
         frmMPEG.Close()
         Dim mread As IO.StreamReader = IO.File.OpenText(tempDir & "\" & editVid.key & ".avs")
         If mread.Peek > -1 Then editVid.mpgaudio = mread.ReadLine Else editVid.mpgaudio = ""
         editVid.defaultmpgaudio = editVid.mpgaudio
         If mread.Peek > -1 Then editVid.delay = Val(mread.ReadLine) Else editVid.delay = 0
         txtDelay.Text = editVid.delay * 1000
         mread.Close()
         editVid.audioinfo = Audioinfo(-1)
         Read_AudioInfo()
         IO.File.Delete(tempDir & "\" & editVid.key & ".avs")
         IO.Directory.SetCurrentDirectory(tempDir)
         'Dim awrite As IO.StreamWriter = IO.File.CreateText(editVid.key & ".avs")
         Dim awrite As New IO.StreamWriter(New IO.FileStream(editVid.key & ".avs", IO.FileMode.Create), System.Text.Encoding.Default)
 
         awrite.WriteLine("LoadPlugin(" & """" & toolDir & "\DGDecode.dll" & """" & ")")
         awrite.WriteLine("mpeg2source(" & """" & tempDir & "\" & editVid.key & ".d2v" & """" & ")")
         awrite.Close()
         IO.Directory.SetCurrentDirectory(toolDir)
         Shell("cmd /c ECHO y | avs2avi " & """" & tempDir & "\" & editVid.key & ".avs" & """" & " " & """" & tempDir & "\" & editVid.key & ".avi" & """" & " && mediainfo " & """" & tempDir & "\" & editVid.key & ".avi" & """" & " > " & """" & tempDir & "\" & editVid.key & ".mpeglength" & """" & "", AppWinStyle.Hide, True)
         If IO.File.Exists(tempDir & "\" & editVid.key & ".mpeglength") Then
             Dim sRead As IO.StreamReader = IO.File.OpenText(tempDir & "\" & editVid.key & ".mpeglength"), strInfo As String = ""
             Do While sRead.Peek > -1 And strInfo <> "Duration            "
                 Application.DoEvents()
                 strInfo = sRead.ReadLine()
                 Select Case Mid(strInfo, 1, 20)
                     Case "Duration            "
                         Dim strLength As String = Mid(strInfo, 36, strInfo.Length - 35)
                         Dim intLength As Integer = 0
                         Dim intCurser As Integer = 1
                         Dim sngHours As Single, sngMinutes As Single, sngSeconds As Single
                         lblLength.Text = Mid(strInfo, 36, strInfo.Length - 35)
                         For intLength = 2 To Len(strLength)
                             If Mid(strLength, intLength, 1) = "h" Then
                                 intCurser = intLength + 1
                                 sngHours = Val(Mid(strLength, 1, intLength - 1))
                             End If
                         Next
                         For intLength = intCurser + 1 To Len(strLength)
                             If Mid(strLength, intLength - 1, 2) = "mn" Then
                                 sngMinutes = Val(Mid(strLength, intCurser, intLength - 2))
                                 intCurser = intLength + 1
                             End If
                         Next
                         For intLength = intCurser + 1 To Len(strLength)
                             If Mid(strLength, intLength, 1) = "s" And Mid(strLength, intLength - 1, 2) <> "ms" Then
                                 sngSeconds = Val(Mid(strLength, intCurser, intLength - 1))
                                 intCurser = intLength + 1
                             End If
                         Next
                         editVid.mpeglength = sngHours * 3600 + sngMinutes * 60 + sngSeconds
                         editVid.length = editVid.mpeglength
                         trackbar.Maximum = editVid.length
                 End Select
             Loop
             Do While sRead.Peek > -1 And strInfo <> "Duration            "
                 Application.DoEvents()
                 strInfo = sRead.ReadLine()
                 Select Case Mid(strInfo, 1, 20)
                     Case "Duration            "
                         Dim strLength As String = Mid(strInfo, 36, strInfo.Length - 35)
                         Dim intLength As Integer = 0
                         Dim intCurser As Integer = 1
                         Dim sngHours As Single, sngMinutes As Single, sngSeconds As Single
                         lblLength.Text = Mid(strInfo, 36, strInfo.Length - 35)
                         For intLength = 2 To Len(strLength)
                             If Mid(strLength, intLength, 1) = "h" Then
                                 intCurser = intLength + 1
                                 sngHours = Val(Mid(strLength, 1, intLength - 1))
                             End If
                         Next
                         For intLength = intCurser + 1 To Len(strLength)
                             If Mid(strLength, intLength - 1, 2) = "mn" Then
                                 sngMinutes = Val(Mid(strLength, intCurser, intLength - 2))
                                 intCurser = intLength + 1
                             End If
                         Next
                         For intLength = intCurser + 1 To Len(strLength)
                             If Mid(strLength, intLength, 1) = "s" And Mid(strLength, intLength - 1, 2) <> "ms" Then
                                 sngSeconds = Val(Mid(strLength, intCurser, intLength - 1))
                                 intCurser = intLength + 1
                             End If
                         Next
                         editVid.mpeglength = sngHours * 3600 + sngMinutes * 60 + sngSeconds
                         editVid.length = editVid.mpeglength
                         trackbar.Maximum = editVid.length
                 End Select
             Loop
             sRead.Close()
         Else
             MsgBox("Error reading script. Make sure Avisynth is installed properly.")
         End If
 
         IO.File.Delete(tempDir & "\" & editVid.key & ".mpeglength")
         IO.File.Delete(tempDir & "\" & editVid.key & ".avs")
         IO.File.Delete(tempDir & "\" & editVid.key & ".avi")
 
         If Not editVid.film Then
             Dim strD2v As String
             Dim dfile As IO.StreamReader = IO.File.OpenText(tempDir & "\" & editVid.key & ".d2v")
 
             Do While dfile.Peek > -1
                 Application.DoEvents()
                 strD2v = dfile.ReadLine
                 If Len(strD2v) > 8 And Mid(strD2v, 1, 8) = "FINISHED" Then
                     If Mid(strD2v, Len(strD2v) - 3, 4) = "FILM" Then
                         editVid.interlaced = True
                         editVid.film = True
                         editVid.percentfilm = Mid(strD2v, 9, Len(strD2v) - 8)
                     End If
                 End If
             Loop
             Do While dfile.Peek > -1
                 Application.DoEvents()
                 strD2v = dfile.ReadLine
                 If Len(strD2v) > 8 And Mid(strD2v, 1, 8) = "FINISHED" Then
                     If Mid(strD2v, Len(strD2v) - 3, 4) = "FILM" Then
                         editVid.interlaced = True
                         editVid.film = True
                         editVid.percentfilm = Mid(strD2v, 9, Len(strD2v) - 8)
                     End If
                 End If
             Loop
             dfile.Close()
         End If
         Me.Enabled = True
         Me.Select()
         Return tempDir & "\" & editVid.key & ".d2v"
     End Function
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\MainForm.xaml.cs" startline="2144" endline="2250">
<![CDATA[
 
         public static video MPEGInfo(video editvid)
         {
             MPEG frmMPEG = new MPEG();
             string key = editvid.key;
             frmMPEG.Show();
             if (!File.Exists(editvid.mpeginfo) || editvid.mpeginfo == null)
             {
                 shell.StartInfo.Arguments = "/c DGIndex -HIDE -EXIT -AT=[" + toolDir + "\\template.avs] -AIF=[" + editvid.path + "] -OF=[" + tempDir + "\\" + key + "]";
                 shell.Start();
                 shell.WaitForExit();
             }
             shell.StartInfo.WorkingDirectory = tempDir;
             shell.StartInfo.Arguments = " /c dir /b " + key + "*.ac3 " + key + "*.wav " + key + "*.dts " + key + "*.pcm " + key + "*.mp* " + key + "*.aac > " + key + ".trackinfo";
             shell.Start();
             shell.WaitForExit();
             shell.StartInfo.WorkingDirectory = toolDir;
             editvid.trackinfo = tempDir + "\\" + key + ".trackinfo";
             string avs = tempDir + "\\" + key + ".avs";
             if (File.Exists(avs))
             {
                 StreamReader mread = File.OpenText(avs);
                 editvid.mpgaudio = (mread.Peek() > -1) ? mread.ReadLine() 
                 editvid.defaultmpgaudio = editvid.mpgaudio;
                 string s = (mread.Peek() > -1) ? mread.ReadLine() 
                 double d;
                 editvid.delay = Double.TryParse(s, out d) ? d 
                 editvid = AudioInfo(-1, editvid);
                 //Read_AudioInfo();
                 mread.Close();
                 File.Delete(avs);
             }
             else
                 MessageBox.Show("Error reading MPEG file!");
             StreamWriter awrite = File.CreateText(avs);
             editvid.mpeginfo = tempDir + "\\" + key + ".d2v";
             awrite.WriteLine(
                 "LoadPlugin(\"" + toolDir + "\\DGDecode.dll\")\r\n" +
                 "mpeg2source(\"" + editvid.mpeginfo + "\")");
             awrite.Close();
             string avi = tempDir + "\\" + key + ".avi", ml = tempDir + "\\" + key + ".mpeglength";
             shell.StartInfo.Arguments = " /c ECHO y | avs2avi \"" + avs + "\" \"" + avi + "\" && mediainfo \"" + avi + "\" > \"" + ml + "\"";
             shell.Start();
             shell.WaitForExit();
             File.Delete(avs);
             File.Delete(avi);
             if (File.Exists(ml))
             {
                 StreamReader sread = File.OpenText(ml);
                 string info = "";
                 while (sread.Peek() > -1 && info != "Duration            ")
                 {
                     info = sread.ReadLine();
                     if (info.Length > 35)
                     {
                         string sub = info.Substring(35, info.Length - 35);
                         if (info.Substring(0, 20) == "Duration            ")
                         {
                             double hours = 0, minutes = 0, seconds = 0;
                             int cursor = 0;
                             int i;
                             for (i = 1; i < sub.Length; i++)
                                 if (sub.Substring(i, 1) == "h")
                                 {
                                     hours = Convert.ToDouble(sub.Substring(0, i));
                                     cursor = i + 1;
                                 }
                             for (i = 1; i < sub.Length; i++)
                                 if (sub.Substring(i, 1) == "h")
                                 {
                                     hours = Convert.ToDouble(sub.Substring(0, i));
                                     cursor = i + 1;
                                 }
                             for (i = cursor + 1; i < (sub.Length - 1); i++)
                                 if (sub.Substring(i, 2) == "mn")
                                 {
                                     minutes = Convert.ToDouble(sub.Substring(cursor, i - cursor));
                                     cursor = i + 3;
                                 }
                             for (i = cursor + 1; i < (sub.Length - 1); i++)
                                 if (sub.Substring(i, 2) == "mn")
                                 {
                                     minutes = Convert.ToDouble(sub.Substring(cursor, i - cursor));
                                     cursor = i + 3;
                                 }
                             for (i = cursor + 1; i < sub.Length; i++)
                                 if (sub.Substring(i, 1) == "s" && sub.Substring(i - 1, 2) != "ms")
                                 {
                                     seconds = Convert.ToDouble(sub.Substring(cursor, i - cursor));
                                     cursor = i + 1;
                                 }
                             for (i = cursor + 1; i < sub.Length; i++)
                                 if (sub.Substring(i, 1) == "s" && sub.Substring(i - 1, 2) != "ms")
                                 {
                                     seconds = Convert.ToDouble(sub.Substring(cursor, i - cursor));
                                     cursor = i + 1;
                                 }
                             editvid.length = hours * 3600 + minutes * 60 + seconds;
                             editvid.mpeglength = editvid.length;
                         }
                     }
                 }
                 while (sread.Peek() > -1 && info != "Duration            ")
                 {
                     info = sread.ReadLine();
                     if (info.Length > 35)
                     {
                         string sub = info.Substring(35, info.Length - 35);
                         if (info.Substring(0, 20) == "Duration            ")
                         {
                             double hours = 0, minutes = 0, seconds = 0;
                             int cursor = 0;
                             int i;
                             for (i = 1; i < sub.Length; i++)
                                 if (sub.Substring(i, 1) == "h")
                                 {
                                     hours = Convert.ToDouble(sub.Substring(0, i));
                                     cursor = i + 1;
                                 }
                             for (i = cursor + 1; i < (sub.Length - 1); i++)
                                 if (sub.Substring(i, 2) == "mn")
                                 {
                                     minutes = Convert.ToDouble(sub.Substring(cursor, i - cursor));
                                     cursor = i + 3;
                                 }
                             for (i = cursor + 1; i < sub.Length; i++)
                                 if (sub.Substring(i, 1) == "s" && sub.Substring(i - 1, 2) != "ms")
                                 {
                                     seconds = Convert.ToDouble(sub.Substring(cursor, i - cursor));
                                     cursor = i + 1;
                                 }
                             editvid.length = hours * 3600 + minutes * 60 + seconds;
                             editvid.mpeglength = editvid.length;
                         }
                     }
                 }
                 sread.Close();
                 File.Delete(ml);
             }
             if (!editvid.film && File.Exists(editvid.mpeginfo))
             {
                 StreamReader dfile = File.OpenText(editvid.mpeginfo);
                 while (dfile.Peek() > -1)
                 {
                     string d2v = dfile.ReadLine();
                     if (d2v.Length > 8)
                         if (d2v.Substring(0, 8) == "FINISHED" && d2v.Substring(d2v.Length - 4, 4) == "FILM")
                         {
                             editvid.film = true;
                             editvid.percentfilm = d2v.Substring(8, d2v.Length - 8);
                             editvid.isinterlaced = true;
                         }
                 }
                 while (dfile.Peek() > -1)
                 {
                     string d2v = dfile.ReadLine();
                     if (d2v.Length > 8)
                         if (d2v.Substring(0, 8) == "FINISHED" && d2v.Substring(d2v.Length - 4, 4) == "FILM")
                         {
                             editvid.film = true;
                             editvid.percentfilm = d2v.Substring(8, d2v.Length - 8);
                             editvid.isinterlaced = true;
                         }
                 }
                 dfile.Close();
             }
 
             frmMPEG.Close();
             return editvid;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MainForm.vb" startline="4257" endline="4362">
<![CDATA[
     Function MPEGInfo() As String
         Dim frmMPEG As New MPEG
         Me.Enabled = False
         frmMPEG.Show()
         Application.DoEvents()
         If Not io.File.Exists(editvid.mpeginfo) Then
             io.Directory.SetCurrentDirectory(tooldir)
             shell("cmd /c DGIndex -HIDE -EXIT -AT=[" & tooldir & "\template.avs] -AIF=[" & editvid.video & "] -OF=[" & tempdir & "\" & editvid.key & "]", AppWinStyle.Hide, True)
         End If
         io.Directory.SetCurrentDirectory(tempdir)
         shell("cmd /c dir /b " & editvid.key & "*.ac3 " & editvid.key & "*.wav " & editvid.key & "*.dts " & editvid.key & "*.pcm " & editvid.key & "*.mp* " & editvid.key & "*.aac > " & editvid.key & ".trackinfo", AppWinStyle.Hide, True)
         editvid.trackinfo = tempdir & "\" & editvid.key & ".trackinfo"
         Dim tfile As IO.StreamReader = io.File.OpenText(editvid.trackinfo), strtrack As String
         cboATrack.Items.Clear()
         cboATrack.Items.Add("Default")
         cboATrack.SelectedIndex = 0
         Do While tfile.Peek > -1
             strTrack = tfile.ReadLine
             cboATrack.Items.Add(mid(strTrack, 9, len(strTrack) - 8))
         Loop
         Do While tfile.Peek > -1
             strTrack = tfile.ReadLine
             cboATrack.Items.Add(mid(strTrack, 9, len(strTrack) - 8))
         Loop
         tfile.Close()
         If cboATrack.Items.Count > 2 Then
             lblATrack.Visible = True
             cboATrack.Visible = True
         End If
         frmMPEG.Close()
         Dim mread As IO.StreamReader = IO.File.OpenText(tempDir & "\" & editVid.key & ".avs")
         If mread.Peek > -1 Then editVid.mpgaudio = mread.ReadLine Else editVid.mpgaudio = ""
         editVid.defaultmpgaudio = editVid.mpgaudio
         If mread.Peek > -1 Then editVid.delay = Val(mread.ReadLine) Else editVid.delay = 0
         txtDelay.Text = editVid.delay * 1000
         mread.Close()
         editVid.audioinfo = Audioinfo(-1)
         Read_AudioInfo()
         io.File.Delete(tempdir & "\" & editvid.key & ".avs")
         io.Directory.SetCurrentDirectory(tempdir)
         'Dim awrite As IO.StreamWriter = IO.File.CreateText(editVid.key & ".avs")
         Dim awrite As New IO.StreamWriter(New IO.FileStream(editVid.key & ".avs", IO.FileMode.Create), System.Text.Encoding.Default)
 
         aWrite.WriteLine("LoadPlugin(" & """" & tooldir & "\DGDecode.dll" & """" & ")")
         aWrite.WriteLine("mpeg2source(" & """" & tempdir & "\" & editvid.key & ".d2v" & """" & ")")
         awrite.Close()
         io.Directory.SetCurrentDirectory(tooldir)
         shell("cmd /c ECHO y | avs2avi " & """" & tempdir & "\" & editvid.key & ".avs" & """" & " " & """" & tempdir & "\" & editvid.key & ".avi" & """" & " && mediainfo " & """" & tempdir & "\" & editvid.key & ".avi" & """" & " > " & """" & tempdir & "\" & editvid.key & ".mpeglength" & """" & "", AppWinStyle.Hide, True)
         If IO.File.Exists(tempDir & "\" & editVid.key & ".mpeglength") Then
             Dim sRead As IO.StreamReader = IO.File.OpenText(tempDir & "\" & editVid.key & ".mpeglength"), strInfo As String = ""
             Do While sRead.Peek > -1 And strInfo <> "Duration            "
                 Application.DoEvents()
                 strInfo = sRead.ReadLine()
                 Select Case Mid(strInfo, 1, 20)
                     Case "Duration            "
                         Dim strLength As String = Mid(strInfo, 36, strInfo.Length - 35)
                         Dim intLength As Integer = 0
                         Dim intCurser As Integer = 1
                         Dim sngHours As Single, sngMinutes As Single, sngSeconds As Single
                         lblLength.Text = Mid(strInfo, 36, strInfo.Length - 35)
                         For intLength = 2 To Len(strLength)
                             If Mid(strLength, intLength, 1) = "h" Then
                                 intCurser = intLength + 1
                                 sngHours = Val(Mid(strLength, 1, intLength - 1))
                             End If
                         Next
                         For intLength = intCurser + 1 To Len(strLength)
                             If Mid(strLength, intLength - 1, 2) = "mn" Then
                                 sngMinutes = Val(Mid(strLength, intCurser, intLength - 2))
                                 intCurser = intLength + 1
                             End If
                         Next
                         For intLength = intCurser + 1 To Len(strLength)
                             If Mid(strLength, intLength, 1) = "s" And Mid(strLength, intLength - 1, 2) <> "ms" Then
                                 sngSeconds = Val(Mid(strLength, intCurser, intLength - 1))
                                 intCurser = intLength + 1
                             End If
                         Next
                         editVid.mpeglength = sngHours * 3600 + sngMinutes * 60 + sngSeconds
                         editVid.length = editVid.mpeglength
                 End Select
             Loop
             Do While sRead.Peek > -1 And strInfo <> "Duration            "
                 Application.DoEvents()
                 strInfo = sRead.ReadLine()
                 Select Case Mid(strInfo, 1, 20)
                     Case "Duration            "
                         Dim strLength As String = Mid(strInfo, 36, strInfo.Length - 35)
                         Dim intLength As Integer = 0
                         Dim intCurser As Integer = 1
                         Dim sngHours As Single, sngMinutes As Single, sngSeconds As Single
                         lblLength.Text = Mid(strInfo, 36, strInfo.Length - 35)
                         For intLength = 2 To Len(strLength)
                             If Mid(strLength, intLength, 1) = "h" Then
                                 intCurser = intLength + 1
                                 sngHours = Val(Mid(strLength, 1, intLength - 1))
                             End If
                         Next
                         For intLength = intCurser + 1 To Len(strLength)
                             If Mid(strLength, intLength - 1, 2) = "mn" Then
                                 sngMinutes = Val(Mid(strLength, intCurser, intLength - 2))
                                 intCurser = intLength + 1
                             End If
                         Next
                         For intLength = intCurser + 1 To Len(strLength)
                             If Mid(strLength, intLength, 1) = "s" And Mid(strLength, intLength - 1, 2) <> "ms" Then
                                 sngSeconds = Val(Mid(strLength, intCurser, intLength - 1))
                                 intCurser = intLength + 1
                             End If
                         Next
                         editVid.mpeglength = sngHours * 3600 + sngMinutes * 60 + sngSeconds
                         editVid.length = editVid.mpeglength
                 End Select
             Loop
             sRead.Close()
         Else
             MsgBox("Error reading script. Make sure Avisynth is installed properly.")
         End If
         io.File.Delete(tempdir & "\" & editvid.key & ".mpeglength")
         io.File.Delete(tempdir & "\" & editvid.key & ".avs")
         io.File.Delete(tempdir & "\" & editvid.key & ".avi")
 
         If Not editvid.film Then
             Dim strD2v As String
             Dim dfile As IO.StreamReader = io.File.OpenText(tempdir & "\" & editvid.key & ".d2v")
             Do While dFile.Peek > -1
                 application.DoEvents()
                 strD2v = dFile.ReadLine
                 If len(strD2v) > 8 And mid(strD2v, 1, 8) = "FINISHED" Then
                     If Mid(strD2v, Len(strD2v) - 3, 4) = "FILM" Then
                         editVid.interlaced = True
                         editVid.film = True
                         editVid.percentfilm = Mid(strD2v, 9, Len(strD2v) - 8)
                     End If
                 End If
             Loop
             Do While dFile.Peek > -1
                 application.DoEvents()
                 strD2v = dFile.ReadLine
                 If len(strD2v) > 8 And mid(strD2v, 1, 8) = "FINISHED" Then
                     If Mid(strD2v, Len(strD2v) - 3, 4) = "FILM" Then
                         editVid.interlaced = True
                         editVid.film = True
                         editVid.percentfilm = Mid(strD2v, 9, Len(strD2v) - 8)
                     End If
                 End If
             Loop
             dfile.Close()
         End If
         Me.Enabled = True
         Me.Select()
         Return tempdir & "\" & editvid.key & ".d2v"
     End Function
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\MainForm.xaml.cs" startline="2144" endline="2250">
<![CDATA[
 
         public static video MPEGInfo(video editvid)
         {
             MPEG frmMPEG = new MPEG();
             string key = editvid.key;
             frmMPEG.Show();
             if (!File.Exists(editvid.mpeginfo) || editvid.mpeginfo == null)
             {
                 shell.StartInfo.Arguments = "/c DGIndex -HIDE -EXIT -AT=[" + toolDir + "\\template.avs] -AIF=[" + editvid.path + "] -OF=[" + tempDir + "\\" + key + "]";
                 shell.Start();
                 shell.WaitForExit();
             }
             shell.StartInfo.WorkingDirectory = tempDir;
             shell.StartInfo.Arguments = " /c dir /b " + key + "*.ac3 " + key + "*.wav " + key + "*.dts " + key + "*.pcm " + key + "*.mp* " + key + "*.aac > " + key + ".trackinfo";
             shell.Start();
             shell.WaitForExit();
             shell.StartInfo.WorkingDirectory = toolDir;
             editvid.trackinfo = tempDir + "\\" + key + ".trackinfo";
             string avs = tempDir + "\\" + key + ".avs";
             if (File.Exists(avs))
             {
                 StreamReader mread = File.OpenText(avs);
                 editvid.mpgaudio = (mread.Peek() > -1) ? mread.ReadLine() 
                 editvid.defaultmpgaudio = editvid.mpgaudio;
                 string s = (mread.Peek() > -1) ? mread.ReadLine() 
                 double d;
                 editvid.delay = Double.TryParse(s, out d) ? d 
                 editvid = AudioInfo(-1, editvid);
                 //Read_AudioInfo();
                 mread.Close();
                 File.Delete(avs);
             }
             else
                 MessageBox.Show("Error reading MPEG file!");
             StreamWriter awrite = File.CreateText(avs);
             editvid.mpeginfo = tempDir + "\\" + key + ".d2v";
             awrite.WriteLine(
                 "LoadPlugin(\"" + toolDir + "\\DGDecode.dll\")\r\n" +
                 "mpeg2source(\"" + editvid.mpeginfo + "\")");
             awrite.Close();
             string avi = tempDir + "\\" + key + ".avi", ml = tempDir + "\\" + key + ".mpeglength";
             shell.StartInfo.Arguments = " /c ECHO y | avs2avi \"" + avs + "\" \"" + avi + "\" && mediainfo \"" + avi + "\" > \"" + ml + "\"";
             shell.Start();
             shell.WaitForExit();
             File.Delete(avs);
             File.Delete(avi);
             if (File.Exists(ml))
             {
                 StreamReader sread = File.OpenText(ml);
                 string info = "";
                 while (sread.Peek() > -1 && info != "Duration            ")
                 {
                     info = sread.ReadLine();
                     if (info.Length > 35)
                     {
                         string sub = info.Substring(35, info.Length - 35);
                         if (info.Substring(0, 20) == "Duration            ")
                         {
                             double hours = 0, minutes = 0, seconds = 0;
                             int cursor = 0;
                             int i;
                             for (i = 1; i < sub.Length; i++)
                                 if (sub.Substring(i, 1) == "h")
                                 {
                                     hours = Convert.ToDouble(sub.Substring(0, i));
                                     cursor = i + 1;
                                 }
                             for (i = 1; i < sub.Length; i++)
                                 if (sub.Substring(i, 1) == "h")
                                 {
                                     hours = Convert.ToDouble(sub.Substring(0, i));
                                     cursor = i + 1;
                                 }
                             for (i = cursor + 1; i < (sub.Length - 1); i++)
                                 if (sub.Substring(i, 2) == "mn")
                                 {
                                     minutes = Convert.ToDouble(sub.Substring(cursor, i - cursor));
                                     cursor = i + 3;
                                 }
                             for (i = cursor + 1; i < (sub.Length - 1); i++)
                                 if (sub.Substring(i, 2) == "mn")
                                 {
                                     minutes = Convert.ToDouble(sub.Substring(cursor, i - cursor));
                                     cursor = i + 3;
                                 }
                             for (i = cursor + 1; i < sub.Length; i++)
                                 if (sub.Substring(i, 1) == "s" && sub.Substring(i - 1, 2) != "ms")
                                 {
                                     seconds = Convert.ToDouble(sub.Substring(cursor, i - cursor));
                                     cursor = i + 1;
                                 }
                             for (i = cursor + 1; i < sub.Length; i++)
                                 if (sub.Substring(i, 1) == "s" && sub.Substring(i - 1, 2) != "ms")
                                 {
                                     seconds = Convert.ToDouble(sub.Substring(cursor, i - cursor));
                                     cursor = i + 1;
                                 }
                             editvid.length = hours * 3600 + minutes * 60 + seconds;
                             editvid.mpeglength = editvid.length;
                         }
                     }
                 }
                 while (sread.Peek() > -1 && info != "Duration            ")
                 {
                     info = sread.ReadLine();
                     if (info.Length > 35)
                     {
                         string sub = info.Substring(35, info.Length - 35);
                         if (info.Substring(0, 20) == "Duration            ")
                         {
                             double hours = 0, minutes = 0, seconds = 0;
                             int cursor = 0;
                             int i;
                             for (i = 1; i < sub.Length; i++)
                                 if (sub.Substring(i, 1) == "h")
                                 {
                                     hours = Convert.ToDouble(sub.Substring(0, i));
                                     cursor = i + 1;
                                 }
                             for (i = cursor + 1; i < (sub.Length - 1); i++)
                                 if (sub.Substring(i, 2) == "mn")
                                 {
                                     minutes = Convert.ToDouble(sub.Substring(cursor, i - cursor));
                                     cursor = i + 3;
                                 }
                             for (i = cursor + 1; i < sub.Length; i++)
                                 if (sub.Substring(i, 1) == "s" && sub.Substring(i - 1, 2) != "ms")
                                 {
                                     seconds = Convert.ToDouble(sub.Substring(cursor, i - cursor));
                                     cursor = i + 1;
                                 }
                             editvid.length = hours * 3600 + minutes * 60 + seconds;
                             editvid.mpeglength = editvid.length;
                         }
                     }
                 }
                 sread.Close();
                 File.Delete(ml);
             }
             if (!editvid.film && File.Exists(editvid.mpeginfo))
             {
                 StreamReader dfile = File.OpenText(editvid.mpeginfo);
                 while (dfile.Peek() > -1)
                 {
                     string d2v = dfile.ReadLine();
                     if (d2v.Length > 8)
                         if (d2v.Substring(0, 8) == "FINISHED" && d2v.Substring(d2v.Length - 4, 4) == "FILM")
                         {
                             editvid.film = true;
                             editvid.percentfilm = d2v.Substring(8, d2v.Length - 8);
                             editvid.isinterlaced = true;
                         }
                 }
                 while (dfile.Peek() > -1)
                 {
                     string d2v = dfile.ReadLine();
                     if (d2v.Length > 8)
                         if (d2v.Substring(0, 8) == "FINISHED" && d2v.Substring(d2v.Length - 4, 4) == "FILM")
                         {
                             editvid.film = true;
                             editvid.percentfilm = d2v.Substring(8, d2v.Length - 8);
                             editvid.isinterlaced = true;
                         }
                 }
                 dfile.Close();
             }
 
             frmMPEG.Close();
             return editvid;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Testing.vb" startline="1138" endline="1227">
<![CDATA[
 	
 	Function MPEGInfo() As String
 		Dim frmMPEG As New MPEG
 		me.Enabled=false
 		frmMPEG.Show
         Application.DoEvents()
         If Not io.File.Exists(editvid.mpeginfo) Then
         	io.Directory.SetCurrentDirectory(tooldir)
         	shell("cmd /c DGIndex -HIDE -EXIT -AT=[" & tooldir & "\template.avs] -AIF=[" & editvid.video & "] -OF=[" & tempdir & "\" & editvid.key & "]", AppWinStyle.Hide,True)
         End If
         io.Directory.SetCurrentDirectory(tempdir)
     	shell("cmd /c dir /b " & editvid.key & "*.ac3 " & editvid.key & "*.wav " & editvid.key & "*.dts " & editvid.key & "*.pcm " & editvid.key & "*.mp* " & editvid.key & "*.aac > " & editvid.key & ".trackinfo", AppWinStyle.Hide,True)
     	editvid.trackinfo=tempdir & "\" & editvid.key & ".trackinfo"
     	frmMPEG.Close
         Dim mread As IO.StreamReader = IO.File.OpenText(tempDir & "\" & editVid.key & ".avs")
         If mread.Peek > -1 Then editVid.mpgaudio = mread.ReadLine Else editVid.mpgaudio = ""
         editVid.defaultmpgaudio = editVid.mpgaudio
         If mread.Peek > -1 Then editVid.delay = Val(mread.ReadLine) Else editVid.delay = ""
         mread.Close()
         editVid.audioinfo = Audioinfo(-1)
         Read_AudioInfo()
     	io.File.Delete(tempdir & "\" & editvid.key & ".avs")   	
     	io.Directory.SetCurrentDirectory(tempdir)
         'Dim awrite As IO.StreamWriter = IO.File.CreateText(editVid.key & ".avs")
         Dim awrite As New IO.StreamWriter(New IO.FileStream(editVid.key & ".avs", IO.FileMode.Create), System.Text.Encoding.Default)
 
     	aWrite.WriteLine("LoadPlugin(" & """" & tooldir & "\DGDecode.dll" & """" & ")")
 		aWrite.WriteLine("mpeg2source(" & """" & tempdir & "\" & editvid.key & ".d2v" & """" & ")")
 		awrite.Close
 		io.Directory.SetCurrentDirectory(tooldir)
 		shell("cmd /c ECHO y | avs2avi " & """" & tempdir & "\" & editvid.key & ".avs" & """" & " " & """" & tempdir & "\" & editvid.key & ".avi" & """" & " && mediainfo " & """" & tempdir & "\" & editvid.key & ".avi" & """" & " > " & """" & tempdir & "\" & editvid.key & ".mpeglength" & """" & "", AppWinStyle.Hide,True)
 		Dim sRead As IO.StreamReader = io.File.OpenText(tempdir & "\" & editvid.key & ".mpeglength"), strInfo as String = ""
 		Do While sread.Peek>-1 And strinfo<>"Duration            "
 			application.DoEvents
 			strInfo=sRead.ReadLine()
 				Select Case mid(strinfo,1,20)
 					Case "Duration            "
 						Dim strLength As String = mid(strinfo,36,strinfo.Length-35)
 						Dim intLength As Integer = 0
 						Dim intCurser As Integer = 1
 						Dim sngHours As Single, sngMinutes As Single, sngSeconds As Single
 						lbllength.Text=mid(strinfo,36,strinfo.Length-35)
 						For intLength = 2 To len(strLength)
 							If mid(strlength,intLength,1)="h" Then
 								intcurser=intLength+1
 								snghours=val(mid(strLength,1,intLength-1))
 							End If
 						Next
 						For intLength = intCurser+1 To len(strLength)
 							If mid(strlength,intLength-1,2)="mn" Then
 								sngMinutes=val(mid(strLength,intCurser,intLength-2))
 								intcurser=intLength+1
 							End If
 						Next
 						For intLength = intCurser+1 To len(strLength)
 							If mid(strlength,intLength,1)="s" and  mid(strlength,intLength-1,2) <> "ms" Then
 								sngSeconds=val(mid(strLength,intCurser,intLength-1))
 								intcurser=intLength+1
 							End If
 						Next
 						editvid.mpeglength=sngHours*3600+sngMinutes*60+sngSeconds
 						editvid.length=editvid.mpeglength
 				End Select			
 		Loop
 		Do While sread.Peek>-1 And strinfo<>"Duration            "
 			application.DoEvents
 			strInfo=sRead.ReadLine()
 				Select Case mid(strinfo,1,20)
 					Case "Duration            "
 						Dim strLength As String = mid(strinfo,36,strinfo.Length-35)
 						Dim intLength As Integer = 0
 						Dim intCurser As Integer = 1
 						Dim sngHours As Single, sngMinutes As Single, sngSeconds As Single
 						lbllength.Text=mid(strinfo,36,strinfo.Length-35)
 						For intLength = 2 To len(strLength)
 							If mid(strlength,intLength,1)="h" Then
 								intcurser=intLength+1
 								snghours=val(mid(strLength,1,intLength-1))
 							End If
 						Next
 						For intLength = intCurser+1 To len(strLength)
 							If mid(strlength,intLength-1,2)="mn" Then
 								sngMinutes=val(mid(strLength,intCurser,intLength-2))
 								intcurser=intLength+1
 							End If
 						Next
 						For intLength = intCurser+1 To len(strLength)
 							If mid(strlength,intLength,1)="s" and  mid(strlength,intLength-1,2) <> "ms" Then
 								sngSeconds=val(mid(strLength,intCurser,intLength-1))
 								intcurser=intLength+1
 							End If
 						Next
 						editvid.mpeglength=sngHours*3600+sngMinutes*60+sngSeconds
 						editvid.length=editvid.mpeglength
 				End Select			
 		Loop
 		sread.Close
 		io.File.Delete(tempdir & "\" & editvid.key & ".mpeglength")
     	io.File.Delete(tempdir & "\" & editvid.key & ".avs")
     	io.File.Delete(tempdir & "\" & editvid.key & ".avi")    
     	
     	If Not editvid.film Then
     		Dim strD2v As String
     		Dim dfile As IO.StreamReader = io.File.OpenText(tempdir & "\" & editvid.key & ".d2v")
     		
     		Do While dFile.Peek>-1
 				application.DoEvents
 				strD2v=dFile.ReadLine
 				If len(strD2v)>8 And mid(strD2v,1,8)="FINISHED" Then 
                     If Mid(strD2v, Len(strD2v) - 3, 4) = "FILM" Then
                         editVid.interlaced = True
                         editVid.film = True
                         editVid.percentfilm = Mid(strD2v, 9, Len(strD2v) - 8)
                     End If
 				End If
             Loop
     		Do While dFile.Peek>-1
 				application.DoEvents
 				strD2v=dFile.ReadLine
 				If len(strD2v)>8 And mid(strD2v,1,8)="FINISHED" Then 
                     If Mid(strD2v, Len(strD2v) - 3, 4) = "FILM" Then
                         editVid.interlaced = True
                         editVid.film = True
                         editVid.percentfilm = Mid(strD2v, 9, Len(strD2v) - 8)
                     End If
 				End If
             Loop
             dfile.Close()
     	End If
     	Me.Enabled=True
     	Me.Select
     	Return tempdir & "\" & editvid.key & ".d2v"
     End Function
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\MainForm.xaml.cs" startline="2334" endline="2398">
<![CDATA[
 
         public static video AVSAudio(video editvid, int track)
         {
             edittracklist = editvid.tracks;
             string ai = tempDir + "\\" + editvid.key + ".audioinfo";
             AVS2WAV frmAVS = new AVS2WAV();
             frmAVS.Show();
             StreamWriter atest = File.CreateText(tempDir + "\\atest.avs");
             atest.WriteLine(
                 "Import(\"" + editvid.path + "\")" + "\r\n" +
                 "Trim(0,30)");
             atest.Close();
             shell.StartInfo.Arguments = "/c test \"" + tempDir + "\\atest.avs\" > \"" + tempDir + "\\atest.txt\"";
             shell.Start();
             shell.WaitForExit();
             StreamReader aread = File.OpenText(tempDir + "\\atest.txt");
             bool err = false;
             string strerr = "";
             while (aread.Peek() > -1 && !err)
             {
                 strerr = aread.ReadLine();
                 if (strerr.Length > 0)
                     if (strerr.Length > 6)
                         err = strerr.Substring(0, 7) != "Reading";
                     else
                         err = true;
             }
             while (aread.Peek() > -1 && !err)
             {
                 strerr = aread.ReadLine();
                 if (strerr.Length > 0)
                     if (strerr.Length > 6)
                         err = strerr.Substring(0, 7) != "Reading";
                     else
                         err = true;
             }
             if (err)
                 while (aread.Peek() > -1)
                     strerr = strerr + "\r\n" + aread.ReadLine();
                 while (aread.Peek() > -1)
                     strerr = strerr + "\r\n" + aread.ReadLine();
             else
             {
                 shell.StartInfo.Arguments = "/c avs2wav.exe \"" + editvid.path + "\" \"" + tempDir + "\\audio.wav\" && mediainfo \"" + tempDir + "\\audio.wav\" \"--Language=file
                 shell.Start();
                 shell.WaitForExit();
             }
             aread.Close();
             if (File.Exists(tempDir + "\\audio.wav"))
             {
                 editvid.audio = editvid.path;
                 editvid.avsaudio = 1;
                 editvid.separatefile = true;
                 track newtrack = new track();
                 newtrack.path = editvid.path;
                 newtrack.delay = 0;
                 newtrack.downmix = editvid.Downmix;
                 newtrack.custombitrate = editvid.CustomABitrate;
                 newtrack.bitrate = editvid.aBitrate;
                 newtrack.directshow = editvid.directshow;
                 newtrack.AACMode = editvid.AACMode;
                 edittracklist[track] = newtrack;
                 editvid.tracks = edittracklist;
             }
             else
             {
                 editvid.avsaudio = 2;
                 MessageBox.Show("No audio stream detected in AVS Script");
             }
             frmAVS.Close();
             if (editvid.avsaudio == 1)
                 editvid.audioinfo = ai;
             else
                 editvid.audioinfo = "";
             return editvid;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Edit.vb" startline="565" endline="623">
<![CDATA[
 	
 	Function AVSAudio As String		
 		Dim frmAVS As New AVSWAV
 		me.Enabled=false
 		frmAVS.Show
 		frmavs.Refresh
         IO.Directory.SetCurrentDirectory(toolDir)
         Dim tread As IO.StreamReader, strErr As String, boolerr As Boolean
         Dim atest As IO.StreamWriter
         'atest = IO.File.CreateText(tempDir & "\atest.avs")
         atest = New IO.StreamWriter(New IO.FileStream(tempDir & "\atest.avs", IO.FileMode.Create), System.Text.Encoding.Default)
 
         atest.WriteLine("Import(" & """" & editVid.Video & """" & ")")
         atest.WriteLine("Trim(0," & Math.Round(editVid.outputfps, 0) & ")")
         atest.WriteLine("DelayAudio(0)")
         atest.Close()
         IO.Directory.SetCurrentDirectory(toolDir)
         Shell("cmd /c test " & """" & tempDir & "\atest.avs" & """" & "> " & """" & tempDir & "\atest.txt" & """", AppWinStyle.Hide, True)
         tread = IO.File.OpenText(tempDir & "\atest.txt")
         strErr = ""
         boolerr = False
         Do While tread.Peek > -1 And Not boolerr
             strErr = tread.ReadLine
             If Len(strErr) >= 0 Then
                 If Len(strErr) >= 7 Then
                     If Mid(strErr, 1, 7) <> "Reading" Then
                         boolerr = True
                     Else
                         boolerr = False
                     End If
                 Else
                     boolerr = True
                 End If
             End If
         Loop
         Do While tread.Peek > -1 And Not boolerr
             strErr = tread.ReadLine
             If Len(strErr) >= 0 Then
                 If Len(strErr) >= 7 Then
                     If Mid(strErr, 1, 7) <> "Reading" Then
                         boolerr = True
                     Else
                         boolerr = False
                     End If
                 Else
                     boolerr = True
                 End If
             End If
         Loop
         If boolerr = True Then
             Do While tread.Peek > -1
                 strErr = strErr & vbNewLine & tread.ReadLine
             Loop
             Do While tread.Peek > -1
                 strErr = strErr & vbNewLine & tread.ReadLine
             Loop
             GoTo noaudio
         End If
         tread.Close()
 
 
 
         Shell("cmd /c avs2wav " & """" & tempDir & "\atest.avs" & """" & " " & """" & tempDir & "\audio.wav" & """" & " && mediainfo " & """" & tempDir & "\audio.wav" & """" & " " & """" & "--Language=file
 noaudio
         IO.File.Delete(tempDir & "\atest.avs")
         IO.File.Delete(tempDir & "\atest.txt")
         If IO.File.Exists(tempDir & "\audio.wav") Then
             editVid.avsaudio = 1
         Else
             editVid.avsaudio = 2
             MsgBox("No audio stream detected in AVS Script")
         End If
         frmAVS.Close()
         Me.Enabled = True
         If editVid.avsaudio = 1 Then Return tempDir & "\" & editVid.key & ".audioinfo" Else Return ""
     End Function
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\MainForm.xaml.cs" startline="2334" endline="2398">
<![CDATA[
 
         public static video AVSAudio(video editvid, int track)
         {
             edittracklist = editvid.tracks;
             string ai = tempDir + "\\" + editvid.key + ".audioinfo";
             AVS2WAV frmAVS = new AVS2WAV();
             frmAVS.Show();
             StreamWriter atest = File.CreateText(tempDir + "\\atest.avs");
             atest.WriteLine(
                 "Import(\"" + editvid.path + "\")" + "\r\n" +
                 "Trim(0,30)");
             atest.Close();
             shell.StartInfo.Arguments = "/c test \"" + tempDir + "\\atest.avs\" > \"" + tempDir + "\\atest.txt\"";
             shell.Start();
             shell.WaitForExit();
             StreamReader aread = File.OpenText(tempDir + "\\atest.txt");
             bool err = false;
             string strerr = "";
             while (aread.Peek() > -1 && !err)
             {
                 strerr = aread.ReadLine();
                 if (strerr.Length > 0)
                     if (strerr.Length > 6)
                         err = strerr.Substring(0, 7) != "Reading";
                     else
                         err = true;
             }
             while (aread.Peek() > -1 && !err)
             {
                 strerr = aread.ReadLine();
                 if (strerr.Length > 0)
                     if (strerr.Length > 6)
                         err = strerr.Substring(0, 7) != "Reading";
                     else
                         err = true;
             }
             if (err)
                 while (aread.Peek() > -1)
                     strerr = strerr + "\r\n" + aread.ReadLine();
                 while (aread.Peek() > -1)
                     strerr = strerr + "\r\n" + aread.ReadLine();
             else
             {
                 shell.StartInfo.Arguments = "/c avs2wav.exe \"" + editvid.path + "\" \"" + tempDir + "\\audio.wav\" && mediainfo \"" + tempDir + "\\audio.wav\" \"--Language=file
                 shell.Start();
                 shell.WaitForExit();
             }
             aread.Close();
             if (File.Exists(tempDir + "\\audio.wav"))
             {
                 editvid.audio = editvid.path;
                 editvid.avsaudio = 1;
                 editvid.separatefile = true;
                 track newtrack = new track();
                 newtrack.path = editvid.path;
                 newtrack.delay = 0;
                 newtrack.downmix = editvid.Downmix;
                 newtrack.custombitrate = editvid.CustomABitrate;
                 newtrack.bitrate = editvid.aBitrate;
                 newtrack.directshow = editvid.directshow;
                 newtrack.AACMode = editvid.AACMode;
                 edittracklist[track] = newtrack;
                 editvid.tracks = edittracklist;
             }
             else
             {
                 editvid.avsaudio = 2;
                 MessageBox.Show("No audio stream detected in AVS Script");
             }
             frmAVS.Close();
             if (editvid.avsaudio == 1)
                 editvid.audioinfo = ai;
             else
                 editvid.audioinfo = "";
             return editvid;
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MainForm.vb" startline="3177" endline="3235">
<![CDATA[
 
     Function AVSAudio() As String
         Dim frmAVS As New AVSWAV
         Me.Enabled = False
         frmAVS.Show()
         frmAVS.Refresh()
         IO.Directory.SetCurrentDirectory(toolDir)
         Dim tread As IO.StreamReader, strErr As String, boolerr As Boolean
         Dim atest As IO.StreamWriter
         'atest = IO.File.CreateText(tempDir & "\atest.avs")
         atest = New IO.StreamWriter(New IO.FileStream(tempDir & "\atest.avs", IO.FileMode.Create), System.Text.Encoding.Default)
 
         atest.WriteLine("Import(" & """" & editVid.Video & """" & ")")
         atest.WriteLine("Trim(0," & Math.Round(editVid.outputfps, 0) & ")")
         atest.WriteLine("DelayAudio(0)")
         atest.Close()
         IO.Directory.SetCurrentDirectory(toolDir)
         Shell("cmd /c test " & """" & tempDir & "\atest.avs" & """" & "> " & """" & tempDir & "\atest.txt" & """", AppWinStyle.Hide, True)
         tread = IO.File.OpenText(tempDir & "\atest.txt")
         strErr = ""
         boolerr = False
         Do While tread.Peek > -1 And Not boolerr
             strErr = tread.ReadLine
             If Len(strErr) >= 0 Then
                 If Len(strErr) >= 7 Then
                     If Mid(strErr, 1, 7) <> "Reading" Then
                         boolerr = True
                     Else
                         boolerr = False
                     End If
                 Else
                     boolerr = True
                 End If
             End If
         Loop
         Do While tread.Peek > -1 And Not boolerr
             strErr = tread.ReadLine
             If Len(strErr) >= 0 Then
                 If Len(strErr) >= 7 Then
                     If Mid(strErr, 1, 7) <> "Reading" Then
                         boolerr = True
                     Else
                         boolerr = False
                     End If
                 Else
                     boolerr = True
                 End If
             End If
         Loop
         If boolerr = True Then
             Do While tread.Peek > -1
                 strErr = strErr & vbNewLine & tread.ReadLine
             Loop
             Do While tread.Peek > -1
                 strErr = strErr & vbNewLine & tread.ReadLine
             Loop
             GoTo noaudio
         End If
         tread.Close()
 
 
 
         Shell("cmd /c avs2wav " & """" & tempDir & "\atest.avs" & """" & " " & """" & tempDir & "\audio.wav" & """" & " && mediainfo " & """" & tempDir & "\audio.wav" & """" & " " & """" & "--Language=file
 noaudio
         IO.File.Delete(tempDir & "\atest.avs")
         IO.File.Delete(tempDir & "\atest.txt")
         If IO.File.Exists(tempDir & "\audio.wav") Then
             editVid.avsaudio = 1
         Else
             editVid.avsaudio = 2
             MsgBox("No audio stream detected in AVS Script")
         End If
         frmAVS.Close()
         Me.Enabled = True
         If editVid.avsaudio = 1 Then Return tempDir & "\" & editVid.key & ".audioinfo" Else Return ""
     End Function
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\MainForm.xaml.cs" startline="2876" endline="2901">
<![CDATA[
 
         private void cmdUp_Click(object sender, RoutedEventArgs e)
         {
             for (int i = 0; i < lstVideos.Items.Count; i++)
             {
                 VideoItem v = (VideoItem)lstVideos.Items[i];
                 if (i > 0 && v.IsSelected)
                 {
                     if (strcmdgo == "Stop Encoding" && i == currentjob)
                         currentjob--;
                     if (strcmdgo == "Stop Encoding" && i == currentjob + 1)
                         currentjob++;
                     VideoItem itm1 = (VideoItem)lstVideos.Items[i - 1];
                     VideoItem itm2 = (VideoItem)lstVideos.Items[i];
                     video v1 = videolist[i - 1];
                     video v2 = videolist[i];
                     lstVideos.Items.RemoveAt(i);
                     lstVideos.Items.RemoveAt(i - 1);
                     lstVideos.Items.Insert(i - 1, itm2);
                     lstVideos.Items.Insert(i, itm1);
                     videolist[i - 1] = v2;
                     videolist[i] = v1;
                 }
             }
             for (int i = 0; i < lstVideos.Items.Count; i++)
             {
                 VideoItem v = (VideoItem)lstVideos.Items[i];
                 if (i > 0 && v.IsSelected)
                 {
                     if (strcmdgo == "Stop Encoding" && i == currentjob)
                         currentjob--;
                     if (strcmdgo == "Stop Encoding" && i == currentjob + 1)
                         currentjob++;
                     VideoItem itm1 = (VideoItem)lstVideos.Items[i - 1];
                     VideoItem itm2 = (VideoItem)lstVideos.Items[i];
                     video v1 = videolist[i - 1];
                     video v2 = videolist[i];
                     lstVideos.Items.RemoveAt(i);
                     lstVideos.Items.RemoveAt(i - 1);
                     lstVideos.Items.Insert(i - 1, itm2);
                     lstVideos.Items.Insert(i, itm1);
                     videolist[i - 1] = v2;
                     videolist[i] = v1;
                 }
             }
             lstVideos.Focus();
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MainForm.vb" startline="4166" endline="4191">
<![CDATA[
 
     Sub CmdUpClick(ByVal sender As Object, ByVal e As EventArgs) Handles cmdUp.Click
         Dim item1 As ListViewItem, item2 As ListViewItem, sindex As Integer, video1 As New video, video2 As New video
         For Each lvn As ListViewItem In JobQueue.SelectedItems
             sindex = lvn.Index
             If sindex < 1 Then GoTo skip
             If strcmdGo = "Stop Encoding" And sindex = currentjob Then
                 currentjob = currentjob - 1
             End If
             If strcmdGo = "Stop Encoding" And sindex = currentjob + 1 Then
                 currentjob = currentjob + 1
             End If
             item1 = JobQueue.Items.Item(sindex - 1)
             item2 = JobQueue.Items.Item(sindex)
             video1 = videoList.Item(sindex - 1)
             video2 = videoList.Item(sindex)
             JobQueue.Items.RemoveAt(sindex)
             JobQueue.Items.RemoveAt(sindex - 1)
             JobQueue.Items.Insert(sindex - 1, item2)
             JobQueue.Items.Insert(sindex, item1)
             videoList.Item(sindex - 1) = video2
             videoList.Item(sindex) = video1
 skip
         Next
         JobQueue.Select()
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\MainForm.xaml.cs" startline="2876" endline="2901">
<![CDATA[
 
         private void cmdUp_Click(object sender, RoutedEventArgs e)
         {
             for (int i = 0; i < lstVideos.Items.Count; i++)
             {
                 VideoItem v = (VideoItem)lstVideos.Items[i];
                 if (i > 0 && v.IsSelected)
                 {
                     if (strcmdgo == "Stop Encoding" && i == currentjob)
                         currentjob--;
                     if (strcmdgo == "Stop Encoding" && i == currentjob + 1)
                         currentjob++;
                     VideoItem itm1 = (VideoItem)lstVideos.Items[i - 1];
                     VideoItem itm2 = (VideoItem)lstVideos.Items[i];
                     video v1 = videolist[i - 1];
                     video v2 = videolist[i];
                     lstVideos.Items.RemoveAt(i);
                     lstVideos.Items.RemoveAt(i - 1);
                     lstVideos.Items.Insert(i - 1, itm2);
                     lstVideos.Items.Insert(i, itm1);
                     videolist[i - 1] = v2;
                     videolist[i] = v1;
                 }
             }
             for (int i = 0; i < lstVideos.Items.Count; i++)
             {
                 VideoItem v = (VideoItem)lstVideos.Items[i];
                 if (i > 0 && v.IsSelected)
                 {
                     if (strcmdgo == "Stop Encoding" && i == currentjob)
                         currentjob--;
                     if (strcmdgo == "Stop Encoding" && i == currentjob + 1)
                         currentjob++;
                     VideoItem itm1 = (VideoItem)lstVideos.Items[i - 1];
                     VideoItem itm2 = (VideoItem)lstVideos.Items[i];
                     video v1 = videolist[i - 1];
                     video v2 = videolist[i];
                     lstVideos.Items.RemoveAt(i);
                     lstVideos.Items.RemoveAt(i - 1);
                     lstVideos.Items.Insert(i - 1, itm2);
                     lstVideos.Items.Insert(i, itm1);
                     videolist[i - 1] = v2;
                     videolist[i] = v1;
                 }
             }
             lstVideos.Focus();
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Wizard.vb" startline="261" endline="287">
<![CDATA[
     ' End Sub
 
     Sub CmdUpClick(ByVal sender As Object, ByVal e As EventArgs) Handles cmdUp.Click
         Dim item1 As ListViewItem, item2 As ListViewItem, sindex As Integer, video1 As New video, video2 As New video
         For Each lvn As ListViewItem In lstVideos.SelectedItems
             sindex = lvn.Index
             If sindex < 1 Then GoTo skip
             If strcmdGo = "Stop Encoding" And sindex = currentjob Then
                 currentjob = currentjob - 1
             End If
             If strcmdGo = "Stop Encoding" And sindex = currentjob + 1 Then
                 currentjob = currentjob + 1
             End If
             item1 = lstVideos.Items.Item(sindex - 1)
             item2 = lstVideos.Items.Item(sindex)
             video1 = videoList.Item(sindex - 1)
             video2 = videoList.Item(sindex)
             lstVideos.Items.RemoveAt(sindex)
             lstVideos.Items.RemoveAt(sindex - 1)
             lstVideos.Items.Insert(sindex - 1, item2)
             lstVideos.Items.Insert(sindex, item1)
             videoList.Item(sindex - 1) = video2
             videoList.Item(sindex) = video1
 skip
         Next
         lstVideos.Select()
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\MainForm.xaml.cs" startline="2944" endline="2953">
<![CDATA[
 
         private void Import_Click(object sender, RoutedEventArgs e)
         {
             ImportProfile ip = new ImportProfile();
             setBlur(true);
             ip.ShowDialog();
             setBlur(false);
             profileList = load_profiles();
             Update_Profiles();
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\About.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\MainForm.xaml.cs" startline="2944" endline="2953">
<![CDATA[
 
         private void Import_Click(object sender, RoutedEventArgs e)
         {
             ImportProfile ip = new ImportProfile();
             setBlur(true);
             ip.ShowDialog();
             setBlur(false);
             profileList = load_profiles();
             Update_Profiles();
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Append.vb" startline="520" endline="530">
<![CDATA[
 
     Private Sub lblAdvanced_LinkClicked(ByVal sender As System.Object, ByVal e As System.Windows.Forms.LinkLabelLinkClickedEventArgs) Handles lblAdvanced.LinkClicked
         Dim frmX264 As New x264
         Me.Enabled = False
         frmX264.Show()
         Do While frmX264.Visible
             Application.DoEvents()
         Loop
         Do While frmX264.Visible
             Application.DoEvents()
         Loop
         Me.Enabled = True
         Me.Focus()
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\MainForm.xaml.cs" startline="2944" endline="2953">
<![CDATA[
 
         private void Import_Click(object sender, RoutedEventArgs e)
         {
             ImportProfile ip = new ImportProfile();
             setBlur(true);
             ip.ShowDialog();
             setBlur(false);
             profileList = load_profiles();
             Update_Profiles();
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\AVSWAV.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\MainForm.xaml.cs" startline="2944" endline="2953">
<![CDATA[
 
         private void Import_Click(object sender, RoutedEventArgs e)
         {
             ImportProfile ip = new ImportProfile();
             setBlur(true);
             ip.ShowDialog();
             setBlur(false);
             profileList = load_profiles();
             Update_Profiles();
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Checking.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\MainForm.xaml.cs" startline="2944" endline="2953">
<![CDATA[
 
         private void Import_Click(object sender, RoutedEventArgs e)
         {
             ImportProfile ip = new ImportProfile();
             setBlur(true);
             ip.ShowDialog();
             setBlur(false);
             profileList = load_profiles();
             Update_Profiles();
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Crop.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\MainForm.xaml.cs" startline="2944" endline="2953">
<![CDATA[
 
         private void Import_Click(object sender, RoutedEventArgs e)
         {
             ImportProfile ip = new ImportProfile();
             setBlur(true);
             ip.ShowDialog();
             setBlur(false);
             profileList = load_profiles();
             Update_Profiles();
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Edit.vb" startline="516" endline="526">
<![CDATA[
 	
     Sub LblAdvancedLinkClicked(ByVal sender As Object, ByVal e As LinkLabelLinkClickedEventArgs) Handles lblAdvanced.LinkClicked
         Dim frmX264 As New x264
         Me.Enabled = False
         frmX264.Show()
         Do While frmX264.Visible
             Application.DoEvents()
         Loop
         Do While frmX264.Visible
             Application.DoEvents()
         Loop
         Me.Enabled = True
         Me.Focus()
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\MainForm.xaml.cs" startline="2944" endline="2953">
<![CDATA[
 
         private void Import_Click(object sender, RoutedEventArgs e)
         {
             ImportProfile ip = new ImportProfile();
             setBlur(true);
             ip.ShowDialog();
             setBlur(false);
             profileList = load_profiles();
             Update_Profiles();
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MainForm.vb" startline="2420" endline="2431">
<![CDATA[
 
     Sub LblAdvancedLinkClicked(ByVal sender As Object, ByVal e As LinkLabelLinkClickedEventArgs) Handles lblAdvanced.LinkClicked
 
         Dim frmx264 As New x264
         Me.Enabled = False
         frmX264.Show()
         Do While frmX264.Visible
             Application.DoEvents()
         Loop
         Do While frmX264.Visible
             Application.DoEvents()
         Loop
         Me.Enabled = True
         Me.Focus()
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\MainForm.xaml.cs" startline="2944" endline="2953">
<![CDATA[
 
         private void Import_Click(object sender, RoutedEventArgs e)
         {
             ImportProfile ip = new ImportProfile();
             setBlur(true);
             ip.ShowDialog();
             setBlur(false);
             profileList = load_profiles();
             Update_Profiles();
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MPEG.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\MainForm.xaml.cs" startline="2944" endline="2953">
<![CDATA[
 
         private void Import_Click(object sender, RoutedEventArgs e)
         {
             ImportProfile ip = new ImportProfile();
             setBlur(true);
             ip.ShowDialog();
             setBlur(false);
             profileList = load_profiles();
             Update_Profiles();
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Player.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\MainForm.xaml.cs" startline="2944" endline="2953">
<![CDATA[
 
         private void Import_Click(object sender, RoutedEventArgs e)
         {
             ImportProfile ip = new ImportProfile();
             setBlur(true);
             ip.ShowDialog();
             setBlur(false);
             profileList = load_profiles();
             Update_Profiles();
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Testing.vb" startline="12" endline="19">
<![CDATA[
 	Public Sub New()
 	dim edittracklist as New List(Of track), currenttrack as Integer
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\MainForm.xaml.cs" startline="2944" endline="2953">
<![CDATA[
 
         private void Import_Click(object sender, RoutedEventArgs e)
         {
             ImportProfile ip = new ImportProfile();
             setBlur(true);
             ip.ShowDialog();
             setBlur(false);
             profileList = load_profiles();
             Update_Profiles();
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Wizard.vb" startline="2934" endline="2941">
<![CDATA[
 
     Private Sub ExportProfileToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ExportProfileToolStripMenuItem1.Click
         Dim frmExport As New ExportProfile
         Me.Enabled = False
         frmExport.ShowDialog()
         Me.Enabled = True
 
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\MainForm.xaml.cs" startline="2954" endline="2961">
<![CDATA[
 
         private void Export_Click(object sender, RoutedEventArgs e)
         {
             ExportProfile ep = new ExportProfile();
             setBlur(true);
             ep.ShowDialog();
             setBlur(false);
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Append.vb" startline="520" endline="530">
<![CDATA[
 
     Private Sub lblAdvanced_LinkClicked(ByVal sender As System.Object, ByVal e As System.Windows.Forms.LinkLabelLinkClickedEventArgs) Handles lblAdvanced.LinkClicked
         Dim frmX264 As New x264
         Me.Enabled = False
         frmX264.Show()
         Do While frmX264.Visible
             Application.DoEvents()
         Loop
         Do While frmX264.Visible
             Application.DoEvents()
         Loop
         Me.Enabled = True
         Me.Focus()
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\MainForm.xaml.cs" startline="2954" endline="2961">
<![CDATA[
 
         private void Export_Click(object sender, RoutedEventArgs e)
         {
             ExportProfile ep = new ExportProfile();
             setBlur(true);
             ep.ShowDialog();
             setBlur(false);
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Edit.vb" startline="516" endline="526">
<![CDATA[
 	
     Sub LblAdvancedLinkClicked(ByVal sender As Object, ByVal e As LinkLabelLinkClickedEventArgs) Handles lblAdvanced.LinkClicked
         Dim frmX264 As New x264
         Me.Enabled = False
         frmX264.Show()
         Do While frmX264.Visible
             Application.DoEvents()
         Loop
         Do While frmX264.Visible
             Application.DoEvents()
         Loop
         Me.Enabled = True
         Me.Focus()
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\MainForm.xaml.cs" startline="2954" endline="2961">
<![CDATA[
 
         private void Export_Click(object sender, RoutedEventArgs e)
         {
             ExportProfile ep = new ExportProfile();
             setBlur(true);
             ep.ShowDialog();
             setBlur(false);
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MainForm.vb" startline="2420" endline="2431">
<![CDATA[
 
     Sub LblAdvancedLinkClicked(ByVal sender As Object, ByVal e As LinkLabelLinkClickedEventArgs) Handles lblAdvanced.LinkClicked
 
         Dim frmx264 As New x264
         Me.Enabled = False
         frmX264.Show()
         Do While frmX264.Visible
             Application.DoEvents()
         Loop
         Do While frmX264.Visible
             Application.DoEvents()
         Loop
         Me.Enabled = True
         Me.Focus()
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\MainForm.xaml.cs" startline="2954" endline="2961">
<![CDATA[
 
         private void Export_Click(object sender, RoutedEventArgs e)
         {
             ExportProfile ep = new ExportProfile();
             setBlur(true);
             ep.ShowDialog();
             setBlur(false);
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Wizard.vb" startline="2934" endline="2941">
<![CDATA[
 
     Private Sub ExportProfileToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ExportProfileToolStripMenuItem1.Click
         Dim frmExport As New ExportProfile
         Me.Enabled = False
         frmExport.ShowDialog()
         Me.Enabled = True
 
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\MainForm.xaml.cs" startline="3001" endline="3008">
<![CDATA[
 
         private void About_Click(object sender, RoutedEventArgs e)
         {
             setBlur(true);
             About frmAbout = new About();
             frmAbout.ShowDialog();
             setBlur(false);
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Wizard.vb" startline="2934" endline="2941">
<![CDATA[
 
     Private Sub ExportProfileToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ExportProfileToolStripMenuItem1.Click
         Dim frmExport As New ExportProfile
         Me.Enabled = False
         frmExport.ShowDialog()
         Me.Enabled = True
 
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Edit.xaml.cs" startline="56" endline="73">
<![CDATA[
 
         private void Window_Loaded(object sender, RoutedEventArgs e)
         {
             editvid = MainForm.editVid;
             if (MainForm.win6) MainForm.setGlass(this); else this.Background = SystemColors.ControlBrush;
             tmrLoad.Interval = TimeSpan.FromMilliseconds(1);
             tmrLoad.Tick += new EventHandler(tmrLoad_Tick);
             tmrLoad.IsEnabled = true;
 
             tmrLoadControls.Interval = TimeSpan.FromMilliseconds(100);
             tmrLoadControls.Tick += new EventHandler(tmrLoadControls_Tick);
 
             tmrOutput.Interval = TimeSpan.FromMilliseconds(100);
             tmrOutput.Tick += new EventHandler(tmrOutput_Tick);
 
             tmrAutoCrop.Interval = TimeSpan.FromMilliseconds(100);
             tmrAutoCrop.Tick += new EventHandler(tmrAutoCrop_Tick);
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Edit.vb" startline="1130" endline="1144">
<![CDATA[
 	
     Sub CmdUpClick(ByVal sender As Object, ByVal e As EventArgs) Handles cmdUp.Click
         Dim track1 As track, track2 As track
         If currenttrack = 0 Then Exit Sub
         enterdrop = True
         track1 = edittracklist.Item(currenttrack - 1)
         track2 = edittracklist.Item(currenttrack)
         edittracklist.Item(currenttrack - 1) = track2
         edittracklist.Item(currenttrack) = track1
         txtAudio.Items.Item(currenttrack - 1) = track2.path
         txtAudio.Items.Item(currenttrack) = track1.path
         currenttrack = currenttrack - 1
         txtAudio.SelectedIndex = currenttrack
         enterdrop = False
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Edit.xaml.cs" startline="56" endline="73">
<![CDATA[
 
         private void Window_Loaded(object sender, RoutedEventArgs e)
         {
             editvid = MainForm.editVid;
             if (MainForm.win6) MainForm.setGlass(this); else this.Background = SystemColors.ControlBrush;
             tmrLoad.Interval = TimeSpan.FromMilliseconds(1);
             tmrLoad.Tick += new EventHandler(tmrLoad_Tick);
             tmrLoad.IsEnabled = true;
 
             tmrLoadControls.Interval = TimeSpan.FromMilliseconds(100);
             tmrLoadControls.Tick += new EventHandler(tmrLoadControls_Tick);
 
             tmrOutput.Interval = TimeSpan.FromMilliseconds(100);
             tmrOutput.Tick += new EventHandler(tmrOutput_Tick);
 
             tmrAutoCrop.Interval = TimeSpan.FromMilliseconds(100);
             tmrAutoCrop.Tick += new EventHandler(tmrAutoCrop_Tick);
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MainForm.vb" startline="3798" endline="3813">
<![CDATA[
 
 
     Sub CmdTrackUpClick(ByVal sender As Object, ByVal e As EventArgs) Handles cmdTrackUp.Click
         Dim track1 As track, track2 As track
         If currenttrack = 0 Then Exit Sub
         enterdrop = True
         track1 = edittracklist.Item(currenttrack - 1)
         track2 = edittracklist.Item(currenttrack)
         edittracklist.Item(currenttrack - 1) = track2
         edittracklist.Item(currenttrack) = track1
         txtAudio.Items.Item(currenttrack - 1) = track2.path
         txtAudio.Items.Item(currenttrack) = track1.path
         currenttrack = currenttrack - 1
         txtAudio.SelectedIndex = currenttrack
         enterdrop = False
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Edit.xaml.cs" startline="74" endline="82">
<![CDATA[
 
         void tmrAutoCrop_Tick(object sender, EventArgs e)
         {
             if (editvid.autocropped)
             {
                 tmrOutput.IsEnabled = true;
                 tmrAutoCrop.IsEnabled = false;
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\About.Designer.vb" startline="21" endline="28">
<![CDATA[
 	Protected Overrides Sub Dispose(ByVal disposing As Boolean)
 		If disposing Then
 			If components IsNot Nothing Then
 				components.Dispose()
 			End If
 		End If
 		MyBase.Dispose(disposing)
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Edit.xaml.cs" startline="74" endline="82">
<![CDATA[
 
         void tmrAutoCrop_Tick(object sender, EventArgs e)
         {
             if (editvid.autocropped)
             {
                 tmrOutput.IsEnabled = true;
                 tmrAutoCrop.IsEnabled = false;
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\AVSWAV.Designer.vb" startline="21" endline="28">
<![CDATA[
 	Protected Overrides Sub Dispose(ByVal disposing As Boolean)
 		If disposing Then
 			If components IsNot Nothing Then
 				components.Dispose()
 			End If
 		End If
 		MyBase.Dispose(disposing)
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Edit.xaml.cs" startline="74" endline="82">
<![CDATA[
 
         void tmrAutoCrop_Tick(object sender, EventArgs e)
         {
             if (editvid.autocropped)
             {
                 tmrOutput.IsEnabled = true;
                 tmrAutoCrop.IsEnabled = false;
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Checking.Designer.vb" startline="21" endline="28">
<![CDATA[
 	Protected Overrides Sub Dispose(ByVal disposing As Boolean)
 		If disposing Then
 			If components IsNot Nothing Then
 				components.Dispose()
 			End If
 		End If
 		MyBase.Dispose(disposing)
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Edit.xaml.cs" startline="74" endline="82">
<![CDATA[
 
         void tmrAutoCrop_Tick(object sender, EventArgs e)
         {
             if (editvid.autocropped)
             {
                 tmrOutput.IsEnabled = true;
                 tmrAutoCrop.IsEnabled = false;
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Crop.Designer.vb" startline="21" endline="28">
<![CDATA[
 	Protected Overrides Sub Dispose(ByVal disposing As Boolean)
 		If disposing Then
 			If components IsNot Nothing Then
 				components.Dispose()
 			End If
 		End If
 		MyBase.Dispose(disposing)
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Edit.xaml.cs" startline="74" endline="82">
<![CDATA[
 
         void tmrAutoCrop_Tick(object sender, EventArgs e)
         {
             if (editvid.autocropped)
             {
                 tmrOutput.IsEnabled = true;
                 tmrAutoCrop.IsEnabled = false;
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Edit.Designer.vb" startline="21" endline="28">
<![CDATA[
 	Protected Overrides Sub Dispose(ByVal disposing As Boolean)
 		If disposing Then
 			If components IsNot Nothing Then
 				components.Dispose()
 			End If
 		End If
 		MyBase.Dispose(disposing)
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Edit.xaml.cs" startline="74" endline="82">
<![CDATA[
 
         void tmrAutoCrop_Tick(object sender, EventArgs e)
         {
             if (editvid.autocropped)
             {
                 tmrOutput.IsEnabled = true;
                 tmrAutoCrop.IsEnabled = false;
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\ExportProfile.Designer.vb" startline="21" endline="28">
<![CDATA[
 	Protected Overrides Sub Dispose(ByVal disposing As Boolean)
 		If disposing Then
 			If components IsNot Nothing Then
 				components.Dispose()
 			End If
 		End If
 		MyBase.Dispose(disposing)
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Edit.xaml.cs" startline="74" endline="82">
<![CDATA[
 
         void tmrAutoCrop_Tick(object sender, EventArgs e)
         {
             if (editvid.autocropped)
             {
                 tmrOutput.IsEnabled = true;
                 tmrAutoCrop.IsEnabled = false;
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\ImportProfile.Designer.vb" startline="21" endline="28">
<![CDATA[
 	Protected Overrides Sub Dispose(ByVal disposing As Boolean)
 		If disposing Then
 			If components IsNot Nothing Then
 				components.Dispose()
 			End If
 		End If
 		MyBase.Dispose(disposing)
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Edit.xaml.cs" startline="74" endline="82">
<![CDATA[
 
         void tmrAutoCrop_Tick(object sender, EventArgs e)
         {
             if (editvid.autocropped)
             {
                 tmrOutput.IsEnabled = true;
                 tmrAutoCrop.IsEnabled = false;
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MainForm.Designer.vb" startline="21" endline="28">
<![CDATA[
 	Protected Overrides Sub Dispose(ByVal disposing As Boolean)
 		If disposing Then
 			If components IsNot Nothing Then
 				components.Dispose()
 			End If
 		End If
 		MyBase.Dispose(disposing)
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Edit.xaml.cs" startline="74" endline="82">
<![CDATA[
 
         void tmrAutoCrop_Tick(object sender, EventArgs e)
         {
             if (editvid.autocropped)
             {
                 tmrOutput.IsEnabled = true;
                 tmrAutoCrop.IsEnabled = false;
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MainForm.vb" startline="4245" endline="4252">
<![CDATA[
 
     Sub OptionsToolStripMenuItemClick(ByVal sender As Object, ByVal e As EventArgs) Handles optionsToolStripMenuItem.Click
         Dim frmOptions As New Options
         frmOptions.Show()
         boolEdit = True
         Me.Enabled = False
         tmrOptions.Enabled = True
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Edit.xaml.cs" startline="74" endline="82">
<![CDATA[
 
         void tmrAutoCrop_Tick(object sender, EventArgs e)
         {
             if (editvid.autocropped)
             {
                 tmrOutput.IsEnabled = true;
                 tmrAutoCrop.IsEnabled = false;
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MainForm.vb" startline="6143" endline="6151">
<![CDATA[
 
     Private Sub ImportProfileToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ImportProfileToolStripMenuItem.Click
         Dim frmImport As New ImportProfile
         profilecount = profilelist.Count
         frmImport.Show()
         boolEdit = True
         Me.Enabled = False
         tmrImport.enabled = True
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Edit.xaml.cs" startline="74" endline="82">
<![CDATA[
 
         void tmrAutoCrop_Tick(object sender, EventArgs e)
         {
             if (editvid.autocropped)
             {
                 tmrOutput.IsEnabled = true;
                 tmrAutoCrop.IsEnabled = false;
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MainForm.vb" startline="6170" endline="6177">
<![CDATA[
 
     Private Sub ExportProfileToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ExportProfileToolStripMenuItem.Click
         Dim frmExport As New ExportProfile
         frmExport.Show()
         boolEdit = True
         Me.Enabled = False
         tmrImport.Enabled = True
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Edit.xaml.cs" startline="74" endline="82">
<![CDATA[
 
         void tmrAutoCrop_Tick(object sender, EventArgs e)
         {
             if (editvid.autocropped)
             {
                 tmrOutput.IsEnabled = true;
                 tmrAutoCrop.IsEnabled = false;
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MPEG.Designer.vb" startline="21" endline="28">
<![CDATA[
 	Protected Overrides Sub Dispose(ByVal disposing As Boolean)
 		If disposing Then
 			If components IsNot Nothing Then
 				components.Dispose()
 			End If
 		End If
 		MyBase.Dispose(disposing)
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Edit.xaml.cs" startline="74" endline="82">
<![CDATA[
 
         void tmrAutoCrop_Tick(object sender, EventArgs e)
         {
             if (editvid.autocropped)
             {
                 tmrOutput.IsEnabled = true;
                 tmrAutoCrop.IsEnabled = false;
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Options.Designer.vb" startline="21" endline="28">
<![CDATA[
 	Protected Overrides Sub Dispose(ByVal disposing As Boolean)
 		If disposing Then
 			If components IsNot Nothing Then
 				components.Dispose()
 			End If
 		End If
 		MyBase.Dispose(disposing)
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Edit.xaml.cs" startline="74" endline="82">
<![CDATA[
 
         void tmrAutoCrop_Tick(object sender, EventArgs e)
         {
             if (editvid.autocropped)
             {
                 tmrOutput.IsEnabled = true;
                 tmrAutoCrop.IsEnabled = false;
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Player.Designer.vb" startline="21" endline="28">
<![CDATA[
 	Protected Overrides Sub Dispose(ByVal disposing As Boolean)
 		If disposing Then
 			If components IsNot Nothing Then
 				components.Dispose()
 			End If
 		End If
 		MyBase.Dispose(disposing)
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Edit.xaml.cs" startline="74" endline="82">
<![CDATA[
 
         void tmrAutoCrop_Tick(object sender, EventArgs e)
         {
             if (editvid.autocropped)
             {
                 tmrOutput.IsEnabled = true;
                 tmrAutoCrop.IsEnabled = false;
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Profiles.Designer.vb" startline="21" endline="28">
<![CDATA[
 	Protected Overrides Sub Dispose(ByVal disposing As Boolean)
 		If disposing Then
 			If components IsNot Nothing Then
 				components.Dispose()
 			End If
 		End If
 		MyBase.Dispose(disposing)
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Edit.xaml.cs" startline="74" endline="82">
<![CDATA[
 
         void tmrAutoCrop_Tick(object sender, EventArgs e)
         {
             if (editvid.autocropped)
             {
                 tmrOutput.IsEnabled = true;
                 tmrAutoCrop.IsEnabled = false;
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Testing.Designer.vb" startline="21" endline="28">
<![CDATA[
 	Protected Overrides Sub Dispose(ByVal disposing As Boolean)
 		If disposing Then
 			If components IsNot Nothing Then
 				components.Dispose()
 			End If
 		End If
 		MyBase.Dispose(disposing)
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Edit.xaml.cs" startline="74" endline="82">
<![CDATA[
 
         void tmrAutoCrop_Tick(object sender, EventArgs e)
         {
             if (editvid.autocropped)
             {
                 tmrOutput.IsEnabled = true;
                 tmrAutoCrop.IsEnabled = false;
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Updating.Designer.vb" startline="21" endline="28">
<![CDATA[
 	Protected Overrides Sub Dispose(ByVal disposing As Boolean)
 		If disposing Then
 			If components IsNot Nothing Then
 				components.Dispose()
 			End If
 		End If
 		MyBase.Dispose(disposing)
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Edit.xaml.cs" startline="74" endline="82">
<![CDATA[
 
         void tmrAutoCrop_Tick(object sender, EventArgs e)
         {
             if (editvid.autocropped)
             {
                 tmrOutput.IsEnabled = true;
                 tmrAutoCrop.IsEnabled = false;
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Wizard.Designer.vb" startline="21" endline="28">
<![CDATA[
 	Protected Overrides Sub Dispose(ByVal disposing As Boolean)
 		If disposing Then
 			If components IsNot Nothing Then
 				components.Dispose()
 			End If
 		End If
 		MyBase.Dispose(disposing)
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Edit.xaml.cs" startline="74" endline="82">
<![CDATA[
 
         void tmrAutoCrop_Tick(object sender, EventArgs e)
         {
             if (editvid.autocropped)
             {
                 tmrOutput.IsEnabled = true;
                 tmrAutoCrop.IsEnabled = false;
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Wizard.vb" startline="2907" endline="2915">
<![CDATA[
 
     Private Sub ImportProfileToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ImportProfileToolStripMenuItem1.Click
         Dim frmImport As New ImportProfile
         profilecount = profilelist.Count
         frmImport.Show()
         boolEdit = True
         Me.Enabled = False
         tmrImport.Enabled = True
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Edit.xaml.cs" startline="74" endline="82">
<![CDATA[
 
         void tmrAutoCrop_Tick(object sender, EventArgs e)
         {
             if (editvid.autocropped)
             {
                 tmrOutput.IsEnabled = true;
                 tmrAutoCrop.IsEnabled = false;
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Wizard.vb" startline="2934" endline="2941">
<![CDATA[
 
     Private Sub ExportProfileToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ExportProfileToolStripMenuItem1.Click
         Dim frmExport As New ExportProfile
         Me.Enabled = False
         frmExport.ShowDialog()
         Me.Enabled = True
 
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Edit.xaml.cs" startline="74" endline="82">
<![CDATA[
 
         void tmrAutoCrop_Tick(object sender, EventArgs e)
         {
             if (editvid.autocropped)
             {
                 tmrOutput.IsEnabled = true;
                 tmrAutoCrop.IsEnabled = false;
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Wizard.vb" startline="2946" endline="2953">
<![CDATA[
 
     Private Sub OptionsToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles OptionsToolStripMenuItem.Click
         Dim frmOptions As New Options
         frmOptions.Show()
         boolEdit = True
         Me.Enabled = False
         tmrOptions.Enabled = True
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Edit.xaml.cs" startline="74" endline="82">
<![CDATA[
 
         void tmrAutoCrop_Tick(object sender, EventArgs e)
         {
             if (editvid.autocropped)
             {
                 tmrOutput.IsEnabled = true;
                 tmrAutoCrop.IsEnabled = false;
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\x264.Designer.vb" startline="21" endline="28">
<![CDATA[
 	Protected Overrides Sub Dispose(ByVal disposing As Boolean)
 		If disposing Then
 			If components IsNot Nothing Then
 				components.Dispose()
 			End If
 		End If
 		MyBase.Dispose(disposing)
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Edit.xaml.cs" startline="74" endline="82">
<![CDATA[
 
         void tmrAutoCrop_Tick(object sender, EventArgs e)
         {
             if (editvid.autocropped)
             {
                 tmrOutput.IsEnabled = true;
                 tmrAutoCrop.IsEnabled = false;
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\x264.Designer.vb" startline="1884" endline="1981">
<![CDATA[
     Private WithEvents timer1 As System.Windows.Forms.Timer
     Private WithEvents saveFile As System.Windows.Forms.SaveFileDialog
     Private WithEvents lblBias As System.Windows.Forms.Label
     Private WithEvents lblBMode As System.Windows.Forms.Label
     Private WithEvents lblWeighted As System.Windows.Forms.Label
     Private WithEvents lblAdaptive As System.Windows.Forms.Label
     Private WithEvents lblnumBFrames As System.Windows.Forms.Label
     Private WithEvents lblTrellis As System.Windows.Forms.Label
     Private WithEvents lblRefFrames As System.Windows.Forms.Label
     Private WithEvents cmdCancel As System.Windows.Forms.Button
     Private WithEvents numBias As System.Windows.Forms.NumericUpDown
     Private WithEvents numQBlur As System.Windows.Forms.NumericUpDown
     Private WithEvents chkWeighted As System.Windows.Forms.CheckBox
     Private WithEvents cboBFrame As System.Windows.Forms.ComboBox
     Private WithEvents numBFrames As System.Windows.Forms.NumericUpDown
     Private WithEvents numChromaQP As System.Windows.Forms.NumericUpDown
     Private WithEvents numPandB As System.Windows.Forms.NumericUpDown
     Private WithEvents groupBox8 As System.Windows.Forms.GroupBox
     Private WithEvents label32 As System.Windows.Forms.Label
     Private WithEvents numIandP As System.Windows.Forms.NumericUpDown
     Private WithEvents numQuantDelta As System.Windows.Forms.NumericUpDown
     Private WithEvents label30 As System.Windows.Forms.Label
     Private WithEvents numMaxQuant As System.Windows.Forms.NumericUpDown
     Private WithEvents numMinQuant As System.Windows.Forms.NumericUpDown
     Private WithEvents label4 As System.Windows.Forms.Label
     Private WithEvents quantizers As System.Windows.Forms.GroupBox
     Private WithEvents chkB8x8 As System.Windows.Forms.CheckBox
     Private WithEvents chkI8x8 As System.Windows.Forms.CheckBox
     Private WithEvents chkP8x8 As System.Windows.Forms.CheckBox
     Private WithEvents chkADCT As System.Windows.Forms.CheckBox
     Private WithEvents chkI4x4 As System.Windows.Forms.CheckBox
     Private WithEvents chkP4x4 As System.Windows.Forms.CheckBox
     Private WithEvents numStrength As System.Windows.Forms.NumericUpDown
     Private WithEvents numThresh As System.Windows.Forms.NumericUpDown
     Private WithEvents groupBox6 As System.Windows.Forms.GroupBox
     Private WithEvents lblStrength As System.Windows.Forms.Label
     Private WithEvents lblThresh As System.Windows.Forms.Label
     Private WithEvents chkPSkip As System.Windows.Forms.CheckBox
     Private WithEvents label28 As System.Windows.Forms.Label
     Private WithEvents numRefFrames As System.Windows.Forms.NumericUpDown
     Private WithEvents chkMixedRef As System.Windows.Forms.CheckBox
     Private WithEvents lblmixed As System.Windows.Forms.Label
     Private WithEvents chkDCT As System.Windows.Forms.CheckBox
     Private WithEvents label27 As System.Windows.Forms.Label
     Private WithEvents cboTrellis As System.Windows.Forms.ComboBox
     Private WithEvents groupBox5 As System.Windows.Forms.GroupBox
     Private WithEvents cboSubPixel As System.Windows.Forms.ComboBox
     Private WithEvents label22 As System.Windows.Forms.Label
     Private WithEvents chkChromaME As System.Windows.Forms.CheckBox
     Private WithEvents label18 As System.Windows.Forms.Label
     Private WithEvents label19 As System.Windows.Forms.Label
     Private WithEvents numMERange As System.Windows.Forms.NumericUpDown
     Private WithEvents lblSceneCut As System.Windows.Forms.Label
     Private WithEvents numSceneChange As System.Windows.Forms.NumericUpDown
     Private WithEvents cboAlgorithm As System.Windows.Forms.ComboBox
     Private WithEvents label21 As System.Windows.Forms.Label
     Private WithEvents groupBox4 As System.Windows.Forms.GroupBox
     Private WithEvents txtNoise As System.Windows.Forms.TextBox
     Private WithEvents label16 As System.Windows.Forms.Label
     Private WithEvents chkInterlace As System.Windows.Forms.CheckBox
     Private WithEvents label17 As System.Windows.Forms.Label
     Private WithEvents label12 As System.Windows.Forms.Label
     Private WithEvents label13 As System.Windows.Forms.Label
     Private WithEvents label15 As System.Windows.Forms.Label
     Private WithEvents txtKeyframe As System.Windows.Forms.TextBox
     Private WithEvents txtMinGOP As System.Windows.Forms.TextBox
     Private WithEvents label14 As System.Windows.Forms.Label
     Private WithEvents label11 As System.Windows.Forms.Label
     Private WithEvents label10 As System.Windows.Forms.Label
     Private WithEvents numBlur As System.Windows.Forms.NumericUpDown
     Private WithEvents label9 As System.Windows.Forms.Label
     Private WithEvents numCompression As System.Windows.Forms.NumericUpDown
     Private WithEvents numVariance As System.Windows.Forms.NumericUpDown
     Private WithEvents label8 As System.Windows.Forms.Label
     Private WithEvents numBuffer As System.Windows.Forms.NumericUpDown
     Private WithEvents label6 As System.Windows.Forms.Label
     Private WithEvents txtBuffer As System.Windows.Forms.TextBox
     Private WithEvents label7 As System.Windows.Forms.Label
     Private WithEvents ratecontrol As System.Windows.Forms.GroupBox
     Private WithEvents chkDeblocking As System.Windows.Forms.CheckBox
     Private WithEvents label3 As System.Windows.Forms.Label
     Private WithEvents groupBox2 As System.Windows.Forms.GroupBox
     Private WithEvents groupBox1 As System.Windows.Forms.GroupBox
     Private WithEvents numThreads As System.Windows.Forms.NumericUpDown
     Private WithEvents label2 As System.Windows.Forms.Label
     Private WithEvents chkSSIM As System.Windows.Forms.CheckBox
     Private WithEvents chkPNSR As System.Windows.Forms.CheckBox
     Private WithEvents label1 As System.Windows.Forms.Label
     Private WithEvents txtLogFile As System.Windows.Forms.TextBox
     Private WithEvents cmdLogFile As System.Windows.Forms.Button
     Private WithEvents cmdOK As System.Windows.Forms.Button
     Private WithEvents pictureBox1 As System.Windows.Forms.PictureBox
 
 
 
     Sub NumRefFramesValueChanged(ByVal sender As Object, ByVal e As EventArgs)
         If numRefFrames.Value <= 1 Then chkMixedRef.Enabled = False Else chkMixedRef.Enabled = True
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Edit.xaml.cs" startline="488" endline="494">
<![CDATA[
 
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\About.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Edit.xaml.cs" startline="488" endline="494">
<![CDATA[
 
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\AVSWAV.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Edit.xaml.cs" startline="488" endline="494">
<![CDATA[
 
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Checking.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Edit.xaml.cs" startline="488" endline="494">
<![CDATA[
 
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Crop.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Edit.xaml.cs" startline="488" endline="494">
<![CDATA[
 
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\ExportProfile.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Edit.xaml.cs" startline="488" endline="494">
<![CDATA[
 
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\ImportProfile.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Edit.xaml.cs" startline="488" endline="494">
<![CDATA[
 
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MPEG.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Edit.xaml.cs" startline="488" endline="494">
<![CDATA[
 
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Options.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Edit.xaml.cs" startline="488" endline="494">
<![CDATA[
 
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Player.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Edit.xaml.cs" startline="488" endline="494">
<![CDATA[
 
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Profiles.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Edit.xaml.cs" startline="488" endline="494">
<![CDATA[
 
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Testing.vb" startline="12" endline="19">
<![CDATA[
 	Public Sub New()
 	dim edittracklist as New List(Of track), currenttrack as Integer
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Edit.xaml.cs" startline="488" endline="494">
<![CDATA[
 
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Updating.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Edit.xaml.cs" startline="488" endline="494">
<![CDATA[
 
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\x264.vb" startline="12" endline="19">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Edit.xaml.cs" startline="852" endline="871">
<![CDATA[
 
         private void cmdPlay_MouseEnter(object sender, MouseEventArgs e)
         {
             if (cmdPlay.IsMouseOver)
             {
                 cmdPlay.Source = new BitmapImage(new Uri("Images/Play-Up.png", UriKind.Relative));
                 cmdPlay.Opacity = 1;
                 slider.Opacity = 1;
             }
             else
             {
                 cmdPlay.Source = new BitmapImage(new Uri("Images/Play.png", UriKind.Relative));
                 if (!slider.IsMouseOver)
                 {
                     cmdPlay.Opacity = 0.1;
                     slider.Opacity = 0.1;
                 }
             }
             
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Edit.vb" startline="312" endline="324">
<![CDATA[
 	
     Sub OptOutputCheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles optOutput.CheckedChanged
         lblOVFormat.Visible = True
         lblOVBitrate.Visible = True
         lblOResolution.Visible = True
         lblOAspect.Visible = True
         lblOFPS.Visible = True
         lblOAFormat.Visible = True
         lblOABitrate.Visible = True
         lblOChannels.Visible = True
         lblOLength.Visible = True
         lblOSize.Visible = True
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Edit.xaml.cs" startline="852" endline="871">
<![CDATA[
 
         private void cmdPlay_MouseEnter(object sender, MouseEventArgs e)
         {
             if (cmdPlay.IsMouseOver)
             {
                 cmdPlay.Source = new BitmapImage(new Uri("Images/Play-Up.png", UriKind.Relative));
                 cmdPlay.Opacity = 1;
                 slider.Opacity = 1;
             }
             else
             {
                 cmdPlay.Source = new BitmapImage(new Uri("Images/Play.png", UriKind.Relative));
                 if (!slider.IsMouseOver)
                 {
                     cmdPlay.Opacity = 0.1;
                     slider.Opacity = 0.1;
                 }
             }
             
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Edit.vb" startline="325" endline="337">
<![CDATA[
 	
     Sub OptInputCheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles optInput.CheckedChanged
         lblOVFormat.Visible = False
         lblOVBitrate.Visible = False
         lblOResolution.Visible = False
         lblOAspect.Visible = False
         lblOFPS.Visible = False
         lblOAFormat.Visible = False
         lblOABitrate.Visible = False
         lblOChannels.Visible = False
         lblOLength.Visible = False
         lblOSize.Visible = False
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Edit.xaml.cs" startline="852" endline="871">
<![CDATA[
 
         private void cmdPlay_MouseEnter(object sender, MouseEventArgs e)
         {
             if (cmdPlay.IsMouseOver)
             {
                 cmdPlay.Source = new BitmapImage(new Uri("Images/Play-Up.png", UriKind.Relative));
                 cmdPlay.Opacity = 1;
                 slider.Opacity = 1;
             }
             else
             {
                 cmdPlay.Source = new BitmapImage(new Uri("Images/Play.png", UriKind.Relative));
                 if (!slider.IsMouseOver)
                 {
                     cmdPlay.Opacity = 0.1;
                     slider.Opacity = 0.1;
                 }
             }
             
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Wizard.vb" startline="846" endline="858">
<![CDATA[
 
     Sub CmdPage2Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmdPage2.Click
         Page2.Visible = True
         cmdPage2.Enabled = False
         cmdPage1.Enabled = True
         cmdOpen.Visible = False
         cmdDel.Visible = False
         cmdEdit.Visible = False
         cmdUp.Visible = False
         cmdDown.Visible = False
         chkAppend.Visible = False
         cmdClear.Visible = False
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Edit.xaml.cs" startline="852" endline="871">
<![CDATA[
 
         private void cmdPlay_MouseEnter(object sender, MouseEventArgs e)
         {
             if (cmdPlay.IsMouseOver)
             {
                 cmdPlay.Source = new BitmapImage(new Uri("Images/Play-Up.png", UriKind.Relative));
                 cmdPlay.Opacity = 1;
                 slider.Opacity = 1;
             }
             else
             {
                 cmdPlay.Source = new BitmapImage(new Uri("Images/Play.png", UriKind.Relative));
                 if (!slider.IsMouseOver)
                 {
                     cmdPlay.Opacity = 0.1;
                     slider.Opacity = 0.1;
                 }
             }
             
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Wizard.vb" startline="859" endline="871">
<![CDATA[
 
     Sub CmdPage1Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmdPage1.Click
         Page2.Visible = False
         cmdPage1.Enabled = False
         cmdPage2.Enabled = True
         cmdOpen.Visible = True
         cmdDel.Visible = True
         cmdEdit.Visible = True
         cmdUp.Visible = True
         cmdDown.Visible = True
         chkAppend.Visible = True
         cmdClear.Visible = True
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Edit.xaml.cs" startline="883" endline="899">
<![CDATA[
 
         private void slider_MouseEnter(object sender, MouseEventArgs e)
         {
             if (slider.IsMouseOver || videoPreview.IsMouseOver)
             {
                 cmdPlay.Opacity = 1;
                 slider.Opacity = 1;
             }
             else
             {
                 if (!cmdPlay.IsMouseOver)
                 {
                     cmdPlay.Opacity = 0.1;
                     slider.Opacity = 0.1;
                 }
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\My Project\Application.Designer.vb" startline="25" endline="31">
<![CDATA[
         Public Sub New()
             MyBase.New(Global.Microsoft.VisualBasic.ApplicationServices.AuthenticationMode.Windows)
             Me.IsSingleInstance = false
             Me.EnableVisualStyles = true
             Me.SaveMySettingsOnExit = true
             Me.ShutDownStyle = Global.Microsoft.VisualBasic.ApplicationServices.ShutdownMode.AfterMainFormCloses
         End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Edit.xaml.cs" startline="883" endline="899">
<![CDATA[
 
         private void slider_MouseEnter(object sender, MouseEventArgs e)
         {
             if (slider.IsMouseOver || videoPreview.IsMouseOver)
             {
                 cmdPlay.Opacity = 1;
                 slider.Opacity = 1;
             }
             else
             {
                 if (!cmdPlay.IsMouseOver)
                 {
                     cmdPlay.Opacity = 0.1;
                     slider.Opacity = 0.1;
                 }
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Append.vb" startline="494" endline="501">
<![CDATA[
 
     Private Sub RadioButton2_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs)
         lblBitrate.Visible = False
         txtBitrate.Visible = False
         chkFileSize.Enabled = True
         txtFileSize.Enabled = True
         cboFileSize.Enabled = True
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Edit.xaml.cs" startline="883" endline="899">
<![CDATA[
 
         private void slider_MouseEnter(object sender, MouseEventArgs e)
         {
             if (slider.IsMouseOver || videoPreview.IsMouseOver)
             {
                 cmdPlay.Opacity = 1;
                 slider.Opacity = 1;
             }
             else
             {
                 if (!cmdPlay.IsMouseOver)
                 {
                     cmdPlay.Opacity = 0.1;
                     slider.Opacity = 0.1;
                 }
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Edit.vb" startline="312" endline="324">
<![CDATA[
 	
     Sub OptOutputCheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles optOutput.CheckedChanged
         lblOVFormat.Visible = True
         lblOVBitrate.Visible = True
         lblOResolution.Visible = True
         lblOAspect.Visible = True
         lblOFPS.Visible = True
         lblOAFormat.Visible = True
         lblOABitrate.Visible = True
         lblOChannels.Visible = True
         lblOLength.Visible = True
         lblOSize.Visible = True
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Edit.xaml.cs" startline="883" endline="899">
<![CDATA[
 
         private void slider_MouseEnter(object sender, MouseEventArgs e)
         {
             if (slider.IsMouseOver || videoPreview.IsMouseOver)
             {
                 cmdPlay.Opacity = 1;
                 slider.Opacity = 1;
             }
             else
             {
                 if (!cmdPlay.IsMouseOver)
                 {
                     cmdPlay.Opacity = 0.1;
                     slider.Opacity = 0.1;
                 }
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Edit.vb" startline="325" endline="337">
<![CDATA[
 	
     Sub OptInputCheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles optInput.CheckedChanged
         lblOVFormat.Visible = False
         lblOVBitrate.Visible = False
         lblOResolution.Visible = False
         lblOAspect.Visible = False
         lblOFPS.Visible = False
         lblOAFormat.Visible = False
         lblOABitrate.Visible = False
         lblOChannels.Visible = False
         lblOLength.Visible = False
         lblOSize.Visible = False
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Edit.xaml.cs" startline="883" endline="899">
<![CDATA[
 
         private void slider_MouseEnter(object sender, MouseEventArgs e)
         {
             if (slider.IsMouseOver || videoPreview.IsMouseOver)
             {
                 cmdPlay.Opacity = 1;
                 slider.Opacity = 1;
             }
             else
             {
                 if (!cmdPlay.IsMouseOver)
                 {
                     cmdPlay.Opacity = 0.1;
                     slider.Opacity = 0.1;
                 }
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Edit.vb" startline="431" endline="438">
<![CDATA[
 	
     Sub OptCustomBitrateCheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles optCustomBitrate.CheckedChanged
         lblBitrate.Visible = True
         txtBitrate.Visible = True
         chkFileSize.Enabled = False
         txtFileSize.Enabled = False
         cboFileSize.Enabled = False
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Edit.xaml.cs" startline="883" endline="899">
<![CDATA[
 
         private void slider_MouseEnter(object sender, MouseEventArgs e)
         {
             if (slider.IsMouseOver || videoPreview.IsMouseOver)
             {
                 cmdPlay.Opacity = 1;
                 slider.Opacity = 1;
             }
             else
             {
                 if (!cmdPlay.IsMouseOver)
                 {
                     cmdPlay.Opacity = 0.1;
                     slider.Opacity = 0.1;
                 }
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Edit.vb" startline="439" endline="446">
<![CDATA[
 	
     Sub OptAutoBitrateCheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles optAutoBitrate.CheckedChanged
         lblBitrate.Visible = False
         txtBitrate.Visible = False
         chkFileSize.Enabled = True
         txtFileSize.Enabled = True
         cboFileSize.Enabled = True
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Edit.xaml.cs" startline="883" endline="899">
<![CDATA[
 
         private void slider_MouseEnter(object sender, MouseEventArgs e)
         {
             if (slider.IsMouseOver || videoPreview.IsMouseOver)
             {
                 cmdPlay.Opacity = 1;
                 slider.Opacity = 1;
             }
             else
             {
                 if (!cmdPlay.IsMouseOver)
                 {
                     cmdPlay.Opacity = 0.1;
                     slider.Opacity = 0.1;
                 }
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MainForm.vb" startline="235" endline="242">
<![CDATA[
 	
     Sub OptCustomBitrateCheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles optCustomBitrate.CheckedChanged
         lblBitrate.Visible = True
         txtBitrate.Visible = True
         chkFileSize.Enabled = False
         txtFileSize.Enabled = False
         cboFileSize.Enabled = False
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Edit.xaml.cs" startline="883" endline="899">
<![CDATA[
 
         private void slider_MouseEnter(object sender, MouseEventArgs e)
         {
             if (slider.IsMouseOver || videoPreview.IsMouseOver)
             {
                 cmdPlay.Opacity = 1;
                 slider.Opacity = 1;
             }
             else
             {
                 if (!cmdPlay.IsMouseOver)
                 {
                     cmdPlay.Opacity = 0.1;
                     slider.Opacity = 0.1;
                 }
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MainForm.vb" startline="243" endline="250">
<![CDATA[
 	
     Sub OptAutoBitrateCheckedChanged(ByVal sender As Object, ByVal e As EventArgs) Handles optAutoBitrate.CheckedChanged
         lblBitrate.Visible = False
         txtBitrate.Visible = False
         chkFileSize.Enabled = True
         txtFileSize.Enabled = True
         cboFileSize.Enabled = True
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Edit.xaml.cs" startline="883" endline="899">
<![CDATA[
 
         private void slider_MouseEnter(object sender, MouseEventArgs e)
         {
             if (slider.IsMouseOver || videoPreview.IsMouseOver)
             {
                 cmdPlay.Opacity = 1;
                 slider.Opacity = 1;
             }
             else
             {
                 if (!cmdPlay.IsMouseOver)
                 {
                     cmdPlay.Opacity = 0.1;
                     slider.Opacity = 0.1;
                 }
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Player.Designer.vb" startline="29" endline="46">
<![CDATA[
 	
 	''' <summary>
 	''' This method is required for Windows Forms designer support.
 	''' Do not change the method contents inside the source code editor. The Forms designer might
 	''' not be able to load this method if it was changed manually.
 	''' </summary>
 	Private Sub InitializeComponent()
 		Me.SuspendLayout
 		'
 		'Player
 		'
 		Me.AutoScaleDimensions = New System.Drawing.SizeF(6!, 13!)
 		Me.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font
 		Me.ClientSize = New System.Drawing.Size(545, 385)
 		Me.Name = "Player"
 		Me.Text = "Player"
 		Me.ResumeLayout(false)
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Edit.xaml.cs" startline="883" endline="899">
<![CDATA[
 
         private void slider_MouseEnter(object sender, MouseEventArgs e)
         {
             if (slider.IsMouseOver || videoPreview.IsMouseOver)
             {
                 cmdPlay.Opacity = 1;
                 slider.Opacity = 1;
             }
             else
             {
                 if (!cmdPlay.IsMouseOver)
                 {
                     cmdPlay.Opacity = 0.1;
                     slider.Opacity = 0.1;
                 }
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Wizard.vb" startline="846" endline="858">
<![CDATA[
 
     Sub CmdPage2Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmdPage2.Click
         Page2.Visible = True
         cmdPage2.Enabled = False
         cmdPage1.Enabled = True
         cmdOpen.Visible = False
         cmdDel.Visible = False
         cmdEdit.Visible = False
         cmdUp.Visible = False
         cmdDown.Visible = False
         chkAppend.Visible = False
         cmdClear.Visible = False
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\Edit.xaml.cs" startline="883" endline="899">
<![CDATA[
 
         private void slider_MouseEnter(object sender, MouseEventArgs e)
         {
             if (slider.IsMouseOver || videoPreview.IsMouseOver)
             {
                 cmdPlay.Opacity = 1;
                 slider.Opacity = 1;
             }
             else
             {
                 if (!cmdPlay.IsMouseOver)
                 {
                     cmdPlay.Opacity = 0.1;
                     slider.Opacity = 0.1;
                 }
             }
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Wizard.vb" startline="859" endline="871">
<![CDATA[
 
     Sub CmdPage1Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmdPage1.Click
         Page2.Visible = False
         cmdPage1.Enabled = False
         cmdPage2.Enabled = True
         cmdOpen.Visible = True
         cmdDel.Visible = True
         cmdEdit.Visible = True
         cmdUp.Visible = True
         cmdDown.Visible = True
         chkAppend.Visible = True
         cmdClear.Visible = True
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\About.xaml.cs" startline="123" endline="129">
<![CDATA[
         
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\About.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\About.xaml.cs" startline="123" endline="129">
<![CDATA[
         
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\AVSWAV.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\About.xaml.cs" startline="123" endline="129">
<![CDATA[
         
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Checking.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\About.xaml.cs" startline="123" endline="129">
<![CDATA[
         
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Crop.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\About.xaml.cs" startline="123" endline="129">
<![CDATA[
         
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\ExportProfile.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\About.xaml.cs" startline="123" endline="129">
<![CDATA[
         
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\ImportProfile.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\About.xaml.cs" startline="123" endline="129">
<![CDATA[
         
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MPEG.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\About.xaml.cs" startline="123" endline="129">
<![CDATA[
         
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Options.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
     End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\About.xaml.cs" startline="123" endline="129">
<![CDATA[
         
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Player.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\About.xaml.cs" startline="123" endline="129">
<![CDATA[
         
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Profiles.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\About.xaml.cs" startline="123" endline="129">
<![CDATA[
         
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Testing.vb" startline="12" endline="19">
<![CDATA[
 	Public Sub New()
 	dim edittracklist as New List(Of track), currenttrack as Integer
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\About.xaml.cs" startline="123" endline="129">
<![CDATA[
         
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Updating.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\About.xaml.cs" startline="123" endline="129">
<![CDATA[
         
         protected override void OnSourceInitialized(EventArgs e)
         {
             base.OnSourceInitialized(e);
             IntPtr hwnd = new WindowInteropHelper(this).Handle;
             HwndSource.FromHwnd(hwnd).AddHook(new HwndSourceHook(WndProc));
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\x264.vb" startline="12" endline="19">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\obj\x86\Debug\GeneratedInternalTypeHelper.g.cs" startline="35" endline="41">
<![CDATA[
         
         /// <summary>
         /// SetPropertyValue
         /// </summary>
         protected override void SetPropertyValue(System.Reflection.PropertyInfo propertyInfo, object target, object value, System.Globalization.CultureInfo culture) {
             propertyInfo.SetValue(target, value, System.Reflection.BindingFlags.Default, null, null, culture);
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\About.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\obj\x86\Debug\GeneratedInternalTypeHelper.g.cs" startline="35" endline="41">
<![CDATA[
         
         /// <summary>
         /// SetPropertyValue
         /// </summary>
         protected override void SetPropertyValue(System.Reflection.PropertyInfo propertyInfo, object target, object value, System.Globalization.CultureInfo culture) {
             propertyInfo.SetValue(target, value, System.Reflection.BindingFlags.Default, null, null, culture);
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\AVSWAV.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\obj\x86\Debug\GeneratedInternalTypeHelper.g.cs" startline="35" endline="41">
<![CDATA[
         
         /// <summary>
         /// SetPropertyValue
         /// </summary>
         protected override void SetPropertyValue(System.Reflection.PropertyInfo propertyInfo, object target, object value, System.Globalization.CultureInfo culture) {
             propertyInfo.SetValue(target, value, System.Reflection.BindingFlags.Default, null, null, culture);
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Checking.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\obj\x86\Debug\GeneratedInternalTypeHelper.g.cs" startline="35" endline="41">
<![CDATA[
         
         /// <summary>
         /// SetPropertyValue
         /// </summary>
         protected override void SetPropertyValue(System.Reflection.PropertyInfo propertyInfo, object target, object value, System.Globalization.CultureInfo culture) {
             propertyInfo.SetValue(target, value, System.Reflection.BindingFlags.Default, null, null, culture);
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Crop.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\obj\x86\Debug\GeneratedInternalTypeHelper.g.cs" startline="35" endline="41">
<![CDATA[
         
         /// <summary>
         /// SetPropertyValue
         /// </summary>
         protected override void SetPropertyValue(System.Reflection.PropertyInfo propertyInfo, object target, object value, System.Globalization.CultureInfo culture) {
             propertyInfo.SetValue(target, value, System.Reflection.BindingFlags.Default, null, null, culture);
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\MPEG.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\obj\x86\Debug\GeneratedInternalTypeHelper.g.cs" startline="35" endline="41">
<![CDATA[
         
         /// <summary>
         /// SetPropertyValue
         /// </summary>
         protected override void SetPropertyValue(System.Reflection.PropertyInfo propertyInfo, object target, object value, System.Globalization.CultureInfo culture) {
             propertyInfo.SetValue(target, value, System.Reflection.BindingFlags.Default, null, null, culture);
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Player.vb" startline="11" endline="18">
<![CDATA[
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
<clone_pair>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\C# Rewrite - WPF\Trunk\ASXGui\obj\x86\Debug\GeneratedInternalTypeHelper.g.cs" startline="35" endline="41">
<![CDATA[
         
         /// <summary>
         /// SetPropertyValue
         /// </summary>
         protected override void SetPropertyValue(System.Reflection.PropertyInfo propertyInfo, object target, object value, System.Globalization.CultureInfo culture) {
             propertyInfo.SetValue(target, value, System.Reflection.BindingFlags.Default, null, null, culture);
         }
]]>
</clone_fragment>
<clone_fragment file="C:\Users\faa634\Desktop\c vb\AxsGui\asxgui\VB.NET - current\Trunk\Testing.vb" startline="12" endline="19">
<![CDATA[
 	Public Sub New()
 	dim edittracklist as New List(Of track), currenttrack as Integer
 	Public Sub New()
 		' The Me.InitializeComponent call is required for Windows Forms designer support.
 		Me.InitializeComponent()
 		
 		'
 		' TODO 
 		'
 	End Sub
]]>
</clone_fragment>
</clone_pair>
</clones>
