<project><name></name><description></description><prog_language></prog_language><source_elements>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\MainForm.cs" startline="8" endline="20"><![CDATA[
 		private System.ComponentModel.IContainer components = null;
 		public MainForm()
 		{
 			InitializeComponent();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\MainForm.cs" startline="21" endline="26"><![CDATA[
 
 		private void MainForm_Load(object sender, EventArgs e)
 		{
 			refreshParticleList();
 			initViewport();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\MainForm.cs" startline="27" endline="32"><![CDATA[
 
 		private void initViewport()
 		{
 			viewport = new Viewport();
 			viewport.Start(panelViewport.Handle);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\MainForm.cs" startline="33" endline="37"><![CDATA[
 
 		private void MainForm_FormClosed(object sender, FormClosedEventArgs e)
 		{
 			viewport.Stop();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\MainForm.cs" startline="38" endline="49"><![CDATA[
 
 		private void refreshParticleList()
 		{
 			listBoxParticleList.Items.Clear();
 
 			string[] l = Directory.GetFiles("../../media", "*particle*", SearchOption.TopDirectoryOnly);
 			foreach (string f in l)
 				addImageToParticleList(f, false);
 			foreach (string f in l)
 				addImageToParticleList(f, false);
 
 			if (listBoxParticleList.Items.Count > 0)
 				listBoxParticleList.SelectedIndex = 0;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\MainForm.cs" startline="50" endline="64"><![CDATA[
 
 		private void addImageToParticleList(string f, bool makeThisImageSelected)
 		{
 			Image i = new Bitmap(f);
 
 			ParticleInfo p = new ParticleInfo();
 			p.FileName = f;
 			p.Preview = i.GetThumbnailImage(128, 128, null, IntPtr.Zero);
 			p.DisplayName = Path.GetFileName(f) + " (" + i.Width + "x" + i.Height + ")";
 
 			int s = listBoxParticleList.Items.Add(p);
 
 			if (makeThisImageSelected)
 				listBoxParticleList.SelectedIndex = s;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\MainForm.cs" startline="65" endline="76"><![CDATA[
 
 		private void listBoxParticleList_SelectedIndexChanged(object sender, EventArgs e)
 		{
 			ParticleInfo p = listBoxParticleList.SelectedItem as ParticleInfo;
 			if (p != null)
 			{
 				if (viewport != null)
 					viewport.EnqueueCommand(CommandType.Particle, p);
 
 				pictureBoxParticlePreview.Image = p.Preview;
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\MainForm.cs" startline="77" endline="86"><![CDATA[
 
 		private void buttonBrowseForTexture_Click(object sender, EventArgs e)
 		{
 			OpenFileDialog f = new OpenFileDialog();
 			f.Filter = "Image files (*.bmp;*.jpg;*.png;*.tga)|*.bmp;*.jpg;*.png;*.tga|All files (*.*)|*.*";
 			DialogResult r = f.ShowDialog();
 
 			if (r == DialogResult.OK)
 				addImageToParticleList(f.FileName, true);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\MainForm.cs" startline="87" endline="91"><![CDATA[
 
 		private void checkBoxAxes_CheckedChanged(object sender, EventArgs e)
 		{
 			viewport.EnqueueCommand(CommandType.Axes, checkBoxAxes.Checked);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\MainForm.cs" startline="92" endline="96"><![CDATA[
 
 		private void checkBoxPlane_CheckedChanged(object sender, EventArgs e)
 		{
 			viewport.EnqueueCommand(CommandType.Plane, checkBoxPlane.Checked);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\MainForm.cs" startline="97" endline="101"><![CDATA[
 
 		private void checkBoxEmitt_CheckedChanged(object sender, EventArgs e)
 		{
 			viewport.EnqueueCommand(CommandType.Rate, checkBoxEmitt.Checked ? trackBarRate.Value 
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\MainForm.cs" startline="102" endline="110"><![CDATA[
 
 		private void MainForm_Resize(object sender, EventArgs e)
 		{
 			viewport.EnqueueCommand(CommandType.Resize, new int[3] {
 				panelViewport.ClientSize.Width,
 				panelViewport.ClientSize.Height,
 				checkBoxKeepAspect.Checked ? 1 
 			});
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\MainForm.cs" startline="111" endline="115"><![CDATA[
 
 		private void trackBarPosition_Scroll(object sender, EventArgs e)
 		{
 			viewport.EnqueueCommand(CommandType.Position, new float[3] { trackBarPosition.Value, 0, 0 });
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\MainForm.cs" startline="116" endline="120"><![CDATA[
 
 		private void trackBarRadius_Scroll(object sender, EventArgs e)
 		{
 			viewport.EnqueueCommand(CommandType.Radius, (float)trackBarRadius.Value);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\MainForm.cs" startline="121" endline="125"><![CDATA[
 
 		private void trackBarCameraView_Scroll(object sender, EventArgs e)
 		{
 			viewport.EnqueueCommand(CommandType.CameraView, (float)trackBarCameraView.Value);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\MainForm.cs" startline="126" endline="131"><![CDATA[
 
 		private void trackBarRate_Scroll(object sender, EventArgs e)
 		{
 			if (checkBoxEmitt.Checked)
 				viewport.EnqueueCommand(CommandType.Rate, trackBarRate.Value);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\MainForm.cs" startline="132" endline="136"><![CDATA[
 
 		private void trackBarSize_Scroll(object sender, EventArgs e)
 		{
 			viewport.EnqueueCommand(CommandType.Size, trackBarSize.Value);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\MainForm.cs" startline="137" endline="145"><![CDATA[
 
 		private void trackBarDirection_Scroll(object sender, EventArgs e)
 		{
 			viewport.EnqueueCommand(CommandType.Direction, new float[3] {
 				trackBarDirectionX.Value / 100.0f,
 				trackBarDirectionY.Value / 100.0f,
 				trackBarDirectionZ.Value / 100.0f
 			});
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\MainForm.cs" startline="146" endline="150"><![CDATA[
 
 		private void checkBoxAffectorFadeOut_CheckedChanged(object sender, EventArgs e)
 		{
 			viewport.EnqueueCommand(CommandType.FadeOut, checkBoxAffectorFadeOut.Checked);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\MainForm.cs" startline="151" endline="155"><![CDATA[
 
 		private void checkBoxAffectorRotation_CheckedChanged(object sender, EventArgs e)
 		{
 			viewport.EnqueueCommand(CommandType.Rotation, checkBoxAffectorRotation.Checked);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\MainForm.cs" startline="156" endline="160"><![CDATA[
 
 		private void checkBoxAffectorGravity_CheckedChanged(object sender, EventArgs e)
 		{
 			viewport.EnqueueCommand(CommandType.Gravity, checkBoxAffectorGravity.Checked);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\MainForm.Designer.cs" startline="15" endline="21"><![CDATA[
 		{
 			if (disposing && (components != null))
 			{
 				components.Dispose();
 			}
 			base.Dispose(disposing);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\MainForm.Designer.cs" startline="22" endline="487"><![CDATA[
 
 		#region Windows Form Designer generated code
 
 		/// <summary>
 		/// Required method for Designer support - do not modify
 		/// the contents of this method with the code editor.
 		/// </summary>
 		private void InitializeComponent()
 		{
 			this.groupBox1 = new System.Windows.Forms.GroupBox();
 			this.pictureBoxParticlePreview = new System.Windows.Forms.PictureBox();
 			this.listBoxParticleList = new System.Windows.Forms.ListBox();
 			this.groupBox2 = new System.Windows.Forms.GroupBox();
 			this.label3 = new System.Windows.Forms.Label();
 			this.checkBoxPlane = new System.Windows.Forms.CheckBox();
 			this.checkBoxAxes = new System.Windows.Forms.CheckBox();
 			this.trackBarCameraView = new System.Windows.Forms.TrackBar();
 			this.panelViewport = new System.Windows.Forms.Panel();
 			this.groupBox3 = new System.Windows.Forms.GroupBox();
 			this.label6 = new System.Windows.Forms.Label();
 			this.label5 = new System.Windows.Forms.Label();
 			this.label4 = new System.Windows.Forms.Label();
 			this.label2 = new System.Windows.Forms.Label();
 			this.trackBarDirectionZ = new System.Windows.Forms.TrackBar();
 			this.trackBarDirectionY = new System.Windows.Forms.TrackBar();
 			this.trackBarDirectionX = new System.Windows.Forms.TrackBar();
 			this.trackBarSize = new System.Windows.Forms.TrackBar();
 			this.label1 = new System.Windows.Forms.Label();
 			this.trackBarRate = new System.Windows.Forms.TrackBar();
 			this.trackBarRadius = new System.Windows.Forms.TrackBar();
 			this.trackBarPosition = new System.Windows.Forms.TrackBar();
 			this.checkBoxEmitt = new System.Windows.Forms.CheckBox();
 			this.groupBox4 = new System.Windows.Forms.GroupBox();
 			this.checkBoxAffectorRotation = new System.Windows.Forms.CheckBox();
 			this.checkBoxAffectorGravity = new System.Windows.Forms.CheckBox();
 			this.checkBoxAffectorFadeOut = new System.Windows.Forms.CheckBox();
 			this.checkBoxKeepAspect = new System.Windows.Forms.CheckBox();
 			this.label7 = new System.Windows.Forms.Label();
 			this.buttonBrowseForTexture = new System.Windows.Forms.Button();
 			this.groupBox1.SuspendLayout();
 			((System.ComponentModel.ISupportInitialize)(this.pictureBoxParticlePreview)).BeginInit();
 			this.groupBox2.SuspendLayout();
 			((System.ComponentModel.ISupportInitialize)(this.trackBarCameraView)).BeginInit();
 			this.groupBox3.SuspendLayout();
 			((System.ComponentModel.ISupportInitialize)(this.trackBarDirectionZ)).BeginInit();
 			((System.ComponentModel.ISupportInitialize)(this.trackBarDirectionY)).BeginInit();
 			((System.ComponentModel.ISupportInitialize)(this.trackBarDirectionX)).BeginInit();
 			((System.ComponentModel.ISupportInitialize)(this.trackBarSize)).BeginInit();
 			((System.ComponentModel.ISupportInitialize)(this.trackBarRate)).BeginInit();
 			((System.ComponentModel.ISupportInitialize)(this.trackBarRadius)).BeginInit();
 			((System.ComponentModel.ISupportInitialize)(this.trackBarPosition)).BeginInit();
 			this.groupBox4.SuspendLayout();
 			this.SuspendLayout();
 			// 
 			// groupBox1
 			// 
 			this.groupBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
 						| System.Windows.Forms.AnchorStyles.Left)));
 			this.groupBox1.Controls.Add(this.buttonBrowseForTexture);
 			this.groupBox1.Controls.Add(this.label7);
 			this.groupBox1.Controls.Add(this.pictureBoxParticlePreview);
 			this.groupBox1.Controls.Add(this.listBoxParticleList);
 			this.groupBox1.Location = new System.Drawing.Point(12, 12);
 			this.groupBox1.Name = "groupBox1";
 			this.groupBox1.Size = new System.Drawing.Size(140, 380);
 			this.groupBox1.TabIndex = 0;
 			this.groupBox1.TabStop = false;
 			this.groupBox1.Text = "Particle Texture";
 			// 
 			// pictureBoxParticlePreview
 			// 
 			this.pictureBoxParticlePreview.Location = new System.Drawing.Point(6, 19);
 			this.pictureBoxParticlePreview.Name = "pictureBoxParticlePreview";
 			this.pictureBoxParticlePreview.Size = new System.Drawing.Size(128, 128);
 			this.pictureBoxParticlePreview.SizeMode = System.Windows.Forms.PictureBoxSizeMode.Zoom;
 			this.pictureBoxParticlePreview.TabIndex = 1;
 			this.pictureBoxParticlePreview.TabStop = false;
 			// 
 			// listBoxParticleList
 			// 
 			this.listBoxParticleList.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
 						| System.Windows.Forms.AnchorStyles.Left)));
 			this.listBoxParticleList.FormattingEnabled = true;
 			this.listBoxParticleList.IntegralHeight = false;
 			this.listBoxParticleList.Location = new System.Drawing.Point(6, 153);
 			this.listBoxParticleList.Name = "listBoxParticleList";
 			this.listBoxParticleList.Size = new System.Drawing.Size(128, 80);
 			this.listBoxParticleList.TabIndex = 0;
 			this.listBoxParticleList.SelectedIndexChanged += new System.EventHandler(this.listBoxParticleList_SelectedIndexChanged);
 			// 
 			// groupBox2
 			// 
 			this.groupBox2.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
 						| System.Windows.Forms.AnchorStyles.Left)
 						| System.Windows.Forms.AnchorStyles.Right)));
 			this.groupBox2.Controls.Add(this.label3);
 			this.groupBox2.Controls.Add(this.checkBoxPlane);
 			this.groupBox2.Controls.Add(this.checkBoxKeepAspect);
 			this.groupBox2.Controls.Add(this.checkBoxAxes);
 			this.groupBox2.Controls.Add(this.trackBarCameraView);
 			this.groupBox2.Controls.Add(this.panelViewport);
 			this.groupBox2.Location = new System.Drawing.Point(158, 12);
 			this.groupBox2.Name = "groupBox2";
 			this.groupBox2.Size = new System.Drawing.Size(412, 380);
 			this.groupBox2.TabIndex = 1;
 			this.groupBox2.TabStop = false;
 			this.groupBox2.Text = "Viewport";
 			// 
 			// label3
 			// 
 			this.label3.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
 			this.label3.AutoSize = true;
 			this.label3.Location = new System.Drawing.Point(141, 332);
 			this.label3.Name = "label3";
 			this.label3.Size = new System.Drawing.Size(69, 13);
 			this.label3.TabIndex = 2;
 			this.label3.Text = "Camera View";
 			// 
 			// checkBoxPlane
 			// 
 			this.checkBoxPlane.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
 			this.checkBoxPlane.AutoSize = true;
 			this.checkBoxPlane.Checked = true;
 			this.checkBoxPlane.CheckState = System.Windows.Forms.CheckState.Checked;
 			this.checkBoxPlane.Location = new System.Drawing.Point(6, 325);
 			this.checkBoxPlane.Name = "checkBoxPlane";
 			this.checkBoxPlane.Size = new System.Drawing.Size(53, 17);
 			this.checkBoxPlane.TabIndex = 2;
 			this.checkBoxPlane.Text = "Plane";
 			this.checkBoxPlane.UseVisualStyleBackColor = true;
 			this.checkBoxPlane.CheckedChanged += new System.EventHandler(this.checkBoxPlane_CheckedChanged);
 			// 
 			// checkBoxAxes
 			// 
 			this.checkBoxAxes.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
 			this.checkBoxAxes.AutoSize = true;
 			this.checkBoxAxes.Location = new System.Drawing.Point(65, 325);
 			this.checkBoxAxes.Name = "checkBoxAxes";
 			this.checkBoxAxes.Size = new System.Drawing.Size(49, 17);
 			this.checkBoxAxes.TabIndex = 1;
 			this.checkBoxAxes.Text = "Axes";
 			this.checkBoxAxes.UseVisualStyleBackColor = true;
 			this.checkBoxAxes.CheckedChanged += new System.EventHandler(this.checkBoxAxes_CheckedChanged);
 			// 
 			// trackBarCameraView
 			// 
 			this.trackBarCameraView.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
 			this.trackBarCameraView.AutoSize = false;
 			this.trackBarCameraView.LargeChange = 10;
 			this.trackBarCameraView.Location = new System.Drawing.Point(6, 348);
 			this.trackBarCameraView.Maximum = 250;
 			this.trackBarCameraView.Minimum = -100;
 			this.trackBarCameraView.Name = "trackBarCameraView";
 			this.trackBarCameraView.Size = new System.Drawing.Size(204, 26);
 			this.trackBarCameraView.TabIndex = 1;
 			this.trackBarCameraView.TickFrequency = 10;
 			this.trackBarCameraView.Value = 80;
 			this.trackBarCameraView.Scroll += new System.EventHandler(this.trackBarCameraView_Scroll);
 			// 
 			// panelViewport
 			// 
 			this.panelViewport.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
 						| System.Windows.Forms.AnchorStyles.Left)
 						| System.Windows.Forms.AnchorStyles.Right)));
 			this.panelViewport.Location = new System.Drawing.Point(6, 19);
 			this.panelViewport.Name = "panelViewport";
 			this.panelViewport.Size = new System.Drawing.Size(400, 300);
 			this.panelViewport.TabIndex = 0;
 			// 
 			// groupBox3
 			// 
 			this.groupBox3.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
 			this.groupBox3.Controls.Add(this.label6);
 			this.groupBox3.Controls.Add(this.label5);
 			this.groupBox3.Controls.Add(this.label4);
 			this.groupBox3.Controls.Add(this.label2);
 			this.groupBox3.Controls.Add(this.trackBarDirectionZ);
 			this.groupBox3.Controls.Add(this.trackBarDirectionY);
 			this.groupBox3.Controls.Add(this.trackBarDirectionX);
 			this.groupBox3.Controls.Add(this.trackBarSize);
 			this.groupBox3.Controls.Add(this.label1);
 			this.groupBox3.Controls.Add(this.trackBarRate);
 			this.groupBox3.Controls.Add(this.trackBarRadius);
 			this.groupBox3.Controls.Add(this.trackBarPosition);
 			this.groupBox3.Controls.Add(this.checkBoxEmitt);
 			this.groupBox3.Location = new System.Drawing.Point(576, 12);
 			this.groupBox3.Name = "groupBox3";
 			this.groupBox3.Size = new System.Drawing.Size(216, 274);
 			this.groupBox3.TabIndex = 2;
 			this.groupBox3.TabStop = false;
 			this.groupBox3.Text = "Emitter";
 			// 
 			// label6
 			// 
 			this.label6.AutoSize = true;
 			this.label6.Location = new System.Drawing.Point(6, 223);
 			this.label6.Name = "label6";
 			this.label6.Size = new System.Drawing.Size(91, 13);
 			this.label6.TabIndex = 2;
 			this.label6.Text = "Direction (X, Y, Z)";
 			// 
 			// label5
 			// 
 			this.label5.AutoSize = true;
 			this.label5.Location = new System.Drawing.Point(6, 178);
 			this.label5.Name = "label5";
 			this.label5.Size = new System.Drawing.Size(27, 13);
 			this.label5.TabIndex = 2;
 			this.label5.Text = "Size";
 			// 
 			// label4
 			// 
 			this.label4.AutoSize = true;
 			this.label4.Location = new System.Drawing.Point(6, 133);
 			this.label4.Name = "label4";
 			this.label4.Size = new System.Drawing.Size(30, 13);
 			this.label4.TabIndex = 2;
 			this.label4.Text = "Rate";
 			// 
 			// label2
 			// 
 			this.label2.AutoSize = true;
 			this.label2.Location = new System.Drawing.Point(6, 88);
 			this.label2.Name = "label2";
 			this.label2.Size = new System.Drawing.Size(40, 13);
 			this.label2.TabIndex = 2;
 			this.label2.Text = "Radius";
 			// 
 			// trackBarDirectionZ
 			// 
 			this.trackBarDirectionZ.AutoSize = false;
 			this.trackBarDirectionZ.LargeChange = 20;
 			this.trackBarDirectionZ.Location = new System.Drawing.Point(148, 239);
 			this.trackBarDirectionZ.Maximum = 50;
 			this.trackBarDirectionZ.Minimum = -50;
 			this.trackBarDirectionZ.Name = "trackBarDirectionZ";
 			this.trackBarDirectionZ.Size = new System.Drawing.Size(62, 26);
 			this.trackBarDirectionZ.TabIndex = 1;
 			this.trackBarDirectionZ.TickFrequency = 10;
 			this.trackBarDirectionZ.Scroll += new System.EventHandler(this.trackBarDirection_Scroll);
 			// 
 			// trackBarDirectionY
 			// 
 			this.trackBarDirectionY.AutoSize = false;
 			this.trackBarDirectionY.LargeChange = 20;
 			this.trackBarDirectionY.Location = new System.Drawing.Point(78, 239);
 			this.trackBarDirectionY.Maximum = 50;
 			this.trackBarDirectionY.Minimum = -50;
 			this.trackBarDirectionY.Name = "trackBarDirectionY";
 			this.trackBarDirectionY.Size = new System.Drawing.Size(62, 26);
 			this.trackBarDirectionY.TabIndex = 1;
 			this.trackBarDirectionY.TickFrequency = 10;
 			this.trackBarDirectionY.Value = 10;
 			this.trackBarDirectionY.Scroll += new System.EventHandler(this.trackBarDirection_Scroll);
 			// 
 			// trackBarDirectionX
 			// 
 			this.trackBarDirectionX.AutoSize = false;
 			this.trackBarDirectionX.LargeChange = 20;
 			this.trackBarDirectionX.Location = new System.Drawing.Point(10, 239);
 			this.trackBarDirectionX.Maximum = 50;
 			this.trackBarDirectionX.Minimum = -50;
 			this.trackBarDirectionX.Name = "trackBarDirectionX";
 			this.trackBarDirectionX.Size = new System.Drawing.Size(62, 26);
 			this.trackBarDirectionX.TabIndex = 1;
 			this.trackBarDirectionX.TickFrequency = 10;
 			this.trackBarDirectionX.Scroll += new System.EventHandler(this.trackBarDirection_Scroll);
 			// 
 			// trackBarSize
 			// 
 			this.trackBarSize.AutoSize = false;
 			this.trackBarSize.LargeChange = 10;
 			this.trackBarSize.Location = new System.Drawing.Point(5, 194);
 			this.trackBarSize.Maximum = 200;
 			this.trackBarSize.Minimum = 5;
 			this.trackBarSize.Name = "trackBarSize";
 			this.trackBarSize.Size = new System.Drawing.Size(205, 26);
 			this.trackBarSize.TabIndex = 1;
 			this.trackBarSize.TickFrequency = 10;
 			this.trackBarSize.Value = 40;
 			this.trackBarSize.Scroll += new System.EventHandler(this.trackBarSize_Scroll);
 			// 
 			// label1
 			// 
 			this.label1.AutoSize = true;
 			this.label1.Location = new System.Drawing.Point(7, 43);
 			this.label1.Name = "label1";
 			this.label1.Size = new System.Drawing.Size(60, 13);
 			this.label1.TabIndex = 2;
 			this.label1.Text = "Position (X)";
 			// 
 			// trackBarRate
 			// 
 			this.trackBarRate.AutoSize = false;
 			this.trackBarRate.LargeChange = 100;
 			this.trackBarRate.Location = new System.Drawing.Point(5, 149);
 			this.trackBarRate.Maximum = 2000;
 			this.trackBarRate.Minimum = 50;
 			this.trackBarRate.Name = "trackBarRate";
 			this.trackBarRate.Size = new System.Drawing.Size(205, 26);
 			this.trackBarRate.TabIndex = 1;
 			this.trackBarRate.TickFrequency = 50;
 			this.trackBarRate.Value = 300;
 			this.trackBarRate.Scroll += new System.EventHandler(this.trackBarRate_Scroll);
 			// 
 			// trackBarRadius
 			// 
 			this.trackBarRadius.AutoSize = false;
 			this.trackBarRadius.LargeChange = 10;
 			this.trackBarRadius.Location = new System.Drawing.Point(5, 104);
 			this.trackBarRadius.Maximum = 100;
 			this.trackBarRadius.Minimum = 1;
 			this.trackBarRadius.Name = "trackBarRadius";
 			this.trackBarRadius.Size = new System.Drawing.Size(205, 26);
 			this.trackBarRadius.TabIndex = 1;
 			this.trackBarRadius.TickFrequency = 10;
 			this.trackBarRadius.Value = 20;
 			this.trackBarRadius.Scroll += new System.EventHandler(this.trackBarRadius_Scroll);
 			// 
 			// trackBarPosition
 			// 
 			this.trackBarPosition.AutoSize = false;
 			this.trackBarPosition.LargeChange = 10;
 			this.trackBarPosition.Location = new System.Drawing.Point(6, 59);
 			this.trackBarPosition.Maximum = 100;
 			this.trackBarPosition.Minimum = -100;
 			this.trackBarPosition.Name = "trackBarPosition";
 			this.trackBarPosition.Size = new System.Drawing.Size(204, 26);
 			this.trackBarPosition.TabIndex = 1;
 			this.trackBarPosition.TickFrequency = 10;
 			this.trackBarPosition.Scroll += new System.EventHandler(this.trackBarPosition_Scroll);
 			// 
 			// checkBoxEmitt
 			// 
 			this.checkBoxEmitt.AutoSize = true;
 			this.checkBoxEmitt.Checked = true;
 			this.checkBoxEmitt.CheckState = System.Windows.Forms.CheckState.Checked;
 			this.checkBoxEmitt.Location = new System.Drawing.Point(6, 19);
 			this.checkBoxEmitt.Name = "checkBoxEmitt";
 			this.checkBoxEmitt.Size = new System.Drawing.Size(49, 17);
 			this.checkBoxEmitt.TabIndex = 0;
 			this.checkBoxEmitt.Text = "Emitt";
 			this.checkBoxEmitt.UseVisualStyleBackColor = true;
 			this.checkBoxEmitt.CheckedChanged += new System.EventHandler(this.checkBoxEmitt_CheckedChanged);
 			// 
 			// groupBox4
 			// 
 			this.groupBox4.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
 			this.groupBox4.Controls.Add(this.checkBoxAffectorRotation);
 			this.groupBox4.Controls.Add(this.checkBoxAffectorGravity);
 			this.groupBox4.Controls.Add(this.checkBoxAffectorFadeOut);
 			this.groupBox4.Location = new System.Drawing.Point(576, 292);
 			this.groupBox4.Name = "groupBox4";
 			this.groupBox4.Size = new System.Drawing.Size(216, 100);
 			this.groupBox4.TabIndex = 3;
 			this.groupBox4.TabStop = false;
 			this.groupBox4.Text = "Affectors";
 			// 
 			// checkBoxAffectorRotation
 			// 
 			this.checkBoxAffectorRotation.AutoSize = true;
 			this.checkBoxAffectorRotation.Checked = true;
 			this.checkBoxAffectorRotation.CheckState = System.Windows.Forms.CheckState.Checked;
 			this.checkBoxAffectorRotation.Location = new System.Drawing.Point(6, 42);
 			this.checkBoxAffectorRotation.Name = "checkBoxAffectorRotation";
 			this.checkBoxAffectorRotation.Size = new System.Drawing.Size(66, 17);
 			this.checkBoxAffectorRotation.TabIndex = 0;
 			this.checkBoxAffectorRotation.Text = "Rotation";
 			this.checkBoxAffectorRotation.UseVisualStyleBackColor = true;
 			this.checkBoxAffectorRotation.CheckedChanged += new System.EventHandler(this.checkBoxAffectorRotation_CheckedChanged);
 			// 
 			// checkBoxAffectorGravity
 			// 
 			this.checkBoxAffectorGravity.AutoSize = true;
 			this.checkBoxAffectorGravity.Location = new System.Drawing.Point(6, 65);
 			this.checkBoxAffectorGravity.Name = "checkBoxAffectorGravity";
 			this.checkBoxAffectorGravity.Size = new System.Drawing.Size(59, 17);
 			this.checkBoxAffectorGravity.TabIndex = 0;
 			this.checkBoxAffectorGravity.Text = "Gravity";
 			this.checkBoxAffectorGravity.UseVisualStyleBackColor = true;
 			this.checkBoxAffectorGravity.CheckedChanged += new System.EventHandler(this.checkBoxAffectorGravity_CheckedChanged);
 			// 
 			// checkBoxAffectorFadeOut
 			// 
 			this.checkBoxAffectorFadeOut.AutoSize = true;
 			this.checkBoxAffectorFadeOut.Checked = true;
 			this.checkBoxAffectorFadeOut.CheckState = System.Windows.Forms.CheckState.Checked;
 			this.checkBoxAffectorFadeOut.Location = new System.Drawing.Point(6, 19);
 			this.checkBoxAffectorFadeOut.Name = "checkBoxAffectorFadeOut";
 			this.checkBoxAffectorFadeOut.Size = new System.Drawing.Size(68, 17);
 			this.checkBoxAffectorFadeOut.TabIndex = 0;
 			this.checkBoxAffectorFadeOut.Text = "Fade out";
 			this.checkBoxAffectorFadeOut.UseVisualStyleBackColor = true;
 			this.checkBoxAffectorFadeOut.CheckedChanged += new System.EventHandler(this.checkBoxAffectorFadeOut_CheckedChanged);
 			// 
 			// checkBoxKeepAspect
 			// 
 			this.checkBoxKeepAspect.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
 			this.checkBoxKeepAspect.AutoSize = true;
 			this.checkBoxKeepAspect.Checked = true;
 			this.checkBoxKeepAspect.CheckState = System.Windows.Forms.CheckState.Checked;
 			this.checkBoxKeepAspect.Location = new System.Drawing.Point(297, 325);
 			this.checkBoxKeepAspect.Name = "checkBoxKeepAspect";
 			this.checkBoxKeepAspect.Size = new System.Drawing.Size(109, 17);
 			this.checkBoxKeepAspect.TabIndex = 1;
 			this.checkBoxKeepAspect.Text = "Keep aspect ratio";
 			this.checkBoxKeepAspect.UseVisualStyleBackColor = true;
 			this.checkBoxKeepAspect.CheckedChanged += new System.EventHandler(this.MainForm_Resize);
 			// 
 			// label7
 			// 
 			this.label7.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
 			this.label7.Enabled = false;
 			this.label7.Location = new System.Drawing.Point(6, 236);
 			this.label7.Name = "label7";
 			this.label7.Size = new System.Drawing.Size(128, 80);
 			this.label7.TabIndex = 2;
 			this.label7.Text = "Above listed files with the \"particle\" word in its name from \"media\" folder only." +
 				" Use button below to add your own texture to the list.";
 			this.label7.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
 			// 
 			// buttonBrowseForTexture
 			// 
 			this.buttonBrowseForTexture.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
 			this.buttonBrowseForTexture.Location = new System.Drawing.Point(6, 322);
 			this.buttonBrowseForTexture.Name = "buttonBrowseForTexture";
 			this.buttonBrowseForTexture.Size = new System.Drawing.Size(128, 52);
 			this.buttonBrowseForTexture.TabIndex = 3;
 			this.buttonBrowseForTexture.Text = "Browse for own texture...";
 			this.buttonBrowseForTexture.UseVisualStyleBackColor = true;
 			this.buttonBrowseForTexture.Click += new System.EventHandler(this.buttonBrowseForTexture_Click);
 			// 
 			// MainForm
 			// 
 			this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
 			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
 			this.ClientSize = new System.Drawing.Size(804, 404);
 			this.Controls.Add(this.groupBox4);
 			this.Controls.Add(this.groupBox3);
 			this.Controls.Add(this.groupBox2);
 			this.Controls.Add(this.groupBox1);
 			this.MinimumSize = new System.Drawing.Size(820, 442);
 			this.Name = "MainForm";
 			this.Text = "Particle Emitter Viewer - Irrlicht Lime";
 			this.Load += new System.EventHandler(this.MainForm_Load);
 			this.FormClosed += new System.Windows.Forms.FormClosedEventHandler(this.MainForm_FormClosed);
 			this.Resize += new System.EventHandler(this.MainForm_Resize);
 			this.groupBox1.ResumeLayout(false);
 			((System.ComponentModel.ISupportInitialize)(this.pictureBoxParticlePreview)).EndInit();
 			this.groupBox2.ResumeLayout(false);
 			this.groupBox2.PerformLayout();
 			((System.ComponentModel.ISupportInitialize)(this.trackBarCameraView)).EndInit();
 			this.groupBox3.ResumeLayout(false);
 			this.groupBox3.PerformLayout();
 			((System.ComponentModel.ISupportInitialize)(this.trackBarDirectionZ)).EndInit();
 			((System.ComponentModel.ISupportInitialize)(this.trackBarDirectionY)).EndInit();
 			((System.ComponentModel.ISupportInitialize)(this.trackBarDirectionX)).EndInit();
 			((System.ComponentModel.ISupportInitialize)(this.trackBarSize)).EndInit();
 			((System.ComponentModel.ISupportInitialize)(this.trackBarRate)).EndInit();
 			((System.ComponentModel.ISupportInitialize)(this.trackBarRadius)).EndInit();
 			((System.ComponentModel.ISupportInitialize)(this.trackBarPosition)).EndInit();
 			this.groupBox4.ResumeLayout(false);
 			this.groupBox4.PerformLayout();
 			this.ResumeLayout(false);
 
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\ParticleInfo.cs" startline="19" endline="21"><![CDATA[
 		{
 			return DisplayName;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\ParticleInfo.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\ParticleInfo.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\Properties\Settings.Designer.cs" startline="21" endline="23"><![CDATA[
             get {
                 return defaultInstance;
             }
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\Properties\Settings.Designer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\Properties\Settings.Designer.cs" startline="18" endline="18"><![CDATA[
         private static Settings defaultInstance = ((Settings)(global
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\Viewport.cs" startline="25" endline="40"><![CDATA[
 		{
 			if (irrThread != null)
 				throw new InvalidOperationException("Previous viewport needs to be stopped!");
 
 			commandQueue = new Queue<Command>();
 
 			irrThread = new Thread(new ParameterizedThreadStart(irrThreadMain));
 			irrThread.Name = "Irrlicht rendering";
 
 			IrrlichtCreationParameters p = new IrrlichtCreationParameters();
 			//p.AntiAliasing = 4;
 			p.DriverType = DriverType.Direct3D8;
 			p.WindowID = windowHandle;
 
 			irrThread.Start(p);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\Viewport.cs" startline="41" endline="51"><![CDATA[
 
 		public void Stop()
 		{
 			EnqueueCommand(CommandType.Abort, null);
 			irrThread.Join(200);
 
 			if (irrThread.IsAlive)
 				irrThread.Abort();
 
 			irrThread = null;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\Viewport.cs" startline="52" endline="90"><![CDATA[
 
 		public void EnqueueCommand(CommandType type, object param)
 		{
 			Command c = new Command();
 			c.Type = type;
 			c.Param = param;
 
 			// If this is Abort command -- we clean up all the queue (all old commands that still waiting
 			// for processing) and add this Abort command, since it is a top priority command.
 			if (c.Type == CommandType.Abort)
 			{
 				lock (commandQueue)
 				{
 					commandQueue.Clear();
 					commandQueue.Enqueue(c);
 				}
 				return;
 			}
 
 			// We check for old same command and use it instead of adding new one -- for optimization.
 			// This way we make not more than only one command of same type to be in the queue.
 			lock (commandQueue)
 			{
 				foreach (Command n in commandQueue)
 				{
 					if (n.Type == c.Type)
 					{
 						n.Param = c.Param;
 						return;
 					}
 				}
 				foreach (Command n in commandQueue)
 				{
 					if (n.Type == c.Type)
 					{
 						n.Param = c.Param;
 						return;
 					}
 				}
 			}
 
 			// We add new command to queue.
 			lock (commandQueue)
 			{
 				commandQueue.Enqueue(c);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\Viewport.cs" startline="91" endline="210"><![CDATA[
 
 		enum SceneNodeID
 		{
 			Camera,
 			AxisX,
 			AxisY,
 			AxisZ,
 			Plane,
 			ParticleSystem
 		}
 
 		ParticleFadeOutAffector affFadeOut; // We store these pointers because when affector once added
 		ParticleGravityAffector affGravity; // to particle system, there is no any method to retrieve
 		ParticleRotationAffector affRotation; // its pointer back later 
 
 		void irrThreadMain(object args)
 		{
 			irrDevice = IrrlichtDevice.CreateDevice(args as IrrlichtCreationParameters);
 
 			// Camera
 
 			CameraSceneNode camera = irrDevice.SceneManager.AddCameraSceneNode(null, new Vector3Df(0), new Vector3Df(0, 80, 0), (int)SceneNodeID.Camera);
 			SceneNodeAnimator anim = irrDevice.SceneManager.CreateFlyCircleAnimator(new Vector3Df(0, 100, 0), 200.0f, 0.0002f);
 			camera.AddAnimator(anim);
 			anim.Drop();
 
 			// Skydome
 
 			irrDevice.SceneManager.AddSkyDomeSceneNode(irrDevice.VideoDriver.GetTexture("../../media/skydome.jpg"), 16, 8, 0.95f, 2.0f);
 
 			// Plane
 
 			var m = irrDevice.SceneManager.AddHillPlaneMesh("plane", new Dimension2Df(1000), new Dimension2Di(1), null, 0, new Dimension2Df(0), new Dimension2Df(8));
 			var n = irrDevice.SceneManager.AddAnimatedMeshSceneNode(m, null, (int)SceneNodeID.Plane);
 			n.SetMaterialFlag(MaterialFlag.Lighting, false);
 			n.SetMaterialTexture(0, irrDevice.VideoDriver.GetTexture("../../media/rockwall.jpg"));
 
 			// Axes
 
 			m = irrDevice.SceneManager.AddArrowMesh("axisX");
 			n = irrDevice.SceneManager.AddAnimatedMeshSceneNode(m, null, (int)SceneNodeID.AxisX, new Vector3Df(), new Vector3Df(0, 0, -90), new Vector3Df(50, 120, 50));
 			n.GetMaterial(0).EmissiveColor = new Color(250, 250, 250);
 			n.GetMaterial(1).EmissiveColor = new Color(250, 0, 0);
 
 			m = irrDevice.SceneManager.AddArrowMesh("axisY");
 			n = irrDevice.SceneManager.AddAnimatedMeshSceneNode(m, null, (int)SceneNodeID.AxisY, new Vector3Df(), new Vector3Df(0, 0, 0), new Vector3Df(50, 120, 50));
 			n.GetMaterial(0).EmissiveColor = new Color(250, 250, 250);
 			n.GetMaterial(1).EmissiveColor = new Color(0, 250, 0);
 
 			m = irrDevice.SceneManager.AddArrowMesh("axisZ");
 			n = irrDevice.SceneManager.AddAnimatedMeshSceneNode(m, null, (int)SceneNodeID.AxisZ, new Vector3Df(), new Vector3Df(90, 0, 0), new Vector3Df(50, 120, 50));
 			n.GetMaterial(0).EmissiveColor = new Color(250, 250, 250);
 			n.GetMaterial(1).EmissiveColor = new Color(0, 0, 250);
 
 			irrThreadShowAxes(false);
 
 			// Particle system
 
 			var ps = irrDevice.SceneManager.AddParticleSystemSceneNode(false, null, (int)SceneNodeID.ParticleSystem);
 
 			ps.SetMaterialFlag(MaterialFlag.Lighting, false);
 			ps.SetMaterialFlag(MaterialFlag.ZWrite, false);
 			ps.SetMaterialTexture(0, irrDevice.VideoDriver.GetTexture("../../media/particle.bmp"));
 			ps.SetMaterialType(MaterialType.TransparentAddColor);
 
 			ParticleEmitter em = ps.CreateSphereEmitter(
 				new Vector3Df(), 20,				// position and radius
 				new Vector3Df(0.0f, 0.1f, 0.0f),	// initial direction
 				150, 300,							// emit rate
 				new Color(255, 255, 255, 0),		// darkest color
 				new Color(255, 255, 255, 0),		// brightest color
 				750, 1500, 0,						// min and max age, angle
 				new Dimension2Df(20.0f),			// min size
 				new Dimension2Df(40.0f));			// max size
 
 			ps.Emitter = em;
 			em.Drop();
 
 			// Particle affectors
 
 			affFadeOut = ps.CreateFadeOutParticleAffector();
 			ps.AddAffector(affFadeOut);
 			affFadeOut.Drop();
 
 			affGravity = ps.CreateGravityAffector(new Vector3Df(0, -1, 0), 3);
 			affGravity.Enabled = false;
 			ps.AddAffector(affGravity);
 			affGravity.Drop();
 
 			affRotation = ps.CreateRotationAffector(new Vector3Df(-90, 240, -120), new Vector3Df(0, 100, 0));
 			ps.AddAffector(affRotation);
 			affRotation.Drop();
 
 			// Rendering loop
 
 			uint rs = 0, re = 0; // render frame time
 			while (irrDevice.Run())
 			{
 				if (irrDevice.VideoDriver.ScreenSize.Area != 0)
 				{
 					irrDevice.VideoDriver.BeginScene();
 					irrDevice.SceneManager.DrawAll();
 					re = irrDevice.Timer.Time;
 
 					irrThreadDrawText(new Vector2Di(8, 8),
 						"Frame time
 
 					irrDevice.VideoDriver.EndScene();
 				}
 				else
 				{
 					Thread.Sleep(50);
 				}
 
 				irrThreadProcessCommandQueue();
 				rs = irrDevice.Timer.Time;
 			}
 			while (irrDevice.Run())
 			{
 				if (irrDevice.VideoDriver.ScreenSize.Area != 0)
 				{
 					irrDevice.VideoDriver.BeginScene();
 					irrDevice.SceneManager.DrawAll();
 					re = irrDevice.Timer.Time;
 
 					irrThreadDrawText(new Vector2Di(8, 8),
 						"Frame time
 
 					irrDevice.VideoDriver.EndScene();
 				}
 				else
 				{
 					Thread.Sleep(50);
 				}
 
 				irrThreadProcessCommandQueue();
 				rs = irrDevice.Timer.Time;
 			}
 
 			irrDevice.Drop();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\Viewport.cs" startline="211" endline="219"><![CDATA[
 
 		private void irrThreadDrawText(Vector2Di p, string s)
 		{
 			Dimension2Di d = irrDevice.GUIEnvironment.BuiltInFont.GetDimension(s);
 			d.Width += 8;
 			d.Height += 6;
 			irrDevice.VideoDriver.Draw2DRectangle(new Recti(p, d), new Color(0x7F000000));
 			irrDevice.GUIEnvironment.BuiltInFont.Draw(s, p + new Vector2Di(4, 3), new Color(250, 250, 250));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\Viewport.cs" startline="220" endline="226"><![CDATA[
 
 		private void irrThreadShowAxes(bool v)
 		{
 			irrDevice.SceneManager.GetSceneNodeFromID((int)SceneNodeID.AxisX).Visible = v;
 			irrDevice.SceneManager.GetSceneNodeFromID((int)SceneNodeID.AxisY).Visible = v;
 			irrDevice.SceneManager.GetSceneNodeFromID((int)SceneNodeID.AxisZ).Visible = v;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\Viewport.cs" startline="227" endline="349"><![CDATA[
 
 		private void irrThreadProcessCommandQueue()
 		{
 			Command c;
 
 			lock (commandQueue)
 			{
 				if (commandQueue.Count == 0)
 					return;
 
 				c = commandQueue.Dequeue();
 			}
 
 			switch (c.Type)
 			{
 				case CommandType.Abort
 					{
 						irrDevice.Close();
 						break;
 					}
 
 				case CommandType.Axes
 					{
 						irrThreadShowAxes((bool)c.Param);
 						break;
 					}
 
 				case CommandType.Plane
 					{
 						var n = irrDevice.SceneManager.GetSceneNodeFromID((int)SceneNodeID.Plane);
 						n.Visible = (bool)c.Param;
 						break;
 					}
 
 				case CommandType.Particle
 					{
 						var n = irrDevice.SceneManager.GetSceneNodeFromID((int)SceneNodeID.ParticleSystem);
 						n.SetMaterialTexture(0, irrDevice.VideoDriver.GetTexture(((ParticleInfo)c.Param).FileName));
 						break;
 					}
 
 				case CommandType.Resize
 					{
 						int[] i = (int[])c.Param;
 						Dimension2Di d = new Dimension2Di(i[0], i[1]);
 						irrDevice.VideoDriver.ResizeNotify(d);
 						(irrDevice.SceneManager.GetSceneNodeFromID((int)SceneNodeID.Camera) as CameraSceneNode).AspectRatio =
 							i[2] == 1 ? (float)i[0] / i[1] 
 						break;
 					}
 
 				case CommandType.Position
 					{
 						float[] f = (float[])c.Param;
 						var p = irrDevice.SceneManager.GetSceneNodeFromID((int)SceneNodeID.ParticleSystem) as ParticleSystemSceneNode;
 						(p.Emitter as ParticleSphereEmitter).Center = new Vector3Df(f[0], f[1], f[2]);
 						break;
 					}
 
 				case CommandType.Radius
 					{
 						float f = (float)c.Param;
 						var p = irrDevice.SceneManager.GetSceneNodeFromID((int)SceneNodeID.ParticleSystem) as ParticleSystemSceneNode;
 						(p.Emitter as ParticleSphereEmitter).Radius = f;
 						break;
 					}
 
 				case CommandType.CameraView
 					{
 						float f = (float)c.Param;
 						var p = irrDevice.SceneManager.GetSceneNodeFromID((int)SceneNodeID.Camera) as CameraSceneNode;
 						p.Target = new Vector3Df(p.Target.X, f, p.Target.Z);
 						break;
 					}
 
 				case CommandType.Rate
 					{
 						int v = (int)c.Param;
 						var p = irrDevice.SceneManager.GetSceneNodeFromID((int)SceneNodeID.ParticleSystem) as ParticleSystemSceneNode;
 						p.Emitter.MaxParticlesPerSecond = v;
 						p.Emitter.MinParticlesPerSecond = v/2;
 						break;
 					}
 
 				case CommandType.Size
 					{
 						int v = (int)c.Param;
 						var p = irrDevice.SceneManager.GetSceneNodeFromID((int)SceneNodeID.ParticleSystem) as ParticleSystemSceneNode;
 						p.Emitter.MaxStartSize = new Dimension2Df(v);
 						p.Emitter.MinStartSize = new Dimension2Df(v/2);
 						break;
 					}
 
 				case CommandType.Direction
 					{
 						float[] f = (float[])c.Param;
 						var p = irrDevice.SceneManager.GetSceneNodeFromID((int)SceneNodeID.ParticleSystem) as ParticleSystemSceneNode;
 						p.Emitter.Direction = new Vector3Df(f[0], f[1], f[2]);
 						break;
 					}
 
 				case CommandType.FadeOut
 					{
 						affFadeOut.Enabled = (bool)c.Param;
 						break;
 					}
 
 				case CommandType.Rotation
 					{
 						affRotation.Enabled = (bool)c.Param;
 						break;
 					}
 
 				case CommandType.Gravity
 					{
 						affGravity.Enabled = (bool)c.Param;
 						break;
 					}
 
 				default
 					throw new InvalidOperationException("Unexpected command type
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\Viewport.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\Properties\Resources.Designer.cs" startline="31" endline="33"><![CDATA[
         [global
         internal Resources() {
         }
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\Properties\Resources.Designer.cs" startline="34" endline="46"><![CDATA[
         
         /// <summary>
         ///   Returns the cached ResourceManager instance used by this class.
         /// </summary>
         [global
         internal static global
             get {
                 if (object.ReferenceEquals(resourceMan, null)) {
                     global
                     resourceMan = temp;
                 }
                 return resourceMan;
             }
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\Properties\Resources.Designer.cs" startline="47" endline="57"><![CDATA[
         }
         
         /// <summary>
         ///   Overrides the current thread's CurrentUICulture property for all
         ///   resource lookups using this strongly typed resource class.
         /// </summary>
         [global
         internal static global
             get {
                 return resourceCulture;
             }
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\Properties\Resources.Designer.cs" startline="58" endline="60"><![CDATA[
             set {
                 resourceCulture = value;
             }
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\Program.cs" startline="15" endline="19"><![CDATA[
 		{
 			Application.EnableVisualStyles();
 			Application.SetCompatibleTextRenderingDefault(false);
 			Application.Run(new MainForm());
 		}
]]></source>
</source_elements></project>
