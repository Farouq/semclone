<project><name></name><description></description><prog_language></prog_language><source_elements>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\01.HelloWorld\Program.cs" startline="17" endline="53"><![CDATA[
 		{
 			IrrlichtDevice device = IrrlichtDevice.CreateDevice(
 				DriverType.Software, new Dimension2Di(640, 480), 16, false, false, false);
 
 			device.SetWindowCaption("Hello World! - Irrlicht Engine Demo");
 
 			VideoDriver driver = device.VideoDriver;
 			SceneManager smgr = device.SceneManager;
 			GUIEnvironment gui = device.GUIEnvironment;
 
 			gui.AddStaticText("Hello World! This is the Irrlicht Software renderer!",
 				new Recti(10, 10, 260, 22), true);
 
 			AnimatedMesh mesh = smgr.GetMesh("../../media/sydney.md2");
 			AnimatedMeshSceneNode node = smgr.AddAnimatedMeshSceneNode(mesh);
 
 			if (node != null)
 			{
 				node.SetMaterialFlag(MaterialFlag.Lighting, false);
 				node.SetMD2Animation(AnimationTypeMD2.Stand);
 				node.SetMaterialTexture(0, driver.GetTexture("../../media/sydney.bmp"));
 			}
 
 			smgr.AddCameraSceneNode(null, new Vector3Df(0, 30, -40), new Vector3Df(0, 5, 0));
 
 			while (device.Run())
 			{
 				driver.BeginScene(true, true, new Color(100, 101, 140));
 				
 				smgr.DrawAll();
 				gui.DrawAll();
 
 				driver.EndScene();
 			}
 			while (device.Run())
 			{
 				driver.BeginScene(true, true, new Color(100, 101, 140));
 				
 				smgr.DrawAll();
 				gui.DrawAll();
 
 				driver.EndScene();
 			}
 
 			device.Drop();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\01.HelloWorld\Program.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\02.Quake3Map\Program.cs" startline="17" endline="84"><![CDATA[
 		{
 			DriverType driverType;
 
 			Console.Write("Please select the driver you want for this example
 						" (a) OpenGL\n (b) Direct3D 9.0c\n (c) Direct3D 8.1\n" +
 						" (d) Burning's Software Renderer\n (e) Software Renderer\n" +
 						" (f) NullDevice\n (otherKey) exit\n\n");
 
 			ConsoleKeyInfo i = Console.ReadKey();
 
 			switch (i.Key)
 			{
 				case ConsoleKey.A
 				case ConsoleKey.B
 				case ConsoleKey.C
 				case ConsoleKey.D
 				case ConsoleKey.E
 				case ConsoleKey.F
 				default
 					return;
 			}
 
 			IrrlichtDevice device = IrrlichtDevice.CreateDevice(driverType, new Dimension2Di(640, 480));
 			if (device == null)
 				return;
 
 			VideoDriver driver = device.VideoDriver;
 			SceneManager smgr = device.SceneManager;
 
 			device.FileSystem.AddFileArchive("../../media/map-20kdm2.pk3");
 
 			AnimatedMesh mesh = smgr.GetMesh("20kdm2.bsp");
 			SceneNode node = null;
 
 			if (mesh != null)
 				node = smgr.AddOctreeSceneNode(mesh.GetMesh(0), null, -1, 1024);
 
 			if (node != null)
 				node.Position = new Vector3Df(-1300, -144, -1249);
 
 			smgr.AddCameraSceneNodeFPS();
 
 			device.CursorControl.Visible = false;
 
 			int lastFPS = -1;
 
 			while (device.Run())
 			{
 				if (device.WindowActive)
 				{
 					driver.BeginScene(true, true, new Color(200, 200, 200));
 					smgr.DrawAll();
 					driver.EndScene();
 
 					int fps = driver.FPS;
 					if (lastFPS != fps)
 					{
 						device.SetWindowCaption(String.Format(
 							"Quake 3 Map Example - Irrlicht Engine [{0}] fps
 							driver.Name, fps));
 
 						lastFPS = fps;
 					}
 				}
 			}
 			while (device.Run())
 			{
 				if (device.WindowActive)
 				{
 					driver.BeginScene(true, true, new Color(200, 200, 200));
 					smgr.DrawAll();
 					driver.EndScene();
 
 					int fps = driver.FPS;
 					if (lastFPS != fps)
 					{
 						device.SetWindowCaption(String.Format(
 							"Quake 3 Map Example - Irrlicht Engine [{0}] fps
 							driver.Name, fps));
 
 						lastFPS = fps;
 					}
 				}
 			}
 
 			device.Drop();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\02.Quake3Map\Program.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\03.CustomSceneNode\Program.cs" startline="16" endline="57"><![CDATA[
 		{
 			IrrlichtDevice device =
 				IrrlichtDevice.CreateDevice(DriverType.OpenGL, new Dimension2Di(640, 480), 16, false);
 
 			VideoDriver driver = device.VideoDriver;
 			SceneManager smgr = device.SceneManager;
 
 			smgr.AddCameraSceneNode(null, new Vector3Df(0, -40, 0), new Vector3Df(0));
 
 			CSampleSceneNode myNode = new CSampleSceneNode(smgr.RootNode, smgr, 667);
 
 			SceneNodeAnimator anim = smgr.CreateRotationAnimator(new Vector3Df(0.8f, 0, 0.8f));
 
 			if (anim != null)
 			{
 				myNode.AddAnimator(anim);
 				anim.Drop();
 				anim = null;
 			}
 
 			myNode.Drop();
 			myNode = null;
 
 			int frames = 0;
 			while (device.Run())
 			{
 				driver.BeginScene(true, true, new Color(100, 100, 100));
 				smgr.DrawAll();
 				driver.EndScene();
 
 				if (++frames == 100)
 				{
 					device.SetWindowCaption(String.Format(
 						"Custom Scene Node - Irrlicht Engine [{0}] fps
 						driver.Name, driver.FPS));
 
 					frames = 0;
 				}
 			}
 			while (device.Run())
 			{
 				driver.BeginScene(true, true, new Color(100, 100, 100));
 				smgr.DrawAll();
 				driver.EndScene();
 
 				if (++frames == 100)
 				{
 					device.SetWindowCaption(String.Format(
 						"Custom Scene Node - Irrlicht Engine [{0}] fps
 						driver.Name, driver.FPS));
 
 					frames = 0;
 				}
 			}
 
 			device.Drop();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\03.CustomSceneNode\Program.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\03.CustomSceneNode\Program.cs" startline="58" endline="87"><![CDATA[
 	}
 
 	class CSampleSceneNode 
 	{
 		AABBox bbox = new AABBox();
 		Vertex3D[] vertices;
 		Material material = new Material();
 
 		public CSampleSceneNode(SceneNode parent, SceneManager smgr, int id)
 			
 		{
 			this.OnRegisterSceneNode += new RegisterSceneNodeEventHandler(CSampleSceneNode_OnRegisterSceneNode);
 			this.OnRender += new RenderEventHandler(CSampleSceneNode_OnRender);
 			this.OnGetBoundingBox += new GetBoundingBoxEventHandler(CSampleSceneNode_OnGetBoundingBox);
 			this.OnGetMaterialCount += new GetMaterialCountEventHandler(CSampleSceneNode_OnGetMaterialCount);
 			this.OnGetMaterial += new GetMaterialEventHandler(CSampleSceneNode_OnGetMaterial);
 
 			material.Wireframe = false;
 			material.Lighting = false;
 
 			vertices = new Vertex3D[4];
 			vertices[0] = new Vertex3D(0, 0, 10, 1, 1, 0, new Color(0, 255, 255), 0, 1);
 			vertices[1] = new Vertex3D(10, 0, -10, 1, 0, 0, new Color(255, 0, 255), 1, 1);
 			vertices[2] = new Vertex3D(0, 20, 0, 0, 1, 1, new Color(255, 255, 0), 1, 0);
 			vertices[3] = new Vertex3D(-10, 0, -10, 0, 0, 1, new Color(0, 255, 0), 0, 0);
 
 			bbox.Set(vertices[0].Position);
 			for (int i = 1; i < vertices.Length; i++)
 				bbox.AddInternalPoint(vertices[i].Position);
 			for (int i = 1; i < vertices.Length; i++)
 				bbox.AddInternalPoint(vertices[i].Position);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\03.CustomSceneNode\Program.cs" startline="88" endline="93"><![CDATA[
 
 		void CSampleSceneNode_OnRegisterSceneNode()
 		{
 			if (Visible)
 				SceneManager.RegisterNodeForRendering(this);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\03.CustomSceneNode\Program.cs" startline="94" endline="103"><![CDATA[
 
 		void CSampleSceneNode_OnRender()
 		{
 			ushort[] indices = new ushort[] { 0, 2, 3, 2, 1, 3, 1, 0, 3, 2, 0, 1 };
 			VideoDriver driver = SceneManager.VideoDriver;
 
 			driver.SetMaterial(material);
 			driver.SetTransform(TransformationState.World, AbsoluteTransformation);
 			driver.DrawVertexPrimitiveList(vertices, indices);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\03.CustomSceneNode\Program.cs" startline="104" endline="108"><![CDATA[
 
 		AABBox CSampleSceneNode_OnGetBoundingBox()
 		{
 			return bbox;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\03.CustomSceneNode\Program.cs" startline="109" endline="113"><![CDATA[
 
 		int CSampleSceneNode_OnGetMaterialCount()
 		{
 			return 1;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\03.CustomSceneNode\Program.cs" startline="114" endline="118"><![CDATA[
 
 		Material CSampleSceneNode_OnGetMaterial(int index)
 		{
 			return material;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\04.Movement\Program.cs" startline="17" endline="123"><![CDATA[
 		{
 			DriverType driverType;
 			if (!AskUserForDriver(out driverType))
 				return;
 
 			IrrlichtDevice device = IrrlichtDevice.CreateDevice(driverType, new Dimension2Di(640, 480));
 			if (device == null)
 				return;
 
 			device.OnEvent += new IrrlichtDevice.EventHandler(device_OnEvent);
 
 			VideoDriver driver = device.VideoDriver;
 			SceneManager smgr = device.SceneManager;
 
 			SceneNode node = smgr.AddSphereSceneNode();
 			if (node != null)
 			{
 				node.Position = new Vector3Df(0, 0, 30);
 				node.SetMaterialTexture(0, driver.GetTexture("../../media/wall.bmp"));
 				node.SetMaterialFlag(MaterialFlag.Lighting, false);
 			}
 
 			SceneNode n = smgr.AddCubeSceneNode();
 			if (n != null)
 			{
 				n.SetMaterialTexture(0, driver.GetTexture("../../media/t351sml.jpg"));
 				n.SetMaterialFlag(MaterialFlag.Lighting, false);
 
 				SceneNodeAnimator anim = smgr.CreateFlyCircleAnimator(new Vector3Df(0, 0, 30), 20.0f);
 				if (anim != null)
 				{
 					n.AddAnimator(anim);
 					anim.Drop();
 				}
 			}
 
 			AnimatedMeshSceneNode anms = smgr.AddAnimatedMeshSceneNode(smgr.GetMesh("../../media/ninja.b3d"));
 			if (anms != null)
 			{
 				SceneNodeAnimator anim = smgr.CreateFlyStraightAnimator(
 					new Vector3Df(100, 0, 60), new Vector3Df(-100, 0, 60), 3.5f, true);
 				if (anim != null)
 				{
 					anms.AddAnimator(anim);
 					anim.Drop();
 				}
 
 				anms.SetMaterialFlag(MaterialFlag.Lighting, false);
 
 				anms.SetFrameLoop(0, 13);
 				anms.AnimationSpeed = 15;
 
 				anms.Scale = new Vector3Df(2);
 				anms.Rotation = new Vector3Df(0, -90, 0);
 			}
 
 			smgr.AddCameraSceneNodeFPS();
 			device.CursorControl.Visible = false;
 
 			device.GUIEnvironment.AddImage(
 				driver.GetTexture("../../media/irrlichtlogoalpha2.tga"),
 				new Vector2Di(10, 20));
 
 			int lastFPS = -1;
 
 			uint then = device.Timer.Time;
 			
 			const float MOVEMENT_SPEED = 5.0f;
 
 			while (device.Run())
 			{
 				uint now = device.Timer.Time;
 				float frameDeltaTime = (float)(now - then) / 1000.0f;
 				then = now;
 
 				Vector3Df nodePosition = node.Position;
 
 				if (IsKeyDown(KeyCode.KeyW))
 					nodePosition.Y += MOVEMENT_SPEED * frameDeltaTime;
 				else if (IsKeyDown(KeyCode.KeyS))
 					nodePosition.Y -= MOVEMENT_SPEED * frameDeltaTime;
 
 				if (IsKeyDown(KeyCode.KeyA))
 					nodePosition.X -= MOVEMENT_SPEED * frameDeltaTime;
 				else if (IsKeyDown(KeyCode.KeyD))
 					nodePosition.X += MOVEMENT_SPEED * frameDeltaTime;
 
 				node.Position = nodePosition;
 
 				driver.BeginScene(true, true, new Color(113, 113, 113));
 				smgr.DrawAll();
 				device.GUIEnvironment.DrawAll();
 				driver.EndScene();
 
 				int fps = driver.FPS;
 				if (lastFPS != fps)
 				{
 					device.SetWindowCaption(String.Format(
 						"Movement example - Irrlicht Engine [{0}] fps
 						driver.Name, fps));
 
 					lastFPS = fps;
 				}
 			}
 			while (device.Run())
 			{
 				uint now = device.Timer.Time;
 				float frameDeltaTime = (float)(now - then) / 1000.0f;
 				then = now;
 
 				Vector3Df nodePosition = node.Position;
 
 				if (IsKeyDown(KeyCode.KeyW))
 					nodePosition.Y += MOVEMENT_SPEED * frameDeltaTime;
 				else if (IsKeyDown(KeyCode.KeyS))
 					nodePosition.Y -= MOVEMENT_SPEED * frameDeltaTime;
 
 				if (IsKeyDown(KeyCode.KeyA))
 					nodePosition.X -= MOVEMENT_SPEED * frameDeltaTime;
 				else if (IsKeyDown(KeyCode.KeyD))
 					nodePosition.X += MOVEMENT_SPEED * frameDeltaTime;
 
 				node.Position = nodePosition;
 
 				driver.BeginScene(true, true, new Color(113, 113, 113));
 				smgr.DrawAll();
 				device.GUIEnvironment.DrawAll();
 				driver.EndScene();
 
 				int fps = driver.FPS;
 				if (lastFPS != fps)
 				{
 					device.SetWindowCaption(String.Format(
 						"Movement example - Irrlicht Engine [{0}] fps
 						driver.Name, fps));
 
 					lastFPS = fps;
 				}
 			}
 
 			device.Drop();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\04.Movement\Program.cs" startline="124" endline="138"><![CDATA[
 
 		static Dictionary<KeyCode, bool> KeyIsDown = new Dictionary<KeyCode, bool>();
 
 		static bool device_OnEvent(Event e)
 		{
 			if (e.Type == EventType.Key)
 			{
 				if (KeyIsDown.ContainsKey(e.Key.Key))
 					KeyIsDown[e.Key.Key] = e.Key.PressedDown;
 				else
 					KeyIsDown.Add(e.Key.Key, e.Key.PressedDown);
 			}
 
 			return false;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\04.Movement\Program.cs" startline="139" endline="143"><![CDATA[
 
 		static bool IsKeyDown(KeyCode keyCode)
 		{
 			return KeyIsDown.ContainsKey(keyCode) ? KeyIsDown[keyCode] 
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\04.Movement\Program.cs" startline="144" endline="169"><![CDATA[
 
 		static bool AskUserForDriver(out DriverType driverType)
 		{
 			driverType = DriverType.Null;
 
 			Console.Write("Please select the driver you want for this example
 						" (a) OpenGL\n (b) Direct3D 9.0c\n (c) Direct3D 8.1\n" +
 						" (d) Burning's Software Renderer\n (e) Software Renderer\n" +
 						" (f) NullDevice\n (otherKey) exit\n\n");
 
 			ConsoleKeyInfo i = Console.ReadKey();
 
 			switch (i.Key)
 			{
 				case ConsoleKey.A
 				case ConsoleKey.B
 				case ConsoleKey.C
 				case ConsoleKey.D
 				case ConsoleKey.E
 				case ConsoleKey.F
 				default
 					return false;
 			}
 
 			return true;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\04.Movement\Program.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\04.Movement\Program.cs" startline="125" endline="125"><![CDATA[
 		static Dictionary<KeyCode, bool> KeyIsDown = new Dictionary<KeyCode, bool>();
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\05.UserInterface\Program.cs" startline="25" endline="73"><![CDATA[
 		{
 			DriverType driverType;
 			if (!AskUserForDriver(out driverType))
 				return;
 
 			device = IrrlichtDevice.CreateDevice(driverType, new Dimension2Di(640, 480));
 			if (device == null)
 				return;
 
 			device.SetWindowCaption("Irrlicht Engine - User Interface Demo");
 			device.SetWindowResizable(true);
 
 			VideoDriver driver = device.VideoDriver;
 			GUIEnvironment env = device.GUIEnvironment;
 
 			GUISkin skin = env.Skin;
 			GUIFont font = env.GetFont("../../media/fonthaettenschweiler.bmp");
 			if (font != null)
 				skin.SetFont(font);
 
 			skin.SetFont(env.BuiltInFont, GUIDefaultFont.Tooltip);
 
 			env.AddButton(new Recti(10, 240, 110, 240 + 32), null, GUI_ID_ButtonQuit, "Quit", "Exits Program");
 			env.AddButton(new Recti(10, 280, 110, 280 + 32), null, GUI_ID_ButtonWindowNew, "New Window", "Launches a new Window");
 			env.AddButton(new Recti(10, 320, 110, 320 + 32), null, GUI_ID_ButtonFileOpen, "File Open", "Opens a file");
 
 			env.AddStaticText("Transparent Control
 			GUIScrollBar scrollbar = env.AddScrollBar(true, new Recti(150, 45, 350, 60), null, GUI_ID_ScrollbarTransparency);
 			scrollbar.MaxValue = 255;
 			scrollbar.Position = (int)env.Skin.GetColor(GUIDefaultColor.WindowBackground).Alpha;
 
 			GUIStaticText trq = env.AddStaticText("Logging ListBox
 			listbox = env.AddListBox(new Recti(50, 140, 250, 210));
 			env.AddEditBox("Editable Text", new Recti(350, 80, 550, 100));
 
 			device.OnEvent += new IrrlichtDevice.EventHandler(device_OnEvent);
 
 			env.AddImage(driver.GetTexture("../../media/irrlichtlogoalpha2.tga"), new Vector2Di(10, 10));
 
 			while (device.Run())
 			if (device.WindowActive)
 			{
 				driver.BeginScene(true, true, new Color(200, 200, 200));
 				env.DrawAll();
 				driver.EndScene();
 			}
 			while (device.Run())
 			if (device.WindowActive)
 			{
 				driver.BeginScene(true, true, new Color(200, 200, 200));
 				env.DrawAll();
 				driver.EndScene();
 			}
 
 			device.Drop();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\05.UserInterface\Program.cs" startline="74" endline="142"><![CDATA[
 
 		static bool device_OnEvent(Event e)
 		{
 			if (e.Type == EventType.GUI)
 			{
 				int id = e.GUI.Caller.ID;
 				GUIEnvironment env = device.GUIEnvironment;
 
 				switch (e.GUI.Type)
 				{
 					case GUIEventType.ScrollBarChanged
 						if (id == GUI_ID_ScrollbarTransparency)
 						{
 							int pos = ((GUIScrollBar)e.GUI.Caller).Position;
 							foreach (GUIDefaultColor which in Enum.GetValues(typeof(GUIDefaultColor)))
 							{
 								Color color = env.Skin.GetColor(which);
 								color.Alpha = pos;
 								env.Skin.SetColor(color, which);
 							}
 							foreach (GUIDefaultColor which in Enum.GetValues(typeof(GUIDefaultColor)))
 							{
 								Color color = env.Skin.GetColor(which);
 								color.Alpha = pos;
 								env.Skin.SetColor(color, which);
 							}
 						}
 						break;
 
 					case GUIEventType.ButtonClicked
 						switch (id)
 						{
 							case GUI_ID_ButtonQuit
 								device.Close();
 								return true;
 
 							case GUI_ID_ButtonWindowNew
 								listbox.AddItem("Window created");
 								winPosCounter += 30;
 								if (winPosCounter > 200)
 									winPosCounter = 0;
 
 								int c = winPosCounter;
 								GUIWindow window = env.AddWindow(new Recti(100 + c, 100 + c, 300 + c, 200 + c), false, "Test window");
 								env.AddStaticText("Please close me", new Recti(35, 35, 140, 50), true, false, window);
 								return true;
 
 							case GUI_ID_ButtonFileOpen
 								listbox.AddItem("File open");
 								// There are some options for the file open dialog
 								// We set the title, make it a modal window, and make sure
 								// that the working directory is restored after the dialog
 								// is finished.
 								env.AddFileOpenDialog("Please choose a file", true, null, -1, true);
 								return true;
 
 							default
 								return false;
 						}
 
 					case GUIEventType.FileDialogFileSelected
 						{
 							// show the filename, selected in the file dialog
 							GUIFileOpenDialog d = e.GUI.Caller as GUIFileOpenDialog;
 							listbox.AddItem(d.FileName);
 							break;
 						}
 
 					default
 						break;
 				}
 			}
 
 			return false;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\05.UserInterface\Program.cs" startline="143" endline="168"><![CDATA[
 
 		static bool AskUserForDriver(out DriverType driverType)
 		{
 			driverType = DriverType.Null;
 
 			Console.Write("Please select the driver you want for this example
 						" (a) OpenGL\n (b) Direct3D 9.0c\n (c) Direct3D 8.1\n" +
 						" (d) Burning's Software Renderer\n (e) Software Renderer\n" +
 						" (f) NullDevice\n (otherKey) exit\n\n");
 
 			ConsoleKeyInfo i = Console.ReadKey();
 
 			switch (i.Key)
 			{
 				case ConsoleKey.A
 				case ConsoleKey.B
 				case ConsoleKey.C
 				case ConsoleKey.D
 				case ConsoleKey.E
 				case ConsoleKey.F
 				default
 					return false;
 			}
 
 			return true;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\05.UserInterface\Program.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\05.UserInterface\Program.cs" startline="17" endline="17"><![CDATA[
 		static int winPosCounter = 0;
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\06.2DGraphics\Program.cs" startline="16" endline="86"><![CDATA[
 		{
 			DriverType driverType;
 			if (!AskUserForDriver(out driverType))
 				return;
 
 			IrrlichtDevice device = IrrlichtDevice.CreateDevice(driverType, new Dimension2Di(512, 384));
 			if (device == null)
 				return;
 
 			device.SetWindowCaption("Irrlicht Engine - 2D Graphics Demo");
 
 			VideoDriver driver = device.VideoDriver;
 
 			Texture images = driver.GetTexture("../../media/2ddemo.png");
 			driver.MakeColorKeyTexture(images, new Vector2Di(0, 0));
 
 			GUIFont font = device.GUIEnvironment.BuiltInFont;
 			GUIFont font2 = device.GUIEnvironment.GetFont("../../media/fonthaettenschweiler.bmp");
 
 			Recti imp1 = new Recti(349, 15, 385, 78);
 			Recti imp2 = new Recti(387, 15, 423, 78);
 
 			driver.Material2D.Layer[0].BilinearFilter = true;
 			driver.Material2D.AntiAliasing = AntiAliasingMode.FullBasic;
 
 			while (device.Run())
 			{
 				if (device.WindowActive)
 				{
 					int time = (int)device.Timer.Time;
 
 					driver.BeginScene(true, true, new Color(120, 102, 136));
 
 					// draw fire & dragons background world
 					driver.Draw2DImage(images, new Vector2Di(50, 50),
 						new Recti(0, 0, 342, 224), null,
 						new Color(255, 255, 255), true);
 
 					// draw flying imp
 					driver.Draw2DImage(images, new Vector2Di(164, 125),
 						(time / 500 % 2) == 1 ? imp1 
 						new Color(255, 255, 255), true);
 
 					// draw second flying imp with colorcylce
 					driver.Draw2DImage(images, new Vector2Di(270, 105),
 						(time / 500 % 2) == 1 ? imp1 
 						new Color(time % 255, 255, 255), true);
 
 					// draw some text
 					if (font != null)
 						font.Draw("This demo shows that Irrlicht is also capable of drawing 2D graphics.",
 							130, 10, new Color(255, 255, 255));
 
 					// draw some other text
 					if (font2 != null)
 						font2.Draw("Also mixing with 3d graphics is possible.",
 							130, 20, new Color(time % 255, time % 255, 255));
 
 					driver.EnableMaterial2D();
 					driver.Draw2DImage(images, new Recti(10, 10, 108, 48), new Recti(354, 87, 442, 118));
 					driver.EnableMaterial2D(false);
 
 					Vector2Di m = device.CursorControl.Position;
 					driver.Draw2DRectangle(new Recti(m.X - 20, m.Y - 20, m.X + 20, m.Y + 20), new Color(255, 255, 255, 100));
 
 					driver.EndScene();
 				}
 			}
 			while (device.Run())
 			{
 				if (device.WindowActive)
 				{
 					int time = (int)device.Timer.Time;
 
 					driver.BeginScene(true, true, new Color(120, 102, 136));
 
 					// draw fire & dragons background world
 					driver.Draw2DImage(images, new Vector2Di(50, 50),
 						new Recti(0, 0, 342, 224), null,
 						new Color(255, 255, 255), true);
 
 					// draw flying imp
 					driver.Draw2DImage(images, new Vector2Di(164, 125),
 						(time / 500 % 2) == 1 ? imp1 
 						new Color(255, 255, 255), true);
 
 					// draw second flying imp with colorcylce
 					driver.Draw2DImage(images, new Vector2Di(270, 105),
 						(time / 500 % 2) == 1 ? imp1 
 						new Color(time % 255, 255, 255), true);
 
 					// draw some text
 					if (font != null)
 						font.Draw("This demo shows that Irrlicht is also capable of drawing 2D graphics.",
 							130, 10, new Color(255, 255, 255));
 
 					// draw some other text
 					if (font2 != null)
 						font2.Draw("Also mixing with 3d graphics is possible.",
 							130, 20, new Color(time % 255, time % 255, 255));
 
 					driver.EnableMaterial2D();
 					driver.Draw2DImage(images, new Recti(10, 10, 108, 48), new Recti(354, 87, 442, 118));
 					driver.EnableMaterial2D(false);
 
 					Vector2Di m = device.CursorControl.Position;
 					driver.Draw2DRectangle(new Recti(m.X - 20, m.Y - 20, m.X + 20, m.Y + 20), new Color(255, 255, 255, 100));
 
 					driver.EndScene();
 				}
 			}
 
 			device.Drop();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\06.2DGraphics\Program.cs" startline="87" endline="112"><![CDATA[
 
 		static bool AskUserForDriver(out DriverType driverType)
 		{
 			driverType = DriverType.Null;
 
 			Console.Write("Please select the driver you want for this example
 						" (a) OpenGL\n (b) Direct3D 9.0c\n (c) Direct3D 8.1\n" +
 						" (d) Burning's Software Renderer\n (e) Software Renderer\n" +
 						" (f) NullDevice\n (otherKey) exit\n\n");
 
 			ConsoleKeyInfo i = Console.ReadKey();
 
 			switch (i.Key)
 			{
 				case ConsoleKey.A
 				case ConsoleKey.B
 				case ConsoleKey.C
 				case ConsoleKey.D
 				case ConsoleKey.E
 				case ConsoleKey.F
 				default
 					return false;
 			}
 
 			return true;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\06.2DGraphics\Program.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\07.Collision\Program.cs" startline="20" endline="227"><![CDATA[
 		{
 			DriverType driverType;
 			if (!AskUserForDriver(out driverType))
 				return;
 
 			IrrlichtDevice device = IrrlichtDevice.CreateDevice(driverType, new Dimension2Di(640, 480));
 			if (device == null)
 				return;
 
 			VideoDriver driver = device.VideoDriver;
 			SceneManager smgr = device.SceneManager;
 
 			device.FileSystem.AddFileArchive("../../media/map-20kdm2.pk3");
 
 			AnimatedMesh q3levelmesh = smgr.GetMesh("20kdm2.bsp");
 			MeshSceneNode q3node = null;
 
 			// The Quake mesh is pickable, but doesn't get highlighted.
 			if (q3levelmesh != null)
 				q3node = smgr.AddOctreeSceneNode(q3levelmesh.GetMesh(0), null, IDFlag_IsPickable);
 
 			TriangleSelector selector = null;
 
 			if (q3node != null)
 			{
 				q3node.Position = new Vector3Df(-1350, -130, -1400);
 				selector = smgr.CreateOctreeTriangleSelector(q3node.Mesh, q3node, 128);
 				q3node.TriangleSelector = selector;
 				// We're not done with this selector yet, so don't drop it.
 			}
 
 			// Set a jump speed of 3 units per second, which gives a fairly realistic jump
 			// when used with the gravity of (0, -10, 0) in the collision response animator.
 			CameraSceneNode camera = smgr.AddCameraSceneNodeFPS(null, 100.0f, 0.3f, ID_IsNotPickable, null, true, 3.0f);
 			camera.Position = new Vector3Df(50, 50, -60);
 			camera.Target = new Vector3Df(-70, 30, -60);
 
 			if (selector != null)
 			{
 				SceneNodeAnimator anim = smgr.CreateCollisionResponseAnimator(
 					selector, camera,
 					new Vector3Df(30, 50, 30),
 					new Vector3Df(0, -10, 0),
 					new Vector3Df(0, 30, 0));
 
 				selector.Drop(); // As soon as we're done with the selector, drop it.
 				camera.AddAnimator(anim);
 				anim.Drop(); // And likewise, drop the animator when we're done referring to it.
 			}
 
 			// Now I create three animated characters which we can pick, a dynamic light for
 			// lighting them, and a billboard for drawing where we found an intersection.
 
 			// First, let's get rid of the mouse cursor. We'll use a billboard to show what we're looking at.
 			device.CursorControl.Visible = false;
 
 			// Add the billboard.
 			BillboardSceneNode bill = smgr.AddBillboardSceneNode();
 			bill.SetMaterialType(MaterialType.TransparentAddColor);
 			bill.SetMaterialTexture(0, driver.GetTexture("../../media/particle.bmp"));
 			bill.SetMaterialFlag(MaterialFlag.Lighting, false);
 			bill.SetMaterialFlag(MaterialFlag.ZBuffer, false);
 			bill.SetSize(20, 20, 20);
 			bill.ID = ID_IsNotPickable; // This ensures that we don't accidentally ray-pick it
 
 			AnimatedMeshSceneNode node = null;
 
 			// Add an MD2 node, which uses vertex-based animation.
 			node = smgr.AddAnimatedMeshSceneNode(smgr.GetMesh("../../media/faerie.md2"), null, IDFlag_IsPickable | IDFlag_IsHighlightable);
 			node.Position = new Vector3Df(-90, -15, -140); // Put its feet on the floor.
 			node.Scale = new Vector3Df(1.6f); // Make it appear realistically scaled
 			node.SetMD2Animation(AnimationTypeMD2.Point);
 			node.AnimationSpeed = 20.0f;
 			node.GetMaterial(0).SetTexture(0, driver.GetTexture("../../media/faerie2.bmp"));
 			node.GetMaterial(0).Lighting = true;
 			node.GetMaterial(0).NormalizeNormals = true;
 
 			// Now create a triangle selector for it.  The selector will know that it
 			// is associated with an animated node, and will update itself as necessary.
 			selector = smgr.CreateTriangleSelector(node);
 			node.TriangleSelector = selector;
 			selector.Drop(); // We're done with this selector, so drop it now.
 
 			// And this B3D file uses skinned skeletal animation.
 			node = smgr.AddAnimatedMeshSceneNode(smgr.GetMesh("../../media/ninja.b3d"), null, IDFlag_IsPickable | IDFlag_IsHighlightable);
 			node.Scale = new Vector3Df(10);
 			node.Position = new Vector3Df(-75, -66, -80);
 			node.Rotation = new Vector3Df(0, 90, 0);
 			node.AnimationSpeed = 8.0f;
 			node.GetMaterial(0).NormalizeNormals = true;
 			// Just do the same as we did above.
 			selector = smgr.CreateTriangleSelector(node);
 			node.TriangleSelector = selector;
 			selector.Drop();
 
 			// This X files uses skeletal animation, but without skinning.
 			node = smgr.AddAnimatedMeshSceneNode(smgr.GetMesh("../../media/dwarf.x"), null, IDFlag_IsPickable | IDFlag_IsHighlightable);
 			node.Position = new Vector3Df(-70, -66, -30); // Put its feet on the floor.
 			node.Rotation = new Vector3Df(0, -90, 0); // And turn it towards the camera.
 			node.AnimationSpeed = 20.0f;
 			selector = smgr.CreateTriangleSelector(node);
 			node.TriangleSelector = selector;
 			selector.Drop();
 
 			// And this mdl file uses skinned skeletal animation.
 			node = smgr.AddAnimatedMeshSceneNode(smgr.GetMesh("../../media/yodan.mdl"), null, IDFlag_IsPickable | IDFlag_IsHighlightable);
 			node.Position = new Vector3Df(-90, -25, 20);
 			node.Scale = new Vector3Df(0.8f);
 			node.GetMaterial(0).Lighting = true;
 			node.AnimationSpeed = 20.0f;
 
 			// Just do the same as we did above.
 			selector = smgr.CreateTriangleSelector(node);
 			node.TriangleSelector = selector;
 			selector.Drop();
 
 			// Add a light, so that the unselected nodes aren't completely dark.
 			LightSceneNode light = smgr.AddLightSceneNode(null, new Vector3Df(-60, 100, 400), new Colorf(1.0f, 1.0f, 1.0f), 600.0f);
 			light.ID = ID_IsNotPickable; // Make it an invalid target for selection.
 
 			// Remember which scene node is highlighted
 			SceneNode highlightedSceneNode = null;
 			SceneCollisionManager collMan = smgr.SceneCollisionManager;
 			int lastFPS = -1;
 
 			// draw the selection triangle only as wireframe
 			Material material = new Material();
 			material.Lighting = false;
 			material.Wireframe = true;
 
 			while (device.Run())
 			if (device.WindowActive)
 			{
 				driver.BeginScene(true, true, new Color(0));
 				smgr.DrawAll();
 
 				// Unlight any currently highlighted scene node
 				if (highlightedSceneNode != null)
 				{
 					highlightedSceneNode.SetMaterialFlag(MaterialFlag.Lighting, true);
 					highlightedSceneNode = null;
 				}
 
 				// All intersections in this example are done with a ray cast out from the camera to
 				// a distance of 1000.  You can easily modify this to check (e.g.) a bullet
 				// trajectory or a sword's position, or create a ray from a mouse click position using
 				// ISceneCollisionManager
 				Line3Df ray = new Line3Df();
 				ray.Start = new Vector3Df(camera.Position);
 				ray.End = ray.Start + (camera.Target - ray.Start).Normalize() * 1000.0f;
 
 				// Tracks the current intersection point with the level or a mesh
 				Vector3Df intersection;
 				// Used to show with triangle has been hit
 				Triangle3Df hitTriangle;
 
 				// This call is all you need to perform ray/triangle collision on every scene node
 				// that has a triangle selector, including the Quake level mesh.  It finds the nearest
 				// collision point/triangle, and returns the scene node containing that point.
 				// Irrlicht provides other types of selection, including ray/triangle selector,
 				// ray/box and ellipse/triangle selector, plus associated helpers.
 				// See the methods of ISceneCollisionManager
 				SceneNode selectedSceneNode =
 					collMan.GetSceneNodeAndCollisionPointFromRay(
 						ray,
 						out intersection, // This will be the position of the collision
 						out hitTriangle, // This will be the triangle hit in the collision
 						IDFlag_IsPickable); // This ensures that only nodes that we have set up to be pickable are considered
 
 				// If the ray hit anything, move the billboard to the collision position
 				// and draw the triangle that was hit.
 				if (selectedSceneNode != null)
 				{
 					bill.Position = new Vector3Df(intersection);
 
 					// We need to reset the transform before doing our own rendering.
 					driver.SetTransform(TransformationState.World, Matrix.Identity);
 					driver.SetMaterial(material);
 					driver.Draw3DTriangle(hitTriangle, new Color(255, 0, 0));
 
 					// We can check the flags for the scene node that was hit to see if it should be
 					// highlighted. The animated nodes can be highlighted, but not the Quake level mesh
 					if ((selectedSceneNode.ID & IDFlag_IsHighlightable) == IDFlag_IsHighlightable)
 					{
 						highlightedSceneNode = selectedSceneNode;
 
 						// Highlighting in this case means turning lighting OFF for this node,
 						// which means that it will be drawn with full brightness.
 						highlightedSceneNode.SetMaterialFlag(MaterialFlag.Lighting, false);
 					}
 				}
 
 				// We're all done drawing, so end the scene.
 				driver.EndScene();
 
 				int fps = driver.FPS;
 				if (lastFPS != fps)
 				{
 					device.SetWindowCaption(String.Format(
 						"Collision detection example - Irrlicht Engine [{0}] fps
 						driver.Name, fps));
 
 					lastFPS = fps;
 				}
 			}
 			while (device.Run())
 			if (device.WindowActive)
 			{
 				driver.BeginScene(true, true, new Color(0));
 				smgr.DrawAll();
 
 				// Unlight any currently highlighted scene node
 				if (highlightedSceneNode != null)
 				{
 					highlightedSceneNode.SetMaterialFlag(MaterialFlag.Lighting, true);
 					highlightedSceneNode = null;
 				}
 
 				// All intersections in this example are done with a ray cast out from the camera to
 				// a distance of 1000.  You can easily modify this to check (e.g.) a bullet
 				// trajectory or a sword's position, or create a ray from a mouse click position using
 				// ISceneCollisionManager
 				Line3Df ray = new Line3Df();
 				ray.Start = new Vector3Df(camera.Position);
 				ray.End = ray.Start + (camera.Target - ray.Start).Normalize() * 1000.0f;
 
 				// Tracks the current intersection point with the level or a mesh
 				Vector3Df intersection;
 				// Used to show with triangle has been hit
 				Triangle3Df hitTriangle;
 
 				// This call is all you need to perform ray/triangle collision on every scene node
 				// that has a triangle selector, including the Quake level mesh.  It finds the nearest
 				// collision point/triangle, and returns the scene node containing that point.
 				// Irrlicht provides other types of selection, including ray/triangle selector,
 				// ray/box and ellipse/triangle selector, plus associated helpers.
 				// See the methods of ISceneCollisionManager
 				SceneNode selectedSceneNode =
 					collMan.GetSceneNodeAndCollisionPointFromRay(
 						ray,
 						out intersection, // This will be the position of the collision
 						out hitTriangle, // This will be the triangle hit in the collision
 						IDFlag_IsPickable); // This ensures that only nodes that we have set up to be pickable are considered
 
 				// If the ray hit anything, move the billboard to the collision position
 				// and draw the triangle that was hit.
 				if (selectedSceneNode != null)
 				{
 					bill.Position = new Vector3Df(intersection);
 
 					// We need to reset the transform before doing our own rendering.
 					driver.SetTransform(TransformationState.World, Matrix.Identity);
 					driver.SetMaterial(material);
 					driver.Draw3DTriangle(hitTriangle, new Color(255, 0, 0));
 
 					// We can check the flags for the scene node that was hit to see if it should be
 					// highlighted. The animated nodes can be highlighted, but not the Quake level mesh
 					if ((selectedSceneNode.ID & IDFlag_IsHighlightable) == IDFlag_IsHighlightable)
 					{
 						highlightedSceneNode = selectedSceneNode;
 
 						// Highlighting in this case means turning lighting OFF for this node,
 						// which means that it will be drawn with full brightness.
 						highlightedSceneNode.SetMaterialFlag(MaterialFlag.Lighting, false);
 					}
 				}
 
 				// We're all done drawing, so end the scene.
 				driver.EndScene();
 
 				int fps = driver.FPS;
 				if (lastFPS != fps)
 				{
 					device.SetWindowCaption(String.Format(
 						"Collision detection example - Irrlicht Engine [{0}] fps
 						driver.Name, fps));
 
 					lastFPS = fps;
 				}
 			}
 
 			device.Drop();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\07.Collision\Program.cs" startline="228" endline="253"><![CDATA[
 
 		static bool AskUserForDriver(out DriverType driverType)
 		{
 			driverType = DriverType.Null;
 
 			Console.Write("Please select the driver you want for this example
 						" (a) OpenGL\n (b) Direct3D 9.0c\n (c) Direct3D 8.1\n" +
 						" (d) Burning's Software Renderer\n (e) Software Renderer\n" +
 						" (f) NullDevice\n (otherKey) exit\n\n");
 
 			ConsoleKeyInfo i = Console.ReadKey();
 
 			switch (i.Key)
 			{
 				case ConsoleKey.A
 				case ConsoleKey.B
 				case ConsoleKey.C
 				case ConsoleKey.D
 				case ConsoleKey.E
 				case ConsoleKey.F
 				default
 					return false;
 			}
 
 			return true;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\07.Collision\Program.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\08.SpecialFX\Program.cs" startline="16" endline="172"><![CDATA[
 		{
 			bool shadows = AskUserForRealtimeShadows();
 
 			DriverType driverType;
 			if (!AskUserForDriver(out driverType))
 				return;
 
 			IrrlichtDevice device = IrrlichtDevice.CreateDevice(driverType, new Dimension2Di(640, 480), 16, false, shadows);
 			if (device == null)
 				return;
 
 			VideoDriver driver = device.VideoDriver;
 			SceneManager smgr = device.SceneManager;
 
 			AnimatedMesh mesh = smgr.GetMesh("../../media/room.3ds");
 
 			smgr.MeshManipulator.MakePlanarTextureMapping(mesh.GetMesh(0), 0.004f);
 
 			SceneNode node = null;
 
 			node = smgr.AddAnimatedMeshSceneNode(mesh);
 			node.SetMaterialTexture(0, driver.GetTexture("../../media/wall.jpg"));
 			node.GetMaterial(0).SpecularColor.Set(0, 0, 0, 0);
 
 			mesh = smgr.AddHillPlaneMesh("myHill",
 				new Dimension2Df(20, 20),
 				new Dimension2Di(40, 40), null, 0,
 				new Dimension2Df(0),
 				new Dimension2Df(10, 10));
 
 			node = smgr.AddWaterSurfaceSceneNode(mesh.GetMesh(0), 3.0f, 300.0f, 30.0f);
 			node.Position = new Vector3Df(0, 7, 0);
 
 			node.SetMaterialTexture(0, driver.GetTexture("../../media/stones.jpg"));
 			node.SetMaterialTexture(1, driver.GetTexture("../../media/water.jpg"));
 
 			node.SetMaterialType(MaterialType.Reflection2Layer);
 
 			// create light
 
 			node = smgr.AddLightSceneNode(null, new Vector3Df(0), new Colorf(1.0f, 0.6f, 0.7f, 1.0f), 800);
 			SceneNodeAnimator anim = smgr.CreateFlyCircleAnimator(new Vector3Df(0, 150, 0), 250);
 			node.AddAnimator(anim);
 			anim.Drop();
 
 			// attach billboard to light
 
 			node = smgr.AddBillboardSceneNode(node, new Dimension2Df(50, 50));
 			node.SetMaterialFlag(MaterialFlag.Lighting, false);
 			node.SetMaterialType(MaterialType.TransparentAddColor);
 			node.SetMaterialTexture(0, driver.GetTexture("../../media/particlewhite.bmp"));
 
 			// create a particle system
 
 			ParticleSystemSceneNode ps = smgr.AddParticleSystemSceneNode(false);
 
 			ParticleEmitter em = ps.CreateBoxEmitter(
 				new AABBox(-7, 0, -7, 7, 1, 7),	// emitter size
 				new Vector3Df(0.0f, 0.06f, 0.0f),	// initial direction
 				80, 100,							// emit rate
 				new Color(255, 255, 255, 0),		// darkest color
 				new Color(255, 255, 255, 0),		// brightest color
 				800, 2000, 0,						// min and max age, angle
 				new Dimension2Df(10.0f),			// min size
 				new Dimension2Df(20.0f));			// max size
 
 			ps.Emitter = em; // this grabs the emitter
 			em.Drop(); // so we can drop it here without deleting it
 
 			ParticleAffector paf = ps.CreateFadeOutParticleAffector();
 
 			ps.AddAffector(paf); // same goes for the affector
 			paf.Drop();
 
 			ps.Position = new Vector3Df(-70, 60, 40);
 			ps.Scale = new Vector3Df(2);
 			ps.SetMaterialFlag(MaterialFlag.Lighting, false);
 			ps.SetMaterialFlag(MaterialFlag.ZWrite, false);
 			ps.SetMaterialTexture(0, driver.GetTexture("../../media/fire.bmp"));
 			ps.SetMaterialType(MaterialType.TransparentVertexAlpha);
 
 			VolumeLightSceneNode n = smgr.AddVolumeLightSceneNode(null, -1,
 				32,								// Subdivisions on U axis
 				32,								// Subdivisions on V axis
 				new Color(255, 255, 255, 0),	// foot color
 				new Color(0, 0, 0, 0));		// tail color
 
 			if (n != null)
 			{
 				n.Scale = new Vector3Df(56);
 				n.Position = new Vector3Df(-120, 50, 40);
 
 				// load textures for animation
 				List<Texture> textures = new List<Texture>();
 				for (int i = 7; i > 0; i--)
 				{
 					string s = string.Format("../../media/portal{0}.bmp", i);
 					textures.Add(driver.GetTexture(s));
 				}
 				for (int i = 7; i > 0; i--)
 				{
 					string s = string.Format("../../media/portal{0}.bmp", i);
 					textures.Add(driver.GetTexture(s));
 				}
 
 				// create texture animator
 				SceneNodeAnimator glow = smgr.CreateTextureAnimator(textures, 0.150f);
 
 				// add the animator
 				n.AddAnimator(glow);
 
 				// drop the animator because it was created with a create() function
 				glow.Drop();
 			}
 
 			// add animated character
 
 			mesh = smgr.GetMesh("../../media/dwarf.x");
 			AnimatedMeshSceneNode anode = smgr.AddAnimatedMeshSceneNode(mesh);
 
 			anode.Position = new Vector3Df(-50, 20, -60);
 			anode.AnimationSpeed = 15;
 
 			// add shadow
 			anode.AddShadowVolumeSceneNode();
 			smgr.ShadowColor = new Color(0, 0, 0, 150);
 
 			// make the model a little bit bigger and normalize its normals
 			// because of the scaling, for correct lighting
 			anode.Scale = new Vector3Df(2);
 			anode.SetMaterialFlag(MaterialFlag.NormalizeNormals, true);
 
 			CameraSceneNode camera = smgr.AddCameraSceneNodeFPS();
 			camera.Position = new Vector3Df(-50, 50, -150);
 
 			// disable mouse cursor
 			device.CursorControl.Visible = false;
 
 			int lastFPS = -1;
 
 			while (device.Run())
 			{
 				if (device.WindowActive)
 				{
 					driver.BeginScene(true, true, new Color(0));
 					smgr.DrawAll();
 					driver.EndScene();
 
 					int fps = driver.FPS;
 					if (lastFPS != fps)
 					{
 						device.SetWindowCaption(String.Format(
 							"SpecialFX example - Irrlicht Engine [{0}] fps
 							driver.Name, fps));
 
 						lastFPS = fps;
 					}
 				}
 			}
 			while (device.Run())
 			{
 				if (device.WindowActive)
 				{
 					driver.BeginScene(true, true, new Color(0));
 					smgr.DrawAll();
 					driver.EndScene();
 
 					int fps = driver.FPS;
 					if (lastFPS != fps)
 					{
 						device.SetWindowCaption(String.Format(
 							"SpecialFX example - Irrlicht Engine [{0}] fps
 							driver.Name, fps));
 
 						lastFPS = fps;
 					}
 				}
 			}
 
 			device.Drop();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\08.SpecialFX\Program.cs" startline="173" endline="178"><![CDATA[
 
 		static bool AskUserForRealtimeShadows()
 		{
 			Console.WriteLine("Please press 'y' if you want to use realtime shadows.");
 			return Console.ReadKey().Key == ConsoleKey.Y;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\08.SpecialFX\Program.cs" startline="179" endline="204"><![CDATA[
 
 		static bool AskUserForDriver(out DriverType driverType)
 		{
 			driverType = DriverType.Null;
 
 			Console.Write("Please select the driver you want for this example
 						" (a) OpenGL\n (b) Direct3D 9.0c\n (c) Direct3D 8.1\n" +
 						" (d) Burning's Software Renderer\n (e) Software Renderer\n" +
 						" (f) NullDevice\n (otherKey) exit\n\n");
 
 			ConsoleKeyInfo i = Console.ReadKey();
 
 			switch (i.Key)
 			{
 				case ConsoleKey.A
 				case ConsoleKey.B
 				case ConsoleKey.C
 				case ConsoleKey.D
 				case ConsoleKey.E
 				case ConsoleKey.F
 				default
 					return false;
 			}
 
 			return true;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\08.SpecialFX\Program.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\09.Meshviewer\Program.cs" startline="87" endline="281"><![CDATA[
 		{
 			DriverType driverType;
 			if (!AskUserForDriver(out driverType))
 				return;
 
 			device = IrrlichtDevice.CreateDevice(driverType, new Dimension2Di(800, 600), 16);
 			if (device == null)
 				return;
 
 			device.OnEvent += new IrrlichtDevice.EventHandler(device_OnEvent);
 			device.SetWindowResizable(true);
 			device.SetWindowCaption("Irrlicht Engine - Loading...");
 
 			VideoDriver driver = device.VideoDriver;
 			GUIEnvironment env = device.GUIEnvironment;
 			SceneManager smgr = device.SceneManager;
 
 			smgr.Attributes.SetValue(SceneParameters.COLLADA_CreateSceneInstances, true);
 
 			driver.SetTextureCreationFlag(TextureCreationFlag.Always32Bit, true);
 
 			smgr.AddLightSceneNode(null, new Vector3Df(200), new Colorf(1.0f, 1.0f, 1.0f), 2000);
 			smgr.AmbientLight = new Colorf(0.3f, 0.3f, 0.3f);
 
 			// add our media directory as "search path"
 			device.FileSystem.AddFileArchive("../../media/");
 
 			// read configuration from xml file
 			// (we use .NET way to do this, since Lime doesn't support native Irrlicht' xml reader)
 			XmlDocument xml = new XmlDocument();
 			xml.Load("../../media/config.xml");
 			startUpModelFile = xml.DocumentElement["startUpModel"].Attributes["file"].Value;
 			caption = xml.DocumentElement["messageText"].Attributes["caption"].Value;
 			messageText = xml.DocumentElement["messageText"].InnerText;
 
 			if (args.Length > 0)
 				startUpModelFile = args[0];
 
 			// set a nicer font
 			GUIFont font = env.GetFont("fonthaettenschweiler.bmp");
 			if (font != null)
 				env.Skin.SetFont(font);
 
 			// load the irrlicht engine logo
 			GUIImage img = env.AddImage(
 				driver.GetTexture("irrlichtlogoalpha2.tga"),
 				new Vector2Di(10, (int)driver.ScreenSize.Height - 128));
 			img.ID = (int)guiID.Logo;
 
 			// lock the logo's edges to the bottom left corner of the screen
 			img.SetAlignment(GUIAlignment.UpperLeft, GUIAlignment.UpperLeft, GUIAlignment.LowerRight, GUIAlignment.LowerRight);
 
 			// create menu
 			GUIContextMenu menu = env.AddMenu();
 			menu.AddItem("File", -1, true, true);
 			menu.AddItem("View", -1, true, true);
 			menu.AddItem("Camera", -1, true, true);
 			menu.AddItem("Help", -1, true, true);
 
 			GUIContextMenu submenu;
 			submenu = menu.GetSubMenu(0);
 			submenu.AddItem("Open Model File & Texture...", (int)guiID.OpenModel);
 			submenu.AddItem("Set Model Archive...", (int)guiID.SetModelArchive);
 			submenu.AddItem("Load as Octree", (int)guiID.LoadAsOctree);
 			submenu.AddSeparator();
 			submenu.AddItem("Quit", (int)guiID.Quit);
 
 			submenu = menu.GetSubMenu(1);
 			submenu.AddItem("sky box visible", (int)guiID.SkyBoxVisible, true, false, true);
 			submenu.AddItem("toggle model debug information", (int)guiID.ToggleDebugInfo, true, true);
 			submenu.AddItem("model material", -1, true, true);
 
 			submenu = submenu.GetSubMenu(1);
 			submenu.AddItem("Off", (int)guiID.DebugOff);
 			submenu.AddItem("Bounding Box", (int)guiID.DebugBoundingBox);
 			submenu.AddItem("Normals", (int)guiID.DebugNormals);
 			submenu.AddItem("Skeleton", (int)guiID.DebugSkeleton);
 			submenu.AddItem("Wire overlay", (int)guiID.DebugWireOverlay);
 			submenu.AddItem("Half-Transparent", (int)guiID.DebugHalfTransparent);
 			submenu.AddItem("Buffers bounding boxes", (int)guiID.DebugBuffersBoundingBoxes);
 			submenu.AddItem("All", (int)guiID.DebugAll);
 
 			submenu = menu.GetSubMenu(1).GetSubMenu(2);
 			submenu.AddItem("Solid", (int)guiID.ModelMaterialSolid);
 			submenu.AddItem("Transparent", (int)guiID.ModelMaterialTransparent);
 			submenu.AddItem("Reflection", (int)guiID.ModelMaterialReflection);
 
 			submenu = menu.GetSubMenu(2);
 			submenu.AddItem("Maya Style", (int)guiID.CameraMaya);
 			submenu.AddItem("First Person", (int)guiID.CameraFirstPerson);
 
 			submenu = menu.GetSubMenu(3);
 			submenu.AddItem("About", (int)guiID.About);
 
 			// create toolbar
 
 			GUIToolBar bar = env.AddToolBar();
 
 			Texture image = driver.GetTexture("open.png");
 			bar.AddButton((int)guiID.ButtonOpenModel, null, "Open a model", image, null, false, true);
 
 			image = driver.GetTexture("tools.png");
 			bar.AddButton((int)guiID.ButtonShowToolbox, null, "Open Toolset", image, null, false, true);
 
 			image = driver.GetTexture("zip.png");
 			bar.AddButton((int)guiID.ButtonSelectArchive, null, "Set Model Archive", image, null, false, true);
 
 			image = driver.GetTexture("help.png");
 			bar.AddButton((int)guiID.ButtonShowAbout, null, "Open Help", image, null, false, true);
 
 			// create a combobox with some senseless texts
 
 			GUIComboBox box = env.AddComboBox(new Recti(250, 4, 350, 23), bar, (int)guiID.TextureFilter);
 			box.AddItem("No filtering");
 			box.AddItem("Bilinear");
 			box.AddItem("Trilinear");
 			box.AddItem("Anisotropic");
 			box.AddItem("Isotropic");
 
 			// disable alpha
 			setSkinTransparency(255, env.Skin);
 
 			// add a tabcontrol
 			createToolBox();
 
 			// create fps text
 			GUIStaticText fpstext = env.AddStaticText("", new Recti(400, 4, 570, 23), true, false, bar);
 			GUIStaticText postext = env.AddStaticText("", new Recti(10, 50, 470, 80), false, false, null, (int)guiID.PositionText);
 			postext.Visible = false;
 
 			// show about message box and load default model
 			if (args.Length == 0)
 				showAboutText();
 
 			loadModel(startUpModelFile);
 
 			// add skybox
 
 			skybox = smgr.AddSkyBoxSceneNode(
 				"irrlicht2_up.jpg", "irrlicht2_dn.jpg",
 				"irrlicht2_lf.jpg", "irrlicht2_rt.jpg",
 				"irrlicht2_ft.jpg", "irrlicht2_bk.jpg");
 
 			// add a camera scene node
 
 			camera[0] = smgr.AddCameraSceneNodeMaya();
 			camera[0].FarValue = 20000;
 			// Maya cameras reposition themselves relative to their target,
 			// so target the location where the mesh scene node is placed.
 			camera[0].Target = new Vector3Df(0, 30, 0);
 
 			camera[1] = smgr.AddCameraSceneNodeFPS();
 			camera[1].FarValue = 20000;
 			camera[1].Position = new Vector3Df(0, 0, -70);
 			camera[1].Target = new Vector3Df(0, 30, 0);
 
 			setActiveCamera(camera[0]);
 
 			// set window caption
 			caption = string.Format("{0} - [{1}]", caption, driver.Name);
 			device.SetWindowCaption(caption);
 
 			// remember state so we notice when the window does lose the focus
 			bool hasFocus = device.WindowFocused;
 
 			// draw everything
 			while (device.Run() && driver != null)
 			{
 				// Catch focus changes (workaround until Irrlicht has events for this)
 				bool focused = device.WindowFocused;
 				if (hasFocus && !focused)
 					onKillFocus();
 
 				hasFocus = focused;
 
 				if (device.WindowActive)
 				{
 					driver.BeginScene(true, true, new Color(50, 50, 50));
 					smgr.DrawAll();
 					env.DrawAll();
 					driver.EndScene();
 
 					string str = string.Format("FPS
 					fpstext.Text = str;
 
 					CameraSceneNode cam = device.SceneManager.ActiveCamera;
 					str = string.Format("Pos
 					postext.Text = str;
 				}
 				else
 					device.Yield();
 			}
 			while (device.Run() && driver != null)
 			{
 				// Catch focus changes (workaround until Irrlicht has events for this)
 				bool focused = device.WindowFocused;
 				if (hasFocus && !focused)
 					onKillFocus();
 
 				hasFocus = focused;
 
 				if (device.WindowActive)
 				{
 					driver.BeginScene(true, true, new Color(50, 50, 50));
 					smgr.DrawAll();
 					env.DrawAll();
 					driver.EndScene();
 
 					string str = string.Format("FPS
 					fpstext.Text = str;
 
 					CameraSceneNode cam = device.SceneManager.ActiveCamera;
 					str = string.Format("Pos
 					postext.Text = str;
 				}
 				else
 					device.Yield();
 			}
 
 			device.Drop();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\09.Meshviewer\Program.cs" startline="282" endline="383"><![CDATA[
 
 		static bool device_OnEvent(Event e)
 		{
 			// Escape swaps Camera Input
 			if (e.Type == EventType.Key && !e.Key.PressedDown && OnKeyUp(e.Key.Key))
 				return true;
 
 			if (e.Type == EventType.GUI)
 			{
 				guiID id = (guiID)e.GUI.Caller.ID;
 				GUIEnvironment env = device.GUIEnvironment;
 
 				switch (e.GUI.Type)
 				{
 					case GUIEventType.MenuItemSelected
 						// a menu item was clicked
 						OnMenuItemSelected(e.GUI.Caller as GUIContextMenu);
 						break;
 
 					case GUIEventType.FileDialogFileSelected
 						// load the model file, selected in the file open dialog
 						loadModel((e.GUI.Caller as GUIFileOpenDialog).FileName);
 						break;
 
 					case GUIEventType.ScrollBarChanged
 						if (id == guiID.SkinTransparency)
 						{
 							// control skin transparency
 							int p = (e.GUI.Caller as GUIScrollBar).Position;
 							setSkinTransparency(p, env.Skin);
 						}
 						else if (id == guiID.SkinAnimationFPS)
 						{
 							// control animation speed
 							int p = (e.GUI.Caller as GUIScrollBar).Position;
 							if (model.Type == SceneNodeType.AnimatedMesh)
 								(model as AnimatedMeshSceneNode).AnimationSpeed = p;
 						}
 
 						break;
 
 					case GUIEventType.ComboBoxChanged
 						if (id == guiID.TextureFilter)
 							// control anti-aliasing/filtering
 							OnTextureFilterSelected(e.GUI.Caller as GUIComboBox);
 
 						break;
 
 					case GUIEventType.ButtonClicked
 						switch (id)
 						{
 							case guiID.ButtonSetScale
 								// set scale
 								GUIElement r = env.RootElement;
 								Vector3Df s = new Vector3Df(
 									Convert.ToSingle(r.GetElementFromID((int)guiID.XScale, true).Text),
 									Convert.ToSingle(r.GetElementFromID((int)guiID.YScale, true).Text),
 									Convert.ToSingle(r.GetElementFromID((int)guiID.ZScale, true).Text));
 
 								if (model != null)
 									model.Scale = s;
 
 								updateScaleInfo(model);
 								break;
 
 							case guiID.ButtonScaleMul10
 								if (model != null)
 									model.Scale *= 10;
 
 								updateScaleInfo(model);
 								break;
 
 							case guiID.ButtonScaleDiv10
 								if (model != null)
 									model.Scale *= 0.1f;
 
 								updateScaleInfo(model);
 								break;
 
 							case guiID.ButtonOpenModel
 								env.AddFileOpenDialog("Please select a model file to open");
 								break;
 
 							case guiID.ButtonSelectArchive
 								env.AddFileOpenDialog("Please select your game archive/directory");
 								break;
 
 							case guiID.ButtonShowAbout
 								showAboutText();
 								break;
 
 							case guiID.ButtonShowToolbox
 								createToolBox();
 								break;
 						}
 
 						break; // case GUIEventType.ButtonClicked
 				}
 			}
 
 			return false;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\09.Meshviewer\Program.cs" startline="384" endline="398"><![CDATA[
 
 		static bool hasModalDialog()
 		{
 			GUIElement focused = device.GUIEnvironment.Focus;
 
 			while (focused != null)
 			{
 				if (focused.Visible && focused.Type == GUIElementType.ModalScreen)
 					return true;
 
 				focused = focused.Parent;
 			}
 			while (focused != null)
 			{
 				if (focused.Visible && focused.Type == GUIElementType.ModalScreen)
 					return true;
 
 				focused = focused.Parent;
 			}
 
 			return false;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\09.Meshviewer\Program.cs" startline="399" endline="440"><![CDATA[
 
 		static bool OnKeyUp(KeyCode keyCode)
 		{
 			if (device == null)
 				return false;
 
 			if (hasModalDialog())
 				return false;
 
 			switch (keyCode)
 			{
 				case KeyCode.Esc
 					CameraSceneNode c = device.SceneManager.ActiveCamera;
 					if (c != null)
 						c.InputReceiverEnabled = !c.InputReceiverEnabled;
 
 					return true;
 
 				case KeyCode.F1
 					GUIElement e = device.GUIEnvironment.RootElement.GetElementFromID((int)guiID.PositionText);
 					if (e != null)
 						e.Visible = !e.Visible;
 
 					break;
 
 				case KeyCode.KeyM
 					device.MinimizeWindow();
 					break;
 
 				case KeyCode.KeyL
 					useLight = !useLight;
 					if (model != null)
 					{
 						model.SetMaterialFlag(MaterialFlag.Lighting, useLight);
 						model.SetMaterialFlag(MaterialFlag.NormalizeNormals, useLight);
 					}
 
 					break;
 			}
 
 			return false;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\09.Meshviewer\Program.cs" startline="441" endline="567"><![CDATA[
 
 		static void OnMenuItemSelected(GUIContextMenu menu)
 		{
 			guiID id = (guiID)menu.SelectedCommandID;
 			GUIEnvironment env = device.GUIEnvironment;
 
 			switch (id)
 			{
 				case guiID.OpenModel
 					env.AddFileOpenDialog("Please select a model file to open");
 					break;
 
 				case guiID.SetModelArchive
 					env.AddFileOpenDialog("Please select your game archive/directory");
 					break;
 
 				case guiID.LoadAsOctree
 					octree = !octree;
 					menu.SetItemChecked(menu.SelectedIndex, octree);
 					break;
 
 				case guiID.Quit
 					device.Close();
 					break;
 
 				case guiID.SkyBoxVisible
 					menu.SetItemChecked(menu.SelectedIndex, !menu.GetItemChecked(menu.SelectedIndex));
 					skybox.Visible = !skybox.Visible;
 					break;
 
 				case guiID.DebugOff
 					for (int i = 1; i <= 6; i++)
 						menu.SetItemChecked(menu.SelectedIndex + i, false);
 					for (int i = 1; i <= 6; i++)
 						menu.SetItemChecked(menu.SelectedIndex + i, false);
 
 					if (model != null)
 						model.DebugDataVisible = DebugSceneType.Off;
 
 					break;
 
 				case guiID.DebugBoundingBox
 					menu.SetItemChecked(menu.SelectedIndex, !menu.GetItemChecked(menu.SelectedIndex));
 
 					if (model != null)
 						model.DebugDataVisible ^= DebugSceneType.BBox;
 
 					break;
 
 				case guiID.DebugNormals
 					menu.SetItemChecked(menu.SelectedIndex, !menu.GetItemChecked(menu.SelectedIndex));
 
 					if (model != null)
 						model.DebugDataVisible ^= DebugSceneType.Normals;
 
 					break;
 
 				case guiID.DebugSkeleton
 					menu.SetItemChecked(menu.SelectedIndex, !menu.GetItemChecked(menu.SelectedIndex));
 
 					if (model != null)
 						model.DebugDataVisible ^= DebugSceneType.Skeleton;
 
 					break;
 
 				case guiID.DebugWireOverlay
 					menu.SetItemChecked(menu.SelectedIndex, !menu.GetItemChecked(menu.SelectedIndex));
 
 					if (model != null)
 						model.DebugDataVisible ^= DebugSceneType.MeshWireOverlay;
 
 					break;
 
 				case guiID.DebugHalfTransparent
 					menu.SetItemChecked(menu.SelectedIndex, !menu.GetItemChecked(menu.SelectedIndex));
 
 					if (model != null)
 						model.DebugDataVisible ^= DebugSceneType.HalfTransparency;
 
 					break;
 
 				case guiID.DebugBuffersBoundingBoxes
 					menu.SetItemChecked(menu.SelectedIndex, !menu.GetItemChecked(menu.SelectedIndex));
 
 					if (model != null)
 						model.DebugDataVisible ^= DebugSceneType.BBoxBuffers;
 
 					break;
 
 				case guiID.DebugAll
 					for (int i = 1; i <= 6; i++)
 						menu.SetItemChecked(menu.SelectedIndex - i, true);
 					for (int i = 1; i <= 6; i++)
 						menu.SetItemChecked(menu.SelectedIndex - i, true);
 
 					if (model != null)
 						model.DebugDataVisible = DebugSceneType.Full;
 
 					break;
 
 				case guiID.About
 					showAboutText();
 					break;
 
 				case guiID.ModelMaterialSolid
 					if (model != null)
 						model.SetMaterialType(MaterialType.Solid);
 
 					break;
 
 				case guiID.ModelMaterialTransparent
 					if (model != null)
 						model.SetMaterialType(MaterialType.TransparentAddColor);
 
 					break;
 
 				case guiID.ModelMaterialReflection
 					if (model != null)
 						model.SetMaterialType(MaterialType.SphereMap);
 
 					break;
 
 				case guiID.CameraMaya
 					setActiveCamera(camera[0]);
 					break;
 
 				case guiID.CameraFirstPerson
 					setActiveCamera(camera[1]);
 					break;
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\09.Meshviewer\Program.cs" startline="568" endline="601"><![CDATA[
 
 		static void OnTextureFilterSelected(GUIComboBox combo)
 		{
 			if (model == null)
 				return;
 
 			int p = combo.SelectedIndex;
 			switch (p)
 			{
 				case 0
 					model.SetMaterialFlag(MaterialFlag.BilinearFilter, false);
 					model.SetMaterialFlag(MaterialFlag.TrilinearFilter, false);
 					model.SetMaterialFlag(MaterialFlag.AnisotropicFilter, false);
 					break;
 
 				case 1
 					model.SetMaterialFlag(MaterialFlag.BilinearFilter, true);
 					model.SetMaterialFlag(MaterialFlag.TrilinearFilter, false);
 					break;
 
 				case 2
 					model.SetMaterialFlag(MaterialFlag.BilinearFilter, false);
 					model.SetMaterialFlag(MaterialFlag.TrilinearFilter, true);
 					break;
 
 				case 3
 					model.SetMaterialFlag(MaterialFlag.AnisotropicFilter, true);
 					break;
 
 				case 4
 					model.SetMaterialFlag(MaterialFlag.AnisotropicFilter, false);
 					break;
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\09.Meshviewer\Program.cs" startline="602" endline="623"><![CDATA[
 
 		static void onKillFocus()
 		{
 			// Avoid that the FPS-camera continues moving when the user presses alt-tab while moving the camera.
 
 			foreach (SceneNodeAnimator a in camera[1].AnimatorList)
 			{
 				CameraFPSSceneNodeAnimator f = a as CameraFPSSceneNodeAnimator;
 				if (f != null)
 				{
 					// we send a key-down event for all keys used by this animator
 					foreach (List<KeyCode> l in f.KeyMap.Map.Values)
 					{
 						foreach (KeyCode k in l)
 						{
 							Event e = new Event('\0', k, false);
 							device.PostEvent(e);
 						}
 						foreach (KeyCode k in l)
 						{
 							Event e = new Event('\0', k, false);
 							device.PostEvent(e);
 						}
 					}
 					foreach (List<KeyCode> l in f.KeyMap.Map.Values)
 					{
 						foreach (KeyCode k in l)
 						{
 							Event e = new Event('\0', k, false);
 							device.PostEvent(e);
 						}
 					}
 				}
 			}
 			foreach (SceneNodeAnimator a in camera[1].AnimatorList)
 			{
 				CameraFPSSceneNodeAnimator f = a as CameraFPSSceneNodeAnimator;
 				if (f != null)
 				{
 					// we send a key-down event for all keys used by this animator
 					foreach (List<KeyCode> l in f.KeyMap.Map.Values)
 					{
 						foreach (KeyCode k in l)
 						{
 							Event e = new Event('\0', k, false);
 							device.PostEvent(e);
 						}
 					}
 				}
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\09.Meshviewer\Program.cs" startline="624" endline="635"><![CDATA[
 
 		static void setActiveCamera(CameraSceneNode newActive)
 		{
 			if (device == null)
 				return;
 
 			CameraSceneNode c = device.SceneManager.ActiveCamera;
 			c.InputReceiverEnabled = false;
 
 			newActive.InputReceiverEnabled = true;
 			device.SceneManager.ActiveCamera = newActive;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\09.Meshviewer\Program.cs" startline="636" endline="645"><![CDATA[
 
 		static void setSkinTransparency(int alpha, GUISkin skin)
 		{
 			foreach (GUIDefaultColor i in Enum.GetValues(typeof(GUIDefaultColor)))
 			{
 				Color c = skin.GetColor(i);
 				c.Alpha = alpha;
 				skin.SetColor(c, i);
 			}
 			foreach (GUIDefaultColor i in Enum.GetValues(typeof(GUIDefaultColor)))
 			{
 				Color c = skin.GetColor(i);
 				c.Alpha = alpha;
 				skin.SetColor(c, i);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\09.Meshviewer\Program.cs" startline="646" endline="666"><![CDATA[
 
 		static void updateScaleInfo(SceneNode model)
 		{
 			GUIElement t = device.GUIEnvironment.RootElement.GetElementFromID((int)guiID.DialogRootWindow, true);
 			if (t == null)
 				return;
 
 			if (model == null)
 			{
 				t.GetElementFromID((int)guiID.XScale, true).Text = "-";
 				t.GetElementFromID((int)guiID.YScale, true).Text = "-";
 				t.GetElementFromID((int)guiID.ZScale, true).Text = "-";
 			}
 			else
 			{
 				Vector3Df s = model.Scale;
 				t.GetElementFromID((int)guiID.XScale, true).Text = s.X.ToString();
 				t.GetElementFromID((int)guiID.YScale, true).Text = s.Y.ToString();
 				t.GetElementFromID((int)guiID.ZScale, true).Text = s.Z.ToString();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\09.Meshviewer\Program.cs" startline="667" endline="671"><![CDATA[
 
 		static void showAboutText()
 		{
 			device.GUIEnvironment.AddMessageBox(caption, messageText);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\09.Meshviewer\Program.cs" startline="672" endline="762"><![CDATA[
 
 		static void loadModel(string f)
 		{
 			string e = Path.GetExtension(f);
 
 			switch (e)
 			{
 				// if a texture is loaded apply it to the current model
 				case ".jpg"
 				case ".pcx"
 				case ".png"
 				case ".ppm"
 				case ".pgm"
 				case ".pbm"
 				case ".psd"
 				case ".tga"
 				case ".bmp"
 				case ".wal"
 				case ".rgb"
 				case ".rgba"
 					Texture t = device.VideoDriver.GetTexture(f);
 					if (t != null && model != null)
 					{
 						// always reload texture
 						device.VideoDriver.RemoveTexture(t);
 						t = device.VideoDriver.GetTexture(f);
 						model.SetMaterialTexture(0, t);
 					}
 					return;
 
 				// if a archive is loaded add it to the FileArchive
 				case ".pk3"
 				case ".zip"
 				case ".pak"
 				case ".npk"
 					device.FileSystem.AddFileArchive(f);
 					return;
 			}
 
 			// load a model into the engine
 
 			if (model != null)
 				model.Remove();
 
 			model = null;
 
 			if (e == ".irr")
 			{
 				device.SceneManager.LoadScene(f);
 				model = device.SceneManager.GetSceneNodeFromType(SceneNodeType.AnimatedMesh);
 				return;
 			}
 
 			AnimatedMesh m = device.SceneManager.GetMesh(f);
 			if (m == null)
 			{
 				// model could not be loaded
 				if (startUpModelFile != f)
 					device.GUIEnvironment.AddMessageBox(caption, "The model could not be loaded. Maybe it is not a supported file format.");
 
 				return;
 			}
 
 			// set default material properties
 
 			if (octree)
 			{
 				model = device.SceneManager.AddOctreeSceneNode(m.GetMesh(0));
 			}
 			else
 			{
 				AnimatedMeshSceneNode n = device.SceneManager.AddAnimatedMeshSceneNode(m);
 				n.AnimationSpeed = 30;
 				model = n;
 			}
 
 			model.SetMaterialFlag(MaterialFlag.Lighting, useLight);
 			model.SetMaterialFlag(MaterialFlag.NormalizeNormals, useLight);
 			model.DebugDataVisible = DebugSceneType.Off;
 
 			// we need to uncheck the menu entries. would be cool to fake a menu event, but
 			// that's not so simple. so we do it brute force
 			GUIContextMenu u = device.GUIEnvironment.RootElement.GetElementFromID((int)guiID.ToggleDebugInfo, true) as GUIContextMenu;
 			if (u != null)
 			{
 				for (int i = 0; i < 6; i++)
 					u.SetItemChecked(i, false);
 				for (int i = 0; i < 6; i++)
 					u.SetItemChecked(i, false);
 			}
 
 			updateScaleInfo(model);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\09.Meshviewer\Program.cs" startline="763" endline="814"><![CDATA[
 
 		static void createToolBox()
 		{
 			GUIEnvironment env = device.GUIEnvironment;
 			GUIElement root = env.RootElement;
 
 			// remove tool box if already there
 			GUIElement e = root.GetElementFromID((int)guiID.DialogRootWindow, true);
 			if (e != null)
 				e.Remove();
 
 			// create the toolbox window
 			GUIWindow w = env.AddWindow(new Recti(600, 45, 800, 480), false, "Toolset", null, (int)guiID.DialogRootWindow);
 
 			// create tab control and tabs
 			GUITabControl tab = env.AddTabControl(new Recti(2, 20, 800 - 602, 480 - 7), w, true, true);
 
 			GUITab t1 = tab.AddTab("Config");
 
 			// add some edit boxes and a button to tab one
 			env.AddStaticText("Scale
 			env.AddStaticText("X
 			env.AddEditBox("1.0", new Recti(40, 46, 130, 66), true, t1, (int)guiID.XScale);
 			env.AddStaticText("Y
 			env.AddEditBox("1.0", new Recti(40, 76, 130, 96), true, t1, (int)guiID.YScale);
 			env.AddStaticText("Z
 			env.AddEditBox("1.0", new Recti(40, 106, 130, 126), true, t1, (int)guiID.ZScale);
 
 			env.AddButton(new Recti(10, 134, 85, 165), t1, (int)guiID.ButtonSetScale, "Set");
 
 			// quick scale buttons
 			env.AddButton(new Recti(65, 20, 95, 40), t1, (int)guiID.ButtonScaleMul10, "* 10");
 			env.AddButton(new Recti(100, 20, 130, 40), t1, (int)guiID.ButtonScaleDiv10, "* 0.1");
 
 			updateScaleInfo(model);
 
 			// add transparency control
 			env.AddStaticText("GUI Transparency Control
 			GUIScrollBar b = env.AddScrollBar(true, new Recti(10, 225, 150, 240), t1, (int)guiID.SkinTransparency);
 			b.MaxValue = 255;
 			b.Position = 255;
 
 			// add framerate control
 			env.AddStaticText("Framerate
 			b = env.AddScrollBar(true, new Recti(10, 265, 150, 280), t1, (int)guiID.SkinAnimationFPS);
 			b.MaxValue = MaxFramerate;
 			b.MinValue = -MaxFramerate;
 			b.Position = DefaultFramerate;
 
 			// bring irrlicht engine logo to front, because it now may be below the newly created toolbox
 			root.BringToFront(root.GetElementFromID((int)guiID.Logo, true));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\09.Meshviewer\Program.cs" startline="815" endline="840"><![CDATA[
 
 		static bool AskUserForDriver(out DriverType driverType)
 		{
 			driverType = DriverType.Null;
 
 			Console.Write("Please select the driver you want for this example
 						" (a) OpenGL\n (b) Direct3D 9.0c\n (c) Direct3D 8.1\n" +
 						" (d) Burning's Software Renderer\n (e) Software Renderer\n" +
 						" (f) NullDevice\n (otherKey) exit\n\n");
 
 			ConsoleKeyInfo i = Console.ReadKey();
 
 			switch (i.Key)
 			{
 				case ConsoleKey.A
 				case ConsoleKey.B
 				case ConsoleKey.C
 				case ConsoleKey.D
 				case ConsoleKey.E
 				case ConsoleKey.F
 				default
 					return false;
 			}
 
 			return true;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\09.Meshviewer\Program.cs" startline="19" endline="28"><![CDATA[
 		static IrrlichtDevice device = null;
 		static string startUpModelFile;
 		static string messageText;
 		static string caption;
 		static SceneNode model = null;
 		static SceneNode skybox = null;
 		static bool octree = false;
 		static bool useLight = false;
 
 		static CameraSceneNode[] camera = new CameraSceneNode[2];
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\10.Shaders\Program.cs" startline="21" endline="224"><![CDATA[
 		{
 			DriverType driverType;
 			if (!AskUserForDriver(out driverType))
 				return;
 
 			useHighLevelShaders = AskUserForHighLevelShaders(driverType);
 
 			if (useHighLevelShaders)
 				useCgShaders = AskUserForCgShaders(driverType);
 
 			device = IrrlichtDevice.CreateDevice(driverType, new Dimension2Di(640, 480));
 			if (device == null)
 				return;
 
 			VideoDriver driver = device.VideoDriver;
 			SceneManager smgr = device.SceneManager;
 
 			string vsFileName = null; // filename for the vertex shader
 			string psFileName = null; // filename for the pixel shader
 
 			switch (driverType)
 			{
 				case DriverType.Direct3D8
 					psFileName = "../../media/d3d8.psh";
 					vsFileName = "../../media/d3d8.vsh";
 					break;
 
 				case DriverType.Direct3D9
 					if (useHighLevelShaders)
 					{
 						// Cg can also handle this syntax
 						psFileName = "../../media/d3d9.hlsl";
 						vsFileName = psFileName; // both shaders are in the same file
 					}
 					else
 					{
 						psFileName = "../../media/d3d9.psh";
 						vsFileName = "../../media/d3d9.vsh";
 					}
 					break;
 
 				case DriverType.OpenGL
 					if (useHighLevelShaders)
 					{
 						if (useCgShaders)
 						{
 							// Use HLSL syntax for Cg
 							psFileName = "../../media/d3d9.hlsl";
 							vsFileName = psFileName; // both shaders are in the same file
 						}
 						else
 						{
 							psFileName = "../../media/opengl.frag";
 							vsFileName = "../../media/opengl.vert";
 						}
 					}
 					else
 					{
 						psFileName = "../../media/opengl.psh";
 						vsFileName = "../../media/opengl.vsh";
 					}
 					break;
 			}
 
 			if (!driver.QueryFeature(VideoDriverFeature.PixelShader_1_1) &&
 				!driver.QueryFeature(VideoDriverFeature.ARB_FragmentProgram_1))
 				device.Logger.Log("WARNING
 
 			if (!driver.QueryFeature(VideoDriverFeature.VertexShader_1_1) &&
 				!driver.QueryFeature(VideoDriverFeature.ARB_VertexProgram_1))
 				device.Logger.Log("WARNING
 
 			// create materials
 			
 			GPUProgrammingServices gpu = driver.GPUProgrammingServices;
 			MaterialType newMaterialType1 = MaterialType.Solid;
 			MaterialType newMaterialType2 = MaterialType.TransparentAddColor;
 
 			if (gpu != null)
 			{
 				gpu.OnSetConstants += new GPUProgrammingServices.SetConstantsHandler(gpu_OnSetConstants);
 
 				// create the shaders depending on if the user wanted high level or low level shaders
 
 				if (useHighLevelShaders)
 				{
 					GPUShadingLanguage shadingLanguage = useCgShaders
 						? GPUShadingLanguage.Cg
 						
 
 					newMaterialType1 = gpu.AddHighLevelShaderMaterialFromFiles(
 						vsFileName, "vertexMain", VertexShaderType.VS_1_1,
 						psFileName, "pixelMain", PixelShaderType.PS_1_1,
 						MaterialType.Solid, 0, shadingLanguage);
 
 					newMaterialType2 = gpu.AddHighLevelShaderMaterialFromFiles(
 						vsFileName, "vertexMain", VertexShaderType.VS_1_1,
 						psFileName, "pixelMain", PixelShaderType.PS_1_1,
 						MaterialType.TransparentAddColor, 0, shadingLanguage);
 				}
 				else
 				{
 					// create material from low level shaders (asm or arb_asm)
 
 					newMaterialType1 = gpu.AddShaderMaterialFromFiles(vsFileName,
 						psFileName, MaterialType.Solid);
 
 					newMaterialType2 = gpu.AddShaderMaterialFromFiles(vsFileName,
 						psFileName, MaterialType.TransparentAddColor);
 				}
 			}
 
 			if ((int)newMaterialType1 == -1)
 				newMaterialType1 = MaterialType.Solid;
 
 			if ((int)newMaterialType2 == -1)
 				newMaterialType2 = MaterialType.TransparentAddColor;
 
 			// create test scene node 1, with the new created material type 1
 
 			SceneNode node = smgr.AddCubeSceneNode(50);
 			node.Position = new Vector3Df(0);
 			node.SetMaterialTexture(0, driver.GetTexture("../../media/wall.bmp"));
 			node.SetMaterialFlag(MaterialFlag.Lighting, false);
 			node.SetMaterialType(newMaterialType1);
 
 			smgr.AddTextSceneNode(device.GUIEnvironment.BuiltInFont, "PS & VS & EMT_SOLID", new Color(255, 255, 255), node);
 
 			SceneNodeAnimator anim = smgr.CreateRotationAnimator(new Vector3Df(0, 0.3f, 0));
 			node.AddAnimator(anim);
 			anim.Drop();
 
 			// create test scene node 2, with the new created material type 2
 
 			node = smgr.AddCubeSceneNode(50);
 			node.Position = new Vector3Df(0, -10, 50);
 			node.SetMaterialTexture(0, driver.GetTexture("../../media/wall.bmp"));
 			node.SetMaterialFlag(MaterialFlag.Lighting, false);
 			node.SetMaterialFlag(MaterialFlag.BlendOperation, true);
 			node.SetMaterialType(newMaterialType2);
 
 			smgr.AddTextSceneNode(device.GUIEnvironment.BuiltInFont, "PS & VS & EMT_TRANSPARENT", new Color(255, 255, 255), node);
 
 			anim = smgr.CreateRotationAnimator(new Vector3Df(0, 0.3f, 0));
 			node.AddAnimator(anim);
 			anim.Drop();
 
 			// create test scene node 3, with no shader
 
 			node = smgr.AddCubeSceneNode(50);
 			node.Position = new Vector3Df(0, 50, 25);
 			node.SetMaterialTexture(0, driver.GetTexture("../../media/wall.bmp"));
 			node.SetMaterialFlag(MaterialFlag.Lighting, false);
 
 			smgr.AddTextSceneNode(device.GUIEnvironment.BuiltInFont, "NO SHADER", new Color(255, 255, 255), node);
 
 			// add a nice skybox
 
 			driver.SetTextureCreationFlag(TextureCreationFlag.CreateMipMaps, false);
 
 			SceneNode skybox = smgr.AddSkyBoxSceneNode(
 				"../../media/irrlicht2_up.jpg",
 				"../../media/irrlicht2_dn.jpg",
 				"../../media/irrlicht2_lf.jpg",
 				"../../media/irrlicht2_rt.jpg",
 				"../../media/irrlicht2_ft.jpg",
 				"../../media/irrlicht2_bk.jpg");
 
 			driver.SetTextureCreationFlag(TextureCreationFlag.CreateMipMaps, true);
 
 			// add a camera and disable the mouse cursor
 
 			CameraSceneNode cam = smgr.AddCameraSceneNodeFPS();
 			cam.Position = new Vector3Df(-100, 50, 100);
 			cam.Target = new Vector3Df(0);
 
 			device.CursorControl.Visible = false;
 
 			// draw everything
 
 			int lastFPS = -1;
 
 			while (device.Run())
 			{
 				if (device.WindowActive)
 				{
 					driver.BeginScene(true, true, new Color(0));
 					smgr.DrawAll();
 					driver.EndScene();
 
 					int fps = driver.FPS;
 					if (lastFPS != fps)
 					{
 						device.SetWindowCaption(String.Format(
 							"Vertex and pixel shader example - Irrlicht Engine [{0}] fps
 							driver.Name, fps));
 
 						lastFPS = fps;
 					}
 				}
 			}
 			while (device.Run())
 			{
 				if (device.WindowActive)
 				{
 					driver.BeginScene(true, true, new Color(0));
 					smgr.DrawAll();
 					driver.EndScene();
 
 					int fps = driver.FPS;
 					if (lastFPS != fps)
 					{
 						device.SetWindowCaption(String.Format(
 							"Vertex and pixel shader example - Irrlicht Engine [{0}] fps
 							driver.Name, fps));
 
 						lastFPS = fps;
 					}
 				}
 			}
 
 			device.Drop();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\10.Shaders\Program.cs" startline="225" endline="289"><![CDATA[
 
 		static void gpu_OnSetConstants(MaterialRendererServices services, int userData)
 		{
 			VideoDriver driver = services.VideoDriver;
 
 			// set inverted world matrix
 			// if we are using highlevel shaders (the user can select this when
 			// starting the program), we must set the constants by name
 
 			Matrix invWorld = driver.GetTransform(TransformationState.World);
 			invWorld.MakeInverse();
 
 			if (useHighLevelShaders)
 				services.SetVertexShaderVariable("mInvWorld", invWorld.ToArray());
 			else
 				services.SetVertexShaderRegisters(0, invWorld.ToArray());
 
 			// set clip matrix
 
 			Matrix worldViewProj = driver.GetTransform(TransformationState.Projection);
 			worldViewProj *= driver.GetTransform(TransformationState.View);
 			worldViewProj *= driver.GetTransform(TransformationState.World);
 
 			if (useHighLevelShaders)
 				services.SetVertexShaderVariable("mWorldViewProj", worldViewProj.ToArray());
 			else
 				services.SetVertexShaderRegisters(4, worldViewProj.ToArray());
 
 			// set camera position
 
 			Vector3Df pos = device.SceneManager.ActiveCamera.AbsolutePosition;
 
 			if (useHighLevelShaders)
 				services.SetVertexShaderVariable("mLightPos", pos.ToArray());
 			else
 				services.SetVertexShaderRegisters(8, pos.ToArray());
 
 			// set light color
 
 			Colorf col = new Colorf(0, 1, 1, 0);
 
 			if (useHighLevelShaders)
 				services.SetVertexShaderVariable("mLightColor", col.ToArray());
 			else
 				services.SetVertexShaderRegisters(9, col.ToArray());
 
 			// set transposed world matrix
 
 			Matrix transpWorld = driver.GetTransform(TransformationState.World).Transposed;
 
 			if (useHighLevelShaders)
 			{
 				services.SetVertexShaderVariable("mTransWorld", transpWorld.ToArray());
 
 				if (driver.DriverType == DriverType.OpenGL)
 				{
 					// set texture
 					services.SetPixelShaderVariable("myTexture", new float[1] { 0.0f });
 				}
 			}
 			else
 			{
 				services.SetVertexShaderRegisters(10, transpWorld.ToArray());
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\10.Shaders\Program.cs" startline="290" endline="299"><![CDATA[
 
 		static bool AskUserForCgShaders(DriverType driverType)
 		{
 			if (driverType != DriverType.Direct3D9 &&
 				driverType != DriverType.OpenGL)
 				return false;
 
 			Console.WriteLine("\nPlease press 'y' if you want to use Cg shaders.");
 			return Console.ReadKey().Key == ConsoleKey.Y;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\10.Shaders\Program.cs" startline="300" endline="309"><![CDATA[
 
 		static bool AskUserForHighLevelShaders(DriverType driverType)
 		{
 			if (driverType != DriverType.Direct3D9 &&
 				driverType != DriverType.OpenGL)
 				return false;
 
 			Console.WriteLine("\nPlease press 'y' if you want to use high level shaders.");
 			return Console.ReadKey().Key == ConsoleKey.Y;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\10.Shaders\Program.cs" startline="310" endline="335"><![CDATA[
 
 		static bool AskUserForDriver(out DriverType driverType)
 		{
 			driverType = DriverType.Null;
 
 			Console.Write("Please select the driver you want for this example
 						" (a) OpenGL\n (b) Direct3D 9.0c\n (c) Direct3D 8.1\n" +
 						" (d) Burning's Software Renderer\n (e) Software Renderer\n" +
 						" (f) NullDevice\n (otherKey) exit\n\n");
 
 			ConsoleKeyInfo i = Console.ReadKey();
 
 			switch (i.Key)
 			{
 				case ConsoleKey.A
 				case ConsoleKey.B
 				case ConsoleKey.C
 				case ConsoleKey.D
 				case ConsoleKey.E
 				case ConsoleKey.F
 				default
 					return false;
 			}
 
 			return true;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\10.Shaders\Program.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\10.Shaders\Program.cs" startline="16" endline="18"><![CDATA[
 		static IrrlichtDevice device = null;
 		static bool useHighLevelShaders = false;
 		static bool useCgShaders = false;
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\11.PerPixelLighting\Program.cs" startline="17" endline="205"><![CDATA[
 		{
 			DriverType driverType;
 			if (!AskUserForDriver(out driverType))
 				return;
 
 			IrrlichtDevice device = IrrlichtDevice.CreateDevice(driverType, new Dimension2Di(640, 480));
 			if (device == null)
 				return;
 
 			VideoDriver driver = device.VideoDriver;
 			SceneManager smgr = device.SceneManager;
 			GUIEnvironment env = device.GUIEnvironment;
 
 			driver.SetTextureCreationFlag(TextureCreationFlag.Always32Bit, true);
 
 			// add irrlicht logo
 			env.AddImage(driver.GetTexture("../../media/irrlichtlogoalpha2.tga"), new Vector2Di(10));
 
 			// add camera
 			CameraSceneNode camera = smgr.AddCameraSceneNodeFPS();
 			camera.Position = new Vector3Df(-200, 200, -200);
 
 			// disable mouse cursor
 			device.CursorControl.Visible = false;
 
 			driver.Fog = new Fog(new Color(138, 125, 81, 0), FogType.Linear, 250, 1000, 0.003f, true, false);
 
 			AnimatedMesh roomMesh = smgr.GetMesh("../../media/room.3ds");
 			SceneNode room = null;
 			SceneNode earth = null;
 
 			if (roomMesh != null)
 			{
 				// the room mesh doesn't have proper texture mapping on the floor,
 				// so we can recreate them on runtime
 				smgr.MeshManipulator.MakePlanarTextureMapping(roomMesh.GetMesh(0), 0.003f);
 
 				Texture normalMap = driver.GetTexture("../../media/rockwall_height.bmp");
 				if (normalMap != null)
 					driver.MakeNormalMapTexture(normalMap, 9.0f);
 
 				Mesh tangentMesh = smgr.MeshManipulator.CreateMeshWithTangents(roomMesh.GetMesh(0));
 				room = smgr.AddMeshSceneNode(tangentMesh);
 				room.SetMaterialTexture(0, driver.GetTexture("../../media/rockwall.jpg"));
 				room.SetMaterialTexture(1, normalMap);
 				room.GetMaterial(0).SpecularColor = new Color(0);
 				room.GetMaterial(0).Shininess = 0.0f;
 				room.SetMaterialFlag(MaterialFlag.Fog, true);
 				room.SetMaterialType(MaterialType.ParallaxMapSolid);
 				room.GetMaterial(0).MaterialTypeParam = 1.0f / 64.0f; // adjust height for parallax effect
 
 				tangentMesh.Drop(); // drop mesh because we created it with a "create" call
 			}
 
 			// add earth sphere
 			AnimatedMesh earthMesh = smgr.GetMesh("../../media/earth.x");
 			if (earthMesh != null)
 			{
 				// perform various task with the mesh manipulator
 				MeshManipulator manipulator = smgr.MeshManipulator;
 
 				// create mesh copy with tangent informations from original earth.x mesh
 				Mesh tangentSphereMesh = manipulator.CreateMeshWithTangents(earthMesh.GetMesh(0));
 
 				// set the alpha value of all vertices to 200
 				manipulator.SetVertexColorAlpha(tangentSphereMesh, 200);
 
 				// scale the mesh by factor 50
 				Matrix m = new Matrix();
 				m.Scale = new Vector3Df(50);
 				manipulator.Transform(tangentSphereMesh, m);
 
 				earth = smgr.AddMeshSceneNode(tangentSphereMesh);
 				earth.Position = new Vector3Df(-70, 130, 45);
 
 				// load heightmap, create normal map from it and set it
 				Texture earthNormalMap = driver.GetTexture("../../media/earthbump.jpg");
 				if (earthNormalMap != null)
 				{
 					driver.MakeNormalMapTexture(earthNormalMap, 20);
 					earth.SetMaterialTexture(1, earthNormalMap);
 					earth.SetMaterialType(MaterialType.NormalMapTransparentVertexAlpha);
 				}
 
 				// adjust material settings
 				earth.SetMaterialFlag(MaterialFlag.Fog, true);
 
 				// add rotation animator
 				SceneNodeAnimator anim = smgr.CreateRotationAnimator(new Vector3Df(0, 0.1f, 0));
 				earth.AddAnimator(anim);
 				anim.Drop();
 
 				// drop mesh because we created it with a "create" call.
 				tangentSphereMesh.Drop();
 			}
 
 			// add light 1 (more green)
 			LightSceneNode light1 = smgr.AddLightSceneNode(null, new Vector3Df(), new Colorf(0.5f, 1.0f, 0.5f, 0.0f), 800);
 			if (light1 != null)
 			{
 				light1.DebugDataVisible = DebugSceneType.BBox;
 
 				// add fly circle animator to light
 				SceneNodeAnimator anim = smgr.CreateFlyCircleAnimator(new Vector3Df(50, 300, 0), 190.0f, -0.003f);
 				light1.AddAnimator(anim);
 				anim.Drop();
 
 				// attach billboard to the light
 				BillboardSceneNode bill = smgr.AddBillboardSceneNode(light1, new Dimension2Df(60, 60));
 				bill.SetMaterialFlag(MaterialFlag.Lighting, false);
 				bill.SetMaterialFlag(MaterialFlag.ZWrite, false);
 				bill.SetMaterialType(MaterialType.TransparentAddColor);
 				bill.SetMaterialTexture(0, driver.GetTexture("../../media/particlegreen.jpg"));
 			}
 
 			// add light 2 (red)
 			SceneNode light2 = smgr.AddLightSceneNode(null, new Vector3Df(), new Colorf(1.0f, 0.2f, 0.2f, 0.0f), 800.0f);
 			if (light2 != null)
 			{
 				// add fly circle animator to light
 				SceneNodeAnimator anim = smgr.CreateFlyCircleAnimator(new Vector3Df(0, 150, 0), 200.0f, 0.001f, new Vector3Df(0.2f, 0.9f, 0.0f));
 				light2.AddAnimator(anim);
 				anim.Drop();
 
 				// attach billboard to light
 				SceneNode bill = smgr.AddBillboardSceneNode(light2, new Dimension2Df(120, 120));
 				bill.SetMaterialFlag(MaterialFlag.Lighting, false);
 				bill.SetMaterialFlag(MaterialFlag.ZWrite, false);
 				bill.SetMaterialType(MaterialType.TransparentAddColor);
 				bill.SetMaterialTexture(0, driver.GetTexture("../../media/particlered.bmp"));
 
 				// add particle system
 				ParticleSystemSceneNode ps = smgr.AddParticleSystemSceneNode(false, light2);
 
 				// create and set emitter
 				ParticleEmitter em = ps.CreateBoxEmitter(
 					new AABBox(-3, 0, -3, 3, 1, 3),
 					new Vector3Df(0.0f, 0.03f, 0.0f),
 					80, 100,
 					new Color(255, 255, 255, 10), new Color(255, 255, 255, 10),
 					400, 1100);
 
 				em.MinStartSize = new Dimension2Df(30.0f, 40.0f);
 				em.MaxStartSize = new Dimension2Df(30.0f, 40.0f);
 
 				ps.Emitter = em;
 				em.Drop();
 
 				// create and set affector
 				ParticleAffector paf = ps.CreateFadeOutParticleAffector();
 				ps.AddAffector(paf);
 				paf.Drop();
 
 				// adjust some material settings
 				ps.SetMaterialFlag(MaterialFlag.Lighting, false);
 				ps.SetMaterialFlag(MaterialFlag.ZWrite, false);
 				ps.SetMaterialTexture(0, driver.GetTexture("../../media/fireball.bmp"));
 				ps.SetMaterialType(MaterialType.TransparentAddColor);
 			}
 
 			MyEventReceiver receiver = new MyEventReceiver(device, room, earth);
 
 			int lastFPS = -1;
 
 			while (device.Run())
 			{
 				if (device.WindowActive)
 				{
 					driver.BeginScene(true, true, new Color(0));
 
 					smgr.DrawAll();
 					env.DrawAll();
 
 					driver.EndScene();
 
 					int fps = driver.FPS;
 					if (lastFPS != fps)
 					{
 						device.SetWindowCaption(String.Format(
 							"Per pixel lighting example - Irrlicht Engine [{0}] fps
 							driver.Name, fps));
 
 						lastFPS = fps;
 					}
 				}
 			}
 			while (device.Run())
 			{
 				if (device.WindowActive)
 				{
 					driver.BeginScene(true, true, new Color(0));
 
 					smgr.DrawAll();
 					env.DrawAll();
 
 					driver.EndScene();
 
 					int fps = driver.FPS;
 					if (lastFPS != fps)
 					{
 						device.SetWindowCaption(String.Format(
 							"Per pixel lighting example - Irrlicht Engine [{0}] fps
 							driver.Name, fps));
 
 						lastFPS = fps;
 					}
 				}
 			}
 
 			device.Drop();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\11.PerPixelLighting\Program.cs" startline="206" endline="231"><![CDATA[
 
 		static bool AskUserForDriver(out DriverType driverType)
 		{
 			driverType = DriverType.Null;
 
 			Console.Write("Please select the driver you want for this example
 						" (a) OpenGL\n (b) Direct3D 9.0c\n (c) Direct3D 8.1\n" +
 						" (d) Burning's Software Renderer\n (e) Software Renderer\n" +
 						" (f) NullDevice\n (otherKey) exit\n\n");
 
 			ConsoleKeyInfo i = Console.ReadKey();
 
 			switch (i.Key)
 			{
 				case ConsoleKey.A
 				case ConsoleKey.B
 				case ConsoleKey.C
 				case ConsoleKey.D
 				case ConsoleKey.E
 				case ConsoleKey.F
 				default
 					return false;
 			}
 
 			return true;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\11.PerPixelLighting\Program.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\11.PerPixelLighting\Program.cs" startline="232" endline="275"><![CDATA[
 	}
 
 	class MyEventReceiver
 	{
 		public MyEventReceiver(IrrlichtDevice device, SceneNode room, SceneNode earth)
 		{
 			device.OnEvent += new IrrlichtDevice.EventHandler(device_OnEvent);
 
 			// store pointer to room so we can change its drawing mode
 			this.driver = device.VideoDriver;
 			this.room = room;
 			this.earth = earth;
 
 			GUIEnvironment env = device.GUIEnvironment;
 
 			// set a nicer font
 			GUIFont font = env.GetFont("../../media/fonthaettenschweiler.bmp");
 			if (font != null)
 				env.Skin.SetFont(font);
 
 			// add window and listbox
 			GUIWindow window = env.AddWindow(new Recti(460, 375, 630, 470), false, "Use 'E' + 'R' to change");
 
 			this.listBox = env.AddListBox(new Recti(2, 22, 165, 88), window);
 			this.listBox.AddItem("Diffuse");
 			this.listBox.AddItem("Bump mapping");
 			this.listBox.AddItem("Parallax mapping");
 			this.listBox.SelectedIndex = 1;
 
 			// create problem text
 			this.problemText = env.AddStaticText(
 				"Your hardware or this renderer is not able to use the needed shaders for this material. Using fall back materials.",
 				new Recti(150, 20, 470, 80));
 
 			this.problemText.OverrideColor = new Color(255, 255, 255, 100);
 
 			// set start material (prefer parallax mapping if available)
 			MaterialRenderer renderer = this.driver.GetMaterialRenderer(MaterialType.ParallaxMapSolid);
 			if (renderer != null && renderer.Capability == 0)
 				this.listBox.SelectedIndex = 2;
 
 			// set the material which is selected in the listbox
 			setMaterial();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\11.PerPixelLighting\Program.cs" startline="276" endline="302"><![CDATA[
 
 		bool device_OnEvent(Event e)
 		{
 			// check if user presses the key 'E' or 'R'
 			if (e.Type == EventType.Key && !e.Key.PressedDown &&
 				this.room != null && this.listBox != null)
 			{
 				// change selected item in listbox
 
 				int sel = this.listBox.SelectedIndex;
 				if (e.Key.Key == KeyCode.KeyR)
 					++sel;
 				else if (e.Key.Key == KeyCode.KeyE)
 					--sel;
 				else
 					return false;
 
 				if (sel > 2) sel = 0;
 				if (sel < 0) sel = 2;
 				this.listBox.SelectedIndex = sel;
 
 				// set the material which is selected in the listbox
 				setMaterial();
 			}
 
 			return false;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\11.PerPixelLighting\Program.cs" startline="303" endline="339"><![CDATA[
 
 		private void setMaterial()
 		{
 			MaterialType roomMat = MaterialType.Solid;
 			MaterialType earthMat = MaterialType.Solid;
 
 			// change material setting
 			switch (this.listBox.SelectedIndex)
 			{
 				case 0
 					roomMat = MaterialType.Solid;
 					earthMat = MaterialType.TransparentVertexAlpha;
 					break;
 
 				case 1
 					roomMat = MaterialType.NormalMapSolid;
 					earthMat = MaterialType.NormalMapTransparentVertexAlpha;
 					break;
 
 				case 2
 					roomMat = MaterialType.ParallaxMapSolid;
 					earthMat = MaterialType.ParallaxMapTransparentVertexAlpha;
 					break;
 			}
 
 			this.room.SetMaterialType(roomMat);
 			this.earth.SetMaterialType(earthMat);
 
 			// display some problem text when problem
 			MaterialRenderer roomRenderer = this.driver.GetMaterialRenderer(roomMat);
 			MaterialRenderer earthRenderer = this.driver.GetMaterialRenderer(earthMat);
 			this.problemText.Visible =
 				roomRenderer == null ||
 				roomRenderer.Capability != 0 ||
 				earthRenderer == null ||
 				earthRenderer.Capability != 0;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\12.TerrainRendering\Program.cs" startline="17" endline="135"><![CDATA[
 		{
 			DriverType driverType;
 			if (!AskUserForDriver(out driverType))
 				return;
 
 			IrrlichtDevice device = IrrlichtDevice.CreateDevice(driverType, new Dimension2Di(640, 480));
 			if (device == null)
 				return;
 
 			VideoDriver driver = device.VideoDriver;
 			SceneManager smgr = device.SceneManager;
 			GUIEnvironment env = device.GUIEnvironment;
 
 			driver.SetTextureCreationFlag(TextureCreationFlag.Always32Bit, true);
 
 			// add irrlicht logo
 			env.AddImage(driver.GetTexture("../../media/irrlichtlogoalpha2.tga"), new Vector2Di(10));
 
 			// set gui font
 			env.Skin.SetFont(env.GetFont("../../media/fontlucida.png"));
 
 			// add some help text
 			env.AddStaticText(
 				"Press 'W' to change wireframe mode\nPress 'D' to toggle detail map\nPress 'S' to toggle skybox/skydome",
 				new Recti(10, 421, 250, 475), true, true, null, -1, true);
 
 			// add camera
 			CameraSceneNode camera = smgr.AddCameraSceneNodeFPS(null, 100.0f, 1.2f);
 			camera.Position = new Vector3Df(2700 * 2, 255 * 2, 2600 * 2);
 			camera.Target = new Vector3Df(2397 * 2, 343 * 2, 2700 * 2);
 			camera.FarValue = 42000.0f;
 
 			// disable mouse cursor
 			device.CursorControl.Visible = false;
 
 			// add terrain scene node
 			TerrainSceneNode terrain = smgr.AddTerrainSceneNode(
 				"../../media/terrain-heightmap.bmp",	// heightmap
 				null,								// parent node
 				-1,									// node id
 				new Vector3Df(),					// position
 				new Vector3Df(),					// rotation
 				new Vector3Df(40, 4.4f, 40),		// scale
 				new Color(255, 255, 255),			// vertex color
 				5,									// max LOD
 				TerrainPatchSize._17,				// patch size
 				4);									// smooth factor
 
 			terrain.SetMaterialFlag(MaterialFlag.Lighting, false);
 			terrain.SetMaterialTexture(0, driver.GetTexture("../../media/terrain-texture.jpg"));
 			terrain.SetMaterialTexture(1, driver.GetTexture("../../media/detailmap3.jpg"));
 			terrain.SetMaterialType(MaterialType.DetailMap);
 
 			terrain.ScaleTexture(1, 20);
 
 			// create triangle selector for the terrain
 			TriangleSelector selector = smgr.CreateTerrainTriangleSelector(terrain, 0);
 			terrain.TriangleSelector = selector;
 
 			// create collision response animator and attach it to the camera
 			SceneNodeAnimator anim = smgr.CreateCollisionResponseAnimator(
 				selector, camera,
 				new Vector3Df(60, 100, 60),
 				new Vector3Df(0, 0, 0),
 				new Vector3Df(0, 50, 0));
 
 			selector.Drop();
 			camera.AddAnimator(anim);
 			anim.Drop();
 
 			// create skybox and skydome
 			driver.SetTextureCreationFlag(TextureCreationFlag.CreateMipMaps, false);
 
 			SceneNode skybox = smgr.AddSkyBoxSceneNode(
 				"../../media/irrlicht2_up.jpg",
 				"../../media/irrlicht2_dn.jpg",
 				"../../media/irrlicht2_lf.jpg",
 				"../../media/irrlicht2_rt.jpg",
 				"../../media/irrlicht2_ft.jpg",
 				"../../media/irrlicht2_bk.jpg");
 
 			SceneNode skydome = smgr.AddSkyDomeSceneNode(driver.GetTexture("../../media/skydome.jpg"), 16, 8, 0.95f, 2);
 
 			driver.SetTextureCreationFlag(TextureCreationFlag.CreateMipMaps, true);
 
 			// create event receiver
 			new MyEventReceiver(device, terrain, skybox, skydome);
 
 			int lastFPS = -1;
 
 			while (device.Run())
 			{
 				if (device.WindowActive)
 				{
 					driver.BeginScene(true, true, new Color(0));
 
 					smgr.DrawAll();
 					env.DrawAll();
 
 					driver.EndScene();
 
 					// display frames per second in window title
 					int fps = driver.FPS;
 					if (lastFPS != fps)
 					{
 						// also print terrain height of current camera position
 						// we can use camera position because terrain is located at coordinate origin
 
 						device.SetWindowCaption(String.Format(
 							"Terrain rendering example - Irrlicht Engine [{0}] fps
 							driver.Name, fps, terrain.GetHeight(camera.AbsolutePosition.X, camera.AbsolutePosition.Z)));
 
 						lastFPS = fps;
 					}
 				}
 			}
 			while (device.Run())
 			{
 				if (device.WindowActive)
 				{
 					driver.BeginScene(true, true, new Color(0));
 
 					smgr.DrawAll();
 					env.DrawAll();
 
 					driver.EndScene();
 
 					// display frames per second in window title
 					int fps = driver.FPS;
 					if (lastFPS != fps)
 					{
 						// also print terrain height of current camera position
 						// we can use camera position because terrain is located at coordinate origin
 
 						device.SetWindowCaption(String.Format(
 							"Terrain rendering example - Irrlicht Engine [{0}] fps
 							driver.Name, fps, terrain.GetHeight(camera.AbsolutePosition.X, camera.AbsolutePosition.Z)));
 
 						lastFPS = fps;
 					}
 				}
 			}
 
 			device.Drop();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\12.TerrainRendering\Program.cs" startline="136" endline="161"><![CDATA[
 
 		static bool AskUserForDriver(out DriverType driverType)
 		{
 			driverType = DriverType.Null;
 
 			Console.Write("Please select the driver you want for this example
 						" (a) OpenGL\n (b) Direct3D 9.0c\n (c) Direct3D 8.1\n" +
 						" (d) Burning's Software Renderer\n (e) Software Renderer\n" +
 						" (f) NullDevice\n (otherKey) exit\n\n");
 
 			ConsoleKeyInfo i = Console.ReadKey();
 
 			switch (i.Key)
 			{
 				case ConsoleKey.A
 				case ConsoleKey.B
 				case ConsoleKey.C
 				case ConsoleKey.D
 				case ConsoleKey.E
 				case ConsoleKey.F
 				default
 					return false;
 			}
 
 			return true;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\12.TerrainRendering\Program.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\12.TerrainRendering\Program.cs" startline="162" endline="178"><![CDATA[
 	}
 
 	class MyEventReceiver
 	{
 		public MyEventReceiver(IrrlichtDevice device, SceneNode terrain, SceneNode skybox, SceneNode skydome)
 		{
 			this.terrain = terrain;
 			this.skybox = skybox;
 			this.skydome = skydome;
 			showBox = true;
 			showDebug = false;
 
 			skybox.Visible = true;
 			skydome.Visible = false;
 
 			device.OnEvent += new IrrlichtDevice.EventHandler(device_OnEvent);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\12.TerrainRendering\Program.cs" startline="179" endline="216"><![CDATA[
 
 		bool device_OnEvent(Event e)
 		{
 			// check if user presses the key 'W', 'P', 'D', 'S' or 'X'
 			if (e.Type == EventType.Key && e.Key.PressedDown)
 			{
 				switch (e.Key.Key)
 				{
 					case KeyCode.KeyW
 						terrain.SetMaterialFlag(MaterialFlag.Wireframe, !terrain.GetMaterial(0).Wireframe);
 						terrain.SetMaterialFlag(MaterialFlag.PointCloud, false);
 						return true;
 
 					case KeyCode.KeyP
 						terrain.SetMaterialFlag(MaterialFlag.PointCloud, !terrain.GetMaterial(0).PointCloud);
 						terrain.SetMaterialFlag(MaterialFlag.Wireframe, false);
 						return true;
 
 					case KeyCode.KeyD
 						terrain.SetMaterialType(terrain.GetMaterial(0).Type == MaterialType.Solid ?
 							MaterialType.DetailMap 
 						return true;
 
 					case KeyCode.KeyS
 						showBox = !showBox;
 						skybox.Visible = showBox;
 						skydome.Visible = !showBox;
 						return true;
 
 					case KeyCode.KeyX
 						showDebug = !showDebug;
 						terrain.DebugDataVisible = showDebug ? DebugSceneType.BBoxAll 
 						return true;
 				}
 			}
 
 			return false;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\13.RenderToTexture\Program.cs" startline="17" endline="143"><![CDATA[
 		{
 			DriverType driverType;
 			if (!AskUserForDriver(out driverType))
 				return;
 
 			IrrlichtDevice device = IrrlichtDevice.CreateDevice(driverType, new Dimension2Di(640, 480));
 			if (device == null)
 				return;
 
 			VideoDriver driver = device.VideoDriver;
 			SceneManager smgr = device.SceneManager;
 			GUIEnvironment env = device.GUIEnvironment;
 
 			// load and display animated fairy mesh
 			AnimatedMeshSceneNode fairy = smgr.AddAnimatedMeshSceneNode(smgr.GetMesh("../../media/faerie.md2"));
 			if (fairy != null)
 			{
 				fairy.SetMaterialTexture(0, driver.GetTexture("../../media/faerie2.bmp")); // set diffuse texture
 				fairy.SetMaterialFlag(MaterialFlag.Lighting, true); // enable dynamic lighting
 				fairy.GetMaterial(0).Shininess = 20.0f; // set size of specular highlights
 				fairy.Position = new Vector3Df(-10, 0, -100);
 				fairy.SetMD2Animation(AnimationTypeMD2.Stand);
 			}
 
 			// add white light
 			smgr.AddLightSceneNode(null, new Vector3Df(-15, 5, -105), new Colorf(1, 1, 1));
 
 			// set ambient light
 			smgr.AmbientLight = new Colorf(0.25f, 0.25f, 0.25f);
 
 			// add fps camera
 			CameraSceneNode fpsCamera = smgr.AddCameraSceneNodeFPS();
 			fpsCamera.Position = new Vector3Df(-50, 50, -150);
 
 			// disable mouse cursor
 			device.CursorControl.Visible = false;
 
 			// create test cube
 			SceneNode test = smgr.AddCubeSceneNode(60);
 
 			// let the cube rotate and set some light settings
 			SceneNodeAnimator anim = smgr.CreateRotationAnimator(new Vector3Df(0.3f, 0.3f, 0));
 
 			test.Position = new Vector3Df(-100, 0, -100);
 			test.SetMaterialFlag(MaterialFlag.Lighting, false); // disable dynamic lighting
 			test.AddAnimator(anim);
 			anim.Drop();
 
 			// create render target
 			Texture rt = null;
 			CameraSceneNode fixedCam = null;
 
 			if (driver.QueryFeature(VideoDriverFeature.RenderToTarget))
 			{
 				rt = driver.AddRenderTargetTexture(new Dimension2Di(256), "RTT1");
 				test.SetMaterialTexture(0, rt); // set material of cube to render target
 
 				// add fixed camera
 				fixedCam = smgr.AddCameraSceneNode(null, new Vector3Df(10, 10, -80), new Vector3Df(-10, 10, -100));
 			}
 			else
 			{
 				// create problem text
 				GUIFont font = env.GetFont("../../media/fonthaettenschweiler.bmp");
 				if (font != null)
 					env.Skin.SetFont(font);
 
 				GUIStaticText text = env.AddStaticText(
 					"Your hardware or this renderer is not able to use the " +
 					"render to texture feature. RTT Disabled.",
 					new Recti(150, 20, 470, 60));
 
 				text.OverrideColor = new Color(255, 255, 255, 100);
 			}
 
 			int lastFPS = -1;
 
 			while (device.Run())
 			{
 				if (device.WindowActive)
 				{
 					driver.BeginScene(true, true, new Color(0));
 
 					if (rt != null)
 					{
 						// draw scene into render target
 
 						// set render target texture
 						driver.SetRenderTarget(rt, true, true, new Color(0, 0, 255));
 
 						// make cube invisible and set fixed camera as active camera
 						test.Visible = false;
 						smgr.ActiveCamera = fixedCam;
 
 						// draw whole scene into render buffer
 						smgr.DrawAll();
 
 						// set back old render target
 						// The buffer might have been distorted, so clear it
 						driver.SetRenderTarget(null, true, true, new Color(0));
 
 						// make the cube visible and set the user controlled camera as active one
 						test.Visible = true;
 						smgr.ActiveCamera = fpsCamera;
 					}
 
 					// draw scene normally
 					smgr.DrawAll();
 					env.DrawAll();
 
 					driver.EndScene();
 
 					// display frames per second in window title
 					int fps = driver.FPS;
 					if (lastFPS != fps)
 					{
 						device.SetWindowCaption(String.Format(
 							"Render to Texture and Specular Highlights example - Irrlicht Engine [{0}] fps
 							driver.Name, fps));
 
 						lastFPS = fps;
 					}
 				}
 			}
 			while (device.Run())
 			{
 				if (device.WindowActive)
 				{
 					driver.BeginScene(true, true, new Color(0));
 
 					if (rt != null)
 					{
 						// draw scene into render target
 
 						// set render target texture
 						driver.SetRenderTarget(rt, true, true, new Color(0, 0, 255));
 
 						// make cube invisible and set fixed camera as active camera
 						test.Visible = false;
 						smgr.ActiveCamera = fixedCam;
 
 						// draw whole scene into render buffer
 						smgr.DrawAll();
 
 						// set back old render target
 						// The buffer might have been distorted, so clear it
 						driver.SetRenderTarget(null, true, true, new Color(0));
 
 						// make the cube visible and set the user controlled camera as active one
 						test.Visible = true;
 						smgr.ActiveCamera = fpsCamera;
 					}
 
 					// draw scene normally
 					smgr.DrawAll();
 					env.DrawAll();
 
 					driver.EndScene();
 
 					// display frames per second in window title
 					int fps = driver.FPS;
 					if (lastFPS != fps)
 					{
 						device.SetWindowCaption(String.Format(
 							"Render to Texture and Specular Highlights example - Irrlicht Engine [{0}] fps
 							driver.Name, fps));
 
 						lastFPS = fps;
 					}
 				}
 			}
 
 			device.Drop();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\13.RenderToTexture\Program.cs" startline="144" endline="169"><![CDATA[
 
 		static bool AskUserForDriver(out DriverType driverType)
 		{
 			driverType = DriverType.Null;
 
 			Console.Write("Please select the driver you want for this example
 						" (a) OpenGL\n (b) Direct3D 9.0c\n (c) Direct3D 8.1\n" +
 						" (d) Burning's Software Renderer\n (e) Software Renderer\n" +
 						" (f) NullDevice\n (otherKey) exit\n\n");
 
 			ConsoleKeyInfo i = Console.ReadKey();
 
 			switch (i.Key)
 			{
 				case ConsoleKey.A
 				case ConsoleKey.B
 				case ConsoleKey.C
 				case ConsoleKey.D
 				case ConsoleKey.E
 				case ConsoleKey.F
 				default
 					return false;
 			}
 
 			return true;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\13.RenderToTexture\Program.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\15.LoadIrrFile\Program.cs" startline="16" endline="115"><![CDATA[
 		{
 			DriverType driverType;
 			if (!AskUserForDriver(out driverType))
 				return;
 
 			IrrlichtDevice device = IrrlichtDevice.CreateDevice(driverType, new Dimension2Di(640, 480));
 			if (device == null)
 				return;
 
 			VideoDriver driver = device.VideoDriver;
 			SceneManager smgr = device.SceneManager;
 
 			// load the scene
 			if (args.Length > 0)
 				smgr.LoadScene(args[0]);
 			else
 				smgr.LoadScene("../../media/example.irr");
 
 			CameraSceneNode camera = smgr.AddCameraSceneNodeFPS(null, 50, 0.1f);
 
 			// create a meta triangle selector to hold several triangle selectors
 			MetaTriangleSelector meta = smgr.CreateMetaTriangleSelector();
 
 			List<SceneNode> nodes = smgr.GetSceneNodesFromType(SceneNodeType.Any); // find all nodes
 			foreach (SceneNode n in nodes)
 			{
 				TriangleSelector selector = null;
 
 				switch (n.Type)
 				{
 					case SceneNodeType.Cube
 					case SceneNodeType.AnimatedMesh
 						// because the selector won't animate with the mesh,
 						// and is only being used for camera collision, we'll just use an approximate
 						// bounding box instead of "(node as AnimatedMeshSceneNode).GetMesh(0)"
 						selector = smgr.CreateTriangleSelectorFromBoundingBox(n);
 						break;
 
 					case SceneNodeType.Mesh
 					case SceneNodeType.Sphere
 						// derived from MeshSceneNode
 						selector = smgr.CreateTriangleSelector((n as MeshSceneNode).Mesh, n);
 						break;
 
 					case SceneNodeType.Terrain
 						selector = smgr.CreateTerrainTriangleSelector(n as TerrainSceneNode);
 						break;
 
 					case SceneNodeType.Octree
 						selector = smgr.CreateOctreeTriangleSelector((n as MeshSceneNode).Mesh, n);
 						break;
 				}
 
 				if (selector != null)
 				{
 					// add it to the meta selector, which will take a reference to it
 					meta.AddTriangleSelector(selector);
 					// and drop my reference to it, so that the meta selector owns it
 					selector.Drop();
 				}
 			}
 			foreach (SceneNode n in nodes)
 			{
 				TriangleSelector selector = null;
 
 				switch (n.Type)
 				{
 					case SceneNodeType.Cube
 					case SceneNodeType.AnimatedMesh
 						// because the selector won't animate with the mesh,
 						// and is only being used for camera collision, we'll just use an approximate
 						// bounding box instead of "(node as AnimatedMeshSceneNode).GetMesh(0)"
 						selector = smgr.CreateTriangleSelectorFromBoundingBox(n);
 						break;
 
 					case SceneNodeType.Mesh
 					case SceneNodeType.Sphere
 						// derived from MeshSceneNode
 						selector = smgr.CreateTriangleSelector((n as MeshSceneNode).Mesh, n);
 						break;
 
 					case SceneNodeType.Terrain
 						selector = smgr.CreateTerrainTriangleSelector(n as TerrainSceneNode);
 						break;
 
 					case SceneNodeType.Octree
 						selector = smgr.CreateOctreeTriangleSelector((n as MeshSceneNode).Mesh, n);
 						break;
 				}
 
 				if (selector != null)
 				{
 					// add it to the meta selector, which will take a reference to it
 					meta.AddTriangleSelector(selector);
 					// and drop my reference to it, so that the meta selector owns it
 					selector.Drop();
 				}
 			}
 
 			SceneNodeAnimator anim = smgr.CreateCollisionResponseAnimator(meta, camera, new Vector3Df(5), new Vector3Df(0));
 			meta.Drop(); // i'm done with the meta selector now
 
 			camera.AddAnimator(anim);
 			anim.Drop(); // i'm done with the animator now
 
 			// and set the camera position so that it doesn't start off stuck in the geometry
 			camera.Position = new Vector3Df(0, 20, 0);
 
 			// point the camera at the cube node, by finding the first node of type SceneNodeType.Cube
 			SceneNode cube = smgr.GetSceneNodeFromType(SceneNodeType.Cube);
 			if (cube != null)
 				camera.Target = cube.AbsolutePosition;
 
 			int lastFPS = -1;
 
 			while (device.Run())
 			{
 				if (device.WindowActive)
 				{
 					driver.BeginScene(true, true, new Color(200, 200, 200));
 					smgr.DrawAll();
 					driver.EndScene();
 
 					int fps = driver.FPS;
 					if (lastFPS != fps)
 					{
 						device.SetWindowCaption(String.Format(
 							"Load Irrlicht File example - Irrlicht Engine [{0}] fps
 							driver.Name, fps));
 
 						lastFPS = fps;
 					}
 				}
 			}
 			while (device.Run())
 			{
 				if (device.WindowActive)
 				{
 					driver.BeginScene(true, true, new Color(200, 200, 200));
 					smgr.DrawAll();
 					driver.EndScene();
 
 					int fps = driver.FPS;
 					if (lastFPS != fps)
 					{
 						device.SetWindowCaption(String.Format(
 							"Load Irrlicht File example - Irrlicht Engine [{0}] fps
 							driver.Name, fps));
 
 						lastFPS = fps;
 					}
 				}
 			}
 
 			device.Drop();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\15.LoadIrrFile\Program.cs" startline="116" endline="141"><![CDATA[
 
 		static bool AskUserForDriver(out DriverType driverType)
 		{
 			driverType = DriverType.Null;
 
 			Console.Write("Please select the driver you want for this example
 						" (a) OpenGL\n (b) Direct3D 9.0c\n (c) Direct3D 8.1\n" +
 						" (d) Burning's Software Renderer\n (e) Software Renderer\n" +
 						" (f) NullDevice\n (otherKey) exit\n\n");
 
 			ConsoleKeyInfo i = Console.ReadKey();
 
 			switch (i.Key)
 			{
 				case ConsoleKey.A
 				case ConsoleKey.B
 				case ConsoleKey.C
 				case ConsoleKey.D
 				case ConsoleKey.E
 				case ConsoleKey.F
 				default
 					return false;
 			}
 
 			return true;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\15.LoadIrrFile\Program.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\18.SplitScreen\Program.cs" startline="27" endline="116"><![CDATA[
 		{
 			DriverType driverType;
 			if (!AskUserForDriver(out driverType))
 				return;
 
 			IrrlichtDevice device = IrrlichtDevice.CreateDevice(driverType, new Dimension2Di(ResX, ResY), 32, fullScreen);
 			if (device == null)
 				return;
 
 			device.OnEvent += new IrrlichtDevice.EventHandler(device_OnEvent);
 			VideoDriver driver = device.VideoDriver;
 			SceneManager smgr = device.SceneManager;
 
 			// load model
 			AnimatedMesh model = smgr.GetMesh("../../media/sydney.md2");
 			if (model == null)
 				return;
 
 			AnimatedMeshSceneNode model_node = smgr.AddAnimatedMeshSceneNode(model);
 
 			// load texture
 			if (model_node != null)
 			{
 				Texture texture = driver.GetTexture("../../media/sydney.bmp");
 				model_node.SetMaterialTexture(0, texture);
 				model_node.SetMD2Animation(AnimationTypeMD2.Run);
 				model_node.SetMaterialFlag(MaterialFlag.Lighting, false);
 			}
 
 			// load map
 			device.FileSystem.AddFileArchive("../../media/map-20kdm2.pk3");
 			AnimatedMesh map = smgr.GetMesh("20kdm2.bsp");
 			if (map != null)
 			{
 				SceneNode map_node = smgr.AddOctreeSceneNode(map.GetMesh(0));
 				map_node.Position = new Vector3Df(-850, -220, -850);
 			}
 
 			// create 3 fixed and one user-controlled cameras
 			camera[0] = smgr.AddCameraSceneNode(null, new Vector3Df(50, 0, 0), new Vector3Df(0)); // font
 			camera[1] = smgr.AddCameraSceneNode(null, new Vector3Df(0, 50, 0), new Vector3Df(0)); // top
 			camera[2] = smgr.AddCameraSceneNode(null, new Vector3Df(0, 0, 50), new Vector3Df(0)); // left
 			camera[3] = smgr.AddCameraSceneNodeFPS(); // user-controlled
 			camera[3].Position = new Vector3Df(-50, 0, -50);
 
 			device.CursorControl.Visible = false;
 
 			int lastFPS = -1;
 
 			while (device.Run())
 			{
 				// set the viewpoint to the whole screen and begin scene
 				driver.ViewPort = new Recti(0, 0, ResX, ResY);
 				driver.BeginScene(true, true, new Color(100, 100, 100));
 
 				if (splitScreen)
 				{
 					smgr.ActiveCamera = camera[0];
 					driver.ViewPort = new Recti(0, 0, ResX / 2, ResY / 2); // top left
 					smgr.DrawAll();
 
 					smgr.ActiveCamera = camera[1];
 					driver.ViewPort = new Recti(ResX / 2, 0, ResX, ResY / 2); // top right
 					smgr.DrawAll();
 
 					smgr.ActiveCamera = camera[2];
 					driver.ViewPort = new Recti(0, ResY / 2, ResX / 2, ResY); // bottom left
 					smgr.DrawAll();
 
 					driver.ViewPort = new Recti(ResX / 2, ResY / 2, ResX, ResY); // bottom right
 				}
 
 				smgr.ActiveCamera = camera[3];
 				smgr.DrawAll();
 
 				driver.EndScene();
 
 				int fps = driver.FPS;
 				if (lastFPS != fps)
 				{
 					device.SetWindowCaption(String.Format(
 						"Split Screen example - Irrlicht Engine [{0}] fps
 						driver.Name, fps));
 
 					lastFPS = fps;
 				}
 			}
 			while (device.Run())
 			{
 				// set the viewpoint to the whole screen and begin scene
 				driver.ViewPort = new Recti(0, 0, ResX, ResY);
 				driver.BeginScene(true, true, new Color(100, 100, 100));
 
 				if (splitScreen)
 				{
 					smgr.ActiveCamera = camera[0];
 					driver.ViewPort = new Recti(0, 0, ResX / 2, ResY / 2); // top left
 					smgr.DrawAll();
 
 					smgr.ActiveCamera = camera[1];
 					driver.ViewPort = new Recti(ResX / 2, 0, ResX, ResY / 2); // top right
 					smgr.DrawAll();
 
 					smgr.ActiveCamera = camera[2];
 					driver.ViewPort = new Recti(0, ResY / 2, ResX / 2, ResY); // bottom left
 					smgr.DrawAll();
 
 					driver.ViewPort = new Recti(ResX / 2, ResY / 2, ResX, ResY); // bottom right
 				}
 
 				smgr.ActiveCamera = camera[3];
 				smgr.DrawAll();
 
 				driver.EndScene();
 
 				int fps = driver.FPS;
 				if (lastFPS != fps)
 				{
 					device.SetWindowCaption(String.Format(
 						"Split Screen example - Irrlicht Engine [{0}] fps
 						driver.Name, fps));
 
 					lastFPS = fps;
 				}
 			}
 
 			device.Drop();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\18.SplitScreen\Program.cs" startline="117" endline="130"><![CDATA[
 
 		static bool device_OnEvent(Event e)
 		{
 			// key S enables/disables split screen
 			if (e.Type == EventType.Key &&
 				e.Key.Key == KeyCode.KeyS &&
 				e.Key.PressedDown)
 			{
 				splitScreen = !splitScreen;
 				return true;
 			}
 
 			return false;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\18.SplitScreen\Program.cs" startline="131" endline="156"><![CDATA[
 
 		static bool AskUserForDriver(out DriverType driverType)
 		{
 			driverType = DriverType.Null;
 
 			Console.Write("Please select the driver you want for this example
 						" (a) OpenGL\n (b) Direct3D 9.0c\n (c) Direct3D 8.1\n" +
 						" (d) Burning's Software Renderer\n (e) Software Renderer\n" +
 						" (f) NullDevice\n (otherKey) exit\n\n");
 
 			ConsoleKeyInfo i = Console.ReadKey();
 
 			switch (i.Key)
 			{
 				case ConsoleKey.A
 				case ConsoleKey.B
 				case ConsoleKey.C
 				case ConsoleKey.D
 				case ConsoleKey.E
 				case ConsoleKey.F
 				default
 					return false;
 			}
 
 			return true;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\18.SplitScreen\Program.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\18.SplitScreen\Program.cs" startline="16" endline="24"><![CDATA[
 		static int ResX = 800;
 		static int ResY = 600;
 		static bool fullScreen = false;
 
 		// use split screen ?
 		static bool splitScreen = true;
 
 		// cameras
 		static CameraSceneNode[] camera = new CameraSceneNode[4] { null, null, null, null };
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\19.MouseAndJoystick\Program.cs" startline="16" endline="174"><![CDATA[
 		{
 			// Initialize device.
 			
 			DriverType driverType;
 			if (!AskUserForDriver(out driverType))
 				return;
 
 			IrrlichtDevice device = IrrlichtDevice.CreateDevice(driverType, new Dimension2Di(640, 480));
 			if (device == null)
 				return;
 
 			// Add event handling.
 
 			device.OnEvent += new IrrlichtDevice.EventHandler(device_OnEvent);
 
 			// Save important pointers.
 
 			VideoDriver driver = device.VideoDriver;
 			SceneManager smgr = device.SceneManager;
 			Logger logger = device.Logger;
 
 			// Initialize joysticks and print info about them.
 
 			List<JoystickInfo> joystickList = device.ActivateJoysticks();
 			if (joystickList != null)
 			{
 				logger.Log("Joystick support is enabled and " + joystickList.Count.ToString() + " joystick(s) are present.");
 
 				foreach (JoystickInfo j in joystickList)
 				{
 					logger.Log("Joystick " + j.Joystick.ToString() + "
 					logger.Log("\tName
 					logger.Log("\tAxisCount
 					logger.Log("\tButtonCount
 					logger.Log("\tPovHat
 				}
 				foreach (JoystickInfo j in joystickList)
 				{
 					logger.Log("Joystick " + j.Joystick.ToString() + "
 					logger.Log("\tName
 					logger.Log("\tAxisCount
 					logger.Log("\tButtonCount
 					logger.Log("\tPovHat
 				}
 			}
 			else
 			{
 				logger.Log("Joystick support is not enabled.");
 			}
 
 			device.SetWindowCaption("Mouse and joystick - Irrlicht Lime - " + joystickList.Count.ToString() + " joystick(s)");
 
 			// Create an arrow mesh and move it around either with the joystick axis/hat,
 			// or make it follow the mouse pointer (when no joystick movement).
 
 			SceneNode node = smgr.AddMeshSceneNode(
 				smgr.AddArrowMesh(
 					"Arrow",
 					new Color(255, 0, 0),
 					new Color(0, 255, 0),
 					16, 16,
 					2.0f, 1.3f,
 					0.1f, 0.6f
 				)
 			);
 
 			node.SetMaterialFlag(MaterialFlag.Lighting, false);
 
 			CameraSceneNode camera = smgr.AddCameraSceneNode();
 			camera.Position = new Vector3Df(0, 0, -10);
 
 			// As in example #4, we'll use framerate independent movement.
 			uint then = device.Timer.Time;
 			const float MovementSpeed = 5.0f;
 
 			// Run main cycle.
 
 			while (device.Run())
 			{
 				// Work out a frame delta time.
 				uint now = device.Timer.Time;
 				float frameDeltaTime = (float)(now - then) / 1000.0f; // in seconds
 				then = now;
 
 				bool movedWithJoystick = false;
 				Vector3Df nodePosition = node.Position;
 
 				if (joystickList.Count > 0)
 				{
 					float moveHorizontal = 0.0f; // range is -1.0 for full left to +1.0 for full right
 					float moveVertical = 0.0f; // range is -1.0 for full down to +1.0 for full up
 
 					// We receive the full analog range of the axes, and so have to implement our own dead zone.
 					// This is an empirical value, since some joysticks have more jitter or creep around the center
 					// point than others. We'll use 5% of the range as the dead zone, but generally you would want
 					// to give the user the option to change this.
 					float DeadZone = 0.05f;
 
 					moveHorizontal = joystickState.Axis[0] / 32767.0f; // "0" for X axis
 					if (Math.Abs(moveHorizontal) < DeadZone)
 						moveHorizontal = 0.0f;
 
 					moveVertical = joystickState.Axis[1] / -32767.0f; // "1" for Y axis
 					if (Math.Abs(moveVertical) < DeadZone)
 						moveVertical = 0.0f;
 
 					// POV will contain 65535 if POV hat info no0t supported, so we can check its range.
 					ushort povDegrees = (ushort)(joystickState.POV / 100);
 					if (povDegrees < 360)
 					{
 						if (povDegrees > 0 && povDegrees < 180)
 							moveHorizontal = +1.0f;
 						else if (povDegrees > 180)
 							moveHorizontal = -1.0f;
 
 						if (povDegrees > 90 && povDegrees < 270)
 							moveVertical = -1.0f;
 						else if (povDegrees > 270 || povDegrees < 90)
 							moveVertical = +1.0f;
 					}
 
 					// If we have any movement, apply it.
 					if (Math.Abs(moveHorizontal) > 0.0001f || Math.Abs(moveVertical) > 0.0001f)
 					{
 						float m = frameDeltaTime * MovementSpeed;
 						nodePosition = new Vector3Df(moveHorizontal * m, moveVertical * m, nodePosition.Z);
 						movedWithJoystick = true;
 					}
 				}
 
 				// If the arrow node isn't being moved with the joystick, then have it follow the mouse cursor.
 				if (!movedWithJoystick)
 				{
 					// Create a ray through the mouse cursor.
 					Line3Df ray = smgr.SceneCollisionManager.GetRayFromScreenCoordinates(mouseState.Position, camera);
 
 					// And intersect the ray with a plane around the node facing towards the camera.
 					Plane3Df plane = new Plane3Df(nodePosition, new Vector3Df(0, 0, -1));
 					Vector3Df mousePosition;
 					if (plane.GetIntersectionWithLine(ray.Start, ray.Vector, out mousePosition))
 					{
 						// We now have a mouse position in 3d space; move towards it.
 						Vector3Df toMousePosition = mousePosition - nodePosition;
 						float availableMovement = frameDeltaTime * MovementSpeed;
 
 						if (toMousePosition.Length <= availableMovement)
 							nodePosition = mousePosition; // jump to the final position
 						else
 							nodePosition += toMousePosition.Normalize() * availableMovement; // move towards it
 					}
 				}
 
 				node.Position = nodePosition;
 
 				// Turn lighting on and off depending on whether the left mouse button is down.
 				node.SetMaterialFlag(MaterialFlag.Lighting, mouseState.IsLeftButtonDown);
 
 				// Draw all.
 				driver.BeginScene(true, true, new Color(113, 113, 133));
 				smgr.DrawAll();
 				driver.EndScene();
 			}
 			while (device.Run())
 			{
 				// Work out a frame delta time.
 				uint now = device.Timer.Time;
 				float frameDeltaTime = (float)(now - then) / 1000.0f; // in seconds
 				then = now;
 
 				bool movedWithJoystick = false;
 				Vector3Df nodePosition = node.Position;
 
 				if (joystickList.Count > 0)
 				{
 					float moveHorizontal = 0.0f; // range is -1.0 for full left to +1.0 for full right
 					float moveVertical = 0.0f; // range is -1.0 for full down to +1.0 for full up
 
 					// We receive the full analog range of the axes, and so have to implement our own dead zone.
 					// This is an empirical value, since some joysticks have more jitter or creep around the center
 					// point than others. We'll use 5% of the range as the dead zone, but generally you would want
 					// to give the user the option to change this.
 					float DeadZone = 0.05f;
 
 					moveHorizontal = joystickState.Axis[0] / 32767.0f; // "0" for X axis
 					if (Math.Abs(moveHorizontal) < DeadZone)
 						moveHorizontal = 0.0f;
 
 					moveVertical = joystickState.Axis[1] / -32767.0f; // "1" for Y axis
 					if (Math.Abs(moveVertical) < DeadZone)
 						moveVertical = 0.0f;
 
 					// POV will contain 65535 if POV hat info no0t supported, so we can check its range.
 					ushort povDegrees = (ushort)(joystickState.POV / 100);
 					if (povDegrees < 360)
 					{
 						if (povDegrees > 0 && povDegrees < 180)
 							moveHorizontal = +1.0f;
 						else if (povDegrees > 180)
 							moveHorizontal = -1.0f;
 
 						if (povDegrees > 90 && povDegrees < 270)
 							moveVertical = -1.0f;
 						else if (povDegrees > 270 || povDegrees < 90)
 							moveVertical = +1.0f;
 					}
 
 					// If we have any movement, apply it.
 					if (Math.Abs(moveHorizontal) > 0.0001f || Math.Abs(moveVertical) > 0.0001f)
 					{
 						float m = frameDeltaTime * MovementSpeed;
 						nodePosition = new Vector3Df(moveHorizontal * m, moveVertical * m, nodePosition.Z);
 						movedWithJoystick = true;
 					}
 				}
 
 				// If the arrow node isn't being moved with the joystick, then have it follow the mouse cursor.
 				if (!movedWithJoystick)
 				{
 					// Create a ray through the mouse cursor.
 					Line3Df ray = smgr.SceneCollisionManager.GetRayFromScreenCoordinates(mouseState.Position, camera);
 
 					// And intersect the ray with a plane around the node facing towards the camera.
 					Plane3Df plane = new Plane3Df(nodePosition, new Vector3Df(0, 0, -1));
 					Vector3Df mousePosition;
 					if (plane.GetIntersectionWithLine(ray.Start, ray.Vector, out mousePosition))
 					{
 						// We now have a mouse position in 3d space; move towards it.
 						Vector3Df toMousePosition = mousePosition - nodePosition;
 						float availableMovement = frameDeltaTime * MovementSpeed;
 
 						if (toMousePosition.Length <= availableMovement)
 							nodePosition = mousePosition; // jump to the final position
 						else
 							nodePosition += toMousePosition.Normalize() * availableMovement; // move towards it
 					}
 				}
 
 				node.Position = nodePosition;
 
 				// Turn lighting on and off depending on whether the left mouse button is down.
 				node.SetMaterialFlag(MaterialFlag.Lighting, mouseState.IsLeftButtonDown);
 
 				// Draw all.
 				driver.BeginScene(true, true, new Color(113, 113, 133));
 				smgr.DrawAll();
 				driver.EndScene();
 			}
 
 			// Drop the device.
 
 			device.Drop();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\19.MouseAndJoystick\Program.cs" startline="175" endline="220"><![CDATA[
 
 		// We'll create a class to record info on the mouse state.
 		class MouseStateInfo
 		{
 			public Vector2Di Position = new Vector2Di();
 			public bool IsLeftButtonDown = false;
 		}
 
 		static MouseStateInfo mouseState = new MouseStateInfo();
 		static Event.JoystickEvent joystickState;
 
 		static bool device_OnEvent(Event evnt)
 		{
 			// Remember the mouse state.
 			if (evnt.Type == EventType.Mouse)
 			{
 				switch (evnt.Mouse.Type)
 				{
 					case MouseEventType.LeftDown
 						mouseState.IsLeftButtonDown = true;
 						break;
 
 					case MouseEventType.LeftUp
 						mouseState.IsLeftButtonDown = false;
 						break;
 
 					case MouseEventType.Move
 						mouseState.Position = new Vector2Di(evnt.Mouse.X, evnt.Mouse.Y);
 						break;
 					
 					default
 						// We won't use any other mouse events.
 						break;
 				}
 			}
 
 			// The state of each connected joystick is sent to us once every run() of the Irrlicht device.
 			// Store the state of the first joystick, ignoring other joysticks.
 			if (evnt.Type == EventType.Joystick &&
 				evnt.Joystick.Joystick == 0)
 			{
 				joystickState = evnt.Joystick;
 			}
 
 			return false;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\19.MouseAndJoystick\Program.cs" startline="221" endline="246"><![CDATA[
 
 		static bool AskUserForDriver(out DriverType driverType)
 		{
 			driverType = DriverType.Null;
 
 			Console.Write("Please select the driver you want for this example
 						" (a) OpenGL\n (b) Direct3D 9.0c\n (c) Direct3D 8.1\n" +
 						" (d) Burning's Software Renderer\n (e) Software Renderer\n" +
 						" (f) NullDevice\n (otherKey) exit\n\n");
 
 			ConsoleKeyInfo i = Console.ReadKey();
 
 			switch (i.Key)
 			{
 				case ConsoleKey.A
 				case ConsoleKey.B
 				case ConsoleKey.C
 				case ConsoleKey.D
 				case ConsoleKey.E
 				case ConsoleKey.F
 				default
 					return false;
 			}
 
 			return true;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\19.MouseAndJoystick\Program.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\19.MouseAndJoystick\Program.cs" startline="183" endline="183"><![CDATA[
 		static MouseStateInfo mouseState = new MouseStateInfo();
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\23.MeshHandling\Program.cs" startline="16" endline="96"><![CDATA[
 		{
 			DriverType driverType;
 			if (!AskUserForDriver(out driverType))
 				return;
 
 			IrrlichtDevice device = IrrlichtDevice.CreateDevice(driverType, new Dimension2Di(800, 600));
 			if (device == null)
 				return;
 
 			device.OnEvent += new IrrlichtDevice.EventHandler(device_OnEvent);
 			device.SetWindowCaption("Mesh handling - Irrlicht Lime");
 			VideoDriver driver = device.VideoDriver;
 			SceneManager scene = device.SceneManager;
 
 			// Generate starting height map and mesh
 
 			HeightMap map = new HeightMap(255, 255);
 			map.Generate(HeightMap.HeightFunc.EggBox);
 
 			HeightMesh mesh = new HeightMesh();
 			mesh.Init(driver, map, 50.0f, HeightMesh.ColorFunc.GreyscaleBasedOnTheHeight);
 
 			// Add the mesh to the scene graph
 
 			MeshSceneNode meshnode = scene.AddMeshSceneNode(mesh.Mesh);
 			meshnode.SetMaterialFlag(MaterialFlag.BackFaceCulling, false);
 
 			// Add light (just for nice effects)
 
 			LightSceneNode lightnode = scene.AddLightSceneNode(null, new Vector3Df(0, 100, 0), new Colorf(1, 1, 1), 500.0f);
 			SceneNodeAnimator anim = scene.CreateFlyCircleAnimator(new Vector3Df(0, 150, 0), 250.0f);
 			lightnode.AddAnimator(anim);
 			anim.Drop();
 
 			// Add camera
 
 			CameraSceneNode camera = scene.AddCameraSceneNodeFPS();
 			camera.Position = new Vector3Df(-20.0f, 100.0f, -20.0f);
 			camera.Target = new Vector3Df(200.0f, -100.0f, 200.0f);
 			camera.FarValue = 20000.0f;
 
 			// Main loop
 
 			while (device.Run())
 			{
 				if (!device.WindowActive)
 				{
 					device.Sleep(100);
 					continue;
 				}
 
 				if (IsKeyDown(KeyCode.KeyW))
 				{
 					meshnode.SetMaterialFlag(MaterialFlag.Wireframe, !meshnode.GetMaterial(0).Wireframe);
 				}
 				else if (IsKeyDown(KeyCode.Key1))
 				{
 					map.Generate(HeightMap.HeightFunc.EggBox);
 					mesh.Init(driver, map, 50.0f, HeightMesh.ColorFunc.GreyscaleBasedOnTheHeight);
 				}
 				else if (IsKeyDown(KeyCode.Key2))
 				{
 					map.Generate(HeightMap.HeightFunc.MoreSine);
 					mesh.Init(driver, map, 50.0f, HeightMesh.ColorFunc.CoordinateInterpolation);
 				}
 				else if (IsKeyDown(KeyCode.Key3))
 				{
 					map.Generate(HeightMap.HeightFunc.JustExp);
 					mesh.Init(driver, map, 50.0f, HeightMesh.ColorFunc.CoordinateInterpolation);
 				}
 
 				driver.BeginScene();
 				scene.DrawAll();
 				driver.EndScene();
 			}
 			while (device.Run())
 			{
 				if (!device.WindowActive)
 				{
 					device.Sleep(100);
 					continue;
 				}
 
 				if (IsKeyDown(KeyCode.KeyW))
 				{
 					meshnode.SetMaterialFlag(MaterialFlag.Wireframe, !meshnode.GetMaterial(0).Wireframe);
 				}
 				else if (IsKeyDown(KeyCode.Key1))
 				{
 					map.Generate(HeightMap.HeightFunc.EggBox);
 					mesh.Init(driver, map, 50.0f, HeightMesh.ColorFunc.GreyscaleBasedOnTheHeight);
 				}
 				else if (IsKeyDown(KeyCode.Key2))
 				{
 					map.Generate(HeightMap.HeightFunc.MoreSine);
 					mesh.Init(driver, map, 50.0f, HeightMesh.ColorFunc.CoordinateInterpolation);
 				}
 				else if (IsKeyDown(KeyCode.Key3))
 				{
 					map.Generate(HeightMap.HeightFunc.JustExp);
 					mesh.Init(driver, map, 50.0f, HeightMesh.ColorFunc.CoordinateInterpolation);
 				}
 
 				driver.BeginScene();
 				scene.DrawAll();
 				driver.EndScene();
 			}
 
 			// Clean up
 
 			mesh.Drop();
 			device.Drop();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\23.MeshHandling\Program.cs" startline="97" endline="111"><![CDATA[
 
 		static Dictionary<KeyCode, bool> KeyIsDown = new Dictionary<KeyCode, bool>();
 
 		static bool device_OnEvent(Event e)
 		{
 			if (e.Type == EventType.Key)
 			{
 				if (KeyIsDown.ContainsKey(e.Key.Key))
 					KeyIsDown[e.Key.Key] = e.Key.PressedDown;
 				else
 					KeyIsDown.Add(e.Key.Key, e.Key.PressedDown);
 			}
 
 			return false;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\23.MeshHandling\Program.cs" startline="112" endline="116"><![CDATA[
 
 		static bool IsKeyDown(KeyCode keyCode)
 		{
 			return KeyIsDown.ContainsKey(keyCode) ? KeyIsDown[keyCode] 
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\23.MeshHandling\Program.cs" startline="117" endline="142"><![CDATA[
 
 		static bool AskUserForDriver(out DriverType driverType)
 		{
 			driverType = DriverType.Null;
 
 			Console.Write("Please select the driver you want for this example
 						" (a) OpenGL\n (b) Direct3D 9.0c\n (c) Direct3D 8.1\n" +
 						" (d) Burning's Software Renderer\n (e) Software Renderer\n" +
 						" (f) NullDevice\n (otherKey) exit\n\n");
 
 			ConsoleKeyInfo i = Console.ReadKey();
 
 			switch (i.Key)
 			{
 				case ConsoleKey.A
 				case ConsoleKey.B
 				case ConsoleKey.C
 				case ConsoleKey.D
 				case ConsoleKey.E
 				case ConsoleKey.F
 				default
 					return false;
 			}
 
 			return true;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\23.MeshHandling\Program.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\23.MeshHandling\Program.cs" startline="98" endline="98"><![CDATA[
 		static Dictionary<KeyCode, bool> KeyIsDown = new Dictionary<KeyCode, bool>();
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\23.MeshHandling\Program.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\23.MeshHandling\Program.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\23.MeshHandling\Program.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\23.MeshHandling\Program.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\23.MeshHandling\Program.cs" startline="99" endline="186"><![CDATA[
 
 		static bool device_OnEvent(Event e)
 		{
 			if (e.Type == EventType.Key)
 			{
 				if (KeyIsDown.ContainsKey(e.Key.Key))
 					KeyIsDown[e.Key.Key] = e.Key.PressedDown;
 				else
 					KeyIsDown.Add(e.Key.Key, e.Key.PressedDown);
 			}
 
 			return false;
 		}
 
 		static bool IsKeyDown(KeyCode keyCode)
 		{
 			return KeyIsDown.ContainsKey(keyCode) ? KeyIsDown[keyCode] 
 		}
 
 		static bool AskUserForDriver(out DriverType driverType)
 		{
 			driverType = DriverType.Null;
 
 			Console.Write("Please select the driver you want for this example
 						" (a) OpenGL\n (b) Direct3D 9.0c\n (c) Direct3D 8.1\n" +
 						" (d) Burning's Software Renderer\n (e) Software Renderer\n" +
 						" (f) NullDevice\n (otherKey) exit\n\n");
 
 			ConsoleKeyInfo i = Console.ReadKey();
 
 			switch (i.Key)
 			{
 				case ConsoleKey.A
 				case ConsoleKey.B
 				case ConsoleKey.C
 				case ConsoleKey.D
 				case ConsoleKey.E
 				case ConsoleKey.F
 				default
 					return false;
 			}
 
 			return true;
 		}
 	}
 
 	/// <summary>
 	/// A simple class for representing heightmaps.
 	/// </summary>
 	class HeightMap
 	{
 		/// <summary>
 		/// The type of the function which generate the heightmap.
 		/// </summary>
 		public enum HeightFunc
 		{
 			/// <summary>
 			/// An interesting sample function 
 			/// </summary>
 			EggBox,
 
 			/// <summary>
 			/// A rather dumb sine function 
 			/// </summary>
 			MoreSine,
 
 			/// <summary>
 			/// A simple function
 			/// </summary>
 			JustExp
 		}
 
 		float scale;
 		float[] data;
 
 		public ushort Width { get; private set; }
 		public ushort Height { get; private set; }
 
 		/// <summary>
 		/// Creates new instance with given width and height. 
 		/// </summary>
 		public HeightMap(ushort w, ushort h)
 		{
 			Width = w;
 			Height = h;
 			scale = (float)Math.Sqrt((double)(w * w + h * h));
 			data = new float[w * h];
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\23.MeshHandling\Program.cs" startline="187" endline="197"><![CDATA[
 
 		/// <summary>
 		/// Gets height value for specified coordinates.
 		/// </summary>
 		public float GetHeight(int x, int y)
 		{
 			if (x < 0 || x > Width || y < 0 || y > Height)
 				throw new ArgumentOutOfRangeException();
 
 			return data[x + Width * y];
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\23.MeshHandling\Program.cs" startline="198" endline="208"><![CDATA[
 
 		/// <summary>
 		/// Fills the heightmap with values generated from given function.
 		/// </summary>
 		public void Generate(HeightFunc func)
 		{
 			int i = 0;
 			for (int y = 0; y < Height; y++)
 				for (int x = 0; x < Width; x++)
 					data[i++] = calculate(func, x, y);
 				for (int x = 0; x < Width; x++)
 			for (int y = 0; y < Height; y++)
 				for (int x = 0; x < Width; x++)
 					data[i++] = calculate(func, x, y);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\23.MeshHandling\Program.cs" startline="209" endline="255"><![CDATA[
 
 		/// <summary>
 		/// Gets the normal vector at (x, y) to be the cross product of the vectors between the adjacent
 		/// points in the horizontal and vertical directions.
 		/// </summary>
 		public Vector3Df GetNormal(int x, int y, float s)
 		{
 			if (x < 0 || x > Width || y < 0 || y > Height)
 				throw new ArgumentOutOfRangeException();
 
 			float zc = GetHeight(x, y);
 			float zl, zr, zu, zd;
 
 			if (x == 0)
 			{
 				zr = GetHeight(x + 1, y);
 				zl = zc + zc - zr;
 			}
 			else if (x == Width - 1)
 			{
 				zl = GetHeight(x - 1, y);
 				zr = zc + zc - zl;
 			}
 			else
 			{
 				zr = GetHeight(x + 1, y);
 				zl = GetHeight(x - 1, y);
 			}
 
 			if (y == 0)
 			{
 				zd = GetHeight(x, y + 1);
 				zu = zc + zc - zd;
 			}
 			else if (y == Height - 1)
 			{
 				zu = GetHeight(x, y - 1);
 				zd = zc + zc - zu;
 			}
 			else
 			{
 				zd = GetHeight(x, y + 1);
 				zu = GetHeight(x, y - 1);
 			}
 
 			return new Vector3Df(scale * 2 * (zl - zr), 4, scale * 2 * (zd - zu)).Normalize();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\23.MeshHandling\Program.cs" startline="256" endline="296"><![CDATA[
 
 		/// <summary>
 		/// Calculates single height value for specified function and coordinates.
 		/// </summary>
 		float calculate(HeightFunc func, int x, int y)
 		{
 			float xu = x - Width / 2.0f;
 			float yu = y - Height / 2.0f;
 
 			switch (func)
 			{
 				case HeightFunc.EggBox
 					{
 						double r = 4.0f * Math.Sqrt((double)(xu * xu + yu * yu)) / scale;
 						double z = Math.Exp(-r * 2) * (Math.Cos(0.2f * xu) + Math.Cos(0.2f * yu));
 						float o = (float)(0.32f + 0.25f * z);
 						return o;
 					}
 
 				case HeightFunc.MoreSine
 					{
 						double xf = 0.3f * xu / scale;
 						double yf = 12.0f * yu / scale;
 						double z = Math.Sin(xf * xf + yf) * Math.Sin(xf + yf * yf);
 						float o = (float)(0.25f + 0.25f * z);
 						return o;
 					}
 
 				case HeightFunc.JustExp
 					{
 						float xf = 6 * xu / scale;
 						float yf = 6 * yu / scale;
 						float z = xf * xf + yf * yf;
 						float o = (float)(0.3f * z * Math.Cos(xf * yf));
 						return o;
 					}
 
 				default
 					throw new ArgumentException("Unexpected height function value
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\23.MeshHandling\Program.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\23.MeshHandling\Program.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\23.MeshHandling\Program.cs" startline="297" endline="326"><![CDATA[
 	}
 
 	/// <summary>
 	/// Generates a mesh from a heightmap.
 	/// </summary>
 	class HeightMesh
 	{
 		/// <summary>
 		/// Set of functions which can be used for coloring the nodes while creating the mesh.
 		/// </summary>
 		public enum ColorFunc
 		{
 			GreyscaleBasedOnTheHeight,
 			CoordinateInterpolation,
 			PureWhite
 		}
 
 		int width;
 		int height;
 		float scale;
 
 		public Mesh Mesh { get; private set; }
 
 		public HeightMesh()
 		{
 			width = 0;
 			height = 0;
 			scale = 1.0f;
 			Mesh = Mesh.Create();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\23.MeshHandling\Program.cs" startline="327" endline="331"><![CDATA[
 
 		public void Drop()
 		{
 			Mesh.Drop();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\23.MeshHandling\Program.cs" startline="332" endline="358"><![CDATA[
 
 		/// <summary>
 		/// Initializes mesh with new value.
 		/// Unless the heightmap is small, it won't all fit into a single MeshBuffer.
 		/// This function chops it into pieces and generates a buffer from each one.
 		/// </summary>
 		public void Init(VideoDriver driver, HeightMap map, float s, ColorFunc cf)
 		{
 			width = map.Width;
 			height = map.Height;
 			scale = s;
 
 			if (Mesh.MeshBufferCount > 0)
 				Mesh.RemoveMeshBuffer(0, Mesh.MeshBufferCount);
 
 			int sw = 0xffff / (height + 1); // maximum vertices per meshbuffer
 
 			for (int y0 = 0; y0 < height; y0 += sw)
 			{
 				int y1 = y0 + sw;
 				if (y1 >= height)
 					y1 = height - 1; // the last one might be narrower
 				addStrip(map, cf, y0, y1);
 			}
 			for (int y0 = 0; y0 < height; y0 += sw)
 			{
 				int y1 = y0 + sw;
 				if (y1 >= height)
 					y1 = height - 1; // the last one might be narrower
 				addStrip(map, cf, y0, y1);
 			}
 
 			Mesh.RecalculateBoundingBox();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\23.MeshHandling\Program.cs" startline="359" endline="413"><![CDATA[
 
 		/// <summary>
 		/// Generates a MeshBuffer which represents all the vertices and indices for values of y
 		/// between y0 and y1, and add it to the mesh.
 		/// </summary>
 		void addStrip(HeightMap map, ColorFunc cf, int y0, int y1)
 		{
 			Vertex3D[] vertices = new Vertex3D[(y1 - y0 + 1) * width];
 			ushort[] indices = new ushort[(y1 - y0) * (width - 1) * 6]; // "6" is a number of indices in 2 triangles (which forms a quad)
 
 			// calculate vertices
 
 			int i = 0;
 			for (int y = y0; y <= y1; ++y)
 			{
 				for (int x = 0; x < width; ++x)
 				{
 					float z = map.GetHeight(x, y);
 					float xf = (float)x / (float)width;
 					float yf = (float)y / (float)height;
 
 					vertices[i++] = new Vertex3D(
 						new Vector3Df(x, scale * z, y), // position
 						map.GetNormal(x, y, scale), // normal
 						calculate(cf, xf, yf, z), // color
 						new Vector2Df(xf, yf) // tcoords
 					);
 				}
 				for (int x = 0; x < width; ++x)
 				{
 					float z = map.GetHeight(x, y);
 					float xf = (float)x / (float)width;
 					float yf = (float)y / (float)height;
 
 					vertices[i++] = new Vertex3D(
 						new Vector3Df(x, scale * z, y), // position
 						map.GetNormal(x, y, scale), // normal
 						calculate(cf, xf, yf, z), // color
 						new Vector2Df(xf, yf) // tcoords
 					);
 				}
 			}
 			for (int y = y0; y <= y1; ++y)
 			{
 				for (int x = 0; x < width; ++x)
 				{
 					float z = map.GetHeight(x, y);
 					float xf = (float)x / (float)width;
 					float yf = (float)y / (float)height;
 
 					vertices[i++] = new Vertex3D(
 						new Vector3Df(x, scale * z, y), // position
 						map.GetNormal(x, y, scale), // normal
 						calculate(cf, xf, yf, z), // color
 						new Vector2Df(xf, yf) // tcoords
 					);
 				}
 			}
 
 			// calculate indices
 
 			i = 0;
 			for (int y = y0; y < y1; ++y)
 			{
 				for (int x = 0; x < width - 1; ++x)
 				{
 					int n = (y - y0) * width + x;
 					indices[i++] = (ushort)n;
 					indices[i++] = (ushort)(n + height);
 					indices[i++] = (ushort)(n + height + 1);
 					indices[i++] = (ushort)(n + height + 1);
 					indices[i++] = (ushort)(n + 1);
 					indices[i++] = (ushort)n;
 				}
 				for (int x = 0; x < width - 1; ++x)
 				{
 					int n = (y - y0) * width + x;
 					indices[i++] = (ushort)n;
 					indices[i++] = (ushort)(n + height);
 					indices[i++] = (ushort)(n + height + 1);
 					indices[i++] = (ushort)(n + height + 1);
 					indices[i++] = (ushort)(n + 1);
 					indices[i++] = (ushort)n;
 				}
 			}
 			for (int y = y0; y < y1; ++y)
 			{
 				for (int x = 0; x < width - 1; ++x)
 				{
 					int n = (y - y0) * width + x;
 					indices[i++] = (ushort)n;
 					indices[i++] = (ushort)(n + height);
 					indices[i++] = (ushort)(n + height + 1);
 					indices[i++] = (ushort)(n + height + 1);
 					indices[i++] = (ushort)(n + 1);
 					indices[i++] = (ushort)n;
 				}
 			}
 
 			// append calculated verices and indices to mesh buffer
 
 			MeshBuffer buf = MeshBuffer.Create(VertexType.Standard, IndexType._16Bit); // create new buffer
 			Mesh.AddMeshBuffer(buf);
 			buf.Append(vertices, indices);
 			buf.RecalculateBoundingBox();
 			buf.Drop();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\23.MeshHandling\Program.cs" startline="414" endline="435"><![CDATA[
 
 		/// <summary>
 		/// Calculates single color value for given coordinates.
 		/// </summary>
 		Color calculate(ColorFunc cf, float x, float y, float z)
 		{
 			switch (cf)
 			{
 				case ColorFunc.GreyscaleBasedOnTheHeight
 					int n = (int)(255.0f * z);
 					return new Color(n, n, n);
 
 				case ColorFunc.CoordinateInterpolation
 					return new Color(128 + (int)(127.0f * x), 128 + (int)(127.0f * y), 255);
 
 				case ColorFunc.PureWhite
 					return Color.OpaqueWhite;
 
 				default
 					throw new ArgumentException("Unexpected color function value
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\26.OcclusionQuery\Program.cs" startline="16" endline="117"><![CDATA[
 		{
 			DriverType driverType;
 			if (!AskUserForDriver(out driverType))
 				return;
 
 			IrrlichtDevice device = IrrlichtDevice.CreateDevice(driverType, new Dimension2Di(640, 480));
 			if (device == null)
 				return;
 
 			device.OnEvent += new IrrlichtDevice.EventHandler(device_OnEvent);
 
 			VideoDriver driver = device.VideoDriver;
 			SceneManager scene = device.SceneManager;
 
 			scene.GUIEnvironment.AddStaticText("Press Space to hide occluder.", new Recti(10, 10, 200, 50));
 
 			// Create the node to be occluded. We create a sphere node with high poly count.
 
 			MeshSceneNode node = scene.AddSphereSceneNode(10, 64);
 
 			if (node != null)
 			{
 				node.Position = new Vector3Df(0, 0, 60);
 				node.SetMaterialTexture(0, driver.GetTexture("../../media/wall.bmp"));
 				node.SetMaterialFlag(MaterialFlag.Lighting, false);
 			}
 
 			// Now we create another node, the occluder. It's a simple plane.
 
 			SceneNode plane = scene.AddMeshSceneNode(
 				scene.AddHillPlaneMesh("plane", new Dimension2Df(10), new Dimension2Di(2)), // mesh
 				null, // parent
 				-1, // id
 				new Vector3Df(0, 0, 20), // position
 				new Vector3Df(270, 0, 0)); // rotation
 
 			if (plane != null)
 			{
 				plane.SetMaterialTexture(0, driver.GetTexture("../../media/t351sml.jpg"));
 				plane.SetMaterialFlag(MaterialFlag.Lighting, false);
 				plane.SetMaterialFlag(MaterialFlag.BackFaceCulling, true);
 			}
 			
 			// Here we create the occlusion query. Because we don't have a plain mesh scene node
 			// (SceneNodeType.Mesh or SceneNodeType.AnimatedMesh), we pass the base geometry as well. Instead,
 			// we could also pass a simpler mesh or the bounding box. But we will use a time
 			// based method, where the occlusion query renders to the frame buffer and in case
 			// of success (occlusion), the mesh is not drawn for several frames.
 
 			driver.AddOcclusionQuery(node, node.Mesh);
 
 			// We have done everything, just a camera and draw it. We also write the
 			// current frames per second and the name of the driver to the caption of the
 			// window to examine the render speedup.
 			// We also store the time for measuring the time since the last occlusion query ran
 			// and store whether the node should be visible in the next frames.
 
 			scene.AddCameraSceneNode();
 			uint timeNow = device.Timer.Time;
 			bool nodeVisible = true;
 
 			while (device.Run())
 			{
 				plane.Visible = !IsKeyDown(KeyCode.Space);
 
 				driver.BeginScene(true, true, new Color(113, 113, 133));
 
 				// First, we draw the scene, possibly without the occluded element. This is necessary
 				// because we need the occluder to be drawn first. You can also use several scene
 				// managers to collect a number of possible occluders in a separately rendered scene.
 
 				node.Visible = nodeVisible;
 				scene.DrawAll();
 				scene.GUIEnvironment.DrawAll();
 
 				// Once in a while, here every 100 ms, we check the visibility. We run the queries,
 				// update the pixel value, and query the result. Since we already rendered the node
 				// we render the query invisible. The update is made blocking, as we need the result
 				// immediately. If you don't need the result immediately, e.g. because oyu have other
 				// things to render, you can call the update non-blocking. This gives the GPU more
 				// time to pass back the results without flushing the render pipeline.
 				// If the update was called non-blocking, the result from getOcclusionQueryResult is
 				// either the previous value, or 0xffffffff if no value has been generated at all, yet.
 				// The result is taken immediately as visibility flag for the node.
 
 				if (device.Timer.Time - timeNow > 100)
 				{
 					driver.RunAllOcclusionQueries(false);
 					driver.UpdateAllOcclusionQueries();
 					nodeVisible = driver.GetOcclusionQueryResult(node) > 0;
 					timeNow = device.Timer.Time;
 				}
 
 				driver.EndScene();
 
 				device.SetWindowCaption(String.Format(
 					"Occlusion Query Example - Irrlicht Engine [{0}] fps
 					driver.Name, driver.FPS, driver.PrimitiveCountDrawn));
 			}
 			while (device.Run())
 			{
 				plane.Visible = !IsKeyDown(KeyCode.Space);
 
 				driver.BeginScene(true, true, new Color(113, 113, 133));
 
 				// First, we draw the scene, possibly without the occluded element. This is necessary
 				// because we need the occluder to be drawn first. You can also use several scene
 				// managers to collect a number of possible occluders in a separately rendered scene.
 
 				node.Visible = nodeVisible;
 				scene.DrawAll();
 				scene.GUIEnvironment.DrawAll();
 
 				// Once in a while, here every 100 ms, we check the visibility. We run the queries,
 				// update the pixel value, and query the result. Since we already rendered the node
 				// we render the query invisible. The update is made blocking, as we need the result
 				// immediately. If you don't need the result immediately, e.g. because oyu have other
 				// things to render, you can call the update non-blocking. This gives the GPU more
 				// time to pass back the results without flushing the render pipeline.
 				// If the update was called non-blocking, the result from getOcclusionQueryResult is
 				// either the previous value, or 0xffffffff if no value has been generated at all, yet.
 				// The result is taken immediately as visibility flag for the node.
 
 				if (device.Timer.Time - timeNow > 100)
 				{
 					driver.RunAllOcclusionQueries(false);
 					driver.UpdateAllOcclusionQueries();
 					nodeVisible = driver.GetOcclusionQueryResult(node) > 0;
 					timeNow = device.Timer.Time;
 				}
 
 				driver.EndScene();
 
 				device.SetWindowCaption(String.Format(
 					"Occlusion Query Example - Irrlicht Engine [{0}] fps
 					driver.Name, driver.FPS, driver.PrimitiveCountDrawn));
 			}
 
 			device.Drop();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\26.OcclusionQuery\Program.cs" startline="118" endline="132"><![CDATA[
 
 		static Dictionary<KeyCode, bool> KeyIsDown = new Dictionary<KeyCode, bool>();
 
 		static bool device_OnEvent(Event e)
 		{
 			if (e.Type == EventType.Key)
 			{
 				if (KeyIsDown.ContainsKey(e.Key.Key))
 					KeyIsDown[e.Key.Key] = e.Key.PressedDown;
 				else
 					KeyIsDown.Add(e.Key.Key, e.Key.PressedDown);
 			}
 
 			return false;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\26.OcclusionQuery\Program.cs" startline="133" endline="137"><![CDATA[
 
 		static bool IsKeyDown(KeyCode keyCode)
 		{
 			return KeyIsDown.ContainsKey(keyCode) ? KeyIsDown[keyCode] 
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\26.OcclusionQuery\Program.cs" startline="138" endline="163"><![CDATA[
 
 		static bool AskUserForDriver(out DriverType driverType)
 		{
 			driverType = DriverType.Null;
 
 			Console.Write("Please select the driver you want for this example
 						" (a) OpenGL\n (b) Direct3D 9.0c\n (c) Direct3D 8.1\n" +
 						" (d) Burning's Software Renderer\n (e) Software Renderer\n" +
 						" (f) NullDevice\n (otherKey) exit\n\n");
 
 			ConsoleKeyInfo i = Console.ReadKey();
 
 			switch (i.Key)
 			{
 				case ConsoleKey.A
 				case ConsoleKey.B
 				case ConsoleKey.C
 				case ConsoleKey.D
 				case ConsoleKey.E
 				case ConsoleKey.F
 				default
 					return false;
 			}
 
 			return true;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\26.OcclusionQuery\Program.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\26.OcclusionQuery\Program.cs" startline="119" endline="119"><![CDATA[
 		static Dictionary<KeyCode, bool> KeyIsDown = new Dictionary<KeyCode, bool>();
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L01.TexturePainting\DriverSettingsForm.cs" startline="15" endline="15"><![CDATA[
 		public DriverType DriverType { get { return driverType; } }
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L01.TexturePainting\DriverSettingsForm.cs" startline="16" endline="16"><![CDATA[
 		public VideoMode VideoMode { get { return videoMode; } }
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L01.TexturePainting\DriverSettingsForm.cs" startline="17" endline="17"><![CDATA[
 		public bool Fullscreen { get { return fullscreen; } }
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L01.TexturePainting\DriverSettingsForm.cs" startline="18" endline="23"><![CDATA[
 
 		public DriverSettingsForm(string windowCaption, string aboutText)
 		{
 			this.windowCaption = windowCaption;
 			this.aboutText = aboutText;
 		}
 
 		public bool ShowDialog()
 		{
 			device = IrrlichtDevice.CreateDevice(DriverType.BurningsVideo, new Dimension2Di(320, 320));
 			device.FileSystem.AddFileArchive("../../media/");
 			device.OnEvent += new IrrlichtDevice.EventHandler(device_OnEvent);
 			device.SetWindowCaption(windowCaption);
 
 			initGUI();
 
 			while (device.Run())
 			{
 				device.VideoDriver.BeginScene(true, false, new Color(40, 180, 80));
 				device.GUIEnvironment.DrawAll();
 				device.VideoDriver.EndScene();
 			}
 
 			device.Drop();
 
 			return run;
 		}
 
 		private void initGUI()
 		{
 			GUIEnvironment gui = device.GUIEnvironment;
 			gui.Skin.SetFont(gui.GetFont("fontlucida.png"));
 			foreach (GUIDefaultColor c in Enum.GetValues(typeof(GUIDefaultColor)))
 			{
 				Color l = gui.Skin.GetColor(c);
 				l.Alpha = 255;
 				gui.Skin.SetColor(l, c);
 			}
 
 			Recti v = device.VideoDriver.ViewPort;
 
 			GUITabControl tc = gui.AddTabControl(new Recti(20, 20, v.Width - 20, v.Height - 70));
 
 			GUITab t1 = tc.AddTab("Setup");
 
 			gui.AddStaticText("Driver", new Recti(20, 20, v.Width - 60, 40), false, false, t1);
 			guiDriverType = gui.AddComboBox(new Recti(20, 40, v.Width - 60, 60), t1);
 			foreach (DriverType t in Enum.GetValues(typeof(DriverType)))
 			{
 				if (t == DriverType.Null)
 					continue;
 
 				int i = guiDriverType.AddItem(t.ToString(), (int)t);
 
 				if (t == driverType)
 					guiDriverType.SelectedIndex = i;
 			}
 
 			gui.AddStaticText("Resolution", new Recti(20, 70, v.Width - 60, 90), false, false, t1);
 			guiResolution = gui.AddComboBox(new Recti(20, 90, v.Width - 60, 110), t1);
 			foreach (VideoMode m in device.VideoModeList.ModeList)
 			{
 				int i = guiResolution.AddItem(m.ToString());
 
 				if (m.Resolution == videoMode.Resolution && m.Depth == videoMode.Depth)
 					guiResolution.SelectedIndex = i;
 			}
 
 			guiFullscreen = gui.AddCheckBox(fullscreen, new Recti(20, 130, v.Width - 60, 150), "Fullscreen", t1);
 
 			GUITab t2 = tc.AddTab("About");
 
 			gui.AddStaticText(aboutText, new Recti(20, 20, v.Width - 60, 180), false, true, t2);
 
 			guiButtonRun = gui.AddButton(new Recti(v.Width - 190, v.Height - 50, v.Width - 110, v.Height - 20), null, -1, "Run");
 			guiButtonExit = gui.AddButton(new Recti(v.Width - 100, v.Height - 50, v.Width - 20, v.Height - 20), null, -1, "Exit");
 		}
 
 		bool device_OnEvent(Event e)
 		{
 			if (e.Type == EventType.GUI)
 			{
 				if (e.GUI.Type == GUIEventType.ButtonClicked)
 				{
 					if (e.GUI.Caller == guiButtonRun)
 					{
 						driverType = (DriverType)guiDriverType.GetItemData(guiDriverType.SelectedIndex);
 						videoMode = device.VideoModeList.ModeList[guiResolution.SelectedIndex];
 						fullscreen = guiFullscreen.Checked;
 
 						run = true;
 						device.Close();
 						return true;
 					}
 
 					if (e.GUI.Caller == guiButtonExit)
 					{
 						run = false;
 						device.Close();
 						return true;
 					}
 				}
 			}
 
 			return false;
 		}
 
 		// default settings {
 		DriverType driverType = DriverType.Direct3D8;
 		VideoMode videoMode = new VideoMode(800, 600, 32);
 		bool fullscreen = false;
 		// }
 
 		bool run = false;
 		public DriverSettingsForm(string windowCaption, string aboutText)
 		{
 			this.windowCaption = windowCaption;
 			this.aboutText = aboutText;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L01.TexturePainting\DriverSettingsForm.cs" startline="24" endline="44"><![CDATA[
 
 		public bool ShowDialog()
 		{
 			device = IrrlichtDevice.CreateDevice(DriverType.BurningsVideo, new Dimension2Di(320, 320));
 			device.FileSystem.AddFileArchive("../../media/");
 			device.OnEvent += new IrrlichtDevice.EventHandler(device_OnEvent);
 			device.SetWindowCaption(windowCaption);
 
 			initGUI();
 
 			while (device.Run())
 			{
 				device.VideoDriver.BeginScene(true, false, new Color(40, 180, 80));
 				device.GUIEnvironment.DrawAll();
 				device.VideoDriver.EndScene();
 			}
 			while (device.Run())
 			{
 				device.VideoDriver.BeginScene(true, false, new Color(40, 180, 80));
 				device.GUIEnvironment.DrawAll();
 				device.VideoDriver.EndScene();
 			}
 
 			device.Drop();
 
 			return run;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L01.TexturePainting\DriverSettingsForm.cs" startline="45" endline="94"><![CDATA[
 
 		private void initGUI()
 		{
 			GUIEnvironment gui = device.GUIEnvironment;
 			gui.Skin.SetFont(gui.GetFont("fontlucida.png"));
 			foreach (GUIDefaultColor c in Enum.GetValues(typeof(GUIDefaultColor)))
 			{
 				Color l = gui.Skin.GetColor(c);
 				l.Alpha = 255;
 				gui.Skin.SetColor(l, c);
 			}
 			foreach (GUIDefaultColor c in Enum.GetValues(typeof(GUIDefaultColor)))
 			{
 				Color l = gui.Skin.GetColor(c);
 				l.Alpha = 255;
 				gui.Skin.SetColor(l, c);
 			}
 
 			Recti v = device.VideoDriver.ViewPort;
 
 			GUITabControl tc = gui.AddTabControl(new Recti(20, 20, v.Width - 20, v.Height - 70));
 
 			GUITab t1 = tc.AddTab("Setup");
 
 			gui.AddStaticText("Driver", new Recti(20, 20, v.Width - 60, 40), false, false, t1);
 			guiDriverType = gui.AddComboBox(new Recti(20, 40, v.Width - 60, 60), t1);
 			foreach (DriverType t in Enum.GetValues(typeof(DriverType)))
 			{
 				if (t == DriverType.Null)
 					continue;
 
 				int i = guiDriverType.AddItem(t.ToString(), (int)t);
 
 				if (t == driverType)
 					guiDriverType.SelectedIndex = i;
 			}
 			foreach (DriverType t in Enum.GetValues(typeof(DriverType)))
 			{
 				if (t == DriverType.Null)
 					continue;
 
 				int i = guiDriverType.AddItem(t.ToString(), (int)t);
 
 				if (t == driverType)
 					guiDriverType.SelectedIndex = i;
 			}
 
 			gui.AddStaticText("Resolution", new Recti(20, 70, v.Width - 60, 90), false, false, t1);
 			guiResolution = gui.AddComboBox(new Recti(20, 90, v.Width - 60, 110), t1);
 			foreach (VideoMode m in device.VideoModeList.ModeList)
 			{
 				int i = guiResolution.AddItem(m.ToString());
 
 				if (m.Resolution == videoMode.Resolution && m.Depth == videoMode.Depth)
 					guiResolution.SelectedIndex = i;
 			}
 			foreach (VideoMode m in device.VideoModeList.ModeList)
 			{
 				int i = guiResolution.AddItem(m.ToString());
 
 				if (m.Resolution == videoMode.Resolution && m.Depth == videoMode.Depth)
 					guiResolution.SelectedIndex = i;
 			}
 
 			guiFullscreen = gui.AddCheckBox(fullscreen, new Recti(20, 130, v.Width - 60, 150), "Fullscreen", t1);
 
 			GUITab t2 = tc.AddTab("About");
 
 			gui.AddStaticText(aboutText, new Recti(20, 20, v.Width - 60, 180), false, true, t2);
 
 			guiButtonRun = gui.AddButton(new Recti(v.Width - 190, v.Height - 50, v.Width - 110, v.Height - 20), null, -1, "Run");
 			guiButtonExit = gui.AddButton(new Recti(v.Width - 100, v.Height - 50, v.Width - 20, v.Height - 20), null, -1, "Exit");
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L01.TexturePainting\DriverSettingsForm.cs" startline="95" endline="123"><![CDATA[
 
 		bool device_OnEvent(Event e)
 		{
 			if (e.Type == EventType.GUI)
 			{
 				if (e.GUI.Type == GUIEventType.ButtonClicked)
 				{
 					if (e.GUI.Caller == guiButtonRun)
 					{
 						driverType = (DriverType)guiDriverType.GetItemData(guiDriverType.SelectedIndex);
 						videoMode = device.VideoModeList.ModeList[guiResolution.SelectedIndex];
 						fullscreen = guiFullscreen.Checked;
 
 						run = true;
 						device.Close();
 						return true;
 					}
 
 					if (e.GUI.Caller == guiButtonExit)
 					{
 						run = false;
 						device.Close();
 						return true;
 					}
 				}
 			}
 
 			return false;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L01.TexturePainting\Application.cs" startline="193" endline="24"><![CDATA[
 		int oldMouseX = 0;
 		int oldMouseY = 0;
 		public Application(IrrlichtDevice dev)
 		{
 			device = dev;
 			device.OnEvent += new IrrlichtDevice.EventHandler(OnEvent);
 
 			initScene();
 			initGUI(128);
 			createTexture(128);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L01.TexturePainting\Application.cs" startline="25" endline="39"><![CDATA[
 
 		public void Render()
 		{
 			VideoDriver drv = device.VideoDriver;
 
 			drv.SetRenderTarget(textureRTT, true, true, new Color(20, 80, 180));
 			sceneNodeRTT.Visible = false;
 			device.SceneManager.DrawAll();
 			device.GUIEnvironment.DrawAll();
 
 			drv.SetRenderTarget(RenderTarget.FrameBuffer, true, true, new Color(40, 180, 240));
 			sceneNodeRTT.Visible = true;
 			device.SceneManager.DrawAll();
 			device.GUIEnvironment.DrawAll();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L01.TexturePainting\Application.cs" startline="40" endline="66"><![CDATA[
 
 		private void initScene()
 		{
 			SceneManager smgr = device.SceneManager;
 
 			AnimatedMesh m = smgr.AddHillPlaneMesh(null, new Dimension2Df(16), new Dimension2Di(16), null, 8);
 
 			sceneNodePainter = smgr.AddAnimatedMeshSceneNode(m);
 			sceneNodePainter.Scale = new Vector3Df(0.4f);
 			sceneNodePainter.SetMaterialTexture(0, texture);
 			sceneNodePainter.SetMaterialFlag(MaterialFlag.Lighting, false);
 			SceneNodeAnimator a = smgr.CreateRotationAnimator(new Vector3Df(0, 0.1f, 0));
 			sceneNodePainter.AddAnimator(a);
 			a.Drop();
 
 			sceneNodeRTT = smgr.AddWaterSurfaceSceneNode(m.GetMesh(0), 2, 100, 20);
 			sceneNodeRTT.SetMaterialFlag(MaterialFlag.Lighting, false);
 			sceneNodeRTT.SetMaterialType(MaterialType.Solid);
 			sceneNodeRTT.Scale = new Vector3Df(0.2f);
 			sceneNodeRTT.Position = new Vector3Df(60, 10, 40);
 			sceneNodeRTT.Rotation = new Vector3Df(-30, 20, 0);
 
 			textureRTT = smgr.VideoDriver.AddRenderTargetTexture(new Dimension2Di(512));
 			sceneNodeRTT.SetMaterialTexture(0, textureRTT);
 
 			smgr.AddCameraSceneNode(null, new Vector3Df(0, 40, -60), new Vector3Df(0, -15, 0));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L01.TexturePainting\Application.cs" startline="67" endline="87"><![CDATA[
 
 		private void initGUI(int size)
 		{
 			GUIEnvironment gui = device.GUIEnvironment;
 			VideoDriver drv = gui.VideoDriver;
 
 			gui.Clear();
 
 			gui.AddImage(
 				drv.GetTexture("../../media/lime_logo_alpha.png"),
 				new Vector2Di(30, 0));
 
 			guiWindow = gui.AddWindow(new Recti(20, 120, size + 20 + 20, size + 120 + 20 + 20 + 30), false, "Paint");
 
 			guiSize128 = gui.AddButton(new Recti(10, 30, 40, 30 + 20), guiWindow, -1, "128");
 			guiSize256 = gui.AddButton(new Recti(50, 30, 80, 30 + 20), guiWindow, -1, "256");
 			guiSize512 = gui.AddButton(new Recti(90, 30, 120, 30 + 20), guiWindow, -1, "512");
 
 			guiImage = gui.AddImage(new Recti(10, 30 + 30, size + 10 - 1, size + 30 - 1 + 30), guiWindow);
 			gui.Focus = guiImage;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L01.TexturePainting\Application.cs" startline="88" endline="108"><![CDATA[
 
 		private void createTexture(int size)
 		{
 			VideoDriver drv = device.VideoDriver;
 
 			Texture o = texture;
 
 			texture = drv.AddTexture(new Dimension2Di(size), "tex");
 
 			TexturePainter p = texture.GetTexturePainter();
 			p.Lock(TextureLockMode.WriteOnly);
 			for (int i = 0; i < p.MipMapLevelHeight; i++)
 				p.SetLine(0, i, p.MipMapLevelWidth - 1, i, new Color(200, 200, 200));
 			for (int i = 0; i < p.MipMapLevelHeight; i++)
 				p.SetLine(0, i, p.MipMapLevelWidth - 1, i, new Color(200, 200, 200));
 			p.Unlock(true);
 
 			guiImage.Image = texture;
 			sceneNodePainter.SetMaterialTexture(0, texture);
 
 			if (o != null)
 				drv.RemoveTexture(o);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L01.TexturePainting\Application.cs" startline="109" endline="177"><![CDATA[
 
 		bool OnEvent(Event e)
 		{
 			if (e.Type == EventType.Mouse)
 			{
 				int x = e.Mouse.X;
 				int y = e.Mouse.Y;
 				bool l = e.Mouse.IsLeftPressed();
 
 				if (l && guiImage.AbsolutePosition.IsPointInside(new Vector2Di(x, y)))
 				{
 					Vector2Di p = new Vector2Di(x, y) - guiImage.AbsolutePosition.UpperLeftCorner;
 
 					if (e.Mouse.Type == MouseEventType.Move)
 					{
 						TexturePainter t = texture.GetTexturePainter();
 
 						if (p.X < texture.Size.Width &&
 							p.Y < texture.Size.Height &&
 							t.Lock(TextureLockMode.WriteOnly))
 						{
 							t.SetLine(oldMouseX, oldMouseY, p.X, p.Y, new Color(255, 0, 0));
 							t.Unlock(true);
 						}
 					}
 
 					oldMouseX = p.X;
 					oldMouseY = p.Y;
 
 					return true;
 				}
 			}
 
 			if (e.Type == EventType.GUI)
 			{
 				if (e.GUI.Type == GUIEventType.ElementClosed &&
 					e.GUI.Caller is GUIWindow)
 				{
 					device.Close();
 					return true;
 				}
 
 				if (e.GUI.Type == GUIEventType.ButtonClicked)
 				{
 					if (e.GUI.Caller == guiSize128)
 					{
 						initGUI(128);
 						createTexture(128);
 						return true;
 					}
 
 					if (e.GUI.Caller == guiSize256)
 					{
 						initGUI(256);
 						createTexture(256);
 						return true;
 					}
 
 					if (e.GUI.Caller == guiSize512)
 					{
 						initGUI(512);
 						createTexture(512);
 						return true;
 					}
 				}
 			}
 
 			return false;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L01.TexturePainting\Application.cs" startline="17" endline="62"><![CDATA[
 		{
 			DriverSettingsForm driverSettings = new DriverSettingsForm(
 				"Texture paint example",
 				"This example shows how to use TexturePainter and render-to-texture (RTT) technique.\n\n" +
 				"Use mouse to draw on the 2D image (texture) and see changes on the mesh and on RTT target.");
 
 			if (!driverSettings.ShowDialog())
 				return;
 
 			device = IrrlichtDevice.CreateDevice(
 				driverSettings.DriverType,
 				driverSettings.VideoMode.Resolution,
 				driverSettings.VideoMode.Depth,
 				driverSettings.Fullscreen);
 
 			if (device == null)
 			{
 				Console.WriteLine("\nDevice creation failed!\n<Press any key to exit>");
 				Console.ReadKey();
 				return;
 			}
 
 			Application app = new Application(device);
 
 			int lastFPS = -1;
 			while (device.Run())
 			{
 				device.VideoDriver.BeginScene();
 
 				app.Render();
 
 				device.VideoDriver.EndScene();
 
 				int fps = device.VideoDriver.FPS;
 				if (fps != lastFPS)
 				{
 					device.SetWindowCaption(string.Format(
 						"Texture painting example - Irrlicht Lime [{0}] {1} fps",
 						device.VideoDriver.Name, fps));
 
 					lastFPS = fps;
 				}
 			}
 			while (device.Run())
 			{
 				device.VideoDriver.BeginScene();
 
 				app.Render();
 
 				device.VideoDriver.EndScene();
 
 				int fps = device.VideoDriver.FPS;
 				if (fps != lastFPS)
 				{
 					device.SetWindowCaption(string.Format(
 						"Texture painting example - Irrlicht Lime [{0}] {1} fps",
 						device.VideoDriver.Name, fps));
 
 					lastFPS = fps;
 				}
 			}
 
 			device.Drop();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L01.TexturePainting\Application.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L02.WinFormsWindow\Properties\Settings.Designer.cs" startline="21" endline="23"><![CDATA[
             get {
                 return defaultInstance;
             }
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L02.WinFormsWindow\Properties\Settings.Designer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L02.WinFormsWindow\Properties\Settings.Designer.cs" startline="18" endline="18"><![CDATA[
         private static Settings defaultInstance = ((Settings)(global
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L02.WinFormsWindow\Form1.cs" startline="33" endline="40"><![CDATA[
 		}
 
 		private bool userWantExit = false; // if "true", we shut down rendering thread and then exit app
 		private System.ComponentModel.IContainer components = null;
 		public Form1()
 		{
 			InitializeComponent();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L02.WinFormsWindow\Form1.cs" startline="41" endline="54"><![CDATA[
 
 		private void Form1_Load(object sender, EventArgs e)
 		{
 			// select "No AntiAliasing"
 			comboBoxAntiAliasing.SelectedIndex = 0;
 
 			// select "Skybox"
 			comboBoxBackground.SelectedIndex = 0;
 
 			// fill combobox with all available video drivers, except Null
 			foreach (DriverType v in Enum.GetValues(typeof(DriverType)))
 				if (v != DriverType.Null)
 					comboBoxVideoDriver.Items.Add(v);
 			foreach (DriverType v in Enum.GetValues(typeof(DriverType)))
 				if (v != DriverType.Null)
 					comboBoxVideoDriver.Items.Add(v);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L02.WinFormsWindow\Form1.cs" startline="55" endline="85"><![CDATA[
 
 		private void initializeIrrlichtDevice(object sender, EventArgs e)
 		{
 			if (comboBoxVideoDriver.SelectedItem == null)
 				return;
 
 			// if rendering in progress, we are sending cancel request and waiting for its finishing
 			if (backgroundRendering.IsBusy)
 			{
 				backgroundRendering.CancelAsync();
 				while (backgroundRendering.IsBusy)
 					Application.DoEvents(); // this is not very correct way, but its very short, so we use it
 				while (backgroundRendering.IsBusy)
 					Application.DoEvents(); // this is not very correct way, but its very short, so we use it
 
 				// redraw the panel, otherwise last rendered frame will stay as garbage
 				panelRenderingWindow.Invalidate();
 			}
 
 			// collect settings and start background worker with these settings
 
 			DeviceSettings s = new DeviceSettings(
 				checkBoxUseSeparateWindow.Checked ? IntPtr.Zero 
 				(DriverType)comboBoxVideoDriver.SelectedItem,
 				(byte)(comboBoxAntiAliasing.SelectedIndex == 0 ? 0 
 				comboBoxBackground.SelectedIndex == 0 ? null 
 				checkBoxUseVSync.Checked
 			);
 
 			backgroundRendering.RunWorkerAsync(s);
 
 			labelRenderingStatus.Text = "Starting rendering...";
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L02.WinFormsWindow\Form1.cs" startline="86" endline="164"><![CDATA[
 
 		private void backgroundRendering_DoWork(object sender, DoWorkEventArgs e)
 		{
 			BackgroundWorker worker = sender as BackgroundWorker;
 			DeviceSettings settings = e.Argument as DeviceSettings;
 
 			// create irrlicht device using provided settings
 
 			IrrlichtDevice dev = IrrlichtDevice.CreateDevice(settings);
 
 			if (dev == null)
 				throw new Exception("Failed to create Irrlicht device.");
 
 			VideoDriver drv = dev.VideoDriver;
 			SceneManager smgr = dev.SceneManager;
 
 			// setup a simple 3d scene
 
 			CameraSceneNode cam = smgr.AddCameraSceneNode();
 			cam.Target = new Vector3Df(0);
 
 			SceneNodeAnimator anim = smgr.CreateFlyCircleAnimator(new Vector3Df(0, 15, 0), 30.0f);
 			cam.AddAnimator(anim);
 			anim.Drop();
 
 			SceneNode cube = smgr.AddCubeSceneNode(20);
 			cube.SetMaterialTexture(0, drv.GetTexture("../../media/wall.bmp"));
 			cube.SetMaterialTexture(1, drv.GetTexture("../../media/water.jpg"));
 			cube.SetMaterialFlag(MaterialFlag.Lighting, false);
 			cube.SetMaterialType(MaterialType.Reflection2Layer);
 
 			if (settings.BackColor == null)
 			{
 				smgr.AddSkyBoxSceneNode(
 					"../../media/irrlicht2_up.jpg",
 					"../../media/irrlicht2_dn.jpg",
 					"../../media/irrlicht2_lf.jpg",
 					"../../media/irrlicht2_rt.jpg",
 					"../../media/irrlicht2_ft.jpg",
 					"../../media/irrlicht2_bk.jpg");
 			}
 
 			dev.GUIEnvironment.AddImage(
 				drv.GetTexture("../../media/lime_logo_alpha.png"),
 				new Vector2Di(30, 0));
 
 			// draw all
 
 			int lastFPS = -1;
 			while (dev.Run())
 			{
 				if (settings.BackColor == null)
 					// indeed, we do not need to spend time on cleaning color buffer if we use skybox
 					drv.BeginScene(false);
 				else
 					drv.BeginScene(true, true, settings.BackColor);
 
 				smgr.DrawAll();
 				dev.GUIEnvironment.DrawAll();
 				drv.EndScene();
 
 				int fps = drv.FPS;
 				if (lastFPS != fps)
 				{
 					// report progress using common BackgroundWorker' method
 					// note
 					// because we are running another thread
 					worker.ReportProgress(fps, drv.Name);
 					lastFPS = fps;
 				}
 
 				// if we requested to stop, we close the device
 				if (worker.CancellationPending)
 					dev.Close();
 			}
 			while (dev.Run())
 			{
 				if (settings.BackColor == null)
 					// indeed, we do not need to spend time on cleaning color buffer if we use skybox
 					drv.BeginScene(false);
 				else
 					drv.BeginScene(true, true, settings.BackColor);
 
 				smgr.DrawAll();
 				dev.GUIEnvironment.DrawAll();
 				drv.EndScene();
 
 				int fps = drv.FPS;
 				if (lastFPS != fps)
 				{
 					// report progress using common BackgroundWorker' method
 					// note
 					// because we are running another thread
 					worker.ReportProgress(fps, drv.Name);
 					lastFPS = fps;
 				}
 
 				// if we requested to stop, we close the device
 				if (worker.CancellationPending)
 					dev.Close();
 			}
 
 			// drop device
 			dev.Drop();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L02.WinFormsWindow\Form1.cs" startline="165" endline="175"><![CDATA[
 
 		private void Form1_FormClosing(object sender, FormClosingEventArgs e)
 		{
 			// if background worker still running, we send request to stop
 			if (backgroundRendering.IsBusy)
 			{
 				backgroundRendering.CancelAsync();
 				e.Cancel = true;
 				userWantExit = true;
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L02.WinFormsWindow\Form1.cs" startline="176" endline="187"><![CDATA[
 
 		private void backgroundRendering_ProgressChanged(object sender, ProgressChangedEventArgs e)
 		{
 			// process reported progress
 
 			int f = e.ProgressPercentage;
 			string d = e.UserState as string;
 
 			labelRenderingStatus.Text = string.Format(
 				"Rendering {1} fps using {0} driver",
 				d, f);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L02.WinFormsWindow\Form1.cs" startline="188" endline="202"><![CDATA[
 
 		private void backgroundRendering_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
 		{
 			// if exception occured in rendering thread -- we display the message
 			if (e.Error != null)
 				MessageBox.Show(e.Error.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
 
 			// if user want exit - we close main form
 			// note
 			// so background worker not running
 			if (userWantExit)
 				Close();
 
 			labelRenderingStatus.Text = "No rendering";
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L02.WinFormsWindow\Form1.cs" startline="15" endline="21"><![CDATA[
 		{
 			if (disposing && (components != null))
 			{
 				components.Dispose();
 			}
 			base.Dispose(disposing);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L02.WinFormsWindow\Form1.cs" startline="22" endline="182"><![CDATA[
 
 		#region Windows Form Designer generated code
 
 		/// <summary>
 		/// Required method for Designer support - do not modify
 		/// the contents of this method with the code editor.
 		/// </summary>
 		private void InitializeComponent()
 		{
 			this.panelRenderingWindow = new System.Windows.Forms.Panel();
 			this.labelRenderingStatus = new System.Windows.Forms.Label();
 			this.backgroundRendering = new System.ComponentModel.BackgroundWorker();
 			this.comboBoxVideoDriver = new System.Windows.Forms.ComboBox();
 			this.checkBoxUseSeparateWindow = new System.Windows.Forms.CheckBox();
 			this.comboBoxAntiAliasing = new System.Windows.Forms.ComboBox();
 			this.label2 = new System.Windows.Forms.Label();
 			this.label3 = new System.Windows.Forms.Label();
 			this.comboBoxBackground = new System.Windows.Forms.ComboBox();
 			this.label4 = new System.Windows.Forms.Label();
 			this.checkBoxUseVSync = new System.Windows.Forms.CheckBox();
 			this.SuspendLayout();
 			// 
 			// panelRenderingWindow
 			// 
 			this.panelRenderingWindow.Location = new System.Drawing.Point(12, 85);
 			this.panelRenderingWindow.Name = "panelRenderingWindow";
 			this.panelRenderingWindow.Size = new System.Drawing.Size(540, 400);
 			this.panelRenderingWindow.TabIndex = 0;
 			// 
 			// labelRenderingStatus
 			// 
 			this.labelRenderingStatus.AutoSize = true;
 			this.labelRenderingStatus.Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(204)));
 			this.labelRenderingStatus.Location = new System.Drawing.Point(12, 64);
 			this.labelRenderingStatus.Name = "labelRenderingStatus";
 			this.labelRenderingStatus.Size = new System.Drawing.Size(187, 18);
 			this.labelRenderingStatus.TabIndex = 1;
 			this.labelRenderingStatus.Text = "Select video driver to use...";
 			// 
 			// backgroundRendering
 			// 
 			this.backgroundRendering.WorkerReportsProgress = true;
 			this.backgroundRendering.WorkerSupportsCancellation = true;
 			this.backgroundRendering.DoWork += new System.ComponentModel.DoWorkEventHandler(this.backgroundRendering_DoWork);
 			this.backgroundRendering.RunWorkerCompleted += new System.ComponentModel.RunWorkerCompletedEventHandler(this.backgroundRendering_RunWorkerCompleted);
 			this.backgroundRendering.ProgressChanged += new System.ComponentModel.ProgressChangedEventHandler(this.backgroundRendering_ProgressChanged);
 			// 
 			// comboBoxVideoDriver
 			// 
 			this.comboBoxVideoDriver.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
 			this.comboBoxVideoDriver.FormattingEnabled = true;
 			this.comboBoxVideoDriver.Location = new System.Drawing.Point(12, 32);
 			this.comboBoxVideoDriver.Name = "comboBoxVideoDriver";
 			this.comboBoxVideoDriver.Size = new System.Drawing.Size(130, 21);
 			this.comboBoxVideoDriver.TabIndex = 2;
 			this.comboBoxVideoDriver.SelectedIndexChanged += new System.EventHandler(this.initializeIrrlichtDevice);
 			// 
 			// checkBoxUseSeparateWindow
 			// 
 			this.checkBoxUseSeparateWindow.AutoSize = true;
 			this.checkBoxUseSeparateWindow.Location = new System.Drawing.Point(349, 38);
 			this.checkBoxUseSeparateWindow.Name = "checkBoxUseSeparateWindow";
 			this.checkBoxUseSeparateWindow.Size = new System.Drawing.Size(128, 17);
 			this.checkBoxUseSeparateWindow.TabIndex = 3;
 			this.checkBoxUseSeparateWindow.Text = "Use separate window";
 			this.checkBoxUseSeparateWindow.UseVisualStyleBackColor = true;
 			this.checkBoxUseSeparateWindow.CheckedChanged += new System.EventHandler(this.initializeIrrlichtDevice);
 			// 
 			// comboBoxAntiAliasing
 			// 
 			this.comboBoxAntiAliasing.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
 			this.comboBoxAntiAliasing.FormattingEnabled = true;
 			this.comboBoxAntiAliasing.Items.AddRange(new object[] {
             "No",
             "2x",
             "4x",
             "8x",
             "16x"});
 			this.comboBoxAntiAliasing.Location = new System.Drawing.Point(158, 32);
 			this.comboBoxAntiAliasing.Name = "comboBoxAntiAliasing";
 			this.comboBoxAntiAliasing.Size = new System.Drawing.Size(80, 21);
 			this.comboBoxAntiAliasing.TabIndex = 4;
 			this.comboBoxAntiAliasing.SelectedIndexChanged += new System.EventHandler(this.initializeIrrlichtDevice);
 			// 
 			// label2
 			// 
 			this.label2.AutoSize = true;
 			this.label2.Location = new System.Drawing.Point(12, 16);
 			this.label2.Name = "label2";
 			this.label2.Size = new System.Drawing.Size(63, 13);
 			this.label2.TabIndex = 5;
 			this.label2.Text = "Video driver";
 			// 
 			// label3
 			// 
 			this.label3.AutoSize = true;
 			this.label3.Location = new System.Drawing.Point(155, 16);
 			this.label3.Name = "label3";
 			this.label3.Size = new System.Drawing.Size(61, 13);
 			this.label3.TabIndex = 6;
 			this.label3.Text = "AntiAliasing";
 			// 
 			// comboBoxBackground
 			// 
 			this.comboBoxBackground.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
 			this.comboBoxBackground.FormattingEnabled = true;
 			this.comboBoxBackground.Items.AddRange(new object[] {
             "Skybox",
             "Black",
             "White"});
 			this.comboBoxBackground.Location = new System.Drawing.Point(253, 32);
 			this.comboBoxBackground.Name = "comboBoxBackground";
 			this.comboBoxBackground.Size = new System.Drawing.Size(80, 21);
 			this.comboBoxBackground.TabIndex = 7;
 			this.comboBoxBackground.SelectedIndexChanged += new System.EventHandler(this.initializeIrrlichtDevice);
 			// 
 			// label4
 			// 
 			this.label4.AutoSize = true;
 			this.label4.Location = new System.Drawing.Point(250, 16);
 			this.label4.Name = "label4";
 			this.label4.Size = new System.Drawing.Size(65, 13);
 			this.label4.TabIndex = 6;
 			this.label4.Text = "Background";
 			// 
 			// checkBoxUseVSync
 			// 
 			this.checkBoxUseVSync.AutoSize = true;
 			this.checkBoxUseVSync.Location = new System.Drawing.Point(349, 15);
 			this.checkBoxUseVSync.Name = "checkBoxUseVSync";
 			this.checkBoxUseVSync.Size = new System.Drawing.Size(79, 17);
 			this.checkBoxUseVSync.TabIndex = 8;
 			this.checkBoxUseVSync.Text = "Use VSync";
 			this.checkBoxUseVSync.UseVisualStyleBackColor = true;
 			this.checkBoxUseVSync.CheckedChanged += new System.EventHandler(this.initializeIrrlichtDevice);
 			// 
 			// Form1
 			// 
 			this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
 			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
 			this.ClientSize = new System.Drawing.Size(564, 497);
 			this.Controls.Add(this.checkBoxUseVSync);
 			this.Controls.Add(this.comboBoxBackground);
 			this.Controls.Add(this.label4);
 			this.Controls.Add(this.label3);
 			this.Controls.Add(this.label2);
 			this.Controls.Add(this.comboBoxAntiAliasing);
 			this.Controls.Add(this.checkBoxUseSeparateWindow);
 			this.Controls.Add(this.comboBoxVideoDriver);
 			this.Controls.Add(this.labelRenderingStatus);
 			this.Controls.Add(this.panelRenderingWindow);
 			this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;
 			this.MaximizeBox = false;
 			this.Name = "Form1";
 			this.Text = "WinForms window example - Irrlicht Engine";
 			this.Load += new System.EventHandler(this.Form1_Load);
 			this.FormClosing += new System.Windows.Forms.FormClosingEventHandler(this.Form1_FormClosing);
 			this.ResumeLayout(false);
 			this.PerformLayout();
 
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L02.WinFormsWindow\Program.cs" startline="15" endline="19"><![CDATA[
 		{
 			Application.EnableVisualStyles();
 			Application.SetCompatibleTextRenderingDefault(false);
 			Application.Run(new Form1());
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L02.WinFormsWindow\Properties\Resources.Designer.cs" startline="31" endline="33"><![CDATA[
         [global
         internal Resources() {
         }
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L02.WinFormsWindow\Properties\Resources.Designer.cs" startline="34" endline="46"><![CDATA[
         
         /// <summary>
         ///   Returns the cached ResourceManager instance used by this class.
         /// </summary>
         [global
         internal static global
             get {
                 if (object.ReferenceEquals(resourceMan, null)) {
                     global
                     resourceMan = temp;
                 }
                 return resourceMan;
             }
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L02.WinFormsWindow\Properties\Resources.Designer.cs" startline="47" endline="57"><![CDATA[
         }
         
         /// <summary>
         ///   Overrides the current thread's CurrentUICulture property for all
         ///   resource lookups using this strongly typed resource class.
         /// </summary>
         [global
         internal static global
             get {
                 return resourceCulture;
             }
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L02.WinFormsWindow\Properties\Resources.Designer.cs" startline="58" endline="60"><![CDATA[
             set {
                 resourceCulture = value;
             }
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L03.RGBSwirl\Program.cs" startline="16" endline="59"><![CDATA[
 		{
 			IrrlichtDevice device = IrrlichtDevice.CreateDevice(DriverType.Direct3D8, new Dimension2Di(800, 600));
 			device.SetWindowCaption("RGB swirl example - Irrlicht Lime");
 
 			VideoDriver driver = device.VideoDriver;
 			SceneManager scene = device.SceneManager;
 
 			var camera = scene.AddCameraSceneNode(null, new Vector3Df(0, 0, -15), new Vector3Df());
 			camera.ViewMatrixAffector = camera.ProjectionMatrix.GetInverse();
 
 			var lightRed = scene.AddLightSceneNode(null, new Vector3Df(0, 40, 0));
 			lightRed.LightData.DiffuseColor = new Colorf(1, 0, 0);
 			var a = scene.CreateFlyCircleAnimator(new Vector3Df(), 40, 0.0003f, new Vector3Df(0, 0, 1), 0.000f);
 			lightRed.AddAnimator(a);
 			a.Drop();
 
 			var lightGreen = scene.AddLightSceneNode(null, new Vector3Df(-30, -20, 0));
 			lightGreen.LightData.DiffuseColor = new Colorf(0, 1, 0);
 			a = scene.CreateFlyCircleAnimator(new Vector3Df(), 40, 0.0003f, new Vector3Df(0, 0, 1), 0.333f);
 			lightGreen.AddAnimator(a);
 			a.Drop();
 
 			var lightBlue = scene.AddLightSceneNode(null, new Vector3Df(30, -20, 0));
 			lightBlue.LightData.DiffuseColor = new Colorf(0, 0, 1);
 			a = scene.CreateFlyCircleAnimator(new Vector3Df(), 40, 0.0003f, new Vector3Df(0, 0, 1), 0.667f);
 			lightBlue.AddAnimator(a);
 			a.Drop();
 
 			var node = scene.AddSphereSceneNode(5.5f, 255);
 			node.SetMaterialFlag(MaterialFlag.BackFaceCulling, false);
 			node.SetMaterialFlag(MaterialFlag.PointCloud, true);
 			node.GetMaterial(0).Thickness = 4;
 
 			while (device.Run())
 			{
 				node.Rotation = new Vector3Df(device.Timer.Time / 1, device.Timer.Time / 2, device.Timer.Time / 3);
 
 				driver.BeginScene(false);
 				scene.DrawAll();
 				driver.EndScene();
 			}
 			while (device.Run())
 			{
 				node.Rotation = new Vector3Df(device.Timer.Time / 1, device.Timer.Time / 2, device.Timer.Time / 3);
 
 				driver.BeginScene(false);
 				scene.DrawAll();
 				driver.EndScene();
 			}
 
 			device.Drop();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L03.RGBSwirl\Program.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\MainForm.cs" startline="8" endline="20"><![CDATA[
 		private System.ComponentModel.IContainer components = null;
 		public MainForm()
 		{
 			InitializeComponent();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\MainForm.cs" startline="21" endline="26"><![CDATA[
 
 		private void MainForm_Load(object sender, EventArgs e)
 		{
 			refreshParticleList();
 			initViewport();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\MainForm.cs" startline="27" endline="32"><![CDATA[
 
 		private void initViewport()
 		{
 			viewport = new Viewport();
 			viewport.Start(panelViewport.Handle);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\MainForm.cs" startline="33" endline="37"><![CDATA[
 
 		private void MainForm_FormClosed(object sender, FormClosedEventArgs e)
 		{
 			viewport.Stop();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\MainForm.cs" startline="38" endline="49"><![CDATA[
 
 		private void refreshParticleList()
 		{
 			listBoxParticleList.Items.Clear();
 
 			string[] l = Directory.GetFiles("../../media", "*particle*", SearchOption.TopDirectoryOnly);
 			foreach (string f in l)
 				addImageToParticleList(f, false);
 			foreach (string f in l)
 				addImageToParticleList(f, false);
 
 			if (listBoxParticleList.Items.Count > 0)
 				listBoxParticleList.SelectedIndex = 0;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\MainForm.cs" startline="50" endline="64"><![CDATA[
 
 		private void addImageToParticleList(string f, bool makeThisImageSelected)
 		{
 			Image i = new Bitmap(f);
 
 			ParticleInfo p = new ParticleInfo();
 			p.FileName = f;
 			p.Preview = i.GetThumbnailImage(128, 128, null, IntPtr.Zero);
 			p.DisplayName = Path.GetFileName(f) + " (" + i.Width + "x" + i.Height + ")";
 
 			int s = listBoxParticleList.Items.Add(p);
 
 			if (makeThisImageSelected)
 				listBoxParticleList.SelectedIndex = s;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\MainForm.cs" startline="65" endline="76"><![CDATA[
 
 		private void listBoxParticleList_SelectedIndexChanged(object sender, EventArgs e)
 		{
 			ParticleInfo p = listBoxParticleList.SelectedItem as ParticleInfo;
 			if (p != null)
 			{
 				if (viewport != null)
 					viewport.EnqueueCommand(CommandType.Particle, p);
 
 				pictureBoxParticlePreview.Image = p.Preview;
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\MainForm.cs" startline="77" endline="86"><![CDATA[
 
 		private void buttonBrowseForTexture_Click(object sender, EventArgs e)
 		{
 			OpenFileDialog f = new OpenFileDialog();
 			f.Filter = "Image files (*.bmp;*.jpg;*.png;*.tga)|*.bmp;*.jpg;*.png;*.tga|All files (*.*)|*.*";
 			DialogResult r = f.ShowDialog();
 
 			if (r == DialogResult.OK)
 				addImageToParticleList(f.FileName, true);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\MainForm.cs" startline="87" endline="91"><![CDATA[
 
 		private void checkBoxAxes_CheckedChanged(object sender, EventArgs e)
 		{
 			viewport.EnqueueCommand(CommandType.Axes, checkBoxAxes.Checked);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\MainForm.cs" startline="92" endline="96"><![CDATA[
 
 		private void checkBoxPlane_CheckedChanged(object sender, EventArgs e)
 		{
 			viewport.EnqueueCommand(CommandType.Plane, checkBoxPlane.Checked);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\MainForm.cs" startline="97" endline="101"><![CDATA[
 
 		private void checkBoxEmitt_CheckedChanged(object sender, EventArgs e)
 		{
 			viewport.EnqueueCommand(CommandType.Rate, checkBoxEmitt.Checked ? trackBarRate.Value 
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\MainForm.cs" startline="102" endline="110"><![CDATA[
 
 		private void MainForm_Resize(object sender, EventArgs e)
 		{
 			viewport.EnqueueCommand(CommandType.Resize, new int[3] {
 				panelViewport.ClientSize.Width,
 				panelViewport.ClientSize.Height,
 				checkBoxKeepAspect.Checked ? 1 
 			});
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\MainForm.cs" startline="111" endline="115"><![CDATA[
 
 		private void trackBarPosition_Scroll(object sender, EventArgs e)
 		{
 			viewport.EnqueueCommand(CommandType.Position, new float[3] { trackBarPosition.Value, 0, 0 });
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\MainForm.cs" startline="116" endline="120"><![CDATA[
 
 		private void trackBarRadius_Scroll(object sender, EventArgs e)
 		{
 			viewport.EnqueueCommand(CommandType.Radius, (float)trackBarRadius.Value);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\MainForm.cs" startline="121" endline="125"><![CDATA[
 
 		private void trackBarCameraView_Scroll(object sender, EventArgs e)
 		{
 			viewport.EnqueueCommand(CommandType.CameraView, (float)trackBarCameraView.Value);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\MainForm.cs" startline="126" endline="131"><![CDATA[
 
 		private void trackBarRate_Scroll(object sender, EventArgs e)
 		{
 			if (checkBoxEmitt.Checked)
 				viewport.EnqueueCommand(CommandType.Rate, trackBarRate.Value);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\MainForm.cs" startline="132" endline="136"><![CDATA[
 
 		private void trackBarSize_Scroll(object sender, EventArgs e)
 		{
 			viewport.EnqueueCommand(CommandType.Size, trackBarSize.Value);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\MainForm.cs" startline="137" endline="145"><![CDATA[
 
 		private void trackBarDirection_Scroll(object sender, EventArgs e)
 		{
 			viewport.EnqueueCommand(CommandType.Direction, new float[3] {
 				trackBarDirectionX.Value / 100.0f,
 				trackBarDirectionY.Value / 100.0f,
 				trackBarDirectionZ.Value / 100.0f
 			});
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\MainForm.cs" startline="146" endline="150"><![CDATA[
 
 		private void checkBoxAffectorFadeOut_CheckedChanged(object sender, EventArgs e)
 		{
 			viewport.EnqueueCommand(CommandType.FadeOut, checkBoxAffectorFadeOut.Checked);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\MainForm.cs" startline="151" endline="155"><![CDATA[
 
 		private void checkBoxAffectorRotation_CheckedChanged(object sender, EventArgs e)
 		{
 			viewport.EnqueueCommand(CommandType.Rotation, checkBoxAffectorRotation.Checked);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\MainForm.cs" startline="156" endline="160"><![CDATA[
 
 		private void checkBoxAffectorGravity_CheckedChanged(object sender, EventArgs e)
 		{
 			viewport.EnqueueCommand(CommandType.Gravity, checkBoxAffectorGravity.Checked);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\MainForm.cs" startline="15" endline="21"><![CDATA[
 		{
 			if (disposing && (components != null))
 			{
 				components.Dispose();
 			}
 			base.Dispose(disposing);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\MainForm.cs" startline="22" endline="487"><![CDATA[
 
 		#region Windows Form Designer generated code
 
 		/// <summary>
 		/// Required method for Designer support - do not modify
 		/// the contents of this method with the code editor.
 		/// </summary>
 		private void InitializeComponent()
 		{
 			this.groupBox1 = new System.Windows.Forms.GroupBox();
 			this.pictureBoxParticlePreview = new System.Windows.Forms.PictureBox();
 			this.listBoxParticleList = new System.Windows.Forms.ListBox();
 			this.groupBox2 = new System.Windows.Forms.GroupBox();
 			this.label3 = new System.Windows.Forms.Label();
 			this.checkBoxPlane = new System.Windows.Forms.CheckBox();
 			this.checkBoxAxes = new System.Windows.Forms.CheckBox();
 			this.trackBarCameraView = new System.Windows.Forms.TrackBar();
 			this.panelViewport = new System.Windows.Forms.Panel();
 			this.groupBox3 = new System.Windows.Forms.GroupBox();
 			this.label6 = new System.Windows.Forms.Label();
 			this.label5 = new System.Windows.Forms.Label();
 			this.label4 = new System.Windows.Forms.Label();
 			this.label2 = new System.Windows.Forms.Label();
 			this.trackBarDirectionZ = new System.Windows.Forms.TrackBar();
 			this.trackBarDirectionY = new System.Windows.Forms.TrackBar();
 			this.trackBarDirectionX = new System.Windows.Forms.TrackBar();
 			this.trackBarSize = new System.Windows.Forms.TrackBar();
 			this.label1 = new System.Windows.Forms.Label();
 			this.trackBarRate = new System.Windows.Forms.TrackBar();
 			this.trackBarRadius = new System.Windows.Forms.TrackBar();
 			this.trackBarPosition = new System.Windows.Forms.TrackBar();
 			this.checkBoxEmitt = new System.Windows.Forms.CheckBox();
 			this.groupBox4 = new System.Windows.Forms.GroupBox();
 			this.checkBoxAffectorRotation = new System.Windows.Forms.CheckBox();
 			this.checkBoxAffectorGravity = new System.Windows.Forms.CheckBox();
 			this.checkBoxAffectorFadeOut = new System.Windows.Forms.CheckBox();
 			this.checkBoxKeepAspect = new System.Windows.Forms.CheckBox();
 			this.label7 = new System.Windows.Forms.Label();
 			this.buttonBrowseForTexture = new System.Windows.Forms.Button();
 			this.groupBox1.SuspendLayout();
 			((System.ComponentModel.ISupportInitialize)(this.pictureBoxParticlePreview)).BeginInit();
 			this.groupBox2.SuspendLayout();
 			((System.ComponentModel.ISupportInitialize)(this.trackBarCameraView)).BeginInit();
 			this.groupBox3.SuspendLayout();
 			((System.ComponentModel.ISupportInitialize)(this.trackBarDirectionZ)).BeginInit();
 			((System.ComponentModel.ISupportInitialize)(this.trackBarDirectionY)).BeginInit();
 			((System.ComponentModel.ISupportInitialize)(this.trackBarDirectionX)).BeginInit();
 			((System.ComponentModel.ISupportInitialize)(this.trackBarSize)).BeginInit();
 			((System.ComponentModel.ISupportInitialize)(this.trackBarRate)).BeginInit();
 			((System.ComponentModel.ISupportInitialize)(this.trackBarRadius)).BeginInit();
 			((System.ComponentModel.ISupportInitialize)(this.trackBarPosition)).BeginInit();
 			this.groupBox4.SuspendLayout();
 			this.SuspendLayout();
 			// 
 			// groupBox1
 			// 
 			this.groupBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
 						| System.Windows.Forms.AnchorStyles.Left)));
 			this.groupBox1.Controls.Add(this.buttonBrowseForTexture);
 			this.groupBox1.Controls.Add(this.label7);
 			this.groupBox1.Controls.Add(this.pictureBoxParticlePreview);
 			this.groupBox1.Controls.Add(this.listBoxParticleList);
 			this.groupBox1.Location = new System.Drawing.Point(12, 12);
 			this.groupBox1.Name = "groupBox1";
 			this.groupBox1.Size = new System.Drawing.Size(140, 380);
 			this.groupBox1.TabIndex = 0;
 			this.groupBox1.TabStop = false;
 			this.groupBox1.Text = "Particle Texture";
 			// 
 			// pictureBoxParticlePreview
 			// 
 			this.pictureBoxParticlePreview.Location = new System.Drawing.Point(6, 19);
 			this.pictureBoxParticlePreview.Name = "pictureBoxParticlePreview";
 			this.pictureBoxParticlePreview.Size = new System.Drawing.Size(128, 128);
 			this.pictureBoxParticlePreview.SizeMode = System.Windows.Forms.PictureBoxSizeMode.Zoom;
 			this.pictureBoxParticlePreview.TabIndex = 1;
 			this.pictureBoxParticlePreview.TabStop = false;
 			// 
 			// listBoxParticleList
 			// 
 			this.listBoxParticleList.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
 						| System.Windows.Forms.AnchorStyles.Left)));
 			this.listBoxParticleList.FormattingEnabled = true;
 			this.listBoxParticleList.IntegralHeight = false;
 			this.listBoxParticleList.Location = new System.Drawing.Point(6, 153);
 			this.listBoxParticleList.Name = "listBoxParticleList";
 			this.listBoxParticleList.Size = new System.Drawing.Size(128, 80);
 			this.listBoxParticleList.TabIndex = 0;
 			this.listBoxParticleList.SelectedIndexChanged += new System.EventHandler(this.listBoxParticleList_SelectedIndexChanged);
 			// 
 			// groupBox2
 			// 
 			this.groupBox2.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
 						| System.Windows.Forms.AnchorStyles.Left)
 						| System.Windows.Forms.AnchorStyles.Right)));
 			this.groupBox2.Controls.Add(this.label3);
 			this.groupBox2.Controls.Add(this.checkBoxPlane);
 			this.groupBox2.Controls.Add(this.checkBoxKeepAspect);
 			this.groupBox2.Controls.Add(this.checkBoxAxes);
 			this.groupBox2.Controls.Add(this.trackBarCameraView);
 			this.groupBox2.Controls.Add(this.panelViewport);
 			this.groupBox2.Location = new System.Drawing.Point(158, 12);
 			this.groupBox2.Name = "groupBox2";
 			this.groupBox2.Size = new System.Drawing.Size(412, 380);
 			this.groupBox2.TabIndex = 1;
 			this.groupBox2.TabStop = false;
 			this.groupBox2.Text = "Viewport";
 			// 
 			// label3
 			// 
 			this.label3.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
 			this.label3.AutoSize = true;
 			this.label3.Location = new System.Drawing.Point(141, 332);
 			this.label3.Name = "label3";
 			this.label3.Size = new System.Drawing.Size(69, 13);
 			this.label3.TabIndex = 2;
 			this.label3.Text = "Camera View";
 			// 
 			// checkBoxPlane
 			// 
 			this.checkBoxPlane.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
 			this.checkBoxPlane.AutoSize = true;
 			this.checkBoxPlane.Checked = true;
 			this.checkBoxPlane.CheckState = System.Windows.Forms.CheckState.Checked;
 			this.checkBoxPlane.Location = new System.Drawing.Point(6, 325);
 			this.checkBoxPlane.Name = "checkBoxPlane";
 			this.checkBoxPlane.Size = new System.Drawing.Size(53, 17);
 			this.checkBoxPlane.TabIndex = 2;
 			this.checkBoxPlane.Text = "Plane";
 			this.checkBoxPlane.UseVisualStyleBackColor = true;
 			this.checkBoxPlane.CheckedChanged += new System.EventHandler(this.checkBoxPlane_CheckedChanged);
 			// 
 			// checkBoxAxes
 			// 
 			this.checkBoxAxes.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
 			this.checkBoxAxes.AutoSize = true;
 			this.checkBoxAxes.Location = new System.Drawing.Point(65, 325);
 			this.checkBoxAxes.Name = "checkBoxAxes";
 			this.checkBoxAxes.Size = new System.Drawing.Size(49, 17);
 			this.checkBoxAxes.TabIndex = 1;
 			this.checkBoxAxes.Text = "Axes";
 			this.checkBoxAxes.UseVisualStyleBackColor = true;
 			this.checkBoxAxes.CheckedChanged += new System.EventHandler(this.checkBoxAxes_CheckedChanged);
 			// 
 			// trackBarCameraView
 			// 
 			this.trackBarCameraView.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
 			this.trackBarCameraView.AutoSize = false;
 			this.trackBarCameraView.LargeChange = 10;
 			this.trackBarCameraView.Location = new System.Drawing.Point(6, 348);
 			this.trackBarCameraView.Maximum = 250;
 			this.trackBarCameraView.Minimum = -100;
 			this.trackBarCameraView.Name = "trackBarCameraView";
 			this.trackBarCameraView.Size = new System.Drawing.Size(204, 26);
 			this.trackBarCameraView.TabIndex = 1;
 			this.trackBarCameraView.TickFrequency = 10;
 			this.trackBarCameraView.Value = 80;
 			this.trackBarCameraView.Scroll += new System.EventHandler(this.trackBarCameraView_Scroll);
 			// 
 			// panelViewport
 			// 
 			this.panelViewport.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
 						| System.Windows.Forms.AnchorStyles.Left)
 						| System.Windows.Forms.AnchorStyles.Right)));
 			this.panelViewport.Location = new System.Drawing.Point(6, 19);
 			this.panelViewport.Name = "panelViewport";
 			this.panelViewport.Size = new System.Drawing.Size(400, 300);
 			this.panelViewport.TabIndex = 0;
 			// 
 			// groupBox3
 			// 
 			this.groupBox3.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
 			this.groupBox3.Controls.Add(this.label6);
 			this.groupBox3.Controls.Add(this.label5);
 			this.groupBox3.Controls.Add(this.label4);
 			this.groupBox3.Controls.Add(this.label2);
 			this.groupBox3.Controls.Add(this.trackBarDirectionZ);
 			this.groupBox3.Controls.Add(this.trackBarDirectionY);
 			this.groupBox3.Controls.Add(this.trackBarDirectionX);
 			this.groupBox3.Controls.Add(this.trackBarSize);
 			this.groupBox3.Controls.Add(this.label1);
 			this.groupBox3.Controls.Add(this.trackBarRate);
 			this.groupBox3.Controls.Add(this.trackBarRadius);
 			this.groupBox3.Controls.Add(this.trackBarPosition);
 			this.groupBox3.Controls.Add(this.checkBoxEmitt);
 			this.groupBox3.Location = new System.Drawing.Point(576, 12);
 			this.groupBox3.Name = "groupBox3";
 			this.groupBox3.Size = new System.Drawing.Size(216, 274);
 			this.groupBox3.TabIndex = 2;
 			this.groupBox3.TabStop = false;
 			this.groupBox3.Text = "Emitter";
 			// 
 			// label6
 			// 
 			this.label6.AutoSize = true;
 			this.label6.Location = new System.Drawing.Point(6, 223);
 			this.label6.Name = "label6";
 			this.label6.Size = new System.Drawing.Size(91, 13);
 			this.label6.TabIndex = 2;
 			this.label6.Text = "Direction (X, Y, Z)";
 			// 
 			// label5
 			// 
 			this.label5.AutoSize = true;
 			this.label5.Location = new System.Drawing.Point(6, 178);
 			this.label5.Name = "label5";
 			this.label5.Size = new System.Drawing.Size(27, 13);
 			this.label5.TabIndex = 2;
 			this.label5.Text = "Size";
 			// 
 			// label4
 			// 
 			this.label4.AutoSize = true;
 			this.label4.Location = new System.Drawing.Point(6, 133);
 			this.label4.Name = "label4";
 			this.label4.Size = new System.Drawing.Size(30, 13);
 			this.label4.TabIndex = 2;
 			this.label4.Text = "Rate";
 			// 
 			// label2
 			// 
 			this.label2.AutoSize = true;
 			this.label2.Location = new System.Drawing.Point(6, 88);
 			this.label2.Name = "label2";
 			this.label2.Size = new System.Drawing.Size(40, 13);
 			this.label2.TabIndex = 2;
 			this.label2.Text = "Radius";
 			// 
 			// trackBarDirectionZ
 			// 
 			this.trackBarDirectionZ.AutoSize = false;
 			this.trackBarDirectionZ.LargeChange = 20;
 			this.trackBarDirectionZ.Location = new System.Drawing.Point(148, 239);
 			this.trackBarDirectionZ.Maximum = 50;
 			this.trackBarDirectionZ.Minimum = -50;
 			this.trackBarDirectionZ.Name = "trackBarDirectionZ";
 			this.trackBarDirectionZ.Size = new System.Drawing.Size(62, 26);
 			this.trackBarDirectionZ.TabIndex = 1;
 			this.trackBarDirectionZ.TickFrequency = 10;
 			this.trackBarDirectionZ.Scroll += new System.EventHandler(this.trackBarDirection_Scroll);
 			// 
 			// trackBarDirectionY
 			// 
 			this.trackBarDirectionY.AutoSize = false;
 			this.trackBarDirectionY.LargeChange = 20;
 			this.trackBarDirectionY.Location = new System.Drawing.Point(78, 239);
 			this.trackBarDirectionY.Maximum = 50;
 			this.trackBarDirectionY.Minimum = -50;
 			this.trackBarDirectionY.Name = "trackBarDirectionY";
 			this.trackBarDirectionY.Size = new System.Drawing.Size(62, 26);
 			this.trackBarDirectionY.TabIndex = 1;
 			this.trackBarDirectionY.TickFrequency = 10;
 			this.trackBarDirectionY.Value = 10;
 			this.trackBarDirectionY.Scroll += new System.EventHandler(this.trackBarDirection_Scroll);
 			// 
 			// trackBarDirectionX
 			// 
 			this.trackBarDirectionX.AutoSize = false;
 			this.trackBarDirectionX.LargeChange = 20;
 			this.trackBarDirectionX.Location = new System.Drawing.Point(10, 239);
 			this.trackBarDirectionX.Maximum = 50;
 			this.trackBarDirectionX.Minimum = -50;
 			this.trackBarDirectionX.Name = "trackBarDirectionX";
 			this.trackBarDirectionX.Size = new System.Drawing.Size(62, 26);
 			this.trackBarDirectionX.TabIndex = 1;
 			this.trackBarDirectionX.TickFrequency = 10;
 			this.trackBarDirectionX.Scroll += new System.EventHandler(this.trackBarDirection_Scroll);
 			// 
 			// trackBarSize
 			// 
 			this.trackBarSize.AutoSize = false;
 			this.trackBarSize.LargeChange = 10;
 			this.trackBarSize.Location = new System.Drawing.Point(5, 194);
 			this.trackBarSize.Maximum = 200;
 			this.trackBarSize.Minimum = 5;
 			this.trackBarSize.Name = "trackBarSize";
 			this.trackBarSize.Size = new System.Drawing.Size(205, 26);
 			this.trackBarSize.TabIndex = 1;
 			this.trackBarSize.TickFrequency = 10;
 			this.trackBarSize.Value = 40;
 			this.trackBarSize.Scroll += new System.EventHandler(this.trackBarSize_Scroll);
 			// 
 			// label1
 			// 
 			this.label1.AutoSize = true;
 			this.label1.Location = new System.Drawing.Point(7, 43);
 			this.label1.Name = "label1";
 			this.label1.Size = new System.Drawing.Size(60, 13);
 			this.label1.TabIndex = 2;
 			this.label1.Text = "Position (X)";
 			// 
 			// trackBarRate
 			// 
 			this.trackBarRate.AutoSize = false;
 			this.trackBarRate.LargeChange = 100;
 			this.trackBarRate.Location = new System.Drawing.Point(5, 149);
 			this.trackBarRate.Maximum = 2000;
 			this.trackBarRate.Minimum = 50;
 			this.trackBarRate.Name = "trackBarRate";
 			this.trackBarRate.Size = new System.Drawing.Size(205, 26);
 			this.trackBarRate.TabIndex = 1;
 			this.trackBarRate.TickFrequency = 50;
 			this.trackBarRate.Value = 300;
 			this.trackBarRate.Scroll += new System.EventHandler(this.trackBarRate_Scroll);
 			// 
 			// trackBarRadius
 			// 
 			this.trackBarRadius.AutoSize = false;
 			this.trackBarRadius.LargeChange = 10;
 			this.trackBarRadius.Location = new System.Drawing.Point(5, 104);
 			this.trackBarRadius.Maximum = 100;
 			this.trackBarRadius.Minimum = 1;
 			this.trackBarRadius.Name = "trackBarRadius";
 			this.trackBarRadius.Size = new System.Drawing.Size(205, 26);
 			this.trackBarRadius.TabIndex = 1;
 			this.trackBarRadius.TickFrequency = 10;
 			this.trackBarRadius.Value = 20;
 			this.trackBarRadius.Scroll += new System.EventHandler(this.trackBarRadius_Scroll);
 			// 
 			// trackBarPosition
 			// 
 			this.trackBarPosition.AutoSize = false;
 			this.trackBarPosition.LargeChange = 10;
 			this.trackBarPosition.Location = new System.Drawing.Point(6, 59);
 			this.trackBarPosition.Maximum = 100;
 			this.trackBarPosition.Minimum = -100;
 			this.trackBarPosition.Name = "trackBarPosition";
 			this.trackBarPosition.Size = new System.Drawing.Size(204, 26);
 			this.trackBarPosition.TabIndex = 1;
 			this.trackBarPosition.TickFrequency = 10;
 			this.trackBarPosition.Scroll += new System.EventHandler(this.trackBarPosition_Scroll);
 			// 
 			// checkBoxEmitt
 			// 
 			this.checkBoxEmitt.AutoSize = true;
 			this.checkBoxEmitt.Checked = true;
 			this.checkBoxEmitt.CheckState = System.Windows.Forms.CheckState.Checked;
 			this.checkBoxEmitt.Location = new System.Drawing.Point(6, 19);
 			this.checkBoxEmitt.Name = "checkBoxEmitt";
 			this.checkBoxEmitt.Size = new System.Drawing.Size(49, 17);
 			this.checkBoxEmitt.TabIndex = 0;
 			this.checkBoxEmitt.Text = "Emitt";
 			this.checkBoxEmitt.UseVisualStyleBackColor = true;
 			this.checkBoxEmitt.CheckedChanged += new System.EventHandler(this.checkBoxEmitt_CheckedChanged);
 			// 
 			// groupBox4
 			// 
 			this.groupBox4.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
 			this.groupBox4.Controls.Add(this.checkBoxAffectorRotation);
 			this.groupBox4.Controls.Add(this.checkBoxAffectorGravity);
 			this.groupBox4.Controls.Add(this.checkBoxAffectorFadeOut);
 			this.groupBox4.Location = new System.Drawing.Point(576, 292);
 			this.groupBox4.Name = "groupBox4";
 			this.groupBox4.Size = new System.Drawing.Size(216, 100);
 			this.groupBox4.TabIndex = 3;
 			this.groupBox4.TabStop = false;
 			this.groupBox4.Text = "Affectors";
 			// 
 			// checkBoxAffectorRotation
 			// 
 			this.checkBoxAffectorRotation.AutoSize = true;
 			this.checkBoxAffectorRotation.Checked = true;
 			this.checkBoxAffectorRotation.CheckState = System.Windows.Forms.CheckState.Checked;
 			this.checkBoxAffectorRotation.Location = new System.Drawing.Point(6, 42);
 			this.checkBoxAffectorRotation.Name = "checkBoxAffectorRotation";
 			this.checkBoxAffectorRotation.Size = new System.Drawing.Size(66, 17);
 			this.checkBoxAffectorRotation.TabIndex = 0;
 			this.checkBoxAffectorRotation.Text = "Rotation";
 			this.checkBoxAffectorRotation.UseVisualStyleBackColor = true;
 			this.checkBoxAffectorRotation.CheckedChanged += new System.EventHandler(this.checkBoxAffectorRotation_CheckedChanged);
 			// 
 			// checkBoxAffectorGravity
 			// 
 			this.checkBoxAffectorGravity.AutoSize = true;
 			this.checkBoxAffectorGravity.Location = new System.Drawing.Point(6, 65);
 			this.checkBoxAffectorGravity.Name = "checkBoxAffectorGravity";
 			this.checkBoxAffectorGravity.Size = new System.Drawing.Size(59, 17);
 			this.checkBoxAffectorGravity.TabIndex = 0;
 			this.checkBoxAffectorGravity.Text = "Gravity";
 			this.checkBoxAffectorGravity.UseVisualStyleBackColor = true;
 			this.checkBoxAffectorGravity.CheckedChanged += new System.EventHandler(this.checkBoxAffectorGravity_CheckedChanged);
 			// 
 			// checkBoxAffectorFadeOut
 			// 
 			this.checkBoxAffectorFadeOut.AutoSize = true;
 			this.checkBoxAffectorFadeOut.Checked = true;
 			this.checkBoxAffectorFadeOut.CheckState = System.Windows.Forms.CheckState.Checked;
 			this.checkBoxAffectorFadeOut.Location = new System.Drawing.Point(6, 19);
 			this.checkBoxAffectorFadeOut.Name = "checkBoxAffectorFadeOut";
 			this.checkBoxAffectorFadeOut.Size = new System.Drawing.Size(68, 17);
 			this.checkBoxAffectorFadeOut.TabIndex = 0;
 			this.checkBoxAffectorFadeOut.Text = "Fade out";
 			this.checkBoxAffectorFadeOut.UseVisualStyleBackColor = true;
 			this.checkBoxAffectorFadeOut.CheckedChanged += new System.EventHandler(this.checkBoxAffectorFadeOut_CheckedChanged);
 			// 
 			// checkBoxKeepAspect
 			// 
 			this.checkBoxKeepAspect.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
 			this.checkBoxKeepAspect.AutoSize = true;
 			this.checkBoxKeepAspect.Checked = true;
 			this.checkBoxKeepAspect.CheckState = System.Windows.Forms.CheckState.Checked;
 			this.checkBoxKeepAspect.Location = new System.Drawing.Point(297, 325);
 			this.checkBoxKeepAspect.Name = "checkBoxKeepAspect";
 			this.checkBoxKeepAspect.Size = new System.Drawing.Size(109, 17);
 			this.checkBoxKeepAspect.TabIndex = 1;
 			this.checkBoxKeepAspect.Text = "Keep aspect ratio";
 			this.checkBoxKeepAspect.UseVisualStyleBackColor = true;
 			this.checkBoxKeepAspect.CheckedChanged += new System.EventHandler(this.MainForm_Resize);
 			// 
 			// label7
 			// 
 			this.label7.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
 			this.label7.Enabled = false;
 			this.label7.Location = new System.Drawing.Point(6, 236);
 			this.label7.Name = "label7";
 			this.label7.Size = new System.Drawing.Size(128, 80);
 			this.label7.TabIndex = 2;
 			this.label7.Text = "Above listed files with the \"particle\" word in its name from \"media\" folder only." +
 				" Use button below to add your own texture to the list.";
 			this.label7.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
 			// 
 			// buttonBrowseForTexture
 			// 
 			this.buttonBrowseForTexture.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
 			this.buttonBrowseForTexture.Location = new System.Drawing.Point(6, 322);
 			this.buttonBrowseForTexture.Name = "buttonBrowseForTexture";
 			this.buttonBrowseForTexture.Size = new System.Drawing.Size(128, 52);
 			this.buttonBrowseForTexture.TabIndex = 3;
 			this.buttonBrowseForTexture.Text = "Browse for own texture...";
 			this.buttonBrowseForTexture.UseVisualStyleBackColor = true;
 			this.buttonBrowseForTexture.Click += new System.EventHandler(this.buttonBrowseForTexture_Click);
 			// 
 			// MainForm
 			// 
 			this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
 			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
 			this.ClientSize = new System.Drawing.Size(804, 404);
 			this.Controls.Add(this.groupBox4);
 			this.Controls.Add(this.groupBox3);
 			this.Controls.Add(this.groupBox2);
 			this.Controls.Add(this.groupBox1);
 			this.MinimumSize = new System.Drawing.Size(820, 442);
 			this.Name = "MainForm";
 			this.Text = "Particle Emitter Viewer - Irrlicht Lime";
 			this.Load += new System.EventHandler(this.MainForm_Load);
 			this.FormClosed += new System.Windows.Forms.FormClosedEventHandler(this.MainForm_FormClosed);
 			this.Resize += new System.EventHandler(this.MainForm_Resize);
 			this.groupBox1.ResumeLayout(false);
 			((System.ComponentModel.ISupportInitialize)(this.pictureBoxParticlePreview)).EndInit();
 			this.groupBox2.ResumeLayout(false);
 			this.groupBox2.PerformLayout();
 			((System.ComponentModel.ISupportInitialize)(this.trackBarCameraView)).EndInit();
 			this.groupBox3.ResumeLayout(false);
 			this.groupBox3.PerformLayout();
 			((System.ComponentModel.ISupportInitialize)(this.trackBarDirectionZ)).EndInit();
 			((System.ComponentModel.ISupportInitialize)(this.trackBarDirectionY)).EndInit();
 			((System.ComponentModel.ISupportInitialize)(this.trackBarDirectionX)).EndInit();
 			((System.ComponentModel.ISupportInitialize)(this.trackBarSize)).EndInit();
 			((System.ComponentModel.ISupportInitialize)(this.trackBarRate)).EndInit();
 			((System.ComponentModel.ISupportInitialize)(this.trackBarRadius)).EndInit();
 			((System.ComponentModel.ISupportInitialize)(this.trackBarPosition)).EndInit();
 			this.groupBox4.ResumeLayout(false);
 			this.groupBox4.PerformLayout();
 			this.ResumeLayout(false);
 
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\MainForm.cs" startline="19" endline="21"><![CDATA[
 		{
 			return DisplayName;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\MainForm.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\MainForm.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\MainForm.cs" startline="21" endline="23"><![CDATA[
             get {
                 return defaultInstance;
             }
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\MainForm.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\MainForm.cs" startline="18" endline="18"><![CDATA[
         private static Settings defaultInstance = ((Settings)(global
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\MainForm.cs" startline="25" endline="40"><![CDATA[
 		{
 			if (irrThread != null)
 				throw new InvalidOperationException("Previous viewport needs to be stopped!");
 
 			commandQueue = new Queue<Command>();
 
 			irrThread = new Thread(new ParameterizedThreadStart(irrThreadMain));
 			irrThread.Name = "Irrlicht rendering";
 
 			IrrlichtCreationParameters p = new IrrlichtCreationParameters();
 			//p.AntiAliasing = 4;
 			p.DriverType = DriverType.Direct3D8;
 			p.WindowID = windowHandle;
 
 			irrThread.Start(p);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\MainForm.cs" startline="41" endline="51"><![CDATA[
 
 		public void Stop()
 		{
 			EnqueueCommand(CommandType.Abort, null);
 			irrThread.Join(200);
 
 			if (irrThread.IsAlive)
 				irrThread.Abort();
 
 			irrThread = null;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\MainForm.cs" startline="52" endline="90"><![CDATA[
 
 		public void EnqueueCommand(CommandType type, object param)
 		{
 			Command c = new Command();
 			c.Type = type;
 			c.Param = param;
 
 			// If this is Abort command -- we clean up all the queue (all old commands that still waiting
 			// for processing) and add this Abort command, since it is a top priority command.
 			if (c.Type == CommandType.Abort)
 			{
 				lock (commandQueue)
 				{
 					commandQueue.Clear();
 					commandQueue.Enqueue(c);
 				}
 				return;
 			}
 
 			// We check for old same command and use it instead of adding new one -- for optimization.
 			// This way we make not more than only one command of same type to be in the queue.
 			lock (commandQueue)
 			{
 				foreach (Command n in commandQueue)
 				{
 					if (n.Type == c.Type)
 					{
 						n.Param = c.Param;
 						return;
 					}
 				}
 				foreach (Command n in commandQueue)
 				{
 					if (n.Type == c.Type)
 					{
 						n.Param = c.Param;
 						return;
 					}
 				}
 			}
 
 			// We add new command to queue.
 			lock (commandQueue)
 			{
 				commandQueue.Enqueue(c);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\MainForm.cs" startline="91" endline="210"><![CDATA[
 
 		enum SceneNodeID
 		{
 			Camera,
 			AxisX,
 			AxisY,
 			AxisZ,
 			Plane,
 			ParticleSystem
 		}
 
 		ParticleFadeOutAffector affFadeOut; // We store these pointers because when affector once added
 		ParticleGravityAffector affGravity; // to particle system, there is no any method to retrieve
 		ParticleRotationAffector affRotation; // its pointer back later 
 
 		void irrThreadMain(object args)
 		{
 			irrDevice = IrrlichtDevice.CreateDevice(args as IrrlichtCreationParameters);
 
 			// Camera
 
 			CameraSceneNode camera = irrDevice.SceneManager.AddCameraSceneNode(null, new Vector3Df(0), new Vector3Df(0, 80, 0), (int)SceneNodeID.Camera);
 			SceneNodeAnimator anim = irrDevice.SceneManager.CreateFlyCircleAnimator(new Vector3Df(0, 100, 0), 200.0f, 0.0002f);
 			camera.AddAnimator(anim);
 			anim.Drop();
 
 			// Skydome
 
 			irrDevice.SceneManager.AddSkyDomeSceneNode(irrDevice.VideoDriver.GetTexture("../../media/skydome.jpg"), 16, 8, 0.95f, 2.0f);
 
 			// Plane
 
 			var m = irrDevice.SceneManager.AddHillPlaneMesh("plane", new Dimension2Df(1000), new Dimension2Di(1), null, 0, new Dimension2Df(0), new Dimension2Df(8));
 			var n = irrDevice.SceneManager.AddAnimatedMeshSceneNode(m, null, (int)SceneNodeID.Plane);
 			n.SetMaterialFlag(MaterialFlag.Lighting, false);
 			n.SetMaterialTexture(0, irrDevice.VideoDriver.GetTexture("../../media/rockwall.jpg"));
 
 			// Axes
 
 			m = irrDevice.SceneManager.AddArrowMesh("axisX");
 			n = irrDevice.SceneManager.AddAnimatedMeshSceneNode(m, null, (int)SceneNodeID.AxisX, new Vector3Df(), new Vector3Df(0, 0, -90), new Vector3Df(50, 120, 50));
 			n.GetMaterial(0).EmissiveColor = new Color(250, 250, 250);
 			n.GetMaterial(1).EmissiveColor = new Color(250, 0, 0);
 
 			m = irrDevice.SceneManager.AddArrowMesh("axisY");
 			n = irrDevice.SceneManager.AddAnimatedMeshSceneNode(m, null, (int)SceneNodeID.AxisY, new Vector3Df(), new Vector3Df(0, 0, 0), new Vector3Df(50, 120, 50));
 			n.GetMaterial(0).EmissiveColor = new Color(250, 250, 250);
 			n.GetMaterial(1).EmissiveColor = new Color(0, 250, 0);
 
 			m = irrDevice.SceneManager.AddArrowMesh("axisZ");
 			n = irrDevice.SceneManager.AddAnimatedMeshSceneNode(m, null, (int)SceneNodeID.AxisZ, new Vector3Df(), new Vector3Df(90, 0, 0), new Vector3Df(50, 120, 50));
 			n.GetMaterial(0).EmissiveColor = new Color(250, 250, 250);
 			n.GetMaterial(1).EmissiveColor = new Color(0, 0, 250);
 
 			irrThreadShowAxes(false);
 
 			// Particle system
 
 			var ps = irrDevice.SceneManager.AddParticleSystemSceneNode(false, null, (int)SceneNodeID.ParticleSystem);
 
 			ps.SetMaterialFlag(MaterialFlag.Lighting, false);
 			ps.SetMaterialFlag(MaterialFlag.ZWrite, false);
 			ps.SetMaterialTexture(0, irrDevice.VideoDriver.GetTexture("../../media/particle.bmp"));
 			ps.SetMaterialType(MaterialType.TransparentAddColor);
 
 			ParticleEmitter em = ps.CreateSphereEmitter(
 				new Vector3Df(), 20,				// position and radius
 				new Vector3Df(0.0f, 0.1f, 0.0f),	// initial direction
 				150, 300,							// emit rate
 				new Color(255, 255, 255, 0),		// darkest color
 				new Color(255, 255, 255, 0),		// brightest color
 				750, 1500, 0,						// min and max age, angle
 				new Dimension2Df(20.0f),			// min size
 				new Dimension2Df(40.0f));			// max size
 
 			ps.Emitter = em;
 			em.Drop();
 
 			// Particle affectors
 
 			affFadeOut = ps.CreateFadeOutParticleAffector();
 			ps.AddAffector(affFadeOut);
 			affFadeOut.Drop();
 
 			affGravity = ps.CreateGravityAffector(new Vector3Df(0, -1, 0), 3);
 			affGravity.Enabled = false;
 			ps.AddAffector(affGravity);
 			affGravity.Drop();
 
 			affRotation = ps.CreateRotationAffector(new Vector3Df(-90, 240, -120), new Vector3Df(0, 100, 0));
 			ps.AddAffector(affRotation);
 			affRotation.Drop();
 
 			// Rendering loop
 
 			uint rs = 0, re = 0; // render frame time
 			while (irrDevice.Run())
 			{
 				if (irrDevice.VideoDriver.ScreenSize.Area != 0)
 				{
 					irrDevice.VideoDriver.BeginScene();
 					irrDevice.SceneManager.DrawAll();
 					re = irrDevice.Timer.Time;
 
 					irrThreadDrawText(new Vector2Di(8, 8),
 						"Frame time
 
 					irrDevice.VideoDriver.EndScene();
 				}
 				else
 				{
 					Thread.Sleep(50);
 				}
 
 				irrThreadProcessCommandQueue();
 				rs = irrDevice.Timer.Time;
 			}
 			while (irrDevice.Run())
 			{
 				if (irrDevice.VideoDriver.ScreenSize.Area != 0)
 				{
 					irrDevice.VideoDriver.BeginScene();
 					irrDevice.SceneManager.DrawAll();
 					re = irrDevice.Timer.Time;
 
 					irrThreadDrawText(new Vector2Di(8, 8),
 						"Frame time
 
 					irrDevice.VideoDriver.EndScene();
 				}
 				else
 				{
 					Thread.Sleep(50);
 				}
 
 				irrThreadProcessCommandQueue();
 				rs = irrDevice.Timer.Time;
 			}
 
 			irrDevice.Drop();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\MainForm.cs" startline="211" endline="219"><![CDATA[
 
 		private void irrThreadDrawText(Vector2Di p, string s)
 		{
 			Dimension2Di d = irrDevice.GUIEnvironment.BuiltInFont.GetDimension(s);
 			d.Width += 8;
 			d.Height += 6;
 			irrDevice.VideoDriver.Draw2DRectangle(new Recti(p, d), new Color(0x7F000000));
 			irrDevice.GUIEnvironment.BuiltInFont.Draw(s, p + new Vector2Di(4, 3), new Color(250, 250, 250));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\MainForm.cs" startline="220" endline="226"><![CDATA[
 
 		private void irrThreadShowAxes(bool v)
 		{
 			irrDevice.SceneManager.GetSceneNodeFromID((int)SceneNodeID.AxisX).Visible = v;
 			irrDevice.SceneManager.GetSceneNodeFromID((int)SceneNodeID.AxisY).Visible = v;
 			irrDevice.SceneManager.GetSceneNodeFromID((int)SceneNodeID.AxisZ).Visible = v;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\MainForm.cs" startline="227" endline="349"><![CDATA[
 
 		private void irrThreadProcessCommandQueue()
 		{
 			Command c;
 
 			lock (commandQueue)
 			{
 				if (commandQueue.Count == 0)
 					return;
 
 				c = commandQueue.Dequeue();
 			}
 
 			switch (c.Type)
 			{
 				case CommandType.Abort
 					{
 						irrDevice.Close();
 						break;
 					}
 
 				case CommandType.Axes
 					{
 						irrThreadShowAxes((bool)c.Param);
 						break;
 					}
 
 				case CommandType.Plane
 					{
 						var n = irrDevice.SceneManager.GetSceneNodeFromID((int)SceneNodeID.Plane);
 						n.Visible = (bool)c.Param;
 						break;
 					}
 
 				case CommandType.Particle
 					{
 						var n = irrDevice.SceneManager.GetSceneNodeFromID((int)SceneNodeID.ParticleSystem);
 						n.SetMaterialTexture(0, irrDevice.VideoDriver.GetTexture(((ParticleInfo)c.Param).FileName));
 						break;
 					}
 
 				case CommandType.Resize
 					{
 						int[] i = (int[])c.Param;
 						Dimension2Di d = new Dimension2Di(i[0], i[1]);
 						irrDevice.VideoDriver.ResizeNotify(d);
 						(irrDevice.SceneManager.GetSceneNodeFromID((int)SceneNodeID.Camera) as CameraSceneNode).AspectRatio =
 							i[2] == 1 ? (float)i[0] / i[1] 
 						break;
 					}
 
 				case CommandType.Position
 					{
 						float[] f = (float[])c.Param;
 						var p = irrDevice.SceneManager.GetSceneNodeFromID((int)SceneNodeID.ParticleSystem) as ParticleSystemSceneNode;
 						(p.Emitter as ParticleSphereEmitter).Center = new Vector3Df(f[0], f[1], f[2]);
 						break;
 					}
 
 				case CommandType.Radius
 					{
 						float f = (float)c.Param;
 						var p = irrDevice.SceneManager.GetSceneNodeFromID((int)SceneNodeID.ParticleSystem) as ParticleSystemSceneNode;
 						(p.Emitter as ParticleSphereEmitter).Radius = f;
 						break;
 					}
 
 				case CommandType.CameraView
 					{
 						float f = (float)c.Param;
 						var p = irrDevice.SceneManager.GetSceneNodeFromID((int)SceneNodeID.Camera) as CameraSceneNode;
 						p.Target = new Vector3Df(p.Target.X, f, p.Target.Z);
 						break;
 					}
 
 				case CommandType.Rate
 					{
 						int v = (int)c.Param;
 						var p = irrDevice.SceneManager.GetSceneNodeFromID((int)SceneNodeID.ParticleSystem) as ParticleSystemSceneNode;
 						p.Emitter.MaxParticlesPerSecond = v;
 						p.Emitter.MinParticlesPerSecond = v/2;
 						break;
 					}
 
 				case CommandType.Size
 					{
 						int v = (int)c.Param;
 						var p = irrDevice.SceneManager.GetSceneNodeFromID((int)SceneNodeID.ParticleSystem) as ParticleSystemSceneNode;
 						p.Emitter.MaxStartSize = new Dimension2Df(v);
 						p.Emitter.MinStartSize = new Dimension2Df(v/2);
 						break;
 					}
 
 				case CommandType.Direction
 					{
 						float[] f = (float[])c.Param;
 						var p = irrDevice.SceneManager.GetSceneNodeFromID((int)SceneNodeID.ParticleSystem) as ParticleSystemSceneNode;
 						p.Emitter.Direction = new Vector3Df(f[0], f[1], f[2]);
 						break;
 					}
 
 				case CommandType.FadeOut
 					{
 						affFadeOut.Enabled = (bool)c.Param;
 						break;
 					}
 
 				case CommandType.Rotation
 					{
 						affRotation.Enabled = (bool)c.Param;
 						break;
 					}
 
 				case CommandType.Gravity
 					{
 						affGravity.Enabled = (bool)c.Param;
 						break;
 					}
 
 				default
 					throw new InvalidOperationException("Unexpected command type
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\MainForm.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\Properties\Resources.Designer.cs" startline="31" endline="33"><![CDATA[
         [global
         internal Resources() {
         }
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\Properties\Resources.Designer.cs" startline="34" endline="46"><![CDATA[
         
         /// <summary>
         ///   Returns the cached ResourceManager instance used by this class.
         /// </summary>
         [global
         internal static global
             get {
                 if (object.ReferenceEquals(resourceMan, null)) {
                     global
                     resourceMan = temp;
                 }
                 return resourceMan;
             }
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\Properties\Resources.Designer.cs" startline="47" endline="57"><![CDATA[
         }
         
         /// <summary>
         ///   Overrides the current thread's CurrentUICulture property for all
         ///   resource lookups using this strongly typed resource class.
         /// </summary>
         [global
         internal static global
             get {
                 return resourceCulture;
             }
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\Properties\Resources.Designer.cs" startline="58" endline="60"><![CDATA[
             set {
                 resourceCulture = value;
             }
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L04.ParticleEmitterViewer\Program.cs" startline="15" endline="19"><![CDATA[
 		{
 			Application.EnableVisualStyles();
 			Application.SetCompatibleTextRenderingDefault(false);
 			Application.Run(new MainForm());
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L05.ScreenshotToTexture\Program.cs" startline="21" endline="65"><![CDATA[
 		{
 			IrrlichtDevice device = IrrlichtDevice.CreateDevice(DriverType.Direct3D8, new Dimension2Di(512, 512));
 			device.SetWindowCaption("Screenshot to texture - Irrlicht Lime");
 
 			// set up very simple scene {{
 
 			CameraSceneNode cam = device.SceneManager.AddCameraSceneNode();
 			cam.Target = new Vector3Df(0);
 
 			SceneNodeAnimator anim = device.SceneManager.CreateFlyCircleAnimator(new Vector3Df(0, 16, 0), 30, 0.0004f);
 			cam.AddAnimator(anim);
 			anim.Drop();
 
 			SceneNode cube = device.SceneManager.AddCubeSceneNode(20);
 			cube.SetMaterialFlag(MaterialFlag.Lighting, false);
 
 			// }}
 
 			while (device.Run())
 			{
 				cube.SetMaterialTexture(0, null);
 				device.VideoDriver.RemoveAllTextures();
 
 				Texture t = getDesktopTexture(device);
 				cube.SetMaterialTexture(0, t);
 
 				device.VideoDriver.BeginScene(false);
 
 				device.VideoDriver.Draw2DImage(t, device.VideoDriver.ViewPort, new Recti(new Vector2Di(0), t.Size));
 				device.VideoDriver.Draw2DRectangle(device.VideoDriver.ViewPort, new IrrlichtLime.Video.Color(0, 0, 0, 160));
 
 				device.SceneManager.DrawAll();
 
 				device.GUIEnvironment.BuiltInFont.Draw(
 					device.Timer.ToString() +
 					"\nMemory
 					"\nFPS
 					new Vector2Di(16),
 					new IrrlichtLime.Video.Color(255, 255, 255));
 
 				device.VideoDriver.EndScene();
 			}
 			while (device.Run())
 			{
 				cube.SetMaterialTexture(0, null);
 				device.VideoDriver.RemoveAllTextures();
 
 				Texture t = getDesktopTexture(device);
 				cube.SetMaterialTexture(0, t);
 
 				device.VideoDriver.BeginScene(false);
 
 				device.VideoDriver.Draw2DImage(t, device.VideoDriver.ViewPort, new Recti(new Vector2Di(0), t.Size));
 				device.VideoDriver.Draw2DRectangle(device.VideoDriver.ViewPort, new IrrlichtLime.Video.Color(0, 0, 0, 160));
 
 				device.SceneManager.DrawAll();
 
 				device.GUIEnvironment.BuiltInFont.Draw(
 					device.Timer.ToString() +
 					"\nMemory
 					"\nFPS
 					new Vector2Di(16),
 					new IrrlichtLime.Video.Color(255, 255, 255));
 
 				device.VideoDriver.EndScene();
 			}
 
 			device.Drop();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L05.ScreenshotToTexture\Program.cs" startline="66" endline="125"><![CDATA[
 
 		private static Texture getDesktopTexture(IrrlichtDevice device)
 		{
 			int screenX = 0;
 			int screenY = 0;
 			int screenWidth = device.VideoDriver.ScreenSize.Width;
 			int screenHeight = device.VideoDriver.ScreenSize.Height;
 
 			Point p = new Point();
 			GetCursorPos(ref p);
 			screenX = p.X - screenWidth / 2;
 			screenY = p.Y - screenHeight / 2;
 
 			// validate grabbing rect (note
 
 			if (screenX < 0)
 				screenX = 0;
 
 			if (screenX + screenWidth > SystemInformation.VirtualScreen.Width)
 				screenX = SystemInformation.VirtualScreen.Width - screenWidth;
 
 			if (screenY < 0)
 				screenY = 0;
 
 			if (screenY + screenHeight > SystemInformation.VirtualScreen.Height)
 				screenY = SystemInformation.VirtualScreen.Height - screenHeight;
 
 			// }}
 
 			Bitmap b = new Bitmap(
 					screenWidth,
 					screenHeight,
 					PixelFormat.Format32bppArgb);
 
 			Graphics g = Graphics.FromImage(b);
 
 			g.CopyFromScreen(
 				screenX,
 				screenY,
 				0, 0,
 				new Size(screenWidth, screenHeight),
 				CopyPixelOperation.SourceCopy);
 
 			MemoryStream s = new MemoryStream();
 			b.Save(s, ImageFormat.Bmp);
 
 			byte[] c = s.ToArray();
 			s.Close();
 
 			LogLevel o = device.Logger.LogLevel;
 			device.Logger.LogLevel = LogLevel.Error; // we hide all those "Loaded texture" messages in console {{
 
 			ReadFile f = device.FileSystem.CreateMemoryReadFile("screenTexture", c);
 			Texture t = device.VideoDriver.GetTexture(f);
 			f.Drop();
 
 			device.Logger.LogLevel = o; // }}
 
 			return t;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L05.ScreenshotToTexture\Program.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L06.AnalogueClock\Program.cs" startline="16" endline="48"><![CDATA[
 		{
 			IrrlichtDevice device = IrrlichtDevice.CreateDevice(DriverType.Direct3D9);
 			device.SetWindowCaption("Analogue Clock - Irrlicht Lime");
 			device.CursorControl.Visible = false;
 
 			ClockNode.AddClockNode(device.SceneManager.RootNode);
 
 			CameraSceneNode camera = device.SceneManager.AddCameraSceneNodeFPS(null, 100, 0.1f);
 			camera.Position = new Vector3Df(40, -20, -100); // start up position
 			camera.Target = new Vector3Df(); // prev position change has also moved target, so we update it
 
 			while (device.Run())
 			{
 				device.VideoDriver.BeginScene();
 
 				device.SceneManager.DrawAll();
 
 				string s = string.Format(
 					"{0}\n{1}\n{2}\n{3} tris\n{4} fps",
 					device.Timer.RealTimeAndDate,
 					device.VideoDriver.VendorInfo,
 					device.VideoDriver.Name,
 					device.VideoDriver.PrimitiveCountDrawn,
 					device.VideoDriver.FPS);
 
 				device.GUIEnvironment.BuiltInFont.Draw(s, 11, 11, new Color(0, 0, 0));
 				device.GUIEnvironment.BuiltInFont.Draw(s, 10, 10, new Color(255, 255, 255));
 
 				device.VideoDriver.EndScene();
 			}
 			while (device.Run())
 			{
 				device.VideoDriver.BeginScene();
 
 				device.SceneManager.DrawAll();
 
 				string s = string.Format(
 					"{0}\n{1}\n{2}\n{3} tris\n{4} fps",
 					device.Timer.RealTimeAndDate,
 					device.VideoDriver.VendorInfo,
 					device.VideoDriver.Name,
 					device.VideoDriver.PrimitiveCountDrawn,
 					device.VideoDriver.FPS);
 
 				device.GUIEnvironment.BuiltInFont.Draw(s, 11, 11, new Color(0, 0, 0));
 				device.GUIEnvironment.BuiltInFont.Draw(s, 10, 10, new Color(255, 255, 255));
 
 				device.VideoDriver.EndScene();
 			}
 
 			device.Drop();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L06.AnalogueClock\Program.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L06.AnalogueClock\Program.cs" startline="16" endline="21"><![CDATA[
 		{
 			ClockNode n = new ClockNode(parent, parent.SceneManager);
 			n.Drop();
 
 			return n;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L06.AnalogueClock\Program.cs" startline="22" endline="128"><![CDATA[
 
 		AABBox boundingBox;
 		List<Material> materialList = new List<Material>();
 
 		private MeshSceneNode arrowSeconds;
 		private MeshSceneNode arrowMinutes;
 		private MeshSceneNode arrowHours;
 
 		ClockNode(SceneNode parent, SceneManager smgr)
 			
 		{
 			OnGetBoundingBox += new GetBoundingBoxEventHandler(ClockNode_OnGetBoundingBox);
 			OnGetMaterialCount += new GetMaterialCountEventHandler(ClockNode_OnGetMaterialCount);
 			OnGetMaterial += new GetMaterialEventHandler(ClockNode_OnGetMaterial);
 			OnRegisterSceneNode += new RegisterSceneNodeEventHandler(ClockNode_OnRegisterSceneNode);
 			OnRender += new RenderEventHandler(ClockNode_OnRender);
 			OnAnimate += new AnimateEventHandler(ClockNode_OnAnimate);
 
 			// add clock face
 
 			Mesh mesh = SceneManager.GeometryCreator.CreateCylinderMesh(100, 32, 6, new Color(180, 180, 180));
 			MeshSceneNode clockFace = SceneManager.AddMeshSceneNode(mesh, this);
 			clockFace.Rotation = new Vector3Df(90, 0, 0);
 			clockFace.Position = new Vector3Df(0, 0, 10);
 			mesh.Drop();
 
 			clockFace.UpdateAbsolutePosition();
 			boundingBox = clockFace.BoundingBoxTransformed;
 			for (int i = 0; i < clockFace.MaterialCount; i++) materialList.Add(clockFace.GetMaterial(i));
 			
 			// add clock center
 
 			mesh = SceneManager.GeometryCreator.CreateCylinderMesh(10, 24, 16, new Color(255, 255, 255), false);
 			MeshSceneNode clockCenter = SceneManager.AddMeshSceneNode(mesh, this);
 			clockCenter.Rotation = new Vector3Df(90, 0, 0);
 			clockCenter.Position = new Vector3Df(0, 0, -14);
 			mesh.Drop();
 
 			clockCenter.UpdateAbsolutePosition();
 			boundingBox.AddInternalBox(clockCenter.BoundingBoxTransformed);
 			for (int i = 0; i < clockCenter.MaterialCount; i++) materialList.Add(clockCenter.GetMaterial(i));
 
 			// add clock ticks
 
 			for (int j = 0; j < 12; j++)
 			{
 				mesh = SceneManager.GeometryCreator.CreateCylinderMesh(5, 10, 16, new Color(255, 255, 255), false);
 				MeshSceneNode clockTick = SceneManager.AddMeshSceneNode(mesh, this);
 				clockTick.Rotation = new Vector3Df(90, 0, 0);
 
 				float s = (float)Math.Sin((j * (360 / 12)) / (180 / Math.PI));
 				float c = (float)Math.Cos((j * (360 / 12)) / (180 / Math.PI));
 				clockTick.Position = new Vector3Df(s * 80, c * 80, 0);
 
 				if ((j % 3) == 0)
 					clockTick.Scale = new Vector3Df(2, 1, 2);
 
 				mesh.Drop();
 
 				clockTick.UpdateAbsolutePosition();
 				boundingBox.AddInternalBox(clockTick.BoundingBoxTransformed);
 				for (int i = 0; i < clockTick.MaterialCount; i++) materialList.Add(clockTick.GetMaterial(i));
 			}
 			for (int j = 0; j < 12; j++)
 			{
 				mesh = SceneManager.GeometryCreator.CreateCylinderMesh(5, 10, 16, new Color(255, 255, 255), false);
 				MeshSceneNode clockTick = SceneManager.AddMeshSceneNode(mesh, this);
 				clockTick.Rotation = new Vector3Df(90, 0, 0);
 
 				float s = (float)Math.Sin((j * (360 / 12)) / (180 / Math.PI));
 				float c = (float)Math.Cos((j * (360 / 12)) / (180 / Math.PI));
 				clockTick.Position = new Vector3Df(s * 80, c * 80, 0);
 
 				if ((j % 3) == 0)
 					clockTick.Scale = new Vector3Df(2, 1, 2);
 
 				mesh.Drop();
 
 				clockTick.UpdateAbsolutePosition();
 				boundingBox.AddInternalBox(clockTick.BoundingBoxTransformed);
 				for (int i = 0; i < clockTick.MaterialCount; i++) materialList.Add(clockTick.GetMaterial(i));
 			}
 
 			// add hour arrow
 
 			mesh = SceneManager.GeometryCreator.CreateArrowMesh(12, 12, 40, 35, 4, 4, new Color(40, 40, 255), new Color(40, 40, 255));
 			arrowHours = SceneManager.AddMeshSceneNode(mesh, this);
 			arrowHours.GetMaterial(0).EmissiveColor = new Color(0, 0, 255);
 			arrowHours.GetMaterial(1).EmissiveColor = new Color(0, 0, 255);
 			arrowHours.Position = new Vector3Df(0, 0, 3);
 			mesh.Drop();
 
 			arrowHours.UpdateAbsolutePosition();
 			boundingBox.AddInternalBox(arrowHours.BoundingBoxTransformed);
 			for (int i = 0; i < arrowHours.MaterialCount; i++) materialList.Add(arrowHours.GetMaterial(i));
 
 			// add minute arrow
 
 			mesh = SceneManager.GeometryCreator.CreateArrowMesh(12, 12, 60, 50, 4, 4, new Color(40, 255, 40), new Color(40, 255, 40));
 			arrowMinutes = SceneManager.AddMeshSceneNode(mesh, this);
 			arrowMinutes.GetMaterial(0).EmissiveColor = new Color(0, 255, 0);
 			arrowMinutes.GetMaterial(1).EmissiveColor = new Color(0, 255, 0);
 			arrowMinutes.Position = new Vector3Df(0, 0, -5);
 			mesh.Drop();
 
 			arrowMinutes.UpdateAbsolutePosition();
 			boundingBox.AddInternalBox(arrowMinutes.BoundingBoxTransformed);
 			for (int i = 0; i < arrowMinutes.MaterialCount; i++) materialList.Add(arrowMinutes.GetMaterial(i));
 
 			// add second arrow
 
 			mesh = SceneManager.GeometryCreator.CreateArrowMesh(12, 12, 70, 60, 2, 2, new Color(255, 40, 40), new Color(255, 40, 40));
 			arrowSeconds = SceneManager.AddMeshSceneNode(mesh, this);
 			arrowSeconds.GetMaterial(0).EmissiveColor = new Color(255, 0, 0);
 			arrowSeconds.GetMaterial(1).EmissiveColor = new Color(255, 0, 0);
 			arrowSeconds.Position = new Vector3Df(0, 0, -11);
 			mesh.Drop();
 
 			arrowSeconds.UpdateAbsolutePosition();
 			boundingBox.AddInternalBox(arrowSeconds.BoundingBoxTransformed);
 			for (int i = 0; i < arrowSeconds.MaterialCount; i++) materialList.Add(arrowSeconds.GetMaterial(i));
 
 			SceneManager.AddLightSceneNode(arrowSeconds, new Vector3Df(0, 70, 0), new Colorf(arrowSeconds.GetMaterial(0).EmissiveColor), 80);
 			SceneManager.AddLightSceneNode(arrowMinutes, new Vector3Df(0, 60, 0), new Colorf(arrowMinutes.GetMaterial(0).EmissiveColor), 60);
 			SceneManager.AddLightSceneNode(arrowHours, new Vector3Df(0, 40, 0), new Colorf(arrowHours.GetMaterial(0).EmissiveColor), 40);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L06.AnalogueClock\Program.cs" startline="129" endline="133"><![CDATA[
 
 		AABBox ClockNode_OnGetBoundingBox()
 		{
 			return boundingBox;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L06.AnalogueClock\Program.cs" startline="134" endline="138"><![CDATA[
 
 		int ClockNode_OnGetMaterialCount()
 		{
 			return materialList.Count;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L06.AnalogueClock\Program.cs" startline="139" endline="143"><![CDATA[
 
 		Material ClockNode_OnGetMaterial(int index)
 		{
 			return materialList[index];
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L06.AnalogueClock\Program.cs" startline="144" endline="149"><![CDATA[
 
 		void ClockNode_OnRegisterSceneNode()
 		{
 			if (Visible)
 				SceneManager.RegisterNodeForRendering(this);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L06.AnalogueClock\Program.cs" startline="150" endline="155"><![CDATA[
 
 		void ClockNode_OnRender()
 		{
 			// we need to add code here if we want to draw something that is not fitted into scene nodes,
 			// but now our clock elements all is done via scene nodes.
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L06.AnalogueClock\Program.cs" startline="156" endline="164"><![CDATA[
 
 		void ClockNode_OnAnimate(uint time)
 		{
 			DateTime t = DateTime.Now;
 
 			arrowSeconds.Rotation = new Vector3Df(0, 0, -t.Second * (360 / 60));
 			arrowMinutes.Rotation = new Vector3Df(0, 0, -t.Minute * (360 / 60));
 			arrowHours.Rotation = new Vector3Df(0, 0, -(t.Hour % 12) * (360 / 12));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L07.FastStaticRendering\Program.cs" startline="16" endline="58"><![CDATA[
 		{
 			int N = AskUserForN();
 			bool B = AskUserForB();
 
 			DriverType driverType;
 			if (!AskUserForDriver(out driverType))
 				return;
 
 			IrrlichtDevice device = IrrlichtDevice.CreateDevice(driverType, new Dimension2Di(800, 600));
 			if (device == null)
 				return;
 
 			device.CursorControl.Visible = false;
 
 			CameraSceneNode camera = device.SceneManager.AddCameraSceneNodeFPS();
 			camera.FarValue = 20000;
 			camera.Position = new Vector3Df(-200);
 			camera.Target = new Vector3Df(0);
 
 			MeshBuffersBatch batch = new MeshBuffersBatch(device, N, B);
 
 			while (device.Run())
 			{
 				device.VideoDriver.BeginScene();
 
 				device.SceneManager.DrawAll();
 
 				batch.Draw();
 
 				device.VideoDriver.EndScene();
 
 				device.SetWindowCaption(
 					"Fast static rendering - Irrlicht Lime - " +
 					device.VideoDriver.Name + " | " +
 					device.VideoDriver.FPS + " fps | " +
 					N * N * N + " cubes  | " +
 					device.VideoDriver.PrimitiveCountDrawn + " primitives | " +
 					MemUsageText + " of physical memory used");
 			}
 			while (device.Run())
 			{
 				device.VideoDriver.BeginScene();
 
 				device.SceneManager.DrawAll();
 
 				batch.Draw();
 
 				device.VideoDriver.EndScene();
 
 				device.SetWindowCaption(
 					"Fast static rendering - Irrlicht Lime - " +
 					device.VideoDriver.Name + " | " +
 					device.VideoDriver.FPS + " fps | " +
 					N * N * N + " cubes  | " +
 					device.VideoDriver.PrimitiveCountDrawn + " primitives | " +
 					MemUsageText + " of physical memory used");
 			}
 
 			batch.Drop();
 			device.Drop();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L07.FastStaticRendering\Program.cs" startline="59" endline="68"><![CDATA[
 
 		static int AskUserForN()
 		{
 			Console.WriteLine("Enter size of bounding cube side");
 			Console.WriteLine(" (10 to render 10*10*10=1k cubes; 20 for 8k; 40 => 64k; 50 => 125k)");
 			Console.WriteLine(" (typing less than 1 or more than 80 (512k) is not recommended)
 			string s = Console.ReadLine();
 
 			return Convert.ToInt32(s);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L07.FastStaticRendering\Program.cs" startline="69" endline="78"><![CDATA[
 
 		static bool AskUserForB()
 		{
 			Console.WriteLine("What meshbuffers to use?");
 			Console.WriteLine(" (1) split to 16-bit meshbuffers");
 			Console.WriteLine(" (2) use single 32-bit meshbuffer ");
 			ConsoleKeyInfo k = Console.ReadKey();
 
 			return k.KeyChar == '1';
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L07.FastStaticRendering\Program.cs" startline="79" endline="104"><![CDATA[
 
 		static bool AskUserForDriver(out DriverType driverType)
 		{
 			driverType = DriverType.Null;
 
 			Console.Write("Please select the driver you want for this example
 						" (a) OpenGL\n (b) Direct3D 9.0c\n (c) Direct3D 8.1\n" +
 						" (d) Burning's Software Renderer\n (e) Software Renderer\n" +
 						" (f) NullDevice\n (otherKey) exit\n\n");
 
 			ConsoleKeyInfo i = Console.ReadKey();
 
 			switch (i.Key)
 			{
 				case ConsoleKey.A
 				case ConsoleKey.B
 				case ConsoleKey.C
 				case ConsoleKey.D
 				case ConsoleKey.E
 				case ConsoleKey.F
 				default
 					return false;
 			}
 
 			return true;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L07.FastStaticRendering\Program.cs" startline="105" endline="108"><![CDATA[
 
 		static public string MemUsageText
 		{
 			get { return System.Diagnostics.Process.GetCurrentProcess().WorkingSet64 / (1024 * 1024) + " Mb"; }
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L07.FastStaticRendering\Program.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L07.FastStaticRendering\Program.cs" startline="109" endline="137"><![CDATA[
 		}
 	}
 
 	class MeshBuffersBatch
 	{
 		IrrlichtDevice device;
 		Material material;
 		Matrix matrix;
 		Mesh mesh;
 
 		public MeshBuffersBatch(IrrlichtDevice device, int N, bool B)
 		{
 			this.device = device;
 			material = new Material();
 			material.Lighting = false;
 			matrix = new Matrix();
 
 			mesh = Mesh.Create();
 
 			if (B)
 				generateMultiple16bitMeshbuffers(N);
 			else
 				generateSingle32BitMeshbuffer(N);
 
 			mesh.RecalculateBoundingBox();
 
 			device.Logger.Log("Collecting garbage...");
 			GC.Collect();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L07.FastStaticRendering\Program.cs" startline="138" endline="142"><![CDATA[
 
 		public void Drop()
 		{
 			mesh.Drop();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L07.FastStaticRendering\Program.cs" startline="143" endline="151"><![CDATA[
 
 		public void Draw()
 		{
 			device.VideoDriver.SetTransform(TransformationState.World, matrix);
 			device.VideoDriver.SetMaterial(material);
 
 			for (int i = 0; i < mesh.MeshBufferCount; i++)
 				device.VideoDriver.DrawMeshBuffer(mesh.GetMeshBuffer(i));
 			for (int i = 0; i < mesh.MeshBufferCount; i++)
 				device.VideoDriver.DrawMeshBuffer(mesh.GetMeshBuffer(i));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L07.FastStaticRendering\Program.cs" startline="152" endline="204"><![CDATA[
 
 		void generateMultiple16bitMeshbuffers(int N)
 		{
 			Vertex3D[] vertices32bit;
 			uint[] indices32bit;
 			generateVerticesAndIndices(N, out vertices32bit, out indices32bit);
 
 			List<Vertex3D> verticesChunk = new List<Vertex3D>();
 			List<ushort> indicesChunk = new List<ushort>();
 			
 			int totalCubes = N * N * N;
 			int indicesInCube = indices32bit.Length / totalCubes;
 			int verticesInCube = vertices32bit.Length / totalCubes;
 			int maximumVerticesPerChunk = ushort.MaxValue; // must not be more than 0xffff (because we use 16-bit indices)
 			int verticesIndexOffset = 0;
 
 			device.Logger.Log("Batching cubes into 16-bit meshbuffers...");
 
 			for (int cubeIndex = 0; cubeIndex < totalCubes; cubeIndex++)
 			{
 				// add vertices
 				for (int i = 0; i < verticesInCube; i++)
 					verticesChunk.Add(vertices32bit[cubeIndex * verticesInCube + i]);
 				for (int i = 0; i < verticesInCube; i++)
 					verticesChunk.Add(vertices32bit[cubeIndex * verticesInCube + i]);
 
 				// add indices
 				for (int i = 0; i < indicesInCube; i++)
 					indicesChunk.Add((ushort)(indices32bit[cubeIndex * indicesInCube + i] - verticesIndexOffset));
 				for (int i = 0; i < indicesInCube; i++)
 					indicesChunk.Add((ushort)(indices32bit[cubeIndex * indicesInCube + i] - verticesIndexOffset));
 
 				if (verticesChunk.Count + verticesInCube > maximumVerticesPerChunk // if this chunk is full
 					|| cubeIndex == totalCubes - 1) // or this is last cube
 				{
 					// we create meshbuffer and add it to the main mesh
 					MeshBuffer mb = MeshBuffer.Create(VertexType.Standard, IndexType._16Bit);
 					mb.SetHardwareMappingHint(HardwareMappingHint.Static, HardwareBufferType.VertexAndIndex);
 					mb.Append(verticesChunk.ToArray(), indicesChunk.ToArray());
 					mb.RecalculateBoundingBox();
 					mesh.AddMeshBuffer(mb);
 					mb.Drop();
 
 					// clean up vertex and index chunks
 					verticesIndexOffset += verticesChunk.Count;
 					verticesChunk = new List<Vertex3D>();
 					indicesChunk = new List<ushort>();
 
 					device.Logger.Log(
 						(((cubeIndex + 1) * 100) / totalCubes) + "%
 						mesh + ". ~" +
 						Program.MemUsageText);
 
 					GC.Collect();
 				}
 			}
 			for (int cubeIndex = 0; cubeIndex < totalCubes; cubeIndex++)
 			{
 				// add vertices
 				for (int i = 0; i < verticesInCube; i++)
 					verticesChunk.Add(vertices32bit[cubeIndex * verticesInCube + i]);
 
 				// add indices
 				for (int i = 0; i < indicesInCube; i++)
 					indicesChunk.Add((ushort)(indices32bit[cubeIndex * indicesInCube + i] - verticesIndexOffset));
 
 				if (verticesChunk.Count + verticesInCube > maximumVerticesPerChunk // if this chunk is full
 					|| cubeIndex == totalCubes - 1) // or this is last cube
 				{
 					// we create meshbuffer and add it to the main mesh
 					MeshBuffer mb = MeshBuffer.Create(VertexType.Standard, IndexType._16Bit);
 					mb.SetHardwareMappingHint(HardwareMappingHint.Static, HardwareBufferType.VertexAndIndex);
 					mb.Append(verticesChunk.ToArray(), indicesChunk.ToArray());
 					mb.RecalculateBoundingBox();
 					mesh.AddMeshBuffer(mb);
 					mb.Drop();
 
 					// clean up vertex and index chunks
 					verticesIndexOffset += verticesChunk.Count;
 					verticesChunk = new List<Vertex3D>();
 					indicesChunk = new List<ushort>();
 
 					device.Logger.Log(
 						(((cubeIndex + 1) * 100) / totalCubes) + "%
 						mesh + ". ~" +
 						Program.MemUsageText);
 
 					GC.Collect();
 				}
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L07.FastStaticRendering\Program.cs" startline="205" endline="222"><![CDATA[
 
 		void generateSingle32BitMeshbuffer(int N)
 		{
 			Vertex3D[] vertices32bit;
 			uint[] indices32bit;
 			generateVerticesAndIndices(N, out vertices32bit, out indices32bit);
 
 			MeshBuffer mb = MeshBuffer.Create(VertexType.Standard, IndexType._32Bit);
 			mesh.AddMeshBuffer(mb);
 			mb.Drop();
 
 			device.Logger.Log("Appending " +
 				vertices32bit.Length + " vertices and " +
 				indices32bit.Length + " indices to 32-bit meshbuffer...");
 
 			mb.Append(vertices32bit, indices32bit);
 			mb.SetHardwareMappingHint(HardwareMappingHint.Static, HardwareBufferType.VertexAndIndex);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L07.FastStaticRendering\Program.cs" startline="223" endline="278"><![CDATA[
 
 		/// <param name="N">Number of cubes in single dimension (e.g. total cubes for 20 is 20^3=8000)</param>
 		void generateVerticesAndIndices(int N, out Vertex3D[] vertices, out uint[] indices)
 		{
 			int cubeSide = 32;
 
 			// ask Irrlicht to generate cube mesh for us (we use it like a template)
 
 			Mesh cubeMesh = device.SceneManager.GeometryCreator.CreateCubeMesh(new Vector3Df(cubeSide));
 			ushort[] cubeIndices = cubeMesh.GetMeshBuffer(0).Indices as ushort[];
 			Vertex3D[] cubeVertices = cubeMesh.GetMeshBuffer(0).Vertices as Vertex3D[];
 			cubeMesh.Drop();
 
 			// generate cubes
 
 			device.Logger.Log("Generating " + N * N * N + " cubes...");
 
 			vertices = new Vertex3D[N * N * N * cubeVertices.Length];
 			indices = new uint[N * N * N * cubeIndices.Length];
 
 			int verticesIndex = 0;
 			int indicesIndex = 0;
 			int colorBase = (255 - cubeVertices.Length) / N;
 			float cubePosOffset = 2.0f * cubeSide;
 
 			for (int i = 0; i < N; i++)
 			{
 				for (int j = 0; j < N; j++)
 				{
 					for (int k = 0; k < N; k++)
 					{
 						// add indices
 						uint firstfreeIndex = (uint)verticesIndex;
 						for (int l = 0; l < cubeIndices.Length; l++)
 							indices[indicesIndex++] = firstfreeIndex + cubeIndices[l];
 						for (int l = 0; l < cubeIndices.Length; l++)
 							indices[indicesIndex++] = firstfreeIndex + cubeIndices[l];
 
 						// add vertices
 						for (int l = 0; l < cubeVertices.Length; l++)
 						{
 							Vertex3D v = new Vertex3D(cubeVertices[l]);
 							v.Color = new Color(i * colorBase + l, j * colorBase + l, k * colorBase + l);
 							v.Position += new Vector3Df(i, j, k) * cubePosOffset;
 							vertices[verticesIndex++] = v;
 						}
 						for (int l = 0; l < cubeVertices.Length; l++)
 						{
 							Vertex3D v = new Vertex3D(cubeVertices[l]);
 							v.Color = new Color(i * colorBase + l, j * colorBase + l, k * colorBase + l);
 							v.Position += new Vector3Df(i, j, k) * cubePosOffset;
 							vertices[verticesIndex++] = v;
 						}
 					}
 					for (int k = 0; k < N; k++)
 					{
 						// add indices
 						uint firstfreeIndex = (uint)verticesIndex;
 						for (int l = 0; l < cubeIndices.Length; l++)
 							indices[indicesIndex++] = firstfreeIndex + cubeIndices[l];
 
 						// add vertices
 						for (int l = 0; l < cubeVertices.Length; l++)
 						{
 							Vertex3D v = new Vertex3D(cubeVertices[l]);
 							v.Color = new Color(i * colorBase + l, j * colorBase + l, k * colorBase + l);
 							v.Position += new Vector3Df(i, j, k) * cubePosOffset;
 							vertices[verticesIndex++] = v;
 						}
 					}
 				}
 				for (int j = 0; j < N; j++)
 				{
 					for (int k = 0; k < N; k++)
 					{
 						// add indices
 						uint firstfreeIndex = (uint)verticesIndex;
 						for (int l = 0; l < cubeIndices.Length; l++)
 							indices[indicesIndex++] = firstfreeIndex + cubeIndices[l];
 
 						// add vertices
 						for (int l = 0; l < cubeVertices.Length; l++)
 						{
 							Vertex3D v = new Vertex3D(cubeVertices[l]);
 							v.Color = new Color(i * colorBase + l, j * colorBase + l, k * colorBase + l);
 							v.Position += new Vector3Df(i, j, k) * cubePosOffset;
 							vertices[verticesIndex++] = v;
 						}
 					}
 				}
 
 				device.Logger.Log(
 					(((i + 1) * 100) / N) + "%
 					(i + 1) * N * N + " cubes has been generated. ~" +
 					Program.MemUsageText);
 
 				if ((i & 0xf) == 0xf)
 					GC.Collect();
 			}
 			for (int i = 0; i < N; i++)
 			{
 				for (int j = 0; j < N; j++)
 				{
 					for (int k = 0; k < N; k++)
 					{
 						// add indices
 						uint firstfreeIndex = (uint)verticesIndex;
 						for (int l = 0; l < cubeIndices.Length; l++)
 							indices[indicesIndex++] = firstfreeIndex + cubeIndices[l];
 
 						// add vertices
 						for (int l = 0; l < cubeVertices.Length; l++)
 						{
 							Vertex3D v = new Vertex3D(cubeVertices[l]);
 							v.Color = new Color(i * colorBase + l, j * colorBase + l, k * colorBase + l);
 							v.Position += new Vector3Df(i, j, k) * cubePosOffset;
 							vertices[verticesIndex++] = v;
 						}
 					}
 				}
 
 				device.Logger.Log(
 					(((i + 1) * 100) / N) + "%
 					(i + 1) * N * N + " cubes has been generated. ~" +
 					Program.MemUsageText);
 
 				if ((i & 0xf) == 0xf)
 					GC.Collect();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L08.WPFWindow\Properties\Resources.Designer.cs" startline="31" endline="33"><![CDATA[
         [global
         internal Resources() {
         }
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L08.WPFWindow\Properties\Resources.Designer.cs" startline="34" endline="46"><![CDATA[
         
         /// <summary>
         ///   Returns the cached ResourceManager instance used by this class.
         /// </summary>
         [global
         internal static global
             get {
                 if (object.ReferenceEquals(resourceMan, null)) {
                     global
                     resourceMan = temp;
                 }
                 return resourceMan;
             }
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L08.WPFWindow\Properties\Resources.Designer.cs" startline="47" endline="57"><![CDATA[
         }
         
         /// <summary>
         ///   Overrides the current thread's CurrentUICulture property for all
         ///   resource lookups using this strongly typed resource class.
         /// </summary>
         [global
         internal static global
             get {
                 return resourceCulture;
             }
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L08.WPFWindow\Properties\Resources.Designer.cs" startline="58" endline="60"><![CDATA[
             set {
                 resourceCulture = value;
             }
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L08.WPFWindow\Properties\Resources.Designer.cs" startline="21" endline="23"><![CDATA[
             get {
                 return defaultInstance;
             }
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L08.WPFWindow\Properties\Resources.Designer.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L08.WPFWindow\Properties\Resources.Designer.cs" startline="18" endline="18"><![CDATA[
         private static Settings defaultInstance = ((Settings)(global
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L08.WPFWindow\MainWindow.xaml.cs" startline="21" endline="24"><![CDATA[
 		public MainWindow()
 		{
 			InitializeComponent();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L08.WPFWindow\MainWindow.xaml.cs" startline="25" endline="30"><![CDATA[
 
 		private void Window_Loaded(object sender, RoutedEventArgs e)
 		{
 			userControl = new WinFormsUserControl();
 			wfHost.Child = userControl;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L08.WPFWindow\MainWindow.xaml.cs" startline="31" endline="36"><![CDATA[
 
 		private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
 		{
 			if (userControl.IsRendering)
 				userControl.Shutdown();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L08.WPFWindow\MainWindow.xaml.cs" startline="37" endline="41"><![CDATA[
 
 		private void buttonClose_Click(object sender, RoutedEventArgs e)
 		{
 			Close();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L08.WPFWindow\MainWindow.xaml.cs" startline="42" endline="47"><![CDATA[
 
 		private void checkboxNotifyResizes_Checked(object sender, RoutedEventArgs e)
 		{
 			if (userControl != null)
 				userControl.IsNotifyResizes = checkboxNotifyResizes.IsChecked ?? false;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L08.WPFWindow\MainWindow.xaml.cs" startline="48" endline="56"><![CDATA[
 
 		private void checkboxDockViewport_Checked(object sender, RoutedEventArgs e)
 		{
 			if (wfHost != null)
 			{
 				wfHost.Width = (bool)checkboxDockViewport.IsChecked ? double.NaN 
 				wfHost.Height = (bool)checkboxDockViewport.IsChecked ? double.NaN 
 			}
 		}
]]></source>
<source file="c:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L08.WPFWindow\MainWindow.xaml" startline="1" endline="1"><![CDATA[
 ?<Window x
]]></source>
<source file="c:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L08.WPFWindow\MainWindow.xaml" startline="2" endline="58"><![CDATA[
     xmlns="http
     xmlns
 	xmlns
     Title="WPF window example - Irrlicht Engine"
 	Width="440"
 	Height="400"
 	Loaded="Window_Loaded"
 	Closing="Window_Closing">
 	
 	<Window.Background>
 		<RadialGradientBrush GradientOrigin="0,0">
 			<GradientStop Color="Lime" Offset="0" />
 			<GradientStop Color="White" Offset="1" />
 		</RadialGradientBrush>
 	</Window.Background>
 	
     <Grid Margin="12,8">
 		
 		<Grid.RowDefinitions>
 			<RowDefinition Height="Auto" />
 			<RowDefinition />
 			<RowDefinition Height="Auto" />
 		</Grid.RowDefinitions>
 		
 		<StackPanel Grid.Row="0">
 			
 			<Label
 				Content="This is simple WPF application"
 				FontFamily="Times New Roman"
 				FontSize="18" />
 			
 			<CheckBox
 				x
 				Checked="checkboxDockViewport_Checked"
 				Unchecked="checkboxDockViewport_Checked"
 				Content="Dock viewport"
 				IsChecked="True"
 				Margin="4,0,4,4" />
 			
 			<CheckBox
 				x
 				Checked="checkboxNotifyResizes_Checked"
 				Unchecked="checkboxNotifyResizes_Checked"
 				Content="Notify resizes"
 				IsChecked="True"
 				Margin="4,0,4,4" />
 			
 		</StackPanel>
 		
 		<WindowsFormsHost
 			Grid.Row="1"
 			x
 
 		<Button
 			Grid.Row="2"
 			x
 			Click="buttonClose_Click"
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L08.WPFWindow\WinFormsUserControl.cs" startline="15" endline="21"><![CDATA[
 		{
 			if (disposing && (components != null))
 			{
 				components.Dispose();
 			}
 			base.Dispose(disposing);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L08.WPFWindow\WinFormsUserControl.cs" startline="22" endline="33"><![CDATA[
 
 		#region Component Designer generated code
 
 		/// <summary> 
 		/// Required method for Designer support - do not modify 
 		/// the contents of this method with the code editor.
 		/// </summary>
 		private void InitializeComponent()
 		{
 			components = new System.ComponentModel.Container();
 			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L08.WPFWindow\WinFormsUserControl.cs" startline="8" endline="55"><![CDATA[
 		private System.ComponentModel.IContainer components = null;
 		public WinFormsUserControl()
 		{
 			InitializeComponent();
 
 			backgroundCommand = new Command();
 
 			backgroundWorker = new BackgroundWorker();
 			backgroundWorker.WorkerSupportsCancellation = true;
 			backgroundWorker.DoWork += new DoWorkEventHandler(backgroundWorker_DoWork);
 			backgroundWorker.RunWorkerAsync(Handle);
 			components.Add(backgroundWorker);
 
 			IsNotifyResizes = true;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L08.WPFWindow\WinFormsUserControl.cs" startline="56" endline="60"><![CDATA[
 
 		/// <summary>
 		/// Indicates that rendering thread is working.
 		/// </summary>
 		public bool IsRendering { get { return backgroundWorker.IsBusy; } }
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L08.WPFWindow\WinFormsUserControl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L08.WPFWindow\WinFormsUserControl.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L08.WPFWindow\WinFormsUserControl.cs" startline="61" endline="80"><![CDATA[
 
 		/// <summary>
 		/// Indicates that Irrlicht will be notifyed (or not) about resize of client area of this control.
 		/// </summary>
 		public bool IsNotifyResizes { get; set; }
 
 		/// <summary>
 		/// Shuts down rendering thread.
 		/// This method must be called before this controls is going to be released.
 		/// </summary>
 		public void Shutdown()
 		{
 			if (backgroundWorker.IsBusy)
 			{
 				backgroundWorker.CancelAsync();
 
 				while (backgroundWorker.IsBusy)
 					Application.DoEvents();
 				while (backgroundWorker.IsBusy)
 					Application.DoEvents();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L08.WPFWindow\WinFormsUserControl.cs" startline="81" endline="95"><![CDATA[
 
 		protected override void OnResize(EventArgs e)
 		{
 			base.OnResize(e);
 
 			if (!IsNotifyResizes)
 				return;
 
 			lock (backgroundCommand)
 			{
 				Dimension2Di newSize = new Dimension2Di(this.Width, this.Height);
 				if (newSize.Area > 0)
 					backgroundCommand.SetCommand(Command.Kind.Resized, newSize);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L08.WPFWindow\WinFormsUserControl.cs" startline="96" endline="193"><![CDATA[
 
 		void backgroundWorker_DoWork(object sender, DoWorkEventArgs e)
 		{
 			BackgroundWorker worker = sender as BackgroundWorker;
 			IrrlichtCreationParameters p = new IrrlichtCreationParameters();
 			p.DriverType = DriverType.Direct3D9;
 			p.WindowID = (IntPtr)e.Argument;
 
 			IrrlichtDevice device = IrrlichtDevice.CreateDevice(p);
 			if (device == null)
 				// if device cannot be created by any reason - we just leave this thread,
 				// after all IsRedering will report false, so it is all OK.
 				return;
 
 			VideoDriver driver = device.VideoDriver;
 			SceneManager smgr = device.SceneManager;
 			GUIEnvironment gui = device.GUIEnvironment;
 
 			// setup a simple 3d scene
 
 			CameraSceneNode cam = smgr.AddCameraSceneNode();
 			cam.Target = new Vector3Df(0);
 
 			SceneNodeAnimator anim = smgr.CreateFlyCircleAnimator(new Vector3Df(0, 15, 0), 30.0f);
 			cam.AddAnimator(anim);
 			anim.Drop();
 
 			SceneNode cube = smgr.AddCubeSceneNode(20);
 			cube.SetMaterialTexture(0, driver.GetTexture("../../media/wall.bmp"));
 			cube.SetMaterialTexture(1, driver.GetTexture("../../media/water.jpg"));
 			cube.SetMaterialFlag(MaterialFlag.Lighting, false);
 			cube.SetMaterialType(MaterialType.Reflection2Layer);
 
 			smgr.AddSkyBoxSceneNode(
 				"../../media/irrlicht2_up.jpg",
 				"../../media/irrlicht2_dn.jpg",
 				"../../media/irrlicht2_lf.jpg",
 				"../../media/irrlicht2_rt.jpg",
 				"../../media/irrlicht2_ft.jpg",
 				"../../media/irrlicht2_bk.jpg");
 
 			gui.AddImage(
 				driver.GetTexture("../../media/lime_logo_alpha.png"),
 				new Vector2Di(30, 0));
 
 			// draw all
 
 			while (device.Run())
 			{
 				driver.BeginScene(false);
 				
 				smgr.DrawAll();
 				gui.DrawAll();
 
 				// draw stats
 
 				int x = 20;
 				int y = driver.ScreenSize.Height - 50;
 
 				driver.Draw2DRectangle(
 					new Recti(x, y, x + driver.ScreenSize.Width - 2 * x, y + 30),
 					new IrrlichtLime.Video.Color(0, 0, 0, 128));
 
 				device.GUIEnvironment.BuiltInFont.Draw(
 					"Driver
 					new Vector2Di(x + 5, y + 5),
 					new IrrlichtLime.Video.Color(255, 255, 255));
 
 				device.GUIEnvironment.BuiltInFont.Draw(
 					"FPS
 					new Vector2Di(x + 5, y + 15),
 					new IrrlichtLime.Video.Color(255, 255, 255));
 
 				driver.EndScene();
 
 				// check for cancellation
 
 				if (worker.CancellationPending)
 					device.Close();
 
 				// check for new command
 
 				lock (backgroundCommand)
 				{
 					switch (backgroundCommand.Type)
 					{
 						case Command.Kind.Resized
 							driver.ResizeNotify(backgroundCommand.Value as Dimension2Di);
 							backgroundCommand.Clear();
 							break;
 					}
 				}
 			}
 			while (device.Run())
 			{
 				driver.BeginScene(false);
 				
 				smgr.DrawAll();
 				gui.DrawAll();
 
 				// draw stats
 
 				int x = 20;
 				int y = driver.ScreenSize.Height - 50;
 
 				driver.Draw2DRectangle(
 					new Recti(x, y, x + driver.ScreenSize.Width - 2 * x, y + 30),
 					new IrrlichtLime.Video.Color(0, 0, 0, 128));
 
 				device.GUIEnvironment.BuiltInFont.Draw(
 					"Driver
 					new Vector2Di(x + 5, y + 5),
 					new IrrlichtLime.Video.Color(255, 255, 255));
 
 				device.GUIEnvironment.BuiltInFont.Draw(
 					"FPS
 					new Vector2Di(x + 5, y + 15),
 					new IrrlichtLime.Video.Color(255, 255, 255));
 
 				driver.EndScene();
 
 				// check for cancellation
 
 				if (worker.CancellationPending)
 					device.Close();
 
 				// check for new command
 
 				lock (backgroundCommand)
 				{
 					switch (backgroundCommand.Type)
 					{
 						case Command.Kind.Resized
 							driver.ResizeNotify(backgroundCommand.Value as Dimension2Di);
 							backgroundCommand.Clear();
 							break;
 					}
 				}
 			}
 
 			// drop the device
 
 			device.Drop();
 		}
]]></source>
<source file="c:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L08.WPFWindow\App.xaml" startline="48" endline="4"><![CDATA[
         public void InitializeComponent() {
     StartupUri="MainWindow.xaml">
]]></source>
<source file="c:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L08.WPFWindow\App.xaml" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="c:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L08.WPFWindow\App.xaml" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L09.SimpleLOD\Program.cs" startline="21" endline="244"><![CDATA[
 		{
 			int lodItemCount = AskUserForLODItemCount();
 
 			DriverType driverType;
 			if (!AskUserForDriver(out driverType))
 				return;
 
 			device = IrrlichtDevice.CreateDevice(driverType, new Dimension2Di(800, 600));
 			if (device == null)
 				return;
 
 			device.OnEvent += new IrrlichtDevice.EventHandler(device_OnEvent);
 			device.SetWindowCaption("Simple LOD - Irrlicht Lime");
 			device.CursorControl.Visible = false;
 
 			VideoDriver driver = device.VideoDriver;
 			SceneManager scene = device.SceneManager;
 
 			// generate all LODs of mesh
 
 			List<Mesh> lodMesh = new List<Mesh>();
 			Material meshMaterial = null;
 			List<int> lodTriangleCount = new List<int>();
 
 			int[] p = new int[] { 100, 50, 32, 20, 12, 6, 3 };
 			for (int i = 0; i < p.Length; i++)
 			{
 				Mesh m = scene.GeometryCreator.CreateSphereMesh(50, p[i], p[i]);
 
 				MeshBuffer mb = m.GetMeshBuffer(0);
 				mb.Material.Type = MaterialType.Solid;
 				mb.Material.SetTexture(0, driver.GetTexture("../../media/earth.jpg"));
 
 				m.SetMaterialFlag(MaterialFlag.Lighting, false);
 				lodMesh.Add(m);
 
 				if (meshMaterial == null)
 					meshMaterial = m.GetMeshBuffer(0).Material;
 
 				lodTriangleCount.Add(mb.IndexCount / 3);
 			}
 			for (int i = 0; i < p.Length; i++)
 			{
 				Mesh m = scene.GeometryCreator.CreateSphereMesh(50, p[i], p[i]);
 
 				MeshBuffer mb = m.GetMeshBuffer(0);
 				mb.Material.Type = MaterialType.Solid;
 				mb.Material.SetTexture(0, driver.GetTexture("../../media/earth.jpg"));
 
 				m.SetMaterialFlag(MaterialFlag.Lighting, false);
 				lodMesh.Add(m);
 
 				if (meshMaterial == null)
 					meshMaterial = m.GetMeshBuffer(0).Material;
 
 				lodTriangleCount.Add(mb.IndexCount / 3);
 			}
 
 			// generate world,
 			// we generate a lot of objects with random positions in huge virtual cube
 
 			int virtualCubeSide = 20000;
 			LODItem[] lodItems = new LODItem[lodItemCount];
 			Random r = new Random(12345000);
 			for (int i = 0; i < lodItemCount; i++)
 			{
 				Matrix tmat = new Matrix(
 					new Vector3Df( // translation
 						r.Next(virtualCubeSide) - virtualCubeSide / 2,
 						r.Next(virtualCubeSide) - virtualCubeSide / 2,
 						r.Next(virtualCubeSide) - virtualCubeSide / 2));
 
 				Vector3Df rvect = new Vector3Df(
 					(float)r.NextDouble() / 200.0f,
 					(float)r.NextDouble() / 200.0f,
 					(float)r.NextDouble() / 200.0f);
 
 				lodItems[i] = LODItem.Create(device, lodMesh, tmat, rvect);
 			}
 			for (int i = 0; i < lodItemCount; i++)
 			{
 				Matrix tmat = new Matrix(
 					new Vector3Df( // translation
 						r.Next(virtualCubeSide) - virtualCubeSide / 2,
 						r.Next(virtualCubeSide) - virtualCubeSide / 2,
 						r.Next(virtualCubeSide) - virtualCubeSide / 2));
 
 				Vector3Df rvect = new Vector3Df(
 					(float)r.NextDouble() / 200.0f,
 					(float)r.NextDouble() / 200.0f,
 					(float)r.NextDouble() / 200.0f);
 
 				lodItems[i] = LODItem.Create(device, lodMesh, tmat, rvect);
 			}
 
 			// split world on virtual sectors (cubes) for faster visibility check
 
 			int lodSectorSide = 6; // total number of sectors will be lodSectorSide^3, so for 6 it is 216
 			int lodSectorSize = virtualCubeSide / lodSectorSide;
 			LODSector[,,] lodSectors = new LODSector[lodSectorSide, lodSectorSide, lodSectorSide];
 
 			for (int i = 0; i < lodSectorSide; i++)
 			{
 				for (int j = 0; j < lodSectorSide; j++)
 				{
 					for (int k = 0; k < lodSectorSide; k++)
 					{
 						AABBox dimension = new AABBox(
 							new Vector3Df(i * lodSectorSize, j * lodSectorSize, k * lodSectorSize),
 							new Vector3Df((i + 1) * lodSectorSize, (j + 1) * lodSectorSize, (k + 1) * lodSectorSize));
 
 						dimension.MinEdge -= virtualCubeSide / 2;
 						dimension.MaxEdge -= virtualCubeSide / 2;
 
 						LODSector s = LODSector.Create(dimension);
 						lodSectors[i, j, k] = s;
 					}
 					for (int k = 0; k < lodSectorSide; k++)
 					{
 						AABBox dimension = new AABBox(
 							new Vector3Df(i * lodSectorSize, j * lodSectorSize, k * lodSectorSize),
 							new Vector3Df((i + 1) * lodSectorSize, (j + 1) * lodSectorSize, (k + 1) * lodSectorSize));
 
 						dimension.MinEdge -= virtualCubeSide / 2;
 						dimension.MaxEdge -= virtualCubeSide / 2;
 
 						LODSector s = LODSector.Create(dimension);
 						lodSectors[i, j, k] = s;
 					}
 				}
 				for (int j = 0; j < lodSectorSide; j++)
 				{
 					for (int k = 0; k < lodSectorSide; k++)
 					{
 						AABBox dimension = new AABBox(
 							new Vector3Df(i * lodSectorSize, j * lodSectorSize, k * lodSectorSize),
 							new Vector3Df((i + 1) * lodSectorSize, (j + 1) * lodSectorSize, (k + 1) * lodSectorSize));
 
 						dimension.MinEdge -= virtualCubeSide / 2;
 						dimension.MaxEdge -= virtualCubeSide / 2;
 
 						LODSector s = LODSector.Create(dimension);
 						lodSectors[i, j, k] = s;
 					}
 				}
 			}
 			for (int i = 0; i < lodSectorSide; i++)
 			{
 				for (int j = 0; j < lodSectorSide; j++)
 				{
 					for (int k = 0; k < lodSectorSide; k++)
 					{
 						AABBox dimension = new AABBox(
 							new Vector3Df(i * lodSectorSize, j * lodSectorSize, k * lodSectorSize),
 							new Vector3Df((i + 1) * lodSectorSize, (j + 1) * lodSectorSize, (k + 1) * lodSectorSize));
 
 						dimension.MinEdge -= virtualCubeSide / 2;
 						dimension.MaxEdge -= virtualCubeSide / 2;
 
 						LODSector s = LODSector.Create(dimension);
 						lodSectors[i, j, k] = s;
 					}
 				}
 			}
 
 			for (int i = 0; i < lodItems.Length; i++)
 			{
 				Vector3Df pos = lodItems[i].Position;
 				pos += virtualCubeSide / 2;
 				pos /= lodSectorSize;
 
 				int ix = (int)pos.X;
 				int iy = (int)pos.Y;
 				int iz = (int)pos.Z;
 
 				if (ix < 0) ix = 0;
 				if (ix > lodSectorSide - 1)
 					ix = lodSectorSide - 1;
 
 				if (iy < 0) ix = 0;
 				if (iy > lodSectorSide - 1)
 					iy = lodSectorSide - 1;
 
 				if (iz < 0) iz = 0;
 				if (iz > lodSectorSide - 1)
 					iz = lodSectorSide - 1;
 
 				lodSectors[ix, iy, iz].AddLODItem(lodItems[i]);
 			}
 			for (int i = 0; i < lodItems.Length; i++)
 			{
 				Vector3Df pos = lodItems[i].Position;
 				pos += virtualCubeSide / 2;
 				pos /= lodSectorSize;
 
 				int ix = (int)pos.X;
 				int iy = (int)pos.Y;
 				int iz = (int)pos.Z;
 
 				if (ix < 0) ix = 0;
 				if (ix > lodSectorSide - 1)
 					ix = lodSectorSide - 1;
 
 				if (iy < 0) ix = 0;
 				if (iy > lodSectorSide - 1)
 					iy = lodSectorSide - 1;
 
 				if (iz < 0) iz = 0;
 				if (iz > lodSectorSide - 1)
 					iz = lodSectorSide - 1;
 
 				lodSectors[ix, iy, iz].AddLODItem(lodItems[i]);
 			}
 
 			// camera
 
 			CameraSceneNode camera = scene.AddCameraSceneNodeFPS();
 			camera.FarValue = 30000;
 
 			// font, which we are going to use to show any text we need
 
 			IrrlichtLime.GUI.GUIFont font = device.GUIEnvironment.GetFont("../../media/fontlucida.png");
 
 			// render loop
 
 			while (device.Run())
 			{
 				driver.BeginScene();
 				scene.DrawAll();
 
 				if (isLabelMode)
 				{
 					LODItem.LabelPositions = new List<Vector2Di>();
 					LODItem.LabelTexts = new List<string>();
 				}
 				else
 				{
 					LODItem.LabelPositions = null;
 					LODItem.LabelTexts = null;
 				}
 
 				meshMaterial.Wireframe = isWireframeMode;
 				device.VideoDriver.SetMaterial(meshMaterial);
 
 				uint timer = device.Timer.Time;
 				Vector3Df cameraPosition = camera.AbsolutePosition;
 				AABBox cameraViewBox = camera.ViewFrustum.BoundingBox;
 
 				for (int i = 0; i < lodSectorSide; i++)
 				{
 					for (int j = 0; j < lodSectorSide; j++)
 					{
 						for (int k = 0; k < lodSectorSide; k++)
 						{
 							lodSectors[i, j, k].Draw(timer, cameraPosition, cameraViewBox);
 						}
 						for (int k = 0; k < lodSectorSide; k++)
 						{
 							lodSectors[i, j, k].Draw(timer, cameraPosition, cameraViewBox);
 						}
 					}
 					for (int j = 0; j < lodSectorSide; j++)
 					{
 						for (int k = 0; k < lodSectorSide; k++)
 						{
 							lodSectors[i, j, k].Draw(timer, cameraPosition, cameraViewBox);
 						}
 					}
 				}
 				for (int i = 0; i < lodSectorSide; i++)
 				{
 					for (int j = 0; j < lodSectorSide; j++)
 					{
 						for (int k = 0; k < lodSectorSide; k++)
 						{
 							lodSectors[i, j, k].Draw(timer, cameraPosition, cameraViewBox);
 						}
 					}
 				}
 
 				if (isLabelMode)
 				{
 					for (int i = 0; i < LODItem.LabelPositions.Count; i++)
 					{
 						driver.Draw2DLine(
 							LODItem.LabelPositions[i] - new Vector2Di(10, 0),
 							LODItem.LabelPositions[i] + new Vector2Di(50, 0),
 							Color.OpaqueGreen);
 
 						driver.Draw2DLine(
 							LODItem.LabelPositions[i] - new Vector2Di(0, 10),
 							LODItem.LabelPositions[i] + new Vector2Di(0, 50),
 							Color.OpaqueGreen);
 
 						font.Draw(LODItem.LabelTexts[i], LODItem.LabelPositions[i], Color.OpaqueGreen);
 					}
 					for (int i = 0; i < LODItem.LabelPositions.Count; i++)
 					{
 						driver.Draw2DLine(
 							LODItem.LabelPositions[i] - new Vector2Di(10, 0),
 							LODItem.LabelPositions[i] + new Vector2Di(50, 0),
 							Color.OpaqueGreen);
 
 						driver.Draw2DLine(
 							LODItem.LabelPositions[i] - new Vector2Di(0, 10),
 							LODItem.LabelPositions[i] + new Vector2Di(0, 50),
 							Color.OpaqueGreen);
 
 						font.Draw(LODItem.LabelTexts[i], LODItem.LabelPositions[i], Color.OpaqueGreen);
 					}
 				}
 
 				if (isStatsMode)
 				{
 					// show LOD stats
 
 					int[] lodCount = new int[7] { 0, 0, 0, 0, 0, 0, 0 };
 					for (int i = 0; i < lodItems.Length; i++)
 						lodCount[lodItems[i].CurrentLOD]++;
 					for (int i = 0; i < lodItems.Length; i++)
 						lodCount[lodItems[i].CurrentLOD]++;
 
 					string f = "";
 					for (int i = 0; i < lodCount.Length; i++)
 					{
 						int n = lodCount[i];
 						f += "LOD" + i.ToString() + "
 					}
 					for (int i = 0; i < lodCount.Length; i++)
 					{
 						int n = lodCount[i];
 						f += "LOD" + i.ToString() + "
 					}
 
 					string l = "------------------------";
 
 					font.Draw(
 						string.Format("Stats\n{0}\n{1}{2}\nTotal
 						new Vector2Di(10, 140),
 						Color.OpaqueMagenta);
 				}
 
 				// show general stats
 
 				font.Draw(string.Format(
 					"Camera position
 					camera.AbsolutePosition,
 					lodTriangleCount[0] * lodItemCount,
 					driver.PrimitiveCountDrawn,
 					driver.Name,
 					driver.FPS),
 					10, 10, Color.OpaqueYellow);
 
 				// show active keys
 
 				font.Draw(
 				    "[S] Toggle stats\n[W] Toggle wireframe\n[L] Toggle labels (only for LODs from 0 to 4)\n[Esc] Exit application",
 				    10, driver.ScreenSize.Height - 80, Color.OpaqueCyan);
 
 				driver.EndScene();
 			}
 			while (device.Run())
 			{
 				driver.BeginScene();
 				scene.DrawAll();
 
 				if (isLabelMode)
 				{
 					LODItem.LabelPositions = new List<Vector2Di>();
 					LODItem.LabelTexts = new List<string>();
 				}
 				else
 				{
 					LODItem.LabelPositions = null;
 					LODItem.LabelTexts = null;
 				}
 
 				meshMaterial.Wireframe = isWireframeMode;
 				device.VideoDriver.SetMaterial(meshMaterial);
 
 				uint timer = device.Timer.Time;
 				Vector3Df cameraPosition = camera.AbsolutePosition;
 				AABBox cameraViewBox = camera.ViewFrustum.BoundingBox;
 
 				for (int i = 0; i < lodSectorSide; i++)
 				{
 					for (int j = 0; j < lodSectorSide; j++)
 					{
 						for (int k = 0; k < lodSectorSide; k++)
 						{
 							lodSectors[i, j, k].Draw(timer, cameraPosition, cameraViewBox);
 						}
 					}
 				}
 
 				if (isLabelMode)
 				{
 					for (int i = 0; i < LODItem.LabelPositions.Count; i++)
 					{
 						driver.Draw2DLine(
 							LODItem.LabelPositions[i] - new Vector2Di(10, 0),
 							LODItem.LabelPositions[i] + new Vector2Di(50, 0),
 							Color.OpaqueGreen);
 
 						driver.Draw2DLine(
 							LODItem.LabelPositions[i] - new Vector2Di(0, 10),
 							LODItem.LabelPositions[i] + new Vector2Di(0, 50),
 							Color.OpaqueGreen);
 
 						font.Draw(LODItem.LabelTexts[i], LODItem.LabelPositions[i], Color.OpaqueGreen);
 					}
 				}
 
 				if (isStatsMode)
 				{
 					// show LOD stats
 
 					int[] lodCount = new int[7] { 0, 0, 0, 0, 0, 0, 0 };
 					for (int i = 0; i < lodItems.Length; i++)
 						lodCount[lodItems[i].CurrentLOD]++;
 
 					string f = "";
 					for (int i = 0; i < lodCount.Length; i++)
 					{
 						int n = lodCount[i];
 						f += "LOD" + i.ToString() + "
 					}
 
 					string l = "------------------------";
 
 					font.Draw(
 						string.Format("Stats\n{0}\n{1}{2}\nTotal
 						new Vector2Di(10, 140),
 						Color.OpaqueMagenta);
 				}
 
 				// show general stats
 
 				font.Draw(string.Format(
 					"Camera position
 					camera.AbsolutePosition,
 					lodTriangleCount[0] * lodItemCount,
 					driver.PrimitiveCountDrawn,
 					driver.Name,
 					driver.FPS),
 					10, 10, Color.OpaqueYellow);
 
 				// show active keys
 
 				font.Draw(
 				    "[S] Toggle stats\n[W] Toggle wireframe\n[L] Toggle labels (only for LODs from 0 to 4)\n[Esc] Exit application",
 				    10, driver.ScreenSize.Height - 80, Color.OpaqueCyan);
 
 				driver.EndScene();
 			}
 
 			// drop
 
 			device.Drop();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L09.SimpleLOD\Program.cs" startline="245" endline="272"><![CDATA[
 
 		static bool device_OnEvent(Event evnt)
 		{
 			if (evnt.Type == EventType.Key &&
 				evnt.Key.PressedDown)
 			{
 				switch (evnt.Key.Key)
 				{
 					case KeyCode.KeyS
 						isStatsMode = !isStatsMode;
 						return true;
 
 					case KeyCode.KeyW
 						isWireframeMode = !isWireframeMode;
 						return true;
 
 					case KeyCode.KeyL
 						isLabelMode = !isLabelMode;
 						return true;
 
 					case KeyCode.Esc
 						device.Close();
 						return true;
 				}
 			}
 
 			return false;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L09.SimpleLOD\Program.cs" startline="273" endline="283"><![CDATA[
 
 		static int AskUserForLODItemCount()
 		{
 			Console.Write("Enter number of planets to generate (recommended value is 5000)
 			string s = Console.ReadLine();
 
 			int i = Convert.ToInt32(s);
 			if (i < 1) i = 1;
 
 			return i;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L09.SimpleLOD\Program.cs" startline="284" endline="309"><![CDATA[
 
 		static bool AskUserForDriver(out DriverType driverType)
 		{
 			driverType = DriverType.Null;
 
 			Console.Write("Please select the driver you want for this example
 						" (a) OpenGL\n (b) Direct3D 9.0c\n (c) Direct3D 8.1\n" +
 						" (d) Burning's Software Renderer\n (e) Software Renderer\n" +
 						" (f) NullDevice\n (otherKey) exit\n\n");
 
 			ConsoleKeyInfo i = Console.ReadKey();
 
 			switch (i.Key)
 			{
 				case ConsoleKey.A
 				case ConsoleKey.B
 				case ConsoleKey.C
 				case ConsoleKey.D
 				case ConsoleKey.E
 				case ConsoleKey.F
 				default
 					return false;
 			}
 
 			return true;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L09.SimpleLOD\Program.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L09.SimpleLOD\Program.cs" startline="16" endline="18"><![CDATA[
 		static bool isWireframeMode = false;
 		static bool isLabelMode = false;
 		static bool isStatsMode = false;
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L09.SimpleLOD\Program.cs" startline="19" endline="328"><![CDATA[
 
 		static void Main(string[] args)
 		{
 			int lodItemCount = AskUserForLODItemCount();
 
 			DriverType driverType;
 			if (!AskUserForDriver(out driverType))
 				return;
 
 			device = IrrlichtDevice.CreateDevice(driverType, new Dimension2Di(800, 600));
 			if (device == null)
 				return;
 
 			device.OnEvent += new IrrlichtDevice.EventHandler(device_OnEvent);
 			device.SetWindowCaption("Simple LOD - Irrlicht Lime");
 			device.CursorControl.Visible = false;
 
 			VideoDriver driver = device.VideoDriver;
 			SceneManager scene = device.SceneManager;
 
 			// generate all LODs of mesh
 
 			List<Mesh> lodMesh = new List<Mesh>();
 			Material meshMaterial = null;
 			List<int> lodTriangleCount = new List<int>();
 
 			int[] p = new int[] { 100, 50, 32, 20, 12, 6, 3 };
 			for (int i = 0; i < p.Length; i++)
 			{
 				Mesh m = scene.GeometryCreator.CreateSphereMesh(50, p[i], p[i]);
 
 				MeshBuffer mb = m.GetMeshBuffer(0);
 				mb.Material.Type = MaterialType.Solid;
 				mb.Material.SetTexture(0, driver.GetTexture("../../media/earth.jpg"));
 
 				m.SetMaterialFlag(MaterialFlag.Lighting, false);
 				lodMesh.Add(m);
 
 				if (meshMaterial == null)
 					meshMaterial = m.GetMeshBuffer(0).Material;
 
 				lodTriangleCount.Add(mb.IndexCount / 3);
 			}
 
 			// generate world,
 			// we generate a lot of objects with random positions in huge virtual cube
 
 			int virtualCubeSide = 20000;
 			LODItem[] lodItems = new LODItem[lodItemCount];
 			Random r = new Random(12345000);
 			for (int i = 0; i < lodItemCount; i++)
 			{
 				Matrix tmat = new Matrix(
 					new Vector3Df( // translation
 						r.Next(virtualCubeSide) - virtualCubeSide / 2,
 						r.Next(virtualCubeSide) - virtualCubeSide / 2,
 						r.Next(virtualCubeSide) - virtualCubeSide / 2));
 
 				Vector3Df rvect = new Vector3Df(
 					(float)r.NextDouble() / 200.0f,
 					(float)r.NextDouble() / 200.0f,
 					(float)r.NextDouble() / 200.0f);
 
 				lodItems[i] = LODItem.Create(device, lodMesh, tmat, rvect);
 			}
 
 			// split world on virtual sectors (cubes) for faster visibility check
 
 			int lodSectorSide = 6; // total number of sectors will be lodSectorSide^3, so for 6 it is 216
 			int lodSectorSize = virtualCubeSide / lodSectorSide;
 			LODSector[,,] lodSectors = new LODSector[lodSectorSide, lodSectorSide, lodSectorSide];
 
 			for (int i = 0; i < lodSectorSide; i++)
 			{
 				for (int j = 0; j < lodSectorSide; j++)
 				{
 					for (int k = 0; k < lodSectorSide; k++)
 					{
 						AABBox dimension = new AABBox(
 							new Vector3Df(i * lodSectorSize, j * lodSectorSize, k * lodSectorSize),
 							new Vector3Df((i + 1) * lodSectorSize, (j + 1) * lodSectorSize, (k + 1) * lodSectorSize));
 
 						dimension.MinEdge -= virtualCubeSide / 2;
 						dimension.MaxEdge -= virtualCubeSide / 2;
 
 						LODSector s = LODSector.Create(dimension);
 						lodSectors[i, j, k] = s;
 					}
 				}
 			}
 
 			for (int i = 0; i < lodItems.Length; i++)
 			{
 				Vector3Df pos = lodItems[i].Position;
 				pos += virtualCubeSide / 2;
 				pos /= lodSectorSize;
 
 				int ix = (int)pos.X;
 				int iy = (int)pos.Y;
 				int iz = (int)pos.Z;
 
 				if (ix < 0) ix = 0;
 				if (ix > lodSectorSide - 1)
 					ix = lodSectorSide - 1;
 
 				if (iy < 0) ix = 0;
 				if (iy > lodSectorSide - 1)
 					iy = lodSectorSide - 1;
 
 				if (iz < 0) iz = 0;
 				if (iz > lodSectorSide - 1)
 					iz = lodSectorSide - 1;
 
 				lodSectors[ix, iy, iz].AddLODItem(lodItems[i]);
 			}
 
 			// camera
 
 			CameraSceneNode camera = scene.AddCameraSceneNodeFPS();
 			camera.FarValue = 30000;
 
 			// font, which we are going to use to show any text we need
 
 			IrrlichtLime.GUI.GUIFont font = device.GUIEnvironment.GetFont("../../media/fontlucida.png");
 
 			// render loop
 
 			while (device.Run())
 			{
 				driver.BeginScene();
 				scene.DrawAll();
 
 				if (isLabelMode)
 				{
 					LODItem.LabelPositions = new List<Vector2Di>();
 					LODItem.LabelTexts = new List<string>();
 				}
 				else
 				{
 					LODItem.LabelPositions = null;
 					LODItem.LabelTexts = null;
 				}
 
 				meshMaterial.Wireframe = isWireframeMode;
 				device.VideoDriver.SetMaterial(meshMaterial);
 
 				uint timer = device.Timer.Time;
 				Vector3Df cameraPosition = camera.AbsolutePosition;
 				AABBox cameraViewBox = camera.ViewFrustum.BoundingBox;
 
 				for (int i = 0; i < lodSectorSide; i++)
 				{
 					for (int j = 0; j < lodSectorSide; j++)
 					{
 						for (int k = 0; k < lodSectorSide; k++)
 						{
 							lodSectors[i, j, k].Draw(timer, cameraPosition, cameraViewBox);
 						}
 					}
 				}
 
 				if (isLabelMode)
 				{
 					for (int i = 0; i < LODItem.LabelPositions.Count; i++)
 					{
 						driver.Draw2DLine(
 							LODItem.LabelPositions[i] - new Vector2Di(10, 0),
 							LODItem.LabelPositions[i] + new Vector2Di(50, 0),
 							Color.OpaqueGreen);
 
 						driver.Draw2DLine(
 							LODItem.LabelPositions[i] - new Vector2Di(0, 10),
 							LODItem.LabelPositions[i] + new Vector2Di(0, 50),
 							Color.OpaqueGreen);
 
 						font.Draw(LODItem.LabelTexts[i], LODItem.LabelPositions[i], Color.OpaqueGreen);
 					}
 				}
 
 				if (isStatsMode)
 				{
 					// show LOD stats
 
 					int[] lodCount = new int[7] { 0, 0, 0, 0, 0, 0, 0 };
 					for (int i = 0; i < lodItems.Length; i++)
 						lodCount[lodItems[i].CurrentLOD]++;
 
 					string f = "";
 					for (int i = 0; i < lodCount.Length; i++)
 					{
 						int n = lodCount[i];
 						f += "LOD" + i.ToString() + "
 					}
 
 					string l = "------------------------";
 
 					font.Draw(
 						string.Format("Stats\n{0}\n{1}{2}\nTotal
 						new Vector2Di(10, 140),
 						Color.OpaqueMagenta);
 				}
 
 				// show general stats
 
 				font.Draw(string.Format(
 					"Camera position
 					camera.AbsolutePosition,
 					lodTriangleCount[0] * lodItemCount,
 					driver.PrimitiveCountDrawn,
 					driver.Name,
 					driver.FPS),
 					10, 10, Color.OpaqueYellow);
 
 				// show active keys
 
 				font.Draw(
 				    "[S] Toggle stats\n[W] Toggle wireframe\n[L] Toggle labels (only for LODs from 0 to 4)\n[Esc] Exit application",
 				    10, driver.ScreenSize.Height - 80, Color.OpaqueCyan);
 
 				driver.EndScene();
 			}
 
 			// drop
 
 			device.Drop();
 		}
 
 		static bool device_OnEvent(Event evnt)
 		{
 			if (evnt.Type == EventType.Key &&
 				evnt.Key.PressedDown)
 			{
 				switch (evnt.Key.Key)
 				{
 					case KeyCode.KeyS
 						isStatsMode = !isStatsMode;
 						return true;
 
 					case KeyCode.KeyW
 						isWireframeMode = !isWireframeMode;
 						return true;
 
 					case KeyCode.KeyL
 						isLabelMode = !isLabelMode;
 						return true;
 
 					case KeyCode.Esc
 						device.Close();
 						return true;
 				}
 			}
 
 			return false;
 		}
 
 		static int AskUserForLODItemCount()
 		{
 			Console.Write("Enter number of planets to generate (recommended value is 5000)
 			string s = Console.ReadLine();
 
 			int i = Convert.ToInt32(s);
 			if (i < 1) i = 1;
 
 			return i;
 		}
 
 		static bool AskUserForDriver(out DriverType driverType)
 		{
 			driverType = DriverType.Null;
 
 			Console.Write("Please select the driver you want for this example
 						" (a) OpenGL\n (b) Direct3D 9.0c\n (c) Direct3D 8.1\n" +
 						" (d) Burning's Software Renderer\n (e) Software Renderer\n" +
 						" (f) NullDevice\n (otherKey) exit\n\n");
 
 			ConsoleKeyInfo i = Console.ReadKey();
 
 			switch (i.Key)
 			{
 				case ConsoleKey.A
 				case ConsoleKey.B
 				case ConsoleKey.C
 				case ConsoleKey.D
 				case ConsoleKey.E
 				case ConsoleKey.F
 				default
 					return false;
 			}
 
 			return true;
 		}
 	}
 
 	class LODItem
 	{
 		public static List<Vector2Di> LabelPositions = null;
 		public static List<string> LabelTexts = null;
 
 		IrrlichtDevice device;
 		VideoDriver driver;
 		Dimension2Di screenSize;
 
 		List<Mesh> meshLODs;
 		Matrix transformation;
 		Vector3Df rotationVector;
 
 		uint nextUpdateAt = 0;
 		int currentLOD;
 
 		public int CurrentLOD { get { return currentLOD; } }
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L09.SimpleLOD\Program.cs" startline="329" endline="329"><![CDATA[
 		public Vector3Df Position { get { return transformation.Translation; } }
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L09.SimpleLOD\Program.cs" startline="330" endline="345"><![CDATA[
 
 		static public LODItem Create(IrrlichtDevice device, List<Mesh> meshLODs, Matrix transformation, Vector3Df rotationVector)
 		{
 			LODItem n = new LODItem();
 			n.device = device;
 			n.meshLODs = meshLODs;
 			n.transformation = transformation;
 			n.rotationVector = rotationVector;
 			n.currentLOD = meshLODs.Count - 1;
 
 			// we cache some really frequently accessed values (which will never get changed anyway)
 			n.driver = device.VideoDriver;
 			n.screenSize = device.VideoDriver.ScreenSize;
 
 			return n;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L09.SimpleLOD\Program.cs" startline="346" endline="440"><![CDATA[
 
 		readonly float[] lodDistanceSQ = new float[] { // this values directly controls how many tringles we are drawing
 			150 * 150, // LOD 0
 			300 * 300, // LOD 1
 			600 * 600, // LOD 2
 			1200 * 1200, // LOD 3
 			2500 * 2500, // LOD 4
 			6000 * 6000, // LOD 5
 			-1 * -1 // LOD 6
 			// because anything that is further than 6000 will stay at the last available LOD, which is 6
 		};
 
 		readonly uint[] updateIntervals = new uint[] {
 			10, // we can affort this speed of updating (which is almost "every frame")
 			20, // because we know that objects with LOD 0 and 1 - are very close to the camera, we want them to look
 			// hipoly and rotate smoothly; also we understand that it is only couple of objects with this LOD is
 			// going to be present at any time
 			40,
 			80,
 			120,
 			200,
 			1500 };
 
 		public void Draw(uint time, Vector3Df cameraPosition)
 		{
 			if (time > nextUpdateAt)
 			{
 				// animation
 
 				transformation.Rotation = rotationVector * time;
 
 				// recalculate current LOD
 
 				currentLOD = meshLODs.Count - 1;
 				float distanceSQ = (transformation.Translation - cameraPosition).LengthSQ;
 				for (int i = 0; i < lodDistanceSQ.Length - 1; i++)
 				{
 					if (distanceSQ < lodDistanceSQ[i])
 					{
 						currentLOD = i;
 						break;
 					}
 				}
 				for (int i = 0; i < lodDistanceSQ.Length - 1; i++)
 				{
 					if (distanceSQ < lodDistanceSQ[i])
 					{
 						currentLOD = i;
 						break;
 					}
 				}
 
 				// next line assigns new time for LOD to be recalculated in future,
 				// we do not use same value for all LODs here, because we don't want all the LODItems
 				// to be recalculated in the same time (same frame). So we assign a value
 				// which higher when current LOD is higher - which also means that for now we are
 				// a distant object and it is less possible that we will need to change LOD at all;
 				// but close objects (with small LOD value, like 0, 1 or 2) we need to pick quite short time.
 				// This is OK if it will be really short, because this objects are too close and indeed may
 				// change their LOD value very soon, however, we also understand, that in general all the objects
 				// takes very large area, so in general we will have something like less than 2% with LOD level 0, 1 or 2,
 				// all other will get higher LOD, and about more than 50% will have maximum LOD value -- they take more time to recalc
 				// their LOD than to draw them, so we need to calc their LOD less frequent.
 				// p.s.
 				// the speed which user uses for movement is slow in general.
 
 				nextUpdateAt = time + updateIntervals[currentLOD];
 			}
 
 			// drawing
 
 			// we do no set material here, because we draw all LODItems with the same material, we set material in main rendering loop
 
 			driver.SetTransform(TransformationState.World, transformation); // this is also very time consuming operation; we can optimize it
 			// to make something like 100 calls (instead of 5000 - the number of LODItems) - we need to group LODItems all this we increase FPS up on
 			// 10%, BUT it that case we will not be able to move independent LODItems, becase they will not need (and will not have) own transformation
 			// matrix (only LODGroup will has it). So grouping is really greate for some completly static objects like trees, shrubs, stones, etc.
 
 			// we draw single 16-bit meshbuffer
 			driver.DrawMeshBuffer(meshLODs[currentLOD].GetMeshBuffer(0));
 
 			if (LabelPositions != null && currentLOD <= 4)
 			{
 				Vector2Di p = device.SceneManager.SceneCollisionManager.GetScreenCoordinatesFrom3DPosition(transformation.Translation);
 
 				// now we filter here results which will not be visible; we know that
 				// - GetScreenCoordinatesFrom3DPosition() returns {-10000,-10000} for behind camera 3d positions
 				// - we do not need to draw out small text if its out of the screen
 				// p.s.
 				if (p.X > -200 && p.X < screenSize.Width + 200 &&
 					p.Y > -100 && p.Y < screenSize.Height + 100)
 				{
 					int t = meshLODs[currentLOD].GetMeshBuffer(0).IndexCount / 3;
 					int d = (int)(transformation.Translation - cameraPosition).Length;
 
 					LabelPositions.Add(p);
 					LabelTexts.Add(
 						"LOD
 						"\nTrinagles
 						"\nDistance
 				}
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L09.SimpleLOD\Program.cs" startline="325" endline="358"><![CDATA[
 		uint nextUpdateAt = 0;
 		int currentLOD;
 
 		public int CurrentLOD { get { return currentLOD; } }
 		public Vector3Df Position { get { return transformation.Translation; } }
 
 		static public LODItem Create(IrrlichtDevice device, List<Mesh> meshLODs, Matrix transformation, Vector3Df rotationVector)
 		{
 			LODItem n = new LODItem();
 			n.device = device;
 			n.meshLODs = meshLODs;
 			n.transformation = transformation;
 			n.rotationVector = rotationVector;
 			n.currentLOD = meshLODs.Count - 1;
 
 			// we cache some really frequently accessed values (which will never get changed anyway)
 			n.driver = device.VideoDriver;
 			n.screenSize = device.VideoDriver.ScreenSize;
 
 			return n;
 		}
 
 		readonly float[] lodDistanceSQ = new float[] { // this values directly controls how many tringles we are drawing
 			150 * 150, // LOD 0
 			300 * 300, // LOD 1
 			600 * 600, // LOD 2
 			1200 * 1200, // LOD 3
 			2500 * 2500, // LOD 4
 			6000 * 6000, // LOD 5
 			-1 * -1 // LOD 6
 			// because anything that is further than 6000 will stay at the last available LOD, which is 6
 		};
 
 		readonly uint[] updateIntervals = new uint[] {
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L09.SimpleLOD\Program.cs" startline="314" endline="315"><![CDATA[
 		public static List<Vector2Di> LabelPositions = null;
 		public static List<string> LabelTexts = null;
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L09.SimpleLOD\Program.cs" startline="316" endline="450"><![CDATA[
 
 		IrrlichtDevice device;
 		VideoDriver driver;
 		Dimension2Di screenSize;
 
 		List<Mesh> meshLODs;
 		Matrix transformation;
 		Vector3Df rotationVector;
 
 		uint nextUpdateAt = 0;
 		int currentLOD;
 
 		public int CurrentLOD { get { return currentLOD; } }
 		public Vector3Df Position { get { return transformation.Translation; } }
 
 		static public LODItem Create(IrrlichtDevice device, List<Mesh> meshLODs, Matrix transformation, Vector3Df rotationVector)
 		{
 			LODItem n = new LODItem();
 			n.device = device;
 			n.meshLODs = meshLODs;
 			n.transformation = transformation;
 			n.rotationVector = rotationVector;
 			n.currentLOD = meshLODs.Count - 1;
 
 			// we cache some really frequently accessed values (which will never get changed anyway)
 			n.driver = device.VideoDriver;
 			n.screenSize = device.VideoDriver.ScreenSize;
 
 			return n;
 		}
 
 		readonly float[] lodDistanceSQ = new float[] { // this values directly controls how many tringles we are drawing
 			150 * 150, // LOD 0
 			300 * 300, // LOD 1
 			600 * 600, // LOD 2
 			1200 * 1200, // LOD 3
 			2500 * 2500, // LOD 4
 			6000 * 6000, // LOD 5
 			-1 * -1 // LOD 6
 			// because anything that is further than 6000 will stay at the last available LOD, which is 6
 		};
 
 		readonly uint[] updateIntervals = new uint[] {
 			10, // we can affort this speed of updating (which is almost "every frame")
 			20, // because we know that objects with LOD 0 and 1 - are very close to the camera, we want them to look
 			// hipoly and rotate smoothly; also we understand that it is only couple of objects with this LOD is
 			// going to be present at any time
 			40,
 			80,
 			120,
 			200,
 			1500 };
 
 		public void Draw(uint time, Vector3Df cameraPosition)
 		{
 			if (time > nextUpdateAt)
 			{
 				// animation
 
 				transformation.Rotation = rotationVector * time;
 
 				// recalculate current LOD
 
 				currentLOD = meshLODs.Count - 1;
 				float distanceSQ = (transformation.Translation - cameraPosition).LengthSQ;
 				for (int i = 0; i < lodDistanceSQ.Length - 1; i++)
 				{
 					if (distanceSQ < lodDistanceSQ[i])
 					{
 						currentLOD = i;
 						break;
 					}
 				}
 
 				// next line assigns new time for LOD to be recalculated in future,
 				// we do not use same value for all LODs here, because we don't want all the LODItems
 				// to be recalculated in the same time (same frame). So we assign a value
 				// which higher when current LOD is higher - which also means that for now we are
 				// a distant object and it is less possible that we will need to change LOD at all;
 				// but close objects (with small LOD value, like 0, 1 or 2) we need to pick quite short time.
 				// This is OK if it will be really short, because this objects are too close and indeed may
 				// change their LOD value very soon, however, we also understand, that in general all the objects
 				// takes very large area, so in general we will have something like less than 2% with LOD level 0, 1 or 2,
 				// all other will get higher LOD, and about more than 50% will have maximum LOD value -- they take more time to recalc
 				// their LOD than to draw them, so we need to calc their LOD less frequent.
 				// p.s.
 				// the speed which user uses for movement is slow in general.
 
 				nextUpdateAt = time + updateIntervals[currentLOD];
 			}
 
 			// drawing
 
 			// we do no set material here, because we draw all LODItems with the same material, we set material in main rendering loop
 
 			driver.SetTransform(TransformationState.World, transformation); // this is also very time consuming operation; we can optimize it
 			// to make something like 100 calls (instead of 5000 - the number of LODItems) - we need to group LODItems all this we increase FPS up on
 			// 10%, BUT it that case we will not be able to move independent LODItems, becase they will not need (and will not have) own transformation
 			// matrix (only LODGroup will has it). So grouping is really greate for some completly static objects like trees, shrubs, stones, etc.
 
 			// we draw single 16-bit meshbuffer
 			driver.DrawMeshBuffer(meshLODs[currentLOD].GetMeshBuffer(0));
 
 			if (LabelPositions != null && currentLOD <= 4)
 			{
 				Vector2Di p = device.SceneManager.SceneCollisionManager.GetScreenCoordinatesFrom3DPosition(transformation.Translation);
 
 				// now we filter here results which will not be visible; we know that
 				// - GetScreenCoordinatesFrom3DPosition() returns {-10000,-10000} for behind camera 3d positions
 				// - we do not need to draw out small text if its out of the screen
 				// p.s.
 				if (p.X > -200 && p.X < screenSize.Width + 200 &&
 					p.Y > -100 && p.Y < screenSize.Height + 100)
 				{
 					int t = meshLODs[currentLOD].GetMeshBuffer(0).IndexCount / 3;
 					int d = (int)(transformation.Translation - cameraPosition).Length;
 
 					LabelPositions.Add(p);
 					LabelTexts.Add(
 						"LOD
 						"\nTrinagles
 						"\nDistance
 				}
 			}
 		}
 	}
 
 	class LODSector
 	{
 		AABBox dimension;
 		Vector3Df d1, d2, d3, d4, d5, d6, d7, d8;
 
 		List<LODItem> lodItems;
 
 		public AABBox Dimension { get { return dimension; } }
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L09.SimpleLOD\Program.cs" startline="451" endline="468"><![CDATA[
 
 		public static LODSector Create(AABBox dimension)
 		{
 			LODSector s = new LODSector();
 			s.dimension = dimension;
 			s.d1 = dimension.MinEdge;
 			s.d2 = new Vector3Df(dimension.MinEdge.X, dimension.MinEdge.Y, dimension.MaxEdge.Z);
 			s.d3 = new Vector3Df(dimension.MinEdge.X, dimension.MaxEdge.Y, dimension.MinEdge.Z);
 			s.d4 = new Vector3Df(dimension.MinEdge.X, dimension.MaxEdge.Y, dimension.MaxEdge.Z);
 			s.d5 = dimension.MaxEdge;
 			s.d6 = new Vector3Df(dimension.MaxEdge.X, dimension.MinEdge.Y, dimension.MinEdge.Z);
 			s.d7 = new Vector3Df(dimension.MaxEdge.X, dimension.MinEdge.Y, dimension.MaxEdge.Z);
 			s.d8 = new Vector3Df(dimension.MaxEdge.X, dimension.MaxEdge.Y, dimension.MinEdge.Z);
 
 			s.lodItems = new List<LODItem>();
 
 			return s;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L09.SimpleLOD\Program.cs" startline="469" endline="473"><![CDATA[
 
 		public void AddLODItem(LODItem lodItem)
 		{
 			lodItems.Add(lodItem);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L09.SimpleLOD\Program.cs" startline="474" endline="491"><![CDATA[
 
 		public void Draw(uint time, Vector3Df cameraPosition, AABBox cameraViewBox)
 		{
 			if (cameraViewBox.IsInside(d1) ||
 				cameraViewBox.IsInside(d2) ||
 				cameraViewBox.IsInside(d3) ||
 				cameraViewBox.IsInside(d4) ||
 				cameraViewBox.IsInside(d5) ||
 				cameraViewBox.IsInside(d6) ||
 				cameraViewBox.IsInside(d7) ||
 				cameraViewBox.IsInside(d8))
 			{
 				for (int i = 0; i < lodItems.Count; i++)
 				{
 					lodItems[i].Draw(time, cameraPosition);
 				}
 				for (int i = 0; i < lodItems.Count; i++)
 				{
 					lodItems[i].Draw(time, cameraPosition);
 				}
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L09.SimpleLOD\Program.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L09.SimpleLOD\Program.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L09.SimpleLOD\Program.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L10.ImageBrowser\TextureManager.cs" startline="26" endline="57"><![CDATA[
 		public TextureManager(IrrDevice irrDevice)
 		{
 			this.irrDevice = irrDevice;
 
 			threadCommands = new Queue<ThreadCommand>();
 			loadedTextures = new List<string>();
 
 			// generate "no preview" texture
 
 			int h = 256;
 			Image i = irrDevice.DriverNoCheck.CreateImage(ColorFormat.A8R8G8B8, new Dimension2Di(h));
 			i.Fill(new Color(0x112233));
 			for (int a = 0; a < h; a++)
 			{
 				i.SetPixel(a, 0, new Color(0x557799));
 				i.SetPixel(a, h - 1, new Color(0x557799));
 				i.SetPixel(0, a, new Color(0x557799));
 				i.SetPixel(h - 1, a, new Color(0x557799));
 
 				if (a > 16 && a < h - 16)
 				{
 					i.SetPixel(a, a, new Color(0x557799));
 					i.SetPixel(h - a - 1, a, new Color(0x557799));
 				}
 			}
 			for (int a = 0; a < h; a++)
 			{
 				i.SetPixel(a, 0, new Color(0x557799));
 				i.SetPixel(a, h - 1, new Color(0x557799));
 				i.SetPixel(0, a, new Color(0x557799));
 				i.SetPixel(h - 1, a, new Color(0x557799));
 
 				if (a > 16 && a < h - 16)
 				{
 					i.SetPixel(a, a, new Color(0x557799));
 					i.SetPixel(h - a - 1, a, new Color(0x557799));
 				}
 			}
 
 			irrDevice.Lock();
 			noPreviewTexture = irrDevice.Driver.AddTexture("NoPreviewTexture", i);
 			irrDevice.Unlock();
 
 			i.Drop();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L10.ImageBrowser\TextureManager.cs" startline="58" endline="68"><![CDATA[
 
 		public void Start(int threadCount)
 		{
 			threads = new Thread[threadCount];
 			for (int i = 0; i < threadCount; i++)
 			{
 				threads[i] = new Thread(thread_Main);
 				threads[i].Name = GetType().Name + "/Thread#" + (i + 1);
 				threads[i].Start();
 			}
 			for (int i = 0; i < threadCount; i++)
 			{
 				threads[i] = new Thread(thread_Main);
 				threads[i].Name = GetType().Name + "/Thread#" + (i + 1);
 				threads[i].Start();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L10.ImageBrowser\TextureManager.cs" startline="69" endline="81"><![CDATA[
 
 		public void Stop()
 		{
 			if (threads == null)
 				return;
 
 			addThreadCommand(ThreadCommandType.Stop, false);
 			foreach (Thread t in threads)
 				t.Join();
 			foreach (Thread t in threads)
 				t.Join();
 
 			System.Diagnostics.Debug.Assert(threadCommands.Count == 1);
 			threadCommands.Dequeue();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L10.ImageBrowser\TextureManager.cs" startline="82" endline="87"><![CDATA[
 
 		public void LoadTexture(SceneNode node, string path, Dimension2Di size, bool topPriority = false)
 		{
 			node.Grab();
 			addThreadCommand(ThreadCommandType.LoadTexture, topPriority, node, path, size);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L10.ImageBrowser\TextureManager.cs" startline="88" endline="92"><![CDATA[
 
 		public void UnloadTexture(string path)
 		{
 			addThreadCommand(ThreadCommandType.UnloadTexture, false, path);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L10.ImageBrowser\TextureManager.cs" startline="93" endline="103"><![CDATA[
 
 		public void EnqueueUnloadingOfAllLoadedTextures()
 		{
 			lock (loadedTextures)
 			{
 				foreach (string t in loadedTextures)
 					addThreadCommand(ThreadCommandType.UnloadTexture, false, t);
 				foreach (string t in loadedTextures)
 					addThreadCommand(ThreadCommandType.UnloadTexture, false, t);
 
 				loadedTextures.Clear();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L10.ImageBrowser\TextureManager.cs" startline="104" endline="111"><![CDATA[
 
 		public int GetCommandQueueLength()
 		{
 			lock (threadCommands)
 			{
 				return threadCommands.Count;
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L10.ImageBrowser\TextureManager.cs" startline="112" endline="143"><![CDATA[
 
 		void addThreadCommand(ThreadCommandType command, bool topPriority, params object[] args)
 		{
 			ThreadCommand cmd = new ThreadCommand();
 			cmd.Type = command;
 			cmd.Params = args;
 
 			lock (threadCommands)
 			{
 				if (cmd.Type == ThreadCommandType.Stop)
 				{
 					foreach (ThreadCommand c in threadCommands)
 						if (c.Type == ThreadCommandType.LoadTexture)
 							(c.Params[0] as SceneNode).Drop();
 					foreach (ThreadCommand c in threadCommands)
 						if (c.Type == ThreadCommandType.LoadTexture)
 							(c.Params[0] as SceneNode).Drop();
 
 					threadCommands.Clear();
 				}
 
 				if (topPriority && threadCommands.Count > 0)
 				{
 					ThreadCommand[] a = threadCommands.ToArray();
 					threadCommands.Clear();
 					threadCommands.Enqueue(cmd);
 					for (int i = 0; i < a.Length; i++)
 						threadCommands.Enqueue(a[i]);
 					for (int i = 0; i < a.Length; i++)
 						threadCommands.Enqueue(a[i]);
 				}
 				else
 				{
 					threadCommands.Enqueue(cmd);
 				}
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L10.ImageBrowser\TextureManager.cs" startline="144" endline="176"><![CDATA[
 
 		void thread_Main()
 		{
 			irrDevice.Logger.Log(Thread.CurrentThread.Name, "Started", LogLevel.Information);
 
 			while (true)
 			{
 				ThreadCommand cmd = thread_GetNextCommand();
 
 				if (cmd == null)
 				{
 					Thread.Sleep(1);
 					continue;
 				}
 
 				switch (cmd.Type)
 				{
 					case ThreadCommandType.Stop
 						irrDevice.Logger.Log(Thread.CurrentThread.Name, "Finished", LogLevel.Information);
 						return;
 
 					case ThreadCommandType.LoadTexture
 						irrDevice.Logger.Log(Thread.CurrentThread.Name, "Loading " + (cmd.Params[1] as string) + "|" + (cmd.Params[2] as Dimension2Di), LogLevel.Information);
 						thread_LoadTexture(cmd.Params[0] as SceneNode, cmd.Params[1] as string, cmd.Params[2] as Dimension2Di);
 						break;
 
 					case ThreadCommandType.UnloadTexture
 						irrDevice.Logger.Log(Thread.CurrentThread.Name, "Unloading " + (cmd.Params[0] as string), LogLevel.Information);
 						thread_UnloadTexture(cmd.Params[0] as string);
 						break;
 				}
 			}
 			while (true)
 			{
 				ThreadCommand cmd = thread_GetNextCommand();
 
 				if (cmd == null)
 				{
 					Thread.Sleep(1);
 					continue;
 				}
 
 				switch (cmd.Type)
 				{
 					case ThreadCommandType.Stop
 						irrDevice.Logger.Log(Thread.CurrentThread.Name, "Finished", LogLevel.Information);
 						return;
 
 					case ThreadCommandType.LoadTexture
 						irrDevice.Logger.Log(Thread.CurrentThread.Name, "Loading " + (cmd.Params[1] as string) + "|" + (cmd.Params[2] as Dimension2Di), LogLevel.Information);
 						thread_LoadTexture(cmd.Params[0] as SceneNode, cmd.Params[1] as string, cmd.Params[2] as Dimension2Di);
 						break;
 
 					case ThreadCommandType.UnloadTexture
 						irrDevice.Logger.Log(Thread.CurrentThread.Name, "Unloading " + (cmd.Params[0] as string), LogLevel.Information);
 						thread_UnloadTexture(cmd.Params[0] as string);
 						break;
 				}
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L10.ImageBrowser\TextureManager.cs" startline="177" endline="196"><![CDATA[
 
 		ThreadCommand thread_GetNextCommand()
 		{
 			ThreadCommand cmd = null;
 
 			lock (threadCommands)
 			{
 				if (threadCommands.Count > 0)
 				{
 					// We do first Peek and only then Dequeue, because we do not want Stop command to be processed only by one thread (so other will not get this command)
 
 					cmd = threadCommands.Peek();
 
 					if (cmd.Type != ThreadCommandType.Stop)
 						threadCommands.Dequeue();
 				}
 			}
 
 			return cmd;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L10.ImageBrowser\TextureManager.cs" startline="197" endline="237"><![CDATA[
 
 		void thread_LoadTexture(SceneNode node, string path, Dimension2Di size)
 		{
 			Texture t;
 			Dimension2Di si;
 			Image i = irrDevice.DriverNoCheck.CreateImage(path);
 
 			if (i != null)
 			{
 				Image j = irrDevice.DriverNoCheck.CreateImage(ColorFormat.A8R8G8B8, size);
 				i.CopyToScaling(j);
 
 				irrDevice.Lock();
 				t = irrDevice.Driver.AddTexture(path + "|" + size.ToString(), j);
 				irrDevice.Unlock();
 
 				si = i.Dimension;
 
 				i.Drop();
 				j.Drop();
 
 				lock (loadedTextures)
 				{
 					loadedTextures.Add(t.Name.Path);
 				}
 			}
 			else
 			{
 				t = noPreviewTexture;
 				si = noPreviewTexture.Size;
 			}
 
 			irrDevice.Lock();
 			node.SetMaterialTexture(0, t);
 			irrDevice.Unlock();
 
 			if (OnTextureLoaded != null)
 				OnTextureLoaded(node, t, si);
 
 			node.Drop();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L10.ImageBrowser\TextureManager.cs" startline="238" endline="248"><![CDATA[
 
 		void thread_UnloadTexture(string path)
 		{
 			irrDevice.Lock();
 
 			Texture t = irrDevice.Driver.FindTexture(path);
 			if (t != null)
 				irrDevice.Driver.RemoveTexture(t);
 
 			irrDevice.Unlock();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L10.ImageBrowser\TextureManager.cs" startline="21" endline="21"><![CDATA[
 		public IrrlichtDevice Device { get { if (!IsLocked()) throw new InvalidOperationException(); else return device; } }
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L10.ImageBrowser\TextureManager.cs" startline="22" endline="22"><![CDATA[
 		public VideoDriver Driver { get { if (!IsLocked()) throw new InvalidOperationException(); else return device.VideoDriver; } }
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L10.ImageBrowser\TextureManager.cs" startline="23" endline="23"><![CDATA[
 		public VideoDriver DriverNoCheck { get { return device.VideoDriver; } } // this one used for creating software images
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L10.ImageBrowser\TextureManager.cs" startline="24" endline="24"><![CDATA[
 		public SceneManager Scene { get { return device.SceneManager; } }
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L10.ImageBrowser\TextureManager.cs" startline="25" endline="25"><![CDATA[
 		public GUIEnvironment GUI { get { return device.GUIEnvironment; } }
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L10.ImageBrowser\TextureManager.cs" startline="26" endline="26"><![CDATA[
 		public IrrlichtLime.Timer Timer { get { return device.Timer; } }
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L10.ImageBrowser\TextureManager.cs" startline="27" endline="27"><![CDATA[
 		public Randomizer Randomizer { get { return device.Randomizer; } }
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L10.ImageBrowser\TextureManager.cs" startline="28" endline="28"><![CDATA[
 		public Logger Logger { get { return device.Logger; } }
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L10.ImageBrowser\TextureManager.cs" startline="29" endline="45"><![CDATA[
 
 		public void Lock()
 		{
 			while (true)
 			{
 				Thread.Sleep(1);
 
 				lock (locker)
 				{
 					if (locked)
 						continue;
 
 					locked = true;
 					break;
 			while (true)
 			{
 				Thread.Sleep(1);
 
 				lock (locker)
 				{
 					if (locked)
 						continue;
 
 					locked = true;
 					break;
 				}
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L10.ImageBrowser\TextureManager.cs" startline="46" endline="56"><![CDATA[
 
 		public void Unlock()
 		{
 			lock (locker)
 			{
 				if (!locked)
 					throw new InvalidOperationException();
 
 				locked = false;
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L10.ImageBrowser\TextureManager.cs" startline="57" endline="64"><![CDATA[
 
 		public bool IsLocked()
 		{
 			lock (locker)
 			{
 				return locked;
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L10.ImageBrowser\TextureManager.cs" startline="65" endline="69"><![CDATA[
 
 		public void CreateDevice(DriverType driverType, Dimension2Di windowSize)
 		{
 			device = IrrlichtDevice.CreateDevice(driverType, windowSize);
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L10.ImageBrowser\TextureManager.cs" startline="70" endline="77"><![CDATA[
 
 		public void Drop()
 		{
 			if (IsLocked())
 				throw new InvalidOperationException();
 
 			device.Drop();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L10.ImageBrowser\TextureManager.cs" startline="17" endline="18"><![CDATA[
 		object locker = new object();
 		bool locked = false;
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L10.ImageBrowser\AnimationManager.cs" startline="15" endline="20"><![CDATA[
 		List<AnimationItem> animationItems = new List<AnimationItem>();
 
 		public AnimationManager(IrrDevice irrDevice)
 		{
 			this.irrDevice = irrDevice;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L10.ImageBrowser\AnimationManager.cs" startline="21" endline="56"><![CDATA[
 
 		public void Add(SceneNode node, uint duration, Vector3Df targetPosition, Vector3Df targetRotation, Vector3Df targetScale)
 		{
 			Remove(node);
 
 			irrDevice.Timer.Tick();
 
 			AnimationItem a = new AnimationItem();
 			a.Node = node;
 			a.Node.Grab();
 			a.Duration = duration;
 			a.StartTime = irrDevice.Timer.Time;
 			
 			if (targetPosition != null)
 			{
 				a.TargetPosition = targetPosition;
 				a.StartPosition = node.Position;
 			}
 
 			if (targetRotation != null)
 			{
 				a.TargetRotation = targetRotation;
 				a.StartRotation = node.Rotation;
 			}
 
 			if (targetScale != null)
 			{
 				a.TargetScale = targetScale;
 				a.StartScale = node.Scale;
 			}
 
 			lock (animationItems)
 			{
 				animationItems.Add(a);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L10.ImageBrowser\AnimationManager.cs" startline="57" endline="76"><![CDATA[
 
 		public void Remove(SceneNode node)
 		{
 			lock (animationItems)
 			{
 				int i = 0;
 				for (i = 0; i < animationItems.Count; i++)
 				{
 					if (animationItems[i].Node == node)
 						break;
 				}
 				for (i = 0; i < animationItems.Count; i++)
 				{
 					if (animationItems[i].Node == node)
 						break;
 				}
 
 				if (i < animationItems.Count)
 				{
 					setFinalAnimationState(i);
 					animationItems[i].Node.Drop();
 					animationItems.RemoveAt(i);
 				}
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L10.ImageBrowser\AnimationManager.cs" startline="77" endline="91"><![CDATA[
 
 		public bool IsAnimated(SceneNode node)
 		{
 			lock (animationItems)
 			{
 				int i = 0;
 				for (i = 0; i < animationItems.Count; i++)
 				{
 					if (animationItems[i].Node == node)
 						break;
 				}
 				for (i = 0; i < animationItems.Count; i++)
 				{
 					if (animationItems[i].Node == node)
 						break;
 				}
 
 				return i < animationItems.Count;
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L10.ImageBrowser\AnimationManager.cs" startline="92" endline="141"><![CDATA[
 
 		public void Run()
 		{
 			lock (animationItems)
 			{
 				uint t = irrDevice.Timer.Time;
 				List<int> candidatesToBeRemoved = new List<int>();
 
 				for (int i = 0; i < animationItems.Count; i++)
 				{
 					AnimationItem a = animationItems[i];
 					if (t >= a.StartTime + a.Duration)
 					{
 						setFinalAnimationState(i);
 						candidatesToBeRemoved.Add(i);
 					}
 					else
 					{
 						double d = (double)(t - a.StartTime) / a.Duration;
 
 						if (a.TargetPosition != null)
 						{
 							Vector3Df v = a.Node.Position;
 							v.Interpolate(a.TargetPosition, a.StartPosition, d);
 							a.Node.Position = v;
 						}
 
 						if (a.TargetRotation != null)
 						{
 							Vector3Df v = a.Node.Rotation;
 							v.Interpolate(a.TargetRotation, a.StartRotation, d);
 							a.Node.Rotation = v;
 						}
 
 						if (a.TargetScale != null)
 						{
 							Vector3Df v = a.Node.Scale;
 							v.Interpolate(a.TargetScale, a.StartScale, d);
 							a.Node.Scale = v;
 						}
 					}
 				}
 				for (int i = 0; i < animationItems.Count; i++)
 				{
 					AnimationItem a = animationItems[i];
 					if (t >= a.StartTime + a.Duration)
 					{
 						setFinalAnimationState(i);
 						candidatesToBeRemoved.Add(i);
 					}
 					else
 					{
 						double d = (double)(t - a.StartTime) / a.Duration;
 
 						if (a.TargetPosition != null)
 						{
 							Vector3Df v = a.Node.Position;
 							v.Interpolate(a.TargetPosition, a.StartPosition, d);
 							a.Node.Position = v;
 						}
 
 						if (a.TargetRotation != null)
 						{
 							Vector3Df v = a.Node.Rotation;
 							v.Interpolate(a.TargetRotation, a.StartRotation, d);
 							a.Node.Rotation = v;
 						}
 
 						if (a.TargetScale != null)
 						{
 							Vector3Df v = a.Node.Scale;
 							v.Interpolate(a.TargetScale, a.StartScale, d);
 							a.Node.Scale = v;
 						}
 					}
 				}
 
 				for (int i = candidatesToBeRemoved.Count - 1; i >= 0; i--)
 				{
 					animationItems[candidatesToBeRemoved[i]].Node.Drop();
 					animationItems.RemoveAt(candidatesToBeRemoved[i]);
 				}
 				for (int i = candidatesToBeRemoved.Count - 1; i >= 0; i--)
 				{
 					animationItems[candidatesToBeRemoved[i]].Node.Drop();
 					animationItems.RemoveAt(candidatesToBeRemoved[i]);
 				}
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L10.ImageBrowser\AnimationManager.cs" startline="142" endline="152"><![CDATA[
 
 		public void Clear()
 		{
 			lock (animationItems)
 			{
 				for (int i = 0; i < animationItems.Count; i++)
 					animationItems[i].Node.Drop();
 				for (int i = 0; i < animationItems.Count; i++)
 					animationItems[i].Node.Drop();
 
 				animationItems.Clear();
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L10.ImageBrowser\AnimationManager.cs" startline="153" endline="166"><![CDATA[
 
 		void setFinalAnimationState(int i)
 		{
 			AnimationItem a = animationItems[i];
 
 			if (a.TargetPosition != null)
 				a.Node.Position = a.TargetPosition;
 
 			if (a.TargetRotation != null)
 				a.Node.Rotation = a.TargetRotation;
 
 			if (a.TargetScale != null)
 				a.Node.Scale = a.TargetScale;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L10.ImageBrowser\AnimationManager.cs" startline="43" endline="118"><![CDATA[
 		{
 			irr = new IrrDevice();
 			irr.CreateDevice(DriverType.Direct3D9, new Dimension2Di(1024, 600));
 			animationManager = new AnimationManager(irr);
 			textureManager = new TextureManager(irr);
 			textureManager.OnTextureLoaded += new TextureManager.TextureLoadedDelegate(textureManager_OnTextureLoaded);
 
 			irr.Lock();
 
 			irr.Device.SetWindowResizable(true);
 			irr.Device.OnEvent += new IrrlichtDevice.EventHandler(Device_OnEvent);
 
 			irr.Scene.AddCameraSceneNode();
 			irr.Scene.AddEmptySceneNode(null, PreviewRootNodeId);
 			irr.Scene.AddHillPlaneMesh(PreviewPlateMeshName, new Dimension2Df(PreviewPlateSize), new Dimension2Di(1));
 
 			initUI();
 			openFolder(Path.GetFullPath("../../media"));
 
 			int lastFPS = -1;
 			while (irr.Device.Run())
 			{
 				irr.Driver.BeginScene(true, true, new Color(0x112233));
 
 				irr.Scene.DrawAll();
 
 				if (selectedNode == null)
 					irr.GUI.DrawAll();
 
 				drawScrollPosition();
 				drawTextureManagerActivity();
 				drawPreviewPlateTooltip();
 
 				irr.Driver.EndScene();
 
 				int fps = irr.Driver.FPS;
 				if (lastFPS != fps)
 				{
 					irr.Device.SetWindowCaption(String.Format(
 						"Image Browser - Irrlicht Lime [{0}] fps
 						irr.Driver.Name, fps));
 
 					lastFPS = fps;
 				}
 
 				irr.Unlock();
 
 				animationManager.Run();
 
 				if (wantChangeFolder)
 				{
 					wantChangeFolder = false;
 					string p = irr.GUI.RootElement.GetElementFromID(CurrentFolderStaticTextId).Text;
 					System.Windows.Forms.FolderBrowserDialog d = new System.Windows.Forms.FolderBrowserDialog();
 					d.SelectedPath = p;
 					if (d.ShowDialog() == System.Windows.Forms.DialogResult.OK &&
 						d.SelectedPath != p)
 					{
 						openFolder(d.SelectedPath);
 					}
 				}
 
 				if (wantUpdateActiveCameraAspectRatio)
 				{
 					wantUpdateActiveCameraAspectRatio = false;
 					irr.Scene.ActiveCamera.AspectRatio = (float)irr.DriverNoCheck.ScreenSize.Width / irr.DriverNoCheck.ScreenSize.Height;
 				}
 
 				irr.Lock();
 			}
 			while (irr.Device.Run())
 			{
 				irr.Driver.BeginScene(true, true, new Color(0x112233));
 
 				irr.Scene.DrawAll();
 
 				if (selectedNode == null)
 					irr.GUI.DrawAll();
 
 				drawScrollPosition();
 				drawTextureManagerActivity();
 				drawPreviewPlateTooltip();
 
 				irr.Driver.EndScene();
 
 				int fps = irr.Driver.FPS;
 				if (lastFPS != fps)
 				{
 					irr.Device.SetWindowCaption(String.Format(
 						"Image Browser - Irrlicht Lime [{0}] fps
 						irr.Driver.Name, fps));
 
 					lastFPS = fps;
 				}
 
 				irr.Unlock();
 
 				animationManager.Run();
 
 				if (wantChangeFolder)
 				{
 					wantChangeFolder = false;
 					string p = irr.GUI.RootElement.GetElementFromID(CurrentFolderStaticTextId).Text;
 					System.Windows.Forms.FolderBrowserDialog d = new System.Windows.Forms.FolderBrowserDialog();
 					d.SelectedPath = p;
 					if (d.ShowDialog() == System.Windows.Forms.DialogResult.OK &&
 						d.SelectedPath != p)
 					{
 						openFolder(d.SelectedPath);
 					}
 				}
 
 				if (wantUpdateActiveCameraAspectRatio)
 				{
 					wantUpdateActiveCameraAspectRatio = false;
 					irr.Scene.ActiveCamera.AspectRatio = (float)irr.DriverNoCheck.ScreenSize.Width / irr.DriverNoCheck.ScreenSize.Height;
 				}
 
 				irr.Lock();
 			}
 
 			irr.Unlock();
 			textureManager.Stop();
 			animationManager.Clear();
 			irr.Drop();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L10.ImageBrowser\AnimationManager.cs" startline="119" endline="134"><![CDATA[
 
 		static void textureManager_OnTextureLoaded(SceneNode node, Texture texture, Dimension2Di sourceDimension)
 		{
 			if (texture.Size == PreviewTextureSize || texture.Name.Path == "NoPreviewTexture")
 			{
 				float a = (float)sourceDimension.Height / sourceDimension.Width;
 				animationManager.Remove(node);
 				animationManager.Add(node, 400, new Vector3Df(node.Position.X, 0, node.Position.Z), null, new Vector3Df(1, 1, a));
 
 				if (texture.Name.Path != "NoPreviewTexture")
 				{
 					previewPlateInfo[node.ID] += "\n" + sourceDimension.ToString();
 					node.ID |= SelectableNodeIdFlag;
 				}
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L10.ImageBrowser\AnimationManager.cs" startline="135" endline="281"><![CDATA[
 
 		static bool Device_OnEvent(Event evnt)
 		{
 			if (evnt.Type == EventType.GUI &&
 				evnt.GUI.Type == GUIEventType.ButtonClicked &&
 				evnt.GUI.Caller.ID == ChooseFolderButtonId)
 			{
 				wantChangeFolder = true;
 				return true;
 			}
 
 			if (evnt.Type == EventType.Mouse &&
 				evnt.Mouse.Type == MouseEventType.Wheel &&
 				selectedNode == null)
 			{
 				Vector3Df p = irr.Scene.ActiveCamera.Position;
 				Vector3Df t = irr.Scene.ActiveCamera.Target;
 				float s = irr.Scene.ActiveCamera.Position.Z + evnt.Mouse.Wheel * 16;
 
 				if (s < 0)
 					s = 0;
 
 				if (s > maxScrollPosition)
 					s = maxScrollPosition;
 
 				t.Z = t.Z - p.Z + s;
 				p.Z = s;
 
 				irr.Scene.ActiveCamera.Position = p;
 				irr.Scene.ActiveCamera.Target = t;
 
 				return true;
 			}
 
 			if (evnt.Type == EventType.Mouse &&
 				evnt.Mouse.Type == MouseEventType.Move &&
 				selectedNode == null)
 			{
 				SceneNode n =
 					irr.Scene.SceneCollisionManager.GetSceneNodeFromScreenCoordinatesBB(
 					new Vector2Di(evnt.Mouse.X, evnt.Mouse.Y),
 					0,
 					irr.Scene.GetSceneNodeFromID(PreviewRootNodeId));
 
 				if (hoveredNode != n)
 				{
 					if (hoveredNode != null)
 					{
 						animationManager.Remove(hoveredNode);
 
 						animationManager.Add(
 							hoveredNode,
 							500,
 							new Vector3Df(hoveredNode.Position.X, hoveredNode.Position.Y - 15, hoveredNode.Position.Z),
 							new Vector3Df(0),
 							hoveredNode.Scale / 1.5f);
 					}
 
 					if (n != null)
 					{
 						animationManager.Remove(n);
 
 						animationManager.Add(
 							n,
 							40,
 							new Vector3Df(n.Position.X, n.Position.Y + 15, n.Position.Z),
 							new Vector3Df(-20, 0, 0),
 							n.Scale * 1.5f);
 					}
 
 					hoveredNode = n;
 				}
 
 				return true;
 			}
 
 			if (evnt.Type == EventType.Mouse &&
 				evnt.Mouse.Type == MouseEventType.LeftUp &&
 				hoveredNode != null &&
 				(hoveredNode.ID & SelectableNodeIdFlag) == SelectableNodeIdFlag &&
 				selectedNode == null)
 			{
 				animationManager.Remove(hoveredNode);
 
 				Mesh m = irr.Scene.MeshCache.GetMesh(PreviewPlateMeshName);
 				MeshSceneNode n = irr.Scene.AddMeshSceneNode(m);
 				n.SetMaterialFlag(MaterialFlag.Lighting, false);
 				n.Position = hoveredNode.Position;
 				n.Rotation = hoveredNode.Rotation;
 				n.Scale = hoveredNode.Scale;
 
 				string t = hoveredNode.GetMaterial(0).GetTexture(0).Name.Path.Split('|')[0];
 
 				Dimension2Di d = new Dimension2Di(2048);
 				if (d.Area > irr.Driver.MaxTextureSize.Area)
 					d = irr.Driver.MaxTextureSize;
 
 				n.SetMaterialTexture(0, hoveredNode.GetMaterial(0).GetTexture(0));
 				textureManager.LoadTexture(n, t, d, true);
 
 				animationManager.Add(
 					n,
 					200,
 					irr.Scene.ActiveCamera.AbsolutePosition + new Vector3Df(0, -48, 40), // TODO
 					new Vector3Df(-39.85f, 0, 0), // using current active camera info (like view matrix or projection one)
 					n.Scale * ((irr.Scene.ActiveCamera.FOV - 0.125f) / n.Scale.Z));
 
 				selectedNode = n;
 				hoveredNode.Visible = false;
 				irr.GUI.RootElement.GetElementFromID(ChooseFolderButtonId).Enabled = false;
 
 				return true;
 			}
 
 			if (evnt.Type == EventType.Mouse &&
 				evnt.Mouse.Type == MouseEventType.LeftUp &&
 				selectedNode != null &&
 				selectedNode.GetMaterial(0).GetTexture(0) != hoveredNode.GetMaterial(0).GetTexture(0))
 			{
 				if (animationManager.IsAnimated(selectedNode))
 					return true;
 
 				Texture t = selectedNode.GetMaterial(0).GetTexture(0);
 				if (t != null)
 				{
 					string s = t.Name.Path;
 					selectedNode.SetMaterialTexture(0, null);
 					textureManager.UnloadTexture(s);
 				}
 
 				selectedNode.Remove();
 				selectedNode = null;
 
 				hoveredNode.Visible = true;
 				irr.GUI.RootElement.GetElementFromID(ChooseFolderButtonId).Enabled = true;
 
 				return true;
 			}
 
 			if (evnt.Type == EventType.Log &&
 				evnt.Log.Text.StartsWith("Resizing window"))
 			{
 				wantUpdateActiveCameraAspectRatio = true;
 			}
 
 			return false;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L10.ImageBrowser\AnimationManager.cs" startline="282" endline="292"><![CDATA[
 
 		static void initUI()
 		{
 			irr.GUI.Skin.SetFont(irr.GUI.GetFont("../../media/fontlucida.png"));
 
 			irr.GUI.AddButton(new Recti(20, 10, 160, 40), null, ChooseFolderButtonId, "Choose folder...");
 
 			GUIStaticText t = irr.GUI.AddStaticText("???", new Recti(180, 10, irr.Device.VideoDriver.ScreenSize.Width - 20, 40), false, false, null, CurrentFolderStaticTextId);
 			t.SetTextAlignment(GUIAlignment.UpperLeft, GUIAlignment.Center);
 			t.OverrideColor = Color.OpaqueWhite;
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L10.ImageBrowser\AnimationManager.cs" startline="293" endline="338"><![CDATA[
 
 		static void openFolder(string newFolder)
 		{
 			textureManager.Stop();
 			textureManager.Start(TextureManagerThreadCount);
 			textureManager.EnqueueUnloadingOfAllLoadedTextures();
 			animationManager.Clear();
 			previewPlateInfo.Clear();
 
 			irr.GUI.RootElement.GetElementFromID(CurrentFolderStaticTextId).Text = newFolder;
 
 			SceneNode p = irr.Scene.GetSceneNodeFromID(PreviewRootNodeId);
 			p.RemoveChildren();
 
 			int r = 10;
 			float x = 0, z = 0;
 			Mesh m = irr.Scene.MeshCache.GetMesh(PreviewPlateMeshName);
 			string[] f = Directory.GetFiles(newFolder, "*.*", SearchOption.TopDirectoryOnly);
 			for (int i = 0; i < f.Length; i++)
 			{
 				x += PreviewPlateSize * 1.1f;
 				if ((i % r) == 0)
 				{
 					x = 0;
 					z += PreviewPlateSize * 1.1f;
 				}
 
 				MeshSceneNode n = irr.Scene.AddMeshSceneNode(m, p, i | PreviewPlateNodeIdFlag);
 				n.SetMaterialFlag(MaterialFlag.Lighting, false);
 				n.Position = new Vector3Df(x, 1000, z);
 
 				textureManager.LoadTexture(n, f[i], PreviewTextureSize);
 
 				TriangleSelector s = irr.Scene.CreateTriangleSelector(n.Mesh, n);
 				n.TriangleSelector = s;
 				s.Drop();
 
 				previewPlateInfo.Add(n.ID, Path.GetFileName(f[i]));
 			}
 			for (int i = 0; i < f.Length; i++)
 			{
 				x += PreviewPlateSize * 1.1f;
 				if ((i % r) == 0)
 				{
 					x = 0;
 					z += PreviewPlateSize * 1.1f;
 				}
 
 				MeshSceneNode n = irr.Scene.AddMeshSceneNode(m, p, i | PreviewPlateNodeIdFlag);
 				n.SetMaterialFlag(MaterialFlag.Lighting, false);
 				n.Position = new Vector3Df(x, 1000, z);
 
 				textureManager.LoadTexture(n, f[i], PreviewTextureSize);
 
 				TriangleSelector s = irr.Scene.CreateTriangleSelector(n.Mesh, n);
 				n.TriangleSelector = s;
 				s.Drop();
 
 				previewPlateInfo.Add(n.ID, Path.GetFileName(f[i]));
 			}
 
 			irr.Scene.ActiveCamera.Position = new Vector3Df(PreviewPlateSize * (r - 1) * 1.1f / 2, 6 * PreviewPlateSize, 0);
 			irr.Scene.ActiveCamera.Target = new Vector3Df(irr.Scene.ActiveCamera.Position.X, 0, PreviewPlateSize * 5);
 			maxScrollPosition = (f.Length / r) * PreviewPlateSize * 1.1f;
 
 			tasksAddedToTextureManager = textureManager.GetCommandQueueLength();
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L10.ImageBrowser\AnimationManager.cs" startline="339" endline="359"><![CDATA[
 
 		static void drawScrollPosition()
 		{
 			if (selectedNode != null)
 				return;
 
 			if (maxScrollPosition < 1)
 				return;
 
 			VideoDriver v = irr.Driver;
 			if (v.ScreenSize.Height < 200)
 				return;
 
 			float p = irr.Scene.ActiveCamera.Position.Z / maxScrollPosition;
 
 			v.Draw2DLine(v.ScreenSize.Width - 26, 80, v.ScreenSize.Width - 26, v.ScreenSize.Height - 80, new Color(0x88446699));
 
 			float y = (v.ScreenSize.Height - 80 - 80 - 40) * (1.0f - p);
 			Recti r = new Recti(v.ScreenSize.Width - 30, (int)y + 80, v.ScreenSize.Width - 23, (int)y + 80 + 40);
 			v.Draw2DRectangle(r, new Color(0x88446699));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L10.ImageBrowser\AnimationManager.cs" startline="360" endline="387"><![CDATA[
 
 		static void drawTextureManagerActivity()
 		{
 			if (selectedNode != null)
 				return;
 
 			if (tasksAddedToTextureManager == 0)
 				return;
 
 			int l = textureManager.GetCommandQueueLength();
 			if (l == 0)
 			{
 				tasksAddedToTextureManager = 0;
 				return;
 			}
 
 			VideoDriver v = irr.Driver;
 			float p = (tasksAddedToTextureManager - l) / (float)tasksAddedToTextureManager;
 			if (p > 1)
 				p = 1;
 
 			Recti r = new Recti(v.ScreenSize.Width - 140, 20, v.ScreenSize.Width - 24, 30);
 			v.Draw2DRectangleOutline(r, new Color(0x88446699));
 
 			r.Inflate(-4, -4);
 			r.LowerRightCorner = new Vector2Di(r.UpperLeftCorner.X + (int)(r.Width * p), r.LowerRightCorner.Y);
 			v.Draw2DRectangle(r, new Color(0x88446699));
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L10.ImageBrowser\AnimationManager.cs" startline="388" endline="430"><![CDATA[
 
 		static void drawPreviewPlateTooltip()
 		{
 			if (hoveredNode == null ||
 				!hoveredNode.Visible)
 				return;
 
 			int k = hoveredNode.ID;
 
 			Texture t = hoveredNode.GetMaterial(0).GetTexture(0);
 			if (t != null && t.Name.Path != "NoPreviewTexture")
 				k = hoveredNode.ID & (0xFFFFFFF ^ SelectableNodeIdFlag);
 
 			string s = previewPlateInfo.ContainsKey(k)
 				? previewPlateInfo[k]
 				
 
 			if (s != null)
 			{
 				Vector2Di p = irr.Device.CursorControl.Position + new Vector2Di(16);
 				GUIFont f = irr.GUI.Skin.GetFont(GUIDefaultFont.Default);
 
 				Dimension2Di d = f.GetDimension(s);
 				d.Inflate(16, 12);
 
 				Recti r = new Recti(p, d);
 				VideoDriver v = irr.Driver;
 
 				int ax = r.LowerRightCorner.X - v.ScreenSize.Width;
 				int ay = r.LowerRightCorner.Y - v.ScreenSize.Height;
 				if (ax > 0 || ay > 0)
 				{
 					if (ax < 0) ax = 0;
 					if (ay < 0) ay = 0;
 					r.Offset(-ax, -ay);
 				}
 
 				v.Draw2DRectangle(r, new Color(0xbb223355));
 				v.Draw2DRectangleOutline(r, new Color(0xbb445577));
 
 				f.Draw(s, r.UpperLeftCorner + new Vector2Di(8, 6), Color.OpaqueYellow);
 			}
 		}
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L10.ImageBrowser\AnimationManager.cs" startline="2147483647" endline="2147483647"><![CDATA[
]]></source>
<source file="C:\Users\faa634\Desktop\c vb\C++\IrrlichtLime-1.1\examples\L10.ImageBrowser\AnimationManager.cs" startline="22" endline="39"><![CDATA[
 		static bool wantChangeFolder = false;
 		static bool wantUpdateActiveCameraAspectRatio = false;
 		static Dimension2Di PreviewTextureSize = new Dimension2Di(128);
 		static float maxScrollPosition = 0;
 		static int tasksAddedToTextureManager = 0;
 
 		const int TextureManagerThreadCount = 4;
 		const int PreviewPlateSize = 80;
 		const int PreviewRootNodeId = 1001;
 		const int ChooseFolderButtonId = 1002;
 		const int CurrentFolderStaticTextId = 1003;
 		const string PreviewPlateMeshName = "previewPlate";
 		const int PreviewPlateNodeIdFlag = 1 << 17;
 		const int SelectableNodeIdFlag = 1 << 18;
 
 		static SceneNode hoveredNode;
 		static SceneNode selectedNode;
 		static Dictionary<int, string> previewPlateInfo = new Dictionary<int, string>();
]]></source>
</source_elements></project>
